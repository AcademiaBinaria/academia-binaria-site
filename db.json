{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/ng2-Arbol-de-componentes.jpg","path":"images/ng2-Arbol-de-componentes.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Arbol-de-dependencias.jpg","path":"images/ng2-Arbol-de-dependencias.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Component-DataFlow.jpg","path":"images/ng2-Component-DataFlow.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-DI-component-directive.jpg","path":"images/ng2-DI-component-directive.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-DI-component-service.jpg","path":"images/ng2-DI-component-service.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Flujo-de-datos.jpg","path":"images/ng2-Flujo-de-datos.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2Component--1-.jpg","path":"images/ng2Component--1-.jpg","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_0_cli_1-5.jpg","path":"images/tutorial-angular-5_0_cli_1-5.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_0_cli_1-5.jpg","path":"css/images/angular-5_0_cli_1-5.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular.jpg","path":"css/images/angular.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/typescript.jpg","path":"css/images/typescript.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/tutorial-angular-5_1_base.jpg","path":"images/tutorial-angular-5_1_base.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/angular-5_1_Base.jpg","path":"css/images/angular-5_1_Base.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/icarus/icarus.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509471088000},{"_id":"source/.DS_Store","hash":"39d94912a63ec708e3af99df0204f2b60fb1105d","modified":1510067571000},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1509471088000},{"_id":"themes/icarus/README.md","hash":"acd2d5d12820b065345d68f88bfc3a739f8d8ae2","modified":1509471088000},{"_id":"themes/icarus/_config.yml","hash":"d21bcc3d0374059f488af2b5d20c537ce066b6f3","modified":1510067601000},{"_id":"themes/icarus/_config.yml.example","hash":"96b245d58abb6e2a7f59edfccd93dedbea48821d","modified":1509471088000},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1509471088000},{"_id":"source/Contacto/index.md","hash":"5500c4aca9dc08368bcf34ac1f22c345bae3bacb","modified":1508951898000},{"_id":"source/Cookies/index.md","hash":"195ff6a96d0c1b04d3e3db901cf449c8e1b9424e","modified":1508951901000},{"_id":"source/Cursos/index.md","hash":"777a761c937ab20ab772a69f2fd42c0923ef93b1","modified":1508951907000},{"_id":"source/Noticias-Junio-2016/index.md","hash":"e4c2786e115d921f4b1265aeebe8f2f09a1a5a3a","modified":1508951913000},{"_id":"source/Promociones/index.md","hash":"48735327adaf1d69bb460321dc17a4923708a2c3","modified":1508951916000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1508953073000},{"_id":"source/_posts/7-formas-de-incluir-Bootstrap-en-nuestro-proyecto.md","hash":"654940cad22dc28ed86db1536cf53bdc738651c2","modified":1509380595000},{"_id":"source/_posts/Angular2-DI-Inyeccion-de-dependencias.md","hash":"95288eaece1f404ce4d73be17cd788ad3256eb9c","modified":1510067601000},{"_id":"source/_posts/Angular2-la-evolucion-de-la-plataforma.md","hash":"1e5c0d93ed0df9e9ba219cb4121c48e5054676f0","modified":1510067601000},{"_id":"source/_posts/Base-para-aplicacion-Angular-5.md","hash":"fb09581cab031eb82125398ec2f0000882c16e24","modified":1510245042000},{"_id":"source/_posts/Codigo-de-ejemplo-curso-de-Angular2.md","hash":"ff31cd6a5ab7ae705c8c955ada5ce594d5e86f28","modified":1510067601000},{"_id":"source/_posts/Componentes-los-bloques-de-construccion-de-Angular2.md","hash":"4b5c6fd0c16319a8a036396850ef3a0ccaa762f8","modified":1510067601000},{"_id":"source/_posts/Comunicaciones-http-observables-con-Angular2.md","hash":"e1f785292679e5372337bf137a319935e9cf5525","modified":1510067601000},{"_id":"source/_posts/DataBinding-el-flujo-de-datos-de-Angular2.md","hash":"a095421f371c92ec4c88c5e08e990d7598e3608b","modified":1510067601000},{"_id":"source/_posts/Enrutador-de-componentes-con-Angular2-el-nuevo-SPA.md","hash":"b8e777e11b1a4ae16f471cdb1a4db57d98e61789","modified":1510067601000},{"_id":"source/_posts/Formularios-de-datos-en-Angular2.md","hash":"2bfdde7bf7c581d48d3fe34652fd99ea7262f424","modified":1510077926000},{"_id":"source/_posts/Hola-Angular-5-CLI.md","hash":"8a0dcab9870fa5305a97b77a5ab0f6a9ad0e6844","modified":1510156442000},{"_id":"source/_posts/Hola-Mundo-Angular-2.md","hash":"973667183ed668909e614af7c872b9581958b7dd","modified":1510067601000},{"_id":"source/_posts/Introduccion-a-Bootstrap.md","hash":"49f7abd4b53f20f1cf9fa643d7398d2d08503e01","modified":1509380595000},{"_id":"source/_posts/Introduccion-a-MongoDB.md","hash":"0aad61ebfcb66f3feea5e57c8da51c3aca2d0dc3","modified":1509380595000},{"_id":"source/_posts/Node-6-0-0-actualizacion-con-nvm.md","hash":"e2bbc883fb662881852ed7f020373a1b585a9534","modified":1509007337000},{"_id":"source/_posts/Para-que-puedo-usar-NodeJS.md","hash":"4d4dda4472e934d3cf73bcca213d8b107d5778d8","modified":1509007337000},{"_id":"source/_posts/Por-que-AngularJS.md","hash":"b504d64edcb8c6e3a7712f9f5459462d53c3c7b2","modified":1509007179000},{"_id":"source/_posts/Soluciones-BackEnd-2016.md","hash":"f54e6d8448108f3c20c1f879dd4bdb2fdad59c62","modified":1509007179000},{"_id":"source/_posts/Soluciones-FrontEnd-2016.md","hash":"16f81ae3da7db427bfa16e531a1811b8f0d3c95a","modified":1509007179000},{"_id":"source/_posts/TypeScript-programa-en-el-front-igual-que-en-el-back.md","hash":"949904ff30505929807d2beaf97cee0cb511dacb","modified":1510067601000},{"_id":"source/_posts/ng-el-ecosistema-de-AngularJS.md","hash":"2a70a2247636c15e3359d730efa80a7c2b0c8f74","modified":1509380595000},{"_id":"source/_posts/npm-de-instalador-a-publicador.md","hash":"9d7dd1bbda1c9b0ddcc2500316254d75c6f6a637","modified":1509007198000},{"_id":"source/images/ng2-Arbol-de-componentes.jpg","hash":"ddf926766408af4ce8c65d3de3d5ff0270a0121b","modified":1509004804000},{"_id":"source/images/ng2-Arbol-de-dependencias.jpg","hash":"e474811bca4569fc209680fcb7f7fc432b60af99","modified":1509004101000},{"_id":"source/images/ng2-Component-DataFlow.jpg","hash":"0032c08ed4f67fc294781b6acb472f50f17ed0f2","modified":1509003992000},{"_id":"source/images/ng2-DI-component-directive.jpg","hash":"ed32320793c7b4c608bcb55d8bdc63ba40dde3fc","modified":1509004067000},{"_id":"source/images/ng2-DI-component-service.jpg","hash":"36febb9d7dbdc6fa87d03d7b5c0ad28adfbcf130","modified":1509004017000},{"_id":"source/images/ng2-Flujo-de-datos.jpg","hash":"e8a401ea27c0d850170a310ee8ce5db233cd3214","modified":1509004884000},{"_id":"source/images/ng2Component--1-.jpg","hash":"4f3a1732800a40410e7b34cb733633866d2dccaf","modified":1509004828000},{"_id":"source/images/tutorial-angular-5_0_cli_1-5.jpg","hash":"97fe16304b0d3405d4ed052ab33be43d27d5e981","modified":1510067601000},{"_id":"source/scaffolds/draft.md","hash":"204ab550ddffa92051ea0eb2484a78d84dac3693","modified":1509471088000},{"_id":"source/scaffolds/page.md","hash":"f0af1cb10f27d859caa51c8e3704469d9ed842a6","modified":1509471088000},{"_id":"source/scaffolds/post.md","hash":"e7169dab8ce62d41e3734e30706fa786cc7d46f4","modified":1509471088000},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1509471088000},{"_id":"themes/icarus/languages/es.yml","hash":"203098aff83e9d342de17a98834814ab792db61b","modified":1509471088000},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1509471088000},{"_id":"themes/icarus/languages/id.yml","hash":"e4961da507f66c8f7c37f85653a9437cb2056bf6","modified":1509471088000},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1509471088000},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1509471088000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1509471088000},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1509471088000},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1509471088000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1509471088000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1509471088000},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1509471088000},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1509471088000},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1509471088000},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1509471088000},{"_id":"themes/icarus/layout/layout.ejs","hash":"c34e44707467eed09d2a27fdcdbd6cabf91a684e","modified":1510067601000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1509471088000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1509471088000},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1509471088000},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1509471088000},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1509471088000},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1509471088000},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1509471088000},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1509471088000},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1509471088000},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"b4bd2e641af59e06becaa8f2dc97867f023b8dcf","modified":1509471088000},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"57c194d0fa268ce2f3e9c755b3154b8a0709f613","modified":1509471088000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1509471088000},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1509471088000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1509471088000},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"e3a34791046f3d00b743da4f08fd388a4cb71744","modified":1509471088000},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"f6549e3113562548ed128181878a8146509cdc7b","modified":1509471088000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1509471088000},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"792e4f0e93b2bdc5abd85d447d804a5c608a9c5c","modified":1509471088000},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"4b5251ba5594e5d53f87b6603fadda400ba46544","modified":1509471088000},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0a15601526cb6c704ecd386ebe4c8c51c1cfada3","modified":1509471088000},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1509471088000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9c260a551596f71e93177f2289b5cb1c4bc7d96c","modified":1509471088000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1509471088000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1509471088000},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1509471088000},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1509471088000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"231a9d0d57c90e26578d5d05b6086e230d1ce072","modified":1509471088000},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"1ee2384f98c8ccaa7a5b00f14ad2a9a67022c143","modified":1509471088000},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1509471088000},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1509471088000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1509471088000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1509471088000},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"e22f99652a220d926103801a3cad55ea9c450e05","modified":1509471088000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1509471088000},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1509471088000},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1509471088000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1509471088000},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1509471088000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1509471088000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1509471088000},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1509471088000},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1509471088000},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1509471088000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1509471088000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1509471088000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1509471088000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1509471088000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1509471088000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1509471088000},{"_id":"themes/icarus/source/css/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1509993632000},{"_id":"themes/icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1509471088000},{"_id":"themes/icarus/source/css/_variables.styl","hash":"011fdc2e499b55e3386127d8ddf28684f8a3ada4","modified":1510067601000},{"_id":"themes/icarus/source/css/style.styl","hash":"04568969e84ddcc02ee1ac5e6a683d8d1b2378f3","modified":1510067601000},{"_id":"themes/icarus/source/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1509471088000},{"_id":"themes/icarus/source/js/main.js","hash":"c29e741c5a6ed3920ff01a000b7eff1bd31098e5","modified":1509471088000},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1509471088000},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1509471088000},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1509471088000},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1509471088000},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1509471088000},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1509471088000},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1509471088000},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1509471088000},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"512b9252e1799b93a17c4ad847b0586814a030b4","modified":1509471088000},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1509471088000},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1509471088000},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"eef68f7361a5db8a7b810f9e2adff0db116f6f45","modified":1510067601000},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1509471088000},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"aeff619d4906d56172a6cc2ad22f1bb7a628b205","modified":1509471088000},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1509471088000},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1509471088000},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1509471088000},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1509471088000},{"_id":"themes/icarus/source/css/images/angular-5_0_cli_1-5.jpg","hash":"7335e8443686636affbc0e181d56336cc6f3c412","modified":1510067601000},{"_id":"themes/icarus/source/css/images/angular.jpg","hash":"6bf224d00bb2f792e52fbe936ac5abf2aa1332c0","modified":1509471088000},{"_id":"themes/icarus/source/css/images/avatar.jpg","hash":"6d461314157540948b0b35d63fe9dda8c2fa4665","modified":1509471088000},{"_id":"themes/icarus/source/css/images/favicon.ico","hash":"10df6f583311f8533e055ab21ad1be9eb3a7d80d","modified":1509471088000},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1509471088000},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1509471088000},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1509471088000},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1509471088000},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1509471088000},{"_id":"themes/icarus/source/css/images/logo.png","hash":"3ea04c5059266f2614f2fe37ebd81b6e8acb8a3c","modified":1509471088000},{"_id":"themes/icarus/source/css/images/typescript.jpg","hash":"f49a461df54b6d5eb9c14d921d7ee8689b10ec22","modified":1509471088000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1509471088000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1509471088000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1509471088000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1509471088000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1509471088000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1509471088000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1509471088000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1509471088000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1509471088000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1509471088000},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1509471088000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1509471088000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1509471088000},{"_id":"source/images/tutorial-angular-5_1_base.jpg","hash":"c0703d5e6a70c45c36e9c364cdd8337eae836c6e","modified":1510157115000},{"_id":"themes/icarus/source/css/images/angular-5_1_Base.jpg","hash":"ea08145cbdba702d36cb7224ce69e07c67535c8a","modified":1510157078000},{"_id":"public/contacto.html","hash":"3d2f658fd7ef2a6b419a856d62b039168685e424","modified":1510224740836},{"_id":"public/cookies.html","hash":"5d2bf501025c65637ede22ca18efede2a89f0d36","modified":1510224740845},{"_id":"public/cursos.html","hash":"9426cb0dd17c60fde6b708c821f6e8c0eb68f5f2","modified":1510224740847},{"_id":"public/noticias-junio-16.html","hash":"e167cc0bcd7c3813451f7526c8eea7a7360adc78","modified":1510224740847},{"_id":"public/promociones.html","hash":"71f4a33d267a6cfe3841426b947cab1c74bd336d","modified":1510224740848},{"_id":"public/scaffolds/draft.html","hash":"2b9804dfef32fece8687db25e4aea35ca557879b","modified":1510224740848},{"_id":"public/scaffolds/page.html","hash":"15da94e3ec82ce390de5500bf90bed9597e42f93","modified":1510224740848},{"_id":"public/scaffolds/post.html","hash":"6e48418848a9787c1b309fc567b197df1cc97ade","modified":1510224740848},{"_id":"public/hola-angular_5-cli/index.html","hash":"b4440d3b2411eaf1bc25598a0d642d88b54f9c23","modified":1510224740848},{"_id":"public/typescript-programa-en-el-front-igual-que-en-el-back/index.html","hash":"bc232aa3acd7d9652206bc877bfeab080a68e327","modified":1510224740848},{"_id":"public/codigo-de-ejemplo-curso-de-angular2/index.html","hash":"278b4d40e2321cb262db7774e0ee676fb120d627","modified":1510224740848},{"_id":"public/formularios-de-datos-en-angular2/index.html","hash":"3e64d5ad50e1107163d80c425fc74a309970dd62","modified":1510224740848},{"_id":"public/comunicaciones-http-observables-con-angular2/index.html","hash":"24295cba771ced76a41677d979f1a0709986e6a2","modified":1510224740848},{"_id":"public/enrutado-con-angular2-el-nuevo-spa/index.html","hash":"019e229e07831de037f43da52fae16cb154209e1","modified":1510224740848},{"_id":"public/angular2-di-inyeccion-de-dependencias/index.html","hash":"b60347611615b8407d99b31c3d48999cdb766e12","modified":1510224740848},{"_id":"public/databinding-el-flujo-de-datos-de-angular2/index.html","hash":"1137cde8041b4a559c6e05773598ed9add7072a6","modified":1510224740849},{"_id":"public/componentes-los-bloques-de-construccion-de-angular-2/index.html","hash":"5323ce6a32d7310f2b61346a2c43416591db444a","modified":1510224740849},{"_id":"public/hola-mundo-en-angular-2/index.html","hash":"40ad7024f128e2d620d8061638aad47ed0d648eb","modified":1510224740849},{"_id":"public/angular2-primeras-impresiones/index.html","hash":"ee9024300c6cf4ca929a0415ad8b3d25f90b8ff2","modified":1510224740849},{"_id":"public/node-6-0-0-actualizacion-con-nvm/index.html","hash":"6cee04dcd0a40f0c65d0c1ecbedfb24b89a82dd3","modified":1510224740849},{"_id":"public/npm-de-instalador-a-publicador/index.html","hash":"d6c6abc66cb0c93e15b1c5088448d36806d0a887","modified":1510224740849},{"_id":"public/soluciones-backend-2016/index.html","hash":"35108644d27346fef7b2614cc2d603db6a388242","modified":1510224740849},{"_id":"public/soluciones-frontend-2016/index.html","hash":"2b5feba647b0d6dd6f3a0ed3289a6ec384741abb","modified":1510224740849},{"_id":"public/formas/index.html","hash":"06941afc064734f111cab39a53e497cbff3eacb4","modified":1510224740849},{"_id":"public/introduccion-a-bootstrap/index.html","hash":"fd8e02aa99657045e6e71c9e4f88d420afba633e","modified":1510224740849},{"_id":"public/para-que-puedo-usar-nodejs/index.html","hash":"49ab8bac8f9ff45d82da3c6abbb28a5929dcbf02","modified":1510224740849},{"_id":"public/por-que-angularjs/index.html","hash":"d18d87fed781803a611e2c0c2cba67ef6f020c2e","modified":1510224740849},{"_id":"public/introduccion-a-mongodb/index.html","hash":"bdc8631a799644354f537919fa751acf6e2d3f60","modified":1510224740850},{"_id":"public/ng-el-ecosistema-de-angularjs/index.html","hash":"3cafc0464d7f502682e21144bbee854b5a2eae1f","modified":1510224740850},{"_id":"public/tag/Bootstrap/index.html","hash":"628ef5af608b74d23c0669538f5ee213b0eec9a2","modified":1510224740850},{"_id":"public/tag/Angular2/index.html","hash":"ae7423dc9cabfa4284a12c37c840d7d67f783ee1","modified":1510224740850},{"_id":"public/tag/Angular2/page/2/index.html","hash":"f41915db1fdc49f7cf59c5c88f7d4fc8a179367c","modified":1510224740850},{"_id":"public/tag/Angular/index.html","hash":"8515492a609e7eb9069aedb2220f1da6b43827b3","modified":1510224740850},{"_id":"public/tag/Angular5/index.html","hash":"302674ddb0e3df26772b1f8cc680e921e981bd3d","modified":1510224740850},{"_id":"public/tag/CLI/index.html","hash":"a257d44a258356b84413804c08922a8cfa6db1e6","modified":1510224740850},{"_id":"public/tag/Tutorial/index.html","hash":"ddd2a6f3f3b1c317da3b227fa64e7727f485a61d","modified":1510224740850},{"_id":"public/tag/MongoDB/index.html","hash":"ce05dd699c072b7131fb98ec7951a049df1a2ba6","modified":1510224740850},{"_id":"public/tag/NodeJS/index.html","hash":"9544922723ba8d7c90553886fea6a9c48fefeda5","modified":1510224740851},{"_id":"public/tag/AngularJS/index.html","hash":"f75236403c6c585ed17935146a0caaca8b786370","modified":1510224740855},{"_id":"public/tag/BackEnd/index.html","hash":"0d7580774c93ad4eff08541180fc2ac1f769c93c","modified":1510224740855},{"_id":"public/tag/FrontEnd/index.html","hash":"c7c3203b807f8f6700da6af6e39a8096d1e66508","modified":1510224740856},{"_id":"public/tag/TypeScript/index.html","hash":"a47754d0aa24276f5a94a291b7d843efee1e4a2c","modified":1510224740856},{"_id":"public/index.html","hash":"dc9c714007a245f4a7feaa0d896410ed77e9b588","modified":1510224740856},{"_id":"public/page/2/index.html","hash":"229f69366a224e7adb3bef897ca4ae7d6a7efd3b","modified":1510224740856},{"_id":"public/page/3/index.html","hash":"e2357c408b797a2187b9112003aa61cd03c000da","modified":1510224740856},{"_id":"public/page/4/index.html","hash":"ff3b9626e763331da6eeb680ec0bfe1747720e75","modified":1510224740856},{"_id":"public/page/5/index.html","hash":"254670a061120775769b035f42e140598d76994b","modified":1510224740856},{"_id":"public/categories/Introduccion/index.html","hash":"79a0e04a4a07b016b66e2b0ca652cebd98c6b5ca","modified":1510224740856},{"_id":"public/categories/Introduccion/page/2/index.html","hash":"e4c16317eda00a52ffc7e0f1d2ebdf37898eed78","modified":1510224740856},{"_id":"public/categories/Introduccion/page/3/index.html","hash":"c69c242f2be1ed88f128bb06155491a87faeb9c0","modified":1510224740856},{"_id":"public/categories/Tutorial/index.html","hash":"23f97b2d312c04c9f33221ddae4da36ee5acdfb3","modified":1510224740856},{"_id":"public/categories/Tutorial/Angular5/index.html","hash":"c95bc3cdbe45c541ad7d940ba4ef733639e1a7b1","modified":1510224740856},{"_id":"public/categories/Opinion/index.html","hash":"d9a4bcdd7a41f4fb8a8cfcb83bddae26d1a9dbe0","modified":1510224740856},{"_id":"public/categories/Avanzado/index.html","hash":"bf45068f8e367e592aa73189151a792e66289f66","modified":1510224740857},{"_id":"public/archives/index.html","hash":"5cbe45095af12111f1d3b0973dc36579c2060f5d","modified":1510224740857},{"_id":"public/archives/page/2/index.html","hash":"7de3f29bbf4adfc1e55ba90a6d3434cf6283174f","modified":1510224740857},{"_id":"public/archives/page/3/index.html","hash":"63d933708f5cca9d1c47d8b2f132b20b17e8f215","modified":1510224740857},{"_id":"public/archives/page/4/index.html","hash":"6ce236c5ce0d4fbc3ae7aea3bde9fb46e835a31c","modified":1510224740857},{"_id":"public/archives/page/5/index.html","hash":"555dff534e1a0a79d9e4bde3c226583a8d202e49","modified":1510224740857},{"_id":"public/archives/2015/index.html","hash":"c0c0ddcf519c90b819f696a2024b17fac32b3e5d","modified":1510224740857},{"_id":"public/archives/2015/page/2/index.html","hash":"f5d0ede3d1e5e045dd249d64927dbf6b333352a1","modified":1510224740857},{"_id":"public/archives/2015/08/index.html","hash":"ba8f6db27b162296a113b465c808b8217051548f","modified":1510224740857},{"_id":"public/archives/2015/11/index.html","hash":"96e41a447cc11dcf2a3cf1e5335fdc53079c0f92","modified":1510224740857},{"_id":"public/archives/2016/index.html","hash":"00127dc39bd916a093cf2a36eb7a23e2ed41cc55","modified":1510224740857},{"_id":"public/archives/2016/page/2/index.html","hash":"0728d45390fa5b0f87789148f4fdacc4906da7e3","modified":1510224740857},{"_id":"public/archives/2016/page/3/index.html","hash":"4745ceb31ebabf5b870ee87dfab07a074348d68b","modified":1510224740857},{"_id":"public/archives/2016/01/index.html","hash":"1e840e0eaa4db1596b599ac99ae394906bd3582d","modified":1510224740857},{"_id":"public/archives/2016/03/index.html","hash":"c0f5a2f8a2257987b55b8f5322be01df302fb94e","modified":1510224740858},{"_id":"public/archives/2016/04/index.html","hash":"4a3493d9596497fc50b424f519896c5499a63069","modified":1510224740858},{"_id":"public/archives/2016/05/index.html","hash":"f1bdee14fdabc81f6c3456ae7d3d74925079035c","modified":1510224740858},{"_id":"public/archives/2016/05/page/2/index.html","hash":"3ad6e811ac0ee6a2410422a226e02b287c87bcf1","modified":1510224740858},{"_id":"public/archives/2016/06/index.html","hash":"c78d499d23ae24780af2d8427263c7379c69ccdd","modified":1510224740858},{"_id":"public/archives/2016/09/index.html","hash":"849030e293ee10d95a7e7c52c7a3edd0c431971e","modified":1510224740858},{"_id":"public/archives/2017/index.html","hash":"b708954de38dfbbd72924e8fae872f5550bcf78a","modified":1510224740858},{"_id":"public/archives/2017/03/index.html","hash":"ed4ad351da6db856ae51120cdabc44178c30b676","modified":1510224740858},{"_id":"public/archives/2017/11/index.html","hash":"882f448ee1f0127934ecba3774fcede3e0ce084f","modified":1510224740858},{"_id":"public/Base-para-aplicacion-Angular-5/index.html","hash":"aaffa6871b8809931cd913a1b1f1b19d8ef4011e","modified":1510245048824},{"_id":"public/images/tutorial-angular-5_1_base.jpg","hash":"c0703d5e6a70c45c36e9c364cdd8337eae836c6e","modified":1510224740863},{"_id":"public/css/images/angular-5_1_Base.jpg","hash":"ea08145cbdba702d36cb7224ce69e07c67535c8a","modified":1510224740863}],"Category":[{"name":"Introducción","_id":"cj9r8giz80004c7jsizbxuyvz"},{"name":"Tutorial","_id":"cj9r8gj0n0013c7jsh5dxyt3l"},{"name":"Angular5","parent":"cj9r8gj0n0013c7jsh5dxyt3l","_id":"cj9r8gj0u001fc7js6zuil06c"},{"name":"Opinión","_id":"cj9r8gj14001mc7jsgdtvesgg"},{"name":"Avanzado","_id":"cj9r8gj1g0025c7jskbawa7gd"}],"Data":[],"Page":[{"title":"Contacto","id":4,"updated":"2017-02-14T08:21:50.000Z","date":"2015-09-16T11:52:52.000Z","_content":"\n<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>","source":"Contacto/index.md","raw":"---\ntitle: Contacto\npermalink: contacto\nid: 4\nupdated: '2017-02-14 09:21:50'\ndate: 2015-09-16 13:52:52\n---\n\n<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>","path":"contacto.html","comments":1,"layout":"page","_id":"cj9r8giyn0000c7jsjs9m04ty","content":"<div><br>Vivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b><br></div><br><p><br><div><br>Si quieres <b>visitarnos</b> ven a:<br></div>\n\n<hr>\n\n<div itemscope=\"\" itemtype=\"http://schema.org/LocalBusiness\"><br>  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4><br>  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span><br>  <p><br>  <div itemprop=\"address\" itemscope=\"\" itemtype=\"http://schema.org/PostalAddress\"><br>    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span><br>    CP:<span itemprop=\"postalCode\">15190</span><br>    <p><br>    <span itemprop=\"addressLocality\">A Coruña</span>,<br>    <span itemprop=\"addressCountry\">España</span><br>  </p></div><br>  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\" target=\"_blank\" rel=\"external\">+34 609884782</a></span><br>  </p><p><br>  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span><br></p></div>\n\n<hr>\n\n</p><p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:  </p>\n\n<blockquote><br>  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p><br>  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\" target=\"_blank\" rel=\"external\">http://www.vitaedigital.com/</a></span> </p><br><br></blockquote>","site":{"data":{}},"excerpt":"","more":"<div><br>Vivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b><br></div><br><p><br><div><br>Si quieres <b>visitarnos</b> ven a:<br></div>\n\n<hr>\n\n<div itemscope=\"\" itemtype=\"http://schema.org/LocalBusiness\"><br>  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4><br>  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span><br>  <p><br>  <div itemprop=\"address\" itemscope=\"\" itemtype=\"http://schema.org/PostalAddress\"><br>    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span><br>    CP:<span itemprop=\"postalCode\">15190</span><br>    <p><br>    <span itemprop=\"addressLocality\">A Coruña</span>,<br>    <span itemprop=\"addressCountry\">España</span><br>  </p></div><br>  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\" target=\"_blank\" rel=\"external\">+34 609884782</a></span><br>  </p><p><br>  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span><br></p></div>\n\n<hr>\n\n</p><p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:  </p>\n\n<blockquote><br>  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p><br>  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\" target=\"_blank\" rel=\"external\">http://www.vitaedigital.com/</a></span> </p><br><br></blockquote>"},{"title":"Cookies","id":9,"updated":"2016-04-18T13:48:28.000Z","date":"2016-04-14T12:29:58.000Z","_content":"\nUtilizamos cookies para facilitar el uso de nuestra página web. \n\nLas cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. \n\nLas utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con\nanterioridad, o si su visita es nueva o recurrente. \n\nLas cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. \n\nEn caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. ","source":"Cookies/index.md","raw":"---\ntitle: Cookies\npermalink: cookies\nid: 9\nupdated: '2016-04-18 15:48:28'\ndate: 2016-04-14 14:29:58\n---\n\nUtilizamos cookies para facilitar el uso de nuestra página web. \n\nLas cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. \n\nLas utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con\nanterioridad, o si su visita es nueva o recurrente. \n\nLas cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. \n\nEn caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. ","path":"cookies.html","comments":1,"layout":"page","_id":"cj9r8giz00002c7jseochuv3h","content":"<p>Utilizamos cookies para facilitar el uso de nuestra página web. </p>\n<p>Las cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. </p>\n<p>Las utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con<br>anterioridad, o si su visita es nueva o recurrente. </p>\n<p>Las cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. </p>\n<p>En caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. </p>\n","site":{"data":{}},"excerpt":"","more":"<p>Utilizamos cookies para facilitar el uso de nuestra página web. </p>\n<p>Las cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. </p>\n<p>Las utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con<br>anterioridad, o si su visita es nueva o recurrente. </p>\n<p>Las cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. </p>\n<p>En caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. </p>\n"},{"title":"Cursos","id":18,"updated":"2017-02-23T16:07:39.000Z","date":"2015-09-16T11:17:03.000Z","_content":"\nCalendario de **cursos** de formación impartidos y programados:\n\n^^^^\n\n# 2017\n\nvvv\n\n---\n\n> ##Angular 2\n\n>*del 8 al 12 de mayo* \n\n> para universidad de **A Coruña**\n\n---\n\n> ##Angular 2\n\n>*del 24 al 28 de abril* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ##Angular 1.5 Avanzado\n\n>*del 30 al 31 de marzo* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ##Angular 2\n\n>*del 22 de febrero al 6 de abril* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###[Angular 2](http://www.vitaedigital.com/proyectos-de-formacion/curso-en-abierto-de-angular2-con-typescript-y-observables-3-edicion)\n\n>*del 3 al 11 de febrero* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 16 al 24 de enero* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###Tecnología Web\n\n>*el 13 de enero* \n\n> para consultora informática en **A Coruña**\n\n---\n\n^^^\n\n# 2017\n\n---\n\n# 2016\n\nvvv\n\n---\n\n> ###[Angular2](http://www.vitaedigital.com/proyectos-de-formacion/vigo-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x-2-edicion)\n\n>*del 12 al 20 de diciembre* \n\n> abierto al público en **Vigo** \n\n---\n\n> ###Angular 2\n\n>*del 28 de noviembre al 15 de diciembre* \n\n> para consultora informática en **Burgos On Line**\n\n---\n\n> ###AngularJS\n\n>*del 21 al 24 de noviembre* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 11 al 19 de noviembre* \n\n> para consultora informática en **Santiago**\n\n---\n\n> ###[Angular2](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\n>*del 2 al 17 de noviembre* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 24 de octubre al 27 de octubre* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 13 de octubre al 21 de octubre* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ###AngularJS\n\n>*del 26 de septiembre al 29 de septiembre* \n\n> para entidad bancaria en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 26 de septiembre al 29 de septiembre* \n\n> para entidad bancaria en **A Coruña**\n\n---\n\n> ###Angular 2\n\n>*del 15 de septiembre al 23 de septiembre* \n\n> para empresa sector automóvil en **Vigo**\n\n---\n\n> ###Angular 2\n\n>*del 12 de septiembre al 14 de septiembre* \n\n> para empresa peritaje en **Pontedeume**\n\n---\n\n> ###AngularJS\n\n>*del 18 de agosto al 26 de agosto* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ###[Angular2](http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs)\n\n>*del 10 al 18 de junio* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###[Angular2](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\n>*del 9 al 22 de junio* \n\n> abierto al público **on line** \n\n---\n\n> ###MEANjs\n\n>*del 18 de mayo al 6 de julio* \n\n> para consultora informática en **A Coruña** \n\n\n---\n\n> ###[AngularJS](http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs)\n\n>*del 15 al 23 de abril* \n\n> abierto al público en **Vigo** \n\n---\n\n\n> ###[BackEdge](http://escuela.it/cursos/back-edge-desarrollo-web-al-limite-nodejs-es6-npm-mongodb/)\n\n>*del 31 de marzo al 11 de abril* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS, Material Design\n\n>*del 3 de marzo al 8 de marzo* \n\n> para consultora, multinacional del automóvil y entidad bancaria en **Vigo**  \n\n---\n\n> ###AngularJS, Material Design y WebAPI\n\n>*del 22 de febrero al 29 de febrero* \n\n> para entidad bancaria en **A Coruña**  \n\n---\n\n> ###[MEANjs](http://vitaedigital.com/download/NTk5/Curso_de_Programacion_MEAN_FullStack_con_MongoDB_Express_AngularJS_y_NodeJS%20(3).pdf)\n\n>*del 29 de enero al 27 de febrero* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###[FrontEdge](http://escuela.it/cursos/front-edge-desarrollo-web-al-limite/)\n\n>*del 14 de enero al 25 de enero* \n\n> abierto al público **on line** \n\n---\n\n^^^\n\n# 2016\n\n---\n\n# 2015\n\nvvv\n\n---\n---\n\n> ###FrontEdge \n\n>*del 14 de diciembre al 15 de diciembre* \n\n> en abierto en **A Coruña** \n\n\n---\n\n> ###AngularJS \n\n>*del 13 de noviembre al 27 de noviembre* \n\n> para consultora informática en **A Coruña** \n\n\n---\n\n> ###AngularJS\n\n>*el 10 de noviembre* \n\n> para consultora informática en **Santiago de Compostela** \n\n\n---\n\n\n> ###Web Workers\n\n>*el 5 de noviembre* \n\n> abierto al público **on line** \n\n---\n\n> ###Angular\n\n>*el 20 de octubre* \n\n> para consultora informática en **Santiago de Compostela** \n\n---\n\n> ###MEANjs\n\n>*del 14 de octubre al 2 de diciembre* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 5 de octubre al 7 de octubre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n> ###AngularJS y WebAPI\n\n>*del 28 de septiembre al 1 de octubre* \n\n> para entidad bancaria en **A Coruña** \n\n\n---\n\n> ###MEANjs\n\n>*del 25 de septiembre al 17 de octubre* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 21 de septiembre al 22 de septiembre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n\n> ###AngularJS \n\n>*del 7 de septiembre al 8 de septiembre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n---\n\n> ###AngularJS\n\n>*del 26 de junio al 4 de julio* \n\n> abierto al público en **A Coruña** \n\n\n---\n\n> ###AngularJS\n\n>*del 5 de junio al 13 de junio* \n\n> multinacional del automóvil en **Vigo** \n\n---\n\n> ###AngularJS\n\n>*del 8 de junio al 9 de junio* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n> ###NodeJS\n\n>*del 22 de mayo al 30 de mayo* \n\n> abierto al público en **Vigo** \n\n\n---\n\n> ###MEANjs\n\n>*del 18 de mayo al 28 de mayo* \n\n> para consultora informática en **Santiago de Compostela** \n\n---\n\n> ###MongoDB\n\n>*del 13 de abril al 23 de abril* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###MEANjs\n\n>*del 16 de marzo al 8 de abril* \n\n> abierto al público **on line** \n\n\n---\n\n> ###NodeJS\n\n>*del 6 de marzo al 14 de marzo* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 10 de febrero al 13 de febrero* \n\n> abierto al público **on line** \n\n\n---\n\n^^^^\n\n# 2015\n\n---\n\n# 2014\n\nvvvv\n\n---\n\n> ###AngularJS\n\n>*del 21 de noviembre al 29 de noviembre* \n\n> abierto al público en **Vigo**\n\n---\n\n> ###AngularJS\n\n>*el 18 de noviembre* \n\n> universidad de **Ourense** \n\n---\n\n> ###AngularJS\n\n>*del 25 de septiembre al 10 de octubre* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 19 de septiembre al 26 de octubre* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 5 de julio al 6 de julio* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 27 de junio al 5 de julio* \n\n> abierto al público en **A Coruña**\n\n\n---\n^^^\n## 2014\n\n---\n","source":"Cursos/index.md","raw":"---\ntitle: Cursos\npermalink: cursos\nid: 18\nupdated: '2017-02-23 17:07:39'\ndate: 2015-09-16 13:17:03\n---\n\nCalendario de **cursos** de formación impartidos y programados:\n\n^^^^\n\n# 2017\n\nvvv\n\n---\n\n> ##Angular 2\n\n>*del 8 al 12 de mayo* \n\n> para universidad de **A Coruña**\n\n---\n\n> ##Angular 2\n\n>*del 24 al 28 de abril* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ##Angular 1.5 Avanzado\n\n>*del 30 al 31 de marzo* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ##Angular 2\n\n>*del 22 de febrero al 6 de abril* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###[Angular 2](http://www.vitaedigital.com/proyectos-de-formacion/curso-en-abierto-de-angular2-con-typescript-y-observables-3-edicion)\n\n>*del 3 al 11 de febrero* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 16 al 24 de enero* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###Tecnología Web\n\n>*el 13 de enero* \n\n> para consultora informática en **A Coruña**\n\n---\n\n^^^\n\n# 2017\n\n---\n\n# 2016\n\nvvv\n\n---\n\n> ###[Angular2](http://www.vitaedigital.com/proyectos-de-formacion/vigo-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x-2-edicion)\n\n>*del 12 al 20 de diciembre* \n\n> abierto al público en **Vigo** \n\n---\n\n> ###Angular 2\n\n>*del 28 de noviembre al 15 de diciembre* \n\n> para consultora informática en **Burgos On Line**\n\n---\n\n> ###AngularJS\n\n>*del 21 al 24 de noviembre* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 11 al 19 de noviembre* \n\n> para consultora informática en **Santiago**\n\n---\n\n> ###[Angular2](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\n>*del 2 al 17 de noviembre* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 24 de octubre al 27 de octubre* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 13 de octubre al 21 de octubre* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ###AngularJS\n\n>*del 26 de septiembre al 29 de septiembre* \n\n> para entidad bancaria en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 26 de septiembre al 29 de septiembre* \n\n> para entidad bancaria en **A Coruña**\n\n---\n\n> ###Angular 2\n\n>*del 15 de septiembre al 23 de septiembre* \n\n> para empresa sector automóvil en **Vigo**\n\n---\n\n> ###Angular 2\n\n>*del 12 de septiembre al 14 de septiembre* \n\n> para empresa peritaje en **Pontedeume**\n\n---\n\n> ###AngularJS\n\n>*del 18 de agosto al 26 de agosto* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ###[Angular2](http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs)\n\n>*del 10 al 18 de junio* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###[Angular2](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\n>*del 9 al 22 de junio* \n\n> abierto al público **on line** \n\n---\n\n> ###MEANjs\n\n>*del 18 de mayo al 6 de julio* \n\n> para consultora informática en **A Coruña** \n\n\n---\n\n> ###[AngularJS](http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs)\n\n>*del 15 al 23 de abril* \n\n> abierto al público en **Vigo** \n\n---\n\n\n> ###[BackEdge](http://escuela.it/cursos/back-edge-desarrollo-web-al-limite-nodejs-es6-npm-mongodb/)\n\n>*del 31 de marzo al 11 de abril* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS, Material Design\n\n>*del 3 de marzo al 8 de marzo* \n\n> para consultora, multinacional del automóvil y entidad bancaria en **Vigo**  \n\n---\n\n> ###AngularJS, Material Design y WebAPI\n\n>*del 22 de febrero al 29 de febrero* \n\n> para entidad bancaria en **A Coruña**  \n\n---\n\n> ###[MEANjs](http://vitaedigital.com/download/NTk5/Curso_de_Programacion_MEAN_FullStack_con_MongoDB_Express_AngularJS_y_NodeJS%20(3).pdf)\n\n>*del 29 de enero al 27 de febrero* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###[FrontEdge](http://escuela.it/cursos/front-edge-desarrollo-web-al-limite/)\n\n>*del 14 de enero al 25 de enero* \n\n> abierto al público **on line** \n\n---\n\n^^^\n\n# 2016\n\n---\n\n# 2015\n\nvvv\n\n---\n---\n\n> ###FrontEdge \n\n>*del 14 de diciembre al 15 de diciembre* \n\n> en abierto en **A Coruña** \n\n\n---\n\n> ###AngularJS \n\n>*del 13 de noviembre al 27 de noviembre* \n\n> para consultora informática en **A Coruña** \n\n\n---\n\n> ###AngularJS\n\n>*el 10 de noviembre* \n\n> para consultora informática en **Santiago de Compostela** \n\n\n---\n\n\n> ###Web Workers\n\n>*el 5 de noviembre* \n\n> abierto al público **on line** \n\n---\n\n> ###Angular\n\n>*el 20 de octubre* \n\n> para consultora informática en **Santiago de Compostela** \n\n---\n\n> ###MEANjs\n\n>*del 14 de octubre al 2 de diciembre* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 5 de octubre al 7 de octubre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n> ###AngularJS y WebAPI\n\n>*del 28 de septiembre al 1 de octubre* \n\n> para entidad bancaria en **A Coruña** \n\n\n---\n\n> ###MEANjs\n\n>*del 25 de septiembre al 17 de octubre* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 21 de septiembre al 22 de septiembre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n\n> ###AngularJS \n\n>*del 7 de septiembre al 8 de septiembre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n---\n\n> ###AngularJS\n\n>*del 26 de junio al 4 de julio* \n\n> abierto al público en **A Coruña** \n\n\n---\n\n> ###AngularJS\n\n>*del 5 de junio al 13 de junio* \n\n> multinacional del automóvil en **Vigo** \n\n---\n\n> ###AngularJS\n\n>*del 8 de junio al 9 de junio* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n> ###NodeJS\n\n>*del 22 de mayo al 30 de mayo* \n\n> abierto al público en **Vigo** \n\n\n---\n\n> ###MEANjs\n\n>*del 18 de mayo al 28 de mayo* \n\n> para consultora informática en **Santiago de Compostela** \n\n---\n\n> ###MongoDB\n\n>*del 13 de abril al 23 de abril* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###MEANjs\n\n>*del 16 de marzo al 8 de abril* \n\n> abierto al público **on line** \n\n\n---\n\n> ###NodeJS\n\n>*del 6 de marzo al 14 de marzo* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 10 de febrero al 13 de febrero* \n\n> abierto al público **on line** \n\n\n---\n\n^^^^\n\n# 2015\n\n---\n\n# 2014\n\nvvvv\n\n---\n\n> ###AngularJS\n\n>*del 21 de noviembre al 29 de noviembre* \n\n> abierto al público en **Vigo**\n\n---\n\n> ###AngularJS\n\n>*el 18 de noviembre* \n\n> universidad de **Ourense** \n\n---\n\n> ###AngularJS\n\n>*del 25 de septiembre al 10 de octubre* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 19 de septiembre al 26 de octubre* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 5 de julio al 6 de julio* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 27 de junio al 5 de julio* \n\n> abierto al público en **A Coruña**\n\n\n---\n^^^\n## 2014\n\n---\n","path":"cursos.html","comments":1,"layout":"page","_id":"cj9r8gizg0006c7jsh4bc9zj8","content":"<p>Calendario de <strong>cursos</strong> de formación impartidos y programados:</p>\n<p>^^^^</p>\n<h1 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h1><p>vvv</p>\n<hr>\n<blockquote>\n<p>##Angular 2</p>\n<p><em>del 8 al 12 de mayo</em> </p>\n<p>para universidad de <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>##Angular 2</p>\n<p><em>del 24 al 28 de abril</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>##Angular 1.5 Avanzado</p>\n<p><em>del 30 al 31 de marzo</em> </p>\n<p>para consultora informática en <strong>Madrid</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>##Angular 2</p>\n<p><em>del 22 de febrero al 6 de abril</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://www.vitaedigital.com/proyectos-de-formacion/curso-en-abierto-de-angular2-con-typescript-y-observables-3-edicion\" target=\"_blank\" rel=\"external\">Angular 2</a></p>\n<p><em>del 3 al 11 de febrero</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 16 al 24 de enero</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Tecnología Web</p>\n<p><em>el 13 de enero</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<p>^^^</p>\n<h1 id=\"2017-1\"><a href=\"#2017-1\" class=\"headerlink\" title=\"2017\"></a>2017</h1><hr>\n<h1 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h1><p>vvv</p>\n<hr>\n<blockquote>\n<p>###<a href=\"http://www.vitaedigital.com/proyectos-de-formacion/vigo-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x-2-edicion\" target=\"_blank\" rel=\"external\">Angular2</a></p>\n<p><em>del 12 al 20 de diciembre</em> </p>\n<p>abierto al público en <strong>Vigo</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Angular 2</p>\n<p><em>del 28 de noviembre al 15 de diciembre</em> </p>\n<p>para consultora informática en <strong>Burgos On Line</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 21 al 24 de noviembre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 11 al 19 de noviembre</em> </p>\n<p>para consultora informática en <strong>Santiago</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular2</a></p>\n<p><em>del 2 al 17 de noviembre</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 24 de octubre al 27 de octubre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 13 de octubre al 21 de octubre</em> </p>\n<p>para consultora informática en <strong>Madrid</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 26 de septiembre al 29 de septiembre</em> </p>\n<p>para entidad bancaria en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 26 de septiembre al 29 de septiembre</em> </p>\n<p>para entidad bancaria en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Angular 2</p>\n<p><em>del 15 de septiembre al 23 de septiembre</em> </p>\n<p>para empresa sector automóvil en <strong>Vigo</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Angular 2</p>\n<p><em>del 12 de septiembre al 14 de septiembre</em> </p>\n<p>para empresa peritaje en <strong>Pontedeume</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 18 de agosto al 26 de agosto</em> </p>\n<p>para consultora informática en <strong>Madrid</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs\" target=\"_blank\" rel=\"external\">Angular2</a></p>\n<p><em>del 10 al 18 de junio</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular2</a></p>\n<p><em>del 9 al 22 de junio</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 18 de mayo al 6 de julio</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs\" target=\"_blank\" rel=\"external\">AngularJS</a></p>\n<p><em>del 15 al 23 de abril</em> </p>\n<p>abierto al público en <strong>Vigo</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://escuela.it/cursos/back-edge-desarrollo-web-al-limite-nodejs-es6-npm-mongodb/\" target=\"_blank\" rel=\"external\">BackEdge</a></p>\n<p><em>del 31 de marzo al 11 de abril</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS, Material Design</p>\n<p><em>del 3 de marzo al 8 de marzo</em> </p>\n<p>para consultora, multinacional del automóvil y entidad bancaria en <strong>Vigo</strong>  </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS, Material Design y WebAPI</p>\n<p><em>del 22 de febrero al 29 de febrero</em> </p>\n<p>para entidad bancaria en <strong>A Coruña</strong>  </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://vitaedigital.com/download/NTk5/Curso_de_Programacion_MEAN_FullStack_con_MongoDB_Express_AngularJS_y_NodeJS%20(3\" target=\"_blank\" rel=\"external\">MEANjs</a>.pdf)</p>\n<p><em>del 29 de enero al 27 de febrero</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://escuela.it/cursos/front-edge-desarrollo-web-al-limite/\" target=\"_blank\" rel=\"external\">FrontEdge</a></p>\n<p><em>del 14 de enero al 25 de enero</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<p>^^^</p>\n<h1 id=\"2016-1\"><a href=\"#2016-1\" class=\"headerlink\" title=\"2016\"></a>2016</h1><hr>\n<h1 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h1><p>vvv</p>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><blockquote>\n<p>###FrontEdge </p>\n<p><em>del 14 de diciembre al 15 de diciembre</em> </p>\n<p>en abierto en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS </p>\n<p><em>del 13 de noviembre al 27 de noviembre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>el 10 de noviembre</em> </p>\n<p>para consultora informática en <strong>Santiago de Compostela</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Web Workers</p>\n<p><em>el 5 de noviembre</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Angular</p>\n<p><em>el 20 de octubre</em> </p>\n<p>para consultora informática en <strong>Santiago de Compostela</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 14 de octubre al 2 de diciembre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 5 de octubre al 7 de octubre</em> </p>\n<p>para multinacional del turismo en <strong>Palma de Mallorca</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS y WebAPI</p>\n<p><em>del 28 de septiembre al 1 de octubre</em> </p>\n<p>para entidad bancaria en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 25 de septiembre al 17 de octubre</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 21 de septiembre al 22 de septiembre</em> </p>\n<p>para multinacional del turismo en <strong>Palma de Mallorca</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS </p>\n<p><em>del 7 de septiembre al 8 de septiembre</em> </p>\n<p>para multinacional del turismo en <strong>Palma de Mallorca</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 26 de junio al 4 de julio</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 5 de junio al 13 de junio</em> </p>\n<p>multinacional del automóvil en <strong>Vigo</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 8 de junio al 9 de junio</em> </p>\n<p>para multinacional del turismo en <strong>Palma de Mallorca</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###NodeJS</p>\n<p><em>del 22 de mayo al 30 de mayo</em> </p>\n<p>abierto al público en <strong>Vigo</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 18 de mayo al 28 de mayo</em> </p>\n<p>para consultora informática en <strong>Santiago de Compostela</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MongoDB</p>\n<p><em>del 13 de abril al 23 de abril</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 16 de marzo al 8 de abril</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###NodeJS</p>\n<p><em>del 6 de marzo al 14 de marzo</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 10 de febrero al 13 de febrero</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<p>^^^^</p>\n<h1 id=\"2015-1\"><a href=\"#2015-1\" class=\"headerlink\" title=\"2015\"></a>2015</h1><hr>\n<h1 id=\"2014\"><a href=\"#2014\" class=\"headerlink\" title=\"2014\"></a>2014</h1><p>vvvv</p>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 21 de noviembre al 29 de noviembre</em> </p>\n<p>abierto al público en <strong>Vigo</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>el 18 de noviembre</em> </p>\n<p>universidad de <strong>Ourense</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 25 de septiembre al 10 de octubre</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 19 de septiembre al 26 de octubre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 5 de julio al 6 de julio</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 27 de junio al 5 de julio</em> </p>\n<p>abierto al público en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<p>^^^</p>\n<h2 id=\"2014-1\"><a href=\"#2014-1\" class=\"headerlink\" title=\"2014\"></a>2014</h2><hr>\n","site":{"data":{}},"excerpt":"","more":"<p>Calendario de <strong>cursos</strong> de formación impartidos y programados:</p>\n<p>^^^^</p>\n<h1 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h1><p>vvv</p>\n<hr>\n<blockquote>\n<p>##Angular 2</p>\n<p><em>del 8 al 12 de mayo</em> </p>\n<p>para universidad de <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>##Angular 2</p>\n<p><em>del 24 al 28 de abril</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>##Angular 1.5 Avanzado</p>\n<p><em>del 30 al 31 de marzo</em> </p>\n<p>para consultora informática en <strong>Madrid</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>##Angular 2</p>\n<p><em>del 22 de febrero al 6 de abril</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://www.vitaedigital.com/proyectos-de-formacion/curso-en-abierto-de-angular2-con-typescript-y-observables-3-edicion\" target=\"_blank\" rel=\"external\">Angular 2</a></p>\n<p><em>del 3 al 11 de febrero</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 16 al 24 de enero</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Tecnología Web</p>\n<p><em>el 13 de enero</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<p>^^^</p>\n<h1 id=\"2017-1\"><a href=\"#2017-1\" class=\"headerlink\" title=\"2017\"></a>2017</h1><hr>\n<h1 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h1><p>vvv</p>\n<hr>\n<blockquote>\n<p>###<a href=\"http://www.vitaedigital.com/proyectos-de-formacion/vigo-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x-2-edicion\" target=\"_blank\" rel=\"external\">Angular2</a></p>\n<p><em>del 12 al 20 de diciembre</em> </p>\n<p>abierto al público en <strong>Vigo</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Angular 2</p>\n<p><em>del 28 de noviembre al 15 de diciembre</em> </p>\n<p>para consultora informática en <strong>Burgos On Line</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 21 al 24 de noviembre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 11 al 19 de noviembre</em> </p>\n<p>para consultora informática en <strong>Santiago</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular2</a></p>\n<p><em>del 2 al 17 de noviembre</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 24 de octubre al 27 de octubre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 13 de octubre al 21 de octubre</em> </p>\n<p>para consultora informática en <strong>Madrid</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 26 de septiembre al 29 de septiembre</em> </p>\n<p>para entidad bancaria en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 26 de septiembre al 29 de septiembre</em> </p>\n<p>para entidad bancaria en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Angular 2</p>\n<p><em>del 15 de septiembre al 23 de septiembre</em> </p>\n<p>para empresa sector automóvil en <strong>Vigo</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Angular 2</p>\n<p><em>del 12 de septiembre al 14 de septiembre</em> </p>\n<p>para empresa peritaje en <strong>Pontedeume</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 18 de agosto al 26 de agosto</em> </p>\n<p>para consultora informática en <strong>Madrid</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs\" target=\"_blank\" rel=\"external\">Angular2</a></p>\n<p><em>del 10 al 18 de junio</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular2</a></p>\n<p><em>del 9 al 22 de junio</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 18 de mayo al 6 de julio</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs\" target=\"_blank\" rel=\"external\">AngularJS</a></p>\n<p><em>del 15 al 23 de abril</em> </p>\n<p>abierto al público en <strong>Vigo</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://escuela.it/cursos/back-edge-desarrollo-web-al-limite-nodejs-es6-npm-mongodb/\" target=\"_blank\" rel=\"external\">BackEdge</a></p>\n<p><em>del 31 de marzo al 11 de abril</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS, Material Design</p>\n<p><em>del 3 de marzo al 8 de marzo</em> </p>\n<p>para consultora, multinacional del automóvil y entidad bancaria en <strong>Vigo</strong>  </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS, Material Design y WebAPI</p>\n<p><em>del 22 de febrero al 29 de febrero</em> </p>\n<p>para entidad bancaria en <strong>A Coruña</strong>  </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://vitaedigital.com/download/NTk5/Curso_de_Programacion_MEAN_FullStack_con_MongoDB_Express_AngularJS_y_NodeJS%20(3\" target=\"_blank\" rel=\"external\">MEANjs</a>.pdf)</p>\n<p><em>del 29 de enero al 27 de febrero</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###<a href=\"http://escuela.it/cursos/front-edge-desarrollo-web-al-limite/\" target=\"_blank\" rel=\"external\">FrontEdge</a></p>\n<p><em>del 14 de enero al 25 de enero</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<p>^^^</p>\n<h1 id=\"2016-1\"><a href=\"#2016-1\" class=\"headerlink\" title=\"2016\"></a>2016</h1><hr>\n<h1 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h1><p>vvv</p>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><blockquote>\n<p>###FrontEdge </p>\n<p><em>del 14 de diciembre al 15 de diciembre</em> </p>\n<p>en abierto en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS </p>\n<p><em>del 13 de noviembre al 27 de noviembre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>el 10 de noviembre</em> </p>\n<p>para consultora informática en <strong>Santiago de Compostela</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Web Workers</p>\n<p><em>el 5 de noviembre</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###Angular</p>\n<p><em>el 20 de octubre</em> </p>\n<p>para consultora informática en <strong>Santiago de Compostela</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 14 de octubre al 2 de diciembre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 5 de octubre al 7 de octubre</em> </p>\n<p>para multinacional del turismo en <strong>Palma de Mallorca</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS y WebAPI</p>\n<p><em>del 28 de septiembre al 1 de octubre</em> </p>\n<p>para entidad bancaria en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 25 de septiembre al 17 de octubre</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 21 de septiembre al 22 de septiembre</em> </p>\n<p>para multinacional del turismo en <strong>Palma de Mallorca</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS </p>\n<p><em>del 7 de septiembre al 8 de septiembre</em> </p>\n<p>para multinacional del turismo en <strong>Palma de Mallorca</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 26 de junio al 4 de julio</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 5 de junio al 13 de junio</em> </p>\n<p>multinacional del automóvil en <strong>Vigo</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 8 de junio al 9 de junio</em> </p>\n<p>para multinacional del turismo en <strong>Palma de Mallorca</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###NodeJS</p>\n<p><em>del 22 de mayo al 30 de mayo</em> </p>\n<p>abierto al público en <strong>Vigo</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 18 de mayo al 28 de mayo</em> </p>\n<p>para consultora informática en <strong>Santiago de Compostela</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MongoDB</p>\n<p><em>del 13 de abril al 23 de abril</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###MEANjs</p>\n<p><em>del 16 de marzo al 8 de abril</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###NodeJS</p>\n<p><em>del 6 de marzo al 14 de marzo</em> </p>\n<p>abierto al público en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 10 de febrero al 13 de febrero</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<p>^^^^</p>\n<h1 id=\"2015-1\"><a href=\"#2015-1\" class=\"headerlink\" title=\"2015\"></a>2015</h1><hr>\n<h1 id=\"2014\"><a href=\"#2014\" class=\"headerlink\" title=\"2014\"></a>2014</h1><p>vvvv</p>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 21 de noviembre al 29 de noviembre</em> </p>\n<p>abierto al público en <strong>Vigo</strong></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>el 18 de noviembre</em> </p>\n<p>universidad de <strong>Ourense</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 25 de septiembre al 10 de octubre</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 19 de septiembre al 26 de octubre</em> </p>\n<p>para consultora informática en <strong>A Coruña</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 5 de julio al 6 de julio</em> </p>\n<p>abierto al público <strong>on line</strong> </p>\n</blockquote>\n<hr>\n<blockquote>\n<p>###AngularJS</p>\n<p><em>del 27 de junio al 5 de julio</em> </p>\n<p>abierto al público en <strong>A Coruña</strong></p>\n</blockquote>\n<hr>\n<p>^^^</p>\n<h2 id=\"2014-1\"><a href=\"#2014-1\" class=\"headerlink\" title=\"2014\"></a>2014</h2><hr>\n"},{"title":"Noticias Junio 2016","id":16,"updated":"2016-06-06T12:28:19.000Z","date":"2016-06-03T08:44:51.000Z","_content":"\n##06-06-16\n\n\n###Angular 2 R.C.: La evolución de la plataforma.\nAngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo ...JS. Pero la esperada versión [Angular2](http://angular.io) lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.\n\nTodo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora [es una plataforma](/angular2-primeras-impresiones/) mucho más cercana al mundo empresarial. \n\nUsa esta [serie de artículos sobre Angular2](/tag/angular2/) como tutorial para adaptarte a esta evolución.\n \n###Enlaces para aprender\n####[AngularJS] : [Mejorar el Rendimiento en una línea.]()\nParece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.\n \n####[JavaScript] : [La fatiga de frameworks comparada.]()\nEmpiezo por la consabida broma de pedir una moratoria en el desarrollo de armas... digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.\n \n####[NodeJS] : [Monitorizar aplicaciones bien y fácil.]()\nSi no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(' ;-) ').\n \n####[MongoDB] : [Rendimiento y Monitorización de MongoDB.]()\nAhora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.\n \n####[CleanCode] : [Escribe código pensando en mantenerlo.]()\nEscribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.\n \n###Próximas actividades\nEste es el mes de Angular2. Su estreno como Release Candidate permite ofrecer [formación con garantías](/promociones). Nos vemos.\n\n \n>*Keep coding, keep learning.*","source":"Noticias-Junio-2016/index.md","raw":"---\ntitle: Noticias Junio 2016\npermalink: noticias-junio-16\nid: 16\nupdated: '2016-06-06 14:28:19'\ndate: 2016-06-03 10:44:51\n---\n\n##06-06-16\n\n\n###Angular 2 R.C.: La evolución de la plataforma.\nAngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo ...JS. Pero la esperada versión [Angular2](http://angular.io) lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.\n\nTodo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora [es una plataforma](/angular2-primeras-impresiones/) mucho más cercana al mundo empresarial. \n\nUsa esta [serie de artículos sobre Angular2](/tag/angular2/) como tutorial para adaptarte a esta evolución.\n \n###Enlaces para aprender\n####[AngularJS] : [Mejorar el Rendimiento en una línea.]()\nParece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.\n \n####[JavaScript] : [La fatiga de frameworks comparada.]()\nEmpiezo por la consabida broma de pedir una moratoria en el desarrollo de armas... digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.\n \n####[NodeJS] : [Monitorizar aplicaciones bien y fácil.]()\nSi no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(' ;-) ').\n \n####[MongoDB] : [Rendimiento y Monitorización de MongoDB.]()\nAhora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.\n \n####[CleanCode] : [Escribe código pensando en mantenerlo.]()\nEscribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.\n \n###Próximas actividades\nEste es el mes de Angular2. Su estreno como Release Candidate permite ofrecer [formación con garantías](/promociones). Nos vemos.\n\n \n>*Keep coding, keep learning.*","path":"noticias-junio-16.html","comments":1,"layout":"page","_id":"cj9r8gizl0008c7jsksc0zky8","content":"<p>##06-06-16</p>\n<p>###Angular 2 R.C.: La evolución de la plataforma.<br>AngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo …JS. Pero la esperada versión <a href=\"http://angular.io\" target=\"_blank\" rel=\"external\">Angular2</a> lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.</p>\n<p>Todo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora <a href=\"/angular2-primeras-impresiones/\">es una plataforma</a> mucho más cercana al mundo empresarial. </p>\n<p>Usa esta <a href=\"/tag/angular2/\">serie de artículos sobre Angular2</a> como tutorial para adaptarte a esta evolución.</p>\n<p>###Enlaces para aprender</p>\n<p>####[AngularJS] : <a href=\"\">Mejorar el Rendimiento en una línea.</a><br>Parece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.</p>\n<p>####[JavaScript] : <a href=\"\">La fatiga de frameworks comparada.</a><br>Empiezo por la consabida broma de pedir una moratoria en el desarrollo de armas… digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.</p>\n<p>####[NodeJS] : <a href=\"\">Monitorizar aplicaciones bien y fácil.</a><br>Si no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(‘ ;-) ‘).</p>\n<p>####[MongoDB] : <a href=\"\">Rendimiento y Monitorización de MongoDB.</a><br>Ahora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.</p>\n<p>####[CleanCode] : <a href=\"\">Escribe código pensando en mantenerlo.</a><br>Escribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.</p>\n<p>###Próximas actividades<br>Este es el mes de Angular2. Su estreno como Release Candidate permite ofrecer <a href=\"/promociones\">formación con garantías</a>. Nos vemos.</p>\n<blockquote>\n<p><em>Keep coding, keep learning.</em></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>##06-06-16</p>\n<p>###Angular 2 R.C.: La evolución de la plataforma.<br>AngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo …JS. Pero la esperada versión <a href=\"http://angular.io\" target=\"_blank\" rel=\"external\">Angular2</a> lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.</p>\n<p>Todo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora <a href=\"/angular2-primeras-impresiones/\">es una plataforma</a> mucho más cercana al mundo empresarial. </p>\n<p>Usa esta <a href=\"/tag/angular2/\">serie de artículos sobre Angular2</a> como tutorial para adaptarte a esta evolución.</p>\n<p>###Enlaces para aprender</p>\n<p>####[AngularJS] : <a href=\"\">Mejorar el Rendimiento en una línea.</a><br>Parece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.</p>\n<p>####[JavaScript] : <a href=\"\">La fatiga de frameworks comparada.</a><br>Empiezo por la consabida broma de pedir una moratoria en el desarrollo de armas… digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.</p>\n<p>####[NodeJS] : <a href=\"\">Monitorizar aplicaciones bien y fácil.</a><br>Si no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(‘ ;-) ‘).</p>\n<p>####[MongoDB] : <a href=\"\">Rendimiento y Monitorización de MongoDB.</a><br>Ahora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.</p>\n<p>####[CleanCode] : <a href=\"\">Escribe código pensando en mantenerlo.</a><br>Escribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.</p>\n<p>###Próximas actividades<br>Este es el mes de Angular2. Su estreno como Release Candidate permite ofrecer <a href=\"/promociones\">formación con garantías</a>. Nos vemos.</p>\n<blockquote>\n<p><em>Keep coding, keep learning.</em></p>\n</blockquote>\n"},{"title":"Promociones","id":25,"updated":"2016-05-27T06:46:03.000Z","date":"2016-05-10T11:53:10.000Z","_content":"\n#Cursos de Angular2\n\n---\n\n####Online\n\nInicio 9 de junio de 2016\n\n###[Angular 2, desarrollo de aplicaciones empresariales con HTML](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\nCon EscuelaIT\n\n\n---\n\n####Presencial en Coruña\n\nInicio 10 de junio de 2016\n\n###[A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x](http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x)\n\nCon Vitae Digital","source":"Promociones/index.md","raw":"---\ntitle: Promociones\npermalink: promociones\nid: 25\nupdated: '2016-05-27 08:46:03'\ndate: 2016-05-10 13:53:10\n---\n\n#Cursos de Angular2\n\n---\n\n####Online\n\nInicio 9 de junio de 2016\n\n###[Angular 2, desarrollo de aplicaciones empresariales con HTML](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\nCon EscuelaIT\n\n\n---\n\n####Presencial en Coruña\n\nInicio 10 de junio de 2016\n\n###[A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x](http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x)\n\nCon Vitae Digital","path":"promociones.html","comments":1,"layout":"page","_id":"cj9r8gizp000ac7js4x3j31i7","content":"<p>#Cursos de Angular2</p>\n<hr>\n<p>####Online</p>\n<p>Inicio 9 de junio de 2016</p>\n<p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular 2, desarrollo de aplicaciones empresariales con HTML</a></p>\n<p>Con EscuelaIT</p>\n<hr>\n<p>####Presencial en Coruña</p>\n<p>Inicio 10 de junio de 2016</p>\n<p>###<a href=\"http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x\" target=\"_blank\" rel=\"external\">A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x</a></p>\n<p>Con Vitae Digital</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#Cursos de Angular2</p>\n<hr>\n<p>####Online</p>\n<p>Inicio 9 de junio de 2016</p>\n<p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular 2, desarrollo de aplicaciones empresariales con HTML</a></p>\n<p>Con EscuelaIT</p>\n<hr>\n<p>####Presencial en Coruña</p>\n<p>Inicio 10 de junio de 2016</p>\n<p>###<a href=\"http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x\" target=\"_blank\" rel=\"external\">A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x</a></p>\n<p>Con Vitae Digital</p>\n"},{"title":"[object Object]","tags":null,"_content":"","source":"scaffolds/draft.md","raw":"---\ntitle: {{ title }}\ntags:\n---\n","date":"2017-10-31T17:31:28.000Z","updated":"2017-10-31T17:31:28.000Z","path":"scaffolds/draft.html","comments":1,"layout":"page","_id":"cj9r8gj2o002yc7jssdh4hw6j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[object Object]","date":"2017-10-31T17:31:28.000Z","_content":"","source":"scaffolds/page.md","raw":"---\ntitle: {{ title }}\ndate: {{ date }}\n---\n","updated":"2017-10-31T17:31:28.000Z","path":"scaffolds/page.html","comments":1,"layout":"page","_id":"cj9r8gj2p002zc7jsw61ovidd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[object Object]","date":"2017-10-31T17:31:28.000Z","tags":null,"_content":"","source":"scaffolds/post.md","raw":"---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n","updated":"2017-10-31T17:31:28.000Z","path":"scaffolds/post.html","comments":1,"layout":"page","_id":"cj9r8gj2r0030c7js5sg74m04","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"7 formas de incluir Bootstrap en nuestro proyecto","id":"6","updated":"2015-11-12T15:55:15.000Z","date":"2015-11-12T14:40:12.000Z","_content":"\n### 1- Descargando los archivos\n\nHaz clic en el botón **\"Download Bootstrap\"** y se descargará una carpeta comprimida, al descomprimirla te encontrarás las versiones compiladas y minificadas de Bootstrap así como los iconos que utiliza:\n\n```\nbootstrap/\n├── css/\n│   ├── bootstrap.css\n│   ├── bootstrap.css.map\n│   ├── bootstrap.min.css\n│   ├── bootstrap.min.css.map\n│   ├── bootstrap-theme.css\n│   ├── bootstrap-theme.css.map\n│   ├── bootstrap-theme.min.css\n│   └── bootstrap-theme.min.css.map\n├── js/\n│   ├── bootstrap.js\n│   └── bootstrap.min.js\n└── fonts/\n    ├── glyphicons-halflings-regular.eot\n    ├── glyphicons-halflings-regular.svg\n    ├── glyphicons-halflings-regular.ttf\n    ├── glyphicons-halflings-regular.woff\n    └── glyphicons-halflings-regular.woff2\n\n```\n\n\n\n### 2- Para usuarios de GitHub\n\nBootstrap es un proyecto en código abierto así que puedes **clonar** o hacer **fork** desde [GitHub](https://github.com/twbs/bootstrap)\n\n### 3- Código fuente original\n\nLo obtienes al hacer clic en el botón **\"Download source\"**. Lo que obtienes son los archivos **LESS** y **Javascript** originales. Esta opción requiere **Grunt** y **Node.js** y se estructura dentro de la siguiente manera:\n\n```\nbootstrap/\n├── less/\n├── js/\n├── fonts/\n├── dist/\n│   ├── css/\n│   ├── js/\n│   └── fonts/\n└── docs/\n    └── examples/\n```\n### 4- Fans de Bower\n\nSi tenemos **Git** y **Bower** instalado simplemente debes teclear en tu terminal:\n\n```\n$ bower install bootstrap\n```\n\nY el pajarito hará todo el trabajo.\n\n### 5- NPM Install\n\nTan fácil como con Bower solo que esta vez debes teclear en tu terminal:\n\n```\n$ npm install bootstrap\n```\n\n### 6- Versión en SASS\n\nA pesar de que **Bootstrap 3 fue escrito en LESS** (aspecto que cambiará en la versión 4, que será en SASS), existe una versión para SASS que puedes descargar en el botón **\"Download SASS\"** para facilitar su inclusión en proyectos en **Rails**, **Compass** o solo **SASS**.\n\n### 7- CDN\n\nPor último, si no quieres descargarte nada puedes utilizar los links del proveedor de **CDN** y referenciarlos en tu HTML:\n\n```html\n<!-- CSS -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" integrity=\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\" crossorigin=\"anonymous\">\n\n<!-- Tema opcional -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\" integrity=\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\" crossorigin=\"anonymous\">\n\n<!-- JavaScript -->\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\" integrity=\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\" crossorigin=\"anonymous\"></script>\n```\n\nEsta es la manera más fácil pero no podrás trabajar sin conexión a internet.\n\n\n\n\n","source":"_posts/7-formas-de-incluir-Bootstrap-en-nuestro-proyecto.md","raw":"---\ntitle: 7 formas de incluir Bootstrap en nuestro proyecto\ntags:  \n- Bootstrap\ncategories:\n- Introducción \npermalink: formas\nid: 6\nupdated: 2015/11/12 16:55:15\ndate: 2015/11/12 15:40:12\n---\n\n### 1- Descargando los archivos\n\nHaz clic en el botón **\"Download Bootstrap\"** y se descargará una carpeta comprimida, al descomprimirla te encontrarás las versiones compiladas y minificadas de Bootstrap así como los iconos que utiliza:\n\n```\nbootstrap/\n├── css/\n│   ├── bootstrap.css\n│   ├── bootstrap.css.map\n│   ├── bootstrap.min.css\n│   ├── bootstrap.min.css.map\n│   ├── bootstrap-theme.css\n│   ├── bootstrap-theme.css.map\n│   ├── bootstrap-theme.min.css\n│   └── bootstrap-theme.min.css.map\n├── js/\n│   ├── bootstrap.js\n│   └── bootstrap.min.js\n└── fonts/\n    ├── glyphicons-halflings-regular.eot\n    ├── glyphicons-halflings-regular.svg\n    ├── glyphicons-halflings-regular.ttf\n    ├── glyphicons-halflings-regular.woff\n    └── glyphicons-halflings-regular.woff2\n\n```\n\n\n\n### 2- Para usuarios de GitHub\n\nBootstrap es un proyecto en código abierto así que puedes **clonar** o hacer **fork** desde [GitHub](https://github.com/twbs/bootstrap)\n\n### 3- Código fuente original\n\nLo obtienes al hacer clic en el botón **\"Download source\"**. Lo que obtienes son los archivos **LESS** y **Javascript** originales. Esta opción requiere **Grunt** y **Node.js** y se estructura dentro de la siguiente manera:\n\n```\nbootstrap/\n├── less/\n├── js/\n├── fonts/\n├── dist/\n│   ├── css/\n│   ├── js/\n│   └── fonts/\n└── docs/\n    └── examples/\n```\n### 4- Fans de Bower\n\nSi tenemos **Git** y **Bower** instalado simplemente debes teclear en tu terminal:\n\n```\n$ bower install bootstrap\n```\n\nY el pajarito hará todo el trabajo.\n\n### 5- NPM Install\n\nTan fácil como con Bower solo que esta vez debes teclear en tu terminal:\n\n```\n$ npm install bootstrap\n```\n\n### 6- Versión en SASS\n\nA pesar de que **Bootstrap 3 fue escrito en LESS** (aspecto que cambiará en la versión 4, que será en SASS), existe una versión para SASS que puedes descargar en el botón **\"Download SASS\"** para facilitar su inclusión en proyectos en **Rails**, **Compass** o solo **SASS**.\n\n### 7- CDN\n\nPor último, si no quieres descargarte nada puedes utilizar los links del proveedor de **CDN** y referenciarlos en tu HTML:\n\n```html\n<!-- CSS -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" integrity=\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\" crossorigin=\"anonymous\">\n\n<!-- Tema opcional -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\" integrity=\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\" crossorigin=\"anonymous\">\n\n<!-- JavaScript -->\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\" integrity=\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\" crossorigin=\"anonymous\"></script>\n```\n\nEsta es la manera más fácil pero no podrás trabajar sin conexión a internet.\n\n\n\n\n","slug":"formas","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8giyr0001c7jsbvjhmizz","content":"<h3 id=\"1-Descargando-los-archivos\"><a href=\"#1-Descargando-los-archivos\" class=\"headerlink\" title=\"1- Descargando los archivos\"></a>1- Descargando los archivos</h3><p>Haz clic en el botón <strong>“Download Bootstrap”</strong> y se descargará una carpeta comprimida, al descomprimirla te encontrarás las versiones compiladas y minificadas de Bootstrap así como los iconos que utiliza:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">bootstrap/</div><div class=\"line\">├── css/</div><div class=\"line\">│   ├── bootstrap.css</div><div class=\"line\">│   ├── bootstrap.css.map</div><div class=\"line\">│   ├── bootstrap.min.css</div><div class=\"line\">│   ├── bootstrap.min.css.map</div><div class=\"line\">│   ├── bootstrap-theme.css</div><div class=\"line\">│   ├── bootstrap-theme.css.map</div><div class=\"line\">│   ├── bootstrap-theme.min.css</div><div class=\"line\">│   └── bootstrap-theme.min.css.map</div><div class=\"line\">├── js/</div><div class=\"line\">│   ├── bootstrap.js</div><div class=\"line\">│   └── bootstrap.min.js</div><div class=\"line\">└── fonts/</div><div class=\"line\">    ├── glyphicons-halflings-regular.eot</div><div class=\"line\">    ├── glyphicons-halflings-regular.svg</div><div class=\"line\">    ├── glyphicons-halflings-regular.ttf</div><div class=\"line\">    ├── glyphicons-halflings-regular.woff</div><div class=\"line\">    └── glyphicons-halflings-regular.woff2</div></pre></td></tr></table></figure>\n<h3 id=\"2-Para-usuarios-de-GitHub\"><a href=\"#2-Para-usuarios-de-GitHub\" class=\"headerlink\" title=\"2- Para usuarios de GitHub\"></a>2- Para usuarios de GitHub</h3><p>Bootstrap es un proyecto en código abierto así que puedes <strong>clonar</strong> o hacer <strong>fork</strong> desde <a href=\"https://github.com/twbs/bootstrap\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n<h3 id=\"3-Codigo-fuente-original\"><a href=\"#3-Codigo-fuente-original\" class=\"headerlink\" title=\"3- Código fuente original\"></a>3- Código fuente original</h3><p>Lo obtienes al hacer clic en el botón <strong>“Download source”</strong>. Lo que obtienes son los archivos <strong>LESS</strong> y <strong>Javascript</strong> originales. Esta opción requiere <strong>Grunt</strong> y <strong>Node.js</strong> y se estructura dentro de la siguiente manera:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">bootstrap/</div><div class=\"line\">├── less/</div><div class=\"line\">├── js/</div><div class=\"line\">├── fonts/</div><div class=\"line\">├── dist/</div><div class=\"line\">│   ├── css/</div><div class=\"line\">│   ├── js/</div><div class=\"line\">│   └── fonts/</div><div class=\"line\">└── docs/</div><div class=\"line\">    └── examples/</div></pre></td></tr></table></figure>\n<h3 id=\"4-Fans-de-Bower\"><a href=\"#4-Fans-de-Bower\" class=\"headerlink\" title=\"4- Fans de Bower\"></a>4- Fans de Bower</h3><p>Si tenemos <strong>Git</strong> y <strong>Bower</strong> instalado simplemente debes teclear en tu terminal:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ bower install bootstrap</div></pre></td></tr></table></figure>\n<p>Y el pajarito hará todo el trabajo.</p>\n<h3 id=\"5-NPM-Install\"><a href=\"#5-NPM-Install\" class=\"headerlink\" title=\"5- NPM Install\"></a>5- NPM Install</h3><p>Tan fácil como con Bower solo que esta vez debes teclear en tu terminal:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install bootstrap</div></pre></td></tr></table></figure>\n<h3 id=\"6-Version-en-SASS\"><a href=\"#6-Version-en-SASS\" class=\"headerlink\" title=\"6- Versión en SASS\"></a>6- Versión en SASS</h3><p>A pesar de que <strong>Bootstrap 3 fue escrito en LESS</strong> (aspecto que cambiará en la versión 4, que será en SASS), existe una versión para SASS que puedes descargar en el botón <strong>“Download SASS”</strong> para facilitar su inclusión en proyectos en <strong>Rails</strong>, <strong>Compass</strong> o solo <strong>SASS</strong>.</p>\n<h3 id=\"7-CDN\"><a href=\"#7-CDN\" class=\"headerlink\" title=\"7- CDN\"></a>7- CDN</h3><p>Por último, si no quieres descargarte nada puedes utilizar los links del proveedor de <strong>CDN</strong> y referenciarlos en tu HTML:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- CSS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Tema opcional --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- JavaScript --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Esta es la manera más fácil pero no podrás trabajar sin conexión a internet.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Descargando-los-archivos\"><a href=\"#1-Descargando-los-archivos\" class=\"headerlink\" title=\"1- Descargando los archivos\"></a>1- Descargando los archivos</h3><p>Haz clic en el botón <strong>“Download Bootstrap”</strong> y se descargará una carpeta comprimida, al descomprimirla te encontrarás las versiones compiladas y minificadas de Bootstrap así como los iconos que utiliza:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">bootstrap/</div><div class=\"line\">├── css/</div><div class=\"line\">│   ├── bootstrap.css</div><div class=\"line\">│   ├── bootstrap.css.map</div><div class=\"line\">│   ├── bootstrap.min.css</div><div class=\"line\">│   ├── bootstrap.min.css.map</div><div class=\"line\">│   ├── bootstrap-theme.css</div><div class=\"line\">│   ├── bootstrap-theme.css.map</div><div class=\"line\">│   ├── bootstrap-theme.min.css</div><div class=\"line\">│   └── bootstrap-theme.min.css.map</div><div class=\"line\">├── js/</div><div class=\"line\">│   ├── bootstrap.js</div><div class=\"line\">│   └── bootstrap.min.js</div><div class=\"line\">└── fonts/</div><div class=\"line\">    ├── glyphicons-halflings-regular.eot</div><div class=\"line\">    ├── glyphicons-halflings-regular.svg</div><div class=\"line\">    ├── glyphicons-halflings-regular.ttf</div><div class=\"line\">    ├── glyphicons-halflings-regular.woff</div><div class=\"line\">    └── glyphicons-halflings-regular.woff2</div></pre></td></tr></table></figure>\n<h3 id=\"2-Para-usuarios-de-GitHub\"><a href=\"#2-Para-usuarios-de-GitHub\" class=\"headerlink\" title=\"2- Para usuarios de GitHub\"></a>2- Para usuarios de GitHub</h3><p>Bootstrap es un proyecto en código abierto así que puedes <strong>clonar</strong> o hacer <strong>fork</strong> desde <a href=\"https://github.com/twbs/bootstrap\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n<h3 id=\"3-Codigo-fuente-original\"><a href=\"#3-Codigo-fuente-original\" class=\"headerlink\" title=\"3- Código fuente original\"></a>3- Código fuente original</h3><p>Lo obtienes al hacer clic en el botón <strong>“Download source”</strong>. Lo que obtienes son los archivos <strong>LESS</strong> y <strong>Javascript</strong> originales. Esta opción requiere <strong>Grunt</strong> y <strong>Node.js</strong> y se estructura dentro de la siguiente manera:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">bootstrap/</div><div class=\"line\">├── less/</div><div class=\"line\">├── js/</div><div class=\"line\">├── fonts/</div><div class=\"line\">├── dist/</div><div class=\"line\">│   ├── css/</div><div class=\"line\">│   ├── js/</div><div class=\"line\">│   └── fonts/</div><div class=\"line\">└── docs/</div><div class=\"line\">    └── examples/</div></pre></td></tr></table></figure>\n<h3 id=\"4-Fans-de-Bower\"><a href=\"#4-Fans-de-Bower\" class=\"headerlink\" title=\"4- Fans de Bower\"></a>4- Fans de Bower</h3><p>Si tenemos <strong>Git</strong> y <strong>Bower</strong> instalado simplemente debes teclear en tu terminal:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ bower install bootstrap</div></pre></td></tr></table></figure>\n<p>Y el pajarito hará todo el trabajo.</p>\n<h3 id=\"5-NPM-Install\"><a href=\"#5-NPM-Install\" class=\"headerlink\" title=\"5- NPM Install\"></a>5- NPM Install</h3><p>Tan fácil como con Bower solo que esta vez debes teclear en tu terminal:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install bootstrap</div></pre></td></tr></table></figure>\n<h3 id=\"6-Version-en-SASS\"><a href=\"#6-Version-en-SASS\" class=\"headerlink\" title=\"6- Versión en SASS\"></a>6- Versión en SASS</h3><p>A pesar de que <strong>Bootstrap 3 fue escrito en LESS</strong> (aspecto que cambiará en la versión 4, que será en SASS), existe una versión para SASS que puedes descargar en el botón <strong>“Download SASS”</strong> para facilitar su inclusión en proyectos en <strong>Rails</strong>, <strong>Compass</strong> o solo <strong>SASS</strong>.</p>\n<h3 id=\"7-CDN\"><a href=\"#7-CDN\" class=\"headerlink\" title=\"7- CDN\"></a>7- CDN</h3><p>Por último, si no quieres descargarte nada puedes utilizar los links del proveedor de <strong>CDN</strong> y referenciarlos en tu HTML:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- CSS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Tema opcional --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- JavaScript --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Esta es la manera más fácil pero no podrás trabajar sin conexión a internet.</p>\n"},{"title":"Angular2 DI: Inyección de dependencias","id":"14","updated":"2016-11-10T13:52:13.000Z","date":"2016-05-30T09:09:09.000Z","_content":"\n>Código asociado en [angular2/4-injection/](https://github.com/AcademiaBinaria/angular2/tree/master/4-injection)\n\nAngularJS2 tiene vocación de *framework* para grandes aplicaciones de negocio. Los grandes desarrollos requieren **modularidad en el código**. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón *[Dependency Injection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias)*. \n\nLos cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer **aplicaciones de negocio con HTML y JavaScript** de manera controlable.\n\n<!-- more -->\n\n## Módulos, componentes y servicios\nEn AngularJS 1 teníamos muy presente el concepto de **módulo**. Rara era la aplicación que no comenzase con el mítico `angular.module('miAplicacion')`. Dada la carencia de un sistema modular nativo en *JavaScript*, AngularJS nos proveía de uno propio. \n\nHoy en día se nos sugiere que usemos las versiones avanzadas de *JS*, o mejor aún *TypeScript*. Estos lenguajes nos ofrecen las instrucciones `export` e `import` que permiten definir **módulos estancos en ficheros** independientes. Nunca más el engorroso envolvimiento *IIFE* `(function () { … }())`.\n\nA partir de ahí es el programador el que selectivamente **exporta funcionalidad que importará para ser consumida** mas tarde. De este modo, Angular se desentiende de la creación de módulos de código y se centra en la comunicación entre los objetos que componen la aplicación.\n\n\n### Componentes\nSon los bloques de construcción agrupables en compuestos que forman la interfaz visual de una aplicación. Encapsulan **la vista, los datos y la lógica** para interactuar con el usuario. \n\nNi la vista ni la lógica deben crecer y realizar tareas que no sean de su exclusiva capa de responsabilidad. Esas tareas debe ser delegadas en otros objetos. \n\n> Modelo de composición de componentes visuales para crear vistas complejas. La comunicación o [Data Flow](../databinding-el-flujo-de-datos-de-angular2/) se realiza de manera declarativa. Enviando datos a las propiedades de los hijos y esperando eventos con respuestas.\n\n![Composición mediante componentes](/images/ng2-Component-DataFlow.jpg)\n\n### Servicios\nLos servicios serán **objetos especializados y reutilizables** por otros servicios y componentes. En su definición debes aplicar los mismos principios de arquitectura de software que ya conoces y aplicas en *lenguajes clásicos tipo Java o C#.net*.\n\nLa sintaxis de la comunicación involucra varios bloques en ambos lados del canal: \n\n- la definición del servicio decorado como `@Injectable()` en el proveedor, \n- la exportación en el proveedor y la importación en el consumidor, \n- el registro en el array `providers:[]` del componente consumidor (o mejor del módulo) conumidor y \n- el consumo en el constructor del componente o servicio consumidor.\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\nimport { MovimientosService, Movimiento } from '../shared/';\n@Component({\n  selector: 'movimiento',\n  templateUrl: 'movimiento.component.html',\n  providers: [MovimientosService] \n})\nexport class MovimientoComponent {\n  movimiento: Movimiento\n  constructor(public movimientosService: MovimientosService) { }\n  guardarMovimiento() {\n    this.movimientosService.guardarMovimiento(this.movimiento)\n  }\n}\n```\n\n![Inyección de servicios en componentes ](/images/ng2-DI-component-service.jpg)\n\n### Directivas\nLas directivas eran el ADN de AngularJS1. Ahora han mutado en **componentes reutilizables** como elementos en las vistas de otros componentes de rango superior. Pero la idea es la misma, desglosar las plantillas de HTML en bloques con un propósito único. \n\nLa sintaxis de las directivas es similar: \n\n- la definición del servicio decorado como `@Injectable()` en el componente hijo, \n- la exportación del hijo y la importación en el padre, \n- el registro en el array `directives:[]` del componente padre (o del módulo padre) y \n- el consumo declarativo en la plantilla de la vista padre.\n\n```javascript\nimport { Component } from '@angular/core';\nimport { MovimientoComponent } from './movimiento';\n@Component({\n  selector: 'injection-app',\n  template: '<h1>\n              {{titulo}}\n            </h1>\n            <movimiento></movimiento>',\n  directives:[MovimientoComponent]\n})\nexport class InjectionAppComponent {\n  titulo = 'Inyectores listos!';\n}\n```\n![Inyección de directivas en componentes](/images/ng2-DI-component-directive.jpg)\n\n## Registro\n\nLa inyección de las dependencias **funciona de manera jerárquica** en AngularJS 2. Cuando un módulo registra una dependencia la pone a disposición de todos sus componentes hijos. Es más, si algún hijo la volviese a registrar se le proveería de otra instancia. \n\nEsta copia puede provocar efectos colaterales indeseados. Para **compartir datos** o ahorrar memoria se recomienda registrar las dependencias lo más arriba posible. Esto siempre sin sacrificar la modularidad o la escalabilidad de aplicaciones que requieran *lazy loading*.\n\n> Atención a la copia de *routeService* que se registra por segunda vez. No importa que ya la haya registrado su padre. Otro registro implica otra instancia.\n\n![Jerarquía de dependencias en AngularJS](/images/ng2-Arbol-de-dependencias.jpg)\n\nPara ciertos casos, AngularJS 2 permite modelos de inyección más avanzados. Mediante el uso de **factorías y el registro de cadenas** con los nombres de los servicios facilita la inyección a voluntad o la carga diferida.\n\n>Algunas de estas posibilidades están siendo retocadas durante la actual *Release Candidate*, y se esperan cambios de cara a las próxima versión estable.\n\nEl viejo principio de *divide y vencerás* se aplica rotundamente en las aplicaciones Angular 2. Si creas **módulos reutilizables** estarás sentando las bases para crear grandes aplicaciones de negocio con AngularJS.\n","source":"_posts/Angular2-DI-Inyeccion-de-dependencias.md","raw":"---\ntitle: 'Angular2 DI: Inyección de dependencias'\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: angular2-di-inyeccion-de-dependencias\nid: 14\nupdated: 2016/11/10 14:52:13\ndate: 2016/05/30 11:09:09\n---\n\n>Código asociado en [angular2/4-injection/](https://github.com/AcademiaBinaria/angular2/tree/master/4-injection)\n\nAngularJS2 tiene vocación de *framework* para grandes aplicaciones de negocio. Los grandes desarrollos requieren **modularidad en el código**. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón *[Dependency Injection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias)*. \n\nLos cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer **aplicaciones de negocio con HTML y JavaScript** de manera controlable.\n\n<!-- more -->\n\n## Módulos, componentes y servicios\nEn AngularJS 1 teníamos muy presente el concepto de **módulo**. Rara era la aplicación que no comenzase con el mítico `angular.module('miAplicacion')`. Dada la carencia de un sistema modular nativo en *JavaScript*, AngularJS nos proveía de uno propio. \n\nHoy en día se nos sugiere que usemos las versiones avanzadas de *JS*, o mejor aún *TypeScript*. Estos lenguajes nos ofrecen las instrucciones `export` e `import` que permiten definir **módulos estancos en ficheros** independientes. Nunca más el engorroso envolvimiento *IIFE* `(function () { … }())`.\n\nA partir de ahí es el programador el que selectivamente **exporta funcionalidad que importará para ser consumida** mas tarde. De este modo, Angular se desentiende de la creación de módulos de código y se centra en la comunicación entre los objetos que componen la aplicación.\n\n\n### Componentes\nSon los bloques de construcción agrupables en compuestos que forman la interfaz visual de una aplicación. Encapsulan **la vista, los datos y la lógica** para interactuar con el usuario. \n\nNi la vista ni la lógica deben crecer y realizar tareas que no sean de su exclusiva capa de responsabilidad. Esas tareas debe ser delegadas en otros objetos. \n\n> Modelo de composición de componentes visuales para crear vistas complejas. La comunicación o [Data Flow](../databinding-el-flujo-de-datos-de-angular2/) se realiza de manera declarativa. Enviando datos a las propiedades de los hijos y esperando eventos con respuestas.\n\n![Composición mediante componentes](/images/ng2-Component-DataFlow.jpg)\n\n### Servicios\nLos servicios serán **objetos especializados y reutilizables** por otros servicios y componentes. En su definición debes aplicar los mismos principios de arquitectura de software que ya conoces y aplicas en *lenguajes clásicos tipo Java o C#.net*.\n\nLa sintaxis de la comunicación involucra varios bloques en ambos lados del canal: \n\n- la definición del servicio decorado como `@Injectable()` en el proveedor, \n- la exportación en el proveedor y la importación en el consumidor, \n- el registro en el array `providers:[]` del componente consumidor (o mejor del módulo) conumidor y \n- el consumo en el constructor del componente o servicio consumidor.\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\nimport { MovimientosService, Movimiento } from '../shared/';\n@Component({\n  selector: 'movimiento',\n  templateUrl: 'movimiento.component.html',\n  providers: [MovimientosService] \n})\nexport class MovimientoComponent {\n  movimiento: Movimiento\n  constructor(public movimientosService: MovimientosService) { }\n  guardarMovimiento() {\n    this.movimientosService.guardarMovimiento(this.movimiento)\n  }\n}\n```\n\n![Inyección de servicios en componentes ](/images/ng2-DI-component-service.jpg)\n\n### Directivas\nLas directivas eran el ADN de AngularJS1. Ahora han mutado en **componentes reutilizables** como elementos en las vistas de otros componentes de rango superior. Pero la idea es la misma, desglosar las plantillas de HTML en bloques con un propósito único. \n\nLa sintaxis de las directivas es similar: \n\n- la definición del servicio decorado como `@Injectable()` en el componente hijo, \n- la exportación del hijo y la importación en el padre, \n- el registro en el array `directives:[]` del componente padre (o del módulo padre) y \n- el consumo declarativo en la plantilla de la vista padre.\n\n```javascript\nimport { Component } from '@angular/core';\nimport { MovimientoComponent } from './movimiento';\n@Component({\n  selector: 'injection-app',\n  template: '<h1>\n              {{titulo}}\n            </h1>\n            <movimiento></movimiento>',\n  directives:[MovimientoComponent]\n})\nexport class InjectionAppComponent {\n  titulo = 'Inyectores listos!';\n}\n```\n![Inyección de directivas en componentes](/images/ng2-DI-component-directive.jpg)\n\n## Registro\n\nLa inyección de las dependencias **funciona de manera jerárquica** en AngularJS 2. Cuando un módulo registra una dependencia la pone a disposición de todos sus componentes hijos. Es más, si algún hijo la volviese a registrar se le proveería de otra instancia. \n\nEsta copia puede provocar efectos colaterales indeseados. Para **compartir datos** o ahorrar memoria se recomienda registrar las dependencias lo más arriba posible. Esto siempre sin sacrificar la modularidad o la escalabilidad de aplicaciones que requieran *lazy loading*.\n\n> Atención a la copia de *routeService* que se registra por segunda vez. No importa que ya la haya registrado su padre. Otro registro implica otra instancia.\n\n![Jerarquía de dependencias en AngularJS](/images/ng2-Arbol-de-dependencias.jpg)\n\nPara ciertos casos, AngularJS 2 permite modelos de inyección más avanzados. Mediante el uso de **factorías y el registro de cadenas** con los nombres de los servicios facilita la inyección a voluntad o la carga diferida.\n\n>Algunas de estas posibilidades están siendo retocadas durante la actual *Release Candidate*, y se esperan cambios de cara a las próxima versión estable.\n\nEl viejo principio de *divide y vencerás* se aplica rotundamente en las aplicaciones Angular 2. Si creas **módulos reutilizables** estarás sentando las bases para crear grandes aplicaciones de negocio con AngularJS.\n","slug":"angular2-di-inyeccion-de-dependencias","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8giz10003c7js6s5wls0g","content":"<blockquote>\n<p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/4-injection\" target=\"_blank\" rel=\"external\">angular2/4-injection/</a></p>\n</blockquote>\n<p>AngularJS2 tiene vocación de <em>framework</em> para grandes aplicaciones de negocio. Los grandes desarrollos requieren <strong>modularidad en el código</strong>. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón <em><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\" target=\"_blank\" rel=\"external\">Dependency Injection</a></em>. </p>\n<p>Los cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer <strong>aplicaciones de negocio con HTML y JavaScript</strong> de manera controlable.</p>\n<a id=\"more\"></a>\n<h2 id=\"Modulos-componentes-y-servicios\"><a href=\"#Modulos-componentes-y-servicios\" class=\"headerlink\" title=\"Módulos, componentes y servicios\"></a>Módulos, componentes y servicios</h2><p>En AngularJS 1 teníamos muy presente el concepto de <strong>módulo</strong>. Rara era la aplicación que no comenzase con el mítico <code>angular.module(&#39;miAplicacion&#39;)</code>. Dada la carencia de un sistema modular nativo en <em>JavaScript</em>, AngularJS nos proveía de uno propio. </p>\n<p>Hoy en día se nos sugiere que usemos las versiones avanzadas de <em>JS</em>, o mejor aún <em>TypeScript</em>. Estos lenguajes nos ofrecen las instrucciones <code>export</code> e <code>import</code> que permiten definir <strong>módulos estancos en ficheros</strong> independientes. Nunca más el engorroso envolvimiento <em>IIFE</em> <code>(function () { … }())</code>.</p>\n<p>A partir de ahí es el programador el que selectivamente <strong>exporta funcionalidad que importará para ser consumida</strong> mas tarde. De este modo, Angular se desentiende de la creación de módulos de código y se centra en la comunicación entre los objetos que componen la aplicación.</p>\n<h3 id=\"Componentes\"><a href=\"#Componentes\" class=\"headerlink\" title=\"Componentes\"></a>Componentes</h3><p>Son los bloques de construcción agrupables en compuestos que forman la interfaz visual de una aplicación. Encapsulan <strong>la vista, los datos y la lógica</strong> para interactuar con el usuario. </p>\n<p>Ni la vista ni la lógica deben crecer y realizar tareas que no sean de su exclusiva capa de responsabilidad. Esas tareas debe ser delegadas en otros objetos. </p>\n<blockquote>\n<p>Modelo de composición de componentes visuales para crear vistas complejas. La comunicación o <a href=\"../databinding-el-flujo-de-datos-de-angular2/\">Data Flow</a> se realiza de manera declarativa. Enviando datos a las propiedades de los hijos y esperando eventos con respuestas.</p>\n</blockquote>\n<p><img src=\"/images/ng2-Component-DataFlow.jpg\" alt=\"Composición mediante componentes\"></p>\n<h3 id=\"Servicios\"><a href=\"#Servicios\" class=\"headerlink\" title=\"Servicios\"></a>Servicios</h3><p>Los servicios serán <strong>objetos especializados y reutilizables</strong> por otros servicios y componentes. En su definición debes aplicar los mismos principios de arquitectura de software que ya conoces y aplicas en <em>lenguajes clásicos tipo Java o C#.net</em>.</p>\n<p>La sintaxis de la comunicación involucra varios bloques en ambos lados del canal: </p>\n<ul>\n<li>la definición del servicio decorado como <code>@Injectable()</code> en el proveedor, </li>\n<li>la exportación en el proveedor y la importación en el consumidor, </li>\n<li>el registro en el array <code>providers:[]</code> del componente consumidor (o mejor del módulo) conumidor y </li>\n<li>el consumo en el constructor del componente o servicio consumidor.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosService, Movimiento &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../shared/'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'movimiento'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'movimiento.component.html'</span>,</div><div class=\"line\">  providers: [MovimientosService] </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientoComponent</span> </span>&#123;</div><div class=\"line\">  movimiento: Movimiento</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(public movimientosService: MovimientosService) &#123; &#125;</div><div class=\"line\">  guardarMovimiento() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.movimientosService.guardarMovimiento(<span class=\"keyword\">this</span>.movimiento)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/images/ng2-DI-component-service.jpg\" alt=\"Inyección de servicios en componentes \"></p>\n<h3 id=\"Directivas\"><a href=\"#Directivas\" class=\"headerlink\" title=\"Directivas\"></a>Directivas</h3><p>Las directivas eran el ADN de AngularJS1. Ahora han mutado en <strong>componentes reutilizables</strong> como elementos en las vistas de otros componentes de rango superior. Pero la idea es la misma, desglosar las plantillas de HTML en bloques con un propósito único. </p>\n<p>La sintaxis de las directivas es similar: </p>\n<ul>\n<li>la definición del servicio decorado como <code>@Injectable()</code> en el componente hijo, </li>\n<li>la exportación del hijo y la importación en el padre, </li>\n<li>el registro en el array <code>directives:[]</code> del componente padre (o del módulo padre) y </li>\n<li>el consumo declarativo en la plantilla de la vista padre.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimiento'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'injection-app'</span>,</div><div class=\"line\">  template: <span class=\"string\">'&lt;h1&gt;</span></div><div class=\"line\"><span class=\"string\">              &#123;&#123;titulo&#125;&#125;</span></div><div class=\"line\"><span class=\"string\">            &lt;/h1&gt;</span></div><div class=\"line\"><span class=\"string\">            &lt;movimiento&gt;&lt;/movimiento&gt;'</span>,</div><div class=\"line\">  directives:[MovimientoComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InjectionAppComponent</span> </span>&#123;</div><div class=\"line\">  titulo = <span class=\"string\">'Inyectores listos!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/images/ng2-DI-component-directive.jpg\" alt=\"Inyección de directivas en componentes\"></p>\n<h2 id=\"Registro\"><a href=\"#Registro\" class=\"headerlink\" title=\"Registro\"></a>Registro</h2><p>La inyección de las dependencias <strong>funciona de manera jerárquica</strong> en AngularJS 2. Cuando un módulo registra una dependencia la pone a disposición de todos sus componentes hijos. Es más, si algún hijo la volviese a registrar se le proveería de otra instancia. </p>\n<p>Esta copia puede provocar efectos colaterales indeseados. Para <strong>compartir datos</strong> o ahorrar memoria se recomienda registrar las dependencias lo más arriba posible. Esto siempre sin sacrificar la modularidad o la escalabilidad de aplicaciones que requieran <em>lazy loading</em>.</p>\n<blockquote>\n<p>Atención a la copia de <em>routeService</em> que se registra por segunda vez. No importa que ya la haya registrado su padre. Otro registro implica otra instancia.</p>\n</blockquote>\n<p><img src=\"/images/ng2-Arbol-de-dependencias.jpg\" alt=\"Jerarquía de dependencias en AngularJS\"></p>\n<p>Para ciertos casos, AngularJS 2 permite modelos de inyección más avanzados. Mediante el uso de <strong>factorías y el registro de cadenas</strong> con los nombres de los servicios facilita la inyección a voluntad o la carga diferida.</p>\n<blockquote>\n<p>Algunas de estas posibilidades están siendo retocadas durante la actual <em>Release Candidate</em>, y se esperan cambios de cara a las próxima versión estable.</p>\n</blockquote>\n<p>El viejo principio de <em>divide y vencerás</em> se aplica rotundamente en las aplicaciones Angular 2. Si creas <strong>módulos reutilizables</strong> estarás sentando las bases para crear grandes aplicaciones de negocio con AngularJS.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/4-injection\" target=\"_blank\" rel=\"external\">angular2/4-injection/</a></p>\n</blockquote>\n<p>AngularJS2 tiene vocación de <em>framework</em> para grandes aplicaciones de negocio. Los grandes desarrollos requieren <strong>modularidad en el código</strong>. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón <em><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\" target=\"_blank\" rel=\"external\">Dependency Injection</a></em>. </p>\n<p>Los cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer <strong>aplicaciones de negocio con HTML y JavaScript</strong> de manera controlable.</p>","more":"<h2 id=\"Modulos-componentes-y-servicios\"><a href=\"#Modulos-componentes-y-servicios\" class=\"headerlink\" title=\"Módulos, componentes y servicios\"></a>Módulos, componentes y servicios</h2><p>En AngularJS 1 teníamos muy presente el concepto de <strong>módulo</strong>. Rara era la aplicación que no comenzase con el mítico <code>angular.module(&#39;miAplicacion&#39;)</code>. Dada la carencia de un sistema modular nativo en <em>JavaScript</em>, AngularJS nos proveía de uno propio. </p>\n<p>Hoy en día se nos sugiere que usemos las versiones avanzadas de <em>JS</em>, o mejor aún <em>TypeScript</em>. Estos lenguajes nos ofrecen las instrucciones <code>export</code> e <code>import</code> que permiten definir <strong>módulos estancos en ficheros</strong> independientes. Nunca más el engorroso envolvimiento <em>IIFE</em> <code>(function () { … }())</code>.</p>\n<p>A partir de ahí es el programador el que selectivamente <strong>exporta funcionalidad que importará para ser consumida</strong> mas tarde. De este modo, Angular se desentiende de la creación de módulos de código y se centra en la comunicación entre los objetos que componen la aplicación.</p>\n<h3 id=\"Componentes\"><a href=\"#Componentes\" class=\"headerlink\" title=\"Componentes\"></a>Componentes</h3><p>Son los bloques de construcción agrupables en compuestos que forman la interfaz visual de una aplicación. Encapsulan <strong>la vista, los datos y la lógica</strong> para interactuar con el usuario. </p>\n<p>Ni la vista ni la lógica deben crecer y realizar tareas que no sean de su exclusiva capa de responsabilidad. Esas tareas debe ser delegadas en otros objetos. </p>\n<blockquote>\n<p>Modelo de composición de componentes visuales para crear vistas complejas. La comunicación o <a href=\"../databinding-el-flujo-de-datos-de-angular2/\">Data Flow</a> se realiza de manera declarativa. Enviando datos a las propiedades de los hijos y esperando eventos con respuestas.</p>\n</blockquote>\n<p><img src=\"/images/ng2-Component-DataFlow.jpg\" alt=\"Composición mediante componentes\"></p>\n<h3 id=\"Servicios\"><a href=\"#Servicios\" class=\"headerlink\" title=\"Servicios\"></a>Servicios</h3><p>Los servicios serán <strong>objetos especializados y reutilizables</strong> por otros servicios y componentes. En su definición debes aplicar los mismos principios de arquitectura de software que ya conoces y aplicas en <em>lenguajes clásicos tipo Java o C#.net</em>.</p>\n<p>La sintaxis de la comunicación involucra varios bloques en ambos lados del canal: </p>\n<ul>\n<li>la definición del servicio decorado como <code>@Injectable()</code> en el proveedor, </li>\n<li>la exportación en el proveedor y la importación en el consumidor, </li>\n<li>el registro en el array <code>providers:[]</code> del componente consumidor (o mejor del módulo) conumidor y </li>\n<li>el consumo en el constructor del componente o servicio consumidor.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosService, Movimiento &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../shared/'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'movimiento'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'movimiento.component.html'</span>,</div><div class=\"line\">  providers: [MovimientosService] </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientoComponent</span> </span>&#123;</div><div class=\"line\">  movimiento: Movimiento</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(public movimientosService: MovimientosService) &#123; &#125;</div><div class=\"line\">  guardarMovimiento() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.movimientosService.guardarMovimiento(<span class=\"keyword\">this</span>.movimiento)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/images/ng2-DI-component-service.jpg\" alt=\"Inyección de servicios en componentes \"></p>\n<h3 id=\"Directivas\"><a href=\"#Directivas\" class=\"headerlink\" title=\"Directivas\"></a>Directivas</h3><p>Las directivas eran el ADN de AngularJS1. Ahora han mutado en <strong>componentes reutilizables</strong> como elementos en las vistas de otros componentes de rango superior. Pero la idea es la misma, desglosar las plantillas de HTML en bloques con un propósito único. </p>\n<p>La sintaxis de las directivas es similar: </p>\n<ul>\n<li>la definición del servicio decorado como <code>@Injectable()</code> en el componente hijo, </li>\n<li>la exportación del hijo y la importación en el padre, </li>\n<li>el registro en el array <code>directives:[]</code> del componente padre (o del módulo padre) y </li>\n<li>el consumo declarativo en la plantilla de la vista padre.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimiento'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'injection-app'</span>,</div><div class=\"line\">  template: <span class=\"string\">'&lt;h1&gt;</span></div><div class=\"line\"><span class=\"string\">              &#123;&#123;titulo&#125;&#125;</span></div><div class=\"line\"><span class=\"string\">            &lt;/h1&gt;</span></div><div class=\"line\"><span class=\"string\">            &lt;movimiento&gt;&lt;/movimiento&gt;'</span>,</div><div class=\"line\">  directives:[MovimientoComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InjectionAppComponent</span> </span>&#123;</div><div class=\"line\">  titulo = <span class=\"string\">'Inyectores listos!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/images/ng2-DI-component-directive.jpg\" alt=\"Inyección de directivas en componentes\"></p>\n<h2 id=\"Registro\"><a href=\"#Registro\" class=\"headerlink\" title=\"Registro\"></a>Registro</h2><p>La inyección de las dependencias <strong>funciona de manera jerárquica</strong> en AngularJS 2. Cuando un módulo registra una dependencia la pone a disposición de todos sus componentes hijos. Es más, si algún hijo la volviese a registrar se le proveería de otra instancia. </p>\n<p>Esta copia puede provocar efectos colaterales indeseados. Para <strong>compartir datos</strong> o ahorrar memoria se recomienda registrar las dependencias lo más arriba posible. Esto siempre sin sacrificar la modularidad o la escalabilidad de aplicaciones que requieran <em>lazy loading</em>.</p>\n<blockquote>\n<p>Atención a la copia de <em>routeService</em> que se registra por segunda vez. No importa que ya la haya registrado su padre. Otro registro implica otra instancia.</p>\n</blockquote>\n<p><img src=\"/images/ng2-Arbol-de-dependencias.jpg\" alt=\"Jerarquía de dependencias en AngularJS\"></p>\n<p>Para ciertos casos, AngularJS 2 permite modelos de inyección más avanzados. Mediante el uso de <strong>factorías y el registro de cadenas</strong> con los nombres de los servicios facilita la inyección a voluntad o la carga diferida.</p>\n<blockquote>\n<p>Algunas de estas posibilidades están siendo retocadas durante la actual <em>Release Candidate</em>, y se esperan cambios de cara a las próxima versión estable.</p>\n</blockquote>\n<p>El viejo principio de <em>divide y vencerás</em> se aplica rotundamente en las aplicaciones Angular 2. Si creas <strong>módulos reutilizables</strong> estarás sentando las bases para crear grandes aplicaciones de negocio con AngularJS.</p>"},{"title":"Angular2, la evolución de la plataforma","id":"24","updated":"2016-06-08T06:10:11.000Z","date":"2016-05-06T13:57:50.000Z","_content":"\nCoincidiendo con la **ngConf 2016** acaba de presentarse la esperada *Release Candidate* de **[Angular 2](https://angular.io/)**. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a **AngularJS 1**. Y ahora esa ruptura se ha materializado. \n\nLos programadores somos muy conscientes de que **lo único estable es el cambio**. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en **Angular2**, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.\n\n<!-- more -->\n\n## Un poco de historia\n\nEn septiembre de 2011 me tropecé con AngularJS buscando una alternativa a *Backbone* y *KnockOut*. Yo venía del mundo encorsetado del desarrollo para multinacionales basado en tecnologías *serias* como .Net y Java. Necesitaba un cambio, una apertura... pero con ciertas garantías. \n\nEn esos tiempos el desarrollo web vivía su eclosión de la mano del HTML5. Era un mundo de *startups* (ahí estaba yo), de *earlyadopters* y de picaflores tecnológicos. Buscábamos **tecnologías simples, universales y de bajo coste**. Muy en la línea con el método empresarial *lean*. Pero el riesgo de escoger el framework perdedor era enorme, y cada pocos meses aparecían o desaparecían candidatos. \n\nAngular superó a sus contendientes por dos razones: una fue (rellena aquí con el argumentario técnico que más te satisfaga) y la otra fue **Google**. Un padrino así abre muchas puertas y da el punto de valor suficiente para alejarte de Oracle o Microsoft sin temor.\n\nEn enero de 2013 abandoné mi sueño de convertirme en el nuevo Zuckerberg. Volví al viejo sector servicios fundando una empresa de consultoría. Aprovechando los conocimientos y métodos ágiles aprendidos por el camino *startup*, ofrecimos desarrollos *low cost* para pequeñas empresas. Para complementar los servicios empecé a impartir cursos sobre estas tecnologías a otros desarrolladores. Al principio sólo acudían *freelances* y pequeñas consultoras.\n\nEn marzo de 2015 tuve los primeros contactos con **grandes empresas** tanto a nivel docente como consultor. Volví a un mundo familiar pero con una tecnología distinta. AngularJS había crecido de manera exponencial en número de desarrolladores. Pero ahora estaba jugando en las grandes ligas.\n \nY de repente aparecieron los problemas.\n\n### Dos problemas\n\n#### El lenguaje\nJavaScript es dinámico, asíncrono y nada modular. Ideal para espíritus libres, pero una amenaza para equipos estrictos. Y necesitas control si vas a migrar grandes aplicaciones de negocio, ERPs , banca, servicios de administración pública. \n\nTampoco se emocionaban los arquitectos de software con las **herramientas**. Como siempre todo empezó de manera sencilla: ficheros y editores de texto. Luego llegó la minificación, la combinación, el pre y pos procesado, las anotaciones, la documentación, las pruebas... Cada mes era mayor el arsenal de micro herramientas que había que orquestar.\n\n#### La escalabilidad\nLas aplicaciones empresariales son pesadas en lógica y datos. La falta de un cargador dinámico decente hacía muy difícil reducir el tiempo antes del primer impacto. Una vez lanzadas las aplicaciones iban razonablemente bien. \nHasta que alguien creaba informes editables. Con miles de datos de los que preocuparse la técnica del **doble binding** saturaba los *watchers*. \n\nAngularJS moría de éxito. \n\n### Dos soluciones\n#### El lenguaje: TypeScript\nLa lenta evolución de JavaScript parece haber salido de su hibernación. En el último año disfrutamos ya de las mejoras de **ES6 (ES2015)** y empezamos a probar **ES7 (2016)**. Pero no es suficiente.\n\nPara grandes desarrollos, con miles de líneas de código, toda ayuda es poca. **TypeScript** asume todas las mejoras y propuestas del más avanzado JS estándar y además aporta **tipos**. Esa es la principal razón de su elección como lenguaje de cabecera en AngularJS2.\n\nAl rededor de esa piedra angular crece el ecosistema de **herramientas**. Principalmente [VSCode](https://code.visualstudio.com/) que lo aprovecha ofreciendo *intellisense* y *refactoring* a la altura de los grandes.\n\nLa oferta se completa con *Interfaces*, *Generics* y otras novedades que harán las delicias de los programadores orientados a objetos. \n\nCabe señalar que TypeScript no es ni mucho menos obligatorio. **Se puede desarrollar en ES5 y ES6** sin problemas. Pero la idea, los ejemplos, la documentación y los blogueros haremos que tu vida sea más fácil si escoges TypeScript.\n\n#### La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas...\nEl **doble binding** era el plato estrella de AngularJS, pero salía caro. Así que se replanteó una solución que no requiriese un *pull* constante preguntando el estado de un montón de variables. Las respuesta vino de la mano de otra colaboración con los de Redmond: [ReactiveX](http://reactivex.io/). Este cambio será el primero al que te enfrentes si vienes de las conocidas versiones 1.\n\nEl mismo **patrón observable** se aplicó también a las comunicaciones HTTP. Nuestra aplicación es ahora un conjunto de *streams* que emiten eventos. Solo tenemos que suscribirnos y observar el estado cambiante de nuestro modelo. Resultado, aplicaciones hasta **cinco veces más rápidas**.\n\nLos principios de encapsulación, modularidad y reutilización ya estaban en el ADN de AngularJS. Pero no era fácil implementarlos con las viejas directivas. Desde la versión 1.5 disponemos de **componentes**. Esta versión puente trae una simplificación y una guía sobre como estructurar aplicaciones. En AngularJS 2 van más allá, y tal como habían amenazado, matan al controlador y coronan al componente como nuevo rey del *front end*.\n\nLa **inyección de dependencias** fue uno de los grandes aciertos iniciales de AngularJS 1. Pero con el tiempo se convirtió en una rémora para crear grandes SPAs, pues requería disponer de toda la lógica, todo tu código, desde el primer segundo. Este problema se ha resuelto, aunque de forma demasiado tediosa. Hay margen de mejora en la actual implementación y espero que se vaya simplificando.\n\nUno de los pocos puntos débiles de AngularJS, y otros frameworks *client side*, era la dificultad para la indexación **SEO on site**. La solución normalmente pasaba por algún tipo de *prerenderizado* más o menos engorroso. Con la aparición de [Angular Universal](https://universal.angular.io/), podemos ejecutar **Angular en el servidor**. Esto abre las puertas al SEO y a la reducción de la espera en la primera visita.\n\nLas aplicaciones híbridas han sido la solución *low cost* para que cualquier empresa accediese a los elitistas mercados de aplicaciones para móviles. Pero la solución no era perfecta. Con el [Angular Mobile Tookit](https://mobile.angular.io/) se ofrecen **aplicaciones progresivas** que compiten en rendimiento y funcionalidad con las nativas.\n\nPoner en marcha y depurar una aplicación moderna de gran tamaño requiere herramientas a la altura. La oferta en este caso es total: \n\n- [Angular CLI](https://cli.angular.io/) una herramienta en línea de comandos para generar aplicaciones preconfiguradas\n- [Augury](https://augury.angular.io/) para depurar y visualizar en el navegador el estado del programa\n- [Protractor]() para los tests e2e\n- [Guías de estilo](https://angular.io/styleguide) y analizadores de código... \n\n#### Una alternativa\n[React](https://facebook.github.io/react/), la propuesta de Facebook para el desarrollo web, es una herramienta formidable. Rápido en ejecución, más cercano al estándar JS y mucho menos exigente en cuanto a herramientas. \n\nParte con la enorme desventaja numérica que supone el más de un millón de programadores que ya conocen AngularJS y el ecosistema de librerías, componentes y material docente que ha surgido a su alrededor.\n\nSerá por esto último que aún no ha enganchado en la gran empresa. Por tanto aún no tira de ofertas de trabajo ni genera el ruido de la apuesta de Google. Eso sí, merece mucho la pena conocerlo, e incluso incorporarlo en algún caso junto a Angular 2.   \n\n## Angular 2 no es plataforma para aficionados\nEl resumen es que AngularJS 1.x ha mutado **de framework a plataforma** en Angular 2. En este sentido estará cada vez más orientada a grandes desarrollos empresariales, y a salir definitivamente del navegador y ocupar servidores, escritorios y teléfonos. \n\nSeguro que requiere un gran esfuerzo de aprendizaje por su novedades radicales. Seguro que por el camino habrá giros por su bisoñez y amplitud. Pero seguro que estamos ante la **plataforma de desarrollo empresarial** con mejor futuro. De momento.\n\n> En [esta presentación](https://docs.google.com/presentation/d/1VyMGTwiM7HmNMdSCXrrYpHIej-Y8ZwZKCan7KMqvdCA/edit?usp=sharing) tienes un resumen rápido de mis impresiones acerca de Angular2, y de cómo empezar a programar aplicaciones universales.","source":"_posts/Angular2-la-evolucion-de-la-plataforma.md","raw":"---\ntitle: 'Angular2, la evolución de la plataforma'\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: angular2-primeras-impresiones\nid: 24\nupdated: '2016-06-08 08:10:11'\ndate: 2016-05-06 15:57:50\n---\n\nCoincidiendo con la **ngConf 2016** acaba de presentarse la esperada *Release Candidate* de **[Angular 2](https://angular.io/)**. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a **AngularJS 1**. Y ahora esa ruptura se ha materializado. \n\nLos programadores somos muy conscientes de que **lo único estable es el cambio**. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en **Angular2**, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.\n\n<!-- more -->\n\n## Un poco de historia\n\nEn septiembre de 2011 me tropecé con AngularJS buscando una alternativa a *Backbone* y *KnockOut*. Yo venía del mundo encorsetado del desarrollo para multinacionales basado en tecnologías *serias* como .Net y Java. Necesitaba un cambio, una apertura... pero con ciertas garantías. \n\nEn esos tiempos el desarrollo web vivía su eclosión de la mano del HTML5. Era un mundo de *startups* (ahí estaba yo), de *earlyadopters* y de picaflores tecnológicos. Buscábamos **tecnologías simples, universales y de bajo coste**. Muy en la línea con el método empresarial *lean*. Pero el riesgo de escoger el framework perdedor era enorme, y cada pocos meses aparecían o desaparecían candidatos. \n\nAngular superó a sus contendientes por dos razones: una fue (rellena aquí con el argumentario técnico que más te satisfaga) y la otra fue **Google**. Un padrino así abre muchas puertas y da el punto de valor suficiente para alejarte de Oracle o Microsoft sin temor.\n\nEn enero de 2013 abandoné mi sueño de convertirme en el nuevo Zuckerberg. Volví al viejo sector servicios fundando una empresa de consultoría. Aprovechando los conocimientos y métodos ágiles aprendidos por el camino *startup*, ofrecimos desarrollos *low cost* para pequeñas empresas. Para complementar los servicios empecé a impartir cursos sobre estas tecnologías a otros desarrolladores. Al principio sólo acudían *freelances* y pequeñas consultoras.\n\nEn marzo de 2015 tuve los primeros contactos con **grandes empresas** tanto a nivel docente como consultor. Volví a un mundo familiar pero con una tecnología distinta. AngularJS había crecido de manera exponencial en número de desarrolladores. Pero ahora estaba jugando en las grandes ligas.\n \nY de repente aparecieron los problemas.\n\n### Dos problemas\n\n#### El lenguaje\nJavaScript es dinámico, asíncrono y nada modular. Ideal para espíritus libres, pero una amenaza para equipos estrictos. Y necesitas control si vas a migrar grandes aplicaciones de negocio, ERPs , banca, servicios de administración pública. \n\nTampoco se emocionaban los arquitectos de software con las **herramientas**. Como siempre todo empezó de manera sencilla: ficheros y editores de texto. Luego llegó la minificación, la combinación, el pre y pos procesado, las anotaciones, la documentación, las pruebas... Cada mes era mayor el arsenal de micro herramientas que había que orquestar.\n\n#### La escalabilidad\nLas aplicaciones empresariales son pesadas en lógica y datos. La falta de un cargador dinámico decente hacía muy difícil reducir el tiempo antes del primer impacto. Una vez lanzadas las aplicaciones iban razonablemente bien. \nHasta que alguien creaba informes editables. Con miles de datos de los que preocuparse la técnica del **doble binding** saturaba los *watchers*. \n\nAngularJS moría de éxito. \n\n### Dos soluciones\n#### El lenguaje: TypeScript\nLa lenta evolución de JavaScript parece haber salido de su hibernación. En el último año disfrutamos ya de las mejoras de **ES6 (ES2015)** y empezamos a probar **ES7 (2016)**. Pero no es suficiente.\n\nPara grandes desarrollos, con miles de líneas de código, toda ayuda es poca. **TypeScript** asume todas las mejoras y propuestas del más avanzado JS estándar y además aporta **tipos**. Esa es la principal razón de su elección como lenguaje de cabecera en AngularJS2.\n\nAl rededor de esa piedra angular crece el ecosistema de **herramientas**. Principalmente [VSCode](https://code.visualstudio.com/) que lo aprovecha ofreciendo *intellisense* y *refactoring* a la altura de los grandes.\n\nLa oferta se completa con *Interfaces*, *Generics* y otras novedades que harán las delicias de los programadores orientados a objetos. \n\nCabe señalar que TypeScript no es ni mucho menos obligatorio. **Se puede desarrollar en ES5 y ES6** sin problemas. Pero la idea, los ejemplos, la documentación y los blogueros haremos que tu vida sea más fácil si escoges TypeScript.\n\n#### La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas...\nEl **doble binding** era el plato estrella de AngularJS, pero salía caro. Así que se replanteó una solución que no requiriese un *pull* constante preguntando el estado de un montón de variables. Las respuesta vino de la mano de otra colaboración con los de Redmond: [ReactiveX](http://reactivex.io/). Este cambio será el primero al que te enfrentes si vienes de las conocidas versiones 1.\n\nEl mismo **patrón observable** se aplicó también a las comunicaciones HTTP. Nuestra aplicación es ahora un conjunto de *streams* que emiten eventos. Solo tenemos que suscribirnos y observar el estado cambiante de nuestro modelo. Resultado, aplicaciones hasta **cinco veces más rápidas**.\n\nLos principios de encapsulación, modularidad y reutilización ya estaban en el ADN de AngularJS. Pero no era fácil implementarlos con las viejas directivas. Desde la versión 1.5 disponemos de **componentes**. Esta versión puente trae una simplificación y una guía sobre como estructurar aplicaciones. En AngularJS 2 van más allá, y tal como habían amenazado, matan al controlador y coronan al componente como nuevo rey del *front end*.\n\nLa **inyección de dependencias** fue uno de los grandes aciertos iniciales de AngularJS 1. Pero con el tiempo se convirtió en una rémora para crear grandes SPAs, pues requería disponer de toda la lógica, todo tu código, desde el primer segundo. Este problema se ha resuelto, aunque de forma demasiado tediosa. Hay margen de mejora en la actual implementación y espero que se vaya simplificando.\n\nUno de los pocos puntos débiles de AngularJS, y otros frameworks *client side*, era la dificultad para la indexación **SEO on site**. La solución normalmente pasaba por algún tipo de *prerenderizado* más o menos engorroso. Con la aparición de [Angular Universal](https://universal.angular.io/), podemos ejecutar **Angular en el servidor**. Esto abre las puertas al SEO y a la reducción de la espera en la primera visita.\n\nLas aplicaciones híbridas han sido la solución *low cost* para que cualquier empresa accediese a los elitistas mercados de aplicaciones para móviles. Pero la solución no era perfecta. Con el [Angular Mobile Tookit](https://mobile.angular.io/) se ofrecen **aplicaciones progresivas** que compiten en rendimiento y funcionalidad con las nativas.\n\nPoner en marcha y depurar una aplicación moderna de gran tamaño requiere herramientas a la altura. La oferta en este caso es total: \n\n- [Angular CLI](https://cli.angular.io/) una herramienta en línea de comandos para generar aplicaciones preconfiguradas\n- [Augury](https://augury.angular.io/) para depurar y visualizar en el navegador el estado del programa\n- [Protractor]() para los tests e2e\n- [Guías de estilo](https://angular.io/styleguide) y analizadores de código... \n\n#### Una alternativa\n[React](https://facebook.github.io/react/), la propuesta de Facebook para el desarrollo web, es una herramienta formidable. Rápido en ejecución, más cercano al estándar JS y mucho menos exigente en cuanto a herramientas. \n\nParte con la enorme desventaja numérica que supone el más de un millón de programadores que ya conocen AngularJS y el ecosistema de librerías, componentes y material docente que ha surgido a su alrededor.\n\nSerá por esto último que aún no ha enganchado en la gran empresa. Por tanto aún no tira de ofertas de trabajo ni genera el ruido de la apuesta de Google. Eso sí, merece mucho la pena conocerlo, e incluso incorporarlo en algún caso junto a Angular 2.   \n\n## Angular 2 no es plataforma para aficionados\nEl resumen es que AngularJS 1.x ha mutado **de framework a plataforma** en Angular 2. En este sentido estará cada vez más orientada a grandes desarrollos empresariales, y a salir definitivamente del navegador y ocupar servidores, escritorios y teléfonos. \n\nSeguro que requiere un gran esfuerzo de aprendizaje por su novedades radicales. Seguro que por el camino habrá giros por su bisoñez y amplitud. Pero seguro que estamos ante la **plataforma de desarrollo empresarial** con mejor futuro. De momento.\n\n> En [esta presentación](https://docs.google.com/presentation/d/1VyMGTwiM7HmNMdSCXrrYpHIej-Y8ZwZKCan7KMqvdCA/edit?usp=sharing) tienes un resumen rápido de mis impresiones acerca de Angular2, y de cómo empezar a programar aplicaciones universales.","slug":"angular2-primeras-impresiones","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gizi0007c7jsfnwj1rhr","content":"<p>Coincidiendo con la <strong>ngConf 2016</strong> acaba de presentarse la esperada <em>Release Candidate</em> de <strong><a href=\"https://angular.io/\" target=\"_blank\" rel=\"external\">Angular 2</a></strong>. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a <strong>AngularJS 1</strong>. Y ahora esa ruptura se ha materializado. </p>\n<p>Los programadores somos muy conscientes de que <strong>lo único estable es el cambio</strong>. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en <strong>Angular2</strong>, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.</p>\n<a id=\"more\"></a>\n<h2 id=\"Un-poco-de-historia\"><a href=\"#Un-poco-de-historia\" class=\"headerlink\" title=\"Un poco de historia\"></a>Un poco de historia</h2><p>En septiembre de 2011 me tropecé con AngularJS buscando una alternativa a <em>Backbone</em> y <em>KnockOut</em>. Yo venía del mundo encorsetado del desarrollo para multinacionales basado en tecnologías <em>serias</em> como .Net y Java. Necesitaba un cambio, una apertura… pero con ciertas garantías. </p>\n<p>En esos tiempos el desarrollo web vivía su eclosión de la mano del HTML5. Era un mundo de <em>startups</em> (ahí estaba yo), de <em>earlyadopters</em> y de picaflores tecnológicos. Buscábamos <strong>tecnologías simples, universales y de bajo coste</strong>. Muy en la línea con el método empresarial <em>lean</em>. Pero el riesgo de escoger el framework perdedor era enorme, y cada pocos meses aparecían o desaparecían candidatos. </p>\n<p>Angular superó a sus contendientes por dos razones: una fue (rellena aquí con el argumentario técnico que más te satisfaga) y la otra fue <strong>Google</strong>. Un padrino así abre muchas puertas y da el punto de valor suficiente para alejarte de Oracle o Microsoft sin temor.</p>\n<p>En enero de 2013 abandoné mi sueño de convertirme en el nuevo Zuckerberg. Volví al viejo sector servicios fundando una empresa de consultoría. Aprovechando los conocimientos y métodos ágiles aprendidos por el camino <em>startup</em>, ofrecimos desarrollos <em>low cost</em> para pequeñas empresas. Para complementar los servicios empecé a impartir cursos sobre estas tecnologías a otros desarrolladores. Al principio sólo acudían <em>freelances</em> y pequeñas consultoras.</p>\n<p>En marzo de 2015 tuve los primeros contactos con <strong>grandes empresas</strong> tanto a nivel docente como consultor. Volví a un mundo familiar pero con una tecnología distinta. AngularJS había crecido de manera exponencial en número de desarrolladores. Pero ahora estaba jugando en las grandes ligas.</p>\n<p>Y de repente aparecieron los problemas.</p>\n<h3 id=\"Dos-problemas\"><a href=\"#Dos-problemas\" class=\"headerlink\" title=\"Dos problemas\"></a>Dos problemas</h3><h4 id=\"El-lenguaje\"><a href=\"#El-lenguaje\" class=\"headerlink\" title=\"El lenguaje\"></a>El lenguaje</h4><p>JavaScript es dinámico, asíncrono y nada modular. Ideal para espíritus libres, pero una amenaza para equipos estrictos. Y necesitas control si vas a migrar grandes aplicaciones de negocio, ERPs , banca, servicios de administración pública. </p>\n<p>Tampoco se emocionaban los arquitectos de software con las <strong>herramientas</strong>. Como siempre todo empezó de manera sencilla: ficheros y editores de texto. Luego llegó la minificación, la combinación, el pre y pos procesado, las anotaciones, la documentación, las pruebas… Cada mes era mayor el arsenal de micro herramientas que había que orquestar.</p>\n<h4 id=\"La-escalabilidad\"><a href=\"#La-escalabilidad\" class=\"headerlink\" title=\"La escalabilidad\"></a>La escalabilidad</h4><p>Las aplicaciones empresariales son pesadas en lógica y datos. La falta de un cargador dinámico decente hacía muy difícil reducir el tiempo antes del primer impacto. Una vez lanzadas las aplicaciones iban razonablemente bien.<br>Hasta que alguien creaba informes editables. Con miles de datos de los que preocuparse la técnica del <strong>doble binding</strong> saturaba los <em>watchers</em>. </p>\n<p>AngularJS moría de éxito. </p>\n<h3 id=\"Dos-soluciones\"><a href=\"#Dos-soluciones\" class=\"headerlink\" title=\"Dos soluciones\"></a>Dos soluciones</h3><h4 id=\"El-lenguaje-TypeScript\"><a href=\"#El-lenguaje-TypeScript\" class=\"headerlink\" title=\"El lenguaje: TypeScript\"></a>El lenguaje: TypeScript</h4><p>La lenta evolución de JavaScript parece haber salido de su hibernación. En el último año disfrutamos ya de las mejoras de <strong>ES6 (ES2015)</strong> y empezamos a probar <strong>ES7 (2016)</strong>. Pero no es suficiente.</p>\n<p>Para grandes desarrollos, con miles de líneas de código, toda ayuda es poca. <strong>TypeScript</strong> asume todas las mejoras y propuestas del más avanzado JS estándar y además aporta <strong>tipos</strong>. Esa es la principal razón de su elección como lenguaje de cabecera en AngularJS2.</p>\n<p>Al rededor de esa piedra angular crece el ecosistema de <strong>herramientas</strong>. Principalmente <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a> que lo aprovecha ofreciendo <em>intellisense</em> y <em>refactoring</em> a la altura de los grandes.</p>\n<p>La oferta se completa con <em>Interfaces</em>, <em>Generics</em> y otras novedades que harán las delicias de los programadores orientados a objetos. </p>\n<p>Cabe señalar que TypeScript no es ni mucho menos obligatorio. <strong>Se puede desarrollar en ES5 y ES6</strong> sin problemas. Pero la idea, los ejemplos, la documentación y los blogueros haremos que tu vida sea más fácil si escoges TypeScript.</p>\n<h4 id=\"La-plataforma-renderizacion-observables-componentes-carga-dinamica-SEO-apps-herramientas…\"><a href=\"#La-plataforma-renderizacion-observables-componentes-carga-dinamica-SEO-apps-herramientas…\" class=\"headerlink\" title=\"La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas…\"></a>La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas…</h4><p>El <strong>doble binding</strong> era el plato estrella de AngularJS, pero salía caro. Así que se replanteó una solución que no requiriese un <em>pull</em> constante preguntando el estado de un montón de variables. Las respuesta vino de la mano de otra colaboración con los de Redmond: <a href=\"http://reactivex.io/\" target=\"_blank\" rel=\"external\">ReactiveX</a>. Este cambio será el primero al que te enfrentes si vienes de las conocidas versiones 1.</p>\n<p>El mismo <strong>patrón observable</strong> se aplicó también a las comunicaciones HTTP. Nuestra aplicación es ahora un conjunto de <em>streams</em> que emiten eventos. Solo tenemos que suscribirnos y observar el estado cambiante de nuestro modelo. Resultado, aplicaciones hasta <strong>cinco veces más rápidas</strong>.</p>\n<p>Los principios de encapsulación, modularidad y reutilización ya estaban en el ADN de AngularJS. Pero no era fácil implementarlos con las viejas directivas. Desde la versión 1.5 disponemos de <strong>componentes</strong>. Esta versión puente trae una simplificación y una guía sobre como estructurar aplicaciones. En AngularJS 2 van más allá, y tal como habían amenazado, matan al controlador y coronan al componente como nuevo rey del <em>front end</em>.</p>\n<p>La <strong>inyección de dependencias</strong> fue uno de los grandes aciertos iniciales de AngularJS 1. Pero con el tiempo se convirtió en una rémora para crear grandes SPAs, pues requería disponer de toda la lógica, todo tu código, desde el primer segundo. Este problema se ha resuelto, aunque de forma demasiado tediosa. Hay margen de mejora en la actual implementación y espero que se vaya simplificando.</p>\n<p>Uno de los pocos puntos débiles de AngularJS, y otros frameworks <em>client side</em>, era la dificultad para la indexación <strong>SEO on site</strong>. La solución normalmente pasaba por algún tipo de <em>prerenderizado</em> más o menos engorroso. Con la aparición de <a href=\"https://universal.angular.io/\" target=\"_blank\" rel=\"external\">Angular Universal</a>, podemos ejecutar <strong>Angular en el servidor</strong>. Esto abre las puertas al SEO y a la reducción de la espera en la primera visita.</p>\n<p>Las aplicaciones híbridas han sido la solución <em>low cost</em> para que cualquier empresa accediese a los elitistas mercados de aplicaciones para móviles. Pero la solución no era perfecta. Con el <a href=\"https://mobile.angular.io/\" target=\"_blank\" rel=\"external\">Angular Mobile Tookit</a> se ofrecen <strong>aplicaciones progresivas</strong> que compiten en rendimiento y funcionalidad con las nativas.</p>\n<p>Poner en marcha y depurar una aplicación moderna de gran tamaño requiere herramientas a la altura. La oferta en este caso es total: </p>\n<ul>\n<li><a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a> una herramienta en línea de comandos para generar aplicaciones preconfiguradas</li>\n<li><a href=\"https://augury.angular.io/\" target=\"_blank\" rel=\"external\">Augury</a> para depurar y visualizar en el navegador el estado del programa</li>\n<li><a href=\"\">Protractor</a> para los tests e2e</li>\n<li><a href=\"https://angular.io/styleguide\" target=\"_blank\" rel=\"external\">Guías de estilo</a> y analizadores de código… </li>\n</ul>\n<h4 id=\"Una-alternativa\"><a href=\"#Una-alternativa\" class=\"headerlink\" title=\"Una alternativa\"></a>Una alternativa</h4><p><a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a>, la propuesta de Facebook para el desarrollo web, es una herramienta formidable. Rápido en ejecución, más cercano al estándar JS y mucho menos exigente en cuanto a herramientas. </p>\n<p>Parte con la enorme desventaja numérica que supone el más de un millón de programadores que ya conocen AngularJS y el ecosistema de librerías, componentes y material docente que ha surgido a su alrededor.</p>\n<p>Será por esto último que aún no ha enganchado en la gran empresa. Por tanto aún no tira de ofertas de trabajo ni genera el ruido de la apuesta de Google. Eso sí, merece mucho la pena conocerlo, e incluso incorporarlo en algún caso junto a Angular 2.   </p>\n<h2 id=\"Angular-2-no-es-plataforma-para-aficionados\"><a href=\"#Angular-2-no-es-plataforma-para-aficionados\" class=\"headerlink\" title=\"Angular 2 no es plataforma para aficionados\"></a>Angular 2 no es plataforma para aficionados</h2><p>El resumen es que AngularJS 1.x ha mutado <strong>de framework a plataforma</strong> en Angular 2. En este sentido estará cada vez más orientada a grandes desarrollos empresariales, y a salir definitivamente del navegador y ocupar servidores, escritorios y teléfonos. </p>\n<p>Seguro que requiere un gran esfuerzo de aprendizaje por su novedades radicales. Seguro que por el camino habrá giros por su bisoñez y amplitud. Pero seguro que estamos ante la <strong>plataforma de desarrollo empresarial</strong> con mejor futuro. De momento.</p>\n<blockquote>\n<p>En <a href=\"https://docs.google.com/presentation/d/1VyMGTwiM7HmNMdSCXrrYpHIej-Y8ZwZKCan7KMqvdCA/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes un resumen rápido de mis impresiones acerca de Angular2, y de cómo empezar a programar aplicaciones universales.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Coincidiendo con la <strong>ngConf 2016</strong> acaba de presentarse la esperada <em>Release Candidate</em> de <strong><a href=\"https://angular.io/\" target=\"_blank\" rel=\"external\">Angular 2</a></strong>. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a <strong>AngularJS 1</strong>. Y ahora esa ruptura se ha materializado. </p>\n<p>Los programadores somos muy conscientes de que <strong>lo único estable es el cambio</strong>. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en <strong>Angular2</strong>, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.</p>","more":"<h2 id=\"Un-poco-de-historia\"><a href=\"#Un-poco-de-historia\" class=\"headerlink\" title=\"Un poco de historia\"></a>Un poco de historia</h2><p>En septiembre de 2011 me tropecé con AngularJS buscando una alternativa a <em>Backbone</em> y <em>KnockOut</em>. Yo venía del mundo encorsetado del desarrollo para multinacionales basado en tecnologías <em>serias</em> como .Net y Java. Necesitaba un cambio, una apertura… pero con ciertas garantías. </p>\n<p>En esos tiempos el desarrollo web vivía su eclosión de la mano del HTML5. Era un mundo de <em>startups</em> (ahí estaba yo), de <em>earlyadopters</em> y de picaflores tecnológicos. Buscábamos <strong>tecnologías simples, universales y de bajo coste</strong>. Muy en la línea con el método empresarial <em>lean</em>. Pero el riesgo de escoger el framework perdedor era enorme, y cada pocos meses aparecían o desaparecían candidatos. </p>\n<p>Angular superó a sus contendientes por dos razones: una fue (rellena aquí con el argumentario técnico que más te satisfaga) y la otra fue <strong>Google</strong>. Un padrino así abre muchas puertas y da el punto de valor suficiente para alejarte de Oracle o Microsoft sin temor.</p>\n<p>En enero de 2013 abandoné mi sueño de convertirme en el nuevo Zuckerberg. Volví al viejo sector servicios fundando una empresa de consultoría. Aprovechando los conocimientos y métodos ágiles aprendidos por el camino <em>startup</em>, ofrecimos desarrollos <em>low cost</em> para pequeñas empresas. Para complementar los servicios empecé a impartir cursos sobre estas tecnologías a otros desarrolladores. Al principio sólo acudían <em>freelances</em> y pequeñas consultoras.</p>\n<p>En marzo de 2015 tuve los primeros contactos con <strong>grandes empresas</strong> tanto a nivel docente como consultor. Volví a un mundo familiar pero con una tecnología distinta. AngularJS había crecido de manera exponencial en número de desarrolladores. Pero ahora estaba jugando en las grandes ligas.</p>\n<p>Y de repente aparecieron los problemas.</p>\n<h3 id=\"Dos-problemas\"><a href=\"#Dos-problemas\" class=\"headerlink\" title=\"Dos problemas\"></a>Dos problemas</h3><h4 id=\"El-lenguaje\"><a href=\"#El-lenguaje\" class=\"headerlink\" title=\"El lenguaje\"></a>El lenguaje</h4><p>JavaScript es dinámico, asíncrono y nada modular. Ideal para espíritus libres, pero una amenaza para equipos estrictos. Y necesitas control si vas a migrar grandes aplicaciones de negocio, ERPs , banca, servicios de administración pública. </p>\n<p>Tampoco se emocionaban los arquitectos de software con las <strong>herramientas</strong>. Como siempre todo empezó de manera sencilla: ficheros y editores de texto. Luego llegó la minificación, la combinación, el pre y pos procesado, las anotaciones, la documentación, las pruebas… Cada mes era mayor el arsenal de micro herramientas que había que orquestar.</p>\n<h4 id=\"La-escalabilidad\"><a href=\"#La-escalabilidad\" class=\"headerlink\" title=\"La escalabilidad\"></a>La escalabilidad</h4><p>Las aplicaciones empresariales son pesadas en lógica y datos. La falta de un cargador dinámico decente hacía muy difícil reducir el tiempo antes del primer impacto. Una vez lanzadas las aplicaciones iban razonablemente bien.<br>Hasta que alguien creaba informes editables. Con miles de datos de los que preocuparse la técnica del <strong>doble binding</strong> saturaba los <em>watchers</em>. </p>\n<p>AngularJS moría de éxito. </p>\n<h3 id=\"Dos-soluciones\"><a href=\"#Dos-soluciones\" class=\"headerlink\" title=\"Dos soluciones\"></a>Dos soluciones</h3><h4 id=\"El-lenguaje-TypeScript\"><a href=\"#El-lenguaje-TypeScript\" class=\"headerlink\" title=\"El lenguaje: TypeScript\"></a>El lenguaje: TypeScript</h4><p>La lenta evolución de JavaScript parece haber salido de su hibernación. En el último año disfrutamos ya de las mejoras de <strong>ES6 (ES2015)</strong> y empezamos a probar <strong>ES7 (2016)</strong>. Pero no es suficiente.</p>\n<p>Para grandes desarrollos, con miles de líneas de código, toda ayuda es poca. <strong>TypeScript</strong> asume todas las mejoras y propuestas del más avanzado JS estándar y además aporta <strong>tipos</strong>. Esa es la principal razón de su elección como lenguaje de cabecera en AngularJS2.</p>\n<p>Al rededor de esa piedra angular crece el ecosistema de <strong>herramientas</strong>. Principalmente <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a> que lo aprovecha ofreciendo <em>intellisense</em> y <em>refactoring</em> a la altura de los grandes.</p>\n<p>La oferta se completa con <em>Interfaces</em>, <em>Generics</em> y otras novedades que harán las delicias de los programadores orientados a objetos. </p>\n<p>Cabe señalar que TypeScript no es ni mucho menos obligatorio. <strong>Se puede desarrollar en ES5 y ES6</strong> sin problemas. Pero la idea, los ejemplos, la documentación y los blogueros haremos que tu vida sea más fácil si escoges TypeScript.</p>\n<h4 id=\"La-plataforma-renderizacion-observables-componentes-carga-dinamica-SEO-apps-herramientas…\"><a href=\"#La-plataforma-renderizacion-observables-componentes-carga-dinamica-SEO-apps-herramientas…\" class=\"headerlink\" title=\"La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas…\"></a>La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas…</h4><p>El <strong>doble binding</strong> era el plato estrella de AngularJS, pero salía caro. Así que se replanteó una solución que no requiriese un <em>pull</em> constante preguntando el estado de un montón de variables. Las respuesta vino de la mano de otra colaboración con los de Redmond: <a href=\"http://reactivex.io/\" target=\"_blank\" rel=\"external\">ReactiveX</a>. Este cambio será el primero al que te enfrentes si vienes de las conocidas versiones 1.</p>\n<p>El mismo <strong>patrón observable</strong> se aplicó también a las comunicaciones HTTP. Nuestra aplicación es ahora un conjunto de <em>streams</em> que emiten eventos. Solo tenemos que suscribirnos y observar el estado cambiante de nuestro modelo. Resultado, aplicaciones hasta <strong>cinco veces más rápidas</strong>.</p>\n<p>Los principios de encapsulación, modularidad y reutilización ya estaban en el ADN de AngularJS. Pero no era fácil implementarlos con las viejas directivas. Desde la versión 1.5 disponemos de <strong>componentes</strong>. Esta versión puente trae una simplificación y una guía sobre como estructurar aplicaciones. En AngularJS 2 van más allá, y tal como habían amenazado, matan al controlador y coronan al componente como nuevo rey del <em>front end</em>.</p>\n<p>La <strong>inyección de dependencias</strong> fue uno de los grandes aciertos iniciales de AngularJS 1. Pero con el tiempo se convirtió en una rémora para crear grandes SPAs, pues requería disponer de toda la lógica, todo tu código, desde el primer segundo. Este problema se ha resuelto, aunque de forma demasiado tediosa. Hay margen de mejora en la actual implementación y espero que se vaya simplificando.</p>\n<p>Uno de los pocos puntos débiles de AngularJS, y otros frameworks <em>client side</em>, era la dificultad para la indexación <strong>SEO on site</strong>. La solución normalmente pasaba por algún tipo de <em>prerenderizado</em> más o menos engorroso. Con la aparición de <a href=\"https://universal.angular.io/\" target=\"_blank\" rel=\"external\">Angular Universal</a>, podemos ejecutar <strong>Angular en el servidor</strong>. Esto abre las puertas al SEO y a la reducción de la espera en la primera visita.</p>\n<p>Las aplicaciones híbridas han sido la solución <em>low cost</em> para que cualquier empresa accediese a los elitistas mercados de aplicaciones para móviles. Pero la solución no era perfecta. Con el <a href=\"https://mobile.angular.io/\" target=\"_blank\" rel=\"external\">Angular Mobile Tookit</a> se ofrecen <strong>aplicaciones progresivas</strong> que compiten en rendimiento y funcionalidad con las nativas.</p>\n<p>Poner en marcha y depurar una aplicación moderna de gran tamaño requiere herramientas a la altura. La oferta en este caso es total: </p>\n<ul>\n<li><a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a> una herramienta en línea de comandos para generar aplicaciones preconfiguradas</li>\n<li><a href=\"https://augury.angular.io/\" target=\"_blank\" rel=\"external\">Augury</a> para depurar y visualizar en el navegador el estado del programa</li>\n<li><a href=\"\">Protractor</a> para los tests e2e</li>\n<li><a href=\"https://angular.io/styleguide\" target=\"_blank\" rel=\"external\">Guías de estilo</a> y analizadores de código… </li>\n</ul>\n<h4 id=\"Una-alternativa\"><a href=\"#Una-alternativa\" class=\"headerlink\" title=\"Una alternativa\"></a>Una alternativa</h4><p><a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a>, la propuesta de Facebook para el desarrollo web, es una herramienta formidable. Rápido en ejecución, más cercano al estándar JS y mucho menos exigente en cuanto a herramientas. </p>\n<p>Parte con la enorme desventaja numérica que supone el más de un millón de programadores que ya conocen AngularJS y el ecosistema de librerías, componentes y material docente que ha surgido a su alrededor.</p>\n<p>Será por esto último que aún no ha enganchado en la gran empresa. Por tanto aún no tira de ofertas de trabajo ni genera el ruido de la apuesta de Google. Eso sí, merece mucho la pena conocerlo, e incluso incorporarlo en algún caso junto a Angular 2.   </p>\n<h2 id=\"Angular-2-no-es-plataforma-para-aficionados\"><a href=\"#Angular-2-no-es-plataforma-para-aficionados\" class=\"headerlink\" title=\"Angular 2 no es plataforma para aficionados\"></a>Angular 2 no es plataforma para aficionados</h2><p>El resumen es que AngularJS 1.x ha mutado <strong>de framework a plataforma</strong> en Angular 2. En este sentido estará cada vez más orientada a grandes desarrollos empresariales, y a salir definitivamente del navegador y ocupar servidores, escritorios y teléfonos. </p>\n<p>Seguro que requiere un gran esfuerzo de aprendizaje por su novedades radicales. Seguro que por el camino habrá giros por su bisoñez y amplitud. Pero seguro que estamos ante la <strong>plataforma de desarrollo empresarial</strong> con mejor futuro. De momento.</p>\n<blockquote>\n<p>En <a href=\"https://docs.google.com/presentation/d/1VyMGTwiM7HmNMdSCXrrYpHIej-Y8ZwZKCan7KMqvdCA/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes un resumen rápido de mis impresiones acerca de Angular2, y de cómo empezar a programar aplicaciones universales.</p>\n</blockquote>"},{"title":"Base para una aplicación Angular 5","date":"2017-11-09T10:09:46.000Z","thumbnail":"/css/images/angular-5_1_Base.jpg","_content":"![Tutorial Angular5 0-CLI1.5](/images/tutorial-angular-5_1_base.jpg)\n\nVamos a crear una **base sobre la que programar una aplicación Angular 5** profesional. Usaremos el *CLI* y *npm* para configurarla y darle una estructura sobre la que crecer. \nLa idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: **los módulos y los componentes**.\n\n<!-- more -->\n\nPartimos de la aplicación tal cómo la dejamos en el [Hola Mundo en Angular](../hola-angular_5-cli/). Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/angular5/1-base](https://github.com/AcademiaBinaria/angular5/tree/master/1-base/cash-flow) \n\n# 1. Configuración\nEl CLI viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el `package.json` y agregar librerías de terceros.\n\n## 1.1 Package.json\n\nEl `package.json` es el fichero estándar de *npm* donde se almacenan las **dependencias de terceros**. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de *Angular*. Y también las herramientas que necesita el programador, por ejemplo el propio *AngularCLI*;\n```json\n{\n  \"dependencies\": {\n      \"@angular/core\": \"^5.0.0\",\n  },\n  \"devDependencies\": {\n      \"@angular/cli\": \"1.5.0\",\n  }\n}\n```\n\nOtro uso del `package.json` es servir de **contenedor de scripts** para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar `npm start` ejecutará el contenido asignado en el fichero *json*, originalmente `ng serve`. Esto lanza el servidor de pruebas con sus opciones por defecto. \n\nPero el **comando [ng serve](https://github.com/angular/angular-cli/wiki/serve)** admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor.\n```json\n{\n \"start\": \"ng serve --aot -o\",\n}\n```\n\n## 1.2 Estilos y librerías de terceros\nLas librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos algún otro producto de terceros. Ya sean utilidades como *[Moment](https://momentjs.com/)*, librerías gráficas como *[chart.js](http://www.chartjs.org/)* o la aplicación de estilos y componentes visuales de *frameworks como Bootstrap o MaterialDesign*. Pero todos se instalan de igual forma. Descargándolos con *npm* y adjuntándolos en el `.angular-cli.json`. \n\n>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama *[milligram](https://milligram.io/)* y es apropiada para prototipos, pruebas o pequeños proyectos.\n\nSe descarga de manera estándar.\n```shell\nnpm i milligram --save\n```\n\nY se agrega a través del fichero `.angular-cli.json` a la colección de *styles* o de *scripts* si los tuviera.\n```json\n{\n  \"styles\": [\n      \"../node_modules/milligram/dist/milligram.min.css\",\n      \"styles.css\"\n      ],\n  \"scripts\": [],\n}\n```\nEstas colecciones de archivos los usa el *cli* a través de *webpack* para incluirlos minificados y concatenados en un fichero *bundle* sustituyendo a las clásicas etiquetas html. De esta forma el fichero `index.html` apenas tendrás que tocarlo. Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. \n\nUna cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo *milligram*. \n\n\n# 2. Módulos\nLos módulos son **contenedores dónde almacenar los componentes y servicios** de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.\n\n## 2.1 Definición mediante decoradores\nAntes de importar cualquier módulo hay que definirlo. En Angular los módulos de declaran como clases de TypeScript, habitualmente vacías, decoradas con una función especial. Es la función `@NgModule()` que recibe un objeto como único argumento. En las propiedades de ese objeto es dónde se configura el módulo. \n\nMira el módulo `AppModule` original que genera el CLI en el fichero `app.module.ts`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [AppRoutingModule, BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n## 2.1 Importación de otros módulos\nEl módulo `App` también se conoce como módulo raíz porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad `imports:[]`, que es un array de punteros a otros módulos.\n\nEn la situación original el módulo principal depende un módulo para realizar el enrutado (el `AppRoutingModule` que se usarás más adelante) y de otro para la presentación en el navegador (el 'BrowserModule').\n\n### 2.1.1 Dos mundos paralelos: imports de Angular e import de TypeScript\nSi es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el `app.module.ts` son algo así:\n\n```typescript\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\n```\n\nEstas sentencias de importación son propias del lenguaje y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros *TypeScript*. La importación se realiza a través de la ruta física relativa al fichero actual, o en el directorio `node_modules` si es código de terceros.\n\nEn general no tendrás que preocuparte de estas importaciones físicas, pues el *VSCode* y las extensiones esenciales se encargan de hacerlo automáticamente.  \n\n## 2.2 Generación de módulos\nHasta ahora los módulos involucrados son librerías de terceros o se crearon mágicamente con la aplicación. Es hora de que crees tu primer módulo. Para eso usaremos otro comando del cli, el `ng generate module`. En una ventana del terminal escribe:\n```shell\nng g m lib/components\n```\nEsta es la sintaxis abreviada del comando [`ng generate`](https://github.com/angular/angular-cli/wiki/generate) el cual dispone de varios planos de construcción o *blueprints*. El que he usado aquí es el de `module` para la construcción de módulos.\n\nEl resultado es la creación del fichero `lib/components/components.module.ts` con la declaración y decoración del módulo `ComponentsModule`.\nEste módulo te servirá de contenedor para guardar componentes como veremos más adelante. \n\n```typescript\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class ComponentsModule {}\n\n```\n\nPor ahora hay asegurar que este módulo se engancha al raíz. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:\n\n```typescript\n@NgModule({\n imports: [AppRoutingModule, BrowserModule, ComponentsModule],\n})\n```\n\n# 3. Componentes\nLos módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. **Los componentes son los bloques básicos de construcción de las páginas web en Angular**. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).\n\nLa aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero `app.component.ts`. Según la configuración del CLI este componente se puede haber sido creado en un sólo fichero (es el caso escogido a efectos didácticos) o en dos o tres ficheros especializados (con la vista y los estilos en ficheros propios).\n\n## 3.1 Anatomía de un componente\nLos componentes, como el resto de artefactos en Angular, serán **clases TypeScript decoradas** con funciones específicas. En este caso la función es `@Component()` que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.\n\n```typescript\nimport { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"cf-root\",\n  template: ``,\n  styles: []\n})\nexport class AppComponent {}\n```\n\n**Los componentes definen nuevas etiquetas HTML** para ser usados dentro de otros componentes, o excepcionalmente en este caso por ser el componente raíz en el página `index.html`. El nombre de la nueva etiqueta se conoce como *selector*. En este caso la propiedad `selector: \"cf-root\"` permite el uso de este componente dentro de otro con esta invocación `<cf-root></cf-root>`. \n\n>Observa el prefijo `cf` que en este se corresponde con cash-flow el nombre de la aplicación. El prefijo fue asignado durante la generación de la aplicación y se usará en todos los componentes propios para evitar colisiones con terceros.\n\n**La plantilla representa la parte visual** del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad `template` del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero html y referenciarlo como una ruta relativa en la propiedad `templateUrl`.\n\nLa propiedad **`styles` y su gemela `stylesUrl` permiten asignar estilos** CSS, SASS o LESS al componente. Estos estilos se incrustan durante la compilación en los nodos del DOM generado. Son exclusivos del componente y facilitan el desarrollo granular de aplicaciones.\n\n**En la clase del componente nos encontraremos la implementación de su funcionalidad**. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.\n\nUna aplicación web en Angular se monta como un árbol de componentes. El componente raíz ya viene creado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.\n\n## 3.2 Generación de componentes\nPara crear nuevos componentes vamos a usar de nuevo el CLI con su comando `generate`. Pero ahora usaremos los planos para construir un `component`. La sintaxis completa del comando [`ng generate component`](https://github.com/angular/angular-cli/wiki/generate-component) permite crear componentes en diversas formas.\n\nVamos a crear componentes para tener una estructura base para la página web que vamos a programar. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal. \n\nEstos tres comandos generan los tres componentes. Ejecútalos en una terminal y comprueba el resultado en el editor.\n\n```shell\nng g c lib/components/nav \nng g c lib/components/main \nng g c lib/components/footer --export \n```\nAnalicemos por ejemplo el componente del fichero `main.component.ts`. Su estructura es igual a la del componente raíz. La única diferencia es que el nombre del componente coincide con el nombre del selector: `cf-main` y `MainComponent`. Esto será lo normal, sólo el componente raíz tiene la excepción de que su nombre `App` no coincide con us selector `root`\n\n```typescript\n@Component({\n  selector: \"cf-main\",\n  template: ``,\n  styles: []\n})\nexport class MainComponent {}\n```\n\n### 3.2.1 Componentes privados\nLa clave del código limpio es exponer funcionalidad de manera expresiva pero ocultar la implementación. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la programación basada en componentes podemos crear pantallas complejas, reutilizables, que a su vez contengan y oculten la complejidad interna a sus consumidores.\n\nEl siguiente comando crea uno de esos componentes, que es visible dentro del módulo que lo declara, pero no lo és fuera de él.\n\n```shell\nng g c lib/components/nav/title --flat\n```\n\n>Work in progress To be continued ... ;-)","source":"_posts/Base-para-aplicacion-Angular-5.md","raw":"---\ntitle: Base para una aplicación Angular 5\ndate: 2017-11-09 11:09:46\ntags:  \n- Angular\n- Angular5\n- CLI\n- Tutorial\ncategories:\n- [Tutorial, Angular5] \nthumbnail: /css/images/angular-5_1_Base.jpg\n---\n![Tutorial Angular5 0-CLI1.5](/images/tutorial-angular-5_1_base.jpg)\n\nVamos a crear una **base sobre la que programar una aplicación Angular 5** profesional. Usaremos el *CLI* y *npm* para configurarla y darle una estructura sobre la que crecer. \nLa idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: **los módulos y los componentes**.\n\n<!-- more -->\n\nPartimos de la aplicación tal cómo la dejamos en el [Hola Mundo en Angular](../hola-angular_5-cli/). Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/angular5/1-base](https://github.com/AcademiaBinaria/angular5/tree/master/1-base/cash-flow) \n\n# 1. Configuración\nEl CLI viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el `package.json` y agregar librerías de terceros.\n\n## 1.1 Package.json\n\nEl `package.json` es el fichero estándar de *npm* donde se almacenan las **dependencias de terceros**. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de *Angular*. Y también las herramientas que necesita el programador, por ejemplo el propio *AngularCLI*;\n```json\n{\n  \"dependencies\": {\n      \"@angular/core\": \"^5.0.0\",\n  },\n  \"devDependencies\": {\n      \"@angular/cli\": \"1.5.0\",\n  }\n}\n```\n\nOtro uso del `package.json` es servir de **contenedor de scripts** para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar `npm start` ejecutará el contenido asignado en el fichero *json*, originalmente `ng serve`. Esto lanza el servidor de pruebas con sus opciones por defecto. \n\nPero el **comando [ng serve](https://github.com/angular/angular-cli/wiki/serve)** admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor.\n```json\n{\n \"start\": \"ng serve --aot -o\",\n}\n```\n\n## 1.2 Estilos y librerías de terceros\nLas librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos algún otro producto de terceros. Ya sean utilidades como *[Moment](https://momentjs.com/)*, librerías gráficas como *[chart.js](http://www.chartjs.org/)* o la aplicación de estilos y componentes visuales de *frameworks como Bootstrap o MaterialDesign*. Pero todos se instalan de igual forma. Descargándolos con *npm* y adjuntándolos en el `.angular-cli.json`. \n\n>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama *[milligram](https://milligram.io/)* y es apropiada para prototipos, pruebas o pequeños proyectos.\n\nSe descarga de manera estándar.\n```shell\nnpm i milligram --save\n```\n\nY se agrega a través del fichero `.angular-cli.json` a la colección de *styles* o de *scripts* si los tuviera.\n```json\n{\n  \"styles\": [\n      \"../node_modules/milligram/dist/milligram.min.css\",\n      \"styles.css\"\n      ],\n  \"scripts\": [],\n}\n```\nEstas colecciones de archivos los usa el *cli* a través de *webpack* para incluirlos minificados y concatenados en un fichero *bundle* sustituyendo a las clásicas etiquetas html. De esta forma el fichero `index.html` apenas tendrás que tocarlo. Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. \n\nUna cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo *milligram*. \n\n\n# 2. Módulos\nLos módulos son **contenedores dónde almacenar los componentes y servicios** de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.\n\n## 2.1 Definición mediante decoradores\nAntes de importar cualquier módulo hay que definirlo. En Angular los módulos de declaran como clases de TypeScript, habitualmente vacías, decoradas con una función especial. Es la función `@NgModule()` que recibe un objeto como único argumento. En las propiedades de ese objeto es dónde se configura el módulo. \n\nMira el módulo `AppModule` original que genera el CLI en el fichero `app.module.ts`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [AppRoutingModule, BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n## 2.1 Importación de otros módulos\nEl módulo `App` también se conoce como módulo raíz porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad `imports:[]`, que es un array de punteros a otros módulos.\n\nEn la situación original el módulo principal depende un módulo para realizar el enrutado (el `AppRoutingModule` que se usarás más adelante) y de otro para la presentación en el navegador (el 'BrowserModule').\n\n### 2.1.1 Dos mundos paralelos: imports de Angular e import de TypeScript\nSi es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el `app.module.ts` son algo así:\n\n```typescript\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\n```\n\nEstas sentencias de importación son propias del lenguaje y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros *TypeScript*. La importación se realiza a través de la ruta física relativa al fichero actual, o en el directorio `node_modules` si es código de terceros.\n\nEn general no tendrás que preocuparte de estas importaciones físicas, pues el *VSCode* y las extensiones esenciales se encargan de hacerlo automáticamente.  \n\n## 2.2 Generación de módulos\nHasta ahora los módulos involucrados son librerías de terceros o se crearon mágicamente con la aplicación. Es hora de que crees tu primer módulo. Para eso usaremos otro comando del cli, el `ng generate module`. En una ventana del terminal escribe:\n```shell\nng g m lib/components\n```\nEsta es la sintaxis abreviada del comando [`ng generate`](https://github.com/angular/angular-cli/wiki/generate) el cual dispone de varios planos de construcción o *blueprints*. El que he usado aquí es el de `module` para la construcción de módulos.\n\nEl resultado es la creación del fichero `lib/components/components.module.ts` con la declaración y decoración del módulo `ComponentsModule`.\nEste módulo te servirá de contenedor para guardar componentes como veremos más adelante. \n\n```typescript\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class ComponentsModule {}\n\n```\n\nPor ahora hay asegurar que este módulo se engancha al raíz. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:\n\n```typescript\n@NgModule({\n imports: [AppRoutingModule, BrowserModule, ComponentsModule],\n})\n```\n\n# 3. Componentes\nLos módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. **Los componentes son los bloques básicos de construcción de las páginas web en Angular**. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).\n\nLa aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero `app.component.ts`. Según la configuración del CLI este componente se puede haber sido creado en un sólo fichero (es el caso escogido a efectos didácticos) o en dos o tres ficheros especializados (con la vista y los estilos en ficheros propios).\n\n## 3.1 Anatomía de un componente\nLos componentes, como el resto de artefactos en Angular, serán **clases TypeScript decoradas** con funciones específicas. En este caso la función es `@Component()` que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.\n\n```typescript\nimport { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"cf-root\",\n  template: ``,\n  styles: []\n})\nexport class AppComponent {}\n```\n\n**Los componentes definen nuevas etiquetas HTML** para ser usados dentro de otros componentes, o excepcionalmente en este caso por ser el componente raíz en el página `index.html`. El nombre de la nueva etiqueta se conoce como *selector*. En este caso la propiedad `selector: \"cf-root\"` permite el uso de este componente dentro de otro con esta invocación `<cf-root></cf-root>`. \n\n>Observa el prefijo `cf` que en este se corresponde con cash-flow el nombre de la aplicación. El prefijo fue asignado durante la generación de la aplicación y se usará en todos los componentes propios para evitar colisiones con terceros.\n\n**La plantilla representa la parte visual** del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad `template` del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero html y referenciarlo como una ruta relativa en la propiedad `templateUrl`.\n\nLa propiedad **`styles` y su gemela `stylesUrl` permiten asignar estilos** CSS, SASS o LESS al componente. Estos estilos se incrustan durante la compilación en los nodos del DOM generado. Son exclusivos del componente y facilitan el desarrollo granular de aplicaciones.\n\n**En la clase del componente nos encontraremos la implementación de su funcionalidad**. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.\n\nUna aplicación web en Angular se monta como un árbol de componentes. El componente raíz ya viene creado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.\n\n## 3.2 Generación de componentes\nPara crear nuevos componentes vamos a usar de nuevo el CLI con su comando `generate`. Pero ahora usaremos los planos para construir un `component`. La sintaxis completa del comando [`ng generate component`](https://github.com/angular/angular-cli/wiki/generate-component) permite crear componentes en diversas formas.\n\nVamos a crear componentes para tener una estructura base para la página web que vamos a programar. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal. \n\nEstos tres comandos generan los tres componentes. Ejecútalos en una terminal y comprueba el resultado en el editor.\n\n```shell\nng g c lib/components/nav \nng g c lib/components/main \nng g c lib/components/footer --export \n```\nAnalicemos por ejemplo el componente del fichero `main.component.ts`. Su estructura es igual a la del componente raíz. La única diferencia es que el nombre del componente coincide con el nombre del selector: `cf-main` y `MainComponent`. Esto será lo normal, sólo el componente raíz tiene la excepción de que su nombre `App` no coincide con us selector `root`\n\n```typescript\n@Component({\n  selector: \"cf-main\",\n  template: ``,\n  styles: []\n})\nexport class MainComponent {}\n```\n\n### 3.2.1 Componentes privados\nLa clave del código limpio es exponer funcionalidad de manera expresiva pero ocultar la implementación. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la programación basada en componentes podemos crear pantallas complejas, reutilizables, que a su vez contengan y oculten la complejidad interna a sus consumidores.\n\nEl siguiente comando crea uno de esos componentes, que es visible dentro del módulo que lo declara, pero no lo és fuera de él.\n\n```shell\nng g c lib/components/nav/title --flat\n```\n\n>Work in progress To be continued ... ;-)","slug":"Base-para-aplicacion-Angular-5","published":1,"updated":"2017-11-09T16:30:42.000Z","_id":"cj9r8gizo0009c7jsu1asddz3","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-5_1_base.jpg\" alt=\"Tutorial Angular5 0-CLI1.5\"></p>\n<p>Vamos a crear una <strong>base sobre la que programar una aplicación Angular 5</strong> profesional. Usaremos el <em>CLI</em> y <em>npm</em> para configurarla y darle una estructura sobre la que crecer.<br>La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: <strong>los módulos y los componentes</strong>.</p>\n<a id=\"more\"></a>\n<p>Partimos de la aplicación tal cómo la dejamos en el <a href=\"../hola-angular_5-cli/\">Hola Mundo en Angular</a>. Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.</p>\n<blockquote>\n<p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/1-base/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/1-base</a> </p>\n</blockquote>\n<h1 id=\"1-Configuracion\"><a href=\"#1-Configuracion\" class=\"headerlink\" title=\"1. Configuración\"></a>1. Configuración</h1><p>El CLI viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el <code>package.json</code> y agregar librerías de terceros.</p>\n<h2 id=\"1-1-Package-json\"><a href=\"#1-1-Package-json\" class=\"headerlink\" title=\"1.1 Package.json\"></a>1.1 Package.json</h2><p>El <code>package.json</code> es el fichero estándar de <em>npm</em> donde se almacenan las <strong>dependencias de terceros</strong>. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de <em>Angular</em>. Y también las herramientas que necesita el programador, por ejemplo el propio <em>AngularCLI</em>;<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"@angular/core\"</span>: <span class=\"string\">\"^5.0.0\"</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"@angular/cli\"</span>: <span class=\"string\">\"1.5.0\"</span>,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Otro uso del <code>package.json</code> es servir de <strong>contenedor de scripts</strong> para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar <code>npm start</code> ejecutará el contenido asignado en el fichero <em>json</em>, originalmente <code>ng serve</code>. Esto lanza el servidor de pruebas con sus opciones por defecto. </p>\n<p>Pero el <strong>comando <a href=\"https://github.com/angular/angular-cli/wiki/serve\" target=\"_blank\" rel=\"external\">ng serve</a></strong> admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor.<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve --aot -o\"</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"1-2-Estilos-y-librerias-de-terceros\"><a href=\"#1-2-Estilos-y-librerias-de-terceros\" class=\"headerlink\" title=\"1.2 Estilos y librerías de terceros\"></a>1.2 Estilos y librerías de terceros</h2><p>Las librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos algún otro producto de terceros. Ya sean utilidades como <em><a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"external\">Moment</a></em>, librerías gráficas como <em><a href=\"http://www.chartjs.org/\" target=\"_blank\" rel=\"external\">chart.js</a></em> o la aplicación de estilos y componentes visuales de <em>frameworks como Bootstrap o MaterialDesign</em>. Pero todos se instalan de igual forma. Descargándolos con <em>npm</em> y adjuntándolos en el <code>.angular-cli.json</code>. </p>\n<blockquote>\n<p>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama <em><a href=\"https://milligram.io/\" target=\"_blank\" rel=\"external\">milligram</a></em> y es apropiada para prototipos, pruebas o pequeños proyectos.</p>\n</blockquote>\n<p>Se descarga de manera estándar.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i milligram --save</div></pre></td></tr></table></figure></p>\n<p>Y se agrega a través del fichero <code>.angular-cli.json</code> a la colección de <em>styles</em> o de <em>scripts</em> si los tuviera.<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"styles\"</span>: [</div><div class=\"line\">      <span class=\"string\">\"../node_modules/milligram/dist/milligram.min.css\"</span>,</div><div class=\"line\">      <span class=\"string\">\"styles.css\"</span></div><div class=\"line\">      ],</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: [],</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Estas colecciones de archivos los usa el <em>cli</em> a través de <em>webpack</em> para incluirlos minificados y concatenados en un fichero <em>bundle</em> sustituyendo a las clásicas etiquetas html. De esta forma el fichero <code>index.html</code> apenas tendrás que tocarlo. Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. </p>\n<p>Una cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo <em>milligram</em>. </p>\n<h1 id=\"2-Modulos\"><a href=\"#2-Modulos\" class=\"headerlink\" title=\"2. Módulos\"></a>2. Módulos</h1><p>Los módulos son <strong>contenedores dónde almacenar los componentes y servicios</strong> de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.</p>\n<h2 id=\"2-1-Definicion-mediante-decoradores\"><a href=\"#2-1-Definicion-mediante-decoradores\" class=\"headerlink\" title=\"2.1 Definición mediante decoradores\"></a>2.1 Definición mediante decoradores</h2><p>Antes de importar cualquier módulo hay que definirlo. En Angular los módulos de declaran como clases de TypeScript, habitualmente vacías, decoradas con una función especial. Es la función <code>@NgModule()</code> que recibe un objeto como único argumento. En las propiedades de ese objeto es dónde se configura el módulo. </p>\n<p>Mira el módulo <code>AppModule</code> original que genera el CLI en el fichero <code>app.module.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  declarations: [AppComponent],</div><div class=\"line\">  imports: [AppRoutingModule, BrowserModule],</div><div class=\"line\">  providers: [],</div><div class=\"line\">  bootstrap: [AppComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-1-Importacion-de-otros-modulos\"><a href=\"#2-1-Importacion-de-otros-modulos\" class=\"headerlink\" title=\"2.1 Importación de otros módulos\"></a>2.1 Importación de otros módulos</h2><p>El módulo <code>App</code> también se conoce como módulo raíz porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad <code>imports:[]</code>, que es un array de punteros a otros módulos.</p>\n<p>En la situación original el módulo principal depende un módulo para realizar el enrutado (el <code>AppRoutingModule</code> que se usarás más adelante) y de otro para la presentación en el navegador (el ‘BrowserModule’).</p>\n<h3 id=\"2-1-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\"><a href=\"#2-1-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\" class=\"headerlink\" title=\"2.1.1 Dos mundos paralelos: imports de Angular e import de TypeScript\"></a>2.1.1 Dos mundos paralelos: imports de Angular e import de TypeScript</h3><p>Si es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el <code>app.module.ts</code> son algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./app-routing.module\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./app.component\"</span>;</div></pre></td></tr></table></figure>\n<p>Estas sentencias de importación son propias del lenguaje y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros <em>TypeScript</em>. La importación se realiza a través de la ruta física relativa al fichero actual, o en el directorio <code>node_modules</code> si es código de terceros.</p>\n<p>En general no tendrás que preocuparte de estas importaciones físicas, pues el <em>VSCode</em> y las extensiones esenciales se encargan de hacerlo automáticamente.  </p>\n<h2 id=\"2-2-Generacion-de-modulos\"><a href=\"#2-2-Generacion-de-modulos\" class=\"headerlink\" title=\"2.2 Generación de módulos\"></a>2.2 Generación de módulos</h2><p>Hasta ahora los módulos involucrados son librerías de terceros o se crearon mágicamente con la aplicación. Es hora de que crees tu primer módulo. Para eso usaremos otro comando del cli, el <code>ng generate module</code>. En una ventana del terminal escribe:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g m lib/components</div></pre></td></tr></table></figure></p>\n<p>Esta es la sintaxis abreviada del comando <a href=\"https://github.com/angular/angular-cli/wiki/generate\" target=\"_blank\" rel=\"external\"><code>ng generate</code></a> el cual dispone de varios planos de construcción o <em>blueprints</em>. El que he usado aquí es el de <code>module</code> para la construcción de módulos.</p>\n<p>El resultado es la creación del fichero <code>lib/components/components.module.ts</code> con la declaración y decoración del módulo <code>ComponentsModule</code>.<br>Este módulo te servirá de contenedor para guardar componentes como veremos más adelante. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [],</div><div class=\"line\">  declarations: [],</div><div class=\"line\">  exports: []</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ComponentsModule &#123;&#125;</div></pre></td></tr></table></figure>\n<p>Por ahora hay asegurar que este módulo se engancha al raíz. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\"> imports: [AppRoutingModule, BrowserModule, ComponentsModule],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"3-Componentes\"><a href=\"#3-Componentes\" class=\"headerlink\" title=\"3. Componentes\"></a>3. Componentes</h1><p>Los módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. <strong>Los componentes son los bloques básicos de construcción de las páginas web en Angular</strong>. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).</p>\n<p>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero <code>app.component.ts</code>. Según la configuración del CLI este componente se puede haber sido creado en un sólo fichero (es el caso escogido a efectos didácticos) o en dos o tres ficheros especializados (con la vista y los estilos en ficheros propios).</p>\n<h2 id=\"3-1-Anatomia-de-un-componente\"><a href=\"#3-1-Anatomia-de-un-componente\" class=\"headerlink\" title=\"3.1 Anatomía de un componente\"></a>3.1 Anatomía de un componente</h2><p>Los componentes, como el resto de artefactos en Angular, serán <strong>clases TypeScript decoradas</strong> con funciones específicas. En este caso la función es <code>@Component()</code> que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">\"cf-root\"</span>,</div><div class=\"line\">  template: <span class=\"string\">``</span>,</div><div class=\"line\">  styles: []</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;&#125;</div></pre></td></tr></table></figure>\n<p><strong>Los componentes definen nuevas etiquetas HTML</strong> para ser usados dentro de otros componentes, o excepcionalmente en este caso por ser el componente raíz en el página <code>index.html</code>. El nombre de la nueva etiqueta se conoce como <em>selector</em>. En este caso la propiedad <code>selector: &quot;cf-root&quot;</code> permite el uso de este componente dentro de otro con esta invocación <code>&lt;cf-root&gt;&lt;/cf-root&gt;</code>. </p>\n<blockquote>\n<p>Observa el prefijo <code>cf</code> que en este se corresponde con cash-flow el nombre de la aplicación. El prefijo fue asignado durante la generación de la aplicación y se usará en todos los componentes propios para evitar colisiones con terceros.</p>\n</blockquote>\n<p><strong>La plantilla representa la parte visual</strong> del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad <code>template</code> del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero html y referenciarlo como una ruta relativa en la propiedad <code>templateUrl</code>.</p>\n<p>La propiedad <strong><code>styles</code> y su gemela <code>stylesUrl</code> permiten asignar estilos</strong> CSS, SASS o LESS al componente. Estos estilos se incrustan durante la compilación en los nodos del DOM generado. Son exclusivos del componente y facilitan el desarrollo granular de aplicaciones.</p>\n<p><strong>En la clase del componente nos encontraremos la implementación de su funcionalidad</strong>. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.</p>\n<p>Una aplicación web en Angular se monta como un árbol de componentes. El componente raíz ya viene creado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.</p>\n<h2 id=\"3-2-Generacion-de-componentes\"><a href=\"#3-2-Generacion-de-componentes\" class=\"headerlink\" title=\"3.2 Generación de componentes\"></a>3.2 Generación de componentes</h2><p>Para crear nuevos componentes vamos a usar de nuevo el CLI con su comando <code>generate</code>. Pero ahora usaremos los planos para construir un <code>component</code>. La sintaxis completa del comando <a href=\"https://github.com/angular/angular-cli/wiki/generate-component\" target=\"_blank\" rel=\"external\"><code>ng generate component</code></a> permite crear componentes en diversas formas.</p>\n<p>Vamos a crear componentes para tener una estructura base para la página web que vamos a programar. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal. </p>\n<p>Estos tres comandos generan los tres componentes. Ejecútalos en una terminal y comprueba el resultado en el editor.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g c lib/components/nav </div><div class=\"line\">ng g c lib/components/main </div><div class=\"line\">ng g c lib/components/footer --export</div></pre></td></tr></table></figure>\n<p>Analicemos por ejemplo el componente del fichero <code>main.component.ts</code>. Su estructura es igual a la del componente raíz. La única diferencia es que el nombre del componente coincide con el nombre del selector: <code>cf-main</code> y <code>MainComponent</code>. Esto será lo normal, sólo el componente raíz tiene la excepción de que su nombre <code>App</code> no coincide con us selector <code>root</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">\"cf-main\"</span>,</div><div class=\"line\">  template: <span class=\"string\">``</span>,</div><div class=\"line\">  styles: []</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MainComponent &#123;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-1-Componentes-privados\"><a href=\"#3-2-1-Componentes-privados\" class=\"headerlink\" title=\"3.2.1 Componentes privados\"></a>3.2.1 Componentes privados</h3><p>La clave del código limpio es exponer funcionalidad de manera expresiva pero ocultar la implementación. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la programación basada en componentes podemos crear pantallas complejas, reutilizables, que a su vez contengan y oculten la complejidad interna a sus consumidores.</p>\n<p>El siguiente comando crea uno de esos componentes, que es visible dentro del módulo que lo declara, pero no lo és fuera de él.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g c lib/components/nav/title --flat</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Work in progress To be continued … ;-)</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-5_1_base.jpg\" alt=\"Tutorial Angular5 0-CLI1.5\"></p>\n<p>Vamos a crear una <strong>base sobre la que programar una aplicación Angular 5</strong> profesional. Usaremos el <em>CLI</em> y <em>npm</em> para configurarla y darle una estructura sobre la que crecer.<br>La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: <strong>los módulos y los componentes</strong>.</p>","more":"<p>Partimos de la aplicación tal cómo la dejamos en el <a href=\"../hola-angular_5-cli/\">Hola Mundo en Angular</a>. Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.</p>\n<blockquote>\n<p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/1-base/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/1-base</a> </p>\n</blockquote>\n<h1 id=\"1-Configuracion\"><a href=\"#1-Configuracion\" class=\"headerlink\" title=\"1. Configuración\"></a>1. Configuración</h1><p>El CLI viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el <code>package.json</code> y agregar librerías de terceros.</p>\n<h2 id=\"1-1-Package-json\"><a href=\"#1-1-Package-json\" class=\"headerlink\" title=\"1.1 Package.json\"></a>1.1 Package.json</h2><p>El <code>package.json</code> es el fichero estándar de <em>npm</em> donde se almacenan las <strong>dependencias de terceros</strong>. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de <em>Angular</em>. Y también las herramientas que necesita el programador, por ejemplo el propio <em>AngularCLI</em>;<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"@angular/core\"</span>: <span class=\"string\">\"^5.0.0\"</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"@angular/cli\"</span>: <span class=\"string\">\"1.5.0\"</span>,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Otro uso del <code>package.json</code> es servir de <strong>contenedor de scripts</strong> para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar <code>npm start</code> ejecutará el contenido asignado en el fichero <em>json</em>, originalmente <code>ng serve</code>. Esto lanza el servidor de pruebas con sus opciones por defecto. </p>\n<p>Pero el <strong>comando <a href=\"https://github.com/angular/angular-cli/wiki/serve\" target=\"_blank\" rel=\"external\">ng serve</a></strong> admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor.<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve --aot -o\"</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"1-2-Estilos-y-librerias-de-terceros\"><a href=\"#1-2-Estilos-y-librerias-de-terceros\" class=\"headerlink\" title=\"1.2 Estilos y librerías de terceros\"></a>1.2 Estilos y librerías de terceros</h2><p>Las librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos algún otro producto de terceros. Ya sean utilidades como <em><a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"external\">Moment</a></em>, librerías gráficas como <em><a href=\"http://www.chartjs.org/\" target=\"_blank\" rel=\"external\">chart.js</a></em> o la aplicación de estilos y componentes visuales de <em>frameworks como Bootstrap o MaterialDesign</em>. Pero todos se instalan de igual forma. Descargándolos con <em>npm</em> y adjuntándolos en el <code>.angular-cli.json</code>. </p>\n<blockquote>\n<p>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama <em><a href=\"https://milligram.io/\" target=\"_blank\" rel=\"external\">milligram</a></em> y es apropiada para prototipos, pruebas o pequeños proyectos.</p>\n</blockquote>\n<p>Se descarga de manera estándar.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i milligram --save</div></pre></td></tr></table></figure></p>\n<p>Y se agrega a través del fichero <code>.angular-cli.json</code> a la colección de <em>styles</em> o de <em>scripts</em> si los tuviera.<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"styles\"</span>: [</div><div class=\"line\">      <span class=\"string\">\"../node_modules/milligram/dist/milligram.min.css\"</span>,</div><div class=\"line\">      <span class=\"string\">\"styles.css\"</span></div><div class=\"line\">      ],</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: [],</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Estas colecciones de archivos los usa el <em>cli</em> a través de <em>webpack</em> para incluirlos minificados y concatenados en un fichero <em>bundle</em> sustituyendo a las clásicas etiquetas html. De esta forma el fichero <code>index.html</code> apenas tendrás que tocarlo. Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. </p>\n<p>Una cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo <em>milligram</em>. </p>\n<h1 id=\"2-Modulos\"><a href=\"#2-Modulos\" class=\"headerlink\" title=\"2. Módulos\"></a>2. Módulos</h1><p>Los módulos son <strong>contenedores dónde almacenar los componentes y servicios</strong> de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.</p>\n<h2 id=\"2-1-Definicion-mediante-decoradores\"><a href=\"#2-1-Definicion-mediante-decoradores\" class=\"headerlink\" title=\"2.1 Definición mediante decoradores\"></a>2.1 Definición mediante decoradores</h2><p>Antes de importar cualquier módulo hay que definirlo. En Angular los módulos de declaran como clases de TypeScript, habitualmente vacías, decoradas con una función especial. Es la función <code>@NgModule()</code> que recibe un objeto como único argumento. En las propiedades de ese objeto es dónde se configura el módulo. </p>\n<p>Mira el módulo <code>AppModule</code> original que genera el CLI en el fichero <code>app.module.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  declarations: [AppComponent],</div><div class=\"line\">  imports: [AppRoutingModule, BrowserModule],</div><div class=\"line\">  providers: [],</div><div class=\"line\">  bootstrap: [AppComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-1-Importacion-de-otros-modulos\"><a href=\"#2-1-Importacion-de-otros-modulos\" class=\"headerlink\" title=\"2.1 Importación de otros módulos\"></a>2.1 Importación de otros módulos</h2><p>El módulo <code>App</code> también se conoce como módulo raíz porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad <code>imports:[]</code>, que es un array de punteros a otros módulos.</p>\n<p>En la situación original el módulo principal depende un módulo para realizar el enrutado (el <code>AppRoutingModule</code> que se usarás más adelante) y de otro para la presentación en el navegador (el ‘BrowserModule’).</p>\n<h3 id=\"2-1-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\"><a href=\"#2-1-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\" class=\"headerlink\" title=\"2.1.1 Dos mundos paralelos: imports de Angular e import de TypeScript\"></a>2.1.1 Dos mundos paralelos: imports de Angular e import de TypeScript</h3><p>Si es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el <code>app.module.ts</code> son algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./app-routing.module\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./app.component\"</span>;</div></pre></td></tr></table></figure>\n<p>Estas sentencias de importación son propias del lenguaje y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros <em>TypeScript</em>. La importación se realiza a través de la ruta física relativa al fichero actual, o en el directorio <code>node_modules</code> si es código de terceros.</p>\n<p>En general no tendrás que preocuparte de estas importaciones físicas, pues el <em>VSCode</em> y las extensiones esenciales se encargan de hacerlo automáticamente.  </p>\n<h2 id=\"2-2-Generacion-de-modulos\"><a href=\"#2-2-Generacion-de-modulos\" class=\"headerlink\" title=\"2.2 Generación de módulos\"></a>2.2 Generación de módulos</h2><p>Hasta ahora los módulos involucrados son librerías de terceros o se crearon mágicamente con la aplicación. Es hora de que crees tu primer módulo. Para eso usaremos otro comando del cli, el <code>ng generate module</code>. En una ventana del terminal escribe:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g m lib/components</div></pre></td></tr></table></figure></p>\n<p>Esta es la sintaxis abreviada del comando <a href=\"https://github.com/angular/angular-cli/wiki/generate\" target=\"_blank\" rel=\"external\"><code>ng generate</code></a> el cual dispone de varios planos de construcción o <em>blueprints</em>. El que he usado aquí es el de <code>module</code> para la construcción de módulos.</p>\n<p>El resultado es la creación del fichero <code>lib/components/components.module.ts</code> con la declaración y decoración del módulo <code>ComponentsModule</code>.<br>Este módulo te servirá de contenedor para guardar componentes como veremos más adelante. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [],</div><div class=\"line\">  declarations: [],</div><div class=\"line\">  exports: []</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ComponentsModule &#123;&#125;</div></pre></td></tr></table></figure>\n<p>Por ahora hay asegurar que este módulo se engancha al raíz. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\"> imports: [AppRoutingModule, BrowserModule, ComponentsModule],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"3-Componentes\"><a href=\"#3-Componentes\" class=\"headerlink\" title=\"3. Componentes\"></a>3. Componentes</h1><p>Los módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. <strong>Los componentes son los bloques básicos de construcción de las páginas web en Angular</strong>. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).</p>\n<p>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero <code>app.component.ts</code>. Según la configuración del CLI este componente se puede haber sido creado en un sólo fichero (es el caso escogido a efectos didácticos) o en dos o tres ficheros especializados (con la vista y los estilos en ficheros propios).</p>\n<h2 id=\"3-1-Anatomia-de-un-componente\"><a href=\"#3-1-Anatomia-de-un-componente\" class=\"headerlink\" title=\"3.1 Anatomía de un componente\"></a>3.1 Anatomía de un componente</h2><p>Los componentes, como el resto de artefactos en Angular, serán <strong>clases TypeScript decoradas</strong> con funciones específicas. En este caso la función es <code>@Component()</code> que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">\"cf-root\"</span>,</div><div class=\"line\">  template: <span class=\"string\">``</span>,</div><div class=\"line\">  styles: []</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;&#125;</div></pre></td></tr></table></figure>\n<p><strong>Los componentes definen nuevas etiquetas HTML</strong> para ser usados dentro de otros componentes, o excepcionalmente en este caso por ser el componente raíz en el página <code>index.html</code>. El nombre de la nueva etiqueta se conoce como <em>selector</em>. En este caso la propiedad <code>selector: &quot;cf-root&quot;</code> permite el uso de este componente dentro de otro con esta invocación <code>&lt;cf-root&gt;&lt;/cf-root&gt;</code>. </p>\n<blockquote>\n<p>Observa el prefijo <code>cf</code> que en este se corresponde con cash-flow el nombre de la aplicación. El prefijo fue asignado durante la generación de la aplicación y se usará en todos los componentes propios para evitar colisiones con terceros.</p>\n</blockquote>\n<p><strong>La plantilla representa la parte visual</strong> del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad <code>template</code> del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero html y referenciarlo como una ruta relativa en la propiedad <code>templateUrl</code>.</p>\n<p>La propiedad <strong><code>styles</code> y su gemela <code>stylesUrl</code> permiten asignar estilos</strong> CSS, SASS o LESS al componente. Estos estilos se incrustan durante la compilación en los nodos del DOM generado. Son exclusivos del componente y facilitan el desarrollo granular de aplicaciones.</p>\n<p><strong>En la clase del componente nos encontraremos la implementación de su funcionalidad</strong>. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.</p>\n<p>Una aplicación web en Angular se monta como un árbol de componentes. El componente raíz ya viene creado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.</p>\n<h2 id=\"3-2-Generacion-de-componentes\"><a href=\"#3-2-Generacion-de-componentes\" class=\"headerlink\" title=\"3.2 Generación de componentes\"></a>3.2 Generación de componentes</h2><p>Para crear nuevos componentes vamos a usar de nuevo el CLI con su comando <code>generate</code>. Pero ahora usaremos los planos para construir un <code>component</code>. La sintaxis completa del comando <a href=\"https://github.com/angular/angular-cli/wiki/generate-component\" target=\"_blank\" rel=\"external\"><code>ng generate component</code></a> permite crear componentes en diversas formas.</p>\n<p>Vamos a crear componentes para tener una estructura base para la página web que vamos a programar. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal. </p>\n<p>Estos tres comandos generan los tres componentes. Ejecútalos en una terminal y comprueba el resultado en el editor.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g c lib/components/nav </div><div class=\"line\">ng g c lib/components/main </div><div class=\"line\">ng g c lib/components/footer --export</div></pre></td></tr></table></figure>\n<p>Analicemos por ejemplo el componente del fichero <code>main.component.ts</code>. Su estructura es igual a la del componente raíz. La única diferencia es que el nombre del componente coincide con el nombre del selector: <code>cf-main</code> y <code>MainComponent</code>. Esto será lo normal, sólo el componente raíz tiene la excepción de que su nombre <code>App</code> no coincide con us selector <code>root</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">\"cf-main\"</span>,</div><div class=\"line\">  template: <span class=\"string\">``</span>,</div><div class=\"line\">  styles: []</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MainComponent &#123;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-1-Componentes-privados\"><a href=\"#3-2-1-Componentes-privados\" class=\"headerlink\" title=\"3.2.1 Componentes privados\"></a>3.2.1 Componentes privados</h3><p>La clave del código limpio es exponer funcionalidad de manera expresiva pero ocultar la implementación. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la programación basada en componentes podemos crear pantallas complejas, reutilizables, que a su vez contengan y oculten la complejidad interna a sus consumidores.</p>\n<p>El siguiente comando crea uno de esos componentes, que es visible dentro del módulo que lo declara, pero no lo és fuera de él.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g c lib/components/nav/title --flat</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Work in progress To be continued … ;-)</p>\n</blockquote>"},{"title":"Código de ejemplo curso de Angular2","id":"22","updated":"2016-10-10T06:10:33.000Z","date":"2016-09-21T06:37:13.000Z","thumbnail":"/css/images/angular.jpg","_content":"\nEnlace a los repositorios con el código de ejemplo para los cursos de **Angular2** :\n\n<!-- more -->\n\n### 2.0 cli\n[AcademiaBinaria/angular2](https://github.com/AcademiaBinaria/angular2)\n\nEste proyecto es un *work in progress*.\n\nEstá basado en el generador [Angular-CLI](https://github.com/angular/angular-cli), el más adecuado para aplicaciones reales \n\n### RC6 Seed\n[AcademiaBinaria/angular2-RC6](https://github.com/AcademiaBinaria/angular2-RC6)\n\nAunque es para la `RC6` el código es perfectamente *compatible con la versión estable*.\n\nEstá basado en el proyecto [Angular2-Seed](https://github.com/angular/angular2-seed), que es más sencillo que el CLI para empezar. ","source":"_posts/Codigo-de-ejemplo-curso-de-Angular2.md","raw":"---\ntitle: Código de ejemplo curso de Angular2\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: codigo-de-ejemplo-curso-de-angular2\nid: 22\nupdated: '2016-10-10 08:10:33'\ndate: 2016-09-21 08:37:13\nthumbnail: /css/images/angular.jpg\n---\n\nEnlace a los repositorios con el código de ejemplo para los cursos de **Angular2** :\n\n<!-- more -->\n\n### 2.0 cli\n[AcademiaBinaria/angular2](https://github.com/AcademiaBinaria/angular2)\n\nEste proyecto es un *work in progress*.\n\nEstá basado en el generador [Angular-CLI](https://github.com/angular/angular-cli), el más adecuado para aplicaciones reales \n\n### RC6 Seed\n[AcademiaBinaria/angular2-RC6](https://github.com/AcademiaBinaria/angular2-RC6)\n\nAunque es para la `RC6` el código es perfectamente *compatible con la versión estable*.\n\nEstá basado en el proyecto [Angular2-Seed](https://github.com/angular/angular2-seed), que es más sencillo que el CLI para empezar. ","slug":"codigo-de-ejemplo-curso-de-angular2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gizr000bc7js58bp4pi0","content":"<p>Enlace a los repositorios con el código de ejemplo para los cursos de <strong>Angular2</strong> :</p>\n<a id=\"more\"></a>\n<h3 id=\"2-0-cli\"><a href=\"#2-0-cli\" class=\"headerlink\" title=\"2.0 cli\"></a>2.0 cli</h3><p><a href=\"https://github.com/AcademiaBinaria/angular2\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular2</a></p>\n<p>Este proyecto es un <em>work in progress</em>.</p>\n<p>Está basado en el generador <a href=\"https://github.com/angular/angular-cli\" target=\"_blank\" rel=\"external\">Angular-CLI</a>, el más adecuado para aplicaciones reales </p>\n<h3 id=\"RC6-Seed\"><a href=\"#RC6-Seed\" class=\"headerlink\" title=\"RC6 Seed\"></a>RC6 Seed</h3><p><a href=\"https://github.com/AcademiaBinaria/angular2-RC6\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular2-RC6</a></p>\n<p>Aunque es para la <code>RC6</code> el código es perfectamente <em>compatible con la versión estable</em>.</p>\n<p>Está basado en el proyecto <a href=\"https://github.com/angular/angular2-seed\" target=\"_blank\" rel=\"external\">Angular2-Seed</a>, que es más sencillo que el CLI para empezar. </p>\n","site":{"data":{}},"excerpt":"<p>Enlace a los repositorios con el código de ejemplo para los cursos de <strong>Angular2</strong> :</p>","more":"<h3 id=\"2-0-cli\"><a href=\"#2-0-cli\" class=\"headerlink\" title=\"2.0 cli\"></a>2.0 cli</h3><p><a href=\"https://github.com/AcademiaBinaria/angular2\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular2</a></p>\n<p>Este proyecto es un <em>work in progress</em>.</p>\n<p>Está basado en el generador <a href=\"https://github.com/angular/angular-cli\" target=\"_blank\" rel=\"external\">Angular-CLI</a>, el más adecuado para aplicaciones reales </p>\n<h3 id=\"RC6-Seed\"><a href=\"#RC6-Seed\" class=\"headerlink\" title=\"RC6 Seed\"></a>RC6 Seed</h3><p><a href=\"https://github.com/AcademiaBinaria/angular2-RC6\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular2-RC6</a></p>\n<p>Aunque es para la <code>RC6</code> el código es perfectamente <em>compatible con la versión estable</em>.</p>\n<p>Está basado en el proyecto <a href=\"https://github.com/angular/angular2-seed\" target=\"_blank\" rel=\"external\">Angular2-Seed</a>, que es más sencillo que el CLI para empezar. </p>"},{"title":"Componentes, los bloques de construcción de Angular2","id":"26","updated":"2016-11-07T17:39:26.000Z","date":"2016-05-23T12:07:27.000Z","_content":"\n>Código asociado en GitHub: [angular2/2-modulos/](https://github.com/AcademiaBinaria/angular2/tree/master/2-modulos) \n\nLos componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora **el componente es el rey**.\n\nLas aplicaciones en Angular2 se desarrollan como **árboles de componentes**. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en **módulos** para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.\n\n* 1- Nivel **Raíz**:\nToda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo `App` o simplemente `App`. \n* 2- Nivel **Troncal**:\nGeneralmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón *Navegador-Contenedor*, con algún elemento auxiliar para ayudas, mensajes, menús complejos... \n* 3- Nivel de **Ramas**:\nEn este símil, las ramas equivalen a rutas o vistas de la aplicación. En un *SPA* cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor \n* 4- Nivel de **Hojas**:\nCada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas. \n\n![Árbol de componentes en una aplicación Angular 2](/images/ng2-Arbol-de-componentes.jpg)\n\n>Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.\n\n<!-- more -->\n\n## Módulos\n\nLos árboles de componentes pueden ocultarnos fácilmente el bosque de nuestra aplicación. **Los módulos son agrupaciones de componentes.** Nos ayudan a mantener un orden y a encapsular funcionalidad para crear aplicaciones desacopladas con bloques re-utilizables.\n\n> No confundir con los módulos de *JavaScript ES6* o de T*ypeScript*. En estos casos se les llama módulos a los ficheros de código que exportan funcionalidad. \n\nPodemos imaginar un módulo como una fábrica de funcionalidad.\n1. **Importa** componentes que otros módulos exportan.\n2. **Declara** los componentes que el mismo fabrica.  \n3. **Exporta** algunos de estos componentes, para que los consuman otros módulos.\n\n\n### Anatomía de un Componente\nEn el artículo de [bienvenida a Angular 2](http://academia-binaria.com/hola-mundo-en-angular-2/) teníamos una aplicación de un sólo módulo con un sólo componente. Y nos sirvió para ver su **estructura**: plantilla, decorador y clase.\n\n![Estructura interna de un componente Angular 2](/images/ng2Component--1-.jpg)\n\nLa **plantilla** en HTML y la **clase** en JS equivalen a las antiguas vistas y controladores. La **metadata** une ambos mundos y registra el componente para que interacciones con el resto del mundo Angular. \n\n>La comunicación de datos entre la plantilla y el componente se realiza siguiendo un remozado workflow de propiedades y eventos. El nuevo *data-binding* de Angular2 merece estudio en detalle pues su sintaxis ha cambiado para poder estar a la altura del rendimiento exigido. \n\n\n\n\n### Generación de módulos y componentes con angular-cli\n\nSobre la base de ese 'Hola Mundo' vamos construir una mini aplicación muy sencilla para guardar movimientos económicos. El *To Do List* de los ingresos y gastos. \n\nEmpezaré creando **otro módulo con su componente para ser integrado** en el componente raíz del módulo raíz. Por ahora será un componente de negocio vacío: el componente `movimientos`. Puedes escribir a mano cada nuevo módulo o componente, pero si usas [Angular CLI](https://cli.angular.io/) lo tendrás generado con un sólo comando:\n\n```bash \nng g m movimientos\n``` \n\nVerás que se ha creado una carpeta llamada `movimientos` con una estructura que pronto te será muy familiar. Para empezar un archivo para el nuevo módulo, el `movimientos-module.ts`. Después una serie de ficheros para crear su componente principal. Un fichero `movimientos-component.ts` para la clase controladora y el decorador con la *metadata*, y otro fichero `movimientos-component.html` para la plantilla.\n\nReproduzco ahora su contenido básico. Primero la plantilla HTML\n\n```html\n<p>\n  movimientos works!\n</p>\n```\nY ahora la definición del componente en *TypeScript*. El cual no sabe en qué módulo acabará.\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\n// decoración con metadata para el componente\n@Component({\n  selector: 'app-movimientos', // ojo al prefijo, por defecto app\n  templateUrl: './movimientos.component.html', // podrían ser inline\n  styleUrls: ['./movimientos.component.css'] // podrían ser inline\n})\nexport class MovimientosComponent implements OnInit {\n  constructor() { }\n  ngOnInit() {\n  }\n}\n```\n\nPara que este componente sea conocido ha de estar al menos declarado y exportado en algún módulo. En este caso aparece en el fichero `movimientos-module.ts`\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Importa un componente que declara y que luego exporta */\nimport { MovimientosComponent } from './movimientos.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],// dependencias de otros módulos\n  declarations: [\n    MovimientosComponent\n  ],// Componente que el módulo mismo declara\n  exports: [\n    MovimientosComponent\n  ] // exporta los componentes importables desde otros módulos\n})\nexport class MovimientosModule { }\n```\n\n### Consumo desde un componente padre\nEl componente `movimientos` está creado pero nadie lo usa. Para darle utilidad hay que consumirlo. Vamos tocar los ficheros 'app.module.ts' y 'app.component.html' Son siempre estos tres sencillos pasos:\n\n* 1- Importar el módulo que lo exporta\n```javascript\n// 1 importación del código del módulo funcional\nimport { MovimientosModule } from './movimientos/movimientos.module';\n```\n* 2- Registro en el array de importaciones del módulo raíz\n```javascript\n...\nimports:[..., MovimientosModule] // 2 registro del modulo importado con todo lo que exporta\n...\n```\n* 3- Uso del componente como un elemento html en la plantilla del padre\n```html\n<h1>\n  <!--enlace con propiedades del componente-->\n  {{title}}\n</h1>\n<!-- 3 los componentes personalizados se usan como elementos estándar en html-->\n<!--componente movimientos-->\n<app-movimientos></app-movimientos>\n```\n\n\nEsta manera de encapsular componentes unos dentro de otros permite crear **grandes aplicaciones de tamaño empresarial** sin sacrificar la limpieza del código. Cada componente debe diseñarse de forma que resuelva un problema de negocio concreto, por tanto manejable. Y si puede ser **reutilizable** mucho mejor.\n\nLa agrupación de componentes en módulos ayuda a mantener la aplicación organizada.","source":"_posts/Componentes-los-bloques-de-construccion-de-Angular2.md","raw":"---\ntitle: 'Componentes, los bloques de construcción de Angular2'\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: componentes-los-bloques-de-construccion-de-angular-2\nid: 26\nupdated: 2016/11/07 18:39:26\ndate: 2016/05/23 14:07:27\n---\n\n>Código asociado en GitHub: [angular2/2-modulos/](https://github.com/AcademiaBinaria/angular2/tree/master/2-modulos) \n\nLos componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora **el componente es el rey**.\n\nLas aplicaciones en Angular2 se desarrollan como **árboles de componentes**. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en **módulos** para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.\n\n* 1- Nivel **Raíz**:\nToda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo `App` o simplemente `App`. \n* 2- Nivel **Troncal**:\nGeneralmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón *Navegador-Contenedor*, con algún elemento auxiliar para ayudas, mensajes, menús complejos... \n* 3- Nivel de **Ramas**:\nEn este símil, las ramas equivalen a rutas o vistas de la aplicación. En un *SPA* cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor \n* 4- Nivel de **Hojas**:\nCada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas. \n\n![Árbol de componentes en una aplicación Angular 2](/images/ng2-Arbol-de-componentes.jpg)\n\n>Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.\n\n<!-- more -->\n\n## Módulos\n\nLos árboles de componentes pueden ocultarnos fácilmente el bosque de nuestra aplicación. **Los módulos son agrupaciones de componentes.** Nos ayudan a mantener un orden y a encapsular funcionalidad para crear aplicaciones desacopladas con bloques re-utilizables.\n\n> No confundir con los módulos de *JavaScript ES6* o de T*ypeScript*. En estos casos se les llama módulos a los ficheros de código que exportan funcionalidad. \n\nPodemos imaginar un módulo como una fábrica de funcionalidad.\n1. **Importa** componentes que otros módulos exportan.\n2. **Declara** los componentes que el mismo fabrica.  \n3. **Exporta** algunos de estos componentes, para que los consuman otros módulos.\n\n\n### Anatomía de un Componente\nEn el artículo de [bienvenida a Angular 2](http://academia-binaria.com/hola-mundo-en-angular-2/) teníamos una aplicación de un sólo módulo con un sólo componente. Y nos sirvió para ver su **estructura**: plantilla, decorador y clase.\n\n![Estructura interna de un componente Angular 2](/images/ng2Component--1-.jpg)\n\nLa **plantilla** en HTML y la **clase** en JS equivalen a las antiguas vistas y controladores. La **metadata** une ambos mundos y registra el componente para que interacciones con el resto del mundo Angular. \n\n>La comunicación de datos entre la plantilla y el componente se realiza siguiendo un remozado workflow de propiedades y eventos. El nuevo *data-binding* de Angular2 merece estudio en detalle pues su sintaxis ha cambiado para poder estar a la altura del rendimiento exigido. \n\n\n\n\n### Generación de módulos y componentes con angular-cli\n\nSobre la base de ese 'Hola Mundo' vamos construir una mini aplicación muy sencilla para guardar movimientos económicos. El *To Do List* de los ingresos y gastos. \n\nEmpezaré creando **otro módulo con su componente para ser integrado** en el componente raíz del módulo raíz. Por ahora será un componente de negocio vacío: el componente `movimientos`. Puedes escribir a mano cada nuevo módulo o componente, pero si usas [Angular CLI](https://cli.angular.io/) lo tendrás generado con un sólo comando:\n\n```bash \nng g m movimientos\n``` \n\nVerás que se ha creado una carpeta llamada `movimientos` con una estructura que pronto te será muy familiar. Para empezar un archivo para el nuevo módulo, el `movimientos-module.ts`. Después una serie de ficheros para crear su componente principal. Un fichero `movimientos-component.ts` para la clase controladora y el decorador con la *metadata*, y otro fichero `movimientos-component.html` para la plantilla.\n\nReproduzco ahora su contenido básico. Primero la plantilla HTML\n\n```html\n<p>\n  movimientos works!\n</p>\n```\nY ahora la definición del componente en *TypeScript*. El cual no sabe en qué módulo acabará.\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\n// decoración con metadata para el componente\n@Component({\n  selector: 'app-movimientos', // ojo al prefijo, por defecto app\n  templateUrl: './movimientos.component.html', // podrían ser inline\n  styleUrls: ['./movimientos.component.css'] // podrían ser inline\n})\nexport class MovimientosComponent implements OnInit {\n  constructor() { }\n  ngOnInit() {\n  }\n}\n```\n\nPara que este componente sea conocido ha de estar al menos declarado y exportado en algún módulo. En este caso aparece en el fichero `movimientos-module.ts`\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Importa un componente que declara y que luego exporta */\nimport { MovimientosComponent } from './movimientos.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],// dependencias de otros módulos\n  declarations: [\n    MovimientosComponent\n  ],// Componente que el módulo mismo declara\n  exports: [\n    MovimientosComponent\n  ] // exporta los componentes importables desde otros módulos\n})\nexport class MovimientosModule { }\n```\n\n### Consumo desde un componente padre\nEl componente `movimientos` está creado pero nadie lo usa. Para darle utilidad hay que consumirlo. Vamos tocar los ficheros 'app.module.ts' y 'app.component.html' Son siempre estos tres sencillos pasos:\n\n* 1- Importar el módulo que lo exporta\n```javascript\n// 1 importación del código del módulo funcional\nimport { MovimientosModule } from './movimientos/movimientos.module';\n```\n* 2- Registro en el array de importaciones del módulo raíz\n```javascript\n...\nimports:[..., MovimientosModule] // 2 registro del modulo importado con todo lo que exporta\n...\n```\n* 3- Uso del componente como un elemento html en la plantilla del padre\n```html\n<h1>\n  <!--enlace con propiedades del componente-->\n  {{title}}\n</h1>\n<!-- 3 los componentes personalizados se usan como elementos estándar en html-->\n<!--componente movimientos-->\n<app-movimientos></app-movimientos>\n```\n\n\nEsta manera de encapsular componentes unos dentro de otros permite crear **grandes aplicaciones de tamaño empresarial** sin sacrificar la limpieza del código. Cada componente debe diseñarse de forma que resuelva un problema de negocio concreto, por tanto manejable. Y si puede ser **reutilizable** mucho mejor.\n\nLa agrupación de componentes en módulos ayuda a mantener la aplicación organizada.","slug":"componentes-los-bloques-de-construccion-de-angular-2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gizz000fc7js7qy5siwg","content":"<blockquote>\n<p>Código asociado en GitHub: <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/2-modulos\" target=\"_blank\" rel=\"external\">angular2/2-modulos/</a> </p>\n</blockquote>\n<p>Los componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora <strong>el componente es el rey</strong>.</p>\n<p>Las aplicaciones en Angular2 se desarrollan como <strong>árboles de componentes</strong>. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en <strong>módulos</strong> para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.</p>\n<ul>\n<li>1- Nivel <strong>Raíz</strong>:<br>Toda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo <code>App</code> o simplemente <code>App</code>. </li>\n<li>2- Nivel <strong>Troncal</strong>:<br>Generalmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón <em>Navegador-Contenedor</em>, con algún elemento auxiliar para ayudas, mensajes, menús complejos… </li>\n<li>3- Nivel de <strong>Ramas</strong>:<br>En este símil, las ramas equivalen a rutas o vistas de la aplicación. En un <em>SPA</em> cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor </li>\n<li>4- Nivel de <strong>Hojas</strong>:<br>Cada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas. </li>\n</ul>\n<p><img src=\"/images/ng2-Arbol-de-componentes.jpg\" alt=\"Árbol de componentes en una aplicación Angular 2\"></p>\n<blockquote>\n<p>Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Modulos\"><a href=\"#Modulos\" class=\"headerlink\" title=\"Módulos\"></a>Módulos</h2><p>Los árboles de componentes pueden ocultarnos fácilmente el bosque de nuestra aplicación. <strong>Los módulos son agrupaciones de componentes.</strong> Nos ayudan a mantener un orden y a encapsular funcionalidad para crear aplicaciones desacopladas con bloques re-utilizables.</p>\n<blockquote>\n<p>No confundir con los módulos de <em>JavaScript ES6</em> o de T<em>ypeScript</em>. En estos casos se les llama módulos a los ficheros de código que exportan funcionalidad. </p>\n</blockquote>\n<p>Podemos imaginar un módulo como una fábrica de funcionalidad.</p>\n<ol>\n<li><strong>Importa</strong> componentes que otros módulos exportan.</li>\n<li><strong>Declara</strong> los componentes que el mismo fabrica.  </li>\n<li><strong>Exporta</strong> algunos de estos componentes, para que los consuman otros módulos.</li>\n</ol>\n<h3 id=\"Anatomia-de-un-Componente\"><a href=\"#Anatomia-de-un-Componente\" class=\"headerlink\" title=\"Anatomía de un Componente\"></a>Anatomía de un Componente</h3><p>En el artículo de <a href=\"http://academia-binaria.com/hola-mundo-en-angular-2/\">bienvenida a Angular 2</a> teníamos una aplicación de un sólo módulo con un sólo componente. Y nos sirvió para ver su <strong>estructura</strong>: plantilla, decorador y clase.</p>\n<p><img src=\"/images/ng2Component--1-.jpg\" alt=\"Estructura interna de un componente Angular 2\"></p>\n<p>La <strong>plantilla</strong> en HTML y la <strong>clase</strong> en JS equivalen a las antiguas vistas y controladores. La <strong>metadata</strong> une ambos mundos y registra el componente para que interacciones con el resto del mundo Angular. </p>\n<blockquote>\n<p>La comunicación de datos entre la plantilla y el componente se realiza siguiendo un remozado workflow de propiedades y eventos. El nuevo <em>data-binding</em> de Angular2 merece estudio en detalle pues su sintaxis ha cambiado para poder estar a la altura del rendimiento exigido. </p>\n</blockquote>\n<h3 id=\"Generacion-de-modulos-y-componentes-con-angular-cli\"><a href=\"#Generacion-de-modulos-y-componentes-con-angular-cli\" class=\"headerlink\" title=\"Generación de módulos y componentes con angular-cli\"></a>Generación de módulos y componentes con angular-cli</h3><p>Sobre la base de ese ‘Hola Mundo’ vamos construir una mini aplicación muy sencilla para guardar movimientos económicos. El <em>To Do List</em> de los ingresos y gastos. </p>\n<p>Empezaré creando <strong>otro módulo con su componente para ser integrado</strong> en el componente raíz del módulo raíz. Por ahora será un componente de negocio vacío: el componente <code>movimientos</code>. Puedes escribir a mano cada nuevo módulo o componente, pero si usas <a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a> lo tendrás generado con un sólo comando:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g m movimientos</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">Verás que se ha creado una carpeta llamada `movimientos` con una estructura que pronto te será muy familiar. Para empezar un archivo para el nuevo módulo, el `movimientos-module.ts`. Después una serie de ficheros para crear su componente principal. Un fichero `movimientos-component.ts` para la clase controladora y el decorador con la *metadata*, y otro fichero `movimientos-component.html` para la plantilla.</div><div class=\"line\"></div><div class=\"line\">Reproduzco ahora su contenido básico. Primero la plantilla HTML</div><div class=\"line\"></div><div class=\"line\">```html</div><div class=\"line\">&lt;p&gt;</div><div class=\"line\">  movimientos works!</div><div class=\"line\">&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>Y ahora la definición del componente en <em>TypeScript</em>. El cual no sabe en qué módulo acabará.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// decoración con metadata para el componente</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-movimientos'</span>, <span class=\"comment\">// ojo al prefijo, por defecto app</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./movimientos.component.html'</span>, <span class=\"comment\">// podrían ser inline</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./movimientos.component.css'</span>] <span class=\"comment\">// podrían ser inline</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientosComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123; &#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Para que este componente sea conocido ha de estar al menos declarado y exportado en algún módulo. En este caso aparece en el fichero <code>movimientos-module.ts</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Importa un componente que declara y que luego exporta */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos.component'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule</div><div class=\"line\">  ],<span class=\"comment\">// dependencias de otros módulos</span></div><div class=\"line\">  declarations: [</div><div class=\"line\">    MovimientosComponent</div><div class=\"line\">  ],<span class=\"comment\">// Componente que el módulo mismo declara</span></div><div class=\"line\">  exports: [</div><div class=\"line\">    MovimientosComponent</div><div class=\"line\">  ] <span class=\"comment\">// exporta los componentes importables desde otros módulos</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientosModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Consumo-desde-un-componente-padre\"><a href=\"#Consumo-desde-un-componente-padre\" class=\"headerlink\" title=\"Consumo desde un componente padre\"></a>Consumo desde un componente padre</h3><p>El componente <code>movimientos</code> está creado pero nadie lo usa. Para darle utilidad hay que consumirlo. Vamos tocar los ficheros ‘app.module.ts’ y ‘app.component.html’ Son siempre estos tres sencillos pasos:</p>\n<ul>\n<li><p>1- Importar el módulo que lo exporta</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1 importación del código del módulo funcional</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos/movimientos.module'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>2- Registro en el array de importaciones del módulo raíz</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">imports:[..., MovimientosModule] <span class=\"comment\">// 2 registro del modulo importado con todo lo que exporta</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>3- Uso del componente como un elemento html en la plantilla del padre</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--enlace con propiedades del componente--&gt;</span></div><div class=\"line\">  &#123;&#123;title&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 3 los componentes personalizados se usan como elementos estándar en html--&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--componente movimientos--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-movimientos</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-movimientos</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Esta manera de encapsular componentes unos dentro de otros permite crear <strong>grandes aplicaciones de tamaño empresarial</strong> sin sacrificar la limpieza del código. Cada componente debe diseñarse de forma que resuelva un problema de negocio concreto, por tanto manejable. Y si puede ser <strong>reutilizable</strong> mucho mejor.</p>\n<p>La agrupación de componentes en módulos ayuda a mantener la aplicación organizada.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Código asociado en GitHub: <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/2-modulos\" target=\"_blank\" rel=\"external\">angular2/2-modulos/</a> </p>\n</blockquote>\n<p>Los componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora <strong>el componente es el rey</strong>.</p>\n<p>Las aplicaciones en Angular2 se desarrollan como <strong>árboles de componentes</strong>. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en <strong>módulos</strong> para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.</p>\n<ul>\n<li>1- Nivel <strong>Raíz</strong>:<br>Toda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo <code>App</code> o simplemente <code>App</code>. </li>\n<li>2- Nivel <strong>Troncal</strong>:<br>Generalmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón <em>Navegador-Contenedor</em>, con algún elemento auxiliar para ayudas, mensajes, menús complejos… </li>\n<li>3- Nivel de <strong>Ramas</strong>:<br>En este símil, las ramas equivalen a rutas o vistas de la aplicación. En un <em>SPA</em> cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor </li>\n<li>4- Nivel de <strong>Hojas</strong>:<br>Cada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas. </li>\n</ul>\n<p><img src=\"/images/ng2-Arbol-de-componentes.jpg\" alt=\"Árbol de componentes en una aplicación Angular 2\"></p>\n<blockquote>\n<p>Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.</p>\n</blockquote>","more":"<h2 id=\"Modulos\"><a href=\"#Modulos\" class=\"headerlink\" title=\"Módulos\"></a>Módulos</h2><p>Los árboles de componentes pueden ocultarnos fácilmente el bosque de nuestra aplicación. <strong>Los módulos son agrupaciones de componentes.</strong> Nos ayudan a mantener un orden y a encapsular funcionalidad para crear aplicaciones desacopladas con bloques re-utilizables.</p>\n<blockquote>\n<p>No confundir con los módulos de <em>JavaScript ES6</em> o de T<em>ypeScript</em>. En estos casos se les llama módulos a los ficheros de código que exportan funcionalidad. </p>\n</blockquote>\n<p>Podemos imaginar un módulo como una fábrica de funcionalidad.</p>\n<ol>\n<li><strong>Importa</strong> componentes que otros módulos exportan.</li>\n<li><strong>Declara</strong> los componentes que el mismo fabrica.  </li>\n<li><strong>Exporta</strong> algunos de estos componentes, para que los consuman otros módulos.</li>\n</ol>\n<h3 id=\"Anatomia-de-un-Componente\"><a href=\"#Anatomia-de-un-Componente\" class=\"headerlink\" title=\"Anatomía de un Componente\"></a>Anatomía de un Componente</h3><p>En el artículo de <a href=\"http://academia-binaria.com/hola-mundo-en-angular-2/\">bienvenida a Angular 2</a> teníamos una aplicación de un sólo módulo con un sólo componente. Y nos sirvió para ver su <strong>estructura</strong>: plantilla, decorador y clase.</p>\n<p><img src=\"/images/ng2Component--1-.jpg\" alt=\"Estructura interna de un componente Angular 2\"></p>\n<p>La <strong>plantilla</strong> en HTML y la <strong>clase</strong> en JS equivalen a las antiguas vistas y controladores. La <strong>metadata</strong> une ambos mundos y registra el componente para que interacciones con el resto del mundo Angular. </p>\n<blockquote>\n<p>La comunicación de datos entre la plantilla y el componente se realiza siguiendo un remozado workflow de propiedades y eventos. El nuevo <em>data-binding</em> de Angular2 merece estudio en detalle pues su sintaxis ha cambiado para poder estar a la altura del rendimiento exigido. </p>\n</blockquote>\n<h3 id=\"Generacion-de-modulos-y-componentes-con-angular-cli\"><a href=\"#Generacion-de-modulos-y-componentes-con-angular-cli\" class=\"headerlink\" title=\"Generación de módulos y componentes con angular-cli\"></a>Generación de módulos y componentes con angular-cli</h3><p>Sobre la base de ese ‘Hola Mundo’ vamos construir una mini aplicación muy sencilla para guardar movimientos económicos. El <em>To Do List</em> de los ingresos y gastos. </p>\n<p>Empezaré creando <strong>otro módulo con su componente para ser integrado</strong> en el componente raíz del módulo raíz. Por ahora será un componente de negocio vacío: el componente <code>movimientos</code>. Puedes escribir a mano cada nuevo módulo o componente, pero si usas <a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a> lo tendrás generado con un sólo comando:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g m movimientos</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">Verás que se ha creado una carpeta llamada `movimientos` con una estructura que pronto te será muy familiar. Para empezar un archivo para el nuevo módulo, el `movimientos-module.ts`. Después una serie de ficheros para crear su componente principal. Un fichero `movimientos-component.ts` para la clase controladora y el decorador con la *metadata*, y otro fichero `movimientos-component.html` para la plantilla.</div><div class=\"line\"></div><div class=\"line\">Reproduzco ahora su contenido básico. Primero la plantilla HTML</div><div class=\"line\"></div><div class=\"line\">```html</div><div class=\"line\">&lt;p&gt;</div><div class=\"line\">  movimientos works!</div><div class=\"line\">&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>Y ahora la definición del componente en <em>TypeScript</em>. El cual no sabe en qué módulo acabará.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// decoración con metadata para el componente</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-movimientos'</span>, <span class=\"comment\">// ojo al prefijo, por defecto app</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./movimientos.component.html'</span>, <span class=\"comment\">// podrían ser inline</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./movimientos.component.css'</span>] <span class=\"comment\">// podrían ser inline</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientosComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123; &#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Para que este componente sea conocido ha de estar al menos declarado y exportado en algún módulo. En este caso aparece en el fichero <code>movimientos-module.ts</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Importa un componente que declara y que luego exporta */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos.component'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule</div><div class=\"line\">  ],<span class=\"comment\">// dependencias de otros módulos</span></div><div class=\"line\">  declarations: [</div><div class=\"line\">    MovimientosComponent</div><div class=\"line\">  ],<span class=\"comment\">// Componente que el módulo mismo declara</span></div><div class=\"line\">  exports: [</div><div class=\"line\">    MovimientosComponent</div><div class=\"line\">  ] <span class=\"comment\">// exporta los componentes importables desde otros módulos</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientosModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Consumo-desde-un-componente-padre\"><a href=\"#Consumo-desde-un-componente-padre\" class=\"headerlink\" title=\"Consumo desde un componente padre\"></a>Consumo desde un componente padre</h3><p>El componente <code>movimientos</code> está creado pero nadie lo usa. Para darle utilidad hay que consumirlo. Vamos tocar los ficheros ‘app.module.ts’ y ‘app.component.html’ Son siempre estos tres sencillos pasos:</p>\n<ul>\n<li><p>1- Importar el módulo que lo exporta</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1 importación del código del módulo funcional</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos/movimientos.module'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>2- Registro en el array de importaciones del módulo raíz</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">imports:[..., MovimientosModule] <span class=\"comment\">// 2 registro del modulo importado con todo lo que exporta</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>3- Uso del componente como un elemento html en la plantilla del padre</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--enlace con propiedades del componente--&gt;</span></div><div class=\"line\">  &#123;&#123;title&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 3 los componentes personalizados se usan como elementos estándar en html--&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--componente movimientos--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-movimientos</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-movimientos</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Esta manera de encapsular componentes unos dentro de otros permite crear <strong>grandes aplicaciones de tamaño empresarial</strong> sin sacrificar la limpieza del código. Cada componente debe diseñarse de forma que resuelva un problema de negocio concreto, por tanto manejable. Y si puede ser <strong>reutilizable</strong> mucho mejor.</p>\n<p>La agrupación de componentes en módulos ayuda a mantener la aplicación organizada.</p>"},{"title":"Comunicaciones http observables con Angular2","id":"17","updated":"2017-02-16T16:44:21.000Z","date":"2016-06-16T09:47:28.000Z","thumbnail":"/css/images/angular.jpg","_content":"\nEn AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame **plantillas estáticas y datos dinámicos**. Las comunicaciones *http* son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.\n\n<!-- more -->\n\n### La librería http y otras...\nComo cabe esperar Angular 2 dispone de su propio módulo de comunicaciones. En la librería `@angular/http` encontramos el nuevo servicio `http` que es el cliente usado para enviar y recibir datos.\n\nLo realmente novedoso viene de parte del proyecto [Reactive Extensions o RxJS](http://reactivex.io/rxjs/). En su librería `rxjs/Observable` exporta la clase `Observable`. Esta clase implementa el **patrón observador aplicado a streams** de datos. El equipo de Angular ha decidido adoptarlo para procesar los *streams* de entrada y salida de datos *http*.\n\nUn servicio típico que necesite comunicaciones con el servidor importará al menos estos objetos.\n\n```typescript\n// Importar objetos de la librería http\nimport { Http, Response, RequestOptions, Headers } from '@angular/http';\n// Importar la clase Observable desde la librería rxjs\nimport { Observable }     from 'rxjs/Observable';\n```\n\nLos servicios importados han de ser **registrados como *providers* para poder ser inyectados como dependencias** antes de ser consumidos. Ya que se trata de servicios de amplio uso en cualquier aplicación, se recomienda registrarlos en módulos de alto nivel. De esa forma pueden ser reutilizados como *singletons*.\n\n```typescript\n// importar la constante con los proveedores de http\nimport { HttpModule, Http } from '@angular/http';\n\n@NgModule({\n  declarations: [ ],\n  imports: [\n    HttpModule, // El módulo con todo lo necesario\n  ],\n  providers:[\n    Http, // El servicio proveedor\n  ]\n});\n```\n\nA partir de ese momento cualquier componente o servicio puede reclamar su inyección en el constructor, y lo podrá usar en sus propios métodos.\n```typescript\n  /**\n  * Constructor que reclama dependencias inyectables\n  * Http se encuentra por haberse registrado en este módulo o en uno superior\n  **/\n  constructor(private http: Http) {\n     // en el constructor no debe contener lógica extra\n     // su función es únicamente recibir las dependencias\n  }\n```\n\n### Observables en lugar de promesas\nLa naturaleza asíncrona de las comunicaciones entre maquinas se implementó mediante *callbacks* en JavaScript. Esta forma de programar degenera en código difícil de mantener. Con el tiempo el **patrón promesa** se impuso, y en AngularJS 1.x es la manera recomendada de programar.\n\nPero las promesas también tiene sus limitaciones, y ahí aparecen los **observables**. Este patrón requerirá un artículo para el sólo, pero como adelanto se resume en lo siguiente:\n> Tratar todo tipo de información como un stream observable de entrada y de salida, al cual se le pueden agregar operaciones que procesan los flujos de datos.\n\nEsto encaja muy bien con las comunicaciones *http* asíncronas y es la razón de su adopción en Angular 2. Un método de servicio par **leer datos REST** se parecerá a este *snippet*:\n\n```typescript\n// las llamadas devuelven observables\nleerDatos(): Observable<Response> {\n  // Se declara cómo va a ser la llamada \n  // ocultando los pormenores a los consumidores   \n  return this.http\n    .get(`${this.urlBase}/recurso`);\n  // En este momento aún no se efectuó la llamada\n}\n```\n\nPara enviar información via *post* o *put* usaremos una estrategia similar, pero con unos requisitos específicos. En Angular 2 se requiere una configuración previa de las llamadas de escritura. Es engorroso pero fácilmente automatizable. Una típica operación de **escritura REST** sería algo así:\n\n```typescript\n  escribirDatos(unDato): Observable<Response> {\n    // Los envíos de información deben configurarse a mano\n    // esto es fácilmente generalizable y reutilizable\n    let body = JSON.stringify(unDato);\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n    // declarar la llamada y retornar el observable\n    // las variables de configuración y los datos, van como parámetros\n    if (unDato._id) {\n      return this.http\n        .put(`${this.urlBase}/recurso/${unDato._id}`, body, options);\n    } else {\n      return this.http\n        .post(`${this.urlBase}/recurso`, body, options);\n    }\n  }\n```\n\n\nPor supuesto esto es lo que se programa a bajo nivel, en los **servicios de comunicaciones**. En Angular2 se mantiene la recomendación de bajar a servicios la responsabilidad de las comunicaciones al tiempo que dejamos los componentes lo más ligeros posible. \n\nPor encima de los servicios de comunicaciones habrá otros servicios de lógica o directamente componentes. En cualquier caso, los consumidores llamarán a métodos que siempre les devolverán objetos observables. Las clases de alto nivel se **suscribirán a esos observables** y procesarán la respuesta recibida... cuando esta esté disponible.\n\n```typescript\n  // La carga de datos se hace al iniciarse el componente\n  // este es el lugar donde programar lógica de inicio\n  // nunca en el constructor\n  ngOnInit() {\n    // en el momento de la suscripción es cuando se dispara la llamada\n    this.datosService\n      .leerDatos()\n      .subscribe(res => {\n        this.datos = res.json();\n      });\n    // Sería similar en procesos de escritura\n  }\n```\n> La clase `http` no realiza la llamada hasta que algún consumidor se suscriba a la respuesta. Mientras tanto queda como una definición congelada.\n\nEl método `.subscribe()` recibe como argumento un puntero a la respuesta *http*. Los datos se encuentran en formato *JSON* y hay que reclamarlos mediante el método `.json()`\n\n### Extensiones en lugar de interceptores\nUna de las características destacables de los servicios `$http` de AngularJS 1.x era la posibilidad de usar *interceptores*. Estos eran **funciones que se incrustaban durante el envío o recepción** de las comunicaciones.\n\nUn uso habitual era emplearlos para agregar **cabeceras de seguridad o controlar errores** de comunicación de manera centralizada. Ahora la forma recomendable de hacer eso mismo en Angular2 es mejorar el servicio http extendiéndolo. El servicio derivado resultante implementará los interceptores en funciones llamadas durante la comunicación.\n\nEsta es una posible implementación con funcionalidad suficiente para facilitar los envíos, detectar errores y enviar cabeceras de seguridad.\n```typescript\n@Injectable()\n/**\n * Extensión personalizada de la clase HTTP\n * Permite la configuración de todas las peticiones\n * Captura los envíos y respuestas\n * */\nexport class HttpService extends Http {\n  /** Las direcciones base deberían venir de la configuración del environment*/\n  public apiProxyUrl = 'http://localhost:4030/api/';\n  private authorization = '';\n\n  constructor(\n    backend: XHRBackend,\n    defaultOptions: RequestOptions,\n    private router: Router,\n    private userStore: SessionStoreService\n  ) {\n    super(backend, defaultOptions);\n    this.subscribeToToken();\n  }\n\n  /**\n   * Reescribe el método de la clase base, ejecutando acciones para cada petición\n   * La peticiíón en curso puede llegar como una ruta o una clase request\n   * Si viene sólo la cadena, debería traer las opciones aparte\n   * */\n  request(request: string | Request, options: RequestOptionsArgs = { headers: new Headers() }): Observable<Response> {\n    this.configureRequest(request, options);\n    return this.interceptResponse(request, options);\n  }\n\n  private subscribeToToken() {\n    // suponemos un servicio que nos avisa de la recepción de tokens\n    this.userStore\n      .getDataObservable()\n      .subscribe((data: Session) => this.authorization = 'Bearer ' + data.token);\n  }\n\n  private configureRequest(request: string | Request, options: RequestOptionsArgs) {\n    // Adapta la ruta y asigna cabeceras\n    if (typeof request === 'string') {\n      request = this.getProxyUrl(request);\n      this.setHeaders(options);\n    } else {\n      request['url'] = this.getProxyUrl(request['url']);\n      this.setHeaders(request);\n    }\n  }\n\n  private interceptResponse(request: string | Request, options: RequestOptionsArgs) : Observable<Response> {\n    const observableRequest = super\n      .request(request, options)\n      .catch(this.onCatch())\n      .finally(this.onFinally());\n    return observableRequest;\n  }\n\n  /**\n   * Transforma la url para llamar a trave´s de un proxy \n   * Útil en caso de problemas con el CORS\n   */\n  private getProxyUrl(currentUrl) {\n    if (!currentUrl.includes('/assets/')) {\n      return this.apiProxyUrl + currentUrl;\n    } else {\n      return currentUrl;\n    }\n  }\n\n  /**\n   * Interceptor para componer las cabeceras en cada petición\n   * */\n  private setHeaders(objectToSetHeadersTo: Request | RequestOptionsArgs) {\n    const headers = objectToSetHeadersTo.headers;\n    headers.set('Content-Type', 'application/json');\n    headers.set('Authorization', this.authorization);\n  }\n\n  /**\n   * Interceptor para captura genérica de errores http\n   * */\n  private onCatch() {\n    return (res: Response) => {\n      // Security errors\n      if (res.status === 401 || res.status === 403) {\n        // redirigir al usuario para pedir credenciales\n        this.router.navigate(['user/login']);\n      }\n      // To Do: Gestión común de otros errores...\n      return Observable.throw(res);\n    };\n  }\n\n  private onFinally() {\n    return () => console.log('Fin');\n  }\n\n}\n```\n\n\nPodemos usarlo de manera transparente en el resto de la aplicación. Sólo se necesita ajustar el registro de proveedores para dirigir al inyector de dependencias hacia esta nueva clase.\n```typescript\n   providers: [\n    {\n      provide: Http, // reemplaza el servicio del framework\n      useClass: HttpService // con la clase personalizada que lo extiende\n    }\n  ]\n```\n\n>Este es uno de los usos más potentes de la inversión de control en Angular. Es el programador integrador el que decide el servicio a usar. El programador funcional declara la dependencia en los constructores de sus componentes y servicios, pero no decide la instancia concreta que recibirá.\n\n\nAngular 2 ha trastocado todo lo que hacíamos en las versiones 1.x, pero sólo en la forma. El fondo sigue siendo el mismo: **el navegador envía y recibe datos en formato JSON que mezcla con plantillas estáticas** para  crear HTML en la máquina local y relajar al servidor. \n\n\nPor cierto, por ahora ni rastro del viejo `$resource`. No tardará en aparecer una versión basada en *streams observables*. Sígueme en [mi cuenta de twitter](https://twitter.com/albertobasalo) o suscríbete a la [revista mensual de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339) y en cuanto me entere serás el primero en ser informado.\n\n*Keep coding, keep learning.*","source":"_posts/Comunicaciones-http-observables-con-Angular2.md","raw":"---\ntitle: Comunicaciones http observables con Angular2\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: comunicaciones-http-observables-con-angular2\nid: 17\nupdated: '2017-02-16 17:44:21'\ndate: 2016-06-16 11:47:28\nthumbnail: /css/images/angular.jpg\n---\n\nEn AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame **plantillas estáticas y datos dinámicos**. Las comunicaciones *http* son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.\n\n<!-- more -->\n\n### La librería http y otras...\nComo cabe esperar Angular 2 dispone de su propio módulo de comunicaciones. En la librería `@angular/http` encontramos el nuevo servicio `http` que es el cliente usado para enviar y recibir datos.\n\nLo realmente novedoso viene de parte del proyecto [Reactive Extensions o RxJS](http://reactivex.io/rxjs/). En su librería `rxjs/Observable` exporta la clase `Observable`. Esta clase implementa el **patrón observador aplicado a streams** de datos. El equipo de Angular ha decidido adoptarlo para procesar los *streams* de entrada y salida de datos *http*.\n\nUn servicio típico que necesite comunicaciones con el servidor importará al menos estos objetos.\n\n```typescript\n// Importar objetos de la librería http\nimport { Http, Response, RequestOptions, Headers } from '@angular/http';\n// Importar la clase Observable desde la librería rxjs\nimport { Observable }     from 'rxjs/Observable';\n```\n\nLos servicios importados han de ser **registrados como *providers* para poder ser inyectados como dependencias** antes de ser consumidos. Ya que se trata de servicios de amplio uso en cualquier aplicación, se recomienda registrarlos en módulos de alto nivel. De esa forma pueden ser reutilizados como *singletons*.\n\n```typescript\n// importar la constante con los proveedores de http\nimport { HttpModule, Http } from '@angular/http';\n\n@NgModule({\n  declarations: [ ],\n  imports: [\n    HttpModule, // El módulo con todo lo necesario\n  ],\n  providers:[\n    Http, // El servicio proveedor\n  ]\n});\n```\n\nA partir de ese momento cualquier componente o servicio puede reclamar su inyección en el constructor, y lo podrá usar en sus propios métodos.\n```typescript\n  /**\n  * Constructor que reclama dependencias inyectables\n  * Http se encuentra por haberse registrado en este módulo o en uno superior\n  **/\n  constructor(private http: Http) {\n     // en el constructor no debe contener lógica extra\n     // su función es únicamente recibir las dependencias\n  }\n```\n\n### Observables en lugar de promesas\nLa naturaleza asíncrona de las comunicaciones entre maquinas se implementó mediante *callbacks* en JavaScript. Esta forma de programar degenera en código difícil de mantener. Con el tiempo el **patrón promesa** se impuso, y en AngularJS 1.x es la manera recomendada de programar.\n\nPero las promesas también tiene sus limitaciones, y ahí aparecen los **observables**. Este patrón requerirá un artículo para el sólo, pero como adelanto se resume en lo siguiente:\n> Tratar todo tipo de información como un stream observable de entrada y de salida, al cual se le pueden agregar operaciones que procesan los flujos de datos.\n\nEsto encaja muy bien con las comunicaciones *http* asíncronas y es la razón de su adopción en Angular 2. Un método de servicio par **leer datos REST** se parecerá a este *snippet*:\n\n```typescript\n// las llamadas devuelven observables\nleerDatos(): Observable<Response> {\n  // Se declara cómo va a ser la llamada \n  // ocultando los pormenores a los consumidores   \n  return this.http\n    .get(`${this.urlBase}/recurso`);\n  // En este momento aún no se efectuó la llamada\n}\n```\n\nPara enviar información via *post* o *put* usaremos una estrategia similar, pero con unos requisitos específicos. En Angular 2 se requiere una configuración previa de las llamadas de escritura. Es engorroso pero fácilmente automatizable. Una típica operación de **escritura REST** sería algo así:\n\n```typescript\n  escribirDatos(unDato): Observable<Response> {\n    // Los envíos de información deben configurarse a mano\n    // esto es fácilmente generalizable y reutilizable\n    let body = JSON.stringify(unDato);\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n    // declarar la llamada y retornar el observable\n    // las variables de configuración y los datos, van como parámetros\n    if (unDato._id) {\n      return this.http\n        .put(`${this.urlBase}/recurso/${unDato._id}`, body, options);\n    } else {\n      return this.http\n        .post(`${this.urlBase}/recurso`, body, options);\n    }\n  }\n```\n\n\nPor supuesto esto es lo que se programa a bajo nivel, en los **servicios de comunicaciones**. En Angular2 se mantiene la recomendación de bajar a servicios la responsabilidad de las comunicaciones al tiempo que dejamos los componentes lo más ligeros posible. \n\nPor encima de los servicios de comunicaciones habrá otros servicios de lógica o directamente componentes. En cualquier caso, los consumidores llamarán a métodos que siempre les devolverán objetos observables. Las clases de alto nivel se **suscribirán a esos observables** y procesarán la respuesta recibida... cuando esta esté disponible.\n\n```typescript\n  // La carga de datos se hace al iniciarse el componente\n  // este es el lugar donde programar lógica de inicio\n  // nunca en el constructor\n  ngOnInit() {\n    // en el momento de la suscripción es cuando se dispara la llamada\n    this.datosService\n      .leerDatos()\n      .subscribe(res => {\n        this.datos = res.json();\n      });\n    // Sería similar en procesos de escritura\n  }\n```\n> La clase `http` no realiza la llamada hasta que algún consumidor se suscriba a la respuesta. Mientras tanto queda como una definición congelada.\n\nEl método `.subscribe()` recibe como argumento un puntero a la respuesta *http*. Los datos se encuentran en formato *JSON* y hay que reclamarlos mediante el método `.json()`\n\n### Extensiones en lugar de interceptores\nUna de las características destacables de los servicios `$http` de AngularJS 1.x era la posibilidad de usar *interceptores*. Estos eran **funciones que se incrustaban durante el envío o recepción** de las comunicaciones.\n\nUn uso habitual era emplearlos para agregar **cabeceras de seguridad o controlar errores** de comunicación de manera centralizada. Ahora la forma recomendable de hacer eso mismo en Angular2 es mejorar el servicio http extendiéndolo. El servicio derivado resultante implementará los interceptores en funciones llamadas durante la comunicación.\n\nEsta es una posible implementación con funcionalidad suficiente para facilitar los envíos, detectar errores y enviar cabeceras de seguridad.\n```typescript\n@Injectable()\n/**\n * Extensión personalizada de la clase HTTP\n * Permite la configuración de todas las peticiones\n * Captura los envíos y respuestas\n * */\nexport class HttpService extends Http {\n  /** Las direcciones base deberían venir de la configuración del environment*/\n  public apiProxyUrl = 'http://localhost:4030/api/';\n  private authorization = '';\n\n  constructor(\n    backend: XHRBackend,\n    defaultOptions: RequestOptions,\n    private router: Router,\n    private userStore: SessionStoreService\n  ) {\n    super(backend, defaultOptions);\n    this.subscribeToToken();\n  }\n\n  /**\n   * Reescribe el método de la clase base, ejecutando acciones para cada petición\n   * La peticiíón en curso puede llegar como una ruta o una clase request\n   * Si viene sólo la cadena, debería traer las opciones aparte\n   * */\n  request(request: string | Request, options: RequestOptionsArgs = { headers: new Headers() }): Observable<Response> {\n    this.configureRequest(request, options);\n    return this.interceptResponse(request, options);\n  }\n\n  private subscribeToToken() {\n    // suponemos un servicio que nos avisa de la recepción de tokens\n    this.userStore\n      .getDataObservable()\n      .subscribe((data: Session) => this.authorization = 'Bearer ' + data.token);\n  }\n\n  private configureRequest(request: string | Request, options: RequestOptionsArgs) {\n    // Adapta la ruta y asigna cabeceras\n    if (typeof request === 'string') {\n      request = this.getProxyUrl(request);\n      this.setHeaders(options);\n    } else {\n      request['url'] = this.getProxyUrl(request['url']);\n      this.setHeaders(request);\n    }\n  }\n\n  private interceptResponse(request: string | Request, options: RequestOptionsArgs) : Observable<Response> {\n    const observableRequest = super\n      .request(request, options)\n      .catch(this.onCatch())\n      .finally(this.onFinally());\n    return observableRequest;\n  }\n\n  /**\n   * Transforma la url para llamar a trave´s de un proxy \n   * Útil en caso de problemas con el CORS\n   */\n  private getProxyUrl(currentUrl) {\n    if (!currentUrl.includes('/assets/')) {\n      return this.apiProxyUrl + currentUrl;\n    } else {\n      return currentUrl;\n    }\n  }\n\n  /**\n   * Interceptor para componer las cabeceras en cada petición\n   * */\n  private setHeaders(objectToSetHeadersTo: Request | RequestOptionsArgs) {\n    const headers = objectToSetHeadersTo.headers;\n    headers.set('Content-Type', 'application/json');\n    headers.set('Authorization', this.authorization);\n  }\n\n  /**\n   * Interceptor para captura genérica de errores http\n   * */\n  private onCatch() {\n    return (res: Response) => {\n      // Security errors\n      if (res.status === 401 || res.status === 403) {\n        // redirigir al usuario para pedir credenciales\n        this.router.navigate(['user/login']);\n      }\n      // To Do: Gestión común de otros errores...\n      return Observable.throw(res);\n    };\n  }\n\n  private onFinally() {\n    return () => console.log('Fin');\n  }\n\n}\n```\n\n\nPodemos usarlo de manera transparente en el resto de la aplicación. Sólo se necesita ajustar el registro de proveedores para dirigir al inyector de dependencias hacia esta nueva clase.\n```typescript\n   providers: [\n    {\n      provide: Http, // reemplaza el servicio del framework\n      useClass: HttpService // con la clase personalizada que lo extiende\n    }\n  ]\n```\n\n>Este es uno de los usos más potentes de la inversión de control en Angular. Es el programador integrador el que decide el servicio a usar. El programador funcional declara la dependencia en los constructores de sus componentes y servicios, pero no decide la instancia concreta que recibirá.\n\n\nAngular 2 ha trastocado todo lo que hacíamos en las versiones 1.x, pero sólo en la forma. El fondo sigue siendo el mismo: **el navegador envía y recibe datos en formato JSON que mezcla con plantillas estáticas** para  crear HTML en la máquina local y relajar al servidor. \n\n\nPor cierto, por ahora ni rastro del viejo `$resource`. No tardará en aparecer una versión basada en *streams observables*. Sígueme en [mi cuenta de twitter](https://twitter.com/albertobasalo) o suscríbete a la [revista mensual de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339) y en cuanto me entere serás el primero en ser informado.\n\n*Keep coding, keep learning.*","slug":"comunicaciones-http-observables-con-angular2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj02000gc7jss57818e2","content":"<p>En AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame <strong>plantillas estáticas y datos dinámicos</strong>. Las comunicaciones <em>http</em> son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.</p>\n<a id=\"more\"></a>\n<h3 id=\"La-libreria-http-y-otras…\"><a href=\"#La-libreria-http-y-otras…\" class=\"headerlink\" title=\"La librería http y otras…\"></a>La librería http y otras…</h3><p>Como cabe esperar Angular 2 dispone de su propio módulo de comunicaciones. En la librería <code>@angular/http</code> encontramos el nuevo servicio <code>http</code> que es el cliente usado para enviar y recibir datos.</p>\n<p>Lo realmente novedoso viene de parte del proyecto <a href=\"http://reactivex.io/rxjs/\" target=\"_blank\" rel=\"external\">Reactive Extensions o RxJS</a>. En su librería <code>rxjs/Observable</code> exporta la clase <code>Observable</code>. Esta clase implementa el <strong>patrón observador aplicado a streams</strong> de datos. El equipo de Angular ha decidido adoptarlo para procesar los <em>streams</em> de entrada y salida de datos <em>http</em>.</p>\n<p>Un servicio típico que necesite comunicaciones con el servidor importará al menos estos objetos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Importar objetos de la librería http</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Http, Response, RequestOptions, Headers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// Importar la clase Observable desde la librería rxjs</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125;     <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span>;</div></pre></td></tr></table></figure>\n<p>Los servicios importados han de ser <strong>registrados como <em>providers</em> para poder ser inyectados como dependencias</strong> antes de ser consumidos. Ya que se trata de servicios de amplio uso en cualquier aplicación, se recomienda registrarlos en módulos de alto nivel. De esa forma pueden ser reutilizados como <em>singletons</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importar la constante con los proveedores de http</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule, Http &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  declarations: [ ],</div><div class=\"line\">  imports: [</div><div class=\"line\">    HttpModule, <span class=\"comment\">// El módulo con todo lo necesario</span></div><div class=\"line\">  ],</div><div class=\"line\">  providers:[</div><div class=\"line\">    Http, <span class=\"comment\">// El servicio proveedor</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>A partir de ese momento cualquier componente o servicio puede reclamar su inyección en el constructor, y lo podrá usar en sus propios métodos.<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">* Constructor que reclama dependencias inyectables</span></div><div class=\"line\"><span class=\"comment\">* Http se encuentra por haberse registrado en este módulo o en uno superior</span></div><div class=\"line\"><span class=\"comment\">**/</span></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// en el constructor no debe contener lógica extra</span></div><div class=\"line\">   <span class=\"comment\">// su función es únicamente recibir las dependencias</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Observables-en-lugar-de-promesas\"><a href=\"#Observables-en-lugar-de-promesas\" class=\"headerlink\" title=\"Observables en lugar de promesas\"></a>Observables en lugar de promesas</h3><p>La naturaleza asíncrona de las comunicaciones entre maquinas se implementó mediante <em>callbacks</em> en JavaScript. Esta forma de programar degenera en código difícil de mantener. Con el tiempo el <strong>patrón promesa</strong> se impuso, y en AngularJS 1.x es la manera recomendada de programar.</p>\n<p>Pero las promesas también tiene sus limitaciones, y ahí aparecen los <strong>observables</strong>. Este patrón requerirá un artículo para el sólo, pero como adelanto se resume en lo siguiente:</p>\n<blockquote>\n<p>Tratar todo tipo de información como un stream observable de entrada y de salida, al cual se le pueden agregar operaciones que procesan los flujos de datos.</p>\n</blockquote>\n<p>Esto encaja muy bien con las comunicaciones <em>http</em> asíncronas y es la razón de su adopción en Angular 2. Un método de servicio par <strong>leer datos REST</strong> se parecerá a este <em>snippet</em>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// las llamadas devuelven observables</span></div><div class=\"line\">leerDatos(): Observable&lt;Response&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Se declara cómo va a ser la llamada </span></div><div class=\"line\">  <span class=\"comment\">// ocultando los pormenores a los consumidores   </span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">    .get(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso`</span>);</div><div class=\"line\">  <span class=\"comment\">// En este momento aún no se efectuó la llamada</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Para enviar información via <em>post</em> o <em>put</em> usaremos una estrategia similar, pero con unos requisitos específicos. En Angular 2 se requiere una configuración previa de las llamadas de escritura. Es engorroso pero fácilmente automatizable. Una típica operación de <strong>escritura REST</strong> sería algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">escribirDatos(unDato): Observable&lt;Response&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Los envíos de información deben configurarse a mano</span></div><div class=\"line\">  <span class=\"comment\">// esto es fácilmente generalizable y reutilizable</span></div><div class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"built_in\">JSON</span>.stringify(unDato);</div><div class=\"line\">  <span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> Headers(&#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;);</div><div class=\"line\">  <span class=\"keyword\">let</span> options = <span class=\"keyword\">new</span> RequestOptions(&#123; headers: headers &#125;);</div><div class=\"line\">  <span class=\"comment\">// declarar la llamada y retornar el observable</span></div><div class=\"line\">  <span class=\"comment\">// las variables de configuración y los datos, van como parámetros</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (unDato._id) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">      .put(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso/<span class=\"subst\">$&#123;unDato._id&#125;</span>`</span>, body, options);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">      .post(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso`</span>, body, options);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Por supuesto esto es lo que se programa a bajo nivel, en los <strong>servicios de comunicaciones</strong>. En Angular2 se mantiene la recomendación de bajar a servicios la responsabilidad de las comunicaciones al tiempo que dejamos los componentes lo más ligeros posible. </p>\n<p>Por encima de los servicios de comunicaciones habrá otros servicios de lógica o directamente componentes. En cualquier caso, los consumidores llamarán a métodos que siempre les devolverán objetos observables. Las clases de alto nivel se <strong>suscribirán a esos observables</strong> y procesarán la respuesta recibida… cuando esta esté disponible.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// La carga de datos se hace al iniciarse el componente</span></div><div class=\"line\"><span class=\"comment\">// este es el lugar donde programar lógica de inicio</span></div><div class=\"line\"><span class=\"comment\">// nunca en el constructor</span></div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"comment\">// en el momento de la suscripción es cuando se dispara la llamada</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.datosService</div><div class=\"line\">    .leerDatos()</div><div class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.datos = res.json();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"comment\">// Sería similar en procesos de escritura</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>La clase <code>http</code> no realiza la llamada hasta que algún consumidor se suscriba a la respuesta. Mientras tanto queda como una definición congelada.</p>\n</blockquote>\n<p>El método <code>.subscribe()</code> recibe como argumento un puntero a la respuesta <em>http</em>. Los datos se encuentran en formato <em>JSON</em> y hay que reclamarlos mediante el método <code>.json()</code></p>\n<h3 id=\"Extensiones-en-lugar-de-interceptores\"><a href=\"#Extensiones-en-lugar-de-interceptores\" class=\"headerlink\" title=\"Extensiones en lugar de interceptores\"></a>Extensiones en lugar de interceptores</h3><p>Una de las características destacables de los servicios <code>$http</code> de AngularJS 1.x era la posibilidad de usar <em>interceptores</em>. Estos eran <strong>funciones que se incrustaban durante el envío o recepción</strong> de las comunicaciones.</p>\n<p>Un uso habitual era emplearlos para agregar <strong>cabeceras de seguridad o controlar errores</strong> de comunicación de manera centralizada. Ahora la forma recomendable de hacer eso mismo en Angular2 es mejorar el servicio http extendiéndolo. El servicio derivado resultante implementará los interceptores en funciones llamadas durante la comunicación.</p>\n<p>Esta es una posible implementación con funcionalidad suficiente para facilitar los envíos, detectar errores y enviar cabeceras de seguridad.<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Extensión personalizada de la clase HTTP</span></div><div class=\"line\"><span class=\"comment\"> * Permite la configuración de todas las peticiones</span></div><div class=\"line\"><span class=\"comment\"> * Captura los envíos y respuestas</span></div><div class=\"line\"><span class=\"comment\"> * */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpService <span class=\"keyword\">extends</span> Http &#123;</div><div class=\"line\">  <span class=\"comment\">/** Las direcciones base deberían venir de la configuración del environment*/</span></div><div class=\"line\">  <span class=\"keyword\">public</span> apiProxyUrl = <span class=\"string\">'http://localhost:4030/api/'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> authorization = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\"><span class=\"params\">    backend: XHRBackend,</span></div><div class=\"line\"><span class=\"params\">    defaultOptions: RequestOptions,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> router: Router,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> userStore: SessionStoreService</span></div><div class=\"line\"><span class=\"params\">  </span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(backend, defaultOptions);</div><div class=\"line\">    <span class=\"keyword\">this</span>.subscribeToToken();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Reescribe el método de la clase base, ejecutando acciones para cada petición</span></div><div class=\"line\"><span class=\"comment\">   * La peticiíón en curso puede llegar como una ruta o una clase request</span></div><div class=\"line\"><span class=\"comment\">   * Si viene sólo la cadena, debería traer las opciones aparte</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  request(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs = &#123; headers: <span class=\"keyword\">new</span> Headers() &#125;): Observable&lt;Response&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.configureRequest(request, options);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.interceptResponse(request, options);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> subscribeToToken() &#123;</div><div class=\"line\">    <span class=\"comment\">// suponemos un servicio que nos avisa de la recepción de tokens</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.userStore</div><div class=\"line\">      .getDataObservable()</div><div class=\"line\">      .subscribe(<span class=\"function\">(<span class=\"params\">data: Session</span>) =&gt;</span> <span class=\"keyword\">this</span>.authorization = <span class=\"string\">'Bearer '</span> + data.token);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> configureRequest(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs) &#123;</div><div class=\"line\">    <span class=\"comment\">// Adapta la ruta y asigna cabeceras</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> request === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">      request = <span class=\"keyword\">this</span>.getProxyUrl(request);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setHeaders(options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      request[<span class=\"string\">'url'</span>] = <span class=\"keyword\">this</span>.getProxyUrl(request[<span class=\"string\">'url'</span>]);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setHeaders(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> interceptResponse(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs) : Observable&lt;Response&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> observableRequest = <span class=\"keyword\">super</span></div><div class=\"line\">      .request(request, options)</div><div class=\"line\">      .catch(<span class=\"keyword\">this</span>.onCatch())</div><div class=\"line\">      .finally(<span class=\"keyword\">this</span>.onFinally());</div><div class=\"line\">    <span class=\"keyword\">return</span> observableRequest;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Transforma la url para llamar a trave´s de un proxy </span></div><div class=\"line\"><span class=\"comment\">   * Útil en caso de problemas con el CORS</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> getProxyUrl(currentUrl) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!currentUrl.includes(<span class=\"string\">'/assets/'</span>)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.apiProxyUrl + currentUrl;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> currentUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Interceptor para componer las cabeceras en cada petición</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> setHeaders(objectToSetHeadersTo: Request | RequestOptionsArgs) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> headers = objectToSetHeadersTo.headers;</div><div class=\"line\">    headers.set(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json'</span>);</div><div class=\"line\">    headers.set(<span class=\"string\">'Authorization'</span>, <span class=\"keyword\">this</span>.authorization);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Interceptor para captura genérica de errores http</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> onCatch() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">res: Response</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Security errors</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (res.status === <span class=\"number\">401</span> || res.status === <span class=\"number\">403</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// redirigir al usuario para pedir credenciales</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'user/login'</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// To Do: Gestión común de otros errores...</span></div><div class=\"line\">      <span class=\"keyword\">return</span> Observable.throw(res);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> onFinally() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Fin'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Podemos usarlo de manera transparente en el resto de la aplicación. Sólo se necesita ajustar el registro de proveedores para dirigir al inyector de dependencias hacia esta nueva clase.<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> providers: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    provide: Http, <span class=\"comment\">// reemplaza el servicio del framework</span></div><div class=\"line\">    useClass: HttpService <span class=\"comment\">// con la clase personalizada que lo extiende</span></div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Este es uno de los usos más potentes de la inversión de control en Angular. Es el programador integrador el que decide el servicio a usar. El programador funcional declara la dependencia en los constructores de sus componentes y servicios, pero no decide la instancia concreta que recibirá.</p>\n</blockquote>\n<p>Angular 2 ha trastocado todo lo que hacíamos en las versiones 1.x, pero sólo en la forma. El fondo sigue siendo el mismo: <strong>el navegador envía y recibe datos en formato JSON que mezcla con plantillas estáticas</strong> para  crear HTML en la máquina local y relajar al servidor. </p>\n<p>Por cierto, por ahora ni rastro del viejo <code>$resource</code>. No tardará en aparecer una versión basada en <em>streams observables</em>. Sígueme en <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">mi cuenta de twitter</a> o suscríbete a la <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">revista mensual de Academia Binaria</a> y en cuanto me entere serás el primero en ser informado.</p>\n<p><em>Keep coding, keep learning.</em></p>\n","site":{"data":{}},"excerpt":"<p>En AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame <strong>plantillas estáticas y datos dinámicos</strong>. Las comunicaciones <em>http</em> son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.</p>","more":"<h3 id=\"La-libreria-http-y-otras…\"><a href=\"#La-libreria-http-y-otras…\" class=\"headerlink\" title=\"La librería http y otras…\"></a>La librería http y otras…</h3><p>Como cabe esperar Angular 2 dispone de su propio módulo de comunicaciones. En la librería <code>@angular/http</code> encontramos el nuevo servicio <code>http</code> que es el cliente usado para enviar y recibir datos.</p>\n<p>Lo realmente novedoso viene de parte del proyecto <a href=\"http://reactivex.io/rxjs/\" target=\"_blank\" rel=\"external\">Reactive Extensions o RxJS</a>. En su librería <code>rxjs/Observable</code> exporta la clase <code>Observable</code>. Esta clase implementa el <strong>patrón observador aplicado a streams</strong> de datos. El equipo de Angular ha decidido adoptarlo para procesar los <em>streams</em> de entrada y salida de datos <em>http</em>.</p>\n<p>Un servicio típico que necesite comunicaciones con el servidor importará al menos estos objetos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Importar objetos de la librería http</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Http, Response, RequestOptions, Headers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// Importar la clase Observable desde la librería rxjs</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125;     <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span>;</div></pre></td></tr></table></figure>\n<p>Los servicios importados han de ser <strong>registrados como <em>providers</em> para poder ser inyectados como dependencias</strong> antes de ser consumidos. Ya que se trata de servicios de amplio uso en cualquier aplicación, se recomienda registrarlos en módulos de alto nivel. De esa forma pueden ser reutilizados como <em>singletons</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importar la constante con los proveedores de http</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule, Http &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  declarations: [ ],</div><div class=\"line\">  imports: [</div><div class=\"line\">    HttpModule, <span class=\"comment\">// El módulo con todo lo necesario</span></div><div class=\"line\">  ],</div><div class=\"line\">  providers:[</div><div class=\"line\">    Http, <span class=\"comment\">// El servicio proveedor</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>A partir de ese momento cualquier componente o servicio puede reclamar su inyección en el constructor, y lo podrá usar en sus propios métodos.<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">* Constructor que reclama dependencias inyectables</span></div><div class=\"line\"><span class=\"comment\">* Http se encuentra por haberse registrado en este módulo o en uno superior</span></div><div class=\"line\"><span class=\"comment\">**/</span></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// en el constructor no debe contener lógica extra</span></div><div class=\"line\">   <span class=\"comment\">// su función es únicamente recibir las dependencias</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Observables-en-lugar-de-promesas\"><a href=\"#Observables-en-lugar-de-promesas\" class=\"headerlink\" title=\"Observables en lugar de promesas\"></a>Observables en lugar de promesas</h3><p>La naturaleza asíncrona de las comunicaciones entre maquinas se implementó mediante <em>callbacks</em> en JavaScript. Esta forma de programar degenera en código difícil de mantener. Con el tiempo el <strong>patrón promesa</strong> se impuso, y en AngularJS 1.x es la manera recomendada de programar.</p>\n<p>Pero las promesas también tiene sus limitaciones, y ahí aparecen los <strong>observables</strong>. Este patrón requerirá un artículo para el sólo, pero como adelanto se resume en lo siguiente:</p>\n<blockquote>\n<p>Tratar todo tipo de información como un stream observable de entrada y de salida, al cual se le pueden agregar operaciones que procesan los flujos de datos.</p>\n</blockquote>\n<p>Esto encaja muy bien con las comunicaciones <em>http</em> asíncronas y es la razón de su adopción en Angular 2. Un método de servicio par <strong>leer datos REST</strong> se parecerá a este <em>snippet</em>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// las llamadas devuelven observables</span></div><div class=\"line\">leerDatos(): Observable&lt;Response&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Se declara cómo va a ser la llamada </span></div><div class=\"line\">  <span class=\"comment\">// ocultando los pormenores a los consumidores   </span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">    .get(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso`</span>);</div><div class=\"line\">  <span class=\"comment\">// En este momento aún no se efectuó la llamada</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Para enviar información via <em>post</em> o <em>put</em> usaremos una estrategia similar, pero con unos requisitos específicos. En Angular 2 se requiere una configuración previa de las llamadas de escritura. Es engorroso pero fácilmente automatizable. Una típica operación de <strong>escritura REST</strong> sería algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">escribirDatos(unDato): Observable&lt;Response&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Los envíos de información deben configurarse a mano</span></div><div class=\"line\">  <span class=\"comment\">// esto es fácilmente generalizable y reutilizable</span></div><div class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"built_in\">JSON</span>.stringify(unDato);</div><div class=\"line\">  <span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> Headers(&#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;);</div><div class=\"line\">  <span class=\"keyword\">let</span> options = <span class=\"keyword\">new</span> RequestOptions(&#123; headers: headers &#125;);</div><div class=\"line\">  <span class=\"comment\">// declarar la llamada y retornar el observable</span></div><div class=\"line\">  <span class=\"comment\">// las variables de configuración y los datos, van como parámetros</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (unDato._id) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">      .put(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso/<span class=\"subst\">$&#123;unDato._id&#125;</span>`</span>, body, options);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">      .post(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso`</span>, body, options);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Por supuesto esto es lo que se programa a bajo nivel, en los <strong>servicios de comunicaciones</strong>. En Angular2 se mantiene la recomendación de bajar a servicios la responsabilidad de las comunicaciones al tiempo que dejamos los componentes lo más ligeros posible. </p>\n<p>Por encima de los servicios de comunicaciones habrá otros servicios de lógica o directamente componentes. En cualquier caso, los consumidores llamarán a métodos que siempre les devolverán objetos observables. Las clases de alto nivel se <strong>suscribirán a esos observables</strong> y procesarán la respuesta recibida… cuando esta esté disponible.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// La carga de datos se hace al iniciarse el componente</span></div><div class=\"line\"><span class=\"comment\">// este es el lugar donde programar lógica de inicio</span></div><div class=\"line\"><span class=\"comment\">// nunca en el constructor</span></div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"comment\">// en el momento de la suscripción es cuando se dispara la llamada</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.datosService</div><div class=\"line\">    .leerDatos()</div><div class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.datos = res.json();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"comment\">// Sería similar en procesos de escritura</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>La clase <code>http</code> no realiza la llamada hasta que algún consumidor se suscriba a la respuesta. Mientras tanto queda como una definición congelada.</p>\n</blockquote>\n<p>El método <code>.subscribe()</code> recibe como argumento un puntero a la respuesta <em>http</em>. Los datos se encuentran en formato <em>JSON</em> y hay que reclamarlos mediante el método <code>.json()</code></p>\n<h3 id=\"Extensiones-en-lugar-de-interceptores\"><a href=\"#Extensiones-en-lugar-de-interceptores\" class=\"headerlink\" title=\"Extensiones en lugar de interceptores\"></a>Extensiones en lugar de interceptores</h3><p>Una de las características destacables de los servicios <code>$http</code> de AngularJS 1.x era la posibilidad de usar <em>interceptores</em>. Estos eran <strong>funciones que se incrustaban durante el envío o recepción</strong> de las comunicaciones.</p>\n<p>Un uso habitual era emplearlos para agregar <strong>cabeceras de seguridad o controlar errores</strong> de comunicación de manera centralizada. Ahora la forma recomendable de hacer eso mismo en Angular2 es mejorar el servicio http extendiéndolo. El servicio derivado resultante implementará los interceptores en funciones llamadas durante la comunicación.</p>\n<p>Esta es una posible implementación con funcionalidad suficiente para facilitar los envíos, detectar errores y enviar cabeceras de seguridad.<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Extensión personalizada de la clase HTTP</span></div><div class=\"line\"><span class=\"comment\"> * Permite la configuración de todas las peticiones</span></div><div class=\"line\"><span class=\"comment\"> * Captura los envíos y respuestas</span></div><div class=\"line\"><span class=\"comment\"> * */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpService <span class=\"keyword\">extends</span> Http &#123;</div><div class=\"line\">  <span class=\"comment\">/** Las direcciones base deberían venir de la configuración del environment*/</span></div><div class=\"line\">  <span class=\"keyword\">public</span> apiProxyUrl = <span class=\"string\">'http://localhost:4030/api/'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> authorization = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\"><span class=\"params\">    backend: XHRBackend,</span></div><div class=\"line\"><span class=\"params\">    defaultOptions: RequestOptions,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> router: Router,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> userStore: SessionStoreService</span></div><div class=\"line\"><span class=\"params\">  </span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(backend, defaultOptions);</div><div class=\"line\">    <span class=\"keyword\">this</span>.subscribeToToken();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Reescribe el método de la clase base, ejecutando acciones para cada petición</span></div><div class=\"line\"><span class=\"comment\">   * La peticiíón en curso puede llegar como una ruta o una clase request</span></div><div class=\"line\"><span class=\"comment\">   * Si viene sólo la cadena, debería traer las opciones aparte</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  request(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs = &#123; headers: <span class=\"keyword\">new</span> Headers() &#125;): Observable&lt;Response&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.configureRequest(request, options);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.interceptResponse(request, options);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> subscribeToToken() &#123;</div><div class=\"line\">    <span class=\"comment\">// suponemos un servicio que nos avisa de la recepción de tokens</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.userStore</div><div class=\"line\">      .getDataObservable()</div><div class=\"line\">      .subscribe(<span class=\"function\">(<span class=\"params\">data: Session</span>) =&gt;</span> <span class=\"keyword\">this</span>.authorization = <span class=\"string\">'Bearer '</span> + data.token);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> configureRequest(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs) &#123;</div><div class=\"line\">    <span class=\"comment\">// Adapta la ruta y asigna cabeceras</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> request === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">      request = <span class=\"keyword\">this</span>.getProxyUrl(request);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setHeaders(options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      request[<span class=\"string\">'url'</span>] = <span class=\"keyword\">this</span>.getProxyUrl(request[<span class=\"string\">'url'</span>]);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setHeaders(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> interceptResponse(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs) : Observable&lt;Response&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> observableRequest = <span class=\"keyword\">super</span></div><div class=\"line\">      .request(request, options)</div><div class=\"line\">      .catch(<span class=\"keyword\">this</span>.onCatch())</div><div class=\"line\">      .finally(<span class=\"keyword\">this</span>.onFinally());</div><div class=\"line\">    <span class=\"keyword\">return</span> observableRequest;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Transforma la url para llamar a trave´s de un proxy </span></div><div class=\"line\"><span class=\"comment\">   * Útil en caso de problemas con el CORS</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> getProxyUrl(currentUrl) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!currentUrl.includes(<span class=\"string\">'/assets/'</span>)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.apiProxyUrl + currentUrl;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> currentUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Interceptor para componer las cabeceras en cada petición</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> setHeaders(objectToSetHeadersTo: Request | RequestOptionsArgs) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> headers = objectToSetHeadersTo.headers;</div><div class=\"line\">    headers.set(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json'</span>);</div><div class=\"line\">    headers.set(<span class=\"string\">'Authorization'</span>, <span class=\"keyword\">this</span>.authorization);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Interceptor para captura genérica de errores http</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> onCatch() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">res: Response</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Security errors</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (res.status === <span class=\"number\">401</span> || res.status === <span class=\"number\">403</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// redirigir al usuario para pedir credenciales</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'user/login'</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// To Do: Gestión común de otros errores...</span></div><div class=\"line\">      <span class=\"keyword\">return</span> Observable.throw(res);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> onFinally() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Fin'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Podemos usarlo de manera transparente en el resto de la aplicación. Sólo se necesita ajustar el registro de proveedores para dirigir al inyector de dependencias hacia esta nueva clase.<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> providers: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    provide: Http, <span class=\"comment\">// reemplaza el servicio del framework</span></div><div class=\"line\">    useClass: HttpService <span class=\"comment\">// con la clase personalizada que lo extiende</span></div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Este es uno de los usos más potentes de la inversión de control en Angular. Es el programador integrador el que decide el servicio a usar. El programador funcional declara la dependencia en los constructores de sus componentes y servicios, pero no decide la instancia concreta que recibirá.</p>\n</blockquote>\n<p>Angular 2 ha trastocado todo lo que hacíamos en las versiones 1.x, pero sólo en la forma. El fondo sigue siendo el mismo: <strong>el navegador envía y recibe datos en formato JSON que mezcla con plantillas estáticas</strong> para  crear HTML en la máquina local y relajar al servidor. </p>\n<p>Por cierto, por ahora ni rastro del viejo <code>$resource</code>. No tardará en aparecer una versión basada en <em>streams observables</em>. Sígueme en <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">mi cuenta de twitter</a> o suscríbete a la <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">revista mensual de Academia Binaria</a> y en cuanto me entere serás el primero en ser informado.</p>\n<p><em>Keep coding, keep learning.</em></p>"},{"title":"DataBinding el flujo de datos de Angular2","id":"13","updated":"2016-11-10T13:56:46.000Z","date":"2016-05-25T15:26:32.000Z","_content":"\n> Código asociado en [angular2/3-databinding/](https://github.com/AcademiaBinaria/angular2/tree/master/3-databinding) \n\nEl *doble binding* o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva `ng-model` enganchamos **una propiedad del modelo con un control de la vista**. De manera *automágica* Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía. \n\nPero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del **flujo de datos** entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:\n\n![Flujo de datos](/images/ng2-Flujo-de-datos.jpg)\n\n<!-- more -->\n\n## Sólo lectura: modelo hacia la vista\n### 1- Interpolación\nEn este primer caso todo nos resultará muy familiar. En efecto la sintáxis de interpolación es la mismoa que en AngularJS 1.x. eso si, en este caso y por defecto, los datos son de sólo lectura y Angular no se preocupa de actualizar la variable.\n```html\n     <p>Hola {{nombreDelProgramador}} bienvenido a Angular2</p>\n     <p>Fecha de nacimiento: {{fechaDeNacimiento | date}}</p>\n```\n### 2- Enlace a propiedades\nEs la comunicación básica hacia la vista, hacia el usuario. En este caso cualquier atributo de un elemento HTML puede enlazarse al valor de una propiedad encerrándola entre corchetes y asignándole una expresión. `[propiedad]=\"expresion\"`\n```html\n     <p>Hola <input [value]=\"nombreDelProgramador\" readonly ></input> bienvenido a Angular2</p>\n     <a [href]=\"url-academia-binaria\">Academia Binaria</a>\n     <div [hidden]=\"usuarioAutenticado\">Identifícate</div>     \n     <div [hidden]=\"!usuarioAutenticado\">Hola {{nombreUsuario}}</div>\n```\n\n## Sólo escritura: de la vista hacia el modelo\n### 1- Eventos\nLa comunicación desde la vista hacia el modelo se realiza mediante eventos. Es una buena práctica llamar a funciones del componente de forma declarativa en la vista. \nLa sintaxis requiere que se nombre el evento entre paréntesis y se le asigne una expresión como valor. `(evento)=\"expresion\"`\n```html\n     <input (keyup)=\"onKey($event)\" />\n     <input #nombre\n      (keyup.enter)=\"propiedad=nombre.value\"\n      (blur)=\"propiedad=nombre.value\">\n     <button (click)=lanzarCohete()>Lanzar cohete</button>\n```\n## Lectura y escritura: bidireccional\n### 1- Enlace doble.\nEste es el caso más común en la edición de formularios. Y es el equivalente al viejo y glorioso *doble binding*. Es la combinación de los dos anteriores y eso se refleja en la sintaxis. Recordad `[]` para leer propiedades y `()` para enviar datos en respuesta a eventos: el resultado es la llamada *banana in a box* `[()]`. En este caso se completa con la directiva ngModel y la propiedad enlazada. `[(ngModel)]=\"propiedad\"`\n```html\n  <input type=\"text\"  [(ngModel)]=\"nombreDelProgramador\" >\n  Hola {{nombreDelProgramador}}\n```\n\n## Resumen\nEste es un ejemplo recopilatorio de las capacidades de Angular2 en cuanto a la sintaxis declarativa en las plantillas HTML de los componentes. Recordad este *mantra* que revisaremos durante la composición de componentes en aplicaciones complejas:\n> Los datos fluyen hacia las propiedades de los componentes hijos. Los eventos brotan desde los hijos hacia los padres. Sólo usamos enlace doble en los formularios que así lo requieran.\n\n```html\n<h1>\n  <!--Interpolación de variables definidas en el modelo del componente-->\n  {{title}}\n</h1>\n<form>\n  <label>¿Cómo te llamas?</label>\n  <!--Enlace doble (lectura y escritura) entre la vista y el modelo-->\n  <input type=\"text\" [(ngModel)]=\"aprendiz\" />\n  <p>Bienvenido a Angular 2 {{ aprendiz }} </p>\n  \n  <!--Expresiones-->\n  <p>Soy capaz de multiplicar por {{1 * 2}} tus habilidades </p>\n  <!--Eventos-->\n  <button (click)=\"visible=true\">Saludar</button>\n  <!--Propiedades-->\n  <p [hidden]=\"!visible\">Hola Mundo!!!</p>\n</form>\n```\n\nEn estos ejemplos se han visto propiedades y eventos estándar. Pero todo lo dicho es aplicable a las **propiedades y eventos** especialmente creados para tus componentes.\n\nEl objetivo, conseguido, es aumentar el **rendimiento**. Y un efecto colateral es la **simplificación del API** de AngularJS. Desaparecen casi todas las directivas estructurales. Especialmente las famosas `ng-click ng-blur` y demás directivas asociadas a eventos. Tampoco se necesitan más las directivas de `ng-show` y `ng-hide`.\n\nLas únicas directivas estructurales que permanecen son `*ngIf` `*ngSwitch` y `*ngFor`. Pero esas merecen tratamiento aparte.\n","source":"_posts/DataBinding-el-flujo-de-datos-de-Angular2.md","raw":"---\ntitle: DataBinding el flujo de datos de Angular2\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: databinding-el-flujo-de-datos-de-angular2\nid: 13\nupdated: 2016/11/10 14:56:46\ndate: 2016/05/25 17:26:32\n---\n\n> Código asociado en [angular2/3-databinding/](https://github.com/AcademiaBinaria/angular2/tree/master/3-databinding) \n\nEl *doble binding* o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva `ng-model` enganchamos **una propiedad del modelo con un control de la vista**. De manera *automágica* Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía. \n\nPero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del **flujo de datos** entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:\n\n![Flujo de datos](/images/ng2-Flujo-de-datos.jpg)\n\n<!-- more -->\n\n## Sólo lectura: modelo hacia la vista\n### 1- Interpolación\nEn este primer caso todo nos resultará muy familiar. En efecto la sintáxis de interpolación es la mismoa que en AngularJS 1.x. eso si, en este caso y por defecto, los datos son de sólo lectura y Angular no se preocupa de actualizar la variable.\n```html\n     <p>Hola {{nombreDelProgramador}} bienvenido a Angular2</p>\n     <p>Fecha de nacimiento: {{fechaDeNacimiento | date}}</p>\n```\n### 2- Enlace a propiedades\nEs la comunicación básica hacia la vista, hacia el usuario. En este caso cualquier atributo de un elemento HTML puede enlazarse al valor de una propiedad encerrándola entre corchetes y asignándole una expresión. `[propiedad]=\"expresion\"`\n```html\n     <p>Hola <input [value]=\"nombreDelProgramador\" readonly ></input> bienvenido a Angular2</p>\n     <a [href]=\"url-academia-binaria\">Academia Binaria</a>\n     <div [hidden]=\"usuarioAutenticado\">Identifícate</div>     \n     <div [hidden]=\"!usuarioAutenticado\">Hola {{nombreUsuario}}</div>\n```\n\n## Sólo escritura: de la vista hacia el modelo\n### 1- Eventos\nLa comunicación desde la vista hacia el modelo se realiza mediante eventos. Es una buena práctica llamar a funciones del componente de forma declarativa en la vista. \nLa sintaxis requiere que se nombre el evento entre paréntesis y se le asigne una expresión como valor. `(evento)=\"expresion\"`\n```html\n     <input (keyup)=\"onKey($event)\" />\n     <input #nombre\n      (keyup.enter)=\"propiedad=nombre.value\"\n      (blur)=\"propiedad=nombre.value\">\n     <button (click)=lanzarCohete()>Lanzar cohete</button>\n```\n## Lectura y escritura: bidireccional\n### 1- Enlace doble.\nEste es el caso más común en la edición de formularios. Y es el equivalente al viejo y glorioso *doble binding*. Es la combinación de los dos anteriores y eso se refleja en la sintaxis. Recordad `[]` para leer propiedades y `()` para enviar datos en respuesta a eventos: el resultado es la llamada *banana in a box* `[()]`. En este caso se completa con la directiva ngModel y la propiedad enlazada. `[(ngModel)]=\"propiedad\"`\n```html\n  <input type=\"text\"  [(ngModel)]=\"nombreDelProgramador\" >\n  Hola {{nombreDelProgramador}}\n```\n\n## Resumen\nEste es un ejemplo recopilatorio de las capacidades de Angular2 en cuanto a la sintaxis declarativa en las plantillas HTML de los componentes. Recordad este *mantra* que revisaremos durante la composición de componentes en aplicaciones complejas:\n> Los datos fluyen hacia las propiedades de los componentes hijos. Los eventos brotan desde los hijos hacia los padres. Sólo usamos enlace doble en los formularios que así lo requieran.\n\n```html\n<h1>\n  <!--Interpolación de variables definidas en el modelo del componente-->\n  {{title}}\n</h1>\n<form>\n  <label>¿Cómo te llamas?</label>\n  <!--Enlace doble (lectura y escritura) entre la vista y el modelo-->\n  <input type=\"text\" [(ngModel)]=\"aprendiz\" />\n  <p>Bienvenido a Angular 2 {{ aprendiz }} </p>\n  \n  <!--Expresiones-->\n  <p>Soy capaz de multiplicar por {{1 * 2}} tus habilidades </p>\n  <!--Eventos-->\n  <button (click)=\"visible=true\">Saludar</button>\n  <!--Propiedades-->\n  <p [hidden]=\"!visible\">Hola Mundo!!!</p>\n</form>\n```\n\nEn estos ejemplos se han visto propiedades y eventos estándar. Pero todo lo dicho es aplicable a las **propiedades y eventos** especialmente creados para tus componentes.\n\nEl objetivo, conseguido, es aumentar el **rendimiento**. Y un efecto colateral es la **simplificación del API** de AngularJS. Desaparecen casi todas las directivas estructurales. Especialmente las famosas `ng-click ng-blur` y demás directivas asociadas a eventos. Tampoco se necesitan más las directivas de `ng-show` y `ng-hide`.\n\nLas únicas directivas estructurales que permanecen son `*ngIf` `*ngSwitch` y `*ngFor`. Pero esas merecen tratamiento aparte.\n","slug":"databinding-el-flujo-de-datos-de-angular2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj06000lc7jsb7imml9r","content":"<blockquote>\n<p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/3-databinding\" target=\"_blank\" rel=\"external\">angular2/3-databinding/</a> </p>\n</blockquote>\n<p>El <em>doble binding</em> o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva <code>ng-model</code> enganchamos <strong>una propiedad del modelo con un control de la vista</strong>. De manera <em>automágica</em> Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía. </p>\n<p>Pero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del <strong>flujo de datos</strong> entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:</p>\n<p><img src=\"/images/ng2-Flujo-de-datos.jpg\" alt=\"Flujo de datos\"></p>\n<a id=\"more\"></a>\n<h2 id=\"Solo-lectura-modelo-hacia-la-vista\"><a href=\"#Solo-lectura-modelo-hacia-la-vista\" class=\"headerlink\" title=\"Sólo lectura: modelo hacia la vista\"></a>Sólo lectura: modelo hacia la vista</h2><h3 id=\"1-Interpolacion\"><a href=\"#1-Interpolacion\" class=\"headerlink\" title=\"1- Interpolación\"></a>1- Interpolación</h3><p>En este primer caso todo nos resultará muy familiar. En efecto la sintáxis de interpolación es la mismoa que en AngularJS 1.x. eso si, en este caso y por defecto, los datos son de sólo lectura y Angular no se preocupa de actualizar la variable.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hola &#123;&#123;nombreDelProgramador&#125;&#125; bienvenido a Angular2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Fecha de nacimiento: &#123;&#123;fechaDeNacimiento | date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Enlace-a-propiedades\"><a href=\"#2-Enlace-a-propiedades\" class=\"headerlink\" title=\"2- Enlace a propiedades\"></a>2- Enlace a propiedades</h3><p>Es la comunicación básica hacia la vista, hacia el usuario. En este caso cualquier atributo de un elemento HTML puede enlazarse al valor de una propiedad encerrándola entre corchetes y asignándole una expresión. <code>[propiedad]=&quot;expresion&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hola <span class=\"tag\">&lt;<span class=\"name\">input</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"nombreDelProgramador\"</span> <span class=\"attr\">readonly</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span> bienvenido a Angular2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">href</span>]=<span class=\"string\">\"url-academia-binaria\"</span>&gt;</span>Academia Binaria<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"usuarioAutenticado\"</span>&gt;</span>Identifícate<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!usuarioAutenticado\"</span>&gt;</span>Hola &#123;&#123;nombreUsuario&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Solo-escritura-de-la-vista-hacia-el-modelo\"><a href=\"#Solo-escritura-de-la-vista-hacia-el-modelo\" class=\"headerlink\" title=\"Sólo escritura: de la vista hacia el modelo\"></a>Sólo escritura: de la vista hacia el modelo</h2><h3 id=\"1-Eventos\"><a href=\"#1-Eventos\" class=\"headerlink\" title=\"1- Eventos\"></a>1- Eventos</h3><p>La comunicación desde la vista hacia el modelo se realiza mediante eventos. Es una buena práctica llamar a funciones del componente de forma declarativa en la vista.<br>La sintaxis requiere que se nombre el evento entre paréntesis y se le asigne una expresión como valor. <code>(evento)=&quot;expresion&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> (<span class=\"attr\">keyup</span>)=<span class=\"string\">\"onKey($event)\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">nombre</span></span></div><div class=\"line\"><span class=\"tag\"> (<span class=\"attr\">keyup.enter</span>)=<span class=\"string\">\"propiedad=nombre.value\"</span></span></div><div class=\"line\"><span class=\"tag\"> (<span class=\"attr\">blur</span>)=<span class=\"string\">\"propiedad=nombre.value\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">lanzarCohete()</span>&gt;</span>Lanzar cohete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Lectura-y-escritura-bidireccional\"><a href=\"#Lectura-y-escritura-bidireccional\" class=\"headerlink\" title=\"Lectura y escritura: bidireccional\"></a>Lectura y escritura: bidireccional</h2><h3 id=\"1-Enlace-doble\"><a href=\"#1-Enlace-doble\" class=\"headerlink\" title=\"1- Enlace doble.\"></a>1- Enlace doble.</h3><p>Este es el caso más común en la edición de formularios. Y es el equivalente al viejo y glorioso <em>doble binding</em>. Es la combinación de los dos anteriores y eso se refleja en la sintaxis. Recordad <code>[]</code> para leer propiedades y <code>()</code> para enviar datos en respuesta a eventos: el resultado es la llamada <em>banana in a box</em> <code>[()]</code>. En este caso se completa con la directiva ngModel y la propiedad enlazada. <code>[(ngModel)]=&quot;propiedad&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>  [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"nombreDelProgramador\"</span> &gt;</span></div><div class=\"line\">Hola &#123;&#123;nombreDelProgramador&#125;&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>Este es un ejemplo recopilatorio de las capacidades de Angular2 en cuanto a la sintaxis declarativa en las plantillas HTML de los componentes. Recordad este <em>mantra</em> que revisaremos durante la composición de componentes en aplicaciones complejas:</p>\n<blockquote>\n<p>Los datos fluyen hacia las propiedades de los componentes hijos. Los eventos brotan desde los hijos hacia los padres. Sólo usamos enlace doble en los formularios que así lo requieran.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Interpolación de variables definidas en el modelo del componente--&gt;</span></div><div class=\"line\">  &#123;&#123;title&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>¿Cómo te llamas?<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Enlace doble (lectura y escritura) entre la vista y el modelo--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"aprendiz\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Bienvenido a Angular 2 &#123;&#123; aprendiz &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">&lt;!--Expresiones--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soy capaz de multiplicar por &#123;&#123;1 * 2&#125;&#125; tus habilidades <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Eventos--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"visible=true\"</span>&gt;</span>Saludar<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Propiedades--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!visible\"</span>&gt;</span>Hola Mundo!!!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>En estos ejemplos se han visto propiedades y eventos estándar. Pero todo lo dicho es aplicable a las <strong>propiedades y eventos</strong> especialmente creados para tus componentes.</p>\n<p>El objetivo, conseguido, es aumentar el <strong>rendimiento</strong>. Y un efecto colateral es la <strong>simplificación del API</strong> de AngularJS. Desaparecen casi todas las directivas estructurales. Especialmente las famosas <code>ng-click ng-blur</code> y demás directivas asociadas a eventos. Tampoco se necesitan más las directivas de <code>ng-show</code> y <code>ng-hide</code>.</p>\n<p>Las únicas directivas estructurales que permanecen son <code>*ngIf</code> <code>*ngSwitch</code> y <code>*ngFor</code>. Pero esas merecen tratamiento aparte.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/3-databinding\" target=\"_blank\" rel=\"external\">angular2/3-databinding/</a> </p>\n</blockquote>\n<p>El <em>doble binding</em> o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva <code>ng-model</code> enganchamos <strong>una propiedad del modelo con un control de la vista</strong>. De manera <em>automágica</em> Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía. </p>\n<p>Pero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del <strong>flujo de datos</strong> entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:</p>\n<p><img src=\"/images/ng2-Flujo-de-datos.jpg\" alt=\"Flujo de datos\"></p>","more":"<h2 id=\"Solo-lectura-modelo-hacia-la-vista\"><a href=\"#Solo-lectura-modelo-hacia-la-vista\" class=\"headerlink\" title=\"Sólo lectura: modelo hacia la vista\"></a>Sólo lectura: modelo hacia la vista</h2><h3 id=\"1-Interpolacion\"><a href=\"#1-Interpolacion\" class=\"headerlink\" title=\"1- Interpolación\"></a>1- Interpolación</h3><p>En este primer caso todo nos resultará muy familiar. En efecto la sintáxis de interpolación es la mismoa que en AngularJS 1.x. eso si, en este caso y por defecto, los datos son de sólo lectura y Angular no se preocupa de actualizar la variable.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hola &#123;&#123;nombreDelProgramador&#125;&#125; bienvenido a Angular2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Fecha de nacimiento: &#123;&#123;fechaDeNacimiento | date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Enlace-a-propiedades\"><a href=\"#2-Enlace-a-propiedades\" class=\"headerlink\" title=\"2- Enlace a propiedades\"></a>2- Enlace a propiedades</h3><p>Es la comunicación básica hacia la vista, hacia el usuario. En este caso cualquier atributo de un elemento HTML puede enlazarse al valor de una propiedad encerrándola entre corchetes y asignándole una expresión. <code>[propiedad]=&quot;expresion&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hola <span class=\"tag\">&lt;<span class=\"name\">input</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"nombreDelProgramador\"</span> <span class=\"attr\">readonly</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span> bienvenido a Angular2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">href</span>]=<span class=\"string\">\"url-academia-binaria\"</span>&gt;</span>Academia Binaria<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"usuarioAutenticado\"</span>&gt;</span>Identifícate<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!usuarioAutenticado\"</span>&gt;</span>Hola &#123;&#123;nombreUsuario&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Solo-escritura-de-la-vista-hacia-el-modelo\"><a href=\"#Solo-escritura-de-la-vista-hacia-el-modelo\" class=\"headerlink\" title=\"Sólo escritura: de la vista hacia el modelo\"></a>Sólo escritura: de la vista hacia el modelo</h2><h3 id=\"1-Eventos\"><a href=\"#1-Eventos\" class=\"headerlink\" title=\"1- Eventos\"></a>1- Eventos</h3><p>La comunicación desde la vista hacia el modelo se realiza mediante eventos. Es una buena práctica llamar a funciones del componente de forma declarativa en la vista.<br>La sintaxis requiere que se nombre el evento entre paréntesis y se le asigne una expresión como valor. <code>(evento)=&quot;expresion&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> (<span class=\"attr\">keyup</span>)=<span class=\"string\">\"onKey($event)\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">nombre</span></span></div><div class=\"line\"><span class=\"tag\"> (<span class=\"attr\">keyup.enter</span>)=<span class=\"string\">\"propiedad=nombre.value\"</span></span></div><div class=\"line\"><span class=\"tag\"> (<span class=\"attr\">blur</span>)=<span class=\"string\">\"propiedad=nombre.value\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">lanzarCohete()</span>&gt;</span>Lanzar cohete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Lectura-y-escritura-bidireccional\"><a href=\"#Lectura-y-escritura-bidireccional\" class=\"headerlink\" title=\"Lectura y escritura: bidireccional\"></a>Lectura y escritura: bidireccional</h2><h3 id=\"1-Enlace-doble\"><a href=\"#1-Enlace-doble\" class=\"headerlink\" title=\"1- Enlace doble.\"></a>1- Enlace doble.</h3><p>Este es el caso más común en la edición de formularios. Y es el equivalente al viejo y glorioso <em>doble binding</em>. Es la combinación de los dos anteriores y eso se refleja en la sintaxis. Recordad <code>[]</code> para leer propiedades y <code>()</code> para enviar datos en respuesta a eventos: el resultado es la llamada <em>banana in a box</em> <code>[()]</code>. En este caso se completa con la directiva ngModel y la propiedad enlazada. <code>[(ngModel)]=&quot;propiedad&quot;</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>  [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"nombreDelProgramador\"</span> &gt;</span></div><div class=\"line\">Hola &#123;&#123;nombreDelProgramador&#125;&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>Este es un ejemplo recopilatorio de las capacidades de Angular2 en cuanto a la sintaxis declarativa en las plantillas HTML de los componentes. Recordad este <em>mantra</em> que revisaremos durante la composición de componentes en aplicaciones complejas:</p>\n<blockquote>\n<p>Los datos fluyen hacia las propiedades de los componentes hijos. Los eventos brotan desde los hijos hacia los padres. Sólo usamos enlace doble en los formularios que así lo requieran.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Interpolación de variables definidas en el modelo del componente--&gt;</span></div><div class=\"line\">  &#123;&#123;title&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>¿Cómo te llamas?<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Enlace doble (lectura y escritura) entre la vista y el modelo--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"aprendiz\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Bienvenido a Angular 2 &#123;&#123; aprendiz &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">&lt;!--Expresiones--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soy capaz de multiplicar por &#123;&#123;1 * 2&#125;&#125; tus habilidades <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Eventos--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"visible=true\"</span>&gt;</span>Saludar<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Propiedades--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!visible\"</span>&gt;</span>Hola Mundo!!!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>En estos ejemplos se han visto propiedades y eventos estándar. Pero todo lo dicho es aplicable a las <strong>propiedades y eventos</strong> especialmente creados para tus componentes.</p>\n<p>El objetivo, conseguido, es aumentar el <strong>rendimiento</strong>. Y un efecto colateral es la <strong>simplificación del API</strong> de AngularJS. Desaparecen casi todas las directivas estructurales. Especialmente las famosas <code>ng-click ng-blur</code> y demás directivas asociadas a eventos. Tampoco se necesitan más las directivas de <code>ng-show</code> y <code>ng-hide</code>.</p>\n<p>Las únicas directivas estructurales que permanecen son <code>*ngIf</code> <code>*ngSwitch</code> y <code>*ngFor</code>. Pero esas merecen tratamiento aparte.</p>"},{"title":"Enrutador de componentes con Angular2 el nuevo SPA","id":"15","updated":"2016-12-07T17:23:02.000Z","date":"2016-06-02T06:52:04.000Z","thumbnail":"/css/images/angular.jpg","_content":"\n> Código asociado en [angular2/6-routing/](https://github.com/AcademiaBinaria/angular2/tree/master/6-routing)\n\nLa capacidad de gestionar las **rutas en el cliente** es una de las grandes ventajas de *AngularJS*. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa [ui-router](https://github.com/angular-ui/ui-router). Hemos esperado años la promesa de un nuevo *enrutador* compatible con las versiones 1 y 2. El resultado es **@angular/router**.\n\nDe todo *Angular2*, este es el componente que más ha cambiado durante la fase *Release Candidate*. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos **SPA**.\n\n<!-- more -->\n\n## Módulo de enrutado en base a componentes\n\nLas aplicaciones Angular2 son [árboles de módulos](http://academia-binaria.com/componentes-los-bloques-de-construccion-de-angular-2/). Al menos el módulo raíz `AppModule` y cuantos módulos funcionales nos hagan falta. Utilizando `angular-cli` podemos crear módulos con la capacidad de enrutado generada en... un módulo específico.  \n\nA ver si desbrozamos algo este bosque de módulos.\n\n```javascript\nng new mi-aplicacion --routing true\n```\n\nTanto para la raíz como para las ramas funcionales se creará un fichero. En la raíz será llamado `app-routing.module.ts` con un contenido como este: \n\n```javascript\n/** Módulos de enrutado de Angular2 */\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NgModule } from '@angular/core';\n\n// Array con las rutas de este módulo. Ninguna funcional.\nconst routes: Routes = [\n  { path: '', redirectTo: '' },\n  { path: 'inicio', redirectTo: '' },\n  { path: '**', redirectTo: '', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes) // configuración para el módulo raíz\n  ],\n  exports: [\n    RouterModule // se importará desde el módulo padre\n  ]\n})\nexport class AppRoutingModule { }\n```\n\nEste **módulo** de un único fichero sirve **para definir las rutas de otro módulo padre** asociado, `app.module.ts`, el cual quedará más o menos así:\n\n```javascript\n// importación de módulo de enrutado asociado\nimport { AppRoutingModule } from './app-routing.module';\n// importación de otros módulos de funcionalidad\nimport { HomeModule } from './home/home.module';\n// decorador que define un módulo\n@NgModule({\n  declarations: [ AppComponent ], \n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HomeModule, // el módulo funcional para la 'página home'\n    AppRoutingModule // el módulo de rutas ya configurado\n  ], \n  providers: [] \n  bootstrap: [ AppComponent ] \n})\nexport class AppModule { }\n```\n\n## Módulos funcionales\nEl módulo raíz es fundamental pero nada operativo. Toda el que sea de interés para los usuarios estará en módulos funcionales. En las aplicaciones SPA es una buena práctica crear **un módulo por cada ruta** principal. Incluida la página home. Por ejemplo usando el siguiente comando:\n\n```javascript\nng generate module home --routing true\n```\nAparece un fichero llamado `home-routing-module.ts`. Este módulo se debe configurar para que gestione sus propias rutas.\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n/** Componente enrutable */\nimport { HomeComponent } from './home.component';\n/** Rutas asociadas a componentes */\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n];\n/** array de componentes enrutables */\nexport const routableComponents = [\n  HomeComponent\n];\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes) // Para módulo funcional\n  ],\n  exports: [\n    RouterModule // listo para importarlo en HomeModule\n  ]\n})\nexport class HomeRoutingModule { }\n```\n\nSe crean dos arrays relacionados. EL principal, `routes`, contendrá las **rutas pareadas con sus componentes** respectivos. \nLos cuales también se exportan directamente en la variable `routableComponents`. Esto se hace por comodidad. Para no tener que volver a importarlos en la declaración del módulo padre, que quedará así:\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Importación de las rutas y sus componentes */\nimport { HomeRoutingModule, routableComponents } from './home-routing.module';\n@NgModule({\n  imports: [\n    CommonModule,\n    HomeRoutingModule // el módulo que sabe enrutar\n  ],\n  declarations: [\n    routableComponents // los componentes de enrutado\n  ]\n})\nexport class HomeModule { }\n```\n\n### Carga de componentes según la ruta\nTodo este trabajo de configuración se materializa en las **vistas**. Necesitaremos un lugar dónde inyectar el **componente de turno asociado a la ruta** actual. Presentamos el `router-outlet`. Y para que la aplicación pueda llevarnos de un lugar a otro usaremos  la directiva `routerLink`. \n\nDe forma que la plantilla raíz `app.component.html` quedará normalmente así:\n\n```html\n<!--menú de navegación, sin href-->\n<nav>\n  <a [routerLink]=\"['/']\">Inicio</a>\n  <a [routerLink]=\"['/login']\">Log In</a>\n  <a [routerLink]=\"['/contacto']\">Contacto</a>\n</nav>\n<!--Este componente nativo hace que el enrutador cargue una página dinámicamente-->\n<router-outlet></router-outlet>\n```\n\n\n## Rutas hijas y con parámetros\nDe poco vale un enrutador que sólo atienda a los casos sencillos. Las aplicaciones profesionales plantean mayores retos. \n### Rutas hijas\nUn ejemplo son las **rutas anidadas**, aquí llamadas rutas hijas. Son aquellas en las que una parte de la visualización es común y otra depende de la ruta concreta.\n\nVeamos un ejemplo dónde se pretende dar de alta y mostrar una lista de elementos. La base de cualquier *CRUD*. Así quedaría el fichero `movimientos-routing.module.ts`.\n \n```javascript\n/** Importación de los componentes enrutables */\nimport { MovimientosComponent } from './movimientos.component';\nimport { ListaComponent } from './lista/lista.component';\nimport { NuevoComponent } from './nuevo/nuevo.component';\n\nconst routes: Routes = [\n  {\n    path: 'movimientos',\n    component: MovimientosComponent,\n    children: [ // rutas hijas, se verán dentro del componente padre\n      {\n        path: 'nuevo', // la ruta real es movimientos/nuevo\n        component: NuevoComponent\n      },\n      {\n        path: 'lista',\n        component: ListaComponent\n      }\n    ]\n  }\n];\nexport const routableComponents = [\n  NuevoComponent,\n  ListaComponent,\n  MovimientosComponent\n]\n```\nEste mini-módulo es muy denso. Contrasta con la simplicidad del `movimientos.module.ts` que reduce su responsabilidad. Sólo tiene que importar los módulos adecuados.\n\n```javascript\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Módulo de enrutado y componentes */\nimport { MovimientosRoutingModule, routableComponents } from './movimientos-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MovimientosRoutingModule\n  ], // dependencias de otros módulos, especialmente el de enrutado\n  declarations: [\n    routableComponents\n  ], // Los componentes vienen del fichero movimientos-routing.module.ts\n  exports: [\n\n  ], // no necesita exportar nada\n})\n```\n\nVemos que la idea es que los ficheros de definición de módulos funcionales **deleguen toda la lógica** posible a su propio módulo de enrutado.\n\nMientras tanto en la vista... Habíamos dejado la *template* del componente raíz con un `router-outlet`. Será ahí dónde se cargue el `MovimientosComponent` cuando se active la ruta *'/movimientos'*. Pero, ¿y las rutas hijas?, ¿qué se carga y dónde se carga cuando se activa la ruta *'/movimientos/nuevo'* o la ruta *'/movimientos/lista'* ?.\n\nEchemos un vistazo a `movimientos.component.html` para comprobar que dispone de su propio `router-outlet`. \n\n```html\n<nav>\n   <a routerLink=\"/movimientos/nuevo\" >Nuevo Movimiento</a>\n   <a routerLink=\"/movimientos/lista\" >Lista de Movimientos</a>\n</nav>\n<router-outlet></router-outlet>\n```\n\nSerá en este elemento donde se inyecten los componentes asociados a las rutas hijas. Este *anidamiento* permite hacer aplicaciones modulares y acceder a vistas específicas con rutas específicas. \n\n\n### Rutas con parámetros \n\nHasta ahora usé rutas fijas para navegar. Lo más normal es que estas **plantillas contengan segmentos variables** llamados parámetros. Para incorporar parámetros a tu esquema de rutas tienes que actuar en tres fases:\n\n#### 1- Definir la parte paramétrica de la plantilla generadora de rutas\n\nEl *path* del objeto ruta se convierte en una plantilla que admite distintos valores. Así queda ahora el módulo enrutador de movimientos:\n\n```javascript\nconst routes: Routes = [\n  {\n    path: 'movimientos',\n    component: MovimientosComponent,\n    children: [ // rutas hijas, se verán dentro del componente padre\n      {\n        path: 'nuevo', // la ruta real es movimientos/nuevo\n        component: NuevoComponent\n      },\n      {\n        path: 'lista',\n        component: ListaComponent\n      }\n    ]\n  },\n  {\n    path: 'movimientos/:id', // parámetro variable id    \n    component: EditorComponent\n  }\n];\n```\n\nLos parámetros se prefijan con `:` y en cada ruta se pueden usar tantos como sea necesario. \n\n>Obsérvese que en este caso la ruta 'movimientos/:id' es hermana, no hija, de la primera. Por tanto se mostrará en el `router-outlet` del componente raíz. Se ha hecho así para mostrar distintas maneras de trabajar en el 'router'.\n\n \n\n#### 2- Montar los enlaces asignando valores a los parámetros\n\nEsto se puede hacer en las plantillas HTML o en por código. Siempre usando el **array de `routerLink`** sin necesidad de concatenar cadenas para para montar rutas. Este array en su segunda posición llevará un objeto que represente los valores de los parámetros. \n\nEn un caso de navegación por código sencillo tendrá esta pinta:\n```javascript\n  // para ir a la ruta /movimientos/42\n  this.router.navigate(['movimientos', 42])\n```\n\nUsando desde la vista en igual de sencillo con la directiva `routerLink`, como en este ejemplo HTML:\n\n```html\n<a [routerLink]=\"['/movimientos', 42 ]\">42</a>\n```\n\n#### 3- Recuperar los valores de los parámetros a partir de las rutas\nLa novedad más llamativa es la presencia de `OnInit`. Es un *hook*, o evento de la vida de un componente. Este evento se ejecuta al iniciarse el componente pero cuando ya la ruta se ha resuelto completamente. \nEn ese momento puedes usar `ActivatedRoute`, un servicio que entre otras cosas te dará acceso a un *observable* que emite los valores actuales de los parámetros.\nPor ejemplo, esto sería el código del componente `editor.component.ts` que se activa con rutas como *'/movimientos/42'*\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\n/** Servicio para acceder a la ruta activa */\nimport { ActivatedRoute } from '@angular/router';\nimport { DatosService } from './../datos.service';\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.css']\n})\nexport class EditorComponent implements OnInit {\n  public movimiento;\n  constructor(\n      private route: ActivatedRoute, \n      private datosService: DatosService) { \n      // constructor vacío. sólo se usa para reclamar dependencias         \n  }\n  ngOnInit() {\n    // subscripción al observable params\n    this.route.params\n      .subscribe(params => {\n        const _id = params['id'].toString();\n        this.movimiento = this.datosService.getMovimientoBy_Id(_id);\n      });\n  }\n}\n```\n> Hay una estrategia opcional que emplea `Observables` para mantener potenciales cambios de estado en los valores de los parámetros. Si te interesa busca información sobre `Router` .\n\n### Carga diferida\n\nEsta es la funcionalidad más esperada y que sigue siendo un *work in progress*. Cuando las aplicaciones AngularJS crecen en funcionalidad producen un **impacto negativo en la primera vista** de un usuario. Eso es debido a que *Angular* necesita disponer de todo tu código para montar el armazón de dependencias. Esto es así aunque el usuario no vaya a navegar mas que por un conjunto reducido de rutas.\n\nEn aplicaciones de *intranet* o de uso muy intensivo esto no suele ser un gran problema. Esa espera inicial de unos pocos segundos se recupera durante el uso continuado de la aplicación. Pero ciertos desarrollos realmente grandes o, sobre todo, **aplicaciones web públicas para usuarios ocasionales** necesitaban un tratamiento especial.\n\nLa solución es implementar un modelo de *lazy loading* o carga diferida. En este caso el navegador descarga el HTML y el código de la aplicación según el usuario navegue. \n\nEn *Angular2* se incluye esta funcionalidad, pero a día de hoy aún no está disponible con `angular-cli`. Se puede *tunear WebPack* a mano para conseguirlo, pero, si no hay urgencia en salir a producción, no te lo recomiendo. Es preferible esperar un poco y usar el la solución definitiva que implemente la herramienta.\n\nEn cuanto sea *usable* actualizaré este artículo y difundiré la buena nueva a los cuatro vientos. Como sabes aún estamos esperando la primera *Release Candidate* de `angular-cli` y habrá mejoras importantes. \n\nMantente a la última recibiendo el [boletín de noticias de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&id=b67e4d2339) o siguiéndome en las [redes sociales](https://twitter.com/albertobasalo). \n","source":"_posts/Enrutador-de-componentes-con-Angular2-el-nuevo-SPA.md","raw":"---\ntitle: Enrutador de componentes con Angular2 el nuevo SPA\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: enrutado-con-angular2-el-nuevo-spa\nid: 15\nupdated: 2016/12/07 18:23:02\ndate: 2016/06/02 08:52:04\nthumbnail: /css/images/angular.jpg\n---\n\n> Código asociado en [angular2/6-routing/](https://github.com/AcademiaBinaria/angular2/tree/master/6-routing)\n\nLa capacidad de gestionar las **rutas en el cliente** es una de las grandes ventajas de *AngularJS*. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa [ui-router](https://github.com/angular-ui/ui-router). Hemos esperado años la promesa de un nuevo *enrutador* compatible con las versiones 1 y 2. El resultado es **@angular/router**.\n\nDe todo *Angular2*, este es el componente que más ha cambiado durante la fase *Release Candidate*. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos **SPA**.\n\n<!-- more -->\n\n## Módulo de enrutado en base a componentes\n\nLas aplicaciones Angular2 son [árboles de módulos](http://academia-binaria.com/componentes-los-bloques-de-construccion-de-angular-2/). Al menos el módulo raíz `AppModule` y cuantos módulos funcionales nos hagan falta. Utilizando `angular-cli` podemos crear módulos con la capacidad de enrutado generada en... un módulo específico.  \n\nA ver si desbrozamos algo este bosque de módulos.\n\n```javascript\nng new mi-aplicacion --routing true\n```\n\nTanto para la raíz como para las ramas funcionales se creará un fichero. En la raíz será llamado `app-routing.module.ts` con un contenido como este: \n\n```javascript\n/** Módulos de enrutado de Angular2 */\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NgModule } from '@angular/core';\n\n// Array con las rutas de este módulo. Ninguna funcional.\nconst routes: Routes = [\n  { path: '', redirectTo: '' },\n  { path: 'inicio', redirectTo: '' },\n  { path: '**', redirectTo: '', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes) // configuración para el módulo raíz\n  ],\n  exports: [\n    RouterModule // se importará desde el módulo padre\n  ]\n})\nexport class AppRoutingModule { }\n```\n\nEste **módulo** de un único fichero sirve **para definir las rutas de otro módulo padre** asociado, `app.module.ts`, el cual quedará más o menos así:\n\n```javascript\n// importación de módulo de enrutado asociado\nimport { AppRoutingModule } from './app-routing.module';\n// importación de otros módulos de funcionalidad\nimport { HomeModule } from './home/home.module';\n// decorador que define un módulo\n@NgModule({\n  declarations: [ AppComponent ], \n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HomeModule, // el módulo funcional para la 'página home'\n    AppRoutingModule // el módulo de rutas ya configurado\n  ], \n  providers: [] \n  bootstrap: [ AppComponent ] \n})\nexport class AppModule { }\n```\n\n## Módulos funcionales\nEl módulo raíz es fundamental pero nada operativo. Toda el que sea de interés para los usuarios estará en módulos funcionales. En las aplicaciones SPA es una buena práctica crear **un módulo por cada ruta** principal. Incluida la página home. Por ejemplo usando el siguiente comando:\n\n```javascript\nng generate module home --routing true\n```\nAparece un fichero llamado `home-routing-module.ts`. Este módulo se debe configurar para que gestione sus propias rutas.\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n/** Componente enrutable */\nimport { HomeComponent } from './home.component';\n/** Rutas asociadas a componentes */\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n];\n/** array de componentes enrutables */\nexport const routableComponents = [\n  HomeComponent\n];\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes) // Para módulo funcional\n  ],\n  exports: [\n    RouterModule // listo para importarlo en HomeModule\n  ]\n})\nexport class HomeRoutingModule { }\n```\n\nSe crean dos arrays relacionados. EL principal, `routes`, contendrá las **rutas pareadas con sus componentes** respectivos. \nLos cuales también se exportan directamente en la variable `routableComponents`. Esto se hace por comodidad. Para no tener que volver a importarlos en la declaración del módulo padre, que quedará así:\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Importación de las rutas y sus componentes */\nimport { HomeRoutingModule, routableComponents } from './home-routing.module';\n@NgModule({\n  imports: [\n    CommonModule,\n    HomeRoutingModule // el módulo que sabe enrutar\n  ],\n  declarations: [\n    routableComponents // los componentes de enrutado\n  ]\n})\nexport class HomeModule { }\n```\n\n### Carga de componentes según la ruta\nTodo este trabajo de configuración se materializa en las **vistas**. Necesitaremos un lugar dónde inyectar el **componente de turno asociado a la ruta** actual. Presentamos el `router-outlet`. Y para que la aplicación pueda llevarnos de un lugar a otro usaremos  la directiva `routerLink`. \n\nDe forma que la plantilla raíz `app.component.html` quedará normalmente así:\n\n```html\n<!--menú de navegación, sin href-->\n<nav>\n  <a [routerLink]=\"['/']\">Inicio</a>\n  <a [routerLink]=\"['/login']\">Log In</a>\n  <a [routerLink]=\"['/contacto']\">Contacto</a>\n</nav>\n<!--Este componente nativo hace que el enrutador cargue una página dinámicamente-->\n<router-outlet></router-outlet>\n```\n\n\n## Rutas hijas y con parámetros\nDe poco vale un enrutador que sólo atienda a los casos sencillos. Las aplicaciones profesionales plantean mayores retos. \n### Rutas hijas\nUn ejemplo son las **rutas anidadas**, aquí llamadas rutas hijas. Son aquellas en las que una parte de la visualización es común y otra depende de la ruta concreta.\n\nVeamos un ejemplo dónde se pretende dar de alta y mostrar una lista de elementos. La base de cualquier *CRUD*. Así quedaría el fichero `movimientos-routing.module.ts`.\n \n```javascript\n/** Importación de los componentes enrutables */\nimport { MovimientosComponent } from './movimientos.component';\nimport { ListaComponent } from './lista/lista.component';\nimport { NuevoComponent } from './nuevo/nuevo.component';\n\nconst routes: Routes = [\n  {\n    path: 'movimientos',\n    component: MovimientosComponent,\n    children: [ // rutas hijas, se verán dentro del componente padre\n      {\n        path: 'nuevo', // la ruta real es movimientos/nuevo\n        component: NuevoComponent\n      },\n      {\n        path: 'lista',\n        component: ListaComponent\n      }\n    ]\n  }\n];\nexport const routableComponents = [\n  NuevoComponent,\n  ListaComponent,\n  MovimientosComponent\n]\n```\nEste mini-módulo es muy denso. Contrasta con la simplicidad del `movimientos.module.ts` que reduce su responsabilidad. Sólo tiene que importar los módulos adecuados.\n\n```javascript\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Módulo de enrutado y componentes */\nimport { MovimientosRoutingModule, routableComponents } from './movimientos-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MovimientosRoutingModule\n  ], // dependencias de otros módulos, especialmente el de enrutado\n  declarations: [\n    routableComponents\n  ], // Los componentes vienen del fichero movimientos-routing.module.ts\n  exports: [\n\n  ], // no necesita exportar nada\n})\n```\n\nVemos que la idea es que los ficheros de definición de módulos funcionales **deleguen toda la lógica** posible a su propio módulo de enrutado.\n\nMientras tanto en la vista... Habíamos dejado la *template* del componente raíz con un `router-outlet`. Será ahí dónde se cargue el `MovimientosComponent` cuando se active la ruta *'/movimientos'*. Pero, ¿y las rutas hijas?, ¿qué se carga y dónde se carga cuando se activa la ruta *'/movimientos/nuevo'* o la ruta *'/movimientos/lista'* ?.\n\nEchemos un vistazo a `movimientos.component.html` para comprobar que dispone de su propio `router-outlet`. \n\n```html\n<nav>\n   <a routerLink=\"/movimientos/nuevo\" >Nuevo Movimiento</a>\n   <a routerLink=\"/movimientos/lista\" >Lista de Movimientos</a>\n</nav>\n<router-outlet></router-outlet>\n```\n\nSerá en este elemento donde se inyecten los componentes asociados a las rutas hijas. Este *anidamiento* permite hacer aplicaciones modulares y acceder a vistas específicas con rutas específicas. \n\n\n### Rutas con parámetros \n\nHasta ahora usé rutas fijas para navegar. Lo más normal es que estas **plantillas contengan segmentos variables** llamados parámetros. Para incorporar parámetros a tu esquema de rutas tienes que actuar en tres fases:\n\n#### 1- Definir la parte paramétrica de la plantilla generadora de rutas\n\nEl *path* del objeto ruta se convierte en una plantilla que admite distintos valores. Así queda ahora el módulo enrutador de movimientos:\n\n```javascript\nconst routes: Routes = [\n  {\n    path: 'movimientos',\n    component: MovimientosComponent,\n    children: [ // rutas hijas, se verán dentro del componente padre\n      {\n        path: 'nuevo', // la ruta real es movimientos/nuevo\n        component: NuevoComponent\n      },\n      {\n        path: 'lista',\n        component: ListaComponent\n      }\n    ]\n  },\n  {\n    path: 'movimientos/:id', // parámetro variable id    \n    component: EditorComponent\n  }\n];\n```\n\nLos parámetros se prefijan con `:` y en cada ruta se pueden usar tantos como sea necesario. \n\n>Obsérvese que en este caso la ruta 'movimientos/:id' es hermana, no hija, de la primera. Por tanto se mostrará en el `router-outlet` del componente raíz. Se ha hecho así para mostrar distintas maneras de trabajar en el 'router'.\n\n \n\n#### 2- Montar los enlaces asignando valores a los parámetros\n\nEsto se puede hacer en las plantillas HTML o en por código. Siempre usando el **array de `routerLink`** sin necesidad de concatenar cadenas para para montar rutas. Este array en su segunda posición llevará un objeto que represente los valores de los parámetros. \n\nEn un caso de navegación por código sencillo tendrá esta pinta:\n```javascript\n  // para ir a la ruta /movimientos/42\n  this.router.navigate(['movimientos', 42])\n```\n\nUsando desde la vista en igual de sencillo con la directiva `routerLink`, como en este ejemplo HTML:\n\n```html\n<a [routerLink]=\"['/movimientos', 42 ]\">42</a>\n```\n\n#### 3- Recuperar los valores de los parámetros a partir de las rutas\nLa novedad más llamativa es la presencia de `OnInit`. Es un *hook*, o evento de la vida de un componente. Este evento se ejecuta al iniciarse el componente pero cuando ya la ruta se ha resuelto completamente. \nEn ese momento puedes usar `ActivatedRoute`, un servicio que entre otras cosas te dará acceso a un *observable* que emite los valores actuales de los parámetros.\nPor ejemplo, esto sería el código del componente `editor.component.ts` que se activa con rutas como *'/movimientos/42'*\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\n/** Servicio para acceder a la ruta activa */\nimport { ActivatedRoute } from '@angular/router';\nimport { DatosService } from './../datos.service';\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.css']\n})\nexport class EditorComponent implements OnInit {\n  public movimiento;\n  constructor(\n      private route: ActivatedRoute, \n      private datosService: DatosService) { \n      // constructor vacío. sólo se usa para reclamar dependencias         \n  }\n  ngOnInit() {\n    // subscripción al observable params\n    this.route.params\n      .subscribe(params => {\n        const _id = params['id'].toString();\n        this.movimiento = this.datosService.getMovimientoBy_Id(_id);\n      });\n  }\n}\n```\n> Hay una estrategia opcional que emplea `Observables` para mantener potenciales cambios de estado en los valores de los parámetros. Si te interesa busca información sobre `Router` .\n\n### Carga diferida\n\nEsta es la funcionalidad más esperada y que sigue siendo un *work in progress*. Cuando las aplicaciones AngularJS crecen en funcionalidad producen un **impacto negativo en la primera vista** de un usuario. Eso es debido a que *Angular* necesita disponer de todo tu código para montar el armazón de dependencias. Esto es así aunque el usuario no vaya a navegar mas que por un conjunto reducido de rutas.\n\nEn aplicaciones de *intranet* o de uso muy intensivo esto no suele ser un gran problema. Esa espera inicial de unos pocos segundos se recupera durante el uso continuado de la aplicación. Pero ciertos desarrollos realmente grandes o, sobre todo, **aplicaciones web públicas para usuarios ocasionales** necesitaban un tratamiento especial.\n\nLa solución es implementar un modelo de *lazy loading* o carga diferida. En este caso el navegador descarga el HTML y el código de la aplicación según el usuario navegue. \n\nEn *Angular2* se incluye esta funcionalidad, pero a día de hoy aún no está disponible con `angular-cli`. Se puede *tunear WebPack* a mano para conseguirlo, pero, si no hay urgencia en salir a producción, no te lo recomiendo. Es preferible esperar un poco y usar el la solución definitiva que implemente la herramienta.\n\nEn cuanto sea *usable* actualizaré este artículo y difundiré la buena nueva a los cuatro vientos. Como sabes aún estamos esperando la primera *Release Candidate* de `angular-cli` y habrá mejoras importantes. \n\nMantente a la última recibiendo el [boletín de noticias de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&id=b67e4d2339) o siguiéndome en las [redes sociales](https://twitter.com/albertobasalo). \n","slug":"enrutado-con-angular2-el-nuevo-spa","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj08000oc7jsfzwv52hx","content":"<blockquote>\n<p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/6-routing\" target=\"_blank\" rel=\"external\">angular2/6-routing/</a></p>\n</blockquote>\n<p>La capacidad de gestionar las <strong>rutas en el cliente</strong> es una de las grandes ventajas de <em>AngularJS</em>. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa <a href=\"https://github.com/angular-ui/ui-router\" target=\"_blank\" rel=\"external\">ui-router</a>. Hemos esperado años la promesa de un nuevo <em>enrutador</em> compatible con las versiones 1 y 2. El resultado es <strong>@angular/router</strong>.</p>\n<p>De todo <em>Angular2</em>, este es el componente que más ha cambiado durante la fase <em>Release Candidate</em>. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos <strong>SPA</strong>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Modulo-de-enrutado-en-base-a-componentes\"><a href=\"#Modulo-de-enrutado-en-base-a-componentes\" class=\"headerlink\" title=\"Módulo de enrutado en base a componentes\"></a>Módulo de enrutado en base a componentes</h2><p>Las aplicaciones Angular2 son <a href=\"http://academia-binaria.com/componentes-los-bloques-de-construccion-de-angular-2/\">árboles de módulos</a>. Al menos el módulo raíz <code>AppModule</code> y cuantos módulos funcionales nos hagan falta. Utilizando <code>angular-cli</code> podemos crear módulos con la capacidad de enrutado generada en… un módulo específico.  </p>\n<p>A ver si desbrozamos algo este bosque de módulos.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng <span class=\"keyword\">new</span> mi-aplicacion --routing <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Tanto para la raíz como para las ramas funcionales se creará un fichero. En la raíz será llamado <code>app-routing.module.ts</code> con un contenido como este: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Módulos de enrutado de Angular2 */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array con las rutas de este módulo. Ninguna funcional.</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">''</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'inicio'</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'**'</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span>, <span class=\"attr\">pathMatch</span>: <span class=\"string\">'full'</span> &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forRoot(routes) <span class=\"comment\">// configuración para el módulo raíz</span></div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    RouterModule <span class=\"comment\">// se importará desde el módulo padre</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>Este <strong>módulo</strong> de un único fichero sirve <strong>para definir las rutas de otro módulo padre</strong> asociado, <code>app.module.ts</code>, el cual quedará más o menos así:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importación de módulo de enrutado asociado</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app-routing.module'</span>;</div><div class=\"line\"><span class=\"comment\">// importación de otros módulos de funcionalidad</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home/home.module'</span>;</div><div class=\"line\"><span class=\"comment\">// decorador que define un módulo</span></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [ AppComponent ], </div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule,</div><div class=\"line\">    HomeModule, <span class=\"comment\">// el módulo funcional para la 'página home'</span></div><div class=\"line\">    AppRoutingModule <span class=\"comment\">// el módulo de rutas ya configurado</span></div><div class=\"line\">  ], </div><div class=\"line\">  providers: [] </div><div class=\"line\">  bootstrap: [ AppComponent ] </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Modulos-funcionales\"><a href=\"#Modulos-funcionales\" class=\"headerlink\" title=\"Módulos funcionales\"></a>Módulos funcionales</h2><p>El módulo raíz es fundamental pero nada operativo. Toda el que sea de interés para los usuarios estará en módulos funcionales. En las aplicaciones SPA es una buena práctica crear <strong>un módulo por cada ruta</strong> principal. Incluida la página home. Por ejemplo usando el siguiente comando:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng generate <span class=\"built_in\">module</span> home --routing <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Aparece un fichero llamado <code>home-routing-module.ts</code>. Este módulo se debe configurar para que gestione sus propias rutas.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"comment\">/** Componente enrutable */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home.component'</span>;</div><div class=\"line\"><span class=\"comment\">/** Rutas asociadas a componentes */</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">''</span>, <span class=\"attr\">component</span>: HomeComponent &#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"comment\">/** array de componentes enrutables */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routableComponents = [</div><div class=\"line\">  HomeComponent</div><div class=\"line\">];</div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forChild(routes) <span class=\"comment\">// Para módulo funcional</span></div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    RouterModule <span class=\"comment\">// listo para importarlo en HomeModule</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeRoutingModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>Se crean dos arrays relacionados. EL principal, <code>routes</code>, contendrá las <strong>rutas pareadas con sus componentes</strong> respectivos.<br>Los cuales también se exportan directamente en la variable <code>routableComponents</code>. Esto se hace por comodidad. Para no tener que volver a importarlos en la declaración del módulo padre, que quedará así:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Importación de las rutas y sus componentes */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeRoutingModule, routableComponents &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home-routing.module'</span>;</div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    HomeRoutingModule <span class=\"comment\">// el módulo que sabe enrutar</span></div><div class=\"line\">  ],</div><div class=\"line\">  declarations: [</div><div class=\"line\">    routableComponents <span class=\"comment\">// los componentes de enrutado</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Carga-de-componentes-segun-la-ruta\"><a href=\"#Carga-de-componentes-segun-la-ruta\" class=\"headerlink\" title=\"Carga de componentes según la ruta\"></a>Carga de componentes según la ruta</h3><p>Todo este trabajo de configuración se materializa en las <strong>vistas</strong>. Necesitaremos un lugar dónde inyectar el <strong>componente de turno asociado a la ruta</strong> actual. Presentamos el <code>router-outlet</code>. Y para que la aplicación pueda llevarnos de un lugar a otro usaremos  la directiva <code>routerLink</code>. </p>\n<p>De forma que la plantilla raíz <code>app.component.html</code> quedará normalmente así:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--menú de navegación, sin href--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/']\"</span>&gt;</span>Inicio<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/login']\"</span>&gt;</span>Log In<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/contacto']\"</span>&gt;</span>Contacto<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--Este componente nativo hace que el enrutador cargue una página dinámicamente--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Rutas-hijas-y-con-parametros\"><a href=\"#Rutas-hijas-y-con-parametros\" class=\"headerlink\" title=\"Rutas hijas y con parámetros\"></a>Rutas hijas y con parámetros</h2><p>De poco vale un enrutador que sólo atienda a los casos sencillos. Las aplicaciones profesionales plantean mayores retos. </p>\n<h3 id=\"Rutas-hijas\"><a href=\"#Rutas-hijas\" class=\"headerlink\" title=\"Rutas hijas\"></a>Rutas hijas</h3><p>Un ejemplo son las <strong>rutas anidadas</strong>, aquí llamadas rutas hijas. Son aquellas en las que una parte de la visualización es común y otra depende de la ruta concreta.</p>\n<p>Veamos un ejemplo dónde se pretende dar de alta y mostrar una lista de elementos. La base de cualquier <em>CRUD</em>. Así quedaría el fichero <code>movimientos-routing.module.ts</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Importación de los componentes enrutables */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ListaComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lista/lista.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NuevoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./nuevo/nuevo.component'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos'</span>,</div><div class=\"line\">    component: MovimientosComponent,</div><div class=\"line\">    children: [ <span class=\"comment\">// rutas hijas, se verán dentro del componente padre</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'nuevo'</span>, <span class=\"comment\">// la ruta real es movimientos/nuevo</span></div><div class=\"line\">        component: NuevoComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'lista'</span>,</div><div class=\"line\">        component: ListaComponent</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routableComponents = [</div><div class=\"line\">  NuevoComponent,</div><div class=\"line\">  ListaComponent,</div><div class=\"line\">  MovimientosComponent</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>Este mini-módulo es muy denso. Contrasta con la simplicidad del <code>movimientos.module.ts</code> que reduce su responsabilidad. Sólo tiene que importar los módulos adecuados.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Módulo de enrutado y componentes */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosRoutingModule, routableComponents &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos-routing.module'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    MovimientosRoutingModule</div><div class=\"line\">  ], <span class=\"comment\">// dependencias de otros módulos, especialmente el de enrutado</span></div><div class=\"line\">  declarations: [</div><div class=\"line\">    routableComponents</div><div class=\"line\">  ], <span class=\"comment\">// Los componentes vienen del fichero movimientos-routing.module.ts</span></div><div class=\"line\">  exports: [</div><div class=\"line\"></div><div class=\"line\">  ], <span class=\"comment\">// no necesita exportar nada</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Vemos que la idea es que los ficheros de definición de módulos funcionales <strong>deleguen toda la lógica</strong> posible a su propio módulo de enrutado.</p>\n<p>Mientras tanto en la vista… Habíamos dejado la <em>template</em> del componente raíz con un <code>router-outlet</code>. Será ahí dónde se cargue el <code>MovimientosComponent</code> cuando se active la ruta <em>‘/movimientos’</em>. Pero, ¿y las rutas hijas?, ¿qué se carga y dónde se carga cuando se activa la ruta <em>‘/movimientos/nuevo’</em> o la ruta <em>‘/movimientos/lista’</em> ?.</p>\n<p>Echemos un vistazo a <code>movimientos.component.html</code> para comprobar que dispone de su propio <code>router-outlet</code>. </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/movimientos/nuevo\"</span> &gt;</span>Nuevo Movimiento<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/movimientos/lista\"</span> &gt;</span>Lista de Movimientos<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Será en este elemento donde se inyecten los componentes asociados a las rutas hijas. Este <em>anidamiento</em> permite hacer aplicaciones modulares y acceder a vistas específicas con rutas específicas. </p>\n<h3 id=\"Rutas-con-parametros\"><a href=\"#Rutas-con-parametros\" class=\"headerlink\" title=\"Rutas con parámetros\"></a>Rutas con parámetros</h3><p>Hasta ahora usé rutas fijas para navegar. Lo más normal es que estas <strong>plantillas contengan segmentos variables</strong> llamados parámetros. Para incorporar parámetros a tu esquema de rutas tienes que actuar en tres fases:</p>\n<h4 id=\"1-Definir-la-parte-parametrica-de-la-plantilla-generadora-de-rutas\"><a href=\"#1-Definir-la-parte-parametrica-de-la-plantilla-generadora-de-rutas\" class=\"headerlink\" title=\"1- Definir la parte paramétrica de la plantilla generadora de rutas\"></a>1- Definir la parte paramétrica de la plantilla generadora de rutas</h4><p>El <em>path</em> del objeto ruta se convierte en una plantilla que admite distintos valores. Así queda ahora el módulo enrutador de movimientos:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos'</span>,</div><div class=\"line\">    component: MovimientosComponent,</div><div class=\"line\">    children: [ <span class=\"comment\">// rutas hijas, se verán dentro del componente padre</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'nuevo'</span>, <span class=\"comment\">// la ruta real es movimientos/nuevo</span></div><div class=\"line\">        component: NuevoComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'lista'</span>,</div><div class=\"line\">        component: ListaComponent</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos/:id'</span>, <span class=\"comment\">// parámetro variable id    </span></div><div class=\"line\">    component: EditorComponent</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<p>Los parámetros se prefijan con <code>:</code> y en cada ruta se pueden usar tantos como sea necesario. </p>\n<blockquote>\n<p>Obsérvese que en este caso la ruta ‘movimientos/:id’ es hermana, no hija, de la primera. Por tanto se mostrará en el <code>router-outlet</code> del componente raíz. Se ha hecho así para mostrar distintas maneras de trabajar en el ‘router’.</p>\n</blockquote>\n<h4 id=\"2-Montar-los-enlaces-asignando-valores-a-los-parametros\"><a href=\"#2-Montar-los-enlaces-asignando-valores-a-los-parametros\" class=\"headerlink\" title=\"2- Montar los enlaces asignando valores a los parámetros\"></a>2- Montar los enlaces asignando valores a los parámetros</h4><p>Esto se puede hacer en las plantillas HTML o en por código. Siempre usando el <strong>array de <code>routerLink</code></strong> sin necesidad de concatenar cadenas para para montar rutas. Este array en su segunda posición llevará un objeto que represente los valores de los parámetros. </p>\n<p>En un caso de navegación por código sencillo tendrá esta pinta:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// para ir a la ruta /movimientos/42</span></div><div class=\"line\"><span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'movimientos'</span>, <span class=\"number\">42</span>])</div></pre></td></tr></table></figure></p>\n<p>Usando desde la vista en igual de sencillo con la directiva <code>routerLink</code>, como en este ejemplo HTML:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/movimientos', 42 ]\"</span>&gt;</span>42<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-Recuperar-los-valores-de-los-parametros-a-partir-de-las-rutas\"><a href=\"#3-Recuperar-los-valores-de-los-parametros-a-partir-de-las-rutas\" class=\"headerlink\" title=\"3- Recuperar los valores de los parámetros a partir de las rutas\"></a>3- Recuperar los valores de los parámetros a partir de las rutas</h4><p>La novedad más llamativa es la presencia de <code>OnInit</code>. Es un <em>hook</em>, o evento de la vida de un componente. Este evento se ejecuta al iniciarse el componente pero cuando ya la ruta se ha resuelto completamente.<br>En ese momento puedes usar <code>ActivatedRoute</code>, un servicio que entre otras cosas te dará acceso a un <em>observable</em> que emite los valores actuales de los parámetros.<br>Por ejemplo, esto sería el código del componente <code>editor.component.ts</code> que se activa con rutas como <em>‘/movimientos/42’</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">/** Servicio para acceder a la ruta activa */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; DatosService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../datos.service'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-editor'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'./editor.component.html'</span>,</div><div class=\"line\">  styleUrls: [<span class=\"string\">'./editor.component.css'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">  public movimiento;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(</div><div class=\"line\">      private route: ActivatedRoute, </div><div class=\"line\">      private datosService: DatosService) &#123; </div><div class=\"line\">      <span class=\"comment\">// constructor vacío. sólo se usa para reclamar dependencias         </span></div><div class=\"line\">  &#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"comment\">// subscripción al observable params</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.route.params</div><div class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> _id = params[<span class=\"string\">'id'</span>].toString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.movimiento = <span class=\"keyword\">this</span>.datosService.getMovimientoBy_Id(_id);</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Hay una estrategia opcional que emplea <code>Observables</code> para mantener potenciales cambios de estado en los valores de los parámetros. Si te interesa busca información sobre <code>Router</code> .</p>\n</blockquote>\n<h3 id=\"Carga-diferida\"><a href=\"#Carga-diferida\" class=\"headerlink\" title=\"Carga diferida\"></a>Carga diferida</h3><p>Esta es la funcionalidad más esperada y que sigue siendo un <em>work in progress</em>. Cuando las aplicaciones AngularJS crecen en funcionalidad producen un <strong>impacto negativo en la primera vista</strong> de un usuario. Eso es debido a que <em>Angular</em> necesita disponer de todo tu código para montar el armazón de dependencias. Esto es así aunque el usuario no vaya a navegar mas que por un conjunto reducido de rutas.</p>\n<p>En aplicaciones de <em>intranet</em> o de uso muy intensivo esto no suele ser un gran problema. Esa espera inicial de unos pocos segundos se recupera durante el uso continuado de la aplicación. Pero ciertos desarrollos realmente grandes o, sobre todo, <strong>aplicaciones web públicas para usuarios ocasionales</strong> necesitaban un tratamiento especial.</p>\n<p>La solución es implementar un modelo de <em>lazy loading</em> o carga diferida. En este caso el navegador descarga el HTML y el código de la aplicación según el usuario navegue. </p>\n<p>En <em>Angular2</em> se incluye esta funcionalidad, pero a día de hoy aún no está disponible con <code>angular-cli</code>. Se puede <em>tunear WebPack</em> a mano para conseguirlo, pero, si no hay urgencia en salir a producción, no te lo recomiendo. Es preferible esperar un poco y usar el la solución definitiva que implemente la herramienta.</p>\n<p>En cuanto sea <em>usable</em> actualizaré este artículo y difundiré la buena nueva a los cuatro vientos. Como sabes aún estamos esperando la primera <em>Release Candidate</em> de <code>angular-cli</code> y habrá mejoras importantes. </p>\n<p>Mantente a la última recibiendo el <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">boletín de noticias de Academia Binaria</a> o siguiéndome en las <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">redes sociales</a>. </p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/6-routing\" target=\"_blank\" rel=\"external\">angular2/6-routing/</a></p>\n</blockquote>\n<p>La capacidad de gestionar las <strong>rutas en el cliente</strong> es una de las grandes ventajas de <em>AngularJS</em>. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa <a href=\"https://github.com/angular-ui/ui-router\" target=\"_blank\" rel=\"external\">ui-router</a>. Hemos esperado años la promesa de un nuevo <em>enrutador</em> compatible con las versiones 1 y 2. El resultado es <strong>@angular/router</strong>.</p>\n<p>De todo <em>Angular2</em>, este es el componente que más ha cambiado durante la fase <em>Release Candidate</em>. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos <strong>SPA</strong>.</p>","more":"<h2 id=\"Modulo-de-enrutado-en-base-a-componentes\"><a href=\"#Modulo-de-enrutado-en-base-a-componentes\" class=\"headerlink\" title=\"Módulo de enrutado en base a componentes\"></a>Módulo de enrutado en base a componentes</h2><p>Las aplicaciones Angular2 son <a href=\"http://academia-binaria.com/componentes-los-bloques-de-construccion-de-angular-2/\">árboles de módulos</a>. Al menos el módulo raíz <code>AppModule</code> y cuantos módulos funcionales nos hagan falta. Utilizando <code>angular-cli</code> podemos crear módulos con la capacidad de enrutado generada en… un módulo específico.  </p>\n<p>A ver si desbrozamos algo este bosque de módulos.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng <span class=\"keyword\">new</span> mi-aplicacion --routing <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Tanto para la raíz como para las ramas funcionales se creará un fichero. En la raíz será llamado <code>app-routing.module.ts</code> con un contenido como este: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Módulos de enrutado de Angular2 */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array con las rutas de este módulo. Ninguna funcional.</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">''</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'inicio'</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'**'</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span>, <span class=\"attr\">pathMatch</span>: <span class=\"string\">'full'</span> &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forRoot(routes) <span class=\"comment\">// configuración para el módulo raíz</span></div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    RouterModule <span class=\"comment\">// se importará desde el módulo padre</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>Este <strong>módulo</strong> de un único fichero sirve <strong>para definir las rutas de otro módulo padre</strong> asociado, <code>app.module.ts</code>, el cual quedará más o menos así:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importación de módulo de enrutado asociado</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app-routing.module'</span>;</div><div class=\"line\"><span class=\"comment\">// importación de otros módulos de funcionalidad</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home/home.module'</span>;</div><div class=\"line\"><span class=\"comment\">// decorador que define un módulo</span></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [ AppComponent ], </div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule,</div><div class=\"line\">    HomeModule, <span class=\"comment\">// el módulo funcional para la 'página home'</span></div><div class=\"line\">    AppRoutingModule <span class=\"comment\">// el módulo de rutas ya configurado</span></div><div class=\"line\">  ], </div><div class=\"line\">  providers: [] </div><div class=\"line\">  bootstrap: [ AppComponent ] </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Modulos-funcionales\"><a href=\"#Modulos-funcionales\" class=\"headerlink\" title=\"Módulos funcionales\"></a>Módulos funcionales</h2><p>El módulo raíz es fundamental pero nada operativo. Toda el que sea de interés para los usuarios estará en módulos funcionales. En las aplicaciones SPA es una buena práctica crear <strong>un módulo por cada ruta</strong> principal. Incluida la página home. Por ejemplo usando el siguiente comando:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng generate <span class=\"built_in\">module</span> home --routing <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Aparece un fichero llamado <code>home-routing-module.ts</code>. Este módulo se debe configurar para que gestione sus propias rutas.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"comment\">/** Componente enrutable */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home.component'</span>;</div><div class=\"line\"><span class=\"comment\">/** Rutas asociadas a componentes */</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">''</span>, <span class=\"attr\">component</span>: HomeComponent &#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"comment\">/** array de componentes enrutables */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routableComponents = [</div><div class=\"line\">  HomeComponent</div><div class=\"line\">];</div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forChild(routes) <span class=\"comment\">// Para módulo funcional</span></div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    RouterModule <span class=\"comment\">// listo para importarlo en HomeModule</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeRoutingModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>Se crean dos arrays relacionados. EL principal, <code>routes</code>, contendrá las <strong>rutas pareadas con sus componentes</strong> respectivos.<br>Los cuales también se exportan directamente en la variable <code>routableComponents</code>. Esto se hace por comodidad. Para no tener que volver a importarlos en la declaración del módulo padre, que quedará así:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Importación de las rutas y sus componentes */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeRoutingModule, routableComponents &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home-routing.module'</span>;</div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    HomeRoutingModule <span class=\"comment\">// el módulo que sabe enrutar</span></div><div class=\"line\">  ],</div><div class=\"line\">  declarations: [</div><div class=\"line\">    routableComponents <span class=\"comment\">// los componentes de enrutado</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Carga-de-componentes-segun-la-ruta\"><a href=\"#Carga-de-componentes-segun-la-ruta\" class=\"headerlink\" title=\"Carga de componentes según la ruta\"></a>Carga de componentes según la ruta</h3><p>Todo este trabajo de configuración se materializa en las <strong>vistas</strong>. Necesitaremos un lugar dónde inyectar el <strong>componente de turno asociado a la ruta</strong> actual. Presentamos el <code>router-outlet</code>. Y para que la aplicación pueda llevarnos de un lugar a otro usaremos  la directiva <code>routerLink</code>. </p>\n<p>De forma que la plantilla raíz <code>app.component.html</code> quedará normalmente así:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--menú de navegación, sin href--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/']\"</span>&gt;</span>Inicio<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/login']\"</span>&gt;</span>Log In<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/contacto']\"</span>&gt;</span>Contacto<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--Este componente nativo hace que el enrutador cargue una página dinámicamente--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Rutas-hijas-y-con-parametros\"><a href=\"#Rutas-hijas-y-con-parametros\" class=\"headerlink\" title=\"Rutas hijas y con parámetros\"></a>Rutas hijas y con parámetros</h2><p>De poco vale un enrutador que sólo atienda a los casos sencillos. Las aplicaciones profesionales plantean mayores retos. </p>\n<h3 id=\"Rutas-hijas\"><a href=\"#Rutas-hijas\" class=\"headerlink\" title=\"Rutas hijas\"></a>Rutas hijas</h3><p>Un ejemplo son las <strong>rutas anidadas</strong>, aquí llamadas rutas hijas. Son aquellas en las que una parte de la visualización es común y otra depende de la ruta concreta.</p>\n<p>Veamos un ejemplo dónde se pretende dar de alta y mostrar una lista de elementos. La base de cualquier <em>CRUD</em>. Así quedaría el fichero <code>movimientos-routing.module.ts</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Importación de los componentes enrutables */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ListaComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lista/lista.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NuevoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./nuevo/nuevo.component'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos'</span>,</div><div class=\"line\">    component: MovimientosComponent,</div><div class=\"line\">    children: [ <span class=\"comment\">// rutas hijas, se verán dentro del componente padre</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'nuevo'</span>, <span class=\"comment\">// la ruta real es movimientos/nuevo</span></div><div class=\"line\">        component: NuevoComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'lista'</span>,</div><div class=\"line\">        component: ListaComponent</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routableComponents = [</div><div class=\"line\">  NuevoComponent,</div><div class=\"line\">  ListaComponent,</div><div class=\"line\">  MovimientosComponent</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>Este mini-módulo es muy denso. Contrasta con la simplicidad del <code>movimientos.module.ts</code> que reduce su responsabilidad. Sólo tiene que importar los módulos adecuados.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Módulo de enrutado y componentes */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosRoutingModule, routableComponents &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos-routing.module'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    MovimientosRoutingModule</div><div class=\"line\">  ], <span class=\"comment\">// dependencias de otros módulos, especialmente el de enrutado</span></div><div class=\"line\">  declarations: [</div><div class=\"line\">    routableComponents</div><div class=\"line\">  ], <span class=\"comment\">// Los componentes vienen del fichero movimientos-routing.module.ts</span></div><div class=\"line\">  exports: [</div><div class=\"line\"></div><div class=\"line\">  ], <span class=\"comment\">// no necesita exportar nada</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Vemos que la idea es que los ficheros de definición de módulos funcionales <strong>deleguen toda la lógica</strong> posible a su propio módulo de enrutado.</p>\n<p>Mientras tanto en la vista… Habíamos dejado la <em>template</em> del componente raíz con un <code>router-outlet</code>. Será ahí dónde se cargue el <code>MovimientosComponent</code> cuando se active la ruta <em>‘/movimientos’</em>. Pero, ¿y las rutas hijas?, ¿qué se carga y dónde se carga cuando se activa la ruta <em>‘/movimientos/nuevo’</em> o la ruta <em>‘/movimientos/lista’</em> ?.</p>\n<p>Echemos un vistazo a <code>movimientos.component.html</code> para comprobar que dispone de su propio <code>router-outlet</code>. </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/movimientos/nuevo\"</span> &gt;</span>Nuevo Movimiento<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/movimientos/lista\"</span> &gt;</span>Lista de Movimientos<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Será en este elemento donde se inyecten los componentes asociados a las rutas hijas. Este <em>anidamiento</em> permite hacer aplicaciones modulares y acceder a vistas específicas con rutas específicas. </p>\n<h3 id=\"Rutas-con-parametros\"><a href=\"#Rutas-con-parametros\" class=\"headerlink\" title=\"Rutas con parámetros\"></a>Rutas con parámetros</h3><p>Hasta ahora usé rutas fijas para navegar. Lo más normal es que estas <strong>plantillas contengan segmentos variables</strong> llamados parámetros. Para incorporar parámetros a tu esquema de rutas tienes que actuar en tres fases:</p>\n<h4 id=\"1-Definir-la-parte-parametrica-de-la-plantilla-generadora-de-rutas\"><a href=\"#1-Definir-la-parte-parametrica-de-la-plantilla-generadora-de-rutas\" class=\"headerlink\" title=\"1- Definir la parte paramétrica de la plantilla generadora de rutas\"></a>1- Definir la parte paramétrica de la plantilla generadora de rutas</h4><p>El <em>path</em> del objeto ruta se convierte en una plantilla que admite distintos valores. Así queda ahora el módulo enrutador de movimientos:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos'</span>,</div><div class=\"line\">    component: MovimientosComponent,</div><div class=\"line\">    children: [ <span class=\"comment\">// rutas hijas, se verán dentro del componente padre</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'nuevo'</span>, <span class=\"comment\">// la ruta real es movimientos/nuevo</span></div><div class=\"line\">        component: NuevoComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'lista'</span>,</div><div class=\"line\">        component: ListaComponent</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos/:id'</span>, <span class=\"comment\">// parámetro variable id    </span></div><div class=\"line\">    component: EditorComponent</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<p>Los parámetros se prefijan con <code>:</code> y en cada ruta se pueden usar tantos como sea necesario. </p>\n<blockquote>\n<p>Obsérvese que en este caso la ruta ‘movimientos/:id’ es hermana, no hija, de la primera. Por tanto se mostrará en el <code>router-outlet</code> del componente raíz. Se ha hecho así para mostrar distintas maneras de trabajar en el ‘router’.</p>\n</blockquote>\n<h4 id=\"2-Montar-los-enlaces-asignando-valores-a-los-parametros\"><a href=\"#2-Montar-los-enlaces-asignando-valores-a-los-parametros\" class=\"headerlink\" title=\"2- Montar los enlaces asignando valores a los parámetros\"></a>2- Montar los enlaces asignando valores a los parámetros</h4><p>Esto se puede hacer en las plantillas HTML o en por código. Siempre usando el <strong>array de <code>routerLink</code></strong> sin necesidad de concatenar cadenas para para montar rutas. Este array en su segunda posición llevará un objeto que represente los valores de los parámetros. </p>\n<p>En un caso de navegación por código sencillo tendrá esta pinta:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// para ir a la ruta /movimientos/42</span></div><div class=\"line\"><span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'movimientos'</span>, <span class=\"number\">42</span>])</div></pre></td></tr></table></figure></p>\n<p>Usando desde la vista en igual de sencillo con la directiva <code>routerLink</code>, como en este ejemplo HTML:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/movimientos', 42 ]\"</span>&gt;</span>42<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-Recuperar-los-valores-de-los-parametros-a-partir-de-las-rutas\"><a href=\"#3-Recuperar-los-valores-de-los-parametros-a-partir-de-las-rutas\" class=\"headerlink\" title=\"3- Recuperar los valores de los parámetros a partir de las rutas\"></a>3- Recuperar los valores de los parámetros a partir de las rutas</h4><p>La novedad más llamativa es la presencia de <code>OnInit</code>. Es un <em>hook</em>, o evento de la vida de un componente. Este evento se ejecuta al iniciarse el componente pero cuando ya la ruta se ha resuelto completamente.<br>En ese momento puedes usar <code>ActivatedRoute</code>, un servicio que entre otras cosas te dará acceso a un <em>observable</em> que emite los valores actuales de los parámetros.<br>Por ejemplo, esto sería el código del componente <code>editor.component.ts</code> que se activa con rutas como <em>‘/movimientos/42’</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">/** Servicio para acceder a la ruta activa */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; DatosService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../datos.service'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-editor'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'./editor.component.html'</span>,</div><div class=\"line\">  styleUrls: [<span class=\"string\">'./editor.component.css'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">  public movimiento;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(</div><div class=\"line\">      private route: ActivatedRoute, </div><div class=\"line\">      private datosService: DatosService) &#123; </div><div class=\"line\">      <span class=\"comment\">// constructor vacío. sólo se usa para reclamar dependencias         </span></div><div class=\"line\">  &#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"comment\">// subscripción al observable params</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.route.params</div><div class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> _id = params[<span class=\"string\">'id'</span>].toString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.movimiento = <span class=\"keyword\">this</span>.datosService.getMovimientoBy_Id(_id);</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Hay una estrategia opcional que emplea <code>Observables</code> para mantener potenciales cambios de estado en los valores de los parámetros. Si te interesa busca información sobre <code>Router</code> .</p>\n</blockquote>\n<h3 id=\"Carga-diferida\"><a href=\"#Carga-diferida\" class=\"headerlink\" title=\"Carga diferida\"></a>Carga diferida</h3><p>Esta es la funcionalidad más esperada y que sigue siendo un <em>work in progress</em>. Cuando las aplicaciones AngularJS crecen en funcionalidad producen un <strong>impacto negativo en la primera vista</strong> de un usuario. Eso es debido a que <em>Angular</em> necesita disponer de todo tu código para montar el armazón de dependencias. Esto es así aunque el usuario no vaya a navegar mas que por un conjunto reducido de rutas.</p>\n<p>En aplicaciones de <em>intranet</em> o de uso muy intensivo esto no suele ser un gran problema. Esa espera inicial de unos pocos segundos se recupera durante el uso continuado de la aplicación. Pero ciertos desarrollos realmente grandes o, sobre todo, <strong>aplicaciones web públicas para usuarios ocasionales</strong> necesitaban un tratamiento especial.</p>\n<p>La solución es implementar un modelo de <em>lazy loading</em> o carga diferida. En este caso el navegador descarga el HTML y el código de la aplicación según el usuario navegue. </p>\n<p>En <em>Angular2</em> se incluye esta funcionalidad, pero a día de hoy aún no está disponible con <code>angular-cli</code>. Se puede <em>tunear WebPack</em> a mano para conseguirlo, pero, si no hay urgencia en salir a producción, no te lo recomiendo. Es preferible esperar un poco y usar el la solución definitiva que implemente la herramienta.</p>\n<p>En cuanto sea <em>usable</em> actualizaré este artículo y difundiré la buena nueva a los cuatro vientos. Como sabes aún estamos esperando la primera <em>Release Candidate</em> de <code>angular-cli</code> y habrá mejoras importantes. </p>\n<p>Mantente a la última recibiendo el <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">boletín de noticias de Academia Binaria</a> o siguiéndome en las <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">redes sociales</a>. </p>"},{"title":"Formularios de datos en Angular2","id":"21","updated":"2016-06-22T16:05:58.000Z","date":"2016-06-22T14:32:34.000Z","thumbnail":"/css/images/angular.jpg","_content":"\nLos formularios en AngularJS fueron un éxito inicial debido entre otras coas al *double binding*. Otra cosa que no fue nunca simple es la **validación de controles en los formularios**. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un *Work in progress.*\n  \n<!-- more -->\n\n### Dependencias\nCon el lío de versiones de los últimos días, conviene que os muestre con qué he hecho mi prueba.\n```json\n\"dependencies\": {\n    \"@angular/common\": \"2.0.0-rc.3\",\n    \"@angular/compiler\": \"2.0.0-rc.3\",\n    \"@angular/core\": \"2.0.0-rc.3\",\n    \"@angular/forms\": \"^0.1.1\",\n    \"@angular/http\": \"2.0.0-rc.3\",\n    \"@angular/platform-browser\": \"2.0.0-rc.3\",\n    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.3\",\n    \"@angular/router\": \"3.0.0-alpha.7\",\n    \"es6-shim\": \"^0.35.0\",\n    \"reflect-metadata\": \"0.1.3\",\n    \"rxjs\": \"5.0.0-beta.6\",\n    \"systemjs\": \"0.19.26\",\n    \"zone.js\": \"^0.6.12\"\n  }\n```\n\nComo veis están actualizadas a la `RC.3` y `forms 0.1.1`.\n> Si usas **SystemJS**, acuérdate de incluir `@angular/forms` en el fichero `system-config.json`\n\nEn el `main.ts` debemos registrar los *providers* que permiten la convivencia de la actual versión de *forms* y la anterior (de la semana pasada) ya obsoleta.\n\n```javascript\nimport { disableDeprecatedForms, provideForms } from '@angular/forms';\nbootstrap(CashFlowAppComponent,[\n  disableDeprecatedForms(),\n  provideForms()\n]);\n```\n\n### Plantillas html para hacer formularios\nVamos a tratar de mantener el **html limpio** hasta dónde sea posible. En un futuro espero que incluso sea prescindible y que se pueda generar de forma automática a partir de datos de configuración.\n```html\n<form [formGroup]=\"formularioMovimiento\">\n  <label>Tipo:</label>\n  <input type=\"text\" formControlName=\"tipo\">\n  <p>\n    <span *ngIf=\"formularioMovimiento.controls['tipo'].touched && !formularioMovimiento.controls['tipo'].valid\">\n      Necesitamos el tipo de movimiento\n    </span>\n  </p>\n  <label>Categoría:</label>\n  <input type=\"text\" formControlName=\"categoria\"><p></p>\n  <label>Fecha:</label>\n  <input type=\"date\" formControlName=\"fecha\"><p></p>\n  <label>Importe:</label>\n  <input type=\"number\" formControlName=\"importe\"> <p>\n    <span *ngIf=\"formularioMovimiento.controls['importe'].touched && !formularioMovimiento.controls['importe'].valid\">\n      Necesitamos el tipo de movimiento\n    </span>\n  </p>\n  <button \n    type=\"submit\" \n    [disabled]=\"!formularioMovimiento.valid\"\n    (click)=\"guardarMovimiento()\" >Guardar\n  </button>\n</form>\n```\n\nSe incluyen la lógica para mostrar mensajes de validación y activación del botón de guardado. He optado por no usar la definción de variables en la plantilla mediante `#`.\n\n### Lógica y datos en el componente\nTrataremos de llevar la **lógica de generación y validación de datos** al componente y programarlo en TypeScript. Puede ser por mi pasado *backender* pero me encuentro más cómodo cuanto más lejos de un lenguaje de marcas.\n \nPara empezar necesitamos registrar las herramientas. El proveedor `FormBuilder` nos ayuda a definir los controles asociados al formulario y sus validaciones.\n\n```javascript\nimport { REACTIVE_FORM_DIRECTIVES, FormBuilder, FormGroup, Validators  } from '@angular/forms';\n@Component({\n  directives: [REACTIVE_FORM_DIRECTIVES],\n  providers:[FormBuilder]\n})\n```\nEn el evento `OnInit` construimos la estructura de soporte al formulario. Se puede hacer mucho más compleja, mediante la inclusión de grupos de controles anidados.\n\n```javascript\nngOnInit() {\n    this.formularioMovimiento = this.formBuilder.group({\n      tipo: ['',Validators.required],\n      categoria: [],\n      fecha: [],\n      importe:['',Validators.required]\n    });\n  }\n```\n\nAntes de enviar datos a un serviciop se pueden hacer validaciones y ttransformacipnes previas. El acceso a los valores del formulario se hace través de su propiedad `.value`. Con esto ya realizaremos los envíos a los servicios...\n\n```javascript\nguardarMovimiento() {       \n this.miServicio.Guardar(this.formularioMovimiento.value);\n}\n```\n### Validación\nLa validación temprana es el objetivo fundamental de un desarrollo de formularios. Es buena para el usuario y buena para el sistema. Angular2 facilita la implementación de las validaciones estándar y permite la creación de las tuyas propias.\n\nLo veremos en próximas entregas. Sígueme en [mi cuenta de twitter](https://twitter.com/albertobasalo) o suscríbete a la [revista mensual de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339) y serás el primero en ser informado.\n\n*Keep coding, keep learning.*\n","source":"_posts/Formularios-de-datos-en-Angular2.md","raw":"---\ntitle: Formularios de datos en Angular2\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: formularios-de-datos-en-angular2\nid: 21\nupdated: 2016-06-22 18:05:58\ndate: 2016-06-22 16:32:34\nthumbnail: /css/images/angular.jpg\n---\n\nLos formularios en AngularJS fueron un éxito inicial debido entre otras coas al *double binding*. Otra cosa que no fue nunca simple es la **validación de controles en los formularios**. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un *Work in progress.*\n  \n<!-- more -->\n\n### Dependencias\nCon el lío de versiones de los últimos días, conviene que os muestre con qué he hecho mi prueba.\n```json\n\"dependencies\": {\n    \"@angular/common\": \"2.0.0-rc.3\",\n    \"@angular/compiler\": \"2.0.0-rc.3\",\n    \"@angular/core\": \"2.0.0-rc.3\",\n    \"@angular/forms\": \"^0.1.1\",\n    \"@angular/http\": \"2.0.0-rc.3\",\n    \"@angular/platform-browser\": \"2.0.0-rc.3\",\n    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.3\",\n    \"@angular/router\": \"3.0.0-alpha.7\",\n    \"es6-shim\": \"^0.35.0\",\n    \"reflect-metadata\": \"0.1.3\",\n    \"rxjs\": \"5.0.0-beta.6\",\n    \"systemjs\": \"0.19.26\",\n    \"zone.js\": \"^0.6.12\"\n  }\n```\n\nComo veis están actualizadas a la `RC.3` y `forms 0.1.1`.\n> Si usas **SystemJS**, acuérdate de incluir `@angular/forms` en el fichero `system-config.json`\n\nEn el `main.ts` debemos registrar los *providers* que permiten la convivencia de la actual versión de *forms* y la anterior (de la semana pasada) ya obsoleta.\n\n```javascript\nimport { disableDeprecatedForms, provideForms } from '@angular/forms';\nbootstrap(CashFlowAppComponent,[\n  disableDeprecatedForms(),\n  provideForms()\n]);\n```\n\n### Plantillas html para hacer formularios\nVamos a tratar de mantener el **html limpio** hasta dónde sea posible. En un futuro espero que incluso sea prescindible y que se pueda generar de forma automática a partir de datos de configuración.\n```html\n<form [formGroup]=\"formularioMovimiento\">\n  <label>Tipo:</label>\n  <input type=\"text\" formControlName=\"tipo\">\n  <p>\n    <span *ngIf=\"formularioMovimiento.controls['tipo'].touched && !formularioMovimiento.controls['tipo'].valid\">\n      Necesitamos el tipo de movimiento\n    </span>\n  </p>\n  <label>Categoría:</label>\n  <input type=\"text\" formControlName=\"categoria\"><p></p>\n  <label>Fecha:</label>\n  <input type=\"date\" formControlName=\"fecha\"><p></p>\n  <label>Importe:</label>\n  <input type=\"number\" formControlName=\"importe\"> <p>\n    <span *ngIf=\"formularioMovimiento.controls['importe'].touched && !formularioMovimiento.controls['importe'].valid\">\n      Necesitamos el tipo de movimiento\n    </span>\n  </p>\n  <button \n    type=\"submit\" \n    [disabled]=\"!formularioMovimiento.valid\"\n    (click)=\"guardarMovimiento()\" >Guardar\n  </button>\n</form>\n```\n\nSe incluyen la lógica para mostrar mensajes de validación y activación del botón de guardado. He optado por no usar la definción de variables en la plantilla mediante `#`.\n\n### Lógica y datos en el componente\nTrataremos de llevar la **lógica de generación y validación de datos** al componente y programarlo en TypeScript. Puede ser por mi pasado *backender* pero me encuentro más cómodo cuanto más lejos de un lenguaje de marcas.\n \nPara empezar necesitamos registrar las herramientas. El proveedor `FormBuilder` nos ayuda a definir los controles asociados al formulario y sus validaciones.\n\n```javascript\nimport { REACTIVE_FORM_DIRECTIVES, FormBuilder, FormGroup, Validators  } from '@angular/forms';\n@Component({\n  directives: [REACTIVE_FORM_DIRECTIVES],\n  providers:[FormBuilder]\n})\n```\nEn el evento `OnInit` construimos la estructura de soporte al formulario. Se puede hacer mucho más compleja, mediante la inclusión de grupos de controles anidados.\n\n```javascript\nngOnInit() {\n    this.formularioMovimiento = this.formBuilder.group({\n      tipo: ['',Validators.required],\n      categoria: [],\n      fecha: [],\n      importe:['',Validators.required]\n    });\n  }\n```\n\nAntes de enviar datos a un serviciop se pueden hacer validaciones y ttransformacipnes previas. El acceso a los valores del formulario se hace través de su propiedad `.value`. Con esto ya realizaremos los envíos a los servicios...\n\n```javascript\nguardarMovimiento() {       \n this.miServicio.Guardar(this.formularioMovimiento.value);\n}\n```\n### Validación\nLa validación temprana es el objetivo fundamental de un desarrollo de formularios. Es buena para el usuario y buena para el sistema. Angular2 facilita la implementación de las validaciones estándar y permite la creación de las tuyas propias.\n\nLo veremos en próximas entregas. Sígueme en [mi cuenta de twitter](https://twitter.com/albertobasalo) o suscríbete a la [revista mensual de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339) y serás el primero en ser informado.\n\n*Keep coding, keep learning.*\n","slug":"formularios-de-datos-en-angular2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj0d000sc7jsj56jy53r","content":"<p>Los formularios en AngularJS fueron un éxito inicial debido entre otras coas al <em>double binding</em>. Otra cosa que no fue nunca simple es la <strong>validación de controles en los formularios</strong>. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un <em>Work in progress.</em></p>\n<a id=\"more\"></a>\n<h3 id=\"Dependencias\"><a href=\"#Dependencias\" class=\"headerlink\" title=\"Dependencias\"></a>Dependencias</h3><p>Con el lío de versiones de los últimos días, conviene que os muestre con qué he hecho mi prueba.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"@angular/common\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/compiler\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/core\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/forms\": \"^0.1.1\",</div><div class=\"line\">    \"@angular/http\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/platform-browser\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/router\": \"3.0.0-alpha.7\",</div><div class=\"line\">    \"es6-shim\": \"^0.35.0\",</div><div class=\"line\">    \"reflect-metadata\": \"0.1.3\",</div><div class=\"line\">    \"rxjs\": \"5.0.0-beta.6\",</div><div class=\"line\">    \"systemjs\": \"0.19.26\",</div><div class=\"line\">    \"zone.js\": \"^0.6.12\"</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>Como veis están actualizadas a la <code>RC.3</code> y <code>forms 0.1.1</code>.</p>\n<blockquote>\n<p>Si usas <strong>SystemJS</strong>, acuérdate de incluir <code>@angular/forms</code> en el fichero <code>system-config.json</code></p>\n</blockquote>\n<p>En el <code>main.ts</code> debemos registrar los <em>providers</em> que permiten la convivencia de la actual versión de <em>forms</em> y la anterior (de la semana pasada) ya obsoleta.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; disableDeprecatedForms, provideForms &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">bootstrap(CashFlowAppComponent,[</div><div class=\"line\">  disableDeprecatedForms(),</div><div class=\"line\">  provideForms()</div><div class=\"line\">]);</div></pre></td></tr></table></figure>\n<h3 id=\"Plantillas-html-para-hacer-formularios\"><a href=\"#Plantillas-html-para-hacer-formularios\" class=\"headerlink\" title=\"Plantillas html para hacer formularios\"></a>Plantillas html para hacer formularios</h3><p>Vamos a tratar de mantener el <strong>html limpio</strong> hasta dónde sea posible. En un futuro espero que incluso sea prescindible y que se pueda generar de forma automática a partir de datos de configuración.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"formularioMovimiento\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Tipo:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"tipo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"formularioMovimiento.controls['tipo'].touched &amp;&amp; !formularioMovimiento.controls['tipo'].valid\"</span>&gt;</span></div><div class=\"line\">      Necesitamos el tipo de movimiento</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Categoría:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"categoria\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Fecha:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"fecha\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Importe:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"importe\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"formularioMovimiento.controls['importe'].touched &amp;&amp; !formularioMovimiento.controls['importe'].valid\"</span>&gt;</span></div><div class=\"line\">      Necesitamos el tipo de movimiento</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> </span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"!formularioMovimiento.valid\"</span></span></div><div class=\"line\"><span class=\"tag\">    (<span class=\"attr\">click</span>)=<span class=\"string\">\"guardarMovimiento()\"</span> &gt;</span>Guardar</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Se incluyen la lógica para mostrar mensajes de validación y activación del botón de guardado. He optado por no usar la definción de variables en la plantilla mediante <code>#</code>.</p>\n<h3 id=\"Logica-y-datos-en-el-componente\"><a href=\"#Logica-y-datos-en-el-componente\" class=\"headerlink\" title=\"Lógica y datos en el componente\"></a>Lógica y datos en el componente</h3><p>Trataremos de llevar la <strong>lógica de generación y validación de datos</strong> al componente y programarlo en TypeScript. Puede ser por mi pasado <em>backender</em> pero me encuentro más cómodo cuanto más lejos de un lenguaje de marcas.</p>\n<p>Para empezar necesitamos registrar las herramientas. El proveedor <code>FormBuilder</code> nos ayuda a definir los controles asociados al formulario y sus validaciones.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; REACTIVE_FORM_DIRECTIVES, FormBuilder, FormGroup, Validators  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  directives: [REACTIVE_FORM_DIRECTIVES],</div><div class=\"line\">  providers:[FormBuilder]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>En el evento <code>OnInit</code> construimos la estructura de soporte al formulario. Se puede hacer mucho más compleja, mediante la inclusión de grupos de controles anidados.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formularioMovimiento = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</div><div class=\"line\">      tipo: [<span class=\"string\">''</span>,Validators.required],</div><div class=\"line\">      categoria: [],</div><div class=\"line\">      fecha: [],</div><div class=\"line\">      importe:[<span class=\"string\">''</span>,Validators.required]</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>Antes de enviar datos a un serviciop se pueden hacer validaciones y ttransformacipnes previas. El acceso a los valores del formulario se hace través de su propiedad <code>.value</code>. Con esto ya realizaremos los envíos a los servicios…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">guardarMovimiento() &#123;       </div><div class=\"line\"> <span class=\"keyword\">this</span>.miServicio.Guardar(<span class=\"keyword\">this</span>.formularioMovimiento.value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Validacion\"><a href=\"#Validacion\" class=\"headerlink\" title=\"Validación\"></a>Validación</h3><p>La validación temprana es el objetivo fundamental de un desarrollo de formularios. Es buena para el usuario y buena para el sistema. Angular2 facilita la implementación de las validaciones estándar y permite la creación de las tuyas propias.</p>\n<p>Lo veremos en próximas entregas. Sígueme en <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">mi cuenta de twitter</a> o suscríbete a la <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">revista mensual de Academia Binaria</a> y serás el primero en ser informado.</p>\n<p><em>Keep coding, keep learning.</em></p>\n","site":{"data":{}},"excerpt":"<p>Los formularios en AngularJS fueron un éxito inicial debido entre otras coas al <em>double binding</em>. Otra cosa que no fue nunca simple es la <strong>validación de controles en los formularios</strong>. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un <em>Work in progress.</em></p>","more":"<h3 id=\"Dependencias\"><a href=\"#Dependencias\" class=\"headerlink\" title=\"Dependencias\"></a>Dependencias</h3><p>Con el lío de versiones de los últimos días, conviene que os muestre con qué he hecho mi prueba.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"@angular/common\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/compiler\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/core\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/forms\": \"^0.1.1\",</div><div class=\"line\">    \"@angular/http\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/platform-browser\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/router\": \"3.0.0-alpha.7\",</div><div class=\"line\">    \"es6-shim\": \"^0.35.0\",</div><div class=\"line\">    \"reflect-metadata\": \"0.1.3\",</div><div class=\"line\">    \"rxjs\": \"5.0.0-beta.6\",</div><div class=\"line\">    \"systemjs\": \"0.19.26\",</div><div class=\"line\">    \"zone.js\": \"^0.6.12\"</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>Como veis están actualizadas a la <code>RC.3</code> y <code>forms 0.1.1</code>.</p>\n<blockquote>\n<p>Si usas <strong>SystemJS</strong>, acuérdate de incluir <code>@angular/forms</code> en el fichero <code>system-config.json</code></p>\n</blockquote>\n<p>En el <code>main.ts</code> debemos registrar los <em>providers</em> que permiten la convivencia de la actual versión de <em>forms</em> y la anterior (de la semana pasada) ya obsoleta.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; disableDeprecatedForms, provideForms &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">bootstrap(CashFlowAppComponent,[</div><div class=\"line\">  disableDeprecatedForms(),</div><div class=\"line\">  provideForms()</div><div class=\"line\">]);</div></pre></td></tr></table></figure>\n<h3 id=\"Plantillas-html-para-hacer-formularios\"><a href=\"#Plantillas-html-para-hacer-formularios\" class=\"headerlink\" title=\"Plantillas html para hacer formularios\"></a>Plantillas html para hacer formularios</h3><p>Vamos a tratar de mantener el <strong>html limpio</strong> hasta dónde sea posible. En un futuro espero que incluso sea prescindible y que se pueda generar de forma automática a partir de datos de configuración.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"formularioMovimiento\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Tipo:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"tipo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"formularioMovimiento.controls['tipo'].touched &amp;&amp; !formularioMovimiento.controls['tipo'].valid\"</span>&gt;</span></div><div class=\"line\">      Necesitamos el tipo de movimiento</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Categoría:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"categoria\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Fecha:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"fecha\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Importe:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"importe\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"formularioMovimiento.controls['importe'].touched &amp;&amp; !formularioMovimiento.controls['importe'].valid\"</span>&gt;</span></div><div class=\"line\">      Necesitamos el tipo de movimiento</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> </span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"!formularioMovimiento.valid\"</span></span></div><div class=\"line\"><span class=\"tag\">    (<span class=\"attr\">click</span>)=<span class=\"string\">\"guardarMovimiento()\"</span> &gt;</span>Guardar</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Se incluyen la lógica para mostrar mensajes de validación y activación del botón de guardado. He optado por no usar la definción de variables en la plantilla mediante <code>#</code>.</p>\n<h3 id=\"Logica-y-datos-en-el-componente\"><a href=\"#Logica-y-datos-en-el-componente\" class=\"headerlink\" title=\"Lógica y datos en el componente\"></a>Lógica y datos en el componente</h3><p>Trataremos de llevar la <strong>lógica de generación y validación de datos</strong> al componente y programarlo en TypeScript. Puede ser por mi pasado <em>backender</em> pero me encuentro más cómodo cuanto más lejos de un lenguaje de marcas.</p>\n<p>Para empezar necesitamos registrar las herramientas. El proveedor <code>FormBuilder</code> nos ayuda a definir los controles asociados al formulario y sus validaciones.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; REACTIVE_FORM_DIRECTIVES, FormBuilder, FormGroup, Validators  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  directives: [REACTIVE_FORM_DIRECTIVES],</div><div class=\"line\">  providers:[FormBuilder]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>En el evento <code>OnInit</code> construimos la estructura de soporte al formulario. Se puede hacer mucho más compleja, mediante la inclusión de grupos de controles anidados.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formularioMovimiento = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</div><div class=\"line\">      tipo: [<span class=\"string\">''</span>,Validators.required],</div><div class=\"line\">      categoria: [],</div><div class=\"line\">      fecha: [],</div><div class=\"line\">      importe:[<span class=\"string\">''</span>,Validators.required]</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>Antes de enviar datos a un serviciop se pueden hacer validaciones y ttransformacipnes previas. El acceso a los valores del formulario se hace través de su propiedad <code>.value</code>. Con esto ya realizaremos los envíos a los servicios…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">guardarMovimiento() &#123;       </div><div class=\"line\"> <span class=\"keyword\">this</span>.miServicio.Guardar(<span class=\"keyword\">this</span>.formularioMovimiento.value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Validacion\"><a href=\"#Validacion\" class=\"headerlink\" title=\"Validación\"></a>Validación</h3><p>La validación temprana es el objetivo fundamental de un desarrollo de formularios. Es buena para el usuario y buena para el sistema. Angular2 facilita la implementación de las validaciones estándar y permite la creación de las tuyas propias.</p>\n<p>Lo veremos en próximas entregas. Sígueme en <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">mi cuenta de twitter</a> o suscríbete a la <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">revista mensual de Academia Binaria</a> y serás el primero en ser informado.</p>\n<p><em>Keep coding, keep learning.</em></p>"},{"title":"Hola Angular5 CLI","date":"2017-11-07T12:38:42.000Z","updated":"2017-11-08T08:47:00.000Z","thumbnail":"/css/images/angular-5_0_cli_1-5.jpg","_content":"![Tutorial Angular5 0-CLI1.5](/images/tutorial-angular-5_0_cli_1-5.jpg)\n\n**Angular en su versión 5 es la plataforma perfecta para el desarrollo** profesional de aplicaciones modernas. **El CLI es la herramienta** adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.\n\n<!-- more -->\n\nEl comúnmente conocido como **AngularCLI** o *CLI a secas* es la herramienta de línea de comandos estándar para **crear, depurar y publicar aplicaciones Angular**. En su versión 1.5 es más potente y versátil que nunca. Además es muy sencillo dominar los aspectos básicos.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/angular5/0-hello](https://github.com/AcademiaBinaria/angular5/tree/master/0-hello/cash-flow) \n\n# 1. Instalación de Angular CLI 1.5\nPara empezar, como en casi cualquier desarrollo necesitarás disponer de *NodeJS* y su manejador de de paquetes *npm*. Tenerlos actualizados es un mandamiento básico para un desarrollador web.\n\nEmpieza con una instalación global que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.\n\n```shell\nnpm i -g @angular/cli@latest\nng -v\nng help\nng help new\n```\n\n# 2. Crear y ejecutar una aplicación Angular 5\nUna vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será `ng new` que te va a **generar toda una aplicación funcional** y las configuraciones necesarias para su depuración, pruebas y ejecución.\n\n```shell\nng new cash-flow -p cf --minimal true --routing true \ncd cash-flow\nnpm start\n```\n Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de*npm*  para el arranque de cualquier aplicación: `npm start`.\n\nSi todo va bien, en unos segundo podrás visitar [http://localhost:4000](http://localhost:4000) para ver en marcha la aplicación.\n\nPero volvamos a la terminal y analicemos la primera línea. `ng new cash-flow -p cf --minimal true --routing true`. \n\n> En este tutorial crearemos una aplicación de gestión financiera básica llamada **cash-flow** Una excusa para aprender a programar en Angular; nada serio. El comando [`ng new`](https://github.com/angular/angular-cli/wiki/new) mostrado utiliza opciones que nos vendrán bien en un futuro, aunque por ahora sólo sirven para demostrar las capacidades del generador. Para empezar podríamos habernos limitado a un simple `ng new nombre-de-mi-aplicacion` pero a la larga me vendrá bien usar estas opciones para la práctica que acompaña a este tutorial.\n\n| Comando  | Significado |\n| -------- | ----------- |\n| ng  | programa principal del cli instalado en la máquina  |\n| new  | comando para solicitar la generación una nueva aplicación  |\n| cash-flow  | nombre de la nueva aplicación  |\n| -p  | modificador para establecer un prefijo de nombrado  |\n| cf  | valor del prefijo, normalmente las iniciales de la aplicación  |\n| --minimal  | la aplicación en su mínima expresión   |\n| true  | valor para activar la anterior opción  |\n| --routing  |  vamos a creara una aplicación SPA y eso requiere rutas   |\n| true  | valor para activar la anterior opción  |\n\n# 3. Estructura de una aplicación Angular\nUna vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay **una enorme cantidad de ficheros y carpetas**, las buenas son que como verás, casi todo es **configuración e infraestructura**. \n \n\n## 3.1 Visual Studio Code\nPara ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo [VSCode](https://code.visualstudio.com/). Es un gran editor, gratuito y multiplataforma. Viene con un terminal integrado y puedes mejorarlo instalando extensiones.\n\nAntes de empezar debes instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con *Angular*,  se llama [Angular Essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials). Con eso y el [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) verás Angular en colores.\n\n## 3.2 Carpetas y Ficheros principales\nVolviendo a la estructura de ficheros y carpetas te encontrás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones `.ts`. Son para ficheros [*TypeScript*](https://www.typescriptlang.org/), una evolución del *JavaScript* con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:\n\n+ .angular-cli.json  *: configuración del propio CLI*\n+ package.json *: dependencias de librerías y scripts*\n+ src/ *: la carpeta donde están los archivos fuentes*\n    + index.html *: un fichero HTML índice estándar*\n    + main.ts *: fichero TypeScript de arranque de la aplicación*\n    + app/ *: la carpeta con el código específico de tu aplicación*\n        + app.module.ts *: las aplicaciones son árboles de módulos, y este es su raíz*\n        + app.component.ts *: las páginas son árboles de componentes, y este es su raíz*\n\nEcha un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.\n\n# 4. Edición  \nAngular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de **recargar la aplicación en caliente** en cuanta guardas tu trabajo como programador. En esta última versión, la 1.5, se ha mejorado el proceso y es realmente rápido.\n\nPara probarlo sólo tienes que dejar arrancada la aplicación con el comando `npm start`; **cambiar un fichero de código y comprobar el resultado** en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso *hola mundo*.\n\n## 4.1 Hola Mundo\nAbre el fichero `app.component.ts` y busca dentro de él una clase llamada `AppComponent`. Encontrarás que tiene una propiedad `title`. Asígnale el saludo de rigor: `title = 'Hello World';`. Guarda y comprueba cómo tu navegador se habrá actualizado automáticamente.\n\nToda esta magia depende de una cadena de comandos que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a [*WebPack*](https://webpack.github.io/), un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.\n\nEsta es una lista no exhaustiva de lo que sucede.\n\n1. npm start\n2. ng serve\n3. webpack server en http://localhost:4000\n    1. vigilancia de cambios sobre la carpeta src/\n    2. livereload\n      1. compilado de la aplicación\n      2. recarga del navegador\n\nEsto es sólo el principio, *Angular CLI* puede hacer mucho más por ti. Descúbrelo en su [wiki](https://github.com/angular/angular-cli/wiki) o sigue esta serie para usarlo mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n","source":"_posts/Hola-Angular-5-CLI.md","raw":"---\ntitle: Hola Angular5 CLI\npermalink: hola-angular_5-cli\ndate: 2017-11-07 13:38:42\nupdated: 2017-11-08 09:47:00\ntags:  \n- Angular\n- Angular5\n- CLI\n- Tutorial\ncategories:\n- [Tutorial, Angular5] \nthumbnail: /css/images/angular-5_0_cli_1-5.jpg\n---\n![Tutorial Angular5 0-CLI1.5](/images/tutorial-angular-5_0_cli_1-5.jpg)\n\n**Angular en su versión 5 es la plataforma perfecta para el desarrollo** profesional de aplicaciones modernas. **El CLI es la herramienta** adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.\n\n<!-- more -->\n\nEl comúnmente conocido como **AngularCLI** o *CLI a secas* es la herramienta de línea de comandos estándar para **crear, depurar y publicar aplicaciones Angular**. En su versión 1.5 es más potente y versátil que nunca. Además es muy sencillo dominar los aspectos básicos.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/angular5/0-hello](https://github.com/AcademiaBinaria/angular5/tree/master/0-hello/cash-flow) \n\n# 1. Instalación de Angular CLI 1.5\nPara empezar, como en casi cualquier desarrollo necesitarás disponer de *NodeJS* y su manejador de de paquetes *npm*. Tenerlos actualizados es un mandamiento básico para un desarrollador web.\n\nEmpieza con una instalación global que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.\n\n```shell\nnpm i -g @angular/cli@latest\nng -v\nng help\nng help new\n```\n\n# 2. Crear y ejecutar una aplicación Angular 5\nUna vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será `ng new` que te va a **generar toda una aplicación funcional** y las configuraciones necesarias para su depuración, pruebas y ejecución.\n\n```shell\nng new cash-flow -p cf --minimal true --routing true \ncd cash-flow\nnpm start\n```\n Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de*npm*  para el arranque de cualquier aplicación: `npm start`.\n\nSi todo va bien, en unos segundo podrás visitar [http://localhost:4000](http://localhost:4000) para ver en marcha la aplicación.\n\nPero volvamos a la terminal y analicemos la primera línea. `ng new cash-flow -p cf --minimal true --routing true`. \n\n> En este tutorial crearemos una aplicación de gestión financiera básica llamada **cash-flow** Una excusa para aprender a programar en Angular; nada serio. El comando [`ng new`](https://github.com/angular/angular-cli/wiki/new) mostrado utiliza opciones que nos vendrán bien en un futuro, aunque por ahora sólo sirven para demostrar las capacidades del generador. Para empezar podríamos habernos limitado a un simple `ng new nombre-de-mi-aplicacion` pero a la larga me vendrá bien usar estas opciones para la práctica que acompaña a este tutorial.\n\n| Comando  | Significado |\n| -------- | ----------- |\n| ng  | programa principal del cli instalado en la máquina  |\n| new  | comando para solicitar la generación una nueva aplicación  |\n| cash-flow  | nombre de la nueva aplicación  |\n| -p  | modificador para establecer un prefijo de nombrado  |\n| cf  | valor del prefijo, normalmente las iniciales de la aplicación  |\n| --minimal  | la aplicación en su mínima expresión   |\n| true  | valor para activar la anterior opción  |\n| --routing  |  vamos a creara una aplicación SPA y eso requiere rutas   |\n| true  | valor para activar la anterior opción  |\n\n# 3. Estructura de una aplicación Angular\nUna vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay **una enorme cantidad de ficheros y carpetas**, las buenas son que como verás, casi todo es **configuración e infraestructura**. \n \n\n## 3.1 Visual Studio Code\nPara ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo [VSCode](https://code.visualstudio.com/). Es un gran editor, gratuito y multiplataforma. Viene con un terminal integrado y puedes mejorarlo instalando extensiones.\n\nAntes de empezar debes instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con *Angular*,  se llama [Angular Essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials). Con eso y el [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) verás Angular en colores.\n\n## 3.2 Carpetas y Ficheros principales\nVolviendo a la estructura de ficheros y carpetas te encontrás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones `.ts`. Son para ficheros [*TypeScript*](https://www.typescriptlang.org/), una evolución del *JavaScript* con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:\n\n+ .angular-cli.json  *: configuración del propio CLI*\n+ package.json *: dependencias de librerías y scripts*\n+ src/ *: la carpeta donde están los archivos fuentes*\n    + index.html *: un fichero HTML índice estándar*\n    + main.ts *: fichero TypeScript de arranque de la aplicación*\n    + app/ *: la carpeta con el código específico de tu aplicación*\n        + app.module.ts *: las aplicaciones son árboles de módulos, y este es su raíz*\n        + app.component.ts *: las páginas son árboles de componentes, y este es su raíz*\n\nEcha un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.\n\n# 4. Edición  \nAngular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de **recargar la aplicación en caliente** en cuanta guardas tu trabajo como programador. En esta última versión, la 1.5, se ha mejorado el proceso y es realmente rápido.\n\nPara probarlo sólo tienes que dejar arrancada la aplicación con el comando `npm start`; **cambiar un fichero de código y comprobar el resultado** en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso *hola mundo*.\n\n## 4.1 Hola Mundo\nAbre el fichero `app.component.ts` y busca dentro de él una clase llamada `AppComponent`. Encontrarás que tiene una propiedad `title`. Asígnale el saludo de rigor: `title = 'Hello World';`. Guarda y comprueba cómo tu navegador se habrá actualizado automáticamente.\n\nToda esta magia depende de una cadena de comandos que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a [*WebPack*](https://webpack.github.io/), un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.\n\nEsta es una lista no exhaustiva de lo que sucede.\n\n1. npm start\n2. ng serve\n3. webpack server en http://localhost:4000\n    1. vigilancia de cambios sobre la carpeta src/\n    2. livereload\n      1. compilado de la aplicación\n      2. recarga del navegador\n\nEsto es sólo el principio, *Angular CLI* puede hacer mucho más por ti. Descúbrelo en su [wiki](https://github.com/angular/angular-cli/wiki) o sigue esta serie para usarlo mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n","slug":"hola-angular_5-cli","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj0f000vc7js0i3vpe4h","content":"<p><img src=\"/images/tutorial-angular-5_0_cli_1-5.jpg\" alt=\"Tutorial Angular5 0-CLI1.5\"></p>\n<p><strong>Angular en su versión 5 es la plataforma perfecta para el desarrollo</strong> profesional de aplicaciones modernas. <strong>El CLI es la herramienta</strong> adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.</p>\n<a id=\"more\"></a>\n<p>El comúnmente conocido como <strong>AngularCLI</strong> o <em>CLI a secas</em> es la herramienta de línea de comandos estándar para <strong>crear, depurar y publicar aplicaciones Angular</strong>. En su versión 1.5 es más potente y versátil que nunca. Además es muy sencillo dominar los aspectos básicos.</p>\n<blockquote>\n<p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/0-hello/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/0-hello</a> </p>\n</blockquote>\n<h1 id=\"1-Instalacion-de-Angular-CLI-1-5\"><a href=\"#1-Instalacion-de-Angular-CLI-1-5\" class=\"headerlink\" title=\"1. Instalación de Angular CLI 1.5\"></a>1. Instalación de Angular CLI 1.5</h1><p>Para empezar, como en casi cualquier desarrollo necesitarás disponer de <em>NodeJS</em> y su manejador de de paquetes <em>npm</em>. Tenerlos actualizados es un mandamiento básico para un desarrollador web.</p>\n<p>Empieza con una instalación global que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -g @angular/cli@latest</div><div class=\"line\">ng -v</div><div class=\"line\">ng help</div><div class=\"line\">ng help new</div></pre></td></tr></table></figure>\n<h1 id=\"2-Crear-y-ejecutar-una-aplicacion-Angular-5\"><a href=\"#2-Crear-y-ejecutar-una-aplicacion-Angular-5\" class=\"headerlink\" title=\"2. Crear y ejecutar una aplicación Angular 5\"></a>2. Crear y ejecutar una aplicación Angular 5</h1><p>Una vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será <code>ng new</code> que te va a <strong>generar toda una aplicación funcional</strong> y las configuraciones necesarias para su depuración, pruebas y ejecución.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new cash-flow -p cf --minimal true --routing true </div><div class=\"line\">cd cash-flow</div><div class=\"line\">npm start</div></pre></td></tr></table></figure>\n<p> Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de<em>npm</em>  para el arranque de cualquier aplicación: <code>npm start</code>.</p>\n<p>Si todo va bien, en unos segundo podrás visitar <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> para ver en marcha la aplicación.</p>\n<p>Pero volvamos a la terminal y analicemos la primera línea. <code>ng new cash-flow -p cf --minimal true --routing true</code>. </p>\n<blockquote>\n<p>En este tutorial crearemos una aplicación de gestión financiera básica llamada <strong>cash-flow</strong> Una excusa para aprender a programar en Angular; nada serio. El comando <a href=\"https://github.com/angular/angular-cli/wiki/new\" target=\"_blank\" rel=\"external\"><code>ng new</code></a> mostrado utiliza opciones que nos vendrán bien en un futuro, aunque por ahora sólo sirven para demostrar las capacidades del generador. Para empezar podríamos habernos limitado a un simple <code>ng new nombre-de-mi-aplicacion</code> pero a la larga me vendrá bien usar estas opciones para la práctica que acompaña a este tutorial.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Comando</th>\n<th>Significado</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ng</td>\n<td>programa principal del cli instalado en la máquina</td>\n</tr>\n<tr>\n<td>new</td>\n<td>comando para solicitar la generación una nueva aplicación</td>\n</tr>\n<tr>\n<td>cash-flow</td>\n<td>nombre de la nueva aplicación</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>modificador para establecer un prefijo de nombrado</td>\n</tr>\n<tr>\n<td>cf</td>\n<td>valor del prefijo, normalmente las iniciales de la aplicación</td>\n</tr>\n<tr>\n<td>–minimal</td>\n<td>la aplicación en su mínima expresión</td>\n</tr>\n<tr>\n<td>true</td>\n<td>valor para activar la anterior opción</td>\n</tr>\n<tr>\n<td>–routing</td>\n<td>vamos a creara una aplicación SPA y eso requiere rutas</td>\n</tr>\n<tr>\n<td>true</td>\n<td>valor para activar la anterior opción</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"3-Estructura-de-una-aplicacion-Angular\"><a href=\"#3-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"3. Estructura de una aplicación Angular\"></a>3. Estructura de una aplicación Angular</h1><p>Una vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay <strong>una enorme cantidad de ficheros y carpetas</strong>, las buenas son que como verás, casi todo es <strong>configuración e infraestructura</strong>. </p>\n<h2 id=\"3-1-Visual-Studio-Code\"><a href=\"#3-1-Visual-Studio-Code\" class=\"headerlink\" title=\"3.1 Visual Studio Code\"></a>3.1 Visual Studio Code</h2><p>Para ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a>. Es un gran editor, gratuito y multiplataforma. Viene con un terminal integrado y puedes mejorarlo instalando extensiones.</p>\n<p>Antes de empezar debes instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con <em>Angular</em>,  se llama <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\" target=\"_blank\" rel=\"external\">Angular Essentials</a>. Con eso y el <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"external\">Material Icon Theme</a> verás Angular en colores.</p>\n<h2 id=\"3-2-Carpetas-y-Ficheros-principales\"><a href=\"#3-2-Carpetas-y-Ficheros-principales\" class=\"headerlink\" title=\"3.2 Carpetas y Ficheros principales\"></a>3.2 Carpetas y Ficheros principales</h2><p>Volviendo a la estructura de ficheros y carpetas te encontrás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones <code>.ts</code>. Son para ficheros <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\"><em>TypeScript</em></a>, una evolución del <em>JavaScript</em> con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:</p>\n<ul>\n<li>.angular-cli.json  <em>: configuración del propio CLI</em></li>\n<li>package.json <em>: dependencias de librerías y scripts</em></li>\n<li>src/ <em>: la carpeta donde están los archivos fuentes</em><ul>\n<li>index.html <em>: un fichero HTML índice estándar</em></li>\n<li>main.ts <em>: fichero TypeScript de arranque de la aplicación</em></li>\n<li>app/ <em>: la carpeta con el código específico de tu aplicación</em><ul>\n<li>app.module.ts <em>: las aplicaciones son árboles de módulos, y este es su raíz</em></li>\n<li>app.component.ts <em>: las páginas son árboles de componentes, y este es su raíz</em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Echa un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.</p>\n<h1 id=\"4-Edicion\"><a href=\"#4-Edicion\" class=\"headerlink\" title=\"4. Edición\"></a>4. Edición</h1><p>Angular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de <strong>recargar la aplicación en caliente</strong> en cuanta guardas tu trabajo como programador. En esta última versión, la 1.5, se ha mejorado el proceso y es realmente rápido.</p>\n<p>Para probarlo sólo tienes que dejar arrancada la aplicación con el comando <code>npm start</code>; <strong>cambiar un fichero de código y comprobar el resultado</strong> en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso <em>hola mundo</em>.</p>\n<h2 id=\"4-1-Hola-Mundo\"><a href=\"#4-1-Hola-Mundo\" class=\"headerlink\" title=\"4.1 Hola Mundo\"></a>4.1 Hola Mundo</h2><p>Abre el fichero <code>app.component.ts</code> y busca dentro de él una clase llamada <code>AppComponent</code>. Encontrarás que tiene una propiedad <code>title</code>. Asígnale el saludo de rigor: <code>title = &#39;Hello World&#39;;</code>. Guarda y comprueba cómo tu navegador se habrá actualizado automáticamente.</p>\n<p>Toda esta magia depende de una cadena de comandos que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\"><em>WebPack</em></a>, un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.</p>\n<p>Esta es una lista no exhaustiva de lo que sucede.</p>\n<ol>\n<li>npm start</li>\n<li>ng serve</li>\n<li>webpack server en <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a><ol>\n<li>vigilancia de cambios sobre la carpeta src/</li>\n<li>livereload<ol>\n<li>compilado de la aplicación</li>\n<li>recarga del navegador</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>Esto es sólo el principio, <em>Angular CLI</em> puede hacer mucho más por ti. Descúbrelo en su <a href=\"https://github.com/angular/angular-cli/wiki\" target=\"_blank\" rel=\"external\">wiki</a> o sigue esta serie para usarlo mientras aprendes a programar con Angular5.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-5_0_cli_1-5.jpg\" alt=\"Tutorial Angular5 0-CLI1.5\"></p>\n<p><strong>Angular en su versión 5 es la plataforma perfecta para el desarrollo</strong> profesional de aplicaciones modernas. <strong>El CLI es la herramienta</strong> adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.</p>","more":"<p>El comúnmente conocido como <strong>AngularCLI</strong> o <em>CLI a secas</em> es la herramienta de línea de comandos estándar para <strong>crear, depurar y publicar aplicaciones Angular</strong>. En su versión 1.5 es más potente y versátil que nunca. Además es muy sencillo dominar los aspectos básicos.</p>\n<blockquote>\n<p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/0-hello/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/0-hello</a> </p>\n</blockquote>\n<h1 id=\"1-Instalacion-de-Angular-CLI-1-5\"><a href=\"#1-Instalacion-de-Angular-CLI-1-5\" class=\"headerlink\" title=\"1. Instalación de Angular CLI 1.5\"></a>1. Instalación de Angular CLI 1.5</h1><p>Para empezar, como en casi cualquier desarrollo necesitarás disponer de <em>NodeJS</em> y su manejador de de paquetes <em>npm</em>. Tenerlos actualizados es un mandamiento básico para un desarrollador web.</p>\n<p>Empieza con una instalación global que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -g @angular/cli@latest</div><div class=\"line\">ng -v</div><div class=\"line\">ng help</div><div class=\"line\">ng help new</div></pre></td></tr></table></figure>\n<h1 id=\"2-Crear-y-ejecutar-una-aplicacion-Angular-5\"><a href=\"#2-Crear-y-ejecutar-una-aplicacion-Angular-5\" class=\"headerlink\" title=\"2. Crear y ejecutar una aplicación Angular 5\"></a>2. Crear y ejecutar una aplicación Angular 5</h1><p>Una vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será <code>ng new</code> que te va a <strong>generar toda una aplicación funcional</strong> y las configuraciones necesarias para su depuración, pruebas y ejecución.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new cash-flow -p cf --minimal true --routing true </div><div class=\"line\">cd cash-flow</div><div class=\"line\">npm start</div></pre></td></tr></table></figure>\n<p> Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de<em>npm</em>  para el arranque de cualquier aplicación: <code>npm start</code>.</p>\n<p>Si todo va bien, en unos segundo podrás visitar <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> para ver en marcha la aplicación.</p>\n<p>Pero volvamos a la terminal y analicemos la primera línea. <code>ng new cash-flow -p cf --minimal true --routing true</code>. </p>\n<blockquote>\n<p>En este tutorial crearemos una aplicación de gestión financiera básica llamada <strong>cash-flow</strong> Una excusa para aprender a programar en Angular; nada serio. El comando <a href=\"https://github.com/angular/angular-cli/wiki/new\" target=\"_blank\" rel=\"external\"><code>ng new</code></a> mostrado utiliza opciones que nos vendrán bien en un futuro, aunque por ahora sólo sirven para demostrar las capacidades del generador. Para empezar podríamos habernos limitado a un simple <code>ng new nombre-de-mi-aplicacion</code> pero a la larga me vendrá bien usar estas opciones para la práctica que acompaña a este tutorial.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Comando</th>\n<th>Significado</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ng</td>\n<td>programa principal del cli instalado en la máquina</td>\n</tr>\n<tr>\n<td>new</td>\n<td>comando para solicitar la generación una nueva aplicación</td>\n</tr>\n<tr>\n<td>cash-flow</td>\n<td>nombre de la nueva aplicación</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>modificador para establecer un prefijo de nombrado</td>\n</tr>\n<tr>\n<td>cf</td>\n<td>valor del prefijo, normalmente las iniciales de la aplicación</td>\n</tr>\n<tr>\n<td>–minimal</td>\n<td>la aplicación en su mínima expresión</td>\n</tr>\n<tr>\n<td>true</td>\n<td>valor para activar la anterior opción</td>\n</tr>\n<tr>\n<td>–routing</td>\n<td>vamos a creara una aplicación SPA y eso requiere rutas</td>\n</tr>\n<tr>\n<td>true</td>\n<td>valor para activar la anterior opción</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"3-Estructura-de-una-aplicacion-Angular\"><a href=\"#3-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"3. Estructura de una aplicación Angular\"></a>3. Estructura de una aplicación Angular</h1><p>Una vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay <strong>una enorme cantidad de ficheros y carpetas</strong>, las buenas son que como verás, casi todo es <strong>configuración e infraestructura</strong>. </p>\n<h2 id=\"3-1-Visual-Studio-Code\"><a href=\"#3-1-Visual-Studio-Code\" class=\"headerlink\" title=\"3.1 Visual Studio Code\"></a>3.1 Visual Studio Code</h2><p>Para ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a>. Es un gran editor, gratuito y multiplataforma. Viene con un terminal integrado y puedes mejorarlo instalando extensiones.</p>\n<p>Antes de empezar debes instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con <em>Angular</em>,  se llama <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\" target=\"_blank\" rel=\"external\">Angular Essentials</a>. Con eso y el <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"external\">Material Icon Theme</a> verás Angular en colores.</p>\n<h2 id=\"3-2-Carpetas-y-Ficheros-principales\"><a href=\"#3-2-Carpetas-y-Ficheros-principales\" class=\"headerlink\" title=\"3.2 Carpetas y Ficheros principales\"></a>3.2 Carpetas y Ficheros principales</h2><p>Volviendo a la estructura de ficheros y carpetas te encontrás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones <code>.ts</code>. Son para ficheros <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\"><em>TypeScript</em></a>, una evolución del <em>JavaScript</em> con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:</p>\n<ul>\n<li>.angular-cli.json  <em>: configuración del propio CLI</em></li>\n<li>package.json <em>: dependencias de librerías y scripts</em></li>\n<li>src/ <em>: la carpeta donde están los archivos fuentes</em><ul>\n<li>index.html <em>: un fichero HTML índice estándar</em></li>\n<li>main.ts <em>: fichero TypeScript de arranque de la aplicación</em></li>\n<li>app/ <em>: la carpeta con el código específico de tu aplicación</em><ul>\n<li>app.module.ts <em>: las aplicaciones son árboles de módulos, y este es su raíz</em></li>\n<li>app.component.ts <em>: las páginas son árboles de componentes, y este es su raíz</em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Echa un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.</p>\n<h1 id=\"4-Edicion\"><a href=\"#4-Edicion\" class=\"headerlink\" title=\"4. Edición\"></a>4. Edición</h1><p>Angular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de <strong>recargar la aplicación en caliente</strong> en cuanta guardas tu trabajo como programador. En esta última versión, la 1.5, se ha mejorado el proceso y es realmente rápido.</p>\n<p>Para probarlo sólo tienes que dejar arrancada la aplicación con el comando <code>npm start</code>; <strong>cambiar un fichero de código y comprobar el resultado</strong> en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso <em>hola mundo</em>.</p>\n<h2 id=\"4-1-Hola-Mundo\"><a href=\"#4-1-Hola-Mundo\" class=\"headerlink\" title=\"4.1 Hola Mundo\"></a>4.1 Hola Mundo</h2><p>Abre el fichero <code>app.component.ts</code> y busca dentro de él una clase llamada <code>AppComponent</code>. Encontrarás que tiene una propiedad <code>title</code>. Asígnale el saludo de rigor: <code>title = &#39;Hello World&#39;;</code>. Guarda y comprueba cómo tu navegador se habrá actualizado automáticamente.</p>\n<p>Toda esta magia depende de una cadena de comandos que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\"><em>WebPack</em></a>, un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.</p>\n<p>Esta es una lista no exhaustiva de lo que sucede.</p>\n<ol>\n<li>npm start</li>\n<li>ng serve</li>\n<li>webpack server en <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a><ol>\n<li>vigilancia de cambios sobre la carpeta src/</li>\n<li>livereload<ol>\n<li>compilado de la aplicación</li>\n<li>recarga del navegador</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>Esto es sólo el principio, <em>Angular CLI</em> puede hacer mucho más por ti. Descúbrelo en su <a href=\"https://github.com/angular/angular-cli/wiki\" target=\"_blank\" rel=\"external\">wiki</a> o sigue esta serie para usarlo mientras aprendes a programar con Angular5.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.</p>\n</blockquote>"},{"title":"Hola Mundo Angular 2","id":"12","updated":"2016-10-31T11:36:28.000Z","date":"2016-05-18T14:10:18.000Z","_content":"\n>Código asociado en GitHub: [angular2/1-HolaMundo/](https://github.com/AcademiaBinaria/angular2/tree/master/1-hola-mundo)\n\nQué lejanos aquellos tiempos dónde un [Hola Mundo en AngularJS](https://github.com/AcademiaBinaria/HolaAngularJS) se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear **aplicaciones de nivel empresarial con Angular 2.**\n\nYa he explicado que Angular ha pasado [de framework a plataforma](http://academia-binaria.com/angular2-primeras-impresiones/), y que ya no es para aficionados. Grandes desarrollos en equipo requieren **herramientas y procedimientos** a la altura. La primera opción que te recomiendo es [Angular CLI](https://cli.angular.io/), un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es *aún* más compleja que la que te muestro.\n\n<!-- more -->\n\n## Preparando el entorno\nLas herramientas que voy a usar requieren [NodeJS](nodejs.org). Te recomiendo que instales una de sus últimas versiones. Tras la instalación tendrás acceso a [npm](npmjs.com) para poder instalar librerías y utilidades como Angular CLI.\n\n```\nnpm install -g angular-cli\n```\n\nA partir de ahora en tu linea de comandos podrás usar el programa `ng` seguido de algún comando como `new generate serve lint test e2e build`. Usaremos algunos en esta demo.\n\n## Creando aplicaciones y componentes\nEscoge un directorio en un disco con espacio libre. No es broma, hasta 300 mb o más para empezar. Tranquilo, en distribución la cosa pinta mucho mejor y Angular es muy ligero. Ahora teclea:\n\n\n```\nng new hola-angular-2\n```\n\nUnos segundos o minutos más tarde... podrás abrir la recién creada carpeta, yo lo hago con [VSCode](https://code.visualstudio.com/), y explorar el contenido de sus 3 directorios y miles de ficheros!!!\n\nDespués del susto, tranquilidad de nuevo. La mayoría son dependencias de terceros productos, herramientas necesarias para ejecutar aplicación o para alguno de sus procesos de *test, lint o distribución*. Centrémonos en el directorio `src` dónde están los fuentes, el código que tendríamos que haber creado nosotros.\n\nDe un primer vistazo puede que sólo reconozcas al viejo `index.html`. No te agobies, por ahora es suficiente. Contendrá algo como esto:\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>HolaAngular2</title>\n  <base href=\"/\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <!--Componente raíz de la aplicación-->\n  <app-root>Loading...</app-root>\n</body>\n</html>\n```\n\nDe lo que es Angular 2 lo único interesante es el componente `<app-root>Loading...</app-root>`. Todo, incluida la aplicación principal, debe ser definido y declarado como un componente. De hecho definiremos las aplicaciones Angular2 como árboles de componentes. Y tdodo árbol debe tener una raíz. Mientras Angular no entre en fucionamiento, el susario verá el mensaje de *Loading...* después la magia de Angular2 lo sustituirá por el contenido del componente `app-root` predefinido por el generador. \n\n## TypeScript\nSin entrar en debates de [qué lenguaje usar para programar en Angular2](https://www.youtube.com/watch?v=OpS2R7rbpRg) te resumo mi posición: \n\n1.- TypeScript te permite anotar tu **JavaScript con tipos**. Esto tiene dos ventajas: *intellisense* mientras codificas y chequeo de tipos cuando compilas.\n2.- TypeScript es la **única opción automatizada a día de hoy** con Angular CLI.\n\nPor lo demás no hay porqué alarmarse. [TypeScript](https://www.typescriptlang.org/) es un *superset de JavaScript ES6* con unas mejoras evidentes que no tardarás en dominar. Eso si, tienes que aprender [JavaScript ES2015 o ES6](http://es6-features.org/).\n\nSabiendo esto, entra sin miedo en cualquier fichero de extensión `.ts` y verás que es muy parecido a cualquier `.js` de la nueva versión. Por ejemplo en el citado `main.ts` aparecerá algo así:\n\n```javascript\n// importaciones de dependencias TypeScript al estilo ES6\n// primero los básicos para compatibilidad con navegadores\nimport './polyfills.ts';\n// luego cosas de Angular\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\n// después nuestro código, empezando por la configuración\nimport { environment } from './environments/environment';\n// y por último la aplicación a leída desde el módulo raíz, llamado app por convenio.\nimport { AppModule } from './app/';\n\n// condiciones para ejecutar en modo desarrollo o producción\nif (environment.production) {\n  enableProdMode();\n}\n// arranque de la aplicación invocando al módulo raíz\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\nCentrándonos en el código que habremos de mantener fíjate en la línea `import { AppModule } from './app/';`. Le indica a *WebPack* que importe el contenido de la carpeta `./app/`. Para ello buscará en dicho directorio un archivo `index.ts`. Ese fichero sirve de índice y contiene las instrucciones para exportar el código interesante del resto de la carpeta. En nuestro caso son el módulo y el componente raíz. \n\n## El módulo raíz\nLas aplicaciones Angular2 están pensadas para crecer. Para ello es fundamental cierto grado de modularidad. EL viejo `angular.module` ha vuelto en la versión 2. Mira dentro del fichero `app.module.ts` y verás código similar a este:\n\n```javascript\n// objetos con utilidades comunes del framework\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n// importación del componente raíz, definido en esta misma carpeta\nimport { AppComponent } from './app.component';\n// decorador con metadata que define un módulo\n@NgModule({\n  declarations: [\n    AppComponent\n  ], // cosas declaradas en este módulo\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ], // otros módulos que necesitamos para que este funcione\n  providers: [] , // inyección de servicios comunes para la aplicación\n  bootstrap: [AppComponent] // componente raíz para el arranque\n})\n// los módulos son clases contendoras \n// habitualmente con poco o ningún código\nexport class AppModule { }\n```\n\nUn módulo no es más que una clase contenedora. Cada módulo puede incluir múltiples componentes y servicios. Normalmente un módulo dependerá de otros. El módulo raíz declara un componente especial para el arranque de la aplicación: *El componente raíz*\n\n## El componente raíz\nBuceando a mayor profundidad nos encontramos con el resto del contenido de la carpeta `./app/`. Son archivos con nombres tipo `app.component.*` y se usan para definir un componente.\n\nLos **componentes son los bloques de construcción de Angular 2** que representan regiones de la pantalla. Las aplicaciones se definen como árboles de componentes. Nuestra aplicación es un árbol que tiene una raíz, habitualmente llamado `app` y que es común a cualquier desarrollo.\n\nCada componente a su vez está formado por tres partes:\n1. **La vista**: es el código que se renderizará para los usuarios. Esta plantilla estará en un fichero de extensión `.html`.\n2. **La clase controladora**: En ES6 usaremos clases para declarar los controladores que exponen datos y funcionalidad a la vista.\n3. **Metadata**: Se declara como un decorador, una función especial de TypeScript, que recibe un objeto de configuración. Esto acompaña al controlador en un fichero de extensión `.ts`\n\nEmpecemos por este último fichero, el `app.component.ts`.\n```javascript\nimport { Component } from '@angular/core';\n// Función decoradora que registra un componente\n@Component({\n  selector: 'app-root', // elemento html consumidor\n  templateUrl: './app.component.html', // ruta relativa a la vista\n  styleUrls: ['./app.component.css'] // potencialmente múltiples hojas de estilo\n})\n// clase que representa un controlador \n// con su modelo de datos (title ) y métodos de acción (aún no tiene)\n// Esta clase es todo lo que se exporta en este fichero\n// y esto se importará en app.module.ts para ser incorporado el módulo raíz\nexport class AppComponent {\n  // las propiedades de la clase representan el modelo de datos\n  // son accesibles desde la vista\n  title = 'app works!';\n}\n```\n\nSeguro que la parte más novedosa es `@Component({...})`. Es el equivalente a los antiguos Objetos de Definición de Directivas. Lo que hace es asociar al controlador una plantilla HTML `app.component.html` y un selector para ser invocado desde otra vista `<app-root></app-root>`. El resto por ahora puedes obviarlo.\n\nY hablando de la plantilla, echemos un vistazo a `app.component.html`. Contendrá algo así:\n\n```html\n<h1>\n  <!--Interpolación de variables definidas en el modelo del componente-->\n  {{ title }}\n</h1>\n```\n\nEstas son cosas que te resultarán muy familiares como la interpolación `{{ title }}` que permite mostrar el famoso *app works!*, nueva versión del *hola mundo*. Ya está, el resto ya es sólo usar este componente en el `index.html`, \nRecuerda:\n```html\n  <!--Componente raíz de la aplicación-->\n  <app-root>Loading...</app-root>\n```\n## Angular2 en acción\nPara lanzar y probar tu aplicación necesitas otro comando de Angular-CLI. Este comando se ocupa entre otras cosas de todo el proceso necesario para **transformar el código TypeScript en JavaScript** reconocible por el navegador. También crea un mini servidor estático y además refresca el navegador a cada cambio los fuentes. Un salvavidas para un recién llegado a Angular 2. Teclea en tu terminal:\n\n```\nng serve\n```\n\nSi todo ha ido bien, no siempre ocurre con estas versiones tan verdes, podrás disfrutar de **tu primera aplicación con Angular 2** en [http://localhost:4200](http://localhost:4200)  \n\n\n>[Este vídeo](https://youtu.be/Y7izsxhPpQY) emitido con la colaboración de DesarrolloWeb.com contiene una explicación mas extensa del proceso de trabajo con Angular 2 CLI.\n\n\n\n<div class=\"flex-video\">  \n    <iframe src=\"https://www.youtube.com/embed/Y7izsxhPpQY\"></iframe>\n</div>   ","source":"_posts/Hola-Mundo-Angular-2.md","raw":"---\ntitle: Hola Mundo Angular 2\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: hola-mundo-en-angular-2\nid: 12\nupdated: 2016/10/31 12:36:28\ndate: 2016/05/18 16:10:18\n---\n\n>Código asociado en GitHub: [angular2/1-HolaMundo/](https://github.com/AcademiaBinaria/angular2/tree/master/1-hola-mundo)\n\nQué lejanos aquellos tiempos dónde un [Hola Mundo en AngularJS](https://github.com/AcademiaBinaria/HolaAngularJS) se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear **aplicaciones de nivel empresarial con Angular 2.**\n\nYa he explicado que Angular ha pasado [de framework a plataforma](http://academia-binaria.com/angular2-primeras-impresiones/), y que ya no es para aficionados. Grandes desarrollos en equipo requieren **herramientas y procedimientos** a la altura. La primera opción que te recomiendo es [Angular CLI](https://cli.angular.io/), un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es *aún* más compleja que la que te muestro.\n\n<!-- more -->\n\n## Preparando el entorno\nLas herramientas que voy a usar requieren [NodeJS](nodejs.org). Te recomiendo que instales una de sus últimas versiones. Tras la instalación tendrás acceso a [npm](npmjs.com) para poder instalar librerías y utilidades como Angular CLI.\n\n```\nnpm install -g angular-cli\n```\n\nA partir de ahora en tu linea de comandos podrás usar el programa `ng` seguido de algún comando como `new generate serve lint test e2e build`. Usaremos algunos en esta demo.\n\n## Creando aplicaciones y componentes\nEscoge un directorio en un disco con espacio libre. No es broma, hasta 300 mb o más para empezar. Tranquilo, en distribución la cosa pinta mucho mejor y Angular es muy ligero. Ahora teclea:\n\n\n```\nng new hola-angular-2\n```\n\nUnos segundos o minutos más tarde... podrás abrir la recién creada carpeta, yo lo hago con [VSCode](https://code.visualstudio.com/), y explorar el contenido de sus 3 directorios y miles de ficheros!!!\n\nDespués del susto, tranquilidad de nuevo. La mayoría son dependencias de terceros productos, herramientas necesarias para ejecutar aplicación o para alguno de sus procesos de *test, lint o distribución*. Centrémonos en el directorio `src` dónde están los fuentes, el código que tendríamos que haber creado nosotros.\n\nDe un primer vistazo puede que sólo reconozcas al viejo `index.html`. No te agobies, por ahora es suficiente. Contendrá algo como esto:\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>HolaAngular2</title>\n  <base href=\"/\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <!--Componente raíz de la aplicación-->\n  <app-root>Loading...</app-root>\n</body>\n</html>\n```\n\nDe lo que es Angular 2 lo único interesante es el componente `<app-root>Loading...</app-root>`. Todo, incluida la aplicación principal, debe ser definido y declarado como un componente. De hecho definiremos las aplicaciones Angular2 como árboles de componentes. Y tdodo árbol debe tener una raíz. Mientras Angular no entre en fucionamiento, el susario verá el mensaje de *Loading...* después la magia de Angular2 lo sustituirá por el contenido del componente `app-root` predefinido por el generador. \n\n## TypeScript\nSin entrar en debates de [qué lenguaje usar para programar en Angular2](https://www.youtube.com/watch?v=OpS2R7rbpRg) te resumo mi posición: \n\n1.- TypeScript te permite anotar tu **JavaScript con tipos**. Esto tiene dos ventajas: *intellisense* mientras codificas y chequeo de tipos cuando compilas.\n2.- TypeScript es la **única opción automatizada a día de hoy** con Angular CLI.\n\nPor lo demás no hay porqué alarmarse. [TypeScript](https://www.typescriptlang.org/) es un *superset de JavaScript ES6* con unas mejoras evidentes que no tardarás en dominar. Eso si, tienes que aprender [JavaScript ES2015 o ES6](http://es6-features.org/).\n\nSabiendo esto, entra sin miedo en cualquier fichero de extensión `.ts` y verás que es muy parecido a cualquier `.js` de la nueva versión. Por ejemplo en el citado `main.ts` aparecerá algo así:\n\n```javascript\n// importaciones de dependencias TypeScript al estilo ES6\n// primero los básicos para compatibilidad con navegadores\nimport './polyfills.ts';\n// luego cosas de Angular\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\n// después nuestro código, empezando por la configuración\nimport { environment } from './environments/environment';\n// y por último la aplicación a leída desde el módulo raíz, llamado app por convenio.\nimport { AppModule } from './app/';\n\n// condiciones para ejecutar en modo desarrollo o producción\nif (environment.production) {\n  enableProdMode();\n}\n// arranque de la aplicación invocando al módulo raíz\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\nCentrándonos en el código que habremos de mantener fíjate en la línea `import { AppModule } from './app/';`. Le indica a *WebPack* que importe el contenido de la carpeta `./app/`. Para ello buscará en dicho directorio un archivo `index.ts`. Ese fichero sirve de índice y contiene las instrucciones para exportar el código interesante del resto de la carpeta. En nuestro caso son el módulo y el componente raíz. \n\n## El módulo raíz\nLas aplicaciones Angular2 están pensadas para crecer. Para ello es fundamental cierto grado de modularidad. EL viejo `angular.module` ha vuelto en la versión 2. Mira dentro del fichero `app.module.ts` y verás código similar a este:\n\n```javascript\n// objetos con utilidades comunes del framework\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n// importación del componente raíz, definido en esta misma carpeta\nimport { AppComponent } from './app.component';\n// decorador con metadata que define un módulo\n@NgModule({\n  declarations: [\n    AppComponent\n  ], // cosas declaradas en este módulo\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ], // otros módulos que necesitamos para que este funcione\n  providers: [] , // inyección de servicios comunes para la aplicación\n  bootstrap: [AppComponent] // componente raíz para el arranque\n})\n// los módulos son clases contendoras \n// habitualmente con poco o ningún código\nexport class AppModule { }\n```\n\nUn módulo no es más que una clase contenedora. Cada módulo puede incluir múltiples componentes y servicios. Normalmente un módulo dependerá de otros. El módulo raíz declara un componente especial para el arranque de la aplicación: *El componente raíz*\n\n## El componente raíz\nBuceando a mayor profundidad nos encontramos con el resto del contenido de la carpeta `./app/`. Son archivos con nombres tipo `app.component.*` y se usan para definir un componente.\n\nLos **componentes son los bloques de construcción de Angular 2** que representan regiones de la pantalla. Las aplicaciones se definen como árboles de componentes. Nuestra aplicación es un árbol que tiene una raíz, habitualmente llamado `app` y que es común a cualquier desarrollo.\n\nCada componente a su vez está formado por tres partes:\n1. **La vista**: es el código que se renderizará para los usuarios. Esta plantilla estará en un fichero de extensión `.html`.\n2. **La clase controladora**: En ES6 usaremos clases para declarar los controladores que exponen datos y funcionalidad a la vista.\n3. **Metadata**: Se declara como un decorador, una función especial de TypeScript, que recibe un objeto de configuración. Esto acompaña al controlador en un fichero de extensión `.ts`\n\nEmpecemos por este último fichero, el `app.component.ts`.\n```javascript\nimport { Component } from '@angular/core';\n// Función decoradora que registra un componente\n@Component({\n  selector: 'app-root', // elemento html consumidor\n  templateUrl: './app.component.html', // ruta relativa a la vista\n  styleUrls: ['./app.component.css'] // potencialmente múltiples hojas de estilo\n})\n// clase que representa un controlador \n// con su modelo de datos (title ) y métodos de acción (aún no tiene)\n// Esta clase es todo lo que se exporta en este fichero\n// y esto se importará en app.module.ts para ser incorporado el módulo raíz\nexport class AppComponent {\n  // las propiedades de la clase representan el modelo de datos\n  // son accesibles desde la vista\n  title = 'app works!';\n}\n```\n\nSeguro que la parte más novedosa es `@Component({...})`. Es el equivalente a los antiguos Objetos de Definición de Directivas. Lo que hace es asociar al controlador una plantilla HTML `app.component.html` y un selector para ser invocado desde otra vista `<app-root></app-root>`. El resto por ahora puedes obviarlo.\n\nY hablando de la plantilla, echemos un vistazo a `app.component.html`. Contendrá algo así:\n\n```html\n<h1>\n  <!--Interpolación de variables definidas en el modelo del componente-->\n  {{ title }}\n</h1>\n```\n\nEstas son cosas que te resultarán muy familiares como la interpolación `{{ title }}` que permite mostrar el famoso *app works!*, nueva versión del *hola mundo*. Ya está, el resto ya es sólo usar este componente en el `index.html`, \nRecuerda:\n```html\n  <!--Componente raíz de la aplicación-->\n  <app-root>Loading...</app-root>\n```\n## Angular2 en acción\nPara lanzar y probar tu aplicación necesitas otro comando de Angular-CLI. Este comando se ocupa entre otras cosas de todo el proceso necesario para **transformar el código TypeScript en JavaScript** reconocible por el navegador. También crea un mini servidor estático y además refresca el navegador a cada cambio los fuentes. Un salvavidas para un recién llegado a Angular 2. Teclea en tu terminal:\n\n```\nng serve\n```\n\nSi todo ha ido bien, no siempre ocurre con estas versiones tan verdes, podrás disfrutar de **tu primera aplicación con Angular 2** en [http://localhost:4200](http://localhost:4200)  \n\n\n>[Este vídeo](https://youtu.be/Y7izsxhPpQY) emitido con la colaboración de DesarrolloWeb.com contiene una explicación mas extensa del proceso de trabajo con Angular 2 CLI.\n\n\n\n<div class=\"flex-video\">  \n    <iframe src=\"https://www.youtube.com/embed/Y7izsxhPpQY\"></iframe>\n</div>   ","slug":"hola-mundo-en-angular-2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj0i000yc7jso19m023g","content":"<blockquote>\n<p>Código asociado en GitHub: <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/1-hola-mundo\" target=\"_blank\" rel=\"external\">angular2/1-HolaMundo/</a></p>\n</blockquote>\n<p>Qué lejanos aquellos tiempos dónde un <a href=\"https://github.com/AcademiaBinaria/HolaAngularJS\" target=\"_blank\" rel=\"external\">Hola Mundo en AngularJS</a> se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear <strong>aplicaciones de nivel empresarial con Angular 2.</strong></p>\n<p>Ya he explicado que Angular ha pasado <a href=\"http://academia-binaria.com/angular2-primeras-impresiones/\">de framework a plataforma</a>, y que ya no es para aficionados. Grandes desarrollos en equipo requieren <strong>herramientas y procedimientos</strong> a la altura. La primera opción que te recomiendo es <a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a>, un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es <em>aún</em> más compleja que la que te muestro.</p>\n<a id=\"more\"></a>\n<h2 id=\"Preparando-el-entorno\"><a href=\"#Preparando-el-entorno\" class=\"headerlink\" title=\"Preparando el entorno\"></a>Preparando el entorno</h2><p>Las herramientas que voy a usar requieren <a href=\"nodejs.org\">NodeJS</a>. Te recomiendo que instales una de sus últimas versiones. Tras la instalación tendrás acceso a <a href=\"npmjs.com\">npm</a> para poder instalar librerías y utilidades como Angular CLI.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g angular-cli</div></pre></td></tr></table></figure>\n<p>A partir de ahora en tu linea de comandos podrás usar el programa <code>ng</code> seguido de algún comando como <code>new generate serve lint test e2e build</code>. Usaremos algunos en esta demo.</p>\n<h2 id=\"Creando-aplicaciones-y-componentes\"><a href=\"#Creando-aplicaciones-y-componentes\" class=\"headerlink\" title=\"Creando aplicaciones y componentes\"></a>Creando aplicaciones y componentes</h2><p>Escoge un directorio en un disco con espacio libre. No es broma, hasta 300 mb o más para empezar. Tranquilo, en distribución la cosa pinta mucho mejor y Angular es muy ligero. Ahora teclea:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new hola-angular-2</div></pre></td></tr></table></figure>\n<p>Unos segundos o minutos más tarde… podrás abrir la recién creada carpeta, yo lo hago con <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a>, y explorar el contenido de sus 3 directorios y miles de ficheros!!!</p>\n<p>Después del susto, tranquilidad de nuevo. La mayoría son dependencias de terceros productos, herramientas necesarias para ejecutar aplicación o para alguno de sus procesos de <em>test, lint o distribución</em>. Centrémonos en el directorio <code>src</code> dónde están los fuentes, el código que tendríamos que haber creado nosotros.</p>\n<p>De un primer vistazo puede que sólo reconozcas al viejo <code>index.html</code>. No te agobies, por ahora es suficiente. Contendrá algo como esto:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HolaAngular2<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Componente raíz de la aplicación--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>De lo que es Angular 2 lo único interesante es el componente <code>&lt;app-root&gt;Loading...&lt;/app-root&gt;</code>. Todo, incluida la aplicación principal, debe ser definido y declarado como un componente. De hecho definiremos las aplicaciones Angular2 como árboles de componentes. Y tdodo árbol debe tener una raíz. Mientras Angular no entre en fucionamiento, el susario verá el mensaje de <em>Loading…</em> después la magia de Angular2 lo sustituirá por el contenido del componente <code>app-root</code> predefinido por el generador. </p>\n<h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><p>Sin entrar en debates de <a href=\"https://www.youtube.com/watch?v=OpS2R7rbpRg\" target=\"_blank\" rel=\"external\">qué lenguaje usar para programar en Angular2</a> te resumo mi posición: </p>\n<p>1.- TypeScript te permite anotar tu <strong>JavaScript con tipos</strong>. Esto tiene dos ventajas: <em>intellisense</em> mientras codificas y chequeo de tipos cuando compilas.<br>2.- TypeScript es la <strong>única opción automatizada a día de hoy</strong> con Angular CLI.</p>\n<p>Por lo demás no hay porqué alarmarse. <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">TypeScript</a> es un <em>superset de JavaScript ES6</em> con unas mejoras evidentes que no tardarás en dominar. Eso si, tienes que aprender <a href=\"http://es6-features.org/\" target=\"_blank\" rel=\"external\">JavaScript ES2015 o ES6</a>.</p>\n<p>Sabiendo esto, entra sin miedo en cualquier fichero de extensión <code>.ts</code> y verás que es muy parecido a cualquier <code>.js</code> de la nueva versión. Por ejemplo en el citado <code>main.ts</code> aparecerá algo así:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importaciones de dependencias TypeScript al estilo ES6</span></div><div class=\"line\"><span class=\"comment\">// primero los básicos para compatibilidad con navegadores</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./polyfills.ts'</span>;</div><div class=\"line\"><span class=\"comment\">// luego cosas de Angular</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser-dynamic'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// después nuestro código, empezando por la configuración</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./environments/environment'</span>;</div><div class=\"line\"><span class=\"comment\">// y por último la aplicación a leída desde el módulo raíz, llamado app por convenio.</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app/'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// condiciones para ejecutar en modo desarrollo o producción</span></div><div class=\"line\"><span class=\"keyword\">if</span> (environment.production) &#123;</div><div class=\"line\">  enableProdMode();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// arranque de la aplicación invocando al módulo raíz</span></div><div class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule);</div></pre></td></tr></table></figure>\n<p>Centrándonos en el código que habremos de mantener fíjate en la línea <code>import { AppModule } from &#39;./app/&#39;;</code>. Le indica a <em>WebPack</em> que importe el contenido de la carpeta <code>./app/</code>. Para ello buscará en dicho directorio un archivo <code>index.ts</code>. Ese fichero sirve de índice y contiene las instrucciones para exportar el código interesante del resto de la carpeta. En nuestro caso son el módulo y el componente raíz. </p>\n<h2 id=\"El-modulo-raiz\"><a href=\"#El-modulo-raiz\" class=\"headerlink\" title=\"El módulo raíz\"></a>El módulo raíz</h2><p>Las aplicaciones Angular2 están pensadas para crecer. Para ello es fundamental cierto grado de modularidad. EL viejo <code>angular.module</code> ha vuelto en la versión 2. Mira dentro del fichero <code>app.module.ts</code> y verás código similar a este:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// objetos con utilidades comunes del framework</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// importación del componente raíz, definido en esta misma carpeta</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</div><div class=\"line\"><span class=\"comment\">// decorador con metadata que define un módulo</span></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [</div><div class=\"line\">    AppComponent</div><div class=\"line\">  ], <span class=\"comment\">// cosas declaradas en este módulo</span></div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule</div><div class=\"line\">  ], <span class=\"comment\">// otros módulos que necesitamos para que este funcione</span></div><div class=\"line\">  providers: [] , <span class=\"comment\">// inyección de servicios comunes para la aplicación</span></div><div class=\"line\">  bootstrap: [AppComponent] <span class=\"comment\">// componente raíz para el arranque</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// los módulos son clases contendoras </span></div><div class=\"line\"><span class=\"comment\">// habitualmente con poco o ningún código</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>Un módulo no es más que una clase contenedora. Cada módulo puede incluir múltiples componentes y servicios. Normalmente un módulo dependerá de otros. El módulo raíz declara un componente especial para el arranque de la aplicación: <em>El componente raíz</em></p>\n<h2 id=\"El-componente-raiz\"><a href=\"#El-componente-raiz\" class=\"headerlink\" title=\"El componente raíz\"></a>El componente raíz</h2><p>Buceando a mayor profundidad nos encontramos con el resto del contenido de la carpeta <code>./app/</code>. Son archivos con nombres tipo <code>app.component.*</code> y se usan para definir un componente.</p>\n<p>Los <strong>componentes son los bloques de construcción de Angular 2</strong> que representan regiones de la pantalla. Las aplicaciones se definen como árboles de componentes. Nuestra aplicación es un árbol que tiene una raíz, habitualmente llamado <code>app</code> y que es común a cualquier desarrollo.</p>\n<p>Cada componente a su vez está formado por tres partes:</p>\n<ol>\n<li><strong>La vista</strong>: es el código que se renderizará para los usuarios. Esta plantilla estará en un fichero de extensión <code>.html</code>.</li>\n<li><strong>La clase controladora</strong>: En ES6 usaremos clases para declarar los controladores que exponen datos y funcionalidad a la vista.</li>\n<li><strong>Metadata</strong>: Se declara como un decorador, una función especial de TypeScript, que recibe un objeto de configuración. Esto acompaña al controlador en un fichero de extensión <code>.ts</code></li>\n</ol>\n<p>Empecemos por este último fichero, el <code>app.component.ts</code>.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// Función decoradora que registra un componente</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-root'</span>, <span class=\"comment\">// elemento html consumidor</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span>, <span class=\"comment\">// ruta relativa a la vista</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./app.component.css'</span>] <span class=\"comment\">// potencialmente múltiples hojas de estilo</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// clase que representa un controlador </span></div><div class=\"line\"><span class=\"comment\">// con su modelo de datos (title ) y métodos de acción (aún no tiene)</span></div><div class=\"line\"><span class=\"comment\">// Esta clase es todo lo que se exporta en este fichero</span></div><div class=\"line\"><span class=\"comment\">// y esto se importará en app.module.ts para ser incorporado el módulo raíz</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// las propiedades de la clase representan el modelo de datos</span></div><div class=\"line\">  <span class=\"comment\">// son accesibles desde la vista</span></div><div class=\"line\">  title = <span class=\"string\">'app works!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Seguro que la parte más novedosa es <code>@Component({...})</code>. Es el equivalente a los antiguos Objetos de Definición de Directivas. Lo que hace es asociar al controlador una plantilla HTML <code>app.component.html</code> y un selector para ser invocado desde otra vista <code>&lt;app-root&gt;&lt;/app-root&gt;</code>. El resto por ahora puedes obviarlo.</p>\n<p>Y hablando de la plantilla, echemos un vistazo a <code>app.component.html</code>. Contendrá algo así:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Interpolación de variables definidas en el modelo del componente--&gt;</span></div><div class=\"line\">  &#123;&#123; title &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Estas son cosas que te resultarán muy familiares como la interpolación <code>Hola Mundo Angular 2</code> que permite mostrar el famoso <em>app works!</em>, nueva versión del <em>hola mundo</em>. Ya está, el resto ya es sólo usar este componente en el <code>index.html</code>,<br>Recuerda:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--Componente raíz de la aplicación--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Angular2-en-accion\"><a href=\"#Angular2-en-accion\" class=\"headerlink\" title=\"Angular2 en acción\"></a>Angular2 en acción</h2><p>Para lanzar y probar tu aplicación necesitas otro comando de Angular-CLI. Este comando se ocupa entre otras cosas de todo el proceso necesario para <strong>transformar el código TypeScript en JavaScript</strong> reconocible por el navegador. También crea un mini servidor estático y además refresca el navegador a cada cambio los fuentes. Un salvavidas para un recién llegado a Angular 2. Teclea en tu terminal:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng serve</div></pre></td></tr></table></figure>\n<p>Si todo ha ido bien, no siempre ocurre con estas versiones tan verdes, podrás disfrutar de <strong>tu primera aplicación con Angular 2</strong> en <a href=\"http://localhost:4200\" target=\"_blank\" rel=\"external\">http://localhost:4200</a>  </p>\n<blockquote>\n<p><a href=\"https://youtu.be/Y7izsxhPpQY\" target=\"_blank\" rel=\"external\">Este vídeo</a> emitido con la colaboración de DesarrolloWeb.com contiene una explicación mas extensa del proceso de trabajo con Angular 2 CLI.</p>\n</blockquote>\n<div class=\"flex-video\"><br>    <iframe src=\"https://www.youtube.com/embed/Y7izsxhPpQY\"></iframe><br></div>   ","site":{"data":{}},"excerpt":"<blockquote>\n<p>Código asociado en GitHub: <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/1-hola-mundo\" target=\"_blank\" rel=\"external\">angular2/1-HolaMundo/</a></p>\n</blockquote>\n<p>Qué lejanos aquellos tiempos dónde un <a href=\"https://github.com/AcademiaBinaria/HolaAngularJS\" target=\"_blank\" rel=\"external\">Hola Mundo en AngularJS</a> se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear <strong>aplicaciones de nivel empresarial con Angular 2.</strong></p>\n<p>Ya he explicado que Angular ha pasado <a href=\"http://academia-binaria.com/angular2-primeras-impresiones/\">de framework a plataforma</a>, y que ya no es para aficionados. Grandes desarrollos en equipo requieren <strong>herramientas y procedimientos</strong> a la altura. La primera opción que te recomiendo es <a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a>, un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es <em>aún</em> más compleja que la que te muestro.</p>","more":"<h2 id=\"Preparando-el-entorno\"><a href=\"#Preparando-el-entorno\" class=\"headerlink\" title=\"Preparando el entorno\"></a>Preparando el entorno</h2><p>Las herramientas que voy a usar requieren <a href=\"nodejs.org\">NodeJS</a>. Te recomiendo que instales una de sus últimas versiones. Tras la instalación tendrás acceso a <a href=\"npmjs.com\">npm</a> para poder instalar librerías y utilidades como Angular CLI.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g angular-cli</div></pre></td></tr></table></figure>\n<p>A partir de ahora en tu linea de comandos podrás usar el programa <code>ng</code> seguido de algún comando como <code>new generate serve lint test e2e build</code>. Usaremos algunos en esta demo.</p>\n<h2 id=\"Creando-aplicaciones-y-componentes\"><a href=\"#Creando-aplicaciones-y-componentes\" class=\"headerlink\" title=\"Creando aplicaciones y componentes\"></a>Creando aplicaciones y componentes</h2><p>Escoge un directorio en un disco con espacio libre. No es broma, hasta 300 mb o más para empezar. Tranquilo, en distribución la cosa pinta mucho mejor y Angular es muy ligero. Ahora teclea:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new hola-angular-2</div></pre></td></tr></table></figure>\n<p>Unos segundos o minutos más tarde… podrás abrir la recién creada carpeta, yo lo hago con <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a>, y explorar el contenido de sus 3 directorios y miles de ficheros!!!</p>\n<p>Después del susto, tranquilidad de nuevo. La mayoría son dependencias de terceros productos, herramientas necesarias para ejecutar aplicación o para alguno de sus procesos de <em>test, lint o distribución</em>. Centrémonos en el directorio <code>src</code> dónde están los fuentes, el código que tendríamos que haber creado nosotros.</p>\n<p>De un primer vistazo puede que sólo reconozcas al viejo <code>index.html</code>. No te agobies, por ahora es suficiente. Contendrá algo como esto:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HolaAngular2<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Componente raíz de la aplicación--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>De lo que es Angular 2 lo único interesante es el componente <code>&lt;app-root&gt;Loading...&lt;/app-root&gt;</code>. Todo, incluida la aplicación principal, debe ser definido y declarado como un componente. De hecho definiremos las aplicaciones Angular2 como árboles de componentes. Y tdodo árbol debe tener una raíz. Mientras Angular no entre en fucionamiento, el susario verá el mensaje de <em>Loading…</em> después la magia de Angular2 lo sustituirá por el contenido del componente <code>app-root</code> predefinido por el generador. </p>\n<h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><p>Sin entrar en debates de <a href=\"https://www.youtube.com/watch?v=OpS2R7rbpRg\" target=\"_blank\" rel=\"external\">qué lenguaje usar para programar en Angular2</a> te resumo mi posición: </p>\n<p>1.- TypeScript te permite anotar tu <strong>JavaScript con tipos</strong>. Esto tiene dos ventajas: <em>intellisense</em> mientras codificas y chequeo de tipos cuando compilas.<br>2.- TypeScript es la <strong>única opción automatizada a día de hoy</strong> con Angular CLI.</p>\n<p>Por lo demás no hay porqué alarmarse. <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">TypeScript</a> es un <em>superset de JavaScript ES6</em> con unas mejoras evidentes que no tardarás en dominar. Eso si, tienes que aprender <a href=\"http://es6-features.org/\" target=\"_blank\" rel=\"external\">JavaScript ES2015 o ES6</a>.</p>\n<p>Sabiendo esto, entra sin miedo en cualquier fichero de extensión <code>.ts</code> y verás que es muy parecido a cualquier <code>.js</code> de la nueva versión. Por ejemplo en el citado <code>main.ts</code> aparecerá algo así:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importaciones de dependencias TypeScript al estilo ES6</span></div><div class=\"line\"><span class=\"comment\">// primero los básicos para compatibilidad con navegadores</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./polyfills.ts'</span>;</div><div class=\"line\"><span class=\"comment\">// luego cosas de Angular</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser-dynamic'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// después nuestro código, empezando por la configuración</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./environments/environment'</span>;</div><div class=\"line\"><span class=\"comment\">// y por último la aplicación a leída desde el módulo raíz, llamado app por convenio.</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app/'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// condiciones para ejecutar en modo desarrollo o producción</span></div><div class=\"line\"><span class=\"keyword\">if</span> (environment.production) &#123;</div><div class=\"line\">  enableProdMode();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// arranque de la aplicación invocando al módulo raíz</span></div><div class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule);</div></pre></td></tr></table></figure>\n<p>Centrándonos en el código que habremos de mantener fíjate en la línea <code>import { AppModule } from &#39;./app/&#39;;</code>. Le indica a <em>WebPack</em> que importe el contenido de la carpeta <code>./app/</code>. Para ello buscará en dicho directorio un archivo <code>index.ts</code>. Ese fichero sirve de índice y contiene las instrucciones para exportar el código interesante del resto de la carpeta. En nuestro caso son el módulo y el componente raíz. </p>\n<h2 id=\"El-modulo-raiz\"><a href=\"#El-modulo-raiz\" class=\"headerlink\" title=\"El módulo raíz\"></a>El módulo raíz</h2><p>Las aplicaciones Angular2 están pensadas para crecer. Para ello es fundamental cierto grado de modularidad. EL viejo <code>angular.module</code> ha vuelto en la versión 2. Mira dentro del fichero <code>app.module.ts</code> y verás código similar a este:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// objetos con utilidades comunes del framework</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// importación del componente raíz, definido en esta misma carpeta</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</div><div class=\"line\"><span class=\"comment\">// decorador con metadata que define un módulo</span></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [</div><div class=\"line\">    AppComponent</div><div class=\"line\">  ], <span class=\"comment\">// cosas declaradas en este módulo</span></div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule</div><div class=\"line\">  ], <span class=\"comment\">// otros módulos que necesitamos para que este funcione</span></div><div class=\"line\">  providers: [] , <span class=\"comment\">// inyección de servicios comunes para la aplicación</span></div><div class=\"line\">  bootstrap: [AppComponent] <span class=\"comment\">// componente raíz para el arranque</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// los módulos son clases contendoras </span></div><div class=\"line\"><span class=\"comment\">// habitualmente con poco o ningún código</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>Un módulo no es más que una clase contenedora. Cada módulo puede incluir múltiples componentes y servicios. Normalmente un módulo dependerá de otros. El módulo raíz declara un componente especial para el arranque de la aplicación: <em>El componente raíz</em></p>\n<h2 id=\"El-componente-raiz\"><a href=\"#El-componente-raiz\" class=\"headerlink\" title=\"El componente raíz\"></a>El componente raíz</h2><p>Buceando a mayor profundidad nos encontramos con el resto del contenido de la carpeta <code>./app/</code>. Son archivos con nombres tipo <code>app.component.*</code> y se usan para definir un componente.</p>\n<p>Los <strong>componentes son los bloques de construcción de Angular 2</strong> que representan regiones de la pantalla. Las aplicaciones se definen como árboles de componentes. Nuestra aplicación es un árbol que tiene una raíz, habitualmente llamado <code>app</code> y que es común a cualquier desarrollo.</p>\n<p>Cada componente a su vez está formado por tres partes:</p>\n<ol>\n<li><strong>La vista</strong>: es el código que se renderizará para los usuarios. Esta plantilla estará en un fichero de extensión <code>.html</code>.</li>\n<li><strong>La clase controladora</strong>: En ES6 usaremos clases para declarar los controladores que exponen datos y funcionalidad a la vista.</li>\n<li><strong>Metadata</strong>: Se declara como un decorador, una función especial de TypeScript, que recibe un objeto de configuración. Esto acompaña al controlador en un fichero de extensión <code>.ts</code></li>\n</ol>\n<p>Empecemos por este último fichero, el <code>app.component.ts</code>.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// Función decoradora que registra un componente</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-root'</span>, <span class=\"comment\">// elemento html consumidor</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span>, <span class=\"comment\">// ruta relativa a la vista</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./app.component.css'</span>] <span class=\"comment\">// potencialmente múltiples hojas de estilo</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// clase que representa un controlador </span></div><div class=\"line\"><span class=\"comment\">// con su modelo de datos (title ) y métodos de acción (aún no tiene)</span></div><div class=\"line\"><span class=\"comment\">// Esta clase es todo lo que se exporta en este fichero</span></div><div class=\"line\"><span class=\"comment\">// y esto se importará en app.module.ts para ser incorporado el módulo raíz</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// las propiedades de la clase representan el modelo de datos</span></div><div class=\"line\">  <span class=\"comment\">// son accesibles desde la vista</span></div><div class=\"line\">  title = <span class=\"string\">'app works!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Seguro que la parte más novedosa es <code>@Component({...})</code>. Es el equivalente a los antiguos Objetos de Definición de Directivas. Lo que hace es asociar al controlador una plantilla HTML <code>app.component.html</code> y un selector para ser invocado desde otra vista <code>&lt;app-root&gt;&lt;/app-root&gt;</code>. El resto por ahora puedes obviarlo.</p>\n<p>Y hablando de la plantilla, echemos un vistazo a <code>app.component.html</code>. Contendrá algo así:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Interpolación de variables definidas en el modelo del componente--&gt;</span></div><div class=\"line\">  &#123;&#123; title &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Estas son cosas que te resultarán muy familiares como la interpolación <code>Hola Mundo Angular 2</code> que permite mostrar el famoso <em>app works!</em>, nueva versión del <em>hola mundo</em>. Ya está, el resto ya es sólo usar este componente en el <code>index.html</code>,<br>Recuerda:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--Componente raíz de la aplicación--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Angular2-en-accion\"><a href=\"#Angular2-en-accion\" class=\"headerlink\" title=\"Angular2 en acción\"></a>Angular2 en acción</h2><p>Para lanzar y probar tu aplicación necesitas otro comando de Angular-CLI. Este comando se ocupa entre otras cosas de todo el proceso necesario para <strong>transformar el código TypeScript en JavaScript</strong> reconocible por el navegador. También crea un mini servidor estático y además refresca el navegador a cada cambio los fuentes. Un salvavidas para un recién llegado a Angular 2. Teclea en tu terminal:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng serve</div></pre></td></tr></table></figure>\n<p>Si todo ha ido bien, no siempre ocurre con estas versiones tan verdes, podrás disfrutar de <strong>tu primera aplicación con Angular 2</strong> en <a href=\"http://localhost:4200\" target=\"_blank\" rel=\"external\">http://localhost:4200</a>  </p>\n<blockquote>\n<p><a href=\"https://youtu.be/Y7izsxhPpQY\" target=\"_blank\" rel=\"external\">Este vídeo</a> emitido con la colaboración de DesarrolloWeb.com contiene una explicación mas extensa del proceso de trabajo con Angular 2 CLI.</p>\n</blockquote>\n<div class=\"flex-video\"><br>    <iframe src=\"https://www.youtube.com/embed/Y7izsxhPpQY\"></iframe><br></div>"},{"title":"Introducción a Bootstrap","id":"5","updated":"2015-11-12T14:56:16.000Z","date":"2015-11-05T16:44:55.000Z","_content":"\nBootstrap es un conjunto de archivos **HTML**, **CSS** y **Javascript** bien definidos y exhaustivamente testados que componen una sólida estructura sobre la cual construir tu proyecto web o aplicación.\n\n### ¿Por qué debo utilizar Bootstrap en mi proyecto?\n\nEmpezar un proyecto web desde cero puede ser laborioso y te puede llevar bastante tiempo mientras vas construyendo los diferentes componentes y testándolos en los diversos navegadores.\n\nBootstrap te provee de una **biblioteca de componentes reusables** que puedes usar en cada proyecto, desde un sistema de rejilla o “grid”, una barra de navegación, botones o estilos tipográficos, todos ellos preparados para funcionar en todos los navegadores y adaptarse a todos los tipos de pantalla, tanto de móvil, como tablet o escritorio.\n\nCon Bootstrap te ahorras todo el trabajo inicial y además tienes un código revisado y testado que además es **mantenible y escalable**, una sólida estructura sobre la cual construir tu proyecto.\n\n### Práctica común\n\nHoy en día su uso se encuentra **muy extendido**, y no es extraño encontrarse ofertas de trabajo en las cuales además de conocimientos de HTML y CSS y Javascript se exige el dominio de Bootstrap. La **suave curva de aprendizaje** hace que sea una herramienta sencilla de usar por todos los miembros de un equipo de desarrollo, lo que incrementa la productividad.\n\n### ¿Por dónde empezar?\n\nPara descargar la última versión debes acudir a la página http://getbootstrap.com/  y pulsar el botón **“Download Bootstrap”** una vez hecho esto te dirigirá a la sección **“Download”** de la página. Hay diferentes maneras de integrar Bootstrap en tu proyecto, en este artículo hablaremos de la primera de ellas que es descargarnos la carpeta comprimida.\n\nEn el apartado **“Bootstrap”** de la sección **“Download”**  te encontrarás otra vez el botón de **“Download Bootstrap”**, esta vez al clicarlo se descargará una carpeta comprimida que se compone de:\n\n-\tUna carpeta **”css”**: Incluye todos los estilos predefinidos por Bootstrap.\n-\tUna carpeta **“fonts”**: Incluye una fuente de iconos svg listos para usar.\n-\tUna carpeta **“js”**: Con todo el javascript necesario para que los componentes y efectos de Bootstrap funcionen.\n\nUna práctica común es empezar el proyecto con estas carpetas e incluir a través de tu HTML los archivos que vas a utilizar. Normalmente **bootstrap.min.css** y **bootstrap.min.js**. Además deberás **incluir JQuery** en tu proyecto para el correcto funcionamiento de los plugins.\n\nUna vez hecho esto te debería quedar un HTML inicial parecido a esto:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <!-- Los 3 metatags de arriba deben ir al principio del head -->\n    <title>Mi primer tema con Bootstrap</title>\n\n    <!-- Incluye el css de Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n    <!-- Incluye nuestro propio CSS -->\n    <link href=\"css/styles.css\" rel=\"stylesheet\">\n\n\n    <!-- Este código es necesario si queremos dar soporte a IE8 -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body>\n    <h1>Hola!</h1>\n\n    <!-- Incluye jQuery -->\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>\n    <!-- Incluye el JS de Bootstrap -->\n    <script src=\"js/bootstrap.min.js\"></script>\n  </body>\n</html>\n\n```\n\nCon esto ya estarías listo para empezar tu proyecto con Bootstrap y, con la ayuda de la documentación de Bootstrap, ir incluyendo los módulos y clases que necesites.\n\nCómo norma general **nunca modifiques los archivos originales de Bootstrap**, para añadir tus estilos propios o modificar los de bootstrap.css lo mejor es que crees una hoja de estilos independiente de bootstrap.css, lo mismo para el archivo bootstrap.js, así para actualizar tu versión de Bootstrap simplemente tendrás que descargarte la última versión y sustituir los archivos bootstrap.min.css y bootstrap.min.js por los de la nueva versión.\n\nEn siguientes artículos profundizaremos un poco mas sobre las diferentes opciones que tienes para incluir Bootstrap en tu proyecto.\n","source":"_posts/Introduccion-a-Bootstrap.md","raw":"---\ntitle: Introducción a Bootstrap\ntags: \n- Bootstrap\ncategories:\n- Introducción \npermalink: introduccion-a-bootstrap\nid: 5\nupdated: 2015/11/12 15:56:16\ndate: 2015/11/05 17:44:55\n---\n\nBootstrap es un conjunto de archivos **HTML**, **CSS** y **Javascript** bien definidos y exhaustivamente testados que componen una sólida estructura sobre la cual construir tu proyecto web o aplicación.\n\n### ¿Por qué debo utilizar Bootstrap en mi proyecto?\n\nEmpezar un proyecto web desde cero puede ser laborioso y te puede llevar bastante tiempo mientras vas construyendo los diferentes componentes y testándolos en los diversos navegadores.\n\nBootstrap te provee de una **biblioteca de componentes reusables** que puedes usar en cada proyecto, desde un sistema de rejilla o “grid”, una barra de navegación, botones o estilos tipográficos, todos ellos preparados para funcionar en todos los navegadores y adaptarse a todos los tipos de pantalla, tanto de móvil, como tablet o escritorio.\n\nCon Bootstrap te ahorras todo el trabajo inicial y además tienes un código revisado y testado que además es **mantenible y escalable**, una sólida estructura sobre la cual construir tu proyecto.\n\n### Práctica común\n\nHoy en día su uso se encuentra **muy extendido**, y no es extraño encontrarse ofertas de trabajo en las cuales además de conocimientos de HTML y CSS y Javascript se exige el dominio de Bootstrap. La **suave curva de aprendizaje** hace que sea una herramienta sencilla de usar por todos los miembros de un equipo de desarrollo, lo que incrementa la productividad.\n\n### ¿Por dónde empezar?\n\nPara descargar la última versión debes acudir a la página http://getbootstrap.com/  y pulsar el botón **“Download Bootstrap”** una vez hecho esto te dirigirá a la sección **“Download”** de la página. Hay diferentes maneras de integrar Bootstrap en tu proyecto, en este artículo hablaremos de la primera de ellas que es descargarnos la carpeta comprimida.\n\nEn el apartado **“Bootstrap”** de la sección **“Download”**  te encontrarás otra vez el botón de **“Download Bootstrap”**, esta vez al clicarlo se descargará una carpeta comprimida que se compone de:\n\n-\tUna carpeta **”css”**: Incluye todos los estilos predefinidos por Bootstrap.\n-\tUna carpeta **“fonts”**: Incluye una fuente de iconos svg listos para usar.\n-\tUna carpeta **“js”**: Con todo el javascript necesario para que los componentes y efectos de Bootstrap funcionen.\n\nUna práctica común es empezar el proyecto con estas carpetas e incluir a través de tu HTML los archivos que vas a utilizar. Normalmente **bootstrap.min.css** y **bootstrap.min.js**. Además deberás **incluir JQuery** en tu proyecto para el correcto funcionamiento de los plugins.\n\nUna vez hecho esto te debería quedar un HTML inicial parecido a esto:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <!-- Los 3 metatags de arriba deben ir al principio del head -->\n    <title>Mi primer tema con Bootstrap</title>\n\n    <!-- Incluye el css de Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n    <!-- Incluye nuestro propio CSS -->\n    <link href=\"css/styles.css\" rel=\"stylesheet\">\n\n\n    <!-- Este código es necesario si queremos dar soporte a IE8 -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body>\n    <h1>Hola!</h1>\n\n    <!-- Incluye jQuery -->\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>\n    <!-- Incluye el JS de Bootstrap -->\n    <script src=\"js/bootstrap.min.js\"></script>\n  </body>\n</html>\n\n```\n\nCon esto ya estarías listo para empezar tu proyecto con Bootstrap y, con la ayuda de la documentación de Bootstrap, ir incluyendo los módulos y clases que necesites.\n\nCómo norma general **nunca modifiques los archivos originales de Bootstrap**, para añadir tus estilos propios o modificar los de bootstrap.css lo mejor es que crees una hoja de estilos independiente de bootstrap.css, lo mismo para el archivo bootstrap.js, así para actualizar tu versión de Bootstrap simplemente tendrás que descargarte la última versión y sustituir los archivos bootstrap.min.css y bootstrap.min.js por los de la nueva versión.\n\nEn siguientes artículos profundizaremos un poco mas sobre las diferentes opciones que tienes para incluir Bootstrap en tu proyecto.\n","slug":"introduccion-a-bootstrap","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj0m0012c7jsaco2vem3","content":"<p>Bootstrap es un conjunto de archivos <strong>HTML</strong>, <strong>CSS</strong> y <strong>Javascript</strong> bien definidos y exhaustivamente testados que componen una sólida estructura sobre la cual construir tu proyecto web o aplicación.</p>\n<h3 id=\"¿Por-que-debo-utilizar-Bootstrap-en-mi-proyecto\"><a href=\"#¿Por-que-debo-utilizar-Bootstrap-en-mi-proyecto\" class=\"headerlink\" title=\"¿Por qué debo utilizar Bootstrap en mi proyecto?\"></a>¿Por qué debo utilizar Bootstrap en mi proyecto?</h3><p>Empezar un proyecto web desde cero puede ser laborioso y te puede llevar bastante tiempo mientras vas construyendo los diferentes componentes y testándolos en los diversos navegadores.</p>\n<p>Bootstrap te provee de una <strong>biblioteca de componentes reusables</strong> que puedes usar en cada proyecto, desde un sistema de rejilla o “grid”, una barra de navegación, botones o estilos tipográficos, todos ellos preparados para funcionar en todos los navegadores y adaptarse a todos los tipos de pantalla, tanto de móvil, como tablet o escritorio.</p>\n<p>Con Bootstrap te ahorras todo el trabajo inicial y además tienes un código revisado y testado que además es <strong>mantenible y escalable</strong>, una sólida estructura sobre la cual construir tu proyecto.</p>\n<h3 id=\"Practica-comun\"><a href=\"#Practica-comun\" class=\"headerlink\" title=\"Práctica común\"></a>Práctica común</h3><p>Hoy en día su uso se encuentra <strong>muy extendido</strong>, y no es extraño encontrarse ofertas de trabajo en las cuales además de conocimientos de HTML y CSS y Javascript se exige el dominio de Bootstrap. La <strong>suave curva de aprendizaje</strong> hace que sea una herramienta sencilla de usar por todos los miembros de un equipo de desarrollo, lo que incrementa la productividad.</p>\n<h3 id=\"¿Por-donde-empezar\"><a href=\"#¿Por-donde-empezar\" class=\"headerlink\" title=\"¿Por dónde empezar?\"></a>¿Por dónde empezar?</h3><p>Para descargar la última versión debes acudir a la página <a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"external\">http://getbootstrap.com/</a>  y pulsar el botón <strong>“Download Bootstrap”</strong> una vez hecho esto te dirigirá a la sección <strong>“Download”</strong> de la página. Hay diferentes maneras de integrar Bootstrap en tu proyecto, en este artículo hablaremos de la primera de ellas que es descargarnos la carpeta comprimida.</p>\n<p>En el apartado <strong>“Bootstrap”</strong> de la sección <strong>“Download”</strong>  te encontrarás otra vez el botón de <strong>“Download Bootstrap”</strong>, esta vez al clicarlo se descargará una carpeta comprimida que se compone de:</p>\n<ul>\n<li>Una carpeta <strong>”css”</strong>: Incluye todos los estilos predefinidos por Bootstrap.</li>\n<li>Una carpeta <strong>“fonts”</strong>: Incluye una fuente de iconos svg listos para usar.</li>\n<li>Una carpeta <strong>“js”</strong>: Con todo el javascript necesario para que los componentes y efectos de Bootstrap funcionen.</li>\n</ul>\n<p>Una práctica común es empezar el proyecto con estas carpetas e incluir a través de tu HTML los archivos que vas a utilizar. Normalmente <strong>bootstrap.min.css</strong> y <strong>bootstrap.min.js</strong>. Además deberás <strong>incluir JQuery</strong> en tu proyecto para el correcto funcionamiento de los plugins.</p>\n<p>Una vez hecho esto te debería quedar un HTML inicial parecido a esto:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Los 3 metatags de arriba deben ir al principio del head --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Mi primer tema con Bootstrap<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye el css de Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye nuestro propio CSS --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/styles.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Este código es necesario si queremos dar soporte a IE8 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></div><div class=\"line\"><span class=\"comment\">      &lt;script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"comment\">      &lt;script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hola!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye jQuery --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye el JS de Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Con esto ya estarías listo para empezar tu proyecto con Bootstrap y, con la ayuda de la documentación de Bootstrap, ir incluyendo los módulos y clases que necesites.</p>\n<p>Cómo norma general <strong>nunca modifiques los archivos originales de Bootstrap</strong>, para añadir tus estilos propios o modificar los de bootstrap.css lo mejor es que crees una hoja de estilos independiente de bootstrap.css, lo mismo para el archivo bootstrap.js, así para actualizar tu versión de Bootstrap simplemente tendrás que descargarte la última versión y sustituir los archivos bootstrap.min.css y bootstrap.min.js por los de la nueva versión.</p>\n<p>En siguientes artículos profundizaremos un poco mas sobre las diferentes opciones que tienes para incluir Bootstrap en tu proyecto.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Bootstrap es un conjunto de archivos <strong>HTML</strong>, <strong>CSS</strong> y <strong>Javascript</strong> bien definidos y exhaustivamente testados que componen una sólida estructura sobre la cual construir tu proyecto web o aplicación.</p>\n<h3 id=\"¿Por-que-debo-utilizar-Bootstrap-en-mi-proyecto\"><a href=\"#¿Por-que-debo-utilizar-Bootstrap-en-mi-proyecto\" class=\"headerlink\" title=\"¿Por qué debo utilizar Bootstrap en mi proyecto?\"></a>¿Por qué debo utilizar Bootstrap en mi proyecto?</h3><p>Empezar un proyecto web desde cero puede ser laborioso y te puede llevar bastante tiempo mientras vas construyendo los diferentes componentes y testándolos en los diversos navegadores.</p>\n<p>Bootstrap te provee de una <strong>biblioteca de componentes reusables</strong> que puedes usar en cada proyecto, desde un sistema de rejilla o “grid”, una barra de navegación, botones o estilos tipográficos, todos ellos preparados para funcionar en todos los navegadores y adaptarse a todos los tipos de pantalla, tanto de móvil, como tablet o escritorio.</p>\n<p>Con Bootstrap te ahorras todo el trabajo inicial y además tienes un código revisado y testado que además es <strong>mantenible y escalable</strong>, una sólida estructura sobre la cual construir tu proyecto.</p>\n<h3 id=\"Practica-comun\"><a href=\"#Practica-comun\" class=\"headerlink\" title=\"Práctica común\"></a>Práctica común</h3><p>Hoy en día su uso se encuentra <strong>muy extendido</strong>, y no es extraño encontrarse ofertas de trabajo en las cuales además de conocimientos de HTML y CSS y Javascript se exige el dominio de Bootstrap. La <strong>suave curva de aprendizaje</strong> hace que sea una herramienta sencilla de usar por todos los miembros de un equipo de desarrollo, lo que incrementa la productividad.</p>\n<h3 id=\"¿Por-donde-empezar\"><a href=\"#¿Por-donde-empezar\" class=\"headerlink\" title=\"¿Por dónde empezar?\"></a>¿Por dónde empezar?</h3><p>Para descargar la última versión debes acudir a la página <a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"external\">http://getbootstrap.com/</a>  y pulsar el botón <strong>“Download Bootstrap”</strong> una vez hecho esto te dirigirá a la sección <strong>“Download”</strong> de la página. Hay diferentes maneras de integrar Bootstrap en tu proyecto, en este artículo hablaremos de la primera de ellas que es descargarnos la carpeta comprimida.</p>\n<p>En el apartado <strong>“Bootstrap”</strong> de la sección <strong>“Download”</strong>  te encontrarás otra vez el botón de <strong>“Download Bootstrap”</strong>, esta vez al clicarlo se descargará una carpeta comprimida que se compone de:</p>\n<ul>\n<li>Una carpeta <strong>”css”</strong>: Incluye todos los estilos predefinidos por Bootstrap.</li>\n<li>Una carpeta <strong>“fonts”</strong>: Incluye una fuente de iconos svg listos para usar.</li>\n<li>Una carpeta <strong>“js”</strong>: Con todo el javascript necesario para que los componentes y efectos de Bootstrap funcionen.</li>\n</ul>\n<p>Una práctica común es empezar el proyecto con estas carpetas e incluir a través de tu HTML los archivos que vas a utilizar. Normalmente <strong>bootstrap.min.css</strong> y <strong>bootstrap.min.js</strong>. Además deberás <strong>incluir JQuery</strong> en tu proyecto para el correcto funcionamiento de los plugins.</p>\n<p>Una vez hecho esto te debería quedar un HTML inicial parecido a esto:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Los 3 metatags de arriba deben ir al principio del head --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Mi primer tema con Bootstrap<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye el css de Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye nuestro propio CSS --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/styles.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Este código es necesario si queremos dar soporte a IE8 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></div><div class=\"line\"><span class=\"comment\">      &lt;script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"comment\">      &lt;script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hola!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye jQuery --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye el JS de Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Con esto ya estarías listo para empezar tu proyecto con Bootstrap y, con la ayuda de la documentación de Bootstrap, ir incluyendo los módulos y clases que necesites.</p>\n<p>Cómo norma general <strong>nunca modifiques los archivos originales de Bootstrap</strong>, para añadir tus estilos propios o modificar los de bootstrap.css lo mejor es que crees una hoja de estilos independiente de bootstrap.css, lo mismo para el archivo bootstrap.js, así para actualizar tu versión de Bootstrap simplemente tendrás que descargarte la última versión y sustituir los archivos bootstrap.min.css y bootstrap.min.js por los de la nueva versión.</p>\n<p>En siguientes artículos profundizaremos un poco mas sobre las diferentes opciones que tienes para incluir Bootstrap en tu proyecto.</p>\n"},{"title":"Introducción a MongoDB","id":"3","updated":"2015-08-25T04:26:25.000Z","date":"2015-08-15T09:00:54.000Z","_content":"\n## ¿Qué es MongoDB?\n\n[MongoDB ](http://mongodb.org) es una base de datos orientada a **documentos** con esquema dinámico. Esto le permite ofrecer un alto **rendimiento** y facilita el desarrollo de aplicaciones. A cambio nos impide tener **Joins y Transacciones** algo muy habitual en bases de datos relacionales, pero sin lo que se puede vivir.\n\n### ¿De qué se compone?\n\nDespués de su instalación disponemos en un directorio de varios ejecutables que componen **la aplicación servidora y sus herramientas**. El ejecutable fundamental será `mongod` que es el servidor, es el motor de manejo de datos. Para acceder al servidor se nos ofrece una aplicación de consola llamada `mongo`. Este es un intérprete de JavaScript y con él, podemos comunicarnos con la base de datos.\n\n### ¿Cómo funciona?\n\nMongoDB almacena **documentos en formato JSON**. Bueno realmente lo hace en *BSON* que es un superconjunto de JSON. BSON es un formato binario que optimiza espacio, rendimiento y aporta funciones extra sobre JSON. Pero esencialmente para nosotros como usuarios toda la entrada salida es en JSON.\n\nComo los documentos se almacenan en JSON y la consola es un interprete JavaScript, la verdad es que **la consola ofrece una potencia enorme** para realizar operaciones de inserción, selección y manipulación de datos. Cabe destacar que la consola es un programa e intérprete *síncrono*. Con algunos drivers como el de NodeJS el trabajo es puramente *asíncrono*.\n\n### ¿Se parece a SQL?\n\nSi vienes del mundo relacional, cuando llegues a Mongo tendrás que ajustar tu punto de mira al definir tus estructuras de datos. Como una primera guía te diré que hay una ligera **equivalencia entre Mongo y los SQL**\n\n*SQL* -> **MongoDB**\n\n*DataBase* -> **DataBase**\n\n*Table* -> **Collection**\n\n*Row* -> **Document**\n\n*Field* -> **Property**\n\n*Join* -> **Embedded**\n\n*Index* -> **Index**\n\n\nLa enorme diferencia está en que **en una colección se pueden guardar documentos con esquemas distintos**, y que esos esquemas pueden incluir documentos complejos, como arrays y subdocumentos. A esta falta de rigor al definir el esquema se la conoce\nen inglés como *schemaless*. Estamos ante una base de datos que almacena documentos de **esquema dinámico**.\n\nLo anterior es sin duda un valor diferencial a favor de Mongo pues facilita mucho el desarrollo y evolución de las aplicaciones. Otra cosa es la ausencia de Joins y Transacciones entre colecciones que obliga a diseñar y codificar de manera metódica para garantizar **eficiencia e integridad** en las consultas. La sugerencia es aprovechar sus fortalezas para minimizar las debilidades.\n\n### ¿Y entonces?\n\n**MongoDB** tienes campos de aplicación en los que supera a los sistemas relacionales en potencia y facilidad de desarrollo. Pero, hay que saber **escoger la herramienta mas adecuada** para cada caso. Ahora que ya sabes un poco de que va esto de MongoDB puedes empezar a buscar aplicaciones dónde seguro que le sentará como un guante.","source":"_posts/Introduccion-a-MongoDB.md","raw":"---\ntitle: Introducción a MongoDB\ntags: \n- MongoDB\ncategories:\n- Introducción \npermalink: introduccion-a-mongodb\nid: 3\nupdated: 2015/08/25 06:26:25\ndate: 2015/08/15 11:00:54\n---\n\n## ¿Qué es MongoDB?\n\n[MongoDB ](http://mongodb.org) es una base de datos orientada a **documentos** con esquema dinámico. Esto le permite ofrecer un alto **rendimiento** y facilita el desarrollo de aplicaciones. A cambio nos impide tener **Joins y Transacciones** algo muy habitual en bases de datos relacionales, pero sin lo que se puede vivir.\n\n### ¿De qué se compone?\n\nDespués de su instalación disponemos en un directorio de varios ejecutables que componen **la aplicación servidora y sus herramientas**. El ejecutable fundamental será `mongod` que es el servidor, es el motor de manejo de datos. Para acceder al servidor se nos ofrece una aplicación de consola llamada `mongo`. Este es un intérprete de JavaScript y con él, podemos comunicarnos con la base de datos.\n\n### ¿Cómo funciona?\n\nMongoDB almacena **documentos en formato JSON**. Bueno realmente lo hace en *BSON* que es un superconjunto de JSON. BSON es un formato binario que optimiza espacio, rendimiento y aporta funciones extra sobre JSON. Pero esencialmente para nosotros como usuarios toda la entrada salida es en JSON.\n\nComo los documentos se almacenan en JSON y la consola es un interprete JavaScript, la verdad es que **la consola ofrece una potencia enorme** para realizar operaciones de inserción, selección y manipulación de datos. Cabe destacar que la consola es un programa e intérprete *síncrono*. Con algunos drivers como el de NodeJS el trabajo es puramente *asíncrono*.\n\n### ¿Se parece a SQL?\n\nSi vienes del mundo relacional, cuando llegues a Mongo tendrás que ajustar tu punto de mira al definir tus estructuras de datos. Como una primera guía te diré que hay una ligera **equivalencia entre Mongo y los SQL**\n\n*SQL* -> **MongoDB**\n\n*DataBase* -> **DataBase**\n\n*Table* -> **Collection**\n\n*Row* -> **Document**\n\n*Field* -> **Property**\n\n*Join* -> **Embedded**\n\n*Index* -> **Index**\n\n\nLa enorme diferencia está en que **en una colección se pueden guardar documentos con esquemas distintos**, y que esos esquemas pueden incluir documentos complejos, como arrays y subdocumentos. A esta falta de rigor al definir el esquema se la conoce\nen inglés como *schemaless*. Estamos ante una base de datos que almacena documentos de **esquema dinámico**.\n\nLo anterior es sin duda un valor diferencial a favor de Mongo pues facilita mucho el desarrollo y evolución de las aplicaciones. Otra cosa es la ausencia de Joins y Transacciones entre colecciones que obliga a diseñar y codificar de manera metódica para garantizar **eficiencia e integridad** en las consultas. La sugerencia es aprovechar sus fortalezas para minimizar las debilidades.\n\n### ¿Y entonces?\n\n**MongoDB** tienes campos de aplicación en los que supera a los sistemas relacionales en potencia y facilidad de desarrollo. Pero, hay que saber **escoger la herramienta mas adecuada** para cada caso. Ahora que ya sabes un poco de que va esto de MongoDB puedes empezar a buscar aplicaciones dónde seguro que le sentará como un guante.","slug":"introduccion-a-mongodb","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj0n0016c7js11wjbm7f","content":"<h2 id=\"¿Que-es-MongoDB\"><a href=\"#¿Que-es-MongoDB\" class=\"headerlink\" title=\"¿Qué es MongoDB?\"></a>¿Qué es MongoDB?</h2><p><a href=\"http://mongodb.org\" target=\"_blank\" rel=\"external\">MongoDB </a> es una base de datos orientada a <strong>documentos</strong> con esquema dinámico. Esto le permite ofrecer un alto <strong>rendimiento</strong> y facilita el desarrollo de aplicaciones. A cambio nos impide tener <strong>Joins y Transacciones</strong> algo muy habitual en bases de datos relacionales, pero sin lo que se puede vivir.</p>\n<h3 id=\"¿De-que-se-compone\"><a href=\"#¿De-que-se-compone\" class=\"headerlink\" title=\"¿De qué se compone?\"></a>¿De qué se compone?</h3><p>Después de su instalación disponemos en un directorio de varios ejecutables que componen <strong>la aplicación servidora y sus herramientas</strong>. El ejecutable fundamental será <code>mongod</code> que es el servidor, es el motor de manejo de datos. Para acceder al servidor se nos ofrece una aplicación de consola llamada <code>mongo</code>. Este es un intérprete de JavaScript y con él, podemos comunicarnos con la base de datos.</p>\n<h3 id=\"¿Como-funciona\"><a href=\"#¿Como-funciona\" class=\"headerlink\" title=\"¿Cómo funciona?\"></a>¿Cómo funciona?</h3><p>MongoDB almacena <strong>documentos en formato JSON</strong>. Bueno realmente lo hace en <em>BSON</em> que es un superconjunto de JSON. BSON es un formato binario que optimiza espacio, rendimiento y aporta funciones extra sobre JSON. Pero esencialmente para nosotros como usuarios toda la entrada salida es en JSON.</p>\n<p>Como los documentos se almacenan en JSON y la consola es un interprete JavaScript, la verdad es que <strong>la consola ofrece una potencia enorme</strong> para realizar operaciones de inserción, selección y manipulación de datos. Cabe destacar que la consola es un programa e intérprete <em>síncrono</em>. Con algunos drivers como el de NodeJS el trabajo es puramente <em>asíncrono</em>.</p>\n<h3 id=\"¿Se-parece-a-SQL\"><a href=\"#¿Se-parece-a-SQL\" class=\"headerlink\" title=\"¿Se parece a SQL?\"></a>¿Se parece a SQL?</h3><p>Si vienes del mundo relacional, cuando llegues a Mongo tendrás que ajustar tu punto de mira al definir tus estructuras de datos. Como una primera guía te diré que hay una ligera <strong>equivalencia entre Mongo y los SQL</strong></p>\n<p><em>SQL</em> -&gt; <strong>MongoDB</strong></p>\n<p><em>DataBase</em> -&gt; <strong>DataBase</strong></p>\n<p><em>Table</em> -&gt; <strong>Collection</strong></p>\n<p><em>Row</em> -&gt; <strong>Document</strong></p>\n<p><em>Field</em> -&gt; <strong>Property</strong></p>\n<p><em>Join</em> -&gt; <strong>Embedded</strong></p>\n<p><em>Index</em> -&gt; <strong>Index</strong></p>\n<p>La enorme diferencia está en que <strong>en una colección se pueden guardar documentos con esquemas distintos</strong>, y que esos esquemas pueden incluir documentos complejos, como arrays y subdocumentos. A esta falta de rigor al definir el esquema se la conoce<br>en inglés como <em>schemaless</em>. Estamos ante una base de datos que almacena documentos de <strong>esquema dinámico</strong>.</p>\n<p>Lo anterior es sin duda un valor diferencial a favor de Mongo pues facilita mucho el desarrollo y evolución de las aplicaciones. Otra cosa es la ausencia de Joins y Transacciones entre colecciones que obliga a diseñar y codificar de manera metódica para garantizar <strong>eficiencia e integridad</strong> en las consultas. La sugerencia es aprovechar sus fortalezas para minimizar las debilidades.</p>\n<h3 id=\"¿Y-entonces\"><a href=\"#¿Y-entonces\" class=\"headerlink\" title=\"¿Y entonces?\"></a>¿Y entonces?</h3><p><strong>MongoDB</strong> tienes campos de aplicación en los que supera a los sistemas relacionales en potencia y facilidad de desarrollo. Pero, hay que saber <strong>escoger la herramienta mas adecuada</strong> para cada caso. Ahora que ya sabes un poco de que va esto de MongoDB puedes empezar a buscar aplicaciones dónde seguro que le sentará como un guante.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"¿Que-es-MongoDB\"><a href=\"#¿Que-es-MongoDB\" class=\"headerlink\" title=\"¿Qué es MongoDB?\"></a>¿Qué es MongoDB?</h2><p><a href=\"http://mongodb.org\" target=\"_blank\" rel=\"external\">MongoDB </a> es una base de datos orientada a <strong>documentos</strong> con esquema dinámico. Esto le permite ofrecer un alto <strong>rendimiento</strong> y facilita el desarrollo de aplicaciones. A cambio nos impide tener <strong>Joins y Transacciones</strong> algo muy habitual en bases de datos relacionales, pero sin lo que se puede vivir.</p>\n<h3 id=\"¿De-que-se-compone\"><a href=\"#¿De-que-se-compone\" class=\"headerlink\" title=\"¿De qué se compone?\"></a>¿De qué se compone?</h3><p>Después de su instalación disponemos en un directorio de varios ejecutables que componen <strong>la aplicación servidora y sus herramientas</strong>. El ejecutable fundamental será <code>mongod</code> que es el servidor, es el motor de manejo de datos. Para acceder al servidor se nos ofrece una aplicación de consola llamada <code>mongo</code>. Este es un intérprete de JavaScript y con él, podemos comunicarnos con la base de datos.</p>\n<h3 id=\"¿Como-funciona\"><a href=\"#¿Como-funciona\" class=\"headerlink\" title=\"¿Cómo funciona?\"></a>¿Cómo funciona?</h3><p>MongoDB almacena <strong>documentos en formato JSON</strong>. Bueno realmente lo hace en <em>BSON</em> que es un superconjunto de JSON. BSON es un formato binario que optimiza espacio, rendimiento y aporta funciones extra sobre JSON. Pero esencialmente para nosotros como usuarios toda la entrada salida es en JSON.</p>\n<p>Como los documentos se almacenan en JSON y la consola es un interprete JavaScript, la verdad es que <strong>la consola ofrece una potencia enorme</strong> para realizar operaciones de inserción, selección y manipulación de datos. Cabe destacar que la consola es un programa e intérprete <em>síncrono</em>. Con algunos drivers como el de NodeJS el trabajo es puramente <em>asíncrono</em>.</p>\n<h3 id=\"¿Se-parece-a-SQL\"><a href=\"#¿Se-parece-a-SQL\" class=\"headerlink\" title=\"¿Se parece a SQL?\"></a>¿Se parece a SQL?</h3><p>Si vienes del mundo relacional, cuando llegues a Mongo tendrás que ajustar tu punto de mira al definir tus estructuras de datos. Como una primera guía te diré que hay una ligera <strong>equivalencia entre Mongo y los SQL</strong></p>\n<p><em>SQL</em> -&gt; <strong>MongoDB</strong></p>\n<p><em>DataBase</em> -&gt; <strong>DataBase</strong></p>\n<p><em>Table</em> -&gt; <strong>Collection</strong></p>\n<p><em>Row</em> -&gt; <strong>Document</strong></p>\n<p><em>Field</em> -&gt; <strong>Property</strong></p>\n<p><em>Join</em> -&gt; <strong>Embedded</strong></p>\n<p><em>Index</em> -&gt; <strong>Index</strong></p>\n<p>La enorme diferencia está en que <strong>en una colección se pueden guardar documentos con esquemas distintos</strong>, y que esos esquemas pueden incluir documentos complejos, como arrays y subdocumentos. A esta falta de rigor al definir el esquema se la conoce<br>en inglés como <em>schemaless</em>. Estamos ante una base de datos que almacena documentos de <strong>esquema dinámico</strong>.</p>\n<p>Lo anterior es sin duda un valor diferencial a favor de Mongo pues facilita mucho el desarrollo y evolución de las aplicaciones. Otra cosa es la ausencia de Joins y Transacciones entre colecciones que obliga a diseñar y codificar de manera metódica para garantizar <strong>eficiencia e integridad</strong> en las consultas. La sugerencia es aprovechar sus fortalezas para minimizar las debilidades.</p>\n<h3 id=\"¿Y-entonces\"><a href=\"#¿Y-entonces\" class=\"headerlink\" title=\"¿Y entonces?\"></a>¿Y entonces?</h3><p><strong>MongoDB</strong> tienes campos de aplicación en los que supera a los sistemas relacionales en potencia y facilidad de desarrollo. Pero, hay que saber <strong>escoger la herramienta mas adecuada</strong> para cada caso. Ahora que ya sabes un poco de que va esto de MongoDB puedes empezar a buscar aplicaciones dónde seguro que le sentará como un guante.</p>\n"},{"title":"Node 6.0.0 actualización con nvm","id":"11","updated":"2016-05-05T08:02:26.000Z","date":"2016-05-05T07:39:40.000Z","_content":"\nAcabamos de recibir la buena noticia de la versión 6 de **NodeJS**. En este caso con mejoras de rendimiento e incorporación de sintaxis de **ES6**. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama [nvm](https://github.com/creationix/nvm) \n\nEstos son los pasos que has de seguir para instalar la herramienta.\n\nSe recomienda desinstalar las versiones de **node** y **npm** instaladas previamente. No es obligatorio.\n\n#### LINUX & OS X\n\n1- Comprobamos que tenemos instaladas las dependencias\n1.1 - Dependencias **Linux**\n```\nsudo apt-get update\nsudo apt-get install build-essential\n```\n\n1.2 -Dependencias **OSX** (herramientas de linea de comandos para XCode)\n```\nxcode-select --install\n```\n\n\n2- Descargamos y ejecutamos el script de instalación\n\n```\t\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\n\n3- Comprobamos que está instalado **NVM**\n```\ncommand -v nvm \n```\n*debe devolver nvm*\n\n\n4- Instalamos la versión de Node que deseamos\n```\t\nnvm install 6.0.0\n```\n\n5- Elegimos la versión de Node instalada que deseamos usar\n\n```\t\nnvm use 6.0.0\n```\n\t\n#### WINDOWS\n\nPara **Windows** no existe una versión *nativa* de **nvm**, pero si hay dos opciones para gestionar las versiones de node instaladas.\n\n1- **nvm-windows**\n\thttps://github.com/coreybutler/nvm-windows\n\tEs un wrapper de npm para windows, el instalador se encuentra en la URL (https://github.com/coreybutler/nvm/releases).\n\t\nLos `comandos` para instalar y la versión de Node son los mismos que en Linux y OSX.\n\t\n2- **nodist**  \nEs un gestor de versiones parecido a NVM solo para Windows\n\tLa URL del instalador (https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe).\n\tLos comandos se encuentran en la documentación. (https://github.com/marcelklehr/nodist)","source":"_posts/Node-6-0-0-actualizacion-con-nvm.md","raw":"---\ntitle: Node 6.0.0 actualización con nvm\ntags:  \n- NodeJS\ncategories:\n- Introducción \npermalink: node-6-0-0-actualizacion-con-nvm\nid: 11\nupdated: '2016-05-05 10:02:26'\ndate: 2016-05-05 09:39:40\n---\n\nAcabamos de recibir la buena noticia de la versión 6 de **NodeJS**. En este caso con mejoras de rendimiento e incorporación de sintaxis de **ES6**. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama [nvm](https://github.com/creationix/nvm) \n\nEstos son los pasos que has de seguir para instalar la herramienta.\n\nSe recomienda desinstalar las versiones de **node** y **npm** instaladas previamente. No es obligatorio.\n\n#### LINUX & OS X\n\n1- Comprobamos que tenemos instaladas las dependencias\n1.1 - Dependencias **Linux**\n```\nsudo apt-get update\nsudo apt-get install build-essential\n```\n\n1.2 -Dependencias **OSX** (herramientas de linea de comandos para XCode)\n```\nxcode-select --install\n```\n\n\n2- Descargamos y ejecutamos el script de instalación\n\n```\t\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\n\n3- Comprobamos que está instalado **NVM**\n```\ncommand -v nvm \n```\n*debe devolver nvm*\n\n\n4- Instalamos la versión de Node que deseamos\n```\t\nnvm install 6.0.0\n```\n\n5- Elegimos la versión de Node instalada que deseamos usar\n\n```\t\nnvm use 6.0.0\n```\n\t\n#### WINDOWS\n\nPara **Windows** no existe una versión *nativa* de **nvm**, pero si hay dos opciones para gestionar las versiones de node instaladas.\n\n1- **nvm-windows**\n\thttps://github.com/coreybutler/nvm-windows\n\tEs un wrapper de npm para windows, el instalador se encuentra en la URL (https://github.com/coreybutler/nvm/releases).\n\t\nLos `comandos` para instalar y la versión de Node son los mismos que en Linux y OSX.\n\t\n2- **nodist**  \nEs un gestor de versiones parecido a NVM solo para Windows\n\tLa URL del instalador (https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe).\n\tLos comandos se encuentran en la documentación. (https://github.com/marcelklehr/nodist)","slug":"node-6-0-0-actualizacion-con-nvm","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj0p0019c7jspt8jz434","content":"<p>Acabamos de recibir la buena noticia de la versión 6 de <strong>NodeJS</strong>. En este caso con mejoras de rendimiento e incorporación de sintaxis de <strong>ES6</strong>. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a> </p>\n<p>Estos son los pasos que has de seguir para instalar la herramienta.</p>\n<p>Se recomienda desinstalar las versiones de <strong>node</strong> y <strong>npm</strong> instaladas previamente. No es obligatorio.</p>\n<h4 id=\"LINUX-amp-OS-X\"><a href=\"#LINUX-amp-OS-X\" class=\"headerlink\" title=\"LINUX &amp; OS X\"></a>LINUX &amp; OS X</h4><p>1- Comprobamos que tenemos instaladas las dependencias<br>1.1 - Dependencias <strong>Linux</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install build-essential</div></pre></td></tr></table></figure></p>\n<p>1.2 -Dependencias <strong>OSX</strong> (herramientas de linea de comandos para XCode)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcode-select --install</div></pre></td></tr></table></figure></p>\n<p>2- Descargamos y ejecutamos el script de instalación</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div></pre></td></tr></table></figure>\n<p>3- Comprobamos que está instalado <strong>NVM</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command -v nvm</div></pre></td></tr></table></figure></p>\n<p><em>debe devolver nvm</em></p>\n<p>4- Instalamos la versión de Node que deseamos<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 6.0.0</div></pre></td></tr></table></figure></p>\n<p>5- Elegimos la versión de Node instalada que deseamos usar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm use 6.0.0</div></pre></td></tr></table></figure>\n<h4 id=\"WINDOWS\"><a href=\"#WINDOWS\" class=\"headerlink\" title=\"WINDOWS\"></a>WINDOWS</h4><p>Para <strong>Windows</strong> no existe una versión <em>nativa</em> de <strong>nvm</strong>, pero si hay dos opciones para gestionar las versiones de node instaladas.</p>\n<p>1- <strong>nvm-windows</strong><br>    <a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm-windows</a><br>    Es un wrapper de npm para windows, el instalador se encuentra en la URL (<a href=\"https://github.com/coreybutler/nvm/releases\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm/releases</a>).</p>\n<p>Los <code>comandos</code> para instalar y la versión de Node son los mismos que en Linux y OSX.</p>\n<p>2- <strong>nodist</strong><br>Es un gestor de versiones parecido a NVM solo para Windows<br>    La URL del instalador (<a href=\"https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe\" target=\"_blank\" rel=\"external\">https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe</a>).<br>    Los comandos se encuentran en la documentación. (<a href=\"https://github.com/marcelklehr/nodist\" target=\"_blank\" rel=\"external\">https://github.com/marcelklehr/nodist</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Acabamos de recibir la buena noticia de la versión 6 de <strong>NodeJS</strong>. En este caso con mejoras de rendimiento e incorporación de sintaxis de <strong>ES6</strong>. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a> </p>\n<p>Estos son los pasos que has de seguir para instalar la herramienta.</p>\n<p>Se recomienda desinstalar las versiones de <strong>node</strong> y <strong>npm</strong> instaladas previamente. No es obligatorio.</p>\n<h4 id=\"LINUX-amp-OS-X\"><a href=\"#LINUX-amp-OS-X\" class=\"headerlink\" title=\"LINUX &amp; OS X\"></a>LINUX &amp; OS X</h4><p>1- Comprobamos que tenemos instaladas las dependencias<br>1.1 - Dependencias <strong>Linux</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install build-essential</div></pre></td></tr></table></figure></p>\n<p>1.2 -Dependencias <strong>OSX</strong> (herramientas de linea de comandos para XCode)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcode-select --install</div></pre></td></tr></table></figure></p>\n<p>2- Descargamos y ejecutamos el script de instalación</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div></pre></td></tr></table></figure>\n<p>3- Comprobamos que está instalado <strong>NVM</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command -v nvm</div></pre></td></tr></table></figure></p>\n<p><em>debe devolver nvm</em></p>\n<p>4- Instalamos la versión de Node que deseamos<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 6.0.0</div></pre></td></tr></table></figure></p>\n<p>5- Elegimos la versión de Node instalada que deseamos usar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm use 6.0.0</div></pre></td></tr></table></figure>\n<h4 id=\"WINDOWS\"><a href=\"#WINDOWS\" class=\"headerlink\" title=\"WINDOWS\"></a>WINDOWS</h4><p>Para <strong>Windows</strong> no existe una versión <em>nativa</em> de <strong>nvm</strong>, pero si hay dos opciones para gestionar las versiones de node instaladas.</p>\n<p>1- <strong>nvm-windows</strong><br>    <a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm-windows</a><br>    Es un wrapper de npm para windows, el instalador se encuentra en la URL (<a href=\"https://github.com/coreybutler/nvm/releases\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm/releases</a>).</p>\n<p>Los <code>comandos</code> para instalar y la versión de Node son los mismos que en Linux y OSX.</p>\n<p>2- <strong>nodist</strong><br>Es un gestor de versiones parecido a NVM solo para Windows<br>    La URL del instalador (<a href=\"https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe\" target=\"_blank\" rel=\"external\">https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe</a>).<br>    Los comandos se encuentran en la documentación. (<a href=\"https://github.com/marcelklehr/nodist\" target=\"_blank\" rel=\"external\">https://github.com/marcelklehr/nodist</a>)</p>\n"},{"title":"Para qué puedo usar NodeJS","id":"20","updated":"2015-08-20T12:53:50.000Z","date":"2015-08-20T12:28:01.000Z","_content":"\nNodeJS se ha hecho muy popular por dos razones relacionas: **potencia y escalabilidad.** Ambas derivadas de su modelo de *ejecución asíncrona no bloqueante*.\n\nSe basa en el lenguaje **JavaScript**: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.\n\nEl uso más inmediato de NodeJS está en la **programación de servicios web**. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el *JavaScript del lado del servidor.* \n\nPero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir **aplicaciones de escritorio** con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para **scripts de administración o monitorización** en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los *development workflows* de cada vez más empresas de programación en cualquier lenguaje. \n\nDada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en **tiempo real**. Y por su escasa demanda de *hardware* se usa también en proyectos de **Internet of Things**\n\nEn definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje **de propósito general.**\n\n\n","source":"_posts/Para-que-puedo-usar-NodeJS.md","raw":"---\ntitle: Para qué puedo usar NodeJS\ntags: \n- NodeJS\ncategories:\n- Introducción\npermalink: para-que-puedo-usar-nodejs\nid: 20\nupdated: '2015-08-20 14:53:50'\ndate: 2015-08-20 14:28:01\n---\n\nNodeJS se ha hecho muy popular por dos razones relacionas: **potencia y escalabilidad.** Ambas derivadas de su modelo de *ejecución asíncrona no bloqueante*.\n\nSe basa en el lenguaje **JavaScript**: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.\n\nEl uso más inmediato de NodeJS está en la **programación de servicios web**. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el *JavaScript del lado del servidor.* \n\nPero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir **aplicaciones de escritorio** con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para **scripts de administración o monitorización** en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los *development workflows* de cada vez más empresas de programación en cualquier lenguaje. \n\nDada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en **tiempo real**. Y por su escasa demanda de *hardware* se usa también en proyectos de **Internet of Things**\n\nEn definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje **de propósito general.**\n\n\n","slug":"para-que-puedo-usar-nodejs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj0t001dc7jsa11v2yiu","content":"<p>NodeJS se ha hecho muy popular por dos razones relacionas: <strong>potencia y escalabilidad.</strong> Ambas derivadas de su modelo de <em>ejecución asíncrona no bloqueante</em>.</p>\n<p>Se basa en el lenguaje <strong>JavaScript</strong>: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.</p>\n<p>El uso más inmediato de NodeJS está en la <strong>programación de servicios web</strong>. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el <em>JavaScript del lado del servidor.</em> </p>\n<p>Pero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir <strong>aplicaciones de escritorio</strong> con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para <strong>scripts de administración o monitorización</strong> en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los <em>development workflows</em> de cada vez más empresas de programación en cualquier lenguaje. </p>\n<p>Dada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en <strong>tiempo real</strong>. Y por su escasa demanda de <em>hardware</em> se usa también en proyectos de <strong>Internet of Things</strong></p>\n<p>En definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje <strong>de propósito general.</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>NodeJS se ha hecho muy popular por dos razones relacionas: <strong>potencia y escalabilidad.</strong> Ambas derivadas de su modelo de <em>ejecución asíncrona no bloqueante</em>.</p>\n<p>Se basa en el lenguaje <strong>JavaScript</strong>: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.</p>\n<p>El uso más inmediato de NodeJS está en la <strong>programación de servicios web</strong>. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el <em>JavaScript del lado del servidor.</em> </p>\n<p>Pero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir <strong>aplicaciones de escritorio</strong> con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para <strong>scripts de administración o monitorización</strong> en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los <em>development workflows</em> de cada vez más empresas de programación en cualquier lenguaje. </p>\n<p>Dada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en <strong>tiempo real</strong>. Y por su escasa demanda de <em>hardware</em> se usa también en proyectos de <strong>Internet of Things</strong></p>\n<p>En definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje <strong>de propósito general.</strong></p>\n"},{"title":"Por qué AngularJS","id":"19","updated":"2015-08-20T12:45:22.000Z","date":"2015-08-18T06:31:24.000Z","_content":"\nEn este vídeo charlamos sobre AngularJS y el momento actual de desarrollo, y el porqué de su éxito.\n\n<div class=\"video-container\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MR1XchvsI1Q?showinfo=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\n[Video en YouTube](https://www.youtube.com/watch?list=PLIcuwIrm4rKdPA5DOzbjSKjJXECfzumZf&t=40&v=MR1XchvsI1Q)","source":"_posts/Por-que-AngularJS.md","raw":"---\ntitle: Por qué AngularJS\ntags: \n- AngularJS\ncategories:\n- Opinión\npermalink: por-que-angularjs\nid: 19\nupdated: '2015-08-20 14:45:22'\ndate: 2015-08-18 08:31:24\n---\n\nEn este vídeo charlamos sobre AngularJS y el momento actual de desarrollo, y el porqué de su éxito.\n\n<div class=\"video-container\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MR1XchvsI1Q?showinfo=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\n[Video en YouTube](https://www.youtube.com/watch?list=PLIcuwIrm4rKdPA5DOzbjSKjJXECfzumZf&t=40&v=MR1XchvsI1Q)","slug":"por-que-angularjs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj0w001hc7js9hnlevsf","content":"<p>En este vídeo charlamos sobre AngularJS y el momento actual de desarrollo, y el porqué de su éxito.</p>\n<div class=\"video-container\"><br><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MR1XchvsI1Q?showinfo=0\" frameborder=\"0\" allowfullscreen></iframe><br></div>\n\n<p><a href=\"https://www.youtube.com/watch?list=PLIcuwIrm4rKdPA5DOzbjSKjJXECfzumZf&amp;t=40&amp;v=MR1XchvsI1Q\" target=\"_blank\" rel=\"external\">Video en YouTube</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>En este vídeo charlamos sobre AngularJS y el momento actual de desarrollo, y el porqué de su éxito.</p>\n<div class=\"video-container\"><br><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MR1XchvsI1Q?showinfo=0\" frameborder=\"0\" allowfullscreen></iframe><br></div>\n\n<p><a href=\"https://www.youtube.com/watch?list=PLIcuwIrm4rKdPA5DOzbjSKjJXECfzumZf&amp;t=40&amp;v=MR1XchvsI1Q\" target=\"_blank\" rel=\"external\">Video en YouTube</a></p>\n"},{"title":"Soluciones BackEnd 2016","id":"8","updated":"2016-04-01T06:02:55.000Z","date":"2016-03-21T10:50:58.000Z","_content":"\nLas soluciones JavaScript para el servidor que marcan **tendencia en el desarrollo back end** durante este 2016. Continuación de la saga que iniciamos con **[FrontEdge](http://academia-binaria.com/soluciones-frontend-2016/)**.\n\n* Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. En el lado del servidor destaco la disponibilidad de [Promesas](http://es6-features.org/#PromiseUsage) de forma nativa..\n\n* Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que *hay que cumplir con el estándar REST y hay que documentar* todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses **[RAML](http://raml.org/)**. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura. \n\n* El ya viejo conocido **[NodeJS](https://nodejs.org/)** se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.\n\n* En la base de datos irrumpe con fuerza la nueva versión de **[MongoDB 3.2](https://docs.mongodb.org/manual/release-notes/3.2/)**, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado *join* entre colecciones .\n\nEn [esta presentación](https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing) tienes más información acerca de lo que llamo **backEdge** : tecnología utilizable, de última generación y con enorme potencial. \n\nEn [este video](https://youtu.be/cfmJQjBfM-s) tienes la charla que di con o que llamo **Desarrollo Web** presentando las tendencias tecnológicas del 2016. ","source":"_posts/Soluciones-BackEnd-2016.md","raw":"---\ntitle: Soluciones BackEnd 2016\ntags: \n- BackEnd\n- NodeJS\n- MongoDB\ncategories:\n- Opinión\npermalink: soluciones-backend-2016\nid: 8\nupdated: '2016-04-01 08:02:55'\ndate: 2016-03-21 11:50:58\n---\n\nLas soluciones JavaScript para el servidor que marcan **tendencia en el desarrollo back end** durante este 2016. Continuación de la saga que iniciamos con **[FrontEdge](http://academia-binaria.com/soluciones-frontend-2016/)**.\n\n* Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. En el lado del servidor destaco la disponibilidad de [Promesas](http://es6-features.org/#PromiseUsage) de forma nativa..\n\n* Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que *hay que cumplir con el estándar REST y hay que documentar* todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses **[RAML](http://raml.org/)**. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura. \n\n* El ya viejo conocido **[NodeJS](https://nodejs.org/)** se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.\n\n* En la base de datos irrumpe con fuerza la nueva versión de **[MongoDB 3.2](https://docs.mongodb.org/manual/release-notes/3.2/)**, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado *join* entre colecciones .\n\nEn [esta presentación](https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing) tienes más información acerca de lo que llamo **backEdge** : tecnología utilizable, de última generación y con enorme potencial. \n\nEn [este video](https://youtu.be/cfmJQjBfM-s) tienes la charla que di con o que llamo **Desarrollo Web** presentando las tendencias tecnológicas del 2016. ","slug":"soluciones-backend-2016","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj11001kc7jsqndiq0l6","content":"<p>Las soluciones JavaScript para el servidor que marcan <strong>tendencia en el desarrollo back end</strong> durante este 2016. Continuación de la saga que iniciamos con <strong><a href=\"http://academia-binaria.com/soluciones-frontend-2016/\">FrontEdge</a></strong>.</p>\n<ul>\n<li><p>Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"external\">ES6</a></strong>. En el lado del servidor destaco la disponibilidad de <a href=\"http://es6-features.org/#PromiseUsage\" target=\"_blank\" rel=\"external\">Promesas</a> de forma nativa..</p>\n</li>\n<li><p>Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que <em>hay que cumplir con el estándar REST y hay que documentar</em> todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses <strong><a href=\"http://raml.org/\" target=\"_blank\" rel=\"external\">RAML</a></strong>. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura. </p>\n</li>\n<li><p>El ya viejo conocido <strong><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">NodeJS</a></strong> se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.</p>\n</li>\n<li><p>En la base de datos irrumpe con fuerza la nueva versión de <strong><a href=\"https://docs.mongodb.org/manual/release-notes/3.2/\" target=\"_blank\" rel=\"external\">MongoDB 3.2</a></strong>, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado <em>join</em> entre colecciones .</p>\n</li>\n</ul>\n<p>En <a href=\"https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes más información acerca de lo que llamo <strong>backEdge</strong> : tecnología utilizable, de última generación y con enorme potencial. </p>\n<p>En <a href=\"https://youtu.be/cfmJQjBfM-s\" target=\"_blank\" rel=\"external\">este video</a> tienes la charla que di con o que llamo <strong>Desarrollo Web</strong> presentando las tendencias tecnológicas del 2016. </p>\n","site":{"data":{}},"excerpt":"","more":"<p>Las soluciones JavaScript para el servidor que marcan <strong>tendencia en el desarrollo back end</strong> durante este 2016. Continuación de la saga que iniciamos con <strong><a href=\"http://academia-binaria.com/soluciones-frontend-2016/\">FrontEdge</a></strong>.</p>\n<ul>\n<li><p>Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"external\">ES6</a></strong>. En el lado del servidor destaco la disponibilidad de <a href=\"http://es6-features.org/#PromiseUsage\" target=\"_blank\" rel=\"external\">Promesas</a> de forma nativa..</p>\n</li>\n<li><p>Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que <em>hay que cumplir con el estándar REST y hay que documentar</em> todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses <strong><a href=\"http://raml.org/\" target=\"_blank\" rel=\"external\">RAML</a></strong>. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura. </p>\n</li>\n<li><p>El ya viejo conocido <strong><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">NodeJS</a></strong> se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.</p>\n</li>\n<li><p>En la base de datos irrumpe con fuerza la nueva versión de <strong><a href=\"https://docs.mongodb.org/manual/release-notes/3.2/\" target=\"_blank\" rel=\"external\">MongoDB 3.2</a></strong>, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado <em>join</em> entre colecciones .</p>\n</li>\n</ul>\n<p>En <a href=\"https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes más información acerca de lo que llamo <strong>backEdge</strong> : tecnología utilizable, de última generación y con enorme potencial. </p>\n<p>En <a href=\"https://youtu.be/cfmJQjBfM-s\" target=\"_blank\" rel=\"external\">este video</a> tienes la charla que di con o que llamo <strong>Desarrollo Web</strong> presentando las tendencias tecnológicas del 2016. </p>\n"},{"title":"Soluciones FrontEnd 2016","id":"7","updated":"2016-01-14T10:17:31.000Z","date":"2016-01-14T09:39:32.000Z","_content":"\nInicio el año proponiendo una selección de tecnologías que serán **tendencia en el desarrollo front end** durante este 2016.\n\n* Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.\n\n* Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo **[JSPM](http://jspm.io/)**, que se incorporará definitivamente a nuestro toolbox durante el 2016.\n\n* De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente **[AngularJS1.5](https://www.angularjs.org/)**\n\n* En la parte visual, el look & feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería **[AngularMaterial](https://material.angularjs.org/latest/)** es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.\n\nEn [esta presentación](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing) tienes más información acerca de lo que llamo **frontEdge** : tecnología utilizable, de última generación y con enorme potencial. \n\n[Presentación frontEdge](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing)\n\nSi tienes tiempo, mira [este vídeo](https://www.youtube.com/watch?v=vJZb_rs2vvU) con una charla en la que comentamos estas y otras tecnologías para programadores.\n\n[video frontEdge](https://www.youtube.com/watch?v=vJZb_rs2vvU)","source":"_posts/Soluciones-FrontEnd-2016.md","raw":"---\ntitle: Soluciones FrontEnd 2016\ntags: \n- FrontEnd\n- AngularJS\ncategories:\n- Opinión\npermalink: soluciones-frontend-2016\nid: 7\nupdated: '2016-01-14 11:17:31'\ndate: 2016-01-14 10:39:32\n---\n\nInicio el año proponiendo una selección de tecnologías que serán **tendencia en el desarrollo front end** durante este 2016.\n\n* Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.\n\n* Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo **[JSPM](http://jspm.io/)**, que se incorporará definitivamente a nuestro toolbox durante el 2016.\n\n* De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente **[AngularJS1.5](https://www.angularjs.org/)**\n\n* En la parte visual, el look & feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería **[AngularMaterial](https://material.angularjs.org/latest/)** es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.\n\nEn [esta presentación](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing) tienes más información acerca de lo que llamo **frontEdge** : tecnología utilizable, de última generación y con enorme potencial. \n\n[Presentación frontEdge](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing)\n\nSi tienes tiempo, mira [este vídeo](https://www.youtube.com/watch?v=vJZb_rs2vvU) con una charla en la que comentamos estas y otras tecnologías para programadores.\n\n[video frontEdge](https://www.youtube.com/watch?v=vJZb_rs2vvU)","slug":"soluciones-frontend-2016","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj15001nc7js4ryi1ikd","content":"<p>Inicio el año proponiendo una selección de tecnologías que serán <strong>tendencia en el desarrollo front end</strong> durante este 2016.</p>\n<ul>\n<li><p>Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"external\">ES6</a></strong>. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.</p>\n</li>\n<li><p>Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo <strong><a href=\"http://jspm.io/\" target=\"_blank\" rel=\"external\">JSPM</a></strong>, que se incorporará definitivamente a nuestro toolbox durante el 2016.</p>\n</li>\n<li><p>De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente <strong><a href=\"https://www.angularjs.org/\" target=\"_blank\" rel=\"external\">AngularJS1.5</a></strong></p>\n</li>\n<li><p>En la parte visual, el look &amp; feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería <strong><a href=\"https://material.angularjs.org/latest/\" target=\"_blank\" rel=\"external\">AngularMaterial</a></strong> es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.</p>\n</li>\n</ul>\n<p>En <a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes más información acerca de lo que llamo <strong>frontEdge</strong> : tecnología utilizable, de última generación y con enorme potencial. </p>\n<p><a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"external\">Presentación frontEdge</a></p>\n<p>Si tienes tiempo, mira <a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"external\">este vídeo</a> con una charla en la que comentamos estas y otras tecnologías para programadores.</p>\n<p><a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"external\">video frontEdge</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Inicio el año proponiendo una selección de tecnologías que serán <strong>tendencia en el desarrollo front end</strong> durante este 2016.</p>\n<ul>\n<li><p>Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"external\">ES6</a></strong>. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.</p>\n</li>\n<li><p>Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo <strong><a href=\"http://jspm.io/\" target=\"_blank\" rel=\"external\">JSPM</a></strong>, que se incorporará definitivamente a nuestro toolbox durante el 2016.</p>\n</li>\n<li><p>De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente <strong><a href=\"https://www.angularjs.org/\" target=\"_blank\" rel=\"external\">AngularJS1.5</a></strong></p>\n</li>\n<li><p>En la parte visual, el look &amp; feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería <strong><a href=\"https://material.angularjs.org/latest/\" target=\"_blank\" rel=\"external\">AngularMaterial</a></strong> es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.</p>\n</li>\n</ul>\n<p>En <a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes más información acerca de lo que llamo <strong>frontEdge</strong> : tecnología utilizable, de última generación y con enorme potencial. </p>\n<p><a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"external\">Presentación frontEdge</a></p>\n<p>Si tienes tiempo, mira <a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"external\">este vídeo</a> con una charla en la que comentamos estas y otras tecnologías para programadores.</p>\n<p><a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"external\">video frontEdge</a></p>\n"},{"title":"TypeScript, programa en el front igual que en el back","id":"23","updated":"2017-03-14T18:10:13.000Z","date":"2017-03-14T18:02:11.000Z","thumbnail":"/css/images/typescript.jpg","_content":"\nHasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo *back end y el front end*. El primero era el de los programadores de verdad, con **lenguajes serios y patrones de diseño**. El último era el universo de los diseñadores, con lenguajes de segundo nivel y **micro scripts o código espagueti** descontrolado.\n\n<!-- more -->\n\nPero la llegada de los frameworks *MVC* en el cliente, llevó **grandes cantidades de código al navegador** y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre *back y front*.\n\nPero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo *Java* y *C#* las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo *JavaScript*.\n\nY entonces eclosionó *TypeScript*. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a *JavaScript* al siguiente nivel. Con **tipos estáticos** (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia **suaviza la rampa de entrada al *front* para los desarrolladores *back***.\n\nYa no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el *TypeScript* si dominas y te gusta la POO, serás un *full stack* cuestión de horas.","source":"_posts/TypeScript-programa-en-el-front-igual-que-en-el-back.md","raw":"---\ntitle: 'TypeScript, programa en el front igual que en el back'\ntags: \n- TypeScript\ncategories:\n- Opinión\npermalink: typescript-programa-en-el-front-igual-que-en-el-back\nid: 23\nupdated: '2017-03-14 19:10:13'\ndate: 2017-03-14 19:02:11\nthumbnail: /css/images/typescript.jpg\n---\n\nHasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo *back end y el front end*. El primero era el de los programadores de verdad, con **lenguajes serios y patrones de diseño**. El último era el universo de los diseñadores, con lenguajes de segundo nivel y **micro scripts o código espagueti** descontrolado.\n\n<!-- more -->\n\nPero la llegada de los frameworks *MVC* en el cliente, llevó **grandes cantidades de código al navegador** y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre *back y front*.\n\nPero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo *Java* y *C#* las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo *JavaScript*.\n\nY entonces eclosionó *TypeScript*. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a *JavaScript* al siguiente nivel. Con **tipos estáticos** (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia **suaviza la rampa de entrada al *front* para los desarrolladores *back***.\n\nYa no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el *TypeScript* si dominas y te gusta la POO, serás un *full stack* cuestión de horas.","slug":"typescript-programa-en-el-front-igual-que-en-el-back","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj17001qc7js5snsr7ob","content":"<p>Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo <em>back end y el front end</em>. El primero era el de los programadores de verdad, con <strong>lenguajes serios y patrones de diseño</strong>. El último era el universo de los diseñadores, con lenguajes de segundo nivel y <strong>micro scripts o código espagueti</strong> descontrolado.</p>\n<a id=\"more\"></a>\n<p>Pero la llegada de los frameworks <em>MVC</em> en el cliente, llevó <strong>grandes cantidades de código al navegador</strong> y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre <em>back y front</em>.</p>\n<p>Pero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo <em>Java</em> y <em>C#</em> las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo <em>JavaScript</em>.</p>\n<p>Y entonces eclosionó <em>TypeScript</em>. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a <em>JavaScript</em> al siguiente nivel. Con <strong>tipos estáticos</strong> (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia <strong>suaviza la rampa de entrada al <em>front</em> para los desarrolladores <em>back</em></strong>.</p>\n<p>Ya no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el <em>TypeScript</em> si dominas y te gusta la POO, serás un <em>full stack</em> cuestión de horas.</p>\n","site":{"data":{}},"excerpt":"<p>Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo <em>back end y el front end</em>. El primero era el de los programadores de verdad, con <strong>lenguajes serios y patrones de diseño</strong>. El último era el universo de los diseñadores, con lenguajes de segundo nivel y <strong>micro scripts o código espagueti</strong> descontrolado.</p>","more":"<p>Pero la llegada de los frameworks <em>MVC</em> en el cliente, llevó <strong>grandes cantidades de código al navegador</strong> y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre <em>back y front</em>.</p>\n<p>Pero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo <em>Java</em> y <em>C#</em> las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo <em>JavaScript</em>.</p>\n<p>Y entonces eclosionó <em>TypeScript</em>. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a <em>JavaScript</em> al siguiente nivel. Con <strong>tipos estáticos</strong> (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia <strong>suaviza la rampa de entrada al <em>front</em> para los desarrolladores <em>back</em></strong>.</p>\n<p>Ya no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el <em>TypeScript</em> si dominas y te gusta la POO, serás un <em>full stack</em> cuestión de horas.</p>"},{"title":"ng* el ecosistema de AngularJS","id":"2","updated":"2015-08-20T12:45:59.000Z","date":"2015-08-15T08:55:14.000Z","_content":"\nLista de componentes para ampliar AngularJS que te ayudarán a mejorar tus proyectos.\n\n- **AngularUI**: Antes de programar nada mira si estos chicos ya lo han hecho antes: utilidades, componentes visuales, *bootstrap* y...\n- **ng-grid**: Si tienes que mostrar datos en forma de tabla, este es tu punto de partida.\n- **ngProgress**: Para incorporar una barra de progreso que informe a tus usuarios de la actividad de la aplicación.\n- **RestAngular**: Librería especializada para consumir servicios REST de manera avanzada e intensiva.\n- **angular-aop**: El AOP encapsula los *Aspectos* del código relacionados con instrumentación y seguimiento, liberándolo para la lógica de negocio.\n- **textAngular**: Editor de textos cpn doble binding, formatos, estilos…\n- **angular-translate**: Tener una interfaz en distintos idiomas es una tarea cada vez mas común… y complicada. Esta librería es un gran ayuda.\n- **angular-field-splitter**: Útil para descomponer un campo lógico en varios inputs físicos: Códigos de cuenta, teléfonos, fechas\n- **angular-gm**: Para mostrar mapas de Google de forma dinámica enlazados con tu modelo\n- **ng-slider**: Una barra con punteros para selecionar rangos de forma visual\n","source":"_posts/ng-el-ecosistema-de-AngularJS.md","raw":"---\ntitle: ng* el ecosistema de AngularJS\ntags: \n- AngularJS\ncategories:\n- Avanzado \npermalink: ng-el-ecosistema-de-angularjs\nid: 2\nupdated: 2015/08/20 14:45:59\ndate: 2015/08/15 10:55:14\n---\n\nLista de componentes para ampliar AngularJS que te ayudarán a mejorar tus proyectos.\n\n- **AngularUI**: Antes de programar nada mira si estos chicos ya lo han hecho antes: utilidades, componentes visuales, *bootstrap* y...\n- **ng-grid**: Si tienes que mostrar datos en forma de tabla, este es tu punto de partida.\n- **ngProgress**: Para incorporar una barra de progreso que informe a tus usuarios de la actividad de la aplicación.\n- **RestAngular**: Librería especializada para consumir servicios REST de manera avanzada e intensiva.\n- **angular-aop**: El AOP encapsula los *Aspectos* del código relacionados con instrumentación y seguimiento, liberándolo para la lógica de negocio.\n- **textAngular**: Editor de textos cpn doble binding, formatos, estilos…\n- **angular-translate**: Tener una interfaz en distintos idiomas es una tarea cada vez mas común… y complicada. Esta librería es un gran ayuda.\n- **angular-field-splitter**: Útil para descomponer un campo lógico en varios inputs físicos: Códigos de cuenta, teléfonos, fechas\n- **angular-gm**: Para mostrar mapas de Google de forma dinámica enlazados con tu modelo\n- **ng-slider**: Una barra con punteros para selecionar rangos de forma visual\n","slug":"ng-el-ecosistema-de-angularjs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj18001sc7jsq0lm28fx","content":"<p>Lista de componentes para ampliar AngularJS que te ayudarán a mejorar tus proyectos.</p>\n<ul>\n<li><strong>AngularUI</strong>: Antes de programar nada mira si estos chicos ya lo han hecho antes: utilidades, componentes visuales, <em>bootstrap</em> y…</li>\n<li><strong>ng-grid</strong>: Si tienes que mostrar datos en forma de tabla, este es tu punto de partida.</li>\n<li><strong>ngProgress</strong>: Para incorporar una barra de progreso que informe a tus usuarios de la actividad de la aplicación.</li>\n<li><strong>RestAngular</strong>: Librería especializada para consumir servicios REST de manera avanzada e intensiva.</li>\n<li><strong>angular-aop</strong>: El AOP encapsula los <em>Aspectos</em> del código relacionados con instrumentación y seguimiento, liberándolo para la lógica de negocio.</li>\n<li><strong>textAngular</strong>: Editor de textos cpn doble binding, formatos, estilos…</li>\n<li><strong>angular-translate</strong>: Tener una interfaz en distintos idiomas es una tarea cada vez mas común… y complicada. Esta librería es un gran ayuda.</li>\n<li><strong>angular-field-splitter</strong>: Útil para descomponer un campo lógico en varios inputs físicos: Códigos de cuenta, teléfonos, fechas</li>\n<li><strong>angular-gm</strong>: Para mostrar mapas de Google de forma dinámica enlazados con tu modelo</li>\n<li><strong>ng-slider</strong>: Una barra con punteros para selecionar rangos de forma visual</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Lista de componentes para ampliar AngularJS que te ayudarán a mejorar tus proyectos.</p>\n<ul>\n<li><strong>AngularUI</strong>: Antes de programar nada mira si estos chicos ya lo han hecho antes: utilidades, componentes visuales, <em>bootstrap</em> y…</li>\n<li><strong>ng-grid</strong>: Si tienes que mostrar datos en forma de tabla, este es tu punto de partida.</li>\n<li><strong>ngProgress</strong>: Para incorporar una barra de progreso que informe a tus usuarios de la actividad de la aplicación.</li>\n<li><strong>RestAngular</strong>: Librería especializada para consumir servicios REST de manera avanzada e intensiva.</li>\n<li><strong>angular-aop</strong>: El AOP encapsula los <em>Aspectos</em> del código relacionados con instrumentación y seguimiento, liberándolo para la lógica de negocio.</li>\n<li><strong>textAngular</strong>: Editor de textos cpn doble binding, formatos, estilos…</li>\n<li><strong>angular-translate</strong>: Tener una interfaz en distintos idiomas es una tarea cada vez mas común… y complicada. Esta librería es un gran ayuda.</li>\n<li><strong>angular-field-splitter</strong>: Útil para descomponer un campo lógico en varios inputs físicos: Códigos de cuenta, teléfonos, fechas</li>\n<li><strong>angular-gm</strong>: Para mostrar mapas de Google de forma dinámica enlazados con tu modelo</li>\n<li><strong>ng-slider</strong>: Una barra con punteros para selecionar rangos de forma visual</li>\n</ul>\n"},{"title":"npm: de instalador a publicador","id":"10","updated":"2016-04-19T05:01:25.000Z","date":"2016-04-18T14:07:46.000Z","_content":"\nSeguro que estás harto de repetir la mítica instrucción `npm install paquete-x` Pero, ¿has pensado en **publicar tus propios módulos**?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en [*npm*](https://www.npmjs.com/). \n\nSigue este proceso y te convertirás en un creador de paquetes para *npm* : \n\n## Programa\n\nTodo empieza por tener una necesidad y resolverla **encapsulando su código en un módulo.** Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos. \n\nAntes de continuar vamos a fijar un par de conceptos:\n\n**- módulo:** Fichero *.js* que exporta un funcionalidad y oculta su implementación.\n\n**- paquete:** Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.\n\nConocidos los ingredientes, la receta es sencilla:\n\n1. Debes crear un proyecto para el paquete que vas a publicar. \n2. Has de subir el código a un repositorio público. \n3. Y debes rellenar convenientemente el `package.json` de tu proyecto.\n\nEste es un ejemplo que he creado y [publicado en github](https://github.com/AgoraBinaria/ab-ftp) que te puede servir de base. \n\nPresta especial atención al **nombrado** de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un *prefijo* con tus iniciales o las de tu empresa.\n\nNo te olvides de incluir un juego de **pruebas y documentación** necesaria para sus uso.\n\n## Publica\n\nPuedes descargar librerías y herramienta desde el repositorio de *npm* de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que **registrarte para poder publicar** contenido. El [proceso de registro](https://www.npmjs.com/signup) vía web es sencillo y grátis. \n\nUna vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: `npm login` te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:\n\n```\nnpm publish\n```\n\nPuedes encontrar [más información](https://docs.npmjs.com/cli/publish) acerca de este mega comando en la documentación de *npmjs*. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.\n\nLa clave está en que tu fichero de configuración `package.json` sea correcto y lo más completo posible. Escribe un completo `readme.md` que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo [el contenido subido a github](https://github.com/AgoraBinaria/ab-ftp) se transforma y se ve en la [página de información de npm.](https://www.npmjs.com/package/ab-ftp)\n\n\nComprueba en un directorio vacío que `npm install nombre-de-tu-paquete` descarga todo lo necesario... y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.\n\n\n## Actualiza\n\nCon el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de [nombrado de versiones semántico](http://semver.org/): \n\n**x.y.z = 1.2.3 = ruptura.mejora.parche** \n\nEs bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en *github*.\n\n```\ngit tag 0.1.2\ngit push --tags\n```\n\n\n## Disfruta\n\nFinalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso **siempre habrás ganado**. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.","source":"_posts/npm-de-instalador-a-publicador.md","raw":"---\ntitle: 'npm: de instalador a publicador'\ntags: \n- NodeJS\ncategories:\n- Avanzado \npermalink: npm-de-instalador-a-publicador\nid: 10\nupdated: '2016-04-19 07:01:25'\ndate: 2016-04-18 16:07:46\n---\n\nSeguro que estás harto de repetir la mítica instrucción `npm install paquete-x` Pero, ¿has pensado en **publicar tus propios módulos**?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en [*npm*](https://www.npmjs.com/). \n\nSigue este proceso y te convertirás en un creador de paquetes para *npm* : \n\n## Programa\n\nTodo empieza por tener una necesidad y resolverla **encapsulando su código en un módulo.** Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos. \n\nAntes de continuar vamos a fijar un par de conceptos:\n\n**- módulo:** Fichero *.js* que exporta un funcionalidad y oculta su implementación.\n\n**- paquete:** Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.\n\nConocidos los ingredientes, la receta es sencilla:\n\n1. Debes crear un proyecto para el paquete que vas a publicar. \n2. Has de subir el código a un repositorio público. \n3. Y debes rellenar convenientemente el `package.json` de tu proyecto.\n\nEste es un ejemplo que he creado y [publicado en github](https://github.com/AgoraBinaria/ab-ftp) que te puede servir de base. \n\nPresta especial atención al **nombrado** de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un *prefijo* con tus iniciales o las de tu empresa.\n\nNo te olvides de incluir un juego de **pruebas y documentación** necesaria para sus uso.\n\n## Publica\n\nPuedes descargar librerías y herramienta desde el repositorio de *npm* de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que **registrarte para poder publicar** contenido. El [proceso de registro](https://www.npmjs.com/signup) vía web es sencillo y grátis. \n\nUna vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: `npm login` te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:\n\n```\nnpm publish\n```\n\nPuedes encontrar [más información](https://docs.npmjs.com/cli/publish) acerca de este mega comando en la documentación de *npmjs*. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.\n\nLa clave está en que tu fichero de configuración `package.json` sea correcto y lo más completo posible. Escribe un completo `readme.md` que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo [el contenido subido a github](https://github.com/AgoraBinaria/ab-ftp) se transforma y se ve en la [página de información de npm.](https://www.npmjs.com/package/ab-ftp)\n\n\nComprueba en un directorio vacío que `npm install nombre-de-tu-paquete` descarga todo lo necesario... y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.\n\n\n## Actualiza\n\nCon el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de [nombrado de versiones semántico](http://semver.org/): \n\n**x.y.z = 1.2.3 = ruptura.mejora.parche** \n\nEs bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en *github*.\n\n```\ngit tag 0.1.2\ngit push --tags\n```\n\n\n## Disfruta\n\nFinalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso **siempre habrás ganado**. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.","slug":"npm-de-instalador-a-publicador","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9r8gj1c001wc7jsl5pah3e2","content":"<p>Seguro que estás harto de repetir la mítica instrucción <code>npm install paquete-x</code> Pero, ¿has pensado en <strong>publicar tus propios módulos</strong>?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\"><em>npm</em></a>. </p>\n<p>Sigue este proceso y te convertirás en un creador de paquetes para <em>npm</em> : </p>\n<h2 id=\"Programa\"><a href=\"#Programa\" class=\"headerlink\" title=\"Programa\"></a>Programa</h2><p>Todo empieza por tener una necesidad y resolverla <strong>encapsulando su código en un módulo.</strong> Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos. </p>\n<p>Antes de continuar vamos a fijar un par de conceptos:</p>\n<p><strong>- módulo:</strong> Fichero <em>.js</em> que exporta un funcionalidad y oculta su implementación.</p>\n<p><strong>- paquete:</strong> Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.</p>\n<p>Conocidos los ingredientes, la receta es sencilla:</p>\n<ol>\n<li>Debes crear un proyecto para el paquete que vas a publicar. </li>\n<li>Has de subir el código a un repositorio público. </li>\n<li>Y debes rellenar convenientemente el <code>package.json</code> de tu proyecto.</li>\n</ol>\n<p>Este es un ejemplo que he creado y <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"external\">publicado en github</a> que te puede servir de base. </p>\n<p>Presta especial atención al <strong>nombrado</strong> de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un <em>prefijo</em> con tus iniciales o las de tu empresa.</p>\n<p>No te olvides de incluir un juego de <strong>pruebas y documentación</strong> necesaria para sus uso.</p>\n<h2 id=\"Publica\"><a href=\"#Publica\" class=\"headerlink\" title=\"Publica\"></a>Publica</h2><p>Puedes descargar librerías y herramienta desde el repositorio de <em>npm</em> de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que <strong>registrarte para poder publicar</strong> contenido. El <a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"external\">proceso de registro</a> vía web es sencillo y grátis. </p>\n<p>Una vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: <code>npm login</code> te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm publish</div></pre></td></tr></table></figure>\n<p>Puedes encontrar <a href=\"https://docs.npmjs.com/cli/publish\" target=\"_blank\" rel=\"external\">más información</a> acerca de este mega comando en la documentación de <em>npmjs</em>. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.</p>\n<p>La clave está en que tu fichero de configuración <code>package.json</code> sea correcto y lo más completo posible. Escribe un completo <code>readme.md</code> que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"external\">el contenido subido a github</a> se transforma y se ve en la <a href=\"https://www.npmjs.com/package/ab-ftp\" target=\"_blank\" rel=\"external\">página de información de npm.</a></p>\n<p>Comprueba en un directorio vacío que <code>npm install nombre-de-tu-paquete</code> descarga todo lo necesario… y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.</p>\n<h2 id=\"Actualiza\"><a href=\"#Actualiza\" class=\"headerlink\" title=\"Actualiza\"></a>Actualiza</h2><p>Con el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de <a href=\"http://semver.org/\" target=\"_blank\" rel=\"external\">nombrado de versiones semántico</a>: </p>\n<p><strong>x.y.z = 1.2.3 = ruptura.mejora.parche</strong> </p>\n<p>Es bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en <em>github</em>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag 0.1.2</div><div class=\"line\">git push --tags</div></pre></td></tr></table></figure>\n<h2 id=\"Disfruta\"><a href=\"#Disfruta\" class=\"headerlink\" title=\"Disfruta\"></a>Disfruta</h2><p>Finalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso <strong>siempre habrás ganado</strong>. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Seguro que estás harto de repetir la mítica instrucción <code>npm install paquete-x</code> Pero, ¿has pensado en <strong>publicar tus propios módulos</strong>?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\"><em>npm</em></a>. </p>\n<p>Sigue este proceso y te convertirás en un creador de paquetes para <em>npm</em> : </p>\n<h2 id=\"Programa\"><a href=\"#Programa\" class=\"headerlink\" title=\"Programa\"></a>Programa</h2><p>Todo empieza por tener una necesidad y resolverla <strong>encapsulando su código en un módulo.</strong> Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos. </p>\n<p>Antes de continuar vamos a fijar un par de conceptos:</p>\n<p><strong>- módulo:</strong> Fichero <em>.js</em> que exporta un funcionalidad y oculta su implementación.</p>\n<p><strong>- paquete:</strong> Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.</p>\n<p>Conocidos los ingredientes, la receta es sencilla:</p>\n<ol>\n<li>Debes crear un proyecto para el paquete que vas a publicar. </li>\n<li>Has de subir el código a un repositorio público. </li>\n<li>Y debes rellenar convenientemente el <code>package.json</code> de tu proyecto.</li>\n</ol>\n<p>Este es un ejemplo que he creado y <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"external\">publicado en github</a> que te puede servir de base. </p>\n<p>Presta especial atención al <strong>nombrado</strong> de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un <em>prefijo</em> con tus iniciales o las de tu empresa.</p>\n<p>No te olvides de incluir un juego de <strong>pruebas y documentación</strong> necesaria para sus uso.</p>\n<h2 id=\"Publica\"><a href=\"#Publica\" class=\"headerlink\" title=\"Publica\"></a>Publica</h2><p>Puedes descargar librerías y herramienta desde el repositorio de <em>npm</em> de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que <strong>registrarte para poder publicar</strong> contenido. El <a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"external\">proceso de registro</a> vía web es sencillo y grátis. </p>\n<p>Una vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: <code>npm login</code> te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm publish</div></pre></td></tr></table></figure>\n<p>Puedes encontrar <a href=\"https://docs.npmjs.com/cli/publish\" target=\"_blank\" rel=\"external\">más información</a> acerca de este mega comando en la documentación de <em>npmjs</em>. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.</p>\n<p>La clave está en que tu fichero de configuración <code>package.json</code> sea correcto y lo más completo posible. Escribe un completo <code>readme.md</code> que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"external\">el contenido subido a github</a> se transforma y se ve en la <a href=\"https://www.npmjs.com/package/ab-ftp\" target=\"_blank\" rel=\"external\">página de información de npm.</a></p>\n<p>Comprueba en un directorio vacío que <code>npm install nombre-de-tu-paquete</code> descarga todo lo necesario… y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.</p>\n<h2 id=\"Actualiza\"><a href=\"#Actualiza\" class=\"headerlink\" title=\"Actualiza\"></a>Actualiza</h2><p>Con el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de <a href=\"http://semver.org/\" target=\"_blank\" rel=\"external\">nombrado de versiones semántico</a>: </p>\n<p><strong>x.y.z = 1.2.3 = ruptura.mejora.parche</strong> </p>\n<p>Es bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en <em>github</em>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag 0.1.2</div><div class=\"line\">git push --tags</div></pre></td></tr></table></figure>\n<h2 id=\"Disfruta\"><a href=\"#Disfruta\" class=\"headerlink\" title=\"Disfruta\"></a>Disfruta</h2><p>Finalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso <strong>siempre habrás ganado</strong>. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj9r8giyr0001c7jsbvjhmizz","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj04000ic7jsypqg45w3"},{"post_id":"cj9r8gizr000bc7js58bp4pi0","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj07000mc7jsjbedhdox"},{"post_id":"cj9r8gizz000fc7js7qy5siwg","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj0b000pc7jsav888uhf"},{"post_id":"cj9r8giz10003c7js6s5wls0g","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj0e000tc7jsxgqp0xek"},{"post_id":"cj9r8gj02000gc7jss57818e2","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj0g000wc7js303p9jym"},{"post_id":"cj9r8gj06000lc7jsb7imml9r","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj0l000zc7jsdt7qokye"},{"post_id":"cj9r8gizi0007c7jsfnwj1rhr","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj0n0014c7js81bftnkk"},{"post_id":"cj9r8gj08000oc7jsfzwv52hx","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj0p0017c7jso1nmtvnt"},{"post_id":"cj9r8gj0d000sc7jsj56jy53r","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj0r001bc7jso5qu43cu"},{"post_id":"cj9r8gj0i000yc7jso19m023g","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj0u001ec7jsss84vwxa"},{"post_id":"cj9r8gj0m0012c7jsaco2vem3","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj0y001ic7jsgetmltox"},{"post_id":"cj9r8gj0n0016c7js11wjbm7f","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj13001lc7js4azcf1tx"},{"post_id":"cj9r8gj0p0019c7jspt8jz434","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj16001oc7jsxkpu8b6j"},{"post_id":"cj9r8gj0t001dc7jsa11v2yiu","category_id":"cj9r8giz80004c7jsizbxuyvz","_id":"cj9r8gj18001rc7jsk81wm8rh"},{"post_id":"cj9r8gj0f000vc7js0i3vpe4h","category_id":"cj9r8gj0n0013c7jsh5dxyt3l","_id":"cj9r8gj1b001uc7jspd3cwa0n"},{"post_id":"cj9r8gj0f000vc7js0i3vpe4h","category_id":"cj9r8gj0u001fc7js6zuil06c","_id":"cj9r8gj1e001xc7jsim4oe60d"},{"post_id":"cj9r8gj17001qc7js5snsr7ob","category_id":"cj9r8gj14001mc7jsgdtvesgg","_id":"cj9r8gj1f0020c7jskbic8pxb"},{"post_id":"cj9r8gj0w001hc7js9hnlevsf","category_id":"cj9r8gj14001mc7jsgdtvesgg","_id":"cj9r8gj1f0023c7jsrcmt3hwf"},{"post_id":"cj9r8gj11001kc7jsqndiq0l6","category_id":"cj9r8gj14001mc7jsgdtvesgg","_id":"cj9r8gj1g0026c7js1msiv5c1"},{"post_id":"cj9r8gj15001nc7js4ryi1ikd","category_id":"cj9r8gj14001mc7jsgdtvesgg","_id":"cj9r8gj1h002ac7jstxjqd3gk"},{"post_id":"cj9r8gj18001sc7jsq0lm28fx","category_id":"cj9r8gj1g0025c7jskbawa7gd","_id":"cj9r8gj1j002fc7js39d1ovcc"},{"post_id":"cj9r8gj1c001wc7jsl5pah3e2","category_id":"cj9r8gj1g0025c7jskbawa7gd","_id":"cj9r8gj1l002hc7jsz6gn63wc"},{"post_id":"cj9r8gizo0009c7jsu1asddz3","category_id":"cj9r8gj0n0013c7jsh5dxyt3l","_id":"cj9rd71ho00039mjs6ifoqed1"},{"post_id":"cj9r8gizo0009c7jsu1asddz3","category_id":"cj9r8gj0u001fc7js6zuil06c","_id":"cj9rd71hp00059mjs4uwx577m"}],"PostTag":[{"post_id":"cj9r8giyr0001c7jsbvjhmizz","tag_id":"cj9r8gizf0005c7jspj023369","_id":"cj9r8gizw000ec7js1vrbroz9"},{"post_id":"cj9r8gizz000fc7js7qy5siwg","tag_id":"cj9r8gizt000dc7jsozt9hli5","_id":"cj9r8gj06000kc7jsht3gzjs1"},{"post_id":"cj9r8giz10003c7js6s5wls0g","tag_id":"cj9r8gizt000dc7jsozt9hli5","_id":"cj9r8gj08000nc7js8olgah38"},{"post_id":"cj9r8gj02000gc7jss57818e2","tag_id":"cj9r8gizt000dc7jsozt9hli5","_id":"cj9r8gj0c000rc7js9pbbg8ww"},{"post_id":"cj9r8gj06000lc7jsb7imml9r","tag_id":"cj9r8gizt000dc7jsozt9hli5","_id":"cj9r8gj0e000uc7jsw1756q1l"},{"post_id":"cj9r8gizi0007c7jsfnwj1rhr","tag_id":"cj9r8gizt000dc7jsozt9hli5","_id":"cj9r8gj0i000xc7jssz7xb1z8"},{"post_id":"cj9r8gj08000oc7jsfzwv52hx","tag_id":"cj9r8gizt000dc7jsozt9hli5","_id":"cj9r8gj0m0011c7js7ox827tn"},{"post_id":"cj9r8gj0d000sc7jsj56jy53r","tag_id":"cj9r8gizt000dc7jsozt9hli5","_id":"cj9r8gj0n0015c7jsygx6bvi0"},{"post_id":"cj9r8gizr000bc7js58bp4pi0","tag_id":"cj9r8gizt000dc7jsozt9hli5","_id":"cj9r8gj0p0018c7jsahn45nur"},{"post_id":"cj9r8gj0i000yc7jso19m023g","tag_id":"cj9r8gizt000dc7jsozt9hli5","_id":"cj9r8gj0s001cc7js37lzavvk"},{"post_id":"cj9r8gj0m0012c7jsaco2vem3","tag_id":"cj9r8gizf0005c7jspj023369","_id":"cj9r8gj0v001gc7jsgb49ywwu"},{"post_id":"cj9r8gj0f000vc7js0i3vpe4h","tag_id":"cj9r8gj0l0010c7jsliph87sw","_id":"cj9r8gj1e001yc7js7qrt80ig"},{"post_id":"cj9r8gj0f000vc7js0i3vpe4h","tag_id":"cj9r8gj0r001ac7jsxvhuism1","_id":"cj9r8gj1f0021c7js4eturlbl"},{"post_id":"cj9r8gj0f000vc7js0i3vpe4h","tag_id":"cj9r8gj0y001jc7js0vc2ti9i","_id":"cj9r8gj1g0024c7jsez5eifen"},{"post_id":"cj9r8gj0f000vc7js0i3vpe4h","tag_id":"cj9r8gj17001pc7jslp8nla4v","_id":"cj9r8gj1g0027c7jsmp7r3zzh"},{"post_id":"cj9r8gj0n0016c7js11wjbm7f","tag_id":"cj9r8gj1b001vc7jsxm731584","_id":"cj9r8gj1h0029c7jse5nudtxz"},{"post_id":"cj9r8gj0p0019c7jspt8jz434","tag_id":"cj9r8gj1f0022c7jsx95wm5fv","_id":"cj9r8gj1i002cc7jspeq50gh8"},{"post_id":"cj9r8gj0t001dc7jsa11v2yiu","tag_id":"cj9r8gj1f0022c7jsx95wm5fv","_id":"cj9r8gj1j002ec7jsuphcmjw4"},{"post_id":"cj9r8gj0w001hc7js9hnlevsf","tag_id":"cj9r8gj1i002dc7js73femfdr","_id":"cj9r8gj1l002ic7jsw5cslj4p"},{"post_id":"cj9r8gj11001kc7jsqndiq0l6","tag_id":"cj9r8gj1k002gc7js7hu5ezb6","_id":"cj9r8gj1n002mc7js09zxo5w8"},{"post_id":"cj9r8gj11001kc7jsqndiq0l6","tag_id":"cj9r8gj1f0022c7jsx95wm5fv","_id":"cj9r8gj1n002nc7jsr9ewxjj4"},{"post_id":"cj9r8gj11001kc7jsqndiq0l6","tag_id":"cj9r8gj1b001vc7jsxm731584","_id":"cj9r8gj1o002pc7jsj3v6oe96"},{"post_id":"cj9r8gj15001nc7js4ryi1ikd","tag_id":"cj9r8gj1n002lc7jsqeie62hz","_id":"cj9r8gj1o002rc7jsp6liyc1q"},{"post_id":"cj9r8gj15001nc7js4ryi1ikd","tag_id":"cj9r8gj1i002dc7js73femfdr","_id":"cj9r8gj1o002sc7jsdslpqhsy"},{"post_id":"cj9r8gj17001qc7js5snsr7ob","tag_id":"cj9r8gj1o002qc7jsubaierlq","_id":"cj9r8gj1q002uc7jsz4bmyq1y"},{"post_id":"cj9r8gj18001sc7jsq0lm28fx","tag_id":"cj9r8gj1i002dc7js73femfdr","_id":"cj9r8gj1r002wc7jsx8fru626"},{"post_id":"cj9r8gj1c001wc7jsl5pah3e2","tag_id":"cj9r8gj1f0022c7jsx95wm5fv","_id":"cj9r8gj1r002xc7js2sk6ubau"},{"post_id":"cj9r8gizo0009c7jsu1asddz3","tag_id":"cj9r8gj0l0010c7jsliph87sw","_id":"cj9rd71hl00009mjsnl3z8hle"},{"post_id":"cj9r8gizo0009c7jsu1asddz3","tag_id":"cj9r8gj0r001ac7jsxvhuism1","_id":"cj9rd71hm00019mjsfbcf74eb"},{"post_id":"cj9r8gizo0009c7jsu1asddz3","tag_id":"cj9r8gj0y001jc7js0vc2ti9i","_id":"cj9rd71ho00029mjs2gscml6h"},{"post_id":"cj9r8gizo0009c7jsu1asddz3","tag_id":"cj9r8gj17001pc7jslp8nla4v","_id":"cj9rd71ho00049mjsppozvfsf"}],"Tag":[{"name":"Bootstrap","_id":"cj9r8gizf0005c7jspj023369"},{"name":"Angular2","_id":"cj9r8gizt000dc7jsozt9hli5"},{"name":"Angular","_id":"cj9r8gj0l0010c7jsliph87sw"},{"name":"Angular5","_id":"cj9r8gj0r001ac7jsxvhuism1"},{"name":"CLI","_id":"cj9r8gj0y001jc7js0vc2ti9i"},{"name":"Tutorial","_id":"cj9r8gj17001pc7jslp8nla4v"},{"name":"MongoDB","_id":"cj9r8gj1b001vc7jsxm731584"},{"name":"NodeJS","_id":"cj9r8gj1f0022c7jsx95wm5fv"},{"name":"AngularJS","_id":"cj9r8gj1i002dc7js73femfdr"},{"name":"BackEnd","_id":"cj9r8gj1k002gc7js7hu5ezb6"},{"name":"FrontEnd","_id":"cj9r8gj1n002lc7jsqeie62hz"},{"name":"TypeScript","_id":"cj9r8gj1o002qc7jsubaierlq"}]}}