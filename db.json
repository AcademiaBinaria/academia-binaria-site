{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/10-projects-dependency.png","path":"images/10-projects-dependency.png","modified":0,"renderable":0},{"_id":"source/images/12-class-dependency.png","path":"images/12-class-dependency.png","modified":0,"renderable":0},{"_id":"source/images/11-projects-dependency.png","path":"images/11-projects-dependency.png","modified":0,"renderable":0},{"_id":"source/images/12-projects-dependency.png","path":"images/12-projects-dependency.png","modified":0,"renderable":0},{"_id":"source/images/13-class-dependency.png","path":"images/13-class-dependency.png","modified":0,"renderable":0},{"_id":"source/images/13-projects-dependency.png","path":"images/13-projects-dependency.png","modified":0,"renderable":0},{"_id":"source/images/Redux.png","path":"images/Redux.png","modified":0,"renderable":0},{"_id":"source/images/change-detection.jpg","path":"images/change-detection.jpg","modified":0,"renderable":0},{"_id":"source/images/draw-horse.jpeg","path":"images/draw-horse.jpeg","modified":0,"renderable":0},{"_id":"source/images/light-new-year-s-eve-fireworks-sylvester-40663.jpg","path":"images/light-new-year-s-eve-fireworks-sylvester-40663.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Arbol-de-componentes.jpg","path":"images/ng2-Arbol-de-componentes.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Arbol-de-dependencias.jpg","path":"images/ng2-Arbol-de-dependencias.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Component-DataFlow.jpg","path":"images/ng2-Component-DataFlow.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-DI-component-directive.jpg","path":"images/ng2-DI-component-directive.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-DI-component-service.jpg","path":"images/ng2-DI-component-service.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Flujo-de-datos.jpg","path":"images/ng2-Flujo-de-datos.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2Component--1-.jpg","path":"images/ng2Component--1-.jpg","modified":0,"renderable":0},{"_id":"source/images/pedidos_ms.PNG","path":"images/pedidos_ms.PNG","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-0_cli.png","path":"images/tutorial-angular-0_cli.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-10_monorepo.png","path":"images/tutorial-angular-10_monorepo.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-11_test.png","path":"images/tutorial-angular-11_test.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-12_change.png","path":"images/tutorial-angular-12_change.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-13_template.png","path":"images/tutorial-angular-13_template.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-14_redux.png","path":"images/tutorial-angular-14_redux.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-15_ngrx.png","path":"images/tutorial-angular-15_ngrx.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-17_ssr.png","path":"images/tutorial-angular-17_ssr.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-18_i18n.png","path":"images/tutorial-angular-18_i18n.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-16_pwa.png","path":"images/tutorial-angular-16_pwa.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-19_elements.png","path":"images/tutorial-angular-19_elements.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-1_base.png","path":"images/tutorial-angular-1_base.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-2_spa.png","path":"images/tutorial-angular-2_spa.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-3_data.png","path":"images/tutorial-angular-3_data.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-4_flow.png","path":"images/tutorial-angular-4_flow.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_inject.png","path":"images/tutorial-angular-5_inject.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-6_http.png","path":"images/tutorial-angular-6_http.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-7_watch.png","path":"images/tutorial-angular-7_watch.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-8_reactive.png","path":"images/tutorial-angular-8_reactive.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-9_material.png","path":"images/tutorial-angular-9_material.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/Angular_Bootcamp.png","path":"css/images/Angular_Bootcamp.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/Angular_Bootcamp_Cruise.png","path":"css/images/Angular_Bootcamp_Cruise.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-0_cli.png","path":"css/images/angular-0_cli.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-10_monorepo.png","path":"css/images/angular-10_monorepo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-12_change.png","path":"css/images/angular-12_change.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-13_template.png","path":"css/images/angular-13_template.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-11_test.png","path":"css/images/angular-11_test.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-14_redux.png","path":"css/images/angular-14_redux.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-15_ngrx.png","path":"css/images/angular-15_ngrx.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-16_pwa.png","path":"css/images/angular-16_pwa.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-17_ssr.png","path":"css/images/angular-17_ssr.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-18_i18n.png","path":"css/images/angular-18_i18n.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-19_elements.png","path":"css/images/angular-19_elements.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-1_base.png","path":"css/images/angular-1_base.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-2_spa.png","path":"css/images/angular-2_spa.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-3_data.png","path":"css/images/angular-3_data.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-4_flow.png","path":"css/images/angular-4_flow.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_inject.png","path":"css/images/angular-5_inject.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-7_watch.png","path":"css/images/angular-7_watch.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-6_http.png","path":"css/images/angular-6_http.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-8_reactive.png","path":"css/images/angular-8_reactive.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-9_material.png","path":"css/images/angular-9_material.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular.builders.png","path":"css/images/angular.builders.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular.builders_cuadrado.png","path":"css/images/angular.builders_cuadrado.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular.jpg","path":"css/images/angular.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular_18_i18n.png","path":"css/images/angular_18_i18n.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/typescript.jpg","path":"css/images/typescript.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"39d94912a63ec708e3af99df0204f2b60fb1105d","modified":1688293558466},{"_id":"source/404.md","hash":"ed869e21a6ac3f026e7f38aab1e2bbf374e19444","modified":1688293558466},{"_id":"source/angular_9-original-clean.md","hash":"ad2c14d922b00c72cc534aae8fdab90ada41af89","modified":1688293558482},{"_id":"source/angular_9-translate.md","hash":"b3c722ce979e97ec9a021a58a00fa946cb7dd5c2","modified":1688293558482},{"_id":"source/Contacto/index.md","hash":"d16c83465c195b8364f734b165627c2b0ad7d1a4","modified":1688293558466},{"_id":"source/Cookies/index.md","hash":"910a9c77e0b6b83065878febc522fba888491234","modified":1688293558467},{"_id":"source/Cursos/_old_index.md","hash":"6e08f944b7ed227418d8b2c85d96a364e2bc2667","modified":1688293558467},{"_id":"source/Cursos/_angular-basic.md","hash":"759a4183d6fc9b4abd2ceea95e3e6342c078b4c0","modified":1688293558467},{"_id":"source/Noticias-Junio-2016/index.md","hash":"1189d0847c6c149b8e4fb81516f4865ca2bf6fed","modified":1688293558468},{"_id":"source/Promociones/index.md","hash":"f632b70d1a3924a0335fdc734366a31c1d8bc1cd","modified":1688293558469},{"_id":"source/Cursos/index.md","hash":"846142b148c561a2dd81247dfb84e10f589724bb","modified":1688293558468},{"_id":"source/Cursos/angular-business.md","hash":"b1dbefe7e875f71295e1a8250cebe0f2ec33b791","modified":1688293558468},{"_id":"source/images/10-projects-dependency.png","hash":"05aa9816c520bcbee12b267c5635e61ee990ef9f","modified":1688293558483},{"_id":"source/images/12-class-dependency.png","hash":"41e598b1f619cd59bf931ae0988c9ee6fe66ba2d","modified":1688293558484},{"_id":"source/images/11-projects-dependency.png","hash":"328588f3e93749fdceb24bc898bd23f63391b584","modified":1688293558483},{"_id":"source/images/12-projects-dependency.png","hash":"4456a09bade67f87e690a380f7acecc3f59cbe75","modified":1688293558484},{"_id":"source/images/13-class-dependency.png","hash":"ce409f5b00733eaa6a47b13ed5e3df4d8f77726b","modified":1688293558485},{"_id":"source/images/13-projects-dependency.png","hash":"160ee55cb4860cb32a9f7783bdeb59414abb846b","modified":1688293558485},{"_id":"source/images/change-detection.jpg","hash":"38e2ad8769de570d9fb8f33567d8e9807283bb01","modified":1688293558486},{"_id":"source/images/draw-horse.jpeg","hash":"9b7c94d3a9417ee722955dd3bc8462de1ecb62d0","modified":1688293558487},{"_id":"source/images/ng2-Arbol-de-componentes.jpg","hash":"ddf926766408af4ce8c65d3de3d5ff0270a0121b","modified":1688293558488},{"_id":"source/images/ng2-Arbol-de-dependencias.jpg","hash":"e474811bca4569fc209680fcb7f7fc432b60af99","modified":1688293558489},{"_id":"source/images/ng2-DI-component-directive.jpg","hash":"ed32320793c7b4c608bcb55d8bdc63ba40dde3fc","modified":1688293558490},{"_id":"source/images/ng2-DI-component-service.jpg","hash":"36febb9d7dbdc6fa87d03d7b5c0ad28adfbcf130","modified":1688293558490},{"_id":"source/images/ng2-Component-DataFlow.jpg","hash":"0032c08ed4f67fc294781b6acb472f50f17ed0f2","modified":1688293558489},{"_id":"source/images/ng2-Flujo-de-datos.jpg","hash":"e8a401ea27c0d850170a310ee8ce5db233cd3214","modified":1688293558491},{"_id":"source/images/ng2Component--1-.jpg","hash":"4f3a1732800a40410e7b34cb733633866d2dccaf","modified":1688293558491},{"_id":"source/images/tutorial-angular-5_inject.png","hash":"6c973db275b9201fa39c30a7e45a5a16e419808d","modified":1688293558510},{"_id":"source/_posts/Node-6-0-0-actualizacion-con-nvm.md","hash":"b817fe493340291ff7296a7905b8b72a0f96db7c","modified":1688293558469},{"_id":"source/_posts/Para-que-puedo-usar-NodeJS.md","hash":"996914b2c4071c5b793efbd1882469a5779a2e81","modified":1688293558470},{"_id":"source/_posts/TypeScript-programa-en-el-front-igual-que-en-el-back.md","hash":"da2060ceb3a10fff69ce61a338bdb86e4f98849d","modified":1688293558471},{"_id":"source/_posts/Soluciones-FrontEnd-2016.md","hash":"15accef29481686ca3e967aade9849365285b3b5","modified":1688293558471},{"_id":"source/_posts/___ng-6-comunicaciones-http-en-angular copy.txt","hash":"cd67fc629191eb7a9d0ef237d515a2fad1932006","modified":1688293558472},{"_id":"source/_posts/___ng-3-Formularios-tablas-y-modelos-de-datos-en-Angular copy.txt","hash":"6c9dc61b538fe35a81973d591d06cc36c1b79b98","modified":1688293558471},{"_id":"source/_posts/Soluciones-BackEnd-2016.md","hash":"2ce02cb5e4aad50d54c8c55b23698fbdf86ec905","modified":1688293558470},{"_id":"source/_posts/___ng-7-Vigilancia-y-seguridad-en-Angular copy.txt","hash":"a190ab8231b2fd90ce6a63e822c25b97e29e29e4","modified":1688293558472},{"_id":"source/_posts/___ng_2-Paginas-y-rutas-Angular-SPA copy.txt","hash":"7fbbbcb2ca560dec0b6066a6d6861c0a78e7b06d","modified":1688293558473},{"_id":"source/_posts/angular9.md","hash":"7220326e4cef5a0de72fb4e84aef4123b4af9d51","modified":1688293558473},{"_id":"source/_posts/ng-10-nx-mono-repositorios-en-Angular.md","hash":"f1754cb7727d4fc82c5cdf07cb1d35152a0399ce","modified":1688293558473},{"_id":"source/_posts/ng-12-Deteccion-del-cambio-en-Angular.md","hash":"08611becfd9406924480ec38418530882f3e9b7a","modified":1688293558474},{"_id":"source/_posts/ng-11-tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular.md","hash":"a0fc29d3e3358bf4562a7dd4371b60e91dfcd510","modified":1688293558474},{"_id":"source/_posts/ng-13-Componentes-dinamicos-directivas-y-pipes-con-Angular.md","hash":"16baa45c66c7274434c1ff5bf516856ac2214853","modified":1688293558474},{"_id":"source/_posts/ng-14-Flujo reactivo unidireccional con Angular y RxJs.md","hash":"ca2d976555dda0fd7b575d6b2d76af8b80fcf97d","modified":1688293558475},{"_id":"source/_posts/ng-15-El-patron-Redux-con-NgRx-en-Angular.md","hash":"dc9b40bb457b939ba82f1272635d82f63a83faa8","modified":1688293558475},{"_id":"source/_posts/ng-16-PWA-Entre-la-web-y-las-apps-con-Angular.md","hash":"c7c0c7cd8aca7669e765c398b7d8f1cc40a45045","modified":1688293558475},{"_id":"source/_posts/ng-19-Elementos Angular para los Web Components.md","hash":"8be93812e4ca2d1bb5562a080a7cd19bf1a2dfcf","modified":1688293558476},{"_id":"source/_posts/ng-17-velocidad-y-seo-con-el-ssr-de-angular-universal.md","hash":"d70445f8fc0d864595a9f36e3e911353d95cc214","modified":1688293558476},{"_id":"source/_posts/ng-3-Formularios-tablas-y-modelos-de-datos-en-Angular.md","hash":"6b08c31c5e3c73560be05a28073d236e1d5eb5f5","modified":1688293558477},{"_id":"source/_posts/ng-18-internacionalizacion-y-puesta-en-produccion-con-Angular.md","hash":"fa1b1bb5b698f35c1593763b38351ff5b3dd2984","modified":1688293558476},{"_id":"source/_posts/ng-4-Flujo-de-datos-entre-componentes-Angular.md","hash":"29b440d3f1dd2633e07718c50d0c2ccc3572f5a7","modified":1688293558477},{"_id":"source/_posts/ng-5-Servicios-inyectables-en-Angular.md","hash":"0c05fbe4b51d2f884b40cb3e00bea0ba8bfbb727","modified":1688293558478},{"_id":"source/_posts/ng-6-comunicaciones-http-en-angular.md","hash":"1c2a89c72a8d00df5d0cd41188a1d3feb67a6994","modified":1688293558478},{"_id":"source/_posts/ng-7-Vigilancia-y-seguridad-en-Angular.md","hash":"770ca27445a0fbe36a9a1116ff37d179cae68cc6","modified":1688293558479},{"_id":"source/_posts/ng-8-Formularios-reactivos-con-Angular.md","hash":"c3d18346d872ed8d5b5d330044e715ebda63f1f1","modified":1688293558479},{"_id":"source/_posts/ng-9-Material-Design-y-CLI-de-Angular.md","hash":"6356b1e59fc444240cbd15ef8aa0dbdf5f3234ad","modified":1688293558479},{"_id":"source/_posts/ng_0-Hola-Angular-CLI.md","hash":"0391eead0440a1f9e92f1da1d4516523a774c8db","modified":1688293558480},{"_id":"source/_posts/ng_2-Paginas-y-rutas-Angular-SPA.md","hash":"55a4c322389d9000ec2bfe23cc121de1aaf4e6f4","modified":1688293558481},{"_id":"source/_posts/ng_1-Base-aplicacion-Angular.md","hash":"bf61462feab7be06b3f783eadc592a617fa8b222","modified":1688293558480},{"_id":"source/_posts/npm-de-instalador-a-publicador.md","hash":"a63c7015f4602ad57a5a5603564bad985681b446","modified":1688293558481},{"_id":"source/_posts/temp.txt","hash":"d82d37c2d5422e2521693d7ee4d75b7e8c4959c7","modified":1688293558482},{"_id":"source/scaffolds/draft.md","hash":"b14e9fa1e21c75482dd3f05d27705719a2cb47f1","modified":1688293558513},{"_id":"source/scaffolds/page.md","hash":"892cedeb7b62a73e72a3b369daf2bc63dfee47dc","modified":1688293558513},{"_id":"source/scaffolds/post.md","hash":"c569840f0ea232daf0865c3bc8f7ef63b235be62","modified":1688293558514},{"_id":"source/images/Redux.png","hash":"5824bf36b4472131be0381fadaa7e540280fa33c","modified":1688293558486},{"_id":"source/images/pedidos_ms.PNG","hash":"87bfe70ad301e5eb261f9289eceb66ba0ad263a9","modified":1688293558492},{"_id":"source/images/tutorial-angular-18_i18n.png","hash":"9e2fa00fa1f8d0c1880eb8659e1b4714b29b434b","modified":1688293558504},{"_id":"source/images/tutorial-angular-19_elements.png","hash":"55eb695dd934f607f61f2f84a33d8d5194427902","modified":1688293558505},{"_id":"source/images/tutorial-angular-6_http.png","hash":"ad9a952719b98cd7aa14820172e70a9697b497fd","modified":1688293558510},{"_id":"source/images/tutorial-angular-7_watch.png","hash":"ba0564cd624db724dab51a4b9f4c920e527fa37a","modified":1688293558511},{"_id":"source/images/tutorial-angular-8_reactive.png","hash":"efd001decaa557eb69d70bc7be7931c78362ff00","modified":1688293558512},{"_id":"source/images/tutorial-angular-0_cli.png","hash":"0f7ab5648cb3b0ee99d0c52bdf8186dfe7b9986a","modified":1688293558493},{"_id":"source/images/tutorial-angular-10_monorepo.png","hash":"7102f1df6829b462c50e20d588d05a2c39c15899","modified":1688293558494},{"_id":"source/images/tutorial-angular-11_test.png","hash":"29b4f8736ddaf8c7bc41fc1a7840d086025f943c","modified":1688293558495},{"_id":"source/images/tutorial-angular-14_redux.png","hash":"6576136bb7fe92b1415a71064c75cf116f110f70","modified":1688293558498},{"_id":"source/images/tutorial-angular-13_template.png","hash":"36fcc8ea820e68d1a6f62ae84ba6fafbfcb746a4","modified":1688293558497},{"_id":"source/images/tutorial-angular-16_pwa.png","hash":"4fcca7fe1f8e483d1712e04ffd856a8f5bb4eac2","modified":1688293558500},{"_id":"source/images/tutorial-angular-2_spa.png","hash":"01f90e62f3ad81b990b47b96fc5fdfb3354e1433","modified":1688293558507},{"_id":"source/images/tutorial-angular-4_flow.png","hash":"4484fdf085e6361a070d09ef059f2b0570ab83f6","modified":1688293558509},{"_id":"source/images/tutorial-angular-3_data.png","hash":"7e963d68e8c6015ebd95d560203ae63165232ccf","modified":1688293558508},{"_id":"source/images/tutorial-angular-9_material.png","hash":"04134304478eab6bf7335950deec1d76ca404f81","modified":1688293558513},{"_id":"source/images/light-new-year-s-eve-fireworks-sylvester-40663.jpg","hash":"6a113f77c9df70e22fea4f03851797cc6e298667","modified":1688293558488},{"_id":"source/images/tutorial-angular-12_change.png","hash":"8fac09f82d3fb8a9afaddd547653040605ce145e","modified":1688293558496},{"_id":"source/images/tutorial-angular-15_ngrx.png","hash":"32fe748e5c2f5ed47ecdc15240dc6fcf93805a2e","modified":1688293558499},{"_id":"source/images/tutorial-angular-1_base.png","hash":"fd0fb70cc95d61f24978b0d4a13da675639aaa4b","modified":1688293558506},{"_id":"themes/icarus/icarus.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1688293558516},{"_id":"themes/icarus/LICENSE","hash":"73ed09aa00f7bda6319fc7d5b722fb40e0c2017e","modified":1688293558515},{"_id":"themes/icarus/README.md","hash":"c2407cbda23f087be719d6dc3f7207a8e01ffd73","modified":1688293558515},{"_id":"themes/icarus/_config.yml","hash":"22205966cb8432acd2d4126d68d666733059a7f5","modified":1688293558515},{"_id":"themes/icarus/_config.yml.example","hash":"73af4425442660d8cd491115a13d2a14c52f59cc","modified":1688293558515},{"_id":"themes/icarus/package.json","hash":"c156985c2689895a228188a29ceaae8f7d0bb34f","modified":1688293558545},{"_id":"themes/icarus/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1688293558517},{"_id":"themes/icarus/languages/es.yml","hash":"aff832ad099fdeac148c643360df44d0a7f59874","modified":1688293558517},{"_id":"themes/icarus/languages/en.yml","hash":"2b888a89957e07f440452a12ef338af979abb4c6","modified":1688293558517},{"_id":"themes/icarus/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1688293558518},{"_id":"themes/icarus/languages/id.yml","hash":"83021037b6dad8dd48f48e3b4a822d07d56fc272","modified":1688293558518},{"_id":"themes/icarus/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1688293558518},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1688293558518},{"_id":"themes/icarus/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1688293558518},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"fdce6e6716768cfac9355c4e88a05260efeeae1c","modified":1688293558519},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"646a7ef3e85481b013ffb2f4d9f9a8900f092d73","modified":1688293558519},{"_id":"themes/icarus/languages/tr.yml","hash":"50d94b21e1838db1214f6874f4f81b47c8c521db","modified":1688293558519},{"_id":"themes/icarus/layout/archive.ejs","hash":"6a4adb703df447a754225fa665e679816e432ea2","modified":1688293558519},{"_id":"themes/icarus/layout/categories.ejs","hash":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1688293558520},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1688293558520},{"_id":"themes/icarus/layout/index.ejs","hash":"c329f4598a0af4d8678ba789fdc84fcdf10122de","modified":1688293558538},{"_id":"themes/icarus/layout/layout.ejs","hash":"b37ed400e1416964b45ff7d0fa64417d2172962a","modified":1688293558538},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1688293558538},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1688293558539},{"_id":"themes/icarus/layout/tags.ejs","hash":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1688293558543},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1688293558542},{"_id":"themes/icarus/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1688293558545},{"_id":"themes/icarus/_source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1688293558516},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1688293558545},{"_id":"themes/icarus/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1688293558516},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"f744b41f3cc258e2a5a6df6abf6cf9ba9f05c19c","modified":1688293558520},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"67b9c24a2973bb208e183ce46201d3c209a1bd4a","modified":1688293558520},{"_id":"themes/icarus/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1688293558516},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1688293558521},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1688293558521},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"6a53104fc01fd4a7a34b46c2828e76d02cacb0dd","modified":1688293558521},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1688293558521},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"7269156a9d99b238f6394b4e7e52d0439e774eb3","modified":1688293558522},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"b3dd067a6099f0e088f3374d37b8a726bafe15e5","modified":1688293558522},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"d2d0d8113a5a7d2cddf1d8ce067e07d40874e56c","modified":1688293558522},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"063f997bad70768fa3a7f954830b51893b2d48da","modified":1688293558523},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1688293558523},{"_id":"themes/icarus/layout/common/article.ejs","hash":"bb49517abd519ee80dd3bc32cfcf0588ed9e9ab3","modified":1688294445969},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1688293558523},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"c0c62f99a4261fe4ad320dea741dcb067b4caf14","modified":1688294480417},{"_id":"themes/icarus/layout/common/head.ejs","hash":"0df5bb7c34937154c16d0a7598913d236585db3c","modified":1688293558524},{"_id":"themes/icarus/layout/common/header.ejs","hash":"aa3935cda47b292d2b23e326efdbc587eae42c51","modified":1688293558524},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"ed42f0226c8a3f35aeace57bd08625fe882a4232","modified":1688293558536},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"49b57f9eba2e649f0adb572aa56f9a534d7b327f","modified":1688294529447},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"50afc61810a0b4b02966eb2cc1ef0a440fa3c165","modified":1688294559137},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1688293558537},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"a2ba07bd70a82a80df71133dc0cea1248a1e3b3e","modified":1688293558537},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1688293558538},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1688293558539},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"2a41940ab86d3f7b095436b56ea304689c2b5121","modified":1688293558539},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1688293558539},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1688293558539},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1688293558541},{"_id":"themes/icarus/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1688293558540},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1688293558540},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1688293558543},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1688293558543},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1688293558543},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"7767972b9d0cba456f0e0cff1b96b516936414ea","modified":1688293558544},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1688293558544},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"a4b28996e0e7df2e582387455c02f5c33f691bbd","modified":1688293558544},{"_id":"themes/icarus/layout/share/default.ejs","hash":"8532f15f400dbc7c1e89ab26972fc4e404001849","modified":1688293558542},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1688293558541},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1688293558541},{"_id":"themes/icarus/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1688293558542},{"_id":"themes/icarus/source/css/_extend.styl","hash":"c18c58c67f49b8afe92fa8852ff7e203ce5958de","modified":1688293558546},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1688293558542},{"_id":"themes/icarus/source/css/_variables.styl","hash":"da60cf824c9e905aca1f002e417a3c61864b6883","modified":1688293558570},{"_id":"themes/icarus/source/css/style.styl","hash":"4dc397810fe188ac58166754b667f1891c1518c0","modified":1688293558585},{"_id":"themes/icarus/source/js/insight.js","hash":"691bc7ce086b55b360bb6ec517b2ad6e53ebadc7","modified":1688293558585},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"96f999573eb908f7129a1c09e486d46d630c0a7d","modified":1688293558525},{"_id":"themes/icarus/source/js/main.js","hash":"aaea695ac93046f3024db7634baf6f4400f4920c","modified":1688293558586},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"6ca8a8c45794a4e10aaac0da85db71b43e5a72ce","modified":1688293558534},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"fc90dbfc227563029ece7cff13585083b62935bc","modified":1688293558525},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1688293558525},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"1800d1fa5cc689dcbdc1f58296521e9eb2b53e21","modified":1688293558535},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1688293558535},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1688293558536},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1688293558546},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1688293558546},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1688293558547},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1688293558547},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1688293558547},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1688293558548},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1688293558548},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1688293558549},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1688293558548},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1688293558548},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1688293558549},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1688293558549},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1688293558550},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1688293558550},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1688293558550},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1688293558550},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1688293558551},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1688293558551},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1688293558551},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1688293558552},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1688293558552},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1688293558552},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1688293558552},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1688293558552},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1688293558553},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1688293558553},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1688293558553},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1688293558554},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1688293558553},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1688293558555},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1688293558555},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1688293558555},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1688293558556},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1688293558556},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1688293558556},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1688293558556},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1688293558557},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1688293558557},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1688293558558},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1688293558558},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1688293558558},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1688293558558},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1688293558559},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1688293558559},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1688293558559},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1688293558559},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1688293558560},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1688293558561},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1688293558561},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1688293558561},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1688293558561},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1688293558562},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1688293558562},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1688293558562},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1688293558561},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1688293558563},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1688293558562},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1688293558563},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1688293558564},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1688293558563},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1688293558564},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1688293558564},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1688293558564},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1688293558565},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1688293558565},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1688293558566},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1688293558565},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1688293558566},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"4dd216a147dd65ddc37521fe8a1a01aa929aeea5","modified":1688293558567},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"acd8966e8f986baca6659ad7418dce13860898a8","modified":1688293558567},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1688293558566},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1688293558568},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1688293558567},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"8a84868a13c7edb733347655b33dc169c682e8b8","modified":1688293558568},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"d0109f33d279a3456317c342d84633ffe08a8b10","modified":1688293558568},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1688293558560},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"7eed2cec34bd182c390bf042b56d41f7f2793a2c","modified":1688293558568},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"fb211c3c747565e6fa2304f436b42d14ef84d71a","modified":1688293558569},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"ba1ea8a87ca7c667f0d3cc40033b52bdf168fbdd","modified":1688293558569},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1688293558569},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1688293558569},{"_id":"themes/icarus/source/css/images/Angular_Bootcamp_Cruise.png","hash":"0cf253e7fab5f3c5c2708becba8cbd240208a0a4","modified":1688293558571},{"_id":"themes/icarus/source/css/images/Angular_Bootcamp.png","hash":"d1532ba5e0a01190a7fee3b5b13a14c0cbe83e73","modified":1688293558571},{"_id":"themes/icarus/source/css/images/angular-0_cli.png","hash":"3426c1558f871f64b531a13dc85416f38446967d","modified":1688293558572},{"_id":"themes/icarus/source/css/images/angular-10_monorepo.png","hash":"41d8ef7a7f07b19cdd6446baa42d42ca034aaaf5","modified":1688293558572},{"_id":"themes/icarus/source/css/images/angular-12_change.png","hash":"a074af521514c1ad4af33662f05e66e8183549c2","modified":1688293558573},{"_id":"themes/icarus/source/css/images/angular-13_template.png","hash":"8c06958d2eaedf90665189301b6e58c11192b46b","modified":1688293558574},{"_id":"themes/icarus/source/css/images/angular-11_test.png","hash":"e55cdd34f94c6ba7a09c1a3a775da197cdad54fe","modified":1688293558573},{"_id":"themes/icarus/source/css/images/angular-14_redux.png","hash":"b215f1248ef2ecd69d138a58f95f9e1462dcdda2","modified":1688293558574},{"_id":"themes/icarus/source/css/images/angular-16_pwa.png","hash":"e0cc18d27a36fbb07494d342ef66b50ace3a3f8b","modified":1688293558575},{"_id":"themes/icarus/source/css/images/angular-15_ngrx.png","hash":"fb88794c1c66472d3217061cbb1db7f4a4df8ea1","modified":1688293558574},{"_id":"themes/icarus/source/css/images/angular-18_i18n.png","hash":"208c88907557d36e83dbb9de94559554775f71d2","modified":1688293558575},{"_id":"themes/icarus/source/css/images/angular-17_ssr.png","hash":"33af35075ed876b4bd8ec54db0acd97563002f76","modified":1688293558575},{"_id":"themes/icarus/source/css/images/angular-19_elements.png","hash":"91d1ec46cf17d1a8054469eea3036b4be940d583","modified":1688293558576},{"_id":"themes/icarus/source/css/images/angular-1_base.png","hash":"ccf5bc5a6c3c6cc995d240bd11334d2a773612fd","modified":1688293558576},{"_id":"themes/icarus/source/css/images/angular-2_spa.png","hash":"2373e59391c1fff21dbe71f5086cbab63c563efe","modified":1688293558576},{"_id":"themes/icarus/source/css/images/angular-3_data.png","hash":"14e44451e3bbbd4f75a211616787a9e2a2c0c87c","modified":1688293558577},{"_id":"themes/icarus/source/css/images/angular-4_flow.png","hash":"44814f98c95e46a866b51cce8589388f72d5a2ee","modified":1688293558577},{"_id":"themes/icarus/source/css/images/angular-5_inject.png","hash":"aa4a32e4439fba549391fc3eb9fdd067fbea0111","modified":1688293558577},{"_id":"themes/icarus/source/css/images/angular-7_watch.png","hash":"bdd11b0a68a362b35a2c935895d776a579e0f288","modified":1688293558578},{"_id":"themes/icarus/source/css/images/angular-6_http.png","hash":"02dd0b7f55fb6c41eb6f9f9f64d873db2261a6be","modified":1688293558578},{"_id":"themes/icarus/source/css/images/angular-8_reactive.png","hash":"6de03afae8a8354e4bc0b0427621dbaccb26f403","modified":1688293558578},{"_id":"themes/icarus/source/css/images/angular-9_material.png","hash":"f45b79fbb5c3cc310c0df994efed934a387a3874","modified":1688293558579},{"_id":"themes/icarus/source/css/images/angular.builders.png","hash":"47c6b8ea65bca8f9db8ae63d9129d6c179f7c2ea","modified":1688293558579},{"_id":"themes/icarus/source/css/images/angular.jpg","hash":"6bf224d00bb2f792e52fbe936ac5abf2aa1332c0","modified":1688293558582},{"_id":"themes/icarus/source/css/images/angular_18_i18n.png","hash":"8c987411fdf942c0f3d87987b5fbbbc9354a19f2","modified":1688293558582},{"_id":"themes/icarus/source/css/images/avatar.jpg","hash":"6d461314157540948b0b35d63fe9dda8c2fa4665","modified":1688293558582},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1688293558584},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1688293558596},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1688293558596},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1688293558615},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1688293558616},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1688293558586},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1688293558587},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1688293558609},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1688293558609},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1688293558610},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1688293558610},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1688293558610},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1688293558610},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1688293558611},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1688293558611},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1688293558611},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1688293558612},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1688293558612},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1688293558612},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1688293558613},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1688293558613},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1688293558613},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1688293558614},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1688293558614},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1688293558614},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1688293558615},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1688293558615},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1688293558615},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1688293558597},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1688293558598},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1688293558597},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1688293558598},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1688293558599},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1688293558598},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1688293558599},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1688293558599},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1688293558600},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1688293558601},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1688293558602},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1688293558602},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1688293558602},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1688293558600},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1688293558600},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1688293558601},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1688293558601},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1688293558603},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1688293558603},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1688293558603},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1688293558604},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1688293558603},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1688293558604},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1688293558604},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1688293558605},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1688293558605},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1688293558605},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1688293558606},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1688293558606},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1688293558606},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1688293558607},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1688293558607},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1688293558607},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1688293558608},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1688293558608},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1688293558616},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1688293558616},{"_id":"source/images/tutorial-angular-17_ssr.png","hash":"7032b7bcf7b37a4a9f1faf62d72e93eb8573cb0b","modified":1688293558503},{"_id":"themes/icarus/source/css/images/favicon.ico","hash":"eaf485c235ca3d83faf3d38064a6e0f1df3d14fa","modified":1688293558583},{"_id":"themes/icarus/source/css/images/logo.png","hash":"3ea04c5059266f2614f2fe37ebd81b6e8acb8a3c","modified":1688293558583},{"_id":"themes/icarus/source/css/images/typescript.jpg","hash":"f49a461df54b6d5eb9c14d921d7ee8689b10ec22","modified":1688293558585},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1688293558588},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1688293558589},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1688293558594},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1688293558594},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1688293558595},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1688293558593},{"_id":"themes/icarus/source/css/images/angular.builders_cuadrado.png","hash":"c6ff75091e1be21bd66201d8140f51efb6aca175","modified":1688293558581},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1688293558591},{"_id":"public/images/10-projects-dependency.png","hash":"50e06392969e81cb1d0ccee2bb081468abfbf37d","modified":1688294698482},{"_id":"public/images/12-class-dependency.png","hash":"090b9f9ea2e16dcd84893419aef76a49ffa5ca77","modified":1688294698482},{"_id":"public/images/11-projects-dependency.png","hash":"911ad572b0f88b91e7a9c8ea5154c6acd573fe8a","modified":1688294698482},{"_id":"public/images/13-class-dependency.png","hash":"767f139a86d8e9dfc7e9df5a5c94855c5e121cb4","modified":1688294698482},{"_id":"public/images/Redux.png","hash":"f2c65fea8a7e0d094089d9b396d151bb05707c9b","modified":1688294698482},{"_id":"public/images/13-projects-dependency.png","hash":"241c853b667234c17e1e361d09d38b3372e8fac4","modified":1688294698482},{"_id":"public/images/change-detection.jpg","hash":"f68ec145e8d8436a777dedff3256f51b115b01f0","modified":1688294698482},{"_id":"public/images/light-new-year-s-eve-fireworks-sylvester-40663.jpg","hash":"1de27d29c03a751bc41c7ad9638e48e7886570a1","modified":1688294698482},{"_id":"public/images/ng2-Arbol-de-componentes.jpg","hash":"981461824a8b8c4be309e0f45b2f6e77b0ce3975","modified":1688294698482},{"_id":"public/images/ng2-Arbol-de-dependencias.jpg","hash":"4aa93110fbb2a84d15436432b103b369368411b9","modified":1688294698482},{"_id":"public/images/ng2-DI-component-directive.jpg","hash":"55f9382deef44c734bf892571df3127f88871939","modified":1688294698482},{"_id":"public/images/ng2-Component-DataFlow.jpg","hash":"b9a22cc89d665491b54e2d0e7a94bd6b19a11aa2","modified":1688294698482},{"_id":"public/images/ng2-DI-component-service.jpg","hash":"3e387e0e2b3b2bd40004b569f83cd2b74f3363e4","modified":1688294698482},{"_id":"public/images/ng2-Flujo-de-datos.jpg","hash":"b791adc0f1322b16145d23e2479fc0a1b95f5846","modified":1688294698482},{"_id":"public/images/ng2Component--1-.jpg","hash":"8e13a6985d532c4413ab8253d8e37edc3b2fcc7f","modified":1688294698482},{"_id":"public/images/pedidos_ms.PNG","hash":"0f029e34d708727a07c5cf29b76f739bcba45c76","modified":1688294698482},{"_id":"public/images/tutorial-angular-0_cli.png","hash":"0b15754c7bd374a893b2ae1f04e629419b77fcd2","modified":1688294698482},{"_id":"public/images/tutorial-angular-10_monorepo.png","hash":"24ba64b432657f310c8aaa805515b057737f3fb1","modified":1688294698482},{"_id":"public/images/tutorial-angular-11_test.png","hash":"6d323e90c9a0589fec247b1d6f3e17744c9b88f5","modified":1688294698482},{"_id":"public/images/tutorial-angular-12_change.png","hash":"0c5c5058371d6bd43058b6d9cd2e6457e1a5d406","modified":1688294698482},{"_id":"public/images/tutorial-angular-13_template.png","hash":"be97ed05d8cbc130e2f417e222a168c9661033db","modified":1688294698482},{"_id":"public/images/tutorial-angular-14_redux.png","hash":"ebec71c20203d1e3bab8cc7448c9e7a700160c54","modified":1688294698482},{"_id":"public/images/tutorial-angular-15_ngrx.png","hash":"38dd7f5377ffe9c256063cd9fb7a9776396c0fba","modified":1688294698482},{"_id":"public/images/tutorial-angular-17_ssr.png","hash":"339c09b3aaa00df8aad48c4298187d18f62d1bec","modified":1688294698482},{"_id":"public/images/tutorial-angular-18_i18n.png","hash":"cd1b8f2513ef6de9605813180024006000434137","modified":1688294698482},{"_id":"public/images/tutorial-angular-16_pwa.png","hash":"146490314f83d77ec8953b9ce7fc70ab99545554","modified":1688294698482},{"_id":"public/images/tutorial-angular-19_elements.png","hash":"ccafe52077f447d2c2e62b3bcb9cdca592135769","modified":1688294698482},{"_id":"public/images/tutorial-angular-1_base.png","hash":"733a3755501bd93af49e963b65002e2f05790ea6","modified":1688294698482},{"_id":"public/images/tutorial-angular-2_spa.png","hash":"c9ea2498d6334762fca7f491935fa45ae1e12675","modified":1688294698482},{"_id":"public/images/tutorial-angular-3_data.png","hash":"865bafd69f3fad2cb86c5ef2da66007a18360606","modified":1688294698482},{"_id":"public/images/tutorial-angular-4_flow.png","hash":"4a1a58487affa6e836dfecde1e0d21553aeed035","modified":1688294698482},{"_id":"public/images/tutorial-angular-5_inject.png","hash":"3dad3f82be4c3b7a47ff1bc40ae02590fb72bb56","modified":1688294698482},{"_id":"public/images/tutorial-angular-7_watch.png","hash":"91d34a0dd059c403189fa3632a243e97d1ca06c6","modified":1688294698482},{"_id":"public/images/tutorial-angular-8_reactive.png","hash":"621a29537d48cda980f8ede1270d0d2e902b341c","modified":1688294698482},{"_id":"public/images/tutorial-angular-9_material.png","hash":"cbb67315f980af2771cde4deaa17341f9d327ddf","modified":1688294698482},{"_id":"public/images/tutorial-angular-6_http.png","hash":"f9c72bf0deff3712524b6a0eff49fd60019f07e6","modified":1688294698482},{"_id":"public/css/images/Angular_Bootcamp.png","hash":"637a2c59a335b5a2c4f3b0c0e893b0769bce5a75","modified":1688294698482},{"_id":"public/css/images/angular-0_cli.png","hash":"f76c60732d5c1949d28499c7790aff8c5c0a4838","modified":1688294698482},{"_id":"public/css/images/Angular_Bootcamp_Cruise.png","hash":"78b6d1f4629f8d011ee0fc9a6a2901d837b7ecbf","modified":1688294698482},{"_id":"public/css/images/angular-12_change.png","hash":"3759cbe2cc08ce9e6de52e6804ff70be47e165ad","modified":1688294698482},{"_id":"public/css/images/angular-10_monorepo.png","hash":"752b3e8f7a5f6c440b1d83533abe523bfeb055df","modified":1688294698482},{"_id":"public/css/images/angular-13_template.png","hash":"25f25375bf6767d3cc413dfbbdd80d54b038d4b0","modified":1688294698482},{"_id":"public/css/images/angular-11_test.png","hash":"4bb3634f258a2a641b953045459b63faa039c561","modified":1688294698482},{"_id":"public/css/images/angular-14_redux.png","hash":"cbf8ab0ec57d0bd2cfb01a93b86903144661e4b6","modified":1688294698482},{"_id":"public/css/images/angular-16_pwa.png","hash":"1bc78c870df6b7620c5d40a00489d790b5776b0a","modified":1688294698482},{"_id":"public/css/images/angular-15_ngrx.png","hash":"b4f9e0de9617c0011dfb7ee6e411d78e07d46d93","modified":1688294698482},{"_id":"public/css/images/angular-18_i18n.png","hash":"479705bb9c07887be4dac1776c904409c53bcbb6","modified":1688294698482},{"_id":"public/css/images/angular-17_ssr.png","hash":"f52badc2fb8eacdbc4998295b37b210b6d50ea9e","modified":1688294698482},{"_id":"public/css/images/angular-19_elements.png","hash":"c807aef5af0a083b4b22bf17e9bf1d73a1435140","modified":1688294698482},{"_id":"public/css/images/angular-1_base.png","hash":"fb71a1fca4f50b1e7fe7af0deac4bd09bc3a87d3","modified":1688294698482},{"_id":"public/css/images/angular-2_spa.png","hash":"339ff8549c88a8c26a79d7b0b6d92947792d3ccf","modified":1688294698482},{"_id":"public/css/images/angular-3_data.png","hash":"66d3af6a40a7a0d1b57aec8275223fa84dcf5c79","modified":1688294698482},{"_id":"public/css/images/angular-4_flow.png","hash":"61c81d8980240105c15a085d6b9bded74fdd4ad3","modified":1688294698482},{"_id":"public/css/images/angular-5_inject.png","hash":"e5214d29c3123b4b993a7f0b5012aa09979645ef","modified":1688294698482},{"_id":"public/css/images/angular-7_watch.png","hash":"a554b06b830a246aa710878258e970111473257e","modified":1688294698482},{"_id":"public/css/images/angular-8_reactive.png","hash":"905818fc5d768340e64f2cc45e72c64233736569","modified":1688294698482},{"_id":"public/css/images/angular-6_http.png","hash":"5e41adeae5cb206e5a13ee7e1578528fe65e3ffb","modified":1688294698482},{"_id":"public/css/images/angular-9_material.png","hash":"d0ae8fe3865ee3d6edc924ecd9c17284596f7852","modified":1688294698482},{"_id":"public/css/images/angular.builders.png","hash":"1a17b0b730a318d10c28cbd937fd31e2747c158e","modified":1688294698482},{"_id":"public/css/images/angular.builders_cuadrado.png","hash":"02f110bc3f32c3e5e193334accecd0a8f0a361a3","modified":1688294698482},{"_id":"public/css/images/angular_18_i18n.png","hash":"6eda0d455655650e501307b7e372b8a5165eb2bd","modified":1688294698482},{"_id":"public/css/images/angular.jpg","hash":"6e341e706f0b6f27dc9ba93efe56621409e4304f","modified":1688294698482},{"_id":"public/css/images/avatar.jpg","hash":"f5cce34d891789ed4982cd8ebc64ad8d4f402e38","modified":1688294698482},{"_id":"public/css/images/logo.png","hash":"ac0fa5cf38f9211089dce5486a3ae7d666dc5db1","modified":1688294698482},{"_id":"public/css/images/typescript.jpg","hash":"eb636fe8bea5b21d8f92b430c6492166ff21e30f","modified":1688294698482},{"_id":"public/css/images/thumb-default-small.png","hash":"e63874a08229a3031c407915ca448ca9d3ab234f","modified":1688294698482},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"32f7a07c4a6ac5e041fd3d4a66bc97efb70f45c6","modified":1688294698482},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"66532a70bf3f0b148846ea98ae20f0577a7cf99a","modified":1688294698482},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"cc22b499da769e11621cd29e4d0230fd371dac5e","modified":1688294698482},{"_id":"public/content.json","hash":"856d17af53285b9658fc05520529183c2f8f8283","modified":1688294698482},{"_id":"public/post-sitemap.xml","hash":"ce403610374f7c4cbde59931d9c846cb37e57822","modified":1688294698482},{"_id":"public/page-sitemap.xml","hash":"27beb02500ad6d19c4c5f2c1efc531009b967f16","modified":1688294698482},{"_id":"public/category-sitemap.xml","hash":"69f867a46fadf2b92eaa27b0a3b32ce988aa8a74","modified":1688294698482},{"_id":"public/tag-sitemap.xml","hash":"c6188b02b84e024fab645332b8855570fa712b67","modified":1688294698482},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1688294698482},{"_id":"public/sitemap.xml","hash":"0174d500dac4562b40e0e78f9267fff02329a128","modified":1688294698482},{"_id":"public/categories/Angular/index.html","hash":"f3eda53065ebb33f64bfbc6427aaf58bfebd580e","modified":1688294698482},{"_id":"public/archives/2015/index.html","hash":"acb85eb6970e96d3e2fb9ef271f011fcc16423ac","modified":1688294698482},{"_id":"public/archives/2015/08/index.html","hash":"0c0fe765dcc537a1a458257e3f89b3fca0408e3c","modified":1688294698482},{"_id":"public/archives/2016/01/index.html","hash":"694ac2e189d719e3c04d819c4bcd78b23585525a","modified":1688294698482},{"_id":"public/archives/2016/03/index.html","hash":"2cabe2e8325060928a806e2da36932453b4c436a","modified":1688294698482},{"_id":"public/archives/2016/04/index.html","hash":"fe184b7316e570b89ddf8bc5fd0eaca1a460c796","modified":1688294698482},{"_id":"public/archives/2016/05/index.html","hash":"a53ea71ef2afb4a45f30f62ef2f8cffd72be8f35","modified":1688294698482},{"_id":"public/archives/2017/index.html","hash":"6ccc2bf2d15dcb12169f9e4265a8904102e97d4a","modified":1688294698482},{"_id":"public/archives/2017/03/index.html","hash":"3361d3fce786f583465271fceb9c188bd84bb33d","modified":1688294698482},{"_id":"public/archives/2020/02/index.html","hash":"d11fcaf8ca74ea6f4bf9b836ba22b8bb568086fd","modified":1688294698482},{"_id":"public/tag/Introduccion/page/2/index.html","hash":"3e66b90cda772430d55f83d93cebc7f802585682","modified":1688294698482},{"_id":"public/tag/TypeScript/index.html","hash":"1b31827b01645ca759674dd59142b2f7c5b0fb50","modified":1688294698482},{"_id":"public/tag/FrontEnd/index.html","hash":"3ec6a102fb42226d1db17b2f0244d3a1cc72c550","modified":1688294698482},{"_id":"public/tag/AngularJS/index.html","hash":"cbbbd3eee9d2cf5476d7d535402139097cc80186","modified":1688294698482},{"_id":"public/tag/BackEnd/index.html","hash":"056fe6d405c0e64f1488e43c8a7336758b960003","modified":1688294698482},{"_id":"public/tag/MongoDB/index.html","hash":"bb3f8fad6da21b5e0db0f5b1a271d9bfbc272a33","modified":1688294698482},{"_id":"public/tag/Angular/page/3/index.html","hash":"55abee877c5965c43c1f80079969467dc8e004fc","modified":1688294698482},{"_id":"public/tag/Ivy/index.html","hash":"08cd19e0652d6b112450142507cf65a9a57c4d07","modified":1688294698482},{"_id":"public/tag/Angular8/page/2/index.html","hash":"3007683228b7f37bc5e8b645fe1c39a21ac96f7e","modified":1688294698482},{"_id":"public/tag/ChangeDetection/index.html","hash":"197cfe8b390cee6d9df42126116bb167fee3a997","modified":1688294698482},{"_id":"public/tag/Avanzado/page/2/index.html","hash":"f0c09d47f886aedbd165825cf450c752cfc40887","modified":1688294698482},{"_id":"public/tag/Test/index.html","hash":"dacdc45d4bc7aeaccaab8b7b40108a8e10930863","modified":1688294698482},{"_id":"public/tag/Jest/index.html","hash":"de4d5405ea560138cee56ac7ffa2ee6dda058b0c","modified":1688294698482},{"_id":"public/tag/Cypress/index.html","hash":"83112f242532cec35dc0526f161e4140c67e8ef8","modified":1688294698482},{"_id":"public/tag/Template/index.html","hash":"2f816c25f6de92128715c830b17b39765de3818b","modified":1688294698482},{"_id":"public/tag/NgRx/index.html","hash":"819f7013f5eef9e83d555ba83bea1822e755a68a","modified":1688294698482},{"_id":"public/tag/RxJs/index.html","hash":"0d1286e69ce7423cfc5a3a64700190ba5732f4da","modified":1688294698482},{"_id":"public/tag/PWA/index.html","hash":"98681cf0e6a61d5819504801cb669c6efd9694fa","modified":1688294698482},{"_id":"public/tag/Universal/index.html","hash":"46afa8adbf801a3109717a5371e7ed6950047565","modified":1688294698482},{"_id":"public/tag/SSR/index.html","hash":"bf7a483a9d2a460e13e232447673dbc8e8b28ffd","modified":1688294698482},{"_id":"public/tag/i18n/index.html","hash":"86badcc503fa3c47ae38a9efc5e29d919d4c5c5c","modified":1688294698482},{"_id":"public/tag/Forms/index.html","hash":"083f0ec71d097c78ae41d3833fb1e46c82415dbc","modified":1688294698482},{"_id":"public/tag/Elements/index.html","hash":"b871e1437f5318d688f22fdf0811051c4cf720b5","modified":1688294698482},{"_id":"public/tag/WebComponents/index.html","hash":"33fa8e1af158352aa4d6736956194deb8e3483ce","modified":1688294698482},{"_id":"public/tag/Components/index.html","hash":"84fdb11996b4e860ca16697dc4e26ded16537ec1","modified":1688294698482},{"_id":"public/tag/Servicios/index.html","hash":"2d8945afda6040ba5724068f715e96995f7e57c7","modified":1688294698482},{"_id":"public/tag/DI/index.html","hash":"b179746e4a724d1cb62287f5662636bde835cc96","modified":1688294698482},{"_id":"public/tag/RxJS/index.html","hash":"fdcd9fc1387b42808bea2588384c069e64d9d94e","modified":1688294698482},{"_id":"public/tag/reactiveForms/index.html","hash":"46c9dc48b8fcde96195e98ee21ea5dedfbbdd34b","modified":1688294698482},{"_id":"public/tag/material/index.html","hash":"09d65a1b08dd1f37be76e8f5c99273a10e5ab153","modified":1688294698482},{"_id":"public/tag/Angular7/index.html","hash":"2733e696618231c7cc247b90fe3ef0c687eb48f0","modified":1688294698482},{"_id":"public/tag/SPA/index.html","hash":"e9f292af97dcb5a73beb30fc821ff9321a85d1d4","modified":1688294698482},{"_id":"public/tag/Routing/index.html","hash":"de316e1ca9e82d7fbece3a851def3876d205b11f","modified":1688294698482},{"_id":"public/404.html","hash":"7ab1d2c10c7ea76503415a12c03954b0364666f5","modified":1688294698482},{"_id":"public/cookies.html","hash":"b59641355ce406bd94ec655a3ec7be255f4945a8","modified":1688294698482},{"_id":"public/angular_9-original-clean.html","hash":"3d63fd8d959dd9df7279e0ff65a662f24b8b092c","modified":1688294698482},{"_id":"public/contacto.html","hash":"fe17fc5bba6168bd3185993b0311b5edc78cd2b9","modified":1688294698482},{"_id":"public/noticias-junio-16.html","hash":"d1d3e681e25b3d1b2a4d1743112e57c77ca82e14","modified":1688294698482},{"_id":"public/promociones.html","hash":"27f83f43d2d76d2c928f3cc18e8776f87a225965","modified":1688294698482},{"_id":"public/angular_9-translate.html","hash":"f55e6e87b7288357ac5a59ad228e6770447bb8f9","modified":1688294698482},{"_id":"public/cursos/angular-business.html","hash":"02bc828312bd7d46e19e6133b541f5dc98bf3f5a","modified":1688294698482},{"_id":"public/cursos.html","hash":"7380c734681dd67c074a2c35bfa2dfcf1469764a","modified":1688294698482},{"_id":"public/scaffolds/draft.html","hash":"17ad8d6bddcce9069b636a28cb0a1208fd35fb04","modified":1688294698482},{"_id":"public/scaffolds/page.html","hash":"c3d9cbebc07c28b570c9e634e7b30b05f2b49f33","modified":1688294698482},{"_id":"public/scaffolds/post.html","hash":"aae741615b0113f8bdeed6edf03c727c5c8185cd","modified":1688294698482},{"_id":"public/vigilancia-y-seguridad-en-Angular","hash":"a3a644637df1572cee9bc1691c57e8aada0b1da0","modified":1688294698482},{"_id":"public/comunicaciones-http-en-Angular","hash":"883b30c1f626440186b7c3d79184b948c9092c57","modified":1688294698482},{"_id":"public/servicios-inyectables-en-Angular","hash":"1e5f1bbcf48f50f2217887821bddb47fe020f6a0","modified":1688294698482},{"_id":"public/flujo-de-datos-entre-componentes-angular","hash":"cdeb248d1f8cbe0ee132147010b000e26fcd7a31","modified":1688294698482},{"_id":"public/formularios-tablas-y-modelos-de-datos-en-angular","hash":"57e7a481d9e15aad77e3e883485dbdcef9b416c7","modified":1688294698482},{"_id":"public/paginas-y-rutas-angular-spa","hash":"fc015070cd575067ff0739fb5fcd959859040f9e","modified":1688294698482},{"_id":"public/base-aplicacion-angular","hash":"c24113e154678f2a3b4f2c26de6e6dc8452c7f28","modified":1688294698482},{"_id":"public/hola-angular-cli","hash":"5526005270a0bec9aa292c20035940fe2d46a5be","modified":1688294698482},{"_id":"public/un-vistazo-a-las-características-principales-en-el-lanzamiento-de-Angular-Ivy-versión-9","hash":"cf9e0573e0cddbfa50be53a8e1b393295b5e1b3d","modified":1688294698482},{"_id":"public/elementos-Angular-para-los-Web-Components","hash":"45573e1dff4ce73fe4cc3ad0b9b85e28e7f7e2e9","modified":1688294698482},{"_id":"public/internacionalizacion-y-puesta-en-produccion-con-Angular","hash":"1d2a5dd288ff92f8c3e11f353e7992090262a607","modified":1688294698482},{"_id":"public/velocidad-y-seo-con-el-ssr-de-angular-universal","hash":"4ac0f44938b7d33342652551358347bb868a686c","modified":1688294698482},{"_id":"public/pwa-entre-la-web-y-las-apps-con-angular","hash":"a87ac1ff1ada581b946cad8acd65ba6b77aaddac","modified":1688294698482},{"_id":"public/el-patron-redux-con-ngrx-en-angular","hash":"6b6a3aa9d9adaea2f00f869e39b4dffc433c809e","modified":1688294698482},{"_id":"public/flujo-reactivo-unidireccional-con-Angular-y-RxJs","hash":"9da23ef4f69c3981c5a51ee248ab9cbb4b0cec7b","modified":1688294698482},{"_id":"public/componentes-dinamicos-directivas-y-pipes-con-Angular","hash":"bd86b1e57f04fdefc8175d347779aae301975b3e","modified":1688294698482},{"_id":"public/deteccion-del-cambio-en-Angular","hash":"c20361384b1a80a29ee6dfa370ba9ae3f4d5c66d","modified":1688294698482},{"_id":"public/tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular","hash":"9550438785399d46d72d3502dc84ce3ce5b5ee21","modified":1688294698482},{"_id":"public/nx-mono-repositorios-en-Angular","hash":"b5151dfb8e5e3817b53550c1bab67f152ac24a17","modified":1688294698482},{"_id":"public/Material-Design-y-CLI-de-Angular","hash":"5e57f9b916daa04e79ae28867c4222d274e9e478","modified":1688294698482},{"_id":"public/formularios-reactivos-con-Angular","hash":"cd65c62c301c5153d177b1db2a57f4070d3708a0","modified":1688294698482},{"_id":"public/typescript-programa-en-el-front-igual-que-en-el-back","hash":"c9ebc4dc13493822249051983b9170568c1415f5","modified":1688294698482},{"_id":"public/node-6-0-0-actualizacion-con-nvm","hash":"61ce9851314ee41199eac9072a27df8f8d7ecac5","modified":1688294698482},{"_id":"public/npm-de-instalador-a-publicador","hash":"7df41853e77d053fd2072b99f059a739d9e2e58d","modified":1688294698482},{"_id":"public/soluciones-backend-2016","hash":"a5694cf134c40110718005a3b6307f1ccbb7757c","modified":1688294698482},{"_id":"public/soluciones-frontend-2016","hash":"e63e16e4ab331e53ac1f9a1c8bbb35ff84ad3874","modified":1688294698482},{"_id":"public/para-que-puedo-usar-nodejs","hash":"51b4394e443f36422fbb7d7573692eb1d5d9c662","modified":1688294698482},{"_id":"public/index.html","hash":"4bf974b3cb3150fd81fd20f1186727d08396f22d","modified":1688294698482},{"_id":"public/page/2/index.html","hash":"4154586d2dffb7168f5f7581d44c02c1b4106205","modified":1688294698482},{"_id":"public/page/3/index.html","hash":"657b54dba6d767e118eaf8988bb4dc19530c1fe9","modified":1688294698482},{"_id":"public/page/5/index.html","hash":"0d2b66400bc4afaaf77a39f87d2de89395f7bac8","modified":1688294698482},{"_id":"public/page/4/index.html","hash":"f6ed3afaccc47397db06bfd6f6d42f9a3c941b39","modified":1688294698482},{"_id":"public/page/6/index.html","hash":"ba825260d16e5ed83cba2df85322b1bbd32e2f53","modified":1688294698482},{"_id":"public/categories/Tutorial/index.html","hash":"5d20c0003a7e9a5af0fc66fb0a4aabe3c953c1a5","modified":1688294698482},{"_id":"public/categories/Tutorial/page/2/index.html","hash":"46a932d4ea9056108cb59851b9fd2a91cfff4f66","modified":1688294698482},{"_id":"public/categories/Tutorial/Angular/index.html","hash":"b7345ef716719239639005182f01f2b1e8f1ffab","modified":1688294698482},{"_id":"public/categories/Tutorial/Angular/page/2/index.html","hash":"994bc32880fa2d07855100c560db556d5700caf0","modified":1688294698482},{"_id":"public/archives/page/2/index.html","hash":"11a668b3006b69d211313b2ba3ef619186f0a2c9","modified":1688294698482},{"_id":"public/archives/index.html","hash":"aa0c1cd8805b1957a6c5c1f989aa986aa912bdc5","modified":1688294698482},{"_id":"public/archives/page/3/index.html","hash":"5930a099be14baa82408e329a30ad4ff56827459","modified":1688294698482},{"_id":"public/archives/2016/index.html","hash":"4b7b5dffdd9a417aab2fafefc98e278da76f0eb0","modified":1688294698482},{"_id":"public/archives/2019/index.html","hash":"3accbd873a2870fcd0db80aba2660e983dca6f28","modified":1688294698482},{"_id":"public/archives/2019/page/2/index.html","hash":"a2fc2a9cec5cf079a26d149f8c15937fe634cf90","modified":1688294698482},{"_id":"public/archives/2019/03/index.html","hash":"ed040443a993c1777c7ef3168f76b0616fcc9758","modified":1688294698482},{"_id":"public/archives/2019/09/index.html","hash":"ba1147e10c0773d2a6580a9cae2c69e13bc6ba41","modified":1688294698482},{"_id":"public/archives/2019/10/index.html","hash":"9647b9df02cddf7e72930743f0ef5aaa7074a617","modified":1688294698482},{"_id":"public/archives/2020/index.html","hash":"0694d6f3756ade9190f73239448611068d2db071","modified":1688294698482},{"_id":"public/archives/2020/03/index.html","hash":"e7070d66051ca0cfd7c556914dcee018bbadc918","modified":1688294698482},{"_id":"public/archives/2020/04/index.html","hash":"4ed55d127ed6d9458674e1a0d5185c6e6d02b319","modified":1688294698482},{"_id":"public/tag/NodeJS/index.html","hash":"4f5fa13fd76956c3d3f924351bf8a4f21a667934","modified":1688294698482},{"_id":"public/tag/Introduccion/index.html","hash":"dc08b3915d457842eaf6d4afc99eae8884e883c5","modified":1688294698482},{"_id":"public/tag/Opinion/index.html","hash":"97728317f7a2df89681d764202c65734542115b6","modified":1688294698482},{"_id":"public/tag/Angular/index.html","hash":"ac205b350f7fb75a69984a1d071909471b4a3f89","modified":1688294698482},{"_id":"public/tag/Angular/page/2/index.html","hash":"114edfb900c41d207a7e0cbcff19e67a60657bbb","modified":1688294698482},{"_id":"public/tag/Angular9/index.html","hash":"9fcee7254f690b8f3c2f4a5b1cc05079c6891a93","modified":1688294698482},{"_id":"public/tag/Angular8/index.html","hash":"bf619772de417391470835bd48675dad02ead025","modified":1688294698482},{"_id":"public/tag/Observables/index.html","hash":"2431d79c0692ed5cd599a7c421fed5b3cab453ae","modified":1688294698482},{"_id":"public/tag/Tutorial/index.html","hash":"2ff4fc8ad05e52202499233b4723f97049db14fa","modified":1688294698482},{"_id":"public/tag/Avanzado/index.html","hash":"ea8c66b9d88f047ae34a0a7aebe1dbf6828d9c55","modified":1688294698482},{"_id":"public/tag/Tutorial/page/2/index.html","hash":"f16cda019137159ee0a430c05d32b85a027d2ca4","modified":1688294698482},{"_id":"public/tag/Nx/index.html","hash":"76f5a049d4b6fe595c6484f3eb5ceff1c85d19b6","modified":1688294698482},{"_id":"public/tag/Angular2/index.html","hash":"1327aed736fc48d621d6d729b833db0e580b3243","modified":1688294698482},{"_id":"public/tag/Angular2/page/2/index.html","hash":"0246f5024ce504871ef86c8baaf0b6525a311a89","modified":1688294698482},{"_id":"public/tag/Redux/index.html","hash":"1222e510f779a2ccf217a1e33916da4b582fb6b1","modified":1688294698482},{"_id":"public/tag/http/index.html","hash":"3de7bce3deaf2855a24a8211e8b68c3ce6b58b14","modified":1688294698482},{"_id":"public/tag/CLI/index.html","hash":"16b3989bcd33e406441abd2aa56898db7f05bb43","modified":1688294698482}],"Category":[{"name":"Angular","_id":"cljlaq2f9000je0960sskfoe5"},{"name":"Tutorial","_id":"cljlaq2fb000re096fctke7l0"},{"name":"Angular","parent":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fg001ee0964s0v7ftf"}],"Data":[],"Page":[{"layout":"page","title":"404 No encontrado","comments":0,"_content":"\n> Lo sentimos, la ruta no se ha encontrado.\n> Por favor, dirígete al [inicio del blog](../)\n> -- <cite>El equipo de Academia Binaria</cite>\n\n---\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"404.md","raw":"---\npermalink: /404.html\nlayout: page\ntitle: 404 No encontrado\ncomments: false\n---\n\n> Lo sentimos, la ruta no se ha encontrado.\n> Por favor, dirígete al [inicio del blog](../)\n> -- <cite>El equipo de Academia Binaria</cite>\n\n---\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","date":"2023-07-02T10:25:58.466Z","updated":"2023-07-02T10:25:58.466Z","path":"/404.html","_id":"cljlaq2eq0000e096bm6agbiz","content":"<blockquote>\n<p>Lo sentimos, la ruta no se ha encontrado.<br>Por favor, dirígete al <a href=\"../\">inicio del blog</a><br>– <cite>El equipo de Academia Binaria</cite></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Lo sentimos, la ruta no se ha encontrado.<br>Por favor, dirígete al <a href=\"../\">inicio del blog</a><br>– <cite>El equipo de Academia Binaria</cite></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n"},{"title":"Cookies","id":9,"updated":"2016-04-18T13:48:28.000Z","date":"2016-04-14T12:29:58.000Z","_content":"\nUtilizamos cookies para facilitar el uso de nuestra página web. \n\nLas cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. \n\nLas utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con\nanterioridad, o si su visita es nueva o recurrente. \n\nLas cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. \n\nEn caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. ","source":"Cookies/index.md","raw":"---\ntitle: Cookies\npermalink: cookies\nid: 9\nupdated: '2016-04-18 15:48:28'\ndate: 2016-04-14 14:29:58\n---\n\nUtilizamos cookies para facilitar el uso de nuestra página web. \n\nLas cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. \n\nLas utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con\nanterioridad, o si su visita es nueva o recurrente. \n\nLas cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. \n\nEn caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. ","path":"cookies.html","comments":1,"layout":"page","_id":"cljlaq2et0002e0967ah9desy","content":"<p>Utilizamos cookies para facilitar el uso de nuestra página web. </p>\n<p>Las cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. </p>\n<p>Las utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con<br>anterioridad, o si su visita es nueva o recurrente. </p>\n<p>Las cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. </p>\n<p>En caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. </p>\n","site":{"data":{}},"excerpt":"","more":"<p>Utilizamos cookies para facilitar el uso de nuestra página web. </p>\n<p>Las cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. </p>\n<p>Las utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con<br>anterioridad, o si su visita es nueva o recurrente. </p>\n<p>Las cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. </p>\n<p>En caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. </p>\n"},{"_content":"# A look at major features in the Angular Ivy version 9 release\n\n\n[post editor](https://admin.indepth.dev/ghost/#/editor/post/5e2f4cae430b1e0c3681c749)\n\n[Lars Gyrup Brink Nielsen](https://indepth.dev/author/layzee/)06 February, 20209 min read\n\n![A look at major features in the Angular Ivy version 9 release](./A%20look%20at%20major%20features%20in%20the%20Angular%20Ivy%20version%209%C2%A0release%20-%20Angular%20INDEPTH_files/light-new-year-s-eve-fireworks-sylvester-40663.jpg)\n\nCover photo by [Pixabay](https://www.pexels.com/photo/light-new-year-s-eve-fireworks-sylvester-40663/) on Pexels.\n\nAOT everywhere, dynamic globalisation, strict mode, Bazel, and much more.\n\n*(Yes, Angular Ivy version 9 is now released!)*\n\n## Ivy is enabled by default[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#ivy-is-enabled-by-default)\n\n\nIn previous versions of Angular, we had to opt-in to Ivy. In version 9, we instead have to opt-out of Ivy if we want to fall back to View Engine. This is possible in both versions 9 and 10 to ensure a smoother transition from View Engine to Ivy.\n\nLibraries *can* be AOT-compiled, but this is not recommended. The Angular team has a View Engine-to-Ivy migration plan which recommends only publishing JIT-compiled View Engine-compatible libraries for Angular version 9. The Angular compatibility compiler will upgrade View Engine-compatible libraries to Ivy when installed in an Angular Ivy application project.\n\n[Learn about library compatibility and the View Engine-to-Ivy transition plan in “The Angular Ivy guide for library authors”](https://indepth.dev/the-angular-ivy-guide-for-library-authors/).\n\n``` {.language-json}\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}\n```\n\n``` {.language-typescript}\n// polyfills.ts\n// Only used in multilingual Ivy applications\n// import '@angular/localize/init';\n```\n\n*Listing 1. Opting out of Ivy to fall back to View Engine.*\n\nIf you experience problems with Ivy in your application or any of the libraries you depend on, you can opt out of Ivy and fall back to View Engine by clearing the `enableIvy` Angular compiler option and disabling `@angular/localize` as seen in Listing 1.\n\nOpting out of Ivy in a server environment is a bit trickier. [Follow the official guide to opt out of Ivy when using server-side rendering](https://angular.io/guide/ivy#using-ssr-without-ivy).\n\n## The principle of locality[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#the-principle-of-locality)\n\n\nTo compile a component in View Engine, Angular needs information about all its declarable dependencies, their declarable dependencies, and so on. This means that Angular libraries cannot be AOT-compiled using View Engine.\n\nTo compile a component in Ivy, Angular only needs information about the component itself, except for the name and package name of its declarable dependencies. Most notably, Ivy doesn’t need metadata of any declarable dependencies to compile a component.\n\nThe principle of locality means that in general we will see faster build times.\n\n### Lazy-loaded components[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#lazy-loaded-components)\n\n`entryComponents` declarations are deprecated as they are no longer needed. Any Ivy component can be lazy loaded and dynamically rendered.\n\nThis means that we can now lazy load and render a component without routing or Angular modules. However, in practice we have to use component render modules or feature render modules to link a component’s template to its declarable dependencies.\n\nLibraries that are only used by a lazy loaded component are even bundled in lazy-loaded chunks.\n\n## Improvements to differential loading[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improvements-to-differential-loading)\n\nWhen differential loading was introduced in Angular version 8, the build process was run once for the ES5 bundle and once for the ES2015+ bundle.\n\nIn Angular version 9, an ES2015+ bundle is output first. That bundle is then transpiled to a separate ES5 bundle. This way, we don’t have to go through a full build process twice.\n\n## AOT compilation everywhere[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#aot-compilation-everywhere)\n\n\nAOT is enabled by default in builds, the development server and even in tests. Previously, AOT compilation was significantly slower than JIT compilation so JIT was used for development and testing. With the build and rebuild time improvements in Ivy, AOT-compilation now has a great developer experience.\n\nWhen we used JIT compilation in some phases of our process and only AOT compilation in the final build, errors were detected only when doing production builds or worse, at runtime.\n\n## Bundle sizes[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#bundle-sizes)\n\nIvy can enable smaller bundles because it uses the Ivy Instruction Set which is a set of tree-shakable runtime rendering instructions. Our bundles will only include the rendering instructions we use in our projects.\n\nThis is great for use cases such as microfrontends, Angular Elements and web apps where Angular is not controlling the entire document.\n\nHowever, the difference in our bundle sizes between View Engine and Ivy will vary based on the size of our application and the 3rd party libraries we use. In general:\n\n-   Small and simple applications will see a considerable bundle size decrease.\n-   Complex applications will see an increase in the main bundle, but a decrease in lazy loaded bundle sizes.\n\nThis means a considerable combined bundle size decrease for big applications, but could mean an overall increase in bundle size for medium-sized applications. In both cases, the main bundle’s size will probably increase which is bad for the initial page load time.\n\n## Globalisation[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#globalisation)\n\nLocales (number formatting, date formatting, and other regional settings) can be dynamically loaded at runtime instead of having to be registered at compile time.\n\n``` {.language-typescript}\n// main.ts\nimport '@angular/localize/init';\n\nimport { loadTranslations } from '@angular/localize';\n\nloadTranslations({\n  '8374172394781134519': 'Hello, {$username}! Welcome to {$appName}.',\n});\n```\n\n*Listing 2. Dynamically loading translations.*\n\nAs seen in Listing 2, translated texts can also be dynamically loaded at runtime instead of being part of our bundles.\n\nThe translated texts could be loaded from a database or a file.\n\n### Multiple languages from a single application bundle[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#multiple-languages-from-a-single-application-bundle)\n\nTo change language, we have to restart the application, but we don’t have to serve a different application bundle.\n\nThis means that we can — with some setup — support multiple languages with a single application bundle on a single hostname.\n\n### Compile time inlining[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#compile-time-inlining)\n\nA localised application will now only be compiled once. Instead of multiple builds to produce a bundle per language, a bundle per language is produced by replacing `$localize` placeholders with translated texts.\n\nWe now need to add the package `@angular/localize` to support localisation (multiple languages). The good news is that we no longer have to include Angular’s localisation code in our bundles if we only have a single language.\n\nIf we don’t use localised templates, the `i18n*` Ivy instructions are tree shaked from our bundle.\n\n### Localisable texts in component models and services[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#localisable-texts-in-component-models-and-services)\n\n``` {.language-typescript}\n// app.component.ts\n@Component({\n  template: '{{ title }}'\n})\nexport class AppComponent {\n  title = $localize`Welcome to MyApp`;\n}\n```\n\n*Listing 3. A translation text placeholder in a component model.*\n\nA new internationalisation feature is that we can also include placeholders for translated texts in our component models as seen in Listing 3. Previously, this was only possible in templates.\n\n## Additional provider scopes[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#additional-provider-scopes)\n\nWe have always had Angular module scope for providers. Angular version 6 introduced the `'root'` provider scope and tree-shakable providers both for root and Angular module scope providers.\n\nAngular version 9 introduces the `'platform'` and `'any'` provider scopes. Platform-scoped providers can be shared between multiple Angular applications in the same document. The `'any'` provider scope will share a provider per module injector. For example one service instance for the eagerly loaded main bundle and one service instance for each lazy loaded Angular module.\n\n## Improved developer experience[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-developer-experience)\n\nIvy enables the Angular Language Service to support additional checks while developing. This is a big improvement to the developer experience.\n\n### File path checks[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#file-path-checks)\n\nThe Angular Language Service continuously verifies component stylesheet and template paths.\n\n### Template type checks[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#template-type-checks)\n\nTemplates are type checked, according to the template type checking mode as described in the “Strict mode” section. Member names and types are verified, even in embedded views. What previously resulted in runtime errors are now detected while developing and building.\n\n## New debugging API in development mode[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#new-debugging-api-in-development-mode)\n\n`ng.probe` has been replaced with a new debugging API in development mode. The most notable functions are `ng.applyChanges` and `ng.getComponent`.\n\n## Strict mode[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-mode)\n\n### Strict workspace schematic[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-workspace-schematic)\n\nThe `ng new` workspace schematic now supports the `--strict` flag which defaults to off (`false`).\n\n``` {.language-bash}\nng new my-app --strict\n```\n\nWhen enabled, this parameter adds a few strict TypeScript compiler checks as seen in Listing 4.\n\n``` {.language-json}\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"strictNullChecks\": true\n  }\n}\n```\n\n*Listing 4. TypeScript compiler options enabled in a strict Angular workspace.*\n\nCuriously enough, this doesn’t add the same options as if we would simply set `\"strict\": true` in the `compilerOptions` object. Let’s compare the Angular workspace strict option to the TypeScript compiler strict option.\n\nBoth have these options in common:\n\n-   `noImplicitAny`\n-   `noImplicitThis`\n-   `strictNullChecks`\n\nThe strict Angular workspace option additionally sets these options:\n\n-   `noImplicitReturns`\n-   `noFallthroughCasesInSwitch`\n\nwhile the strict TypeScript compiler option additionally sets these options:\n\n-   `alwaysStrict`\n-   `strictBindCallApply`\n-   `strictFunctionTypes`\n-   `strictPropertyInitialization`\n\nWhat’s more, the strict Angular workspace option doesn’t set template type checking to the new strict mode, only the previous full mode.\n\n### Strict template type checking[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-template-type-checking)\n\nWe have had the option to enable template type checking since Angular version 5 by setting `\"fullTemplateTypeCheck\": true` in the `angularCompilerOptions` object.\n\nIvy introduces strict template type checking as seen in Listing 5. When this new Angular compiler option is set, the value of`fullTemplateTypeCheck` is ignored.\n\n``` {.language-typescript}\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"strictTemplates\": true\n  }\n}\n```\n\n*Listing 5. Enable strict template type checking.*\n\nThe strict template type checking verifies the types of property bindings and respects the `strictNullChecks` option. It also checks the types of template references to directives and components, including generic types. Template context variables’ types are also checked which is great for `NgFor` loops. The `$event` type is checked for event bindings and animations. Even the type of native DOM elements is verified with strict template type checking.\n\nThese extra checks can lead to errors and false positives under certain circumstance, for eaxmple when using libraries that are not compiled with `strictNullChecks`. To address this, strict template type checking has options to opt-out and tweak the checks. For example, `strictTemplates` is actually a shorthand for 8 different Angular compiler options.\n\n## Improved component and directive class inheritance[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-component-and-directive-class-inheritance)\n\nSelectorless base classes are now supported for directives and components. Some metadata is now inherited from base component and directive classes. This makes it easier to extend for example Angular Components and Angular Router directives.\n\n## Latest TypeScript versions[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#latest-typescript-versions)\n\nTypeScript versions 3.6 and 3.7 are supported in Angular version 9. Previous TypeScript versions are no longer supported. Refer to Table 1 to compare TypeScript compatibility between all Angular versions.\n\n[view raw](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support.csv) [angular-cli-node-js-typescript-support.csv](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv) hosted with ❤ by [GitHub](https://github.com/)\n\n*Table 1. Angular CLI, Angular, Node.js and TypeScript compatibility table.*[*Open in new tab*](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3)*.*\n\nTypeScript version 3.6 introduces these and other features:\n\n-   Unicode support for identifiers in modern targets\n-   Improved developer experience for promises\n-   Stricter type checking of generators\n\nTypeScript version 3.7 introduces these and other features that we can use with Angular version 9:\n\n-   Optional chaining operator (`?.`) similar to the safe navigation operator for Angular templates\n-   Nullish coalescing operator (`??`)\n-   Assertion functions (`assert parameterName is typeName` and `asserts parameterName`)\n-   Top-level `await`\n-   Improved recursive type aliases\n-   Improved developer experience for functions such as function truthy checks\n\n## Improved server-side rendering with Angular Universal[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-server-side-rendering-with-angular-universal)\n\nAngular Universal version 9 is released with a Node.js Express development server to provide a realistic environment during development.\n\nAlso part of this release is an Angular CLI builder to prerender static routes using `guess-parser`, inspired by `angular-prerender`. We can pass a routes file to prerender dynamic routes (routes with parameters).\n\n### How do I get started?[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#how-do-i-get-started)\n\nWe can add Angular Universal using the command `ng add @nguniversal/express-engine`. We can then use the builder command `ng run myapp:serve-ssr` to start the server-side rendering development server with live reload. Similarly, we can use `ng run myapp:prerender` to detect static and dynamic routes and prerender them.\n\n## Improved styling experience[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-styling-experience)\n\nStyling in Angular Ivy has been reworked. Combining static HTML classes with `NgStyle` and `NgClass` directives is now fully supported and easier to reason about.\n\n### CSS Custom Properties support[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#css-custom-properties-support)\n\nAs part of the Ivy styling rewrite, binding CSS Custom Properties is now supported.\n\nAn example binding looks like this:\n\n    <div [style.--my-var]=\"myProperty || 'any value'\"></div>\n\nCSS Custom Properties have scope, so this CSS property would be scoped to the component’s DOM.\n\n## Stable Bazel release as opt-in option[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#stable-bazel-release-as-opt-in-option)\n\nBazel version 2.1 is an opt-in build automation tool for Angular version 9.\n\n### How do I get started?[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#how-do-i-get-started-1)\n\nTo enable Bazel, use `ng add @angular/bazel` or use the `@angular/bazel` schematics collection when generating an Angular workspace.\n\nMake sure to follow [the Bazel installation guide](https://docs.bazel.build/versions/2.0.0/install.html) for your operating system.\n\n## Angular Components[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#angular-components)\n\nAngular version 9 comes with official components for YouTube and Google Maps. A clipboard directive and service are added to the Angular CDK.\n\n## Testing[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#testing)\n\nThe biggest surprise of the Angular version 9 release is the many improvements to testing. Long-standing performance issues are resolved, types are improved and new concepts are introduced.\n\n[Learn about major features and improvements for testing in \"Next-level testing in Angular Ivy version 9\"](https://indepth.dev/next-level-testing-in-angular-ivy-version-9/).\n\n>>>>>>>>>>>>> translated\n\n## Conclusion[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#conclusion)\n\nOne of the most important goals has been to keep backwards compatibility between Ivy and View Engine as much as possible.\n\nOf course, Angular version 9 also includes bugfixes, deprecations, and breaking changes. Ivy also addresses some long-standing issues that we did not cover in this article.\n\nAngular Ivy is an enabler for features to come. As we have discussed in this article, Ivy has already given us benefits for different use cases. However, the best features are to come in future versions of Angular. Which of the possible features that will be delivered in Angular versions 10 and 11, that is still to be decided.\n\nWe only discussed what is part of the public, stable Angular version 9 APIs. A few experimental APIs are part of this release, such as `renderComponent`, `markDirty`, and `detectChanges`. However, they are still subject to change.\n\nWith the deprecation of entry component declarations and lazy loaded components using render modules, we are one step closer to [tree-shakable components and optional Angular modules](https://indepth.dev/angular-revisited-tree-shakable-components-and-optional-ngmodules/).\n\n[Component features](https://indepth.dev/component-features-with-angular-ivy/) are also part of this release, but only exposed for internal use by Ivy.\n\nThe Angular Ivy version 9 release gives us improvements for bundling, testing, the developer experience, tooling, debugging, and type checking. Quite a good collection of features.\n\n## Related resources[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#related-resources)\n\n### Lazy loaded components[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#lazy-loaded-components-1)\n\n[Learn about render modules in my talk “Angular revisited: Tree-shakable components and optional NgModules”](https://youtu.be/DA3efofhpq4).\n\n[Learn how to lazy load components in “Lazy load components in Angular” by Kevin Kreuzer](https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8).\n\n### Template type checking[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#template-type-checking)\n\n[Read the official guide on Angular template type checking to learn the details of troubleshooting and configuration](https://angular.io/guide/template-typecheck#troubleshooting-template-errors).\n\n### Globalisation[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#globalisation-1)\n\n[Manfred Steyer discusses lazy-loading locales in \"Lazy Loading Locales with Angular\"](https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/).\n\n[Cédric Exbrayat discusses Ivy globalisation in \"Internationalization with @angular/localize\"](https://blog.ninja-squad.com/2019/12/10/angular-localize/).\n\n### Additional provider scopes[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#additional-provider-scopes-1)\n\nLearn about the `'any'` and `'platform'` provider scopes in [“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler](https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb).\n\n### New debugging API[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#new-debugging-api)\n\n[Read about the full debugging API in the official documentation](https://angular.io/api/core/global).\n\n### Angular Universal version 9[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#angular-universal-version-9)\n\nThese two articles goes into the details of Angular Universal version 9:\n\n-   [“Angular Universal v9: What’s New ?” by Mark Pieszak](https://trilon.io/blog/angular-universal-v9-whats-new)\n-   [“Angular v9 & Universal: SSR and prerendering out of the box!” by Sam Vloeberghs](https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1)\n\nLearn about `angular-prerender`, the library that inspired these new Angular Universal features in [“Prerender Angular Apps with a single Command” by Christoph Guttandin](https://media-codings.com/articles/prerender-angular-apps-with-a-single-command).\n\n### CSS Custom Properties binding[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#css-custom-properties-binding)\n\n[See this tweet and demo by Alexey Zuev to see CSS Custom Properties bindings in action](https://twitter.com/yurzui/status/1221159415820275717).\n\n## Peer reviewers[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#peer-reviewers)\n\nIt’s always helpful to have a second opinion on our work or even just catch silly errors. For this article I had the pleasure of being reviewed by:\n\n-   [Christoph Guttandin](https://twitter.com/chrisguttandin)\n-   [Evgeny Fedorenko](https://indepth.dev/author/evgeny/)\n-   [Santosh Yadav](https://dev.to/santoshyadav198613)\n\nLars Gyrup Brink Nielsen\n\n","source":"angular_9-original-clean.md","raw":"# A look at major features in the Angular Ivy version 9 release\n\n\n[post editor](https://admin.indepth.dev/ghost/#/editor/post/5e2f4cae430b1e0c3681c749)\n\n[Lars Gyrup Brink Nielsen](https://indepth.dev/author/layzee/)06 February, 20209 min read\n\n![A look at major features in the Angular Ivy version 9 release](./A%20look%20at%20major%20features%20in%20the%20Angular%20Ivy%20version%209%C2%A0release%20-%20Angular%20INDEPTH_files/light-new-year-s-eve-fireworks-sylvester-40663.jpg)\n\nCover photo by [Pixabay](https://www.pexels.com/photo/light-new-year-s-eve-fireworks-sylvester-40663/) on Pexels.\n\nAOT everywhere, dynamic globalisation, strict mode, Bazel, and much more.\n\n*(Yes, Angular Ivy version 9 is now released!)*\n\n## Ivy is enabled by default[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#ivy-is-enabled-by-default)\n\n\nIn previous versions of Angular, we had to opt-in to Ivy. In version 9, we instead have to opt-out of Ivy if we want to fall back to View Engine. This is possible in both versions 9 and 10 to ensure a smoother transition from View Engine to Ivy.\n\nLibraries *can* be AOT-compiled, but this is not recommended. The Angular team has a View Engine-to-Ivy migration plan which recommends only publishing JIT-compiled View Engine-compatible libraries for Angular version 9. The Angular compatibility compiler will upgrade View Engine-compatible libraries to Ivy when installed in an Angular Ivy application project.\n\n[Learn about library compatibility and the View Engine-to-Ivy transition plan in “The Angular Ivy guide for library authors”](https://indepth.dev/the-angular-ivy-guide-for-library-authors/).\n\n``` {.language-json}\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}\n```\n\n``` {.language-typescript}\n// polyfills.ts\n// Only used in multilingual Ivy applications\n// import '@angular/localize/init';\n```\n\n*Listing 1. Opting out of Ivy to fall back to View Engine.*\n\nIf you experience problems with Ivy in your application or any of the libraries you depend on, you can opt out of Ivy and fall back to View Engine by clearing the `enableIvy` Angular compiler option and disabling `@angular/localize` as seen in Listing 1.\n\nOpting out of Ivy in a server environment is a bit trickier. [Follow the official guide to opt out of Ivy when using server-side rendering](https://angular.io/guide/ivy#using-ssr-without-ivy).\n\n## The principle of locality[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#the-principle-of-locality)\n\n\nTo compile a component in View Engine, Angular needs information about all its declarable dependencies, their declarable dependencies, and so on. This means that Angular libraries cannot be AOT-compiled using View Engine.\n\nTo compile a component in Ivy, Angular only needs information about the component itself, except for the name and package name of its declarable dependencies. Most notably, Ivy doesn’t need metadata of any declarable dependencies to compile a component.\n\nThe principle of locality means that in general we will see faster build times.\n\n### Lazy-loaded components[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#lazy-loaded-components)\n\n`entryComponents` declarations are deprecated as they are no longer needed. Any Ivy component can be lazy loaded and dynamically rendered.\n\nThis means that we can now lazy load and render a component without routing or Angular modules. However, in practice we have to use component render modules or feature render modules to link a component’s template to its declarable dependencies.\n\nLibraries that are only used by a lazy loaded component are even bundled in lazy-loaded chunks.\n\n## Improvements to differential loading[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improvements-to-differential-loading)\n\nWhen differential loading was introduced in Angular version 8, the build process was run once for the ES5 bundle and once for the ES2015+ bundle.\n\nIn Angular version 9, an ES2015+ bundle is output first. That bundle is then transpiled to a separate ES5 bundle. This way, we don’t have to go through a full build process twice.\n\n## AOT compilation everywhere[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#aot-compilation-everywhere)\n\n\nAOT is enabled by default in builds, the development server and even in tests. Previously, AOT compilation was significantly slower than JIT compilation so JIT was used for development and testing. With the build and rebuild time improvements in Ivy, AOT-compilation now has a great developer experience.\n\nWhen we used JIT compilation in some phases of our process and only AOT compilation in the final build, errors were detected only when doing production builds or worse, at runtime.\n\n## Bundle sizes[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#bundle-sizes)\n\nIvy can enable smaller bundles because it uses the Ivy Instruction Set which is a set of tree-shakable runtime rendering instructions. Our bundles will only include the rendering instructions we use in our projects.\n\nThis is great for use cases such as microfrontends, Angular Elements and web apps where Angular is not controlling the entire document.\n\nHowever, the difference in our bundle sizes between View Engine and Ivy will vary based on the size of our application and the 3rd party libraries we use. In general:\n\n-   Small and simple applications will see a considerable bundle size decrease.\n-   Complex applications will see an increase in the main bundle, but a decrease in lazy loaded bundle sizes.\n\nThis means a considerable combined bundle size decrease for big applications, but could mean an overall increase in bundle size for medium-sized applications. In both cases, the main bundle’s size will probably increase which is bad for the initial page load time.\n\n## Globalisation[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#globalisation)\n\nLocales (number formatting, date formatting, and other regional settings) can be dynamically loaded at runtime instead of having to be registered at compile time.\n\n``` {.language-typescript}\n// main.ts\nimport '@angular/localize/init';\n\nimport { loadTranslations } from '@angular/localize';\n\nloadTranslations({\n  '8374172394781134519': 'Hello, {$username}! Welcome to {$appName}.',\n});\n```\n\n*Listing 2. Dynamically loading translations.*\n\nAs seen in Listing 2, translated texts can also be dynamically loaded at runtime instead of being part of our bundles.\n\nThe translated texts could be loaded from a database or a file.\n\n### Multiple languages from a single application bundle[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#multiple-languages-from-a-single-application-bundle)\n\nTo change language, we have to restart the application, but we don’t have to serve a different application bundle.\n\nThis means that we can — with some setup — support multiple languages with a single application bundle on a single hostname.\n\n### Compile time inlining[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#compile-time-inlining)\n\nA localised application will now only be compiled once. Instead of multiple builds to produce a bundle per language, a bundle per language is produced by replacing `$localize` placeholders with translated texts.\n\nWe now need to add the package `@angular/localize` to support localisation (multiple languages). The good news is that we no longer have to include Angular’s localisation code in our bundles if we only have a single language.\n\nIf we don’t use localised templates, the `i18n*` Ivy instructions are tree shaked from our bundle.\n\n### Localisable texts in component models and services[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#localisable-texts-in-component-models-and-services)\n\n``` {.language-typescript}\n// app.component.ts\n@Component({\n  template: '{{ title }}'\n})\nexport class AppComponent {\n  title = $localize`Welcome to MyApp`;\n}\n```\n\n*Listing 3. A translation text placeholder in a component model.*\n\nA new internationalisation feature is that we can also include placeholders for translated texts in our component models as seen in Listing 3. Previously, this was only possible in templates.\n\n## Additional provider scopes[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#additional-provider-scopes)\n\nWe have always had Angular module scope for providers. Angular version 6 introduced the `'root'` provider scope and tree-shakable providers both for root and Angular module scope providers.\n\nAngular version 9 introduces the `'platform'` and `'any'` provider scopes. Platform-scoped providers can be shared between multiple Angular applications in the same document. The `'any'` provider scope will share a provider per module injector. For example one service instance for the eagerly loaded main bundle and one service instance for each lazy loaded Angular module.\n\n## Improved developer experience[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-developer-experience)\n\nIvy enables the Angular Language Service to support additional checks while developing. This is a big improvement to the developer experience.\n\n### File path checks[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#file-path-checks)\n\nThe Angular Language Service continuously verifies component stylesheet and template paths.\n\n### Template type checks[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#template-type-checks)\n\nTemplates are type checked, according to the template type checking mode as described in the “Strict mode” section. Member names and types are verified, even in embedded views. What previously resulted in runtime errors are now detected while developing and building.\n\n## New debugging API in development mode[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#new-debugging-api-in-development-mode)\n\n`ng.probe` has been replaced with a new debugging API in development mode. The most notable functions are `ng.applyChanges` and `ng.getComponent`.\n\n## Strict mode[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-mode)\n\n### Strict workspace schematic[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-workspace-schematic)\n\nThe `ng new` workspace schematic now supports the `--strict` flag which defaults to off (`false`).\n\n``` {.language-bash}\nng new my-app --strict\n```\n\nWhen enabled, this parameter adds a few strict TypeScript compiler checks as seen in Listing 4.\n\n``` {.language-json}\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"strictNullChecks\": true\n  }\n}\n```\n\n*Listing 4. TypeScript compiler options enabled in a strict Angular workspace.*\n\nCuriously enough, this doesn’t add the same options as if we would simply set `\"strict\": true` in the `compilerOptions` object. Let’s compare the Angular workspace strict option to the TypeScript compiler strict option.\n\nBoth have these options in common:\n\n-   `noImplicitAny`\n-   `noImplicitThis`\n-   `strictNullChecks`\n\nThe strict Angular workspace option additionally sets these options:\n\n-   `noImplicitReturns`\n-   `noFallthroughCasesInSwitch`\n\nwhile the strict TypeScript compiler option additionally sets these options:\n\n-   `alwaysStrict`\n-   `strictBindCallApply`\n-   `strictFunctionTypes`\n-   `strictPropertyInitialization`\n\nWhat’s more, the strict Angular workspace option doesn’t set template type checking to the new strict mode, only the previous full mode.\n\n### Strict template type checking[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-template-type-checking)\n\nWe have had the option to enable template type checking since Angular version 5 by setting `\"fullTemplateTypeCheck\": true` in the `angularCompilerOptions` object.\n\nIvy introduces strict template type checking as seen in Listing 5. When this new Angular compiler option is set, the value of`fullTemplateTypeCheck` is ignored.\n\n``` {.language-typescript}\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"strictTemplates\": true\n  }\n}\n```\n\n*Listing 5. Enable strict template type checking.*\n\nThe strict template type checking verifies the types of property bindings and respects the `strictNullChecks` option. It also checks the types of template references to directives and components, including generic types. Template context variables’ types are also checked which is great for `NgFor` loops. The `$event` type is checked for event bindings and animations. Even the type of native DOM elements is verified with strict template type checking.\n\nThese extra checks can lead to errors and false positives under certain circumstance, for eaxmple when using libraries that are not compiled with `strictNullChecks`. To address this, strict template type checking has options to opt-out and tweak the checks. For example, `strictTemplates` is actually a shorthand for 8 different Angular compiler options.\n\n## Improved component and directive class inheritance[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-component-and-directive-class-inheritance)\n\nSelectorless base classes are now supported for directives and components. Some metadata is now inherited from base component and directive classes. This makes it easier to extend for example Angular Components and Angular Router directives.\n\n## Latest TypeScript versions[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#latest-typescript-versions)\n\nTypeScript versions 3.6 and 3.7 are supported in Angular version 9. Previous TypeScript versions are no longer supported. Refer to Table 1 to compare TypeScript compatibility between all Angular versions.\n\n[view raw](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support.csv) [angular-cli-node-js-typescript-support.csv](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv) hosted with ❤ by [GitHub](https://github.com/)\n\n*Table 1. Angular CLI, Angular, Node.js and TypeScript compatibility table.*[*Open in new tab*](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3)*.*\n\nTypeScript version 3.6 introduces these and other features:\n\n-   Unicode support for identifiers in modern targets\n-   Improved developer experience for promises\n-   Stricter type checking of generators\n\nTypeScript version 3.7 introduces these and other features that we can use with Angular version 9:\n\n-   Optional chaining operator (`?.`) similar to the safe navigation operator for Angular templates\n-   Nullish coalescing operator (`??`)\n-   Assertion functions (`assert parameterName is typeName` and `asserts parameterName`)\n-   Top-level `await`\n-   Improved recursive type aliases\n-   Improved developer experience for functions such as function truthy checks\n\n## Improved server-side rendering with Angular Universal[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-server-side-rendering-with-angular-universal)\n\nAngular Universal version 9 is released with a Node.js Express development server to provide a realistic environment during development.\n\nAlso part of this release is an Angular CLI builder to prerender static routes using `guess-parser`, inspired by `angular-prerender`. We can pass a routes file to prerender dynamic routes (routes with parameters).\n\n### How do I get started?[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#how-do-i-get-started)\n\nWe can add Angular Universal using the command `ng add @nguniversal/express-engine`. We can then use the builder command `ng run myapp:serve-ssr` to start the server-side rendering development server with live reload. Similarly, we can use `ng run myapp:prerender` to detect static and dynamic routes and prerender them.\n\n## Improved styling experience[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-styling-experience)\n\nStyling in Angular Ivy has been reworked. Combining static HTML classes with `NgStyle` and `NgClass` directives is now fully supported and easier to reason about.\n\n### CSS Custom Properties support[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#css-custom-properties-support)\n\nAs part of the Ivy styling rewrite, binding CSS Custom Properties is now supported.\n\nAn example binding looks like this:\n\n    <div [style.--my-var]=\"myProperty || 'any value'\"></div>\n\nCSS Custom Properties have scope, so this CSS property would be scoped to the component’s DOM.\n\n## Stable Bazel release as opt-in option[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#stable-bazel-release-as-opt-in-option)\n\nBazel version 2.1 is an opt-in build automation tool for Angular version 9.\n\n### How do I get started?[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#how-do-i-get-started-1)\n\nTo enable Bazel, use `ng add @angular/bazel` or use the `@angular/bazel` schematics collection when generating an Angular workspace.\n\nMake sure to follow [the Bazel installation guide](https://docs.bazel.build/versions/2.0.0/install.html) for your operating system.\n\n## Angular Components[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#angular-components)\n\nAngular version 9 comes with official components for YouTube and Google Maps. A clipboard directive and service are added to the Angular CDK.\n\n## Testing[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#testing)\n\nThe biggest surprise of the Angular version 9 release is the many improvements to testing. Long-standing performance issues are resolved, types are improved and new concepts are introduced.\n\n[Learn about major features and improvements for testing in \"Next-level testing in Angular Ivy version 9\"](https://indepth.dev/next-level-testing-in-angular-ivy-version-9/).\n\n>>>>>>>>>>>>> translated\n\n## Conclusion[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#conclusion)\n\nOne of the most important goals has been to keep backwards compatibility between Ivy and View Engine as much as possible.\n\nOf course, Angular version 9 also includes bugfixes, deprecations, and breaking changes. Ivy also addresses some long-standing issues that we did not cover in this article.\n\nAngular Ivy is an enabler for features to come. As we have discussed in this article, Ivy has already given us benefits for different use cases. However, the best features are to come in future versions of Angular. Which of the possible features that will be delivered in Angular versions 10 and 11, that is still to be decided.\n\nWe only discussed what is part of the public, stable Angular version 9 APIs. A few experimental APIs are part of this release, such as `renderComponent`, `markDirty`, and `detectChanges`. However, they are still subject to change.\n\nWith the deprecation of entry component declarations and lazy loaded components using render modules, we are one step closer to [tree-shakable components and optional Angular modules](https://indepth.dev/angular-revisited-tree-shakable-components-and-optional-ngmodules/).\n\n[Component features](https://indepth.dev/component-features-with-angular-ivy/) are also part of this release, but only exposed for internal use by Ivy.\n\nThe Angular Ivy version 9 release gives us improvements for bundling, testing, the developer experience, tooling, debugging, and type checking. Quite a good collection of features.\n\n## Related resources[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#related-resources)\n\n### Lazy loaded components[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#lazy-loaded-components-1)\n\n[Learn about render modules in my talk “Angular revisited: Tree-shakable components and optional NgModules”](https://youtu.be/DA3efofhpq4).\n\n[Learn how to lazy load components in “Lazy load components in Angular” by Kevin Kreuzer](https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8).\n\n### Template type checking[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#template-type-checking)\n\n[Read the official guide on Angular template type checking to learn the details of troubleshooting and configuration](https://angular.io/guide/template-typecheck#troubleshooting-template-errors).\n\n### Globalisation[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#globalisation-1)\n\n[Manfred Steyer discusses lazy-loading locales in \"Lazy Loading Locales with Angular\"](https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/).\n\n[Cédric Exbrayat discusses Ivy globalisation in \"Internationalization with @angular/localize\"](https://blog.ninja-squad.com/2019/12/10/angular-localize/).\n\n### Additional provider scopes[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#additional-provider-scopes-1)\n\nLearn about the `'any'` and `'platform'` provider scopes in [“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler](https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb).\n\n### New debugging API[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#new-debugging-api)\n\n[Read about the full debugging API in the official documentation](https://angular.io/api/core/global).\n\n### Angular Universal version 9[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#angular-universal-version-9)\n\nThese two articles goes into the details of Angular Universal version 9:\n\n-   [“Angular Universal v9: What’s New ?” by Mark Pieszak](https://trilon.io/blog/angular-universal-v9-whats-new)\n-   [“Angular v9 & Universal: SSR and prerendering out of the box!” by Sam Vloeberghs](https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1)\n\nLearn about `angular-prerender`, the library that inspired these new Angular Universal features in [“Prerender Angular Apps with a single Command” by Christoph Guttandin](https://media-codings.com/articles/prerender-angular-apps-with-a-single-command).\n\n### CSS Custom Properties binding[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#css-custom-properties-binding)\n\n[See this tweet and demo by Alexey Zuev to see CSS Custom Properties bindings in action](https://twitter.com/yurzui/status/1221159415820275717).\n\n## Peer reviewers[\\#](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#peer-reviewers)\n\nIt’s always helpful to have a second opinion on our work or even just catch silly errors. For this article I had the pleasure of being reviewed by:\n\n-   [Christoph Guttandin](https://twitter.com/chrisguttandin)\n-   [Evgeny Fedorenko](https://indepth.dev/author/evgeny/)\n-   [Santosh Yadav](https://dev.to/santoshyadav198613)\n\nLars Gyrup Brink Nielsen\n\n","date":"2023-07-02T10:25:58.482Z","updated":"2023-07-02T10:25:58.482Z","path":"angular_9-original-clean.html","title":"","comments":1,"layout":"page","_id":"cljlaq2ez0005e0965suqb7g6","content":"<h1 id=\"A-look-at-major-features-in-the-Angular-Ivy-version-9-release\"><a href=\"#A-look-at-major-features-in-the-Angular-Ivy-version-9-release\" class=\"headerlink\" title=\"A look at major features in the Angular Ivy version 9 release\"></a>A look at major features in the Angular Ivy version 9 release</h1><p><a href=\"https://admin.indepth.dev/ghost/#/editor/post/5e2f4cae430b1e0c3681c749\">post editor</a></p>\n<p><a href=\"https://indepth.dev/author/layzee/\">Lars Gyrup Brink Nielsen</a>06 February, 20209 min read</p>\n<p><img src=\"/./A%20look%20at%20major%20features%20in%20the%20Angular%20Ivy%20version%209%C2%A0release%20-%20Angular%20INDEPTH_files/light-new-year-s-eve-fireworks-sylvester-40663.jpg\" alt=\"A look at major features in the Angular Ivy version 9 release\"></p>\n<p>Cover photo by <a href=\"https://www.pexels.com/photo/light-new-year-s-eve-fireworks-sylvester-40663/\">Pixabay</a> on Pexels.</p>\n<p>AOT everywhere, dynamic globalisation, strict mode, Bazel, and much more.</p>\n<p><em>(Yes, Angular Ivy version 9 is now released!)</em></p>\n<h2 id=\"Ivy-is-enabled-by-default\"><a href=\"#Ivy-is-enabled-by-default\" class=\"headerlink\" title=\"Ivy is enabled by default#\"></a>Ivy is enabled by default<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#ivy-is-enabled-by-default\">#</a></h2><p>In previous versions of Angular, we had to opt-in to Ivy. In version 9, we instead have to opt-out of Ivy if we want to fall back to View Engine. This is possible in both versions 9 and 10 to ensure a smoother transition from View Engine to Ivy.</p>\n<p>Libraries <em>can</em> be AOT-compiled, but this is not recommended. The Angular team has a View Engine-to-Ivy migration plan which recommends only publishing JIT-compiled View Engine-compatible libraries for Angular version 9. The Angular compatibility compiler will upgrade View Engine-compatible libraries to Ivy when installed in an Angular Ivy application project.</p>\n<p><a href=\"https://indepth.dev/the-angular-ivy-guide-for-library-authors/\">Learn about library compatibility and the View Engine-to-Ivy transition plan in “The Angular Ivy guide for library authors”</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// tsconfig.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;angularCompilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;enableIvy&quot;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// polyfills.ts</span><br><span class=\"line\">// Only used in multilingual Ivy applications</span><br><span class=\"line\">// import &#x27;@angular/localize/init&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 1. Opting out of Ivy to fall back to View Engine.</em></p>\n<p>If you experience problems with Ivy in your application or any of the libraries you depend on, you can opt out of Ivy and fall back to View Engine by clearing the <code>enableIvy</code> Angular compiler option and disabling <code>@angular/localize</code> as seen in Listing 1.</p>\n<p>Opting out of Ivy in a server environment is a bit trickier. <a href=\"https://angular.io/guide/ivy#using-ssr-without-ivy\">Follow the official guide to opt out of Ivy when using server-side rendering</a>.</p>\n<h2 id=\"The-principle-of-locality\"><a href=\"#The-principle-of-locality\" class=\"headerlink\" title=\"The principle of locality#\"></a>The principle of locality<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#the-principle-of-locality\">#</a></h2><p>To compile a component in View Engine, Angular needs information about all its declarable dependencies, their declarable dependencies, and so on. This means that Angular libraries cannot be AOT-compiled using View Engine.</p>\n<p>To compile a component in Ivy, Angular only needs information about the component itself, except for the name and package name of its declarable dependencies. Most notably, Ivy doesn’t need metadata of any declarable dependencies to compile a component.</p>\n<p>The principle of locality means that in general we will see faster build times.</p>\n<h3 id=\"Lazy-loaded-components\"><a href=\"#Lazy-loaded-components\" class=\"headerlink\" title=\"Lazy-loaded components#\"></a>Lazy-loaded components<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#lazy-loaded-components\">#</a></h3><p><code>entryComponents</code> declarations are deprecated as they are no longer needed. Any Ivy component can be lazy loaded and dynamically rendered.</p>\n<p>This means that we can now lazy load and render a component without routing or Angular modules. However, in practice we have to use component render modules or feature render modules to link a component’s template to its declarable dependencies.</p>\n<p>Libraries that are only used by a lazy loaded component are even bundled in lazy-loaded chunks.</p>\n<h2 id=\"Improvements-to-differential-loading\"><a href=\"#Improvements-to-differential-loading\" class=\"headerlink\" title=\"Improvements to differential loading#\"></a>Improvements to differential loading<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improvements-to-differential-loading\">#</a></h2><p>When differential loading was introduced in Angular version 8, the build process was run once for the ES5 bundle and once for the ES2015+ bundle.</p>\n<p>In Angular version 9, an ES2015+ bundle is output first. That bundle is then transpiled to a separate ES5 bundle. This way, we don’t have to go through a full build process twice.</p>\n<h2 id=\"AOT-compilation-everywhere\"><a href=\"#AOT-compilation-everywhere\" class=\"headerlink\" title=\"AOT compilation everywhere#\"></a>AOT compilation everywhere<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#aot-compilation-everywhere\">#</a></h2><p>AOT is enabled by default in builds, the development server and even in tests. Previously, AOT compilation was significantly slower than JIT compilation so JIT was used for development and testing. With the build and rebuild time improvements in Ivy, AOT-compilation now has a great developer experience.</p>\n<p>When we used JIT compilation in some phases of our process and only AOT compilation in the final build, errors were detected only when doing production builds or worse, at runtime.</p>\n<h2 id=\"Bundle-sizes\"><a href=\"#Bundle-sizes\" class=\"headerlink\" title=\"Bundle sizes#\"></a>Bundle sizes<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#bundle-sizes\">#</a></h2><p>Ivy can enable smaller bundles because it uses the Ivy Instruction Set which is a set of tree-shakable runtime rendering instructions. Our bundles will only include the rendering instructions we use in our projects.</p>\n<p>This is great for use cases such as microfrontends, Angular Elements and web apps where Angular is not controlling the entire document.</p>\n<p>However, the difference in our bundle sizes between View Engine and Ivy will vary based on the size of our application and the 3rd party libraries we use. In general:</p>\n<ul>\n<li>Small and simple applications will see a considerable bundle size decrease.</li>\n<li>Complex applications will see an increase in the main bundle, but a decrease in lazy loaded bundle sizes.</li>\n</ul>\n<p>This means a considerable combined bundle size decrease for big applications, but could mean an overall increase in bundle size for medium-sized applications. In both cases, the main bundle’s size will probably increase which is bad for the initial page load time.</p>\n<h2 id=\"Globalisation\"><a href=\"#Globalisation\" class=\"headerlink\" title=\"Globalisation#\"></a>Globalisation<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#globalisation\">#</a></h2><p>Locales (number formatting, date formatting, and other regional settings) can be dynamically loaded at runtime instead of having to be registered at compile time.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.ts</span><br><span class=\"line\">import &#x27;@angular/localize/init&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; loadTranslations &#125; from &#x27;@angular/localize&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">loadTranslations(&#123;</span><br><span class=\"line\">  &#x27;8374172394781134519&#x27;: &#x27;Hello, &#123;$username&#125;! Welcome to &#123;$appName&#125;.&#x27;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 2. Dynamically loading translations.</em></p>\n<p>As seen in Listing 2, translated texts can also be dynamically loaded at runtime instead of being part of our bundles.</p>\n<p>The translated texts could be loaded from a database or a file.</p>\n<h3 id=\"Multiple-languages-from-a-single-application-bundle\"><a href=\"#Multiple-languages-from-a-single-application-bundle\" class=\"headerlink\" title=\"Multiple languages from a single application bundle#\"></a>Multiple languages from a single application bundle<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#multiple-languages-from-a-single-application-bundle\">#</a></h3><p>To change language, we have to restart the application, but we don’t have to serve a different application bundle.</p>\n<p>This means that we can — with some setup — support multiple languages with a single application bundle on a single hostname.</p>\n<h3 id=\"Compile-time-inlining\"><a href=\"#Compile-time-inlining\" class=\"headerlink\" title=\"Compile time inlining#\"></a>Compile time inlining<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#compile-time-inlining\">#</a></h3><p>A localised application will now only be compiled once. Instead of multiple builds to produce a bundle per language, a bundle per language is produced by replacing <code>$localize</code> placeholders with translated texts.</p>\n<p>We now need to add the package <code>@angular/localize</code> to support localisation (multiple languages). The good news is that we no longer have to include Angular’s localisation code in our bundles if we only have a single language.</p>\n<p>If we don’t use localised templates, the <code>i18n*</code> Ivy instructions are tree shaked from our bundle.</p>\n<h3 id=\"Localisable-texts-in-component-models-and-services\"><a href=\"#Localisable-texts-in-component-models-and-services\" class=\"headerlink\" title=\"Localisable texts in component models and services#\"></a>Localisable texts in component models and services<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#localisable-texts-in-component-models-and-services\">#</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// app.component.ts</span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  template: &#x27;&#123;&#123; title &#125;&#125;&#x27;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export class AppComponent &#123;</span><br><span class=\"line\">  title = $localize`Welcome to MyApp`;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 3. A translation text placeholder in a component model.</em></p>\n<p>A new internationalisation feature is that we can also include placeholders for translated texts in our component models as seen in Listing 3. Previously, this was only possible in templates.</p>\n<h2 id=\"Additional-provider-scopes\"><a href=\"#Additional-provider-scopes\" class=\"headerlink\" title=\"Additional provider scopes#\"></a>Additional provider scopes<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#additional-provider-scopes\">#</a></h2><p>We have always had Angular module scope for providers. Angular version 6 introduced the <code>&#39;root&#39;</code> provider scope and tree-shakable providers both for root and Angular module scope providers.</p>\n<p>Angular version 9 introduces the <code>&#39;platform&#39;</code> and <code>&#39;any&#39;</code> provider scopes. Platform-scoped providers can be shared between multiple Angular applications in the same document. The <code>&#39;any&#39;</code> provider scope will share a provider per module injector. For example one service instance for the eagerly loaded main bundle and one service instance for each lazy loaded Angular module.</p>\n<h2 id=\"Improved-developer-experience\"><a href=\"#Improved-developer-experience\" class=\"headerlink\" title=\"Improved developer experience#\"></a>Improved developer experience<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-developer-experience\">#</a></h2><p>Ivy enables the Angular Language Service to support additional checks while developing. This is a big improvement to the developer experience.</p>\n<h3 id=\"File-path-checks\"><a href=\"#File-path-checks\" class=\"headerlink\" title=\"File path checks#\"></a>File path checks<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#file-path-checks\">#</a></h3><p>The Angular Language Service continuously verifies component stylesheet and template paths.</p>\n<h3 id=\"Template-type-checks\"><a href=\"#Template-type-checks\" class=\"headerlink\" title=\"Template type checks#\"></a>Template type checks<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#template-type-checks\">#</a></h3><p>Templates are type checked, according to the template type checking mode as described in the “Strict mode” section. Member names and types are verified, even in embedded views. What previously resulted in runtime errors are now detected while developing and building.</p>\n<h2 id=\"New-debugging-API-in-development-mode\"><a href=\"#New-debugging-API-in-development-mode\" class=\"headerlink\" title=\"New debugging API in development mode#\"></a>New debugging API in development mode<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#new-debugging-api-in-development-mode\">#</a></h2><p><code>ng.probe</code> has been replaced with a new debugging API in development mode. The most notable functions are <code>ng.applyChanges</code> and <code>ng.getComponent</code>.</p>\n<h2 id=\"Strict-mode\"><a href=\"#Strict-mode\" class=\"headerlink\" title=\"Strict mode#\"></a>Strict mode<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-mode\">#</a></h2><h3 id=\"Strict-workspace-schematic\"><a href=\"#Strict-workspace-schematic\" class=\"headerlink\" title=\"Strict workspace schematic#\"></a>Strict workspace schematic<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-workspace-schematic\">#</a></h3><p>The <code>ng new</code> workspace schematic now supports the <code>--strict</code> flag which defaults to off (<code>false</code>).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new my-app --strict</span><br></pre></td></tr></table></figure>\n\n<p>When enabled, this parameter adds a few strict TypeScript compiler checks as seen in Listing 4.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// tsconfig.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;noImplicitAny&quot;: true,</span><br><span class=\"line\">    &quot;noImplicitReturns&quot;: true,</span><br><span class=\"line\">    &quot;noImplicitThis&quot;: true,</span><br><span class=\"line\">    &quot;noFallthroughCasesInSwitch&quot;: true,</span><br><span class=\"line\">    &quot;strictNullChecks&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 4. TypeScript compiler options enabled in a strict Angular workspace.</em></p>\n<p>Curiously enough, this doesn’t add the same options as if we would simply set <code>&quot;strict&quot;: true</code> in the <code>compilerOptions</code> object. Let’s compare the Angular workspace strict option to the TypeScript compiler strict option.</p>\n<p>Both have these options in common:</p>\n<ul>\n<li><code>noImplicitAny</code></li>\n<li><code>noImplicitThis</code></li>\n<li><code>strictNullChecks</code></li>\n</ul>\n<p>The strict Angular workspace option additionally sets these options:</p>\n<ul>\n<li><code>noImplicitReturns</code></li>\n<li><code>noFallthroughCasesInSwitch</code></li>\n</ul>\n<p>while the strict TypeScript compiler option additionally sets these options:</p>\n<ul>\n<li><code>alwaysStrict</code></li>\n<li><code>strictBindCallApply</code></li>\n<li><code>strictFunctionTypes</code></li>\n<li><code>strictPropertyInitialization</code></li>\n</ul>\n<p>What’s more, the strict Angular workspace option doesn’t set template type checking to the new strict mode, only the previous full mode.</p>\n<h3 id=\"Strict-template-type-checking\"><a href=\"#Strict-template-type-checking\" class=\"headerlink\" title=\"Strict template type checking#\"></a>Strict template type checking<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-template-type-checking\">#</a></h3><p>We have had the option to enable template type checking since Angular version 5 by setting <code>&quot;fullTemplateTypeCheck&quot;: true</code> in the <code>angularCompilerOptions</code> object.</p>\n<p>Ivy introduces strict template type checking as seen in Listing 5. When this new Angular compiler option is set, the value of<code>fullTemplateTypeCheck</code> is ignored.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// tsconfig.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;angularCompilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;strictTemplates&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 5. Enable strict template type checking.</em></p>\n<p>The strict template type checking verifies the types of property bindings and respects the <code>strictNullChecks</code> option. It also checks the types of template references to directives and components, including generic types. Template context variables’ types are also checked which is great for <code>NgFor</code> loops. The <code>$event</code> type is checked for event bindings and animations. Even the type of native DOM elements is verified with strict template type checking.</p>\n<p>These extra checks can lead to errors and false positives under certain circumstance, for eaxmple when using libraries that are not compiled with <code>strictNullChecks</code>. To address this, strict template type checking has options to opt-out and tweak the checks. For example, <code>strictTemplates</code> is actually a shorthand for 8 different Angular compiler options.</p>\n<h2 id=\"Improved-component-and-directive-class-inheritance\"><a href=\"#Improved-component-and-directive-class-inheritance\" class=\"headerlink\" title=\"Improved component and directive class inheritance#\"></a>Improved component and directive class inheritance<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-component-and-directive-class-inheritance\">#</a></h2><p>Selectorless base classes are now supported for directives and components. Some metadata is now inherited from base component and directive classes. This makes it easier to extend for example Angular Components and Angular Router directives.</p>\n<h2 id=\"Latest-TypeScript-versions\"><a href=\"#Latest-TypeScript-versions\" class=\"headerlink\" title=\"Latest TypeScript versions#\"></a>Latest TypeScript versions<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#latest-typescript-versions\">#</a></h2><p>TypeScript versions 3.6 and 3.7 are supported in Angular version 9. Previous TypeScript versions are no longer supported. Refer to Table 1 to compare TypeScript compatibility between all Angular versions.</p>\n<p><a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support.csv\">view raw</a> <a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv\">angular-cli-node-js-typescript-support.csv</a> hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<p><em>Table 1. Angular CLI, Angular, Node.js and TypeScript compatibility table.</em><a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3\"><em>Open in new tab</em></a><em>.</em></p>\n<p>TypeScript version 3.6 introduces these and other features:</p>\n<ul>\n<li>Unicode support for identifiers in modern targets</li>\n<li>Improved developer experience for promises</li>\n<li>Stricter type checking of generators</li>\n</ul>\n<p>TypeScript version 3.7 introduces these and other features that we can use with Angular version 9:</p>\n<ul>\n<li>Optional chaining operator (<code>?.</code>) similar to the safe navigation operator for Angular templates</li>\n<li>Nullish coalescing operator (<code>??</code>)</li>\n<li>Assertion functions (<code>assert parameterName is typeName</code> and <code>asserts parameterName</code>)</li>\n<li>Top-level <code>await</code></li>\n<li>Improved recursive type aliases</li>\n<li>Improved developer experience for functions such as function truthy checks</li>\n</ul>\n<h2 id=\"Improved-server-side-rendering-with-Angular-Universal\"><a href=\"#Improved-server-side-rendering-with-Angular-Universal\" class=\"headerlink\" title=\"Improved server-side rendering with Angular Universal#\"></a>Improved server-side rendering with Angular Universal<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-server-side-rendering-with-angular-universal\">#</a></h2><p>Angular Universal version 9 is released with a Node.js Express development server to provide a realistic environment during development.</p>\n<p>Also part of this release is an Angular CLI builder to prerender static routes using <code>guess-parser</code>, inspired by <code>angular-prerender</code>. We can pass a routes file to prerender dynamic routes (routes with parameters).</p>\n<h3 id=\"How-do-I-get-started\"><a href=\"#How-do-I-get-started\" class=\"headerlink\" title=\"How do I get started?#\"></a>How do I get started?<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#how-do-i-get-started\">#</a></h3><p>We can add Angular Universal using the command <code>ng add @nguniversal/express-engine</code>. We can then use the builder command <code>ng run myapp:serve-ssr</code> to start the server-side rendering development server with live reload. Similarly, we can use <code>ng run myapp:prerender</code> to detect static and dynamic routes and prerender them.</p>\n<h2 id=\"Improved-styling-experience\"><a href=\"#Improved-styling-experience\" class=\"headerlink\" title=\"Improved styling experience#\"></a>Improved styling experience<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-styling-experience\">#</a></h2><p>Styling in Angular Ivy has been reworked. Combining static HTML classes with <code>NgStyle</code> and <code>NgClass</code> directives is now fully supported and easier to reason about.</p>\n<h3 id=\"CSS-Custom-Properties-support\"><a href=\"#CSS-Custom-Properties-support\" class=\"headerlink\" title=\"CSS Custom Properties support#\"></a>CSS Custom Properties support<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#css-custom-properties-support\">#</a></h3><p>As part of the Ivy styling rewrite, binding CSS Custom Properties is now supported.</p>\n<p>An example binding looks like this:</p>\n<pre><code>&lt;div [style.--my-var]=&quot;myProperty || &#39;any value&#39;&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>CSS Custom Properties have scope, so this CSS property would be scoped to the component’s DOM.</p>\n<h2 id=\"Stable-Bazel-release-as-opt-in-option\"><a href=\"#Stable-Bazel-release-as-opt-in-option\" class=\"headerlink\" title=\"Stable Bazel release as opt-in option#\"></a>Stable Bazel release as opt-in option<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#stable-bazel-release-as-opt-in-option\">#</a></h2><p>Bazel version 2.1 is an opt-in build automation tool for Angular version 9.</p>\n<h3 id=\"How-do-I-get-started-1\"><a href=\"#How-do-I-get-started-1\" class=\"headerlink\" title=\"How do I get started?#\"></a>How do I get started?<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#how-do-i-get-started-1\">#</a></h3><p>To enable Bazel, use <code>ng add @angular/bazel</code> or use the <code>@angular/bazel</code> schematics collection when generating an Angular workspace.</p>\n<p>Make sure to follow <a href=\"https://docs.bazel.build/versions/2.0.0/install.html\">the Bazel installation guide</a> for your operating system.</p>\n<h2 id=\"Angular-Components\"><a href=\"#Angular-Components\" class=\"headerlink\" title=\"Angular Components#\"></a>Angular Components<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#angular-components\">#</a></h2><p>Angular version 9 comes with official components for YouTube and Google Maps. A clipboard directive and service are added to the Angular CDK.</p>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing#\"></a>Testing<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#testing\">#</a></h2><p>The biggest surprise of the Angular version 9 release is the many improvements to testing. Long-standing performance issues are resolved, types are improved and new concepts are introduced.</p>\n<p><a href=\"https://indepth.dev/next-level-testing-in-angular-ivy-version-9/\">Learn about major features and improvements for testing in “Next-level testing in Angular Ivy version 9”</a>.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>translated</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion#\"></a>Conclusion<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#conclusion\">#</a></h2><p>One of the most important goals has been to keep backwards compatibility between Ivy and View Engine as much as possible.</p>\n<p>Of course, Angular version 9 also includes bugfixes, deprecations, and breaking changes. Ivy also addresses some long-standing issues that we did not cover in this article.</p>\n<p>Angular Ivy is an enabler for features to come. As we have discussed in this article, Ivy has already given us benefits for different use cases. However, the best features are to come in future versions of Angular. Which of the possible features that will be delivered in Angular versions 10 and 11, that is still to be decided.</p>\n<p>We only discussed what is part of the public, stable Angular version 9 APIs. A few experimental APIs are part of this release, such as <code>renderComponent</code>, <code>markDirty</code>, and <code>detectChanges</code>. However, they are still subject to change.</p>\n<p>With the deprecation of entry component declarations and lazy loaded components using render modules, we are one step closer to <a href=\"https://indepth.dev/angular-revisited-tree-shakable-components-and-optional-ngmodules/\">tree-shakable components and optional Angular modules</a>.</p>\n<p><a href=\"https://indepth.dev/component-features-with-angular-ivy/\">Component features</a> are also part of this release, but only exposed for internal use by Ivy.</p>\n<p>The Angular Ivy version 9 release gives us improvements for bundling, testing, the developer experience, tooling, debugging, and type checking. Quite a good collection of features.</p>\n<h2 id=\"Related-resources\"><a href=\"#Related-resources\" class=\"headerlink\" title=\"Related resources#\"></a>Related resources<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#related-resources\">#</a></h2><h3 id=\"Lazy-loaded-components-1\"><a href=\"#Lazy-loaded-components-1\" class=\"headerlink\" title=\"Lazy loaded components#\"></a>Lazy loaded components<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#lazy-loaded-components-1\">#</a></h3><p><a href=\"https://youtu.be/DA3efofhpq4\">Learn about render modules in my talk “Angular revisited: Tree-shakable components and optional NgModules”</a>.</p>\n<p><a href=\"https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8\">Learn how to lazy load components in “Lazy load components in Angular” by Kevin Kreuzer</a>.</p>\n<h3 id=\"Template-type-checking\"><a href=\"#Template-type-checking\" class=\"headerlink\" title=\"Template type checking#\"></a>Template type checking<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#template-type-checking\">#</a></h3><p><a href=\"https://angular.io/guide/template-typecheck#troubleshooting-template-errors\">Read the official guide on Angular template type checking to learn the details of troubleshooting and configuration</a>.</p>\n<h3 id=\"Globalisation-1\"><a href=\"#Globalisation-1\" class=\"headerlink\" title=\"Globalisation#\"></a>Globalisation<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#globalisation-1\">#</a></h3><p><a href=\"https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/\">Manfred Steyer discusses lazy-loading locales in “Lazy Loading Locales with Angular”</a>.</p>\n<p><a href=\"https://blog.ninja-squad.com/2019/12/10/angular-localize/\">Cédric Exbrayat discusses Ivy globalisation in “Internationalization with @angular&#x2F;localize”</a>.</p>\n<h3 id=\"Additional-provider-scopes-1\"><a href=\"#Additional-provider-scopes-1\" class=\"headerlink\" title=\"Additional provider scopes#\"></a>Additional provider scopes<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#additional-provider-scopes-1\">#</a></h3><p>Learn about the <code>&#39;any&#39;</code> and <code>&#39;platform&#39;</code> provider scopes in <a href=\"https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb\">“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler</a>.</p>\n<h3 id=\"New-debugging-API\"><a href=\"#New-debugging-API\" class=\"headerlink\" title=\"New debugging API#\"></a>New debugging API<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#new-debugging-api\">#</a></h3><p><a href=\"https://angular.io/api/core/global\">Read about the full debugging API in the official documentation</a>.</p>\n<h3 id=\"Angular-Universal-version-9\"><a href=\"#Angular-Universal-version-9\" class=\"headerlink\" title=\"Angular Universal version 9#\"></a>Angular Universal version 9<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#angular-universal-version-9\">#</a></h3><p>These two articles goes into the details of Angular Universal version 9:</p>\n<ul>\n<li><a href=\"https://trilon.io/blog/angular-universal-v9-whats-new\">“Angular Universal v9: What’s New ?” by Mark Pieszak</a></li>\n<li><a href=\"https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1\">“Angular v9 &amp; Universal: SSR and prerendering out of the box!” by Sam Vloeberghs</a></li>\n</ul>\n<p>Learn about <code>angular-prerender</code>, the library that inspired these new Angular Universal features in <a href=\"https://media-codings.com/articles/prerender-angular-apps-with-a-single-command\">“Prerender Angular Apps with a single Command” by Christoph Guttandin</a>.</p>\n<h3 id=\"CSS-Custom-Properties-binding\"><a href=\"#CSS-Custom-Properties-binding\" class=\"headerlink\" title=\"CSS Custom Properties binding#\"></a>CSS Custom Properties binding<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#css-custom-properties-binding\">#</a></h3><p><a href=\"https://twitter.com/yurzui/status/1221159415820275717\">See this tweet and demo by Alexey Zuev to see CSS Custom Properties bindings in action</a>.</p>\n<h2 id=\"Peer-reviewers\"><a href=\"#Peer-reviewers\" class=\"headerlink\" title=\"Peer reviewers#\"></a>Peer reviewers<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#peer-reviewers\">#</a></h2><p>It’s always helpful to have a second opinion on our work or even just catch silly errors. For this article I had the pleasure of being reviewed by:</p>\n<ul>\n<li><a href=\"https://twitter.com/chrisguttandin\">Christoph Guttandin</a></li>\n<li><a href=\"https://indepth.dev/author/evgeny/\">Evgeny Fedorenko</a></li>\n<li><a href=\"https://dev.to/santoshyadav198613\">Santosh Yadav</a></li>\n</ul>\n<p>Lars Gyrup Brink Nielsen</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"A-look-at-major-features-in-the-Angular-Ivy-version-9-release\"><a href=\"#A-look-at-major-features-in-the-Angular-Ivy-version-9-release\" class=\"headerlink\" title=\"A look at major features in the Angular Ivy version 9 release\"></a>A look at major features in the Angular Ivy version 9 release</h1><p><a href=\"https://admin.indepth.dev/ghost/#/editor/post/5e2f4cae430b1e0c3681c749\">post editor</a></p>\n<p><a href=\"https://indepth.dev/author/layzee/\">Lars Gyrup Brink Nielsen</a>06 February, 20209 min read</p>\n<p><img src=\"/./A%20look%20at%20major%20features%20in%20the%20Angular%20Ivy%20version%209%C2%A0release%20-%20Angular%20INDEPTH_files/light-new-year-s-eve-fireworks-sylvester-40663.jpg\" alt=\"A look at major features in the Angular Ivy version 9 release\"></p>\n<p>Cover photo by <a href=\"https://www.pexels.com/photo/light-new-year-s-eve-fireworks-sylvester-40663/\">Pixabay</a> on Pexels.</p>\n<p>AOT everywhere, dynamic globalisation, strict mode, Bazel, and much more.</p>\n<p><em>(Yes, Angular Ivy version 9 is now released!)</em></p>\n<h2 id=\"Ivy-is-enabled-by-default\"><a href=\"#Ivy-is-enabled-by-default\" class=\"headerlink\" title=\"Ivy is enabled by default#\"></a>Ivy is enabled by default<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#ivy-is-enabled-by-default\">#</a></h2><p>In previous versions of Angular, we had to opt-in to Ivy. In version 9, we instead have to opt-out of Ivy if we want to fall back to View Engine. This is possible in both versions 9 and 10 to ensure a smoother transition from View Engine to Ivy.</p>\n<p>Libraries <em>can</em> be AOT-compiled, but this is not recommended. The Angular team has a View Engine-to-Ivy migration plan which recommends only publishing JIT-compiled View Engine-compatible libraries for Angular version 9. The Angular compatibility compiler will upgrade View Engine-compatible libraries to Ivy when installed in an Angular Ivy application project.</p>\n<p><a href=\"https://indepth.dev/the-angular-ivy-guide-for-library-authors/\">Learn about library compatibility and the View Engine-to-Ivy transition plan in “The Angular Ivy guide for library authors”</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// tsconfig.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;angularCompilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;enableIvy&quot;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// polyfills.ts</span><br><span class=\"line\">// Only used in multilingual Ivy applications</span><br><span class=\"line\">// import &#x27;@angular/localize/init&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 1. Opting out of Ivy to fall back to View Engine.</em></p>\n<p>If you experience problems with Ivy in your application or any of the libraries you depend on, you can opt out of Ivy and fall back to View Engine by clearing the <code>enableIvy</code> Angular compiler option and disabling <code>@angular/localize</code> as seen in Listing 1.</p>\n<p>Opting out of Ivy in a server environment is a bit trickier. <a href=\"https://angular.io/guide/ivy#using-ssr-without-ivy\">Follow the official guide to opt out of Ivy when using server-side rendering</a>.</p>\n<h2 id=\"The-principle-of-locality\"><a href=\"#The-principle-of-locality\" class=\"headerlink\" title=\"The principle of locality#\"></a>The principle of locality<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#the-principle-of-locality\">#</a></h2><p>To compile a component in View Engine, Angular needs information about all its declarable dependencies, their declarable dependencies, and so on. This means that Angular libraries cannot be AOT-compiled using View Engine.</p>\n<p>To compile a component in Ivy, Angular only needs information about the component itself, except for the name and package name of its declarable dependencies. Most notably, Ivy doesn’t need metadata of any declarable dependencies to compile a component.</p>\n<p>The principle of locality means that in general we will see faster build times.</p>\n<h3 id=\"Lazy-loaded-components\"><a href=\"#Lazy-loaded-components\" class=\"headerlink\" title=\"Lazy-loaded components#\"></a>Lazy-loaded components<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#lazy-loaded-components\">#</a></h3><p><code>entryComponents</code> declarations are deprecated as they are no longer needed. Any Ivy component can be lazy loaded and dynamically rendered.</p>\n<p>This means that we can now lazy load and render a component without routing or Angular modules. However, in practice we have to use component render modules or feature render modules to link a component’s template to its declarable dependencies.</p>\n<p>Libraries that are only used by a lazy loaded component are even bundled in lazy-loaded chunks.</p>\n<h2 id=\"Improvements-to-differential-loading\"><a href=\"#Improvements-to-differential-loading\" class=\"headerlink\" title=\"Improvements to differential loading#\"></a>Improvements to differential loading<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improvements-to-differential-loading\">#</a></h2><p>When differential loading was introduced in Angular version 8, the build process was run once for the ES5 bundle and once for the ES2015+ bundle.</p>\n<p>In Angular version 9, an ES2015+ bundle is output first. That bundle is then transpiled to a separate ES5 bundle. This way, we don’t have to go through a full build process twice.</p>\n<h2 id=\"AOT-compilation-everywhere\"><a href=\"#AOT-compilation-everywhere\" class=\"headerlink\" title=\"AOT compilation everywhere#\"></a>AOT compilation everywhere<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#aot-compilation-everywhere\">#</a></h2><p>AOT is enabled by default in builds, the development server and even in tests. Previously, AOT compilation was significantly slower than JIT compilation so JIT was used for development and testing. With the build and rebuild time improvements in Ivy, AOT-compilation now has a great developer experience.</p>\n<p>When we used JIT compilation in some phases of our process and only AOT compilation in the final build, errors were detected only when doing production builds or worse, at runtime.</p>\n<h2 id=\"Bundle-sizes\"><a href=\"#Bundle-sizes\" class=\"headerlink\" title=\"Bundle sizes#\"></a>Bundle sizes<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#bundle-sizes\">#</a></h2><p>Ivy can enable smaller bundles because it uses the Ivy Instruction Set which is a set of tree-shakable runtime rendering instructions. Our bundles will only include the rendering instructions we use in our projects.</p>\n<p>This is great for use cases such as microfrontends, Angular Elements and web apps where Angular is not controlling the entire document.</p>\n<p>However, the difference in our bundle sizes between View Engine and Ivy will vary based on the size of our application and the 3rd party libraries we use. In general:</p>\n<ul>\n<li>Small and simple applications will see a considerable bundle size decrease.</li>\n<li>Complex applications will see an increase in the main bundle, but a decrease in lazy loaded bundle sizes.</li>\n</ul>\n<p>This means a considerable combined bundle size decrease for big applications, but could mean an overall increase in bundle size for medium-sized applications. In both cases, the main bundle’s size will probably increase which is bad for the initial page load time.</p>\n<h2 id=\"Globalisation\"><a href=\"#Globalisation\" class=\"headerlink\" title=\"Globalisation#\"></a>Globalisation<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#globalisation\">#</a></h2><p>Locales (number formatting, date formatting, and other regional settings) can be dynamically loaded at runtime instead of having to be registered at compile time.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.ts</span><br><span class=\"line\">import &#x27;@angular/localize/init&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; loadTranslations &#125; from &#x27;@angular/localize&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">loadTranslations(&#123;</span><br><span class=\"line\">  &#x27;8374172394781134519&#x27;: &#x27;Hello, &#123;$username&#125;! Welcome to &#123;$appName&#125;.&#x27;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 2. Dynamically loading translations.</em></p>\n<p>As seen in Listing 2, translated texts can also be dynamically loaded at runtime instead of being part of our bundles.</p>\n<p>The translated texts could be loaded from a database or a file.</p>\n<h3 id=\"Multiple-languages-from-a-single-application-bundle\"><a href=\"#Multiple-languages-from-a-single-application-bundle\" class=\"headerlink\" title=\"Multiple languages from a single application bundle#\"></a>Multiple languages from a single application bundle<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#multiple-languages-from-a-single-application-bundle\">#</a></h3><p>To change language, we have to restart the application, but we don’t have to serve a different application bundle.</p>\n<p>This means that we can — with some setup — support multiple languages with a single application bundle on a single hostname.</p>\n<h3 id=\"Compile-time-inlining\"><a href=\"#Compile-time-inlining\" class=\"headerlink\" title=\"Compile time inlining#\"></a>Compile time inlining<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#compile-time-inlining\">#</a></h3><p>A localised application will now only be compiled once. Instead of multiple builds to produce a bundle per language, a bundle per language is produced by replacing <code>$localize</code> placeholders with translated texts.</p>\n<p>We now need to add the package <code>@angular/localize</code> to support localisation (multiple languages). The good news is that we no longer have to include Angular’s localisation code in our bundles if we only have a single language.</p>\n<p>If we don’t use localised templates, the <code>i18n*</code> Ivy instructions are tree shaked from our bundle.</p>\n<h3 id=\"Localisable-texts-in-component-models-and-services\"><a href=\"#Localisable-texts-in-component-models-and-services\" class=\"headerlink\" title=\"Localisable texts in component models and services#\"></a>Localisable texts in component models and services<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#localisable-texts-in-component-models-and-services\">#</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// app.component.ts</span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  template: &#x27;&#123;&#123; title &#125;&#125;&#x27;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export class AppComponent &#123;</span><br><span class=\"line\">  title = $localize`Welcome to MyApp`;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 3. A translation text placeholder in a component model.</em></p>\n<p>A new internationalisation feature is that we can also include placeholders for translated texts in our component models as seen in Listing 3. Previously, this was only possible in templates.</p>\n<h2 id=\"Additional-provider-scopes\"><a href=\"#Additional-provider-scopes\" class=\"headerlink\" title=\"Additional provider scopes#\"></a>Additional provider scopes<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#additional-provider-scopes\">#</a></h2><p>We have always had Angular module scope for providers. Angular version 6 introduced the <code>&#39;root&#39;</code> provider scope and tree-shakable providers both for root and Angular module scope providers.</p>\n<p>Angular version 9 introduces the <code>&#39;platform&#39;</code> and <code>&#39;any&#39;</code> provider scopes. Platform-scoped providers can be shared between multiple Angular applications in the same document. The <code>&#39;any&#39;</code> provider scope will share a provider per module injector. For example one service instance for the eagerly loaded main bundle and one service instance for each lazy loaded Angular module.</p>\n<h2 id=\"Improved-developer-experience\"><a href=\"#Improved-developer-experience\" class=\"headerlink\" title=\"Improved developer experience#\"></a>Improved developer experience<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-developer-experience\">#</a></h2><p>Ivy enables the Angular Language Service to support additional checks while developing. This is a big improvement to the developer experience.</p>\n<h3 id=\"File-path-checks\"><a href=\"#File-path-checks\" class=\"headerlink\" title=\"File path checks#\"></a>File path checks<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#file-path-checks\">#</a></h3><p>The Angular Language Service continuously verifies component stylesheet and template paths.</p>\n<h3 id=\"Template-type-checks\"><a href=\"#Template-type-checks\" class=\"headerlink\" title=\"Template type checks#\"></a>Template type checks<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#template-type-checks\">#</a></h3><p>Templates are type checked, according to the template type checking mode as described in the “Strict mode” section. Member names and types are verified, even in embedded views. What previously resulted in runtime errors are now detected while developing and building.</p>\n<h2 id=\"New-debugging-API-in-development-mode\"><a href=\"#New-debugging-API-in-development-mode\" class=\"headerlink\" title=\"New debugging API in development mode#\"></a>New debugging API in development mode<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#new-debugging-api-in-development-mode\">#</a></h2><p><code>ng.probe</code> has been replaced with a new debugging API in development mode. The most notable functions are <code>ng.applyChanges</code> and <code>ng.getComponent</code>.</p>\n<h2 id=\"Strict-mode\"><a href=\"#Strict-mode\" class=\"headerlink\" title=\"Strict mode#\"></a>Strict mode<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-mode\">#</a></h2><h3 id=\"Strict-workspace-schematic\"><a href=\"#Strict-workspace-schematic\" class=\"headerlink\" title=\"Strict workspace schematic#\"></a>Strict workspace schematic<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-workspace-schematic\">#</a></h3><p>The <code>ng new</code> workspace schematic now supports the <code>--strict</code> flag which defaults to off (<code>false</code>).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new my-app --strict</span><br></pre></td></tr></table></figure>\n\n<p>When enabled, this parameter adds a few strict TypeScript compiler checks as seen in Listing 4.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// tsconfig.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;noImplicitAny&quot;: true,</span><br><span class=\"line\">    &quot;noImplicitReturns&quot;: true,</span><br><span class=\"line\">    &quot;noImplicitThis&quot;: true,</span><br><span class=\"line\">    &quot;noFallthroughCasesInSwitch&quot;: true,</span><br><span class=\"line\">    &quot;strictNullChecks&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 4. TypeScript compiler options enabled in a strict Angular workspace.</em></p>\n<p>Curiously enough, this doesn’t add the same options as if we would simply set <code>&quot;strict&quot;: true</code> in the <code>compilerOptions</code> object. Let’s compare the Angular workspace strict option to the TypeScript compiler strict option.</p>\n<p>Both have these options in common:</p>\n<ul>\n<li><code>noImplicitAny</code></li>\n<li><code>noImplicitThis</code></li>\n<li><code>strictNullChecks</code></li>\n</ul>\n<p>The strict Angular workspace option additionally sets these options:</p>\n<ul>\n<li><code>noImplicitReturns</code></li>\n<li><code>noFallthroughCasesInSwitch</code></li>\n</ul>\n<p>while the strict TypeScript compiler option additionally sets these options:</p>\n<ul>\n<li><code>alwaysStrict</code></li>\n<li><code>strictBindCallApply</code></li>\n<li><code>strictFunctionTypes</code></li>\n<li><code>strictPropertyInitialization</code></li>\n</ul>\n<p>What’s more, the strict Angular workspace option doesn’t set template type checking to the new strict mode, only the previous full mode.</p>\n<h3 id=\"Strict-template-type-checking\"><a href=\"#Strict-template-type-checking\" class=\"headerlink\" title=\"Strict template type checking#\"></a>Strict template type checking<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#strict-template-type-checking\">#</a></h3><p>We have had the option to enable template type checking since Angular version 5 by setting <code>&quot;fullTemplateTypeCheck&quot;: true</code> in the <code>angularCompilerOptions</code> object.</p>\n<p>Ivy introduces strict template type checking as seen in Listing 5. When this new Angular compiler option is set, the value of<code>fullTemplateTypeCheck</code> is ignored.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// tsconfig.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;angularCompilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;strictTemplates&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listing 5. Enable strict template type checking.</em></p>\n<p>The strict template type checking verifies the types of property bindings and respects the <code>strictNullChecks</code> option. It also checks the types of template references to directives and components, including generic types. Template context variables’ types are also checked which is great for <code>NgFor</code> loops. The <code>$event</code> type is checked for event bindings and animations. Even the type of native DOM elements is verified with strict template type checking.</p>\n<p>These extra checks can lead to errors and false positives under certain circumstance, for eaxmple when using libraries that are not compiled with <code>strictNullChecks</code>. To address this, strict template type checking has options to opt-out and tweak the checks. For example, <code>strictTemplates</code> is actually a shorthand for 8 different Angular compiler options.</p>\n<h2 id=\"Improved-component-and-directive-class-inheritance\"><a href=\"#Improved-component-and-directive-class-inheritance\" class=\"headerlink\" title=\"Improved component and directive class inheritance#\"></a>Improved component and directive class inheritance<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-component-and-directive-class-inheritance\">#</a></h2><p>Selectorless base classes are now supported for directives and components. Some metadata is now inherited from base component and directive classes. This makes it easier to extend for example Angular Components and Angular Router directives.</p>\n<h2 id=\"Latest-TypeScript-versions\"><a href=\"#Latest-TypeScript-versions\" class=\"headerlink\" title=\"Latest TypeScript versions#\"></a>Latest TypeScript versions<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#latest-typescript-versions\">#</a></h2><p>TypeScript versions 3.6 and 3.7 are supported in Angular version 9. Previous TypeScript versions are no longer supported. Refer to Table 1 to compare TypeScript compatibility between all Angular versions.</p>\n<p><a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support.csv\">view raw</a> <a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv\">angular-cli-node-js-typescript-support.csv</a> hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<p><em>Table 1. Angular CLI, Angular, Node.js and TypeScript compatibility table.</em><a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3\"><em>Open in new tab</em></a><em>.</em></p>\n<p>TypeScript version 3.6 introduces these and other features:</p>\n<ul>\n<li>Unicode support for identifiers in modern targets</li>\n<li>Improved developer experience for promises</li>\n<li>Stricter type checking of generators</li>\n</ul>\n<p>TypeScript version 3.7 introduces these and other features that we can use with Angular version 9:</p>\n<ul>\n<li>Optional chaining operator (<code>?.</code>) similar to the safe navigation operator for Angular templates</li>\n<li>Nullish coalescing operator (<code>??</code>)</li>\n<li>Assertion functions (<code>assert parameterName is typeName</code> and <code>asserts parameterName</code>)</li>\n<li>Top-level <code>await</code></li>\n<li>Improved recursive type aliases</li>\n<li>Improved developer experience for functions such as function truthy checks</li>\n</ul>\n<h2 id=\"Improved-server-side-rendering-with-Angular-Universal\"><a href=\"#Improved-server-side-rendering-with-Angular-Universal\" class=\"headerlink\" title=\"Improved server-side rendering with Angular Universal#\"></a>Improved server-side rendering with Angular Universal<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-server-side-rendering-with-angular-universal\">#</a></h2><p>Angular Universal version 9 is released with a Node.js Express development server to provide a realistic environment during development.</p>\n<p>Also part of this release is an Angular CLI builder to prerender static routes using <code>guess-parser</code>, inspired by <code>angular-prerender</code>. We can pass a routes file to prerender dynamic routes (routes with parameters).</p>\n<h3 id=\"How-do-I-get-started\"><a href=\"#How-do-I-get-started\" class=\"headerlink\" title=\"How do I get started?#\"></a>How do I get started?<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#how-do-i-get-started\">#</a></h3><p>We can add Angular Universal using the command <code>ng add @nguniversal/express-engine</code>. We can then use the builder command <code>ng run myapp:serve-ssr</code> to start the server-side rendering development server with live reload. Similarly, we can use <code>ng run myapp:prerender</code> to detect static and dynamic routes and prerender them.</p>\n<h2 id=\"Improved-styling-experience\"><a href=\"#Improved-styling-experience\" class=\"headerlink\" title=\"Improved styling experience#\"></a>Improved styling experience<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#improved-styling-experience\">#</a></h2><p>Styling in Angular Ivy has been reworked. Combining static HTML classes with <code>NgStyle</code> and <code>NgClass</code> directives is now fully supported and easier to reason about.</p>\n<h3 id=\"CSS-Custom-Properties-support\"><a href=\"#CSS-Custom-Properties-support\" class=\"headerlink\" title=\"CSS Custom Properties support#\"></a>CSS Custom Properties support<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#css-custom-properties-support\">#</a></h3><p>As part of the Ivy styling rewrite, binding CSS Custom Properties is now supported.</p>\n<p>An example binding looks like this:</p>\n<pre><code>&lt;div [style.--my-var]=&quot;myProperty || &#39;any value&#39;&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>CSS Custom Properties have scope, so this CSS property would be scoped to the component’s DOM.</p>\n<h2 id=\"Stable-Bazel-release-as-opt-in-option\"><a href=\"#Stable-Bazel-release-as-opt-in-option\" class=\"headerlink\" title=\"Stable Bazel release as opt-in option#\"></a>Stable Bazel release as opt-in option<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#stable-bazel-release-as-opt-in-option\">#</a></h2><p>Bazel version 2.1 is an opt-in build automation tool for Angular version 9.</p>\n<h3 id=\"How-do-I-get-started-1\"><a href=\"#How-do-I-get-started-1\" class=\"headerlink\" title=\"How do I get started?#\"></a>How do I get started?<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#how-do-i-get-started-1\">#</a></h3><p>To enable Bazel, use <code>ng add @angular/bazel</code> or use the <code>@angular/bazel</code> schematics collection when generating an Angular workspace.</p>\n<p>Make sure to follow <a href=\"https://docs.bazel.build/versions/2.0.0/install.html\">the Bazel installation guide</a> for your operating system.</p>\n<h2 id=\"Angular-Components\"><a href=\"#Angular-Components\" class=\"headerlink\" title=\"Angular Components#\"></a>Angular Components<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#angular-components\">#</a></h2><p>Angular version 9 comes with official components for YouTube and Google Maps. A clipboard directive and service are added to the Angular CDK.</p>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing#\"></a>Testing<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#testing\">#</a></h2><p>The biggest surprise of the Angular version 9 release is the many improvements to testing. Long-standing performance issues are resolved, types are improved and new concepts are introduced.</p>\n<p><a href=\"https://indepth.dev/next-level-testing-in-angular-ivy-version-9/\">Learn about major features and improvements for testing in “Next-level testing in Angular Ivy version 9”</a>.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>translated</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion#\"></a>Conclusion<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#conclusion\">#</a></h2><p>One of the most important goals has been to keep backwards compatibility between Ivy and View Engine as much as possible.</p>\n<p>Of course, Angular version 9 also includes bugfixes, deprecations, and breaking changes. Ivy also addresses some long-standing issues that we did not cover in this article.</p>\n<p>Angular Ivy is an enabler for features to come. As we have discussed in this article, Ivy has already given us benefits for different use cases. However, the best features are to come in future versions of Angular. Which of the possible features that will be delivered in Angular versions 10 and 11, that is still to be decided.</p>\n<p>We only discussed what is part of the public, stable Angular version 9 APIs. A few experimental APIs are part of this release, such as <code>renderComponent</code>, <code>markDirty</code>, and <code>detectChanges</code>. However, they are still subject to change.</p>\n<p>With the deprecation of entry component declarations and lazy loaded components using render modules, we are one step closer to <a href=\"https://indepth.dev/angular-revisited-tree-shakable-components-and-optional-ngmodules/\">tree-shakable components and optional Angular modules</a>.</p>\n<p><a href=\"https://indepth.dev/component-features-with-angular-ivy/\">Component features</a> are also part of this release, but only exposed for internal use by Ivy.</p>\n<p>The Angular Ivy version 9 release gives us improvements for bundling, testing, the developer experience, tooling, debugging, and type checking. Quite a good collection of features.</p>\n<h2 id=\"Related-resources\"><a href=\"#Related-resources\" class=\"headerlink\" title=\"Related resources#\"></a>Related resources<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#related-resources\">#</a></h2><h3 id=\"Lazy-loaded-components-1\"><a href=\"#Lazy-loaded-components-1\" class=\"headerlink\" title=\"Lazy loaded components#\"></a>Lazy loaded components<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#lazy-loaded-components-1\">#</a></h3><p><a href=\"https://youtu.be/DA3efofhpq4\">Learn about render modules in my talk “Angular revisited: Tree-shakable components and optional NgModules”</a>.</p>\n<p><a href=\"https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8\">Learn how to lazy load components in “Lazy load components in Angular” by Kevin Kreuzer</a>.</p>\n<h3 id=\"Template-type-checking\"><a href=\"#Template-type-checking\" class=\"headerlink\" title=\"Template type checking#\"></a>Template type checking<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#template-type-checking\">#</a></h3><p><a href=\"https://angular.io/guide/template-typecheck#troubleshooting-template-errors\">Read the official guide on Angular template type checking to learn the details of troubleshooting and configuration</a>.</p>\n<h3 id=\"Globalisation-1\"><a href=\"#Globalisation-1\" class=\"headerlink\" title=\"Globalisation#\"></a>Globalisation<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#globalisation-1\">#</a></h3><p><a href=\"https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/\">Manfred Steyer discusses lazy-loading locales in “Lazy Loading Locales with Angular”</a>.</p>\n<p><a href=\"https://blog.ninja-squad.com/2019/12/10/angular-localize/\">Cédric Exbrayat discusses Ivy globalisation in “Internationalization with @angular&#x2F;localize”</a>.</p>\n<h3 id=\"Additional-provider-scopes-1\"><a href=\"#Additional-provider-scopes-1\" class=\"headerlink\" title=\"Additional provider scopes#\"></a>Additional provider scopes<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#additional-provider-scopes-1\">#</a></h3><p>Learn about the <code>&#39;any&#39;</code> and <code>&#39;platform&#39;</code> provider scopes in <a href=\"https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb\">“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler</a>.</p>\n<h3 id=\"New-debugging-API\"><a href=\"#New-debugging-API\" class=\"headerlink\" title=\"New debugging API#\"></a>New debugging API<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#new-debugging-api\">#</a></h3><p><a href=\"https://angular.io/api/core/global\">Read about the full debugging API in the official documentation</a>.</p>\n<h3 id=\"Angular-Universal-version-9\"><a href=\"#Angular-Universal-version-9\" class=\"headerlink\" title=\"Angular Universal version 9#\"></a>Angular Universal version 9<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#angular-universal-version-9\">#</a></h3><p>These two articles goes into the details of Angular Universal version 9:</p>\n<ul>\n<li><a href=\"https://trilon.io/blog/angular-universal-v9-whats-new\">“Angular Universal v9: What’s New ?” by Mark Pieszak</a></li>\n<li><a href=\"https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1\">“Angular v9 &amp; Universal: SSR and prerendering out of the box!” by Sam Vloeberghs</a></li>\n</ul>\n<p>Learn about <code>angular-prerender</code>, the library that inspired these new Angular Universal features in <a href=\"https://media-codings.com/articles/prerender-angular-apps-with-a-single-command\">“Prerender Angular Apps with a single Command” by Christoph Guttandin</a>.</p>\n<h3 id=\"CSS-Custom-Properties-binding\"><a href=\"#CSS-Custom-Properties-binding\" class=\"headerlink\" title=\"CSS Custom Properties binding#\"></a>CSS Custom Properties binding<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#css-custom-properties-binding\">#</a></h3><p><a href=\"https://twitter.com/yurzui/status/1221159415820275717\">See this tweet and demo by Alexey Zuev to see CSS Custom Properties bindings in action</a>.</p>\n<h2 id=\"Peer-reviewers\"><a href=\"#Peer-reviewers\" class=\"headerlink\" title=\"Peer reviewers#\"></a>Peer reviewers<a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/#peer-reviewers\">#</a></h2><p>It’s always helpful to have a second opinion on our work or even just catch silly errors. For this article I had the pleasure of being reviewed by:</p>\n<ul>\n<li><a href=\"https://twitter.com/chrisguttandin\">Christoph Guttandin</a></li>\n<li><a href=\"https://indepth.dev/author/evgeny/\">Evgeny Fedorenko</a></li>\n<li><a href=\"https://dev.to/santoshyadav198613\">Santosh Yadav</a></li>\n</ul>\n<p>Lars Gyrup Brink Nielsen</p>\n"},{"title":"Contacto","id":4,"updated":"2017-02-14T08:21:50.000Z","date":"2015-09-16T11:52:52.000Z","_content":"\n<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vitae Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>","source":"Contacto/index.md","raw":"---\ntitle: Contacto\npermalink: contacto\nid: 4\nupdated: '2017-02-14 09:21:50'\ndate: 2015-09-16 13:52:52\n---\n\n<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vitae Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>","path":"contacto.html","comments":1,"layout":"page","_id":"cljlaq2f40007e096aujuaf1s","content":"<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vitae Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>","site":{"data":{}},"excerpt":"","more":"<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vitae Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>"},{"title":"Noticias Junio 2016","id":16,"updated":"2016-06-06T12:28:19.000Z","date":"2016-06-03T08:44:51.000Z","_content":"\n##06-06-16\n\n\n###Angular 2 R.C.: La evolución de la plataforma.\nAngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo ...JS. Pero la esperada versión [Angular2](http://angular.io) lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.\n\nTodo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora [es una plataforma](/angular2-primeras-impresiones/) mucho más cercana al mundo empresarial. \n\nUsa esta [serie de artículos sobre Angular2](/tag/angular2/) como tutorial para adaptarte a esta evolución.\n \n###Enlaces para aprender\n####[AngularJS] : [Mejorar el Rendimiento en una línea.]()\nParece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.\n \n####[JavaScript] : [La fatiga de frameworks comparada.]()\nEmpiezo por la consabida broma de pedir una moratoria en el desarrollo de armas... digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.\n \n####[NodeJS] : [Monitorizar aplicaciones bien y fácil.]()\nSi no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(' ;-) ').\n \n####[MongoDB] : [Rendimiento y Monitorización de MongoDB.]()\nAhora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.\n \n####[CleanCode] : [Escribe código pensando en mantenerlo.]()\nEscribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.\n \n###Próximas actividades\nEste es el mes de Angular2. Su estreno como Release Candidate permite ofrecer [formación con garantías](/promociones). Nos vemos.\n\n \n>*Keep coding, keep learning.*","source":"Noticias-Junio-2016/index.md","raw":"---\ntitle: Noticias Junio 2016\npermalink: noticias-junio-16\nid: 16\nupdated: '2016-06-06 14:28:19'\ndate: 2016-06-03 10:44:51\n---\n\n##06-06-16\n\n\n###Angular 2 R.C.: La evolución de la plataforma.\nAngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo ...JS. Pero la esperada versión [Angular2](http://angular.io) lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.\n\nTodo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora [es una plataforma](/angular2-primeras-impresiones/) mucho más cercana al mundo empresarial. \n\nUsa esta [serie de artículos sobre Angular2](/tag/angular2/) como tutorial para adaptarte a esta evolución.\n \n###Enlaces para aprender\n####[AngularJS] : [Mejorar el Rendimiento en una línea.]()\nParece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.\n \n####[JavaScript] : [La fatiga de frameworks comparada.]()\nEmpiezo por la consabida broma de pedir una moratoria en el desarrollo de armas... digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.\n \n####[NodeJS] : [Monitorizar aplicaciones bien y fácil.]()\nSi no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(' ;-) ').\n \n####[MongoDB] : [Rendimiento y Monitorización de MongoDB.]()\nAhora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.\n \n####[CleanCode] : [Escribe código pensando en mantenerlo.]()\nEscribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.\n \n###Próximas actividades\nEste es el mes de Angular2. Su estreno como Release Candidate permite ofrecer [formación con garantías](/promociones). Nos vemos.\n\n \n>*Keep coding, keep learning.*","path":"noticias-junio-16.html","comments":1,"layout":"page","_id":"cljlaq2f50009e0969rcpghul","content":"<p>##06-06-16</p>\n<p>###Angular 2 R.C.: La evolución de la plataforma.<br>AngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo …JS. Pero la esperada versión <a href=\"http://angular.io/\">Angular2</a> lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.</p>\n<p>Todo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora <a href=\"/angular2-primeras-impresiones/\">es una plataforma</a> mucho más cercana al mundo empresarial. </p>\n<p>Usa esta <a href=\"/tag/angular2/\">serie de artículos sobre Angular2</a> como tutorial para adaptarte a esta evolución.</p>\n<p>###Enlaces para aprender<br>####[AngularJS] : <a href=\"\">Mejorar el Rendimiento en una línea.</a><br>Parece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.</p>\n<p>####[JavaScript] : <a href=\"\">La fatiga de frameworks comparada.</a><br>Empiezo por la consabida broma de pedir una moratoria en el desarrollo de armas… digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.</p>\n<p>####[NodeJS] : <a href=\"\">Monitorizar aplicaciones bien y fácil.</a><br>Si no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(‘ ;-) ‘).</p>\n<p>####[MongoDB] : <a href=\"\">Rendimiento y Monitorización de MongoDB.</a><br>Ahora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.</p>\n<p>####[CleanCode] : <a href=\"\">Escribe código pensando en mantenerlo.</a><br>Escribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.</p>\n<p>###Próximas actividades<br>Este es el mes de Angular2. Su estreno como Release Candidate permite ofrecer <a href=\"/promociones\">formación con garantías</a>. Nos vemos.</p>\n<blockquote>\n<p><em>Keep coding, keep learning.</em></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>##06-06-16</p>\n<p>###Angular 2 R.C.: La evolución de la plataforma.<br>AngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo …JS. Pero la esperada versión <a href=\"http://angular.io/\">Angular2</a> lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.</p>\n<p>Todo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora <a href=\"/angular2-primeras-impresiones/\">es una plataforma</a> mucho más cercana al mundo empresarial. </p>\n<p>Usa esta <a href=\"/tag/angular2/\">serie de artículos sobre Angular2</a> como tutorial para adaptarte a esta evolución.</p>\n<p>###Enlaces para aprender<br>####[AngularJS] : <a href=\"\">Mejorar el Rendimiento en una línea.</a><br>Parece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.</p>\n<p>####[JavaScript] : <a href=\"\">La fatiga de frameworks comparada.</a><br>Empiezo por la consabida broma de pedir una moratoria en el desarrollo de armas… digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.</p>\n<p>####[NodeJS] : <a href=\"\">Monitorizar aplicaciones bien y fácil.</a><br>Si no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(‘ ;-) ‘).</p>\n<p>####[MongoDB] : <a href=\"\">Rendimiento y Monitorización de MongoDB.</a><br>Ahora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.</p>\n<p>####[CleanCode] : <a href=\"\">Escribe código pensando en mantenerlo.</a><br>Escribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.</p>\n<p>###Próximas actividades<br>Este es el mes de Angular2. Su estreno como Release Candidate permite ofrecer <a href=\"/promociones\">formación con garantías</a>. Nos vemos.</p>\n<blockquote>\n<p><em>Keep coding, keep learning.</em></p>\n</blockquote>\n"},{"title":"Promociones","id":25,"updated":"2016-05-27T06:46:03.000Z","date":"2016-05-10T11:53:10.000Z","_content":"\n#Cursos de Angular2\n\n---\n\n####Online\n\nInicio 9 de junio de 2016\n\n###[Angular 2, desarrollo de aplicaciones empresariales con HTML](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\nCon EscuelaIT\n\n\n---\n\n####Presencial en Coruña\n\nInicio 10 de junio de 2016\n\n###[A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x](http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x)\n\nCon Vitae Digital","source":"Promociones/index.md","raw":"---\ntitle: Promociones\npermalink: promociones\nid: 25\nupdated: '2016-05-27 08:46:03'\ndate: 2016-05-10 13:53:10\n---\n\n#Cursos de Angular2\n\n---\n\n####Online\n\nInicio 9 de junio de 2016\n\n###[Angular 2, desarrollo de aplicaciones empresariales con HTML](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\nCon EscuelaIT\n\n\n---\n\n####Presencial en Coruña\n\nInicio 10 de junio de 2016\n\n###[A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x](http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x)\n\nCon Vitae Digital","path":"promociones.html","comments":1,"layout":"page","_id":"cljlaq2f6000ce0968jha2rqp","content":"<p>#Cursos de Angular2</p>\n<hr>\n<p>####Online</p>\n<p>Inicio 9 de junio de 2016</p>\n<p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\">Angular 2, desarrollo de aplicaciones empresariales con HTML</a></p>\n<p>Con EscuelaIT</p>\n<hr>\n<p>####Presencial en Coruña</p>\n<p>Inicio 10 de junio de 2016</p>\n<p>###<a href=\"http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x\">A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x</a></p>\n<p>Con Vitae Digital</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#Cursos de Angular2</p>\n<hr>\n<p>####Online</p>\n<p>Inicio 9 de junio de 2016</p>\n<p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\">Angular 2, desarrollo de aplicaciones empresariales con HTML</a></p>\n<p>Con EscuelaIT</p>\n<hr>\n<p>####Presencial en Coruña</p>\n<p>Inicio 10 de junio de 2016</p>\n<p>###<a href=\"http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x\">A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x</a></p>\n<p>Con Vitae Digital</p>\n"},{"_content":"> Ayudita conceptual...\n>> https://www.campusmvp.es/recursos/post/angular-9-ya-esta-aqui-y-estas-son-sus-novedades.aspx\n\n# Un vistazo a las características principales en el lanzamiento de Angular Ivy versión 9\n\n[editor de publicaciones](https://admin.indepth.dev/ghost/#/editor/post/5e2f4cae430b1e0c3681c749)\n\n[Lars Gyrup Brink Nielsen](https://indepth.dev/author/layzee/) 06 de febrero de 2020 9 min de lectura\n\nMUCHO y en todas partes, globalización dinámica, modo estricto, Bazel y mucho más.\n\n* (Sí, ahora se ha lanzado Angular Ivy versión 9) *\n\n## Ivy está habilitado por defecto\n\nEn versiones anteriores de Angular, tuvimos que optar por Ivy. En la versión 9, tenemos que optar por no participar en Ivy si queremos recurrir a View Engine. Esto es posible en ambas versiones 9 y 10 para garantizar una transición más fluida de View Engine a Ivy.\n\nLas librerías *se pueden* compilar AOT, pero no es recomendable. El equipo de Angular tiene un plan de migración de View Engine a Ivy que recomienda publicar solo librerías compatibles con View Engine compiladas con JIT para Angular versión 9. El compilador de compatibilidad Angular actualizará las librerías compatibles con View Engine a Ivy cuando se instalen en una aplicación Angular Ivy.\n\n[Obtén información sobre la compatibilidad de la biblioteca y el plan de transición de View Engine-to-Ivy en \"La guía de Angular Ivy para autores de librerías\"](https://indepth.dev/the-angular-ivy-guide-for-library-authors/) .\n\n```json\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}\n```\n\n```typescript\n// polyfills.ts\n// Solo se usa en aplicaciones multilingües de Ivy\n// import '@angular/localize/init';\n```\n\n*Listado 1. Optar por no usar Ivy para recurrir a View Engine.*\n\nSi tienes problemas con Ivy en tu aplicación, o en cualquiera de las librerías de las que depende, puedes optar por salir de Ivy y recurrir a View Engine. Hazlo desactivando la opción del compilador angular `enableIvy` y deshabilitando` @angular/localize` como se ve en Listado 1.\n\nOptar por evitar Ivy en un entorno de servidor es un poco más complicado. [Sigue la guía oficial para darte de baja de Ivy cuando uses la renderización del lado del servidor](https://angular.io/guide/ivy#using-ssr-without-ivy).\n\n## El principio de localidad\n\nAntes, para compilar un componente en View Engine, Angular necesitaba información sobre todas sus dependencias declaradas. Esto significa que las librerías Angular no se pueden compilar AOT usando View Engine.\n\nAhora para compilar un componente en Ivy, Angular solo necesita información sobre el componente en sí. Pero, Ivy no necesita metadatos de ninguna dependencia declarable para compilar un componente.\n\nEl principio de localidad significa que, en general, veremos tiempos de construcción más rápidos.\n\n### Componentes con carga diferida\n\nLas declaraciones `entryComponents` están en desuso porque ya no son necesarias. Cualquier componente Ivy puede cargarse de forma diferida y renderizarse dinámicamente.\n\nEsto significa que ahora podemos cargar de forma diferida y renderizar un componente sin enrutamiento o módulos Angular. Sin embargo, en la práctica aún tenemos que usar módulos para renderizar componentes o módulos funcionales para vincular la plantilla de un componente a sus dependencias.\n\nLas librerías que solo son utilizadas por un componente con carga diferida se agrupan en fragmentos con carga diferida.\n\n## Mejoras en la carga diferencial\n\nCuando se introdujo la carga diferencial en Angular versión 8, el proceso de compilación se ejecutaba una vez para el paquete ES5 y otra vez para el paquete ES2015+.\n\nEn Angular versión 9, primero se emite un paquete ES2015+. Ese paquete se transfiere a un paquete ES5 separado. De esta manera, no tenemos que pasar por un proceso de compilación completo dos veces.\n\n## Compilación AOT en todas partes\n\nAOT está habilitado de forma predeterminada en las compilaciones, el servidor de desarrollo e incluso en las pruebas. Anteriormente, la compilación AOT era significativamente más lenta que la compilación JIT, por lo que JIT se usaba para el desarrollo y las pruebas. Con las mejoras de tiempo de construcción y reconstrucción en Ivy, la compilación AOT ahora ofrece una gran experiencia al desarrollador.\n\nCuando utilizábamos la compilación JIT en desarrollo y solo la compilación AOT en la compilación final, algunos errores se detectaban solo al hacer compilaciones de producción o, peor aún, en tiempo de ejecución.\n\n## Tamaños de paquete\n\nIvy puede habilitar paquetes más pequeños porque usa el _Ivy Instruction Set_, que es un conjunto de instrucciones de representación de tiempo de ejecución potencialmente **tree-shakable**. Nuestros paquetes solo incluirán las instrucciones de renderizado que realmente usamos en nuestros proyectos.\n\nEsto es ideal para casos de uso como _microfrontends_, Angular Elements y aplicaciones web donde Angular no controla todo el documento.\n\nSin embargo, la diferencia en los tamaños de nuestros paquetes entre View Engine e Ivy variará según el tamaño de nuestra aplicación y las librerías de terceros que utilizamos. En general:\n\n- Las aplicaciones pequeñas y simples verán una disminución considerable del peso del paquete.\n- Las aplicaciones complejas verán un aumento en el fichero principal, pero una disminución en los tamaños de paquetes con carga diferida.\n\nEsto significa una disminución considerable del tamaño de descarga combinada para aplicaciones grandes, pero podría significar un aumento en el peso total para aplicaciones medianas. En ambos casos, el tamaño del paquete principal probablemente aumentará, lo que es malo para el tiempo de carga inicial de la página.\n\n## Globalización\n\nLas configuraciones regionales (formato de número, formato de fecha y otras configuraciones regionales) se pueden cargar dinámicamente en tiempo de ejecución en lugar de tener que registrarse en tiempo de compilación.\n\n```typescript\n// main.ts\nimport '@angular/localize/init';\n\nimport { loadTranslations } from '@angular/localize';\n\nloadTranslations ({\n  '8374172394781134519': '¡Hola, {$nombre de usuario}! Bienvenido a {$appName}. ',\n});\n```\n\n*Listado 2. Carga dinámica de traducciones.*\n\nComo se ve en el Listado 2, los textos traducidos también se pueden cargar dinámicamente en tiempo de ejecución en lugar de ser parte de nuestros paquetes.\n\nLos textos traducidos pueden cargarse desde una base de datos o un archivo.\n\n### Múltiples idiomas desde un único paquete de aplicaciones\n\nPara cambiar el idioma, tenemos que reiniciar la aplicación, pero no tenemos que servir un fichero de aplicaciones diferente.\n\nEsto significa que podemos, con alguna configuración, admitir varios idiomas con un solo paquete de aplicaciones en un solo nombre de host.\n\n### Tiempo de compilación en línea\n\nUna aplicación localizada ahora solo se compilará una vez. En lugar de múltiples compilaciones para producir un paquete por idioma, se produce un paquete por idioma reemplazando los marcadores de posición `$localize` con textos traducidos.\n\nAhora  hay que agregar el paquete `@angular/localize` para posibilitar la localización (varios idiomas). La buena noticia es que ya no tenemos que incluir el código de localización de Angular en nuestros paquetes si solo tenemos un idioma.\n\nSi no usamos plantillas localizadas, las instrucciones de Ivy `i18n *` se sacan del paquete principal.\n\n### Textos localizables en modelos de componentes y servicios\n\n```typescript\n// app.component.ts\n@Component({\n  template: '{{ title }}'\n})\nexport class AppComponent {\n  title = $localize`Welcome to MyApp`;\n}\n```\n\n*Listado 3. Un marcador de posición de texto de traducción en un modelo de componente.*\n\nUna nueva característica de internacionalización es que también podemos incluir marcadores de posición para textos traducidos en el contenido de nuestros modelos como se ve en el Listado 3. Anteriormente, esto solo era posible en las plantillas.\n\n## Ámbitos adicionales de proveedores de dependencias\n\nSiempre hemos tenido alcance de módulo para los proveedores de inyección de servicios. La versión Angular 6 introdujo el alcance `'root'` y los proveedores _tree-shakable_, tanto para los proveedores de alcance desde el módulo raíz como desde módulos inferiores.\n\nLa versión angular 9 presenta los nuevos ámbitos de proveedor `'platform'` y `'any'`. Los proveedores con ámbito de `'platform'` se pueden compartir entre múltiples aplicaciones Angular en el mismo documento. El alcance del proveedor `'any'` compartirá un proveedor por inyector de módulo. Por ejemplo, una instancia de servicio para el paquete principal cargado por adelantado y una instancia de servicio para cada módulo cargado con retraso.\n\n## Experiencia mejorada del desarrollador\n\nIvy permite que _Angular Language Service_ admita comprobaciones adicionales durante el desarrollo. Esta es una gran mejora para la experiencia del desarrollador.\n\n### Comprobaciones de ruta de archivo\n\n_Angular Language Service_ verifica continuamente la hoja de estilo de componentes y las rutas de plantilla.\n\n### Verificaciones de tipo de plantilla\n\nLas plantillas se verifican por tipo, de acuerdo con el modo de verificación de tipo de plantilla como se describe más abajo en la sección \"Modo estricto\". Los nombres y tipos de miembros se verifican, incluso en vistas incrustadas. Lo que anteriormente resultaba en errores de tiempo de ejecución ahora se detecta durante el desarrollo y la construcción.\n\n## Nueva API de depuración en modo de desarrollo\n\n`ng.probe` ha sido reemplazado por una nueva API de depuración en modo de desarrollo. Las funciones más notables son `ng.applyChanges` y` ng.getComponent`.\n\n## Modo estricto\n\n### Esquema estricto del espacio de trabajo\n\nEl comando `ng new` ahora es compatible con el indicador` --strict` que por defecto está desactivado (`false`).\n\n```bash\nng new my-app --strict\n```\n\nCuando está habilitado, este parámetro agrega algunas comprobaciones estrictas del compilador TypeScript como se ve en el Listado 4.\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"strictlyNullChecks\": true\n  }\n}\n```\n\n*Listado 4. Opciones del compilador TypeScript habilitadas en un estricto espacio de trabajo angular.*\n\nCuriosamente, esto no agrega las mismas opciones que si simplemente estableciéramos `\"strict\": true` en el objeto `compilerOptions`. Comparemos la opción estricta del workscpace Angular con la opción estricta del compilador TypeScript.\n\nAmbos tienen estas opciones en común:\n\n- `noImplicitAny`\n- `noImplicitThis`\n- `strictlyNullChecks`\n\nLa opción estricta de Angular establece además estas opciones:\n\n- `noImplicitReturns`\n- `noFallthroughCasesInSwitch`\n\nmientras que la opción estricta del compilador TypeScript establece adicionalmente estas opciones:\n\n- `alwaysStrict`\n- `strictlyBindCallApply`\n- `strictlyFunctionTypes`\n- `estrictoPropertyInitialization`\n\nAdemás, la opción de Angular no establece la comprobación del tipo de plantilla en el nuevo modo estricto, lo deja en el modo `'full'` anterior.\n\n### Verificación estricta del tipo de plantilla\n\nHemos tenido la opción de habilitar la verificación del tipo de plantilla desde Angular versión 5 configurando `\"fullTemplateTypeCheck\": true` en el objeto` angularCompilerOptions`.\n\nIvy presenta una estricta comprobación del tipo de plantilla como se ve en el Listado 5. Cuando se establece esta nueva opción del compilador Angular, se ignora el valor de `fullTemplateTypeCheck`.\n\n```typescript\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"strictlyTemplates\": true\n  }\n}\n```\n\n*Listado 5. Habilita la comprobación estricta del tipo de plantilla.*\n\nLa comprobación de tipo de plantilla estricta verifica los tipos de enlaces de propiedades y respeta la opción `stricNullChecks`. También verifica los tipos de referencias de plantilla a directivas y componentes, incluidos los tipos genéricos. También se verifican los tipos de variables de contexto de plantilla, lo cual es excelente para los bucles 'NgFor'. El tipo `$ event` está marcado para enlaces de eventos y animaciones. Incluso el tipo de elementos DOM nativos se verifica con una comprobación estricta del tipo de plantilla.\n\nEstas comprobaciones adicionales pueden conducir a errores y falsos positivos bajo ciertas circunstancias. Por ejemplo, cuando se usan librerías que no están compiladas con `strictNullChecks`. Para abordar esto, la verificación estricta del tipo de plantilla tiene opciones para optar por no participar y ajustar los controles. Por ejemplo, `strictTemplates` es en realidad una atajo de 8 opciones de compilador Angular.\n\n## Herencia de clase de componente y directiva mejorada\n\nLas clases base sin selector ahora son compatibles con directivas y componentes. Algunos metadatos ahora se heredan de componentes base y clases directivas. Esto hace que sea más fácil extender, por ejemplo, las directivas Angular Components y Angular Router.\n\n## Últimas versiones de TypeScript\n\nLas versiones de TypeScript 3.6 y 3.7 son compatibles con la versión angular 9. Las versiones anteriores de TypeScript ya no son compatibles. Consulta la Tabla 1 para comparar la compatibilidad de TypeScript entre todas las versiones Angular.\n\n[ver sin formato](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support -cs-type-script-node-type-script-code-node-code-node-type. csv](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv) alojado con ❤ por [GitHub](https://github.com/)\n\n*Tabla 1. Tabla de compatibilidad de CLI angular, Angular, Node.js y TypeScript.* [*Abrir en una pestaña nueva*](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3)*\n\nTypeScript versión 3.6 presenta estas y otras características:\n\n- Soporte Unicode para identificadores en destinos modernos\n- Experiencia de desarrollador mejorada para promesas\n- Comprobación de tipo más estricto de generadores\n\nTypeScript versión 3.7 presenta estas y otras características que podemos usar con Angular versión 9:\n\n- Operador de encadenamiento opcional (`?.`) similar al operador de navegación segura para plantillas Angular\n- Operador de unión con nulos (`??`)\n- Funciones de afirmación de pruebas (`assert parameterName is typeName` y `asserts parameterName`)\n- `await` de primer nivel\n- Alias ​​de tipo recursivo mejorado\n- Mejora de la experiencia del desarrollador para funciones de comprobaciones\n\n## Generación mejorada del lado del servidor con Angular Universal\n\nAngular Universal versión 9 se lanza con un servidor de desarrollo Node.js Express para proporcionar un entorno realista durante el desarrollo.\n\nTambién parte de este lanzamiento es un constructor del CLI para pre-renderizar rutas estáticas usando `guess-parser`, inspirado en `angular-prerender`. Podemos pasar un archivo de rutas para renderizar rutas dinámicas (rutas con parámetros).\n\n### ¿Cómo empiezo?\n\nPodemos agregar Angular Universal usando el comando `ng add @nguniversal/express-engine`. Luego podemos usar el comando del constructor `ng run myapp:serve-ssr` para iniciar el servidor de desarrollo de renderizado del lado del servidor con recarga en vivo. De manera similar, podemos usar `ng run myapp:prerender` para detectar rutas estáticas y dinámicas y pre renderizarlas.\n\n## Experiencia de clases y estilo mejorada\n\nAl aplicación de estilo en Angular Ivy ha sido reelaborado. La combinación de clases HTML estáticas con las directivas `NgStyle` y` NgClass` es ahora totalmente compatible y más fácil de entender.\n\n### Soporte de propiedades personalizadas de CSS\n\nComo parte de la reescritura del estilo Ivy, ahora se admiten las propiedades personalizadas de CSS enlazadas.\n\nUn ejemplo de enlace css puede ser así:\n\n```html\n    <div [style.--my-var]=\"myProperty || 'any value'\"></div>\n```\n\nLas propiedades personalizadas de CSS tienen control de alcance, por lo que esta propiedad de CSS se limitaría al DOM del componente.\n\n## Lanzamiento estable de Bazel como opción de suscripción\n\nBazel versión 2.1 es una herramienta de automatización de compilación opcional para Angular versión 9.\n\n### ¿Cómo empiezo?\n\nPara habilitar Bazel, usa `ng add @angular/bazel` o la colección de esquemas `@angular/bazel` cuando generes un espacio de trabajo Angular.\n\nAsegúrate de seguir [la guía de instalación de Bazel](https://docs.bazel.build/versions/2.0.0/install.html) para tu sistema operativo.\n\n## Componentes Angular\n\nLa versión Angular 9 viene con componentes oficiales para YouTube y Google Maps. Se agregó una directiva y un servicio de portapapeles al Angular CDK.\n\n## Pruebas\n\nLa mayor sorpresa de la versión Angular versión 9 son las muchas mejoras en las pruebas. Se resuelven problemas de rendimiento, se mejoran los tipos y se introducen nuevos conceptos.\n\n[Obtén información sobre las principales características y mejoras para las pruebas en \"Pruebas de siguiente nivel en Angular Ivy versión 9\"](https://indepth.dev/next-level-testing-in-angular-ivy-version-9/).\n\n## Conclusión\n\nUno de los objetivos más importantes ha sido mantener la compatibilidad hacia atrás entre Ivy y View Engine tanto como fue posible.\n\nPor supuesto, la versión Angular 9 también incluye correcciones de errores, temas obsoletos y cambios importantes. Ivy también aborda algunos problemas de antiguos que no cubrimos en este artículo.\n\nAngular Ivy es un facilitador para las características que están por venir. Como hemos discutido en este artículo, Ivy ya nos ha dado beneficios para diferentes casos de uso. Sin embargo, las mejores características llegarán en futuras versiones de Angular. ¿Cuál de las posibles características que se entregarán en las versiones 10 y 11 de Angular está por decidir?\n\nSolo discutimos qué es parte de las API públicas y estables de Angular versión 9. Algunas API experimentales son parte de esta versión, como `renderComponent`,` markDirty` y `detectChanges`. Sin embargo, todavía están sujetos a cambios.\n\nCon la retirada de las declaraciones de componentes de entrada y los componentes con carga diferida utilizando módulos de representación, estamos un paso más cerca de [componentes que se pueden eliminar del árbol y módulos Angular opcionales](https://indepth.dev/angular-revisited-tree-shakable-components- y-opcional-ngmodules /).\n\n[Los componentes de funcionalidad](https://indepth.dev/component-features-with-angular-ivy/) también forman parte de esta versión, pero solo están expuestos para uso interno de Ivy.\n\nLa versión de Angular Ivy versión 9 nos brinda mejoras para el empaquetamiento, las pruebas, la experiencia del desarrollador, las herramientas, la depuración y la verificación de tipos. Toda una buena colección de características.\n\n## Recursos relacionados\n\n### Componentes con carga lenta\n\n[Información sobre los módulos de presentación en la charla \"Angular revisited: Tree-shakable components and optional NgModules\"](https://youtu.be/DA3efofhpq4).\n\n[Aprende a usar los componentes de carga diferida en \"Lazy load components in Angular\" por Kevin Kreuzer](https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8).\n\n### Comprobación de tipos en plantillas\n\n[Lee la guía oficial sobre la verificación de tipos en plantillas Angular para conocer los detalles de la resolución de problemas y la configuración](https://angular.io/guide/template-typecheck#troubleshooting-template-errors).\n\n### Globalización\n\n[Manfred Steyer analiza las configuraciones regionales de carga diferida en \"Lazy Loading Locales with Angular\"](https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/).\n\n[Cédric Exbrayat analiza la globalización de Ivy en \"Internationalization with @angular/localize\"](https://blog.ninja-squad.com/2019/12/10/angular-localize/).\n\n### Ámbitos adicionales de proveedor de dependencias\n\nObtén información sobre los ámbitos de proveedor de `'any'` y `'platform'` en [“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler](https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb).\n\n### Nueva API de depuración\n[Lee sobre la API de depuración completa en la documentación oficial](https://angular.io/api/core/global).\n\n### Angular Universal versión 9\n\nEstos dos artículos entran en detalles de Angular Universal versión 9:\n\n-   [“Angular Universal v9: What’s New ?” by Mark Pieszak](https://trilon.io/blog/angular-universal-v9-whats-new)\n-   [“Angular v9 & Universal: SSR and prerendering out of the box!” by Sam Vloeberghs](https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1)\n\nAprende sobre `angular-prerender`, la biblioteca que inspiró estas nuevas características de Angular Universal en [“Prerender Angular Apps with a single Command” by Christoph Guttandin](https://media-codings.com/articles/prerender-angular-apps-with-a-single-command).\n\n### Enlace de propiedades personalizadas de CSS\n\n[Mira este tweet y la demostración de Alexey Zuev para ver los enlaces de Propiedades personalizadas de CSS en acción](https://twitter.com/yurzui/status/1221159415820275717).\n\n## Revisores\n\nSiempre es útil tener una segunda opinión sobre nuestro trabajo o incluso detectar errores tontos. Para este artículo tuve el placer de ser revisado por:\n\n-   [Christoph Guttandin](https://twitter.com/chrisguttandin)\n-   [Evgeny Fedorenko](https://indepth.dev/author/evgeny/)\n-   [Santosh Yadav](https://dev.to/santoshyadav198613)\n\nLars Gyrup Brink Nielsen","source":"angular_9-translate.md","raw":"> Ayudita conceptual...\n>> https://www.campusmvp.es/recursos/post/angular-9-ya-esta-aqui-y-estas-son-sus-novedades.aspx\n\n# Un vistazo a las características principales en el lanzamiento de Angular Ivy versión 9\n\n[editor de publicaciones](https://admin.indepth.dev/ghost/#/editor/post/5e2f4cae430b1e0c3681c749)\n\n[Lars Gyrup Brink Nielsen](https://indepth.dev/author/layzee/) 06 de febrero de 2020 9 min de lectura\n\nMUCHO y en todas partes, globalización dinámica, modo estricto, Bazel y mucho más.\n\n* (Sí, ahora se ha lanzado Angular Ivy versión 9) *\n\n## Ivy está habilitado por defecto\n\nEn versiones anteriores de Angular, tuvimos que optar por Ivy. En la versión 9, tenemos que optar por no participar en Ivy si queremos recurrir a View Engine. Esto es posible en ambas versiones 9 y 10 para garantizar una transición más fluida de View Engine a Ivy.\n\nLas librerías *se pueden* compilar AOT, pero no es recomendable. El equipo de Angular tiene un plan de migración de View Engine a Ivy que recomienda publicar solo librerías compatibles con View Engine compiladas con JIT para Angular versión 9. El compilador de compatibilidad Angular actualizará las librerías compatibles con View Engine a Ivy cuando se instalen en una aplicación Angular Ivy.\n\n[Obtén información sobre la compatibilidad de la biblioteca y el plan de transición de View Engine-to-Ivy en \"La guía de Angular Ivy para autores de librerías\"](https://indepth.dev/the-angular-ivy-guide-for-library-authors/) .\n\n```json\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}\n```\n\n```typescript\n// polyfills.ts\n// Solo se usa en aplicaciones multilingües de Ivy\n// import '@angular/localize/init';\n```\n\n*Listado 1. Optar por no usar Ivy para recurrir a View Engine.*\n\nSi tienes problemas con Ivy en tu aplicación, o en cualquiera de las librerías de las que depende, puedes optar por salir de Ivy y recurrir a View Engine. Hazlo desactivando la opción del compilador angular `enableIvy` y deshabilitando` @angular/localize` como se ve en Listado 1.\n\nOptar por evitar Ivy en un entorno de servidor es un poco más complicado. [Sigue la guía oficial para darte de baja de Ivy cuando uses la renderización del lado del servidor](https://angular.io/guide/ivy#using-ssr-without-ivy).\n\n## El principio de localidad\n\nAntes, para compilar un componente en View Engine, Angular necesitaba información sobre todas sus dependencias declaradas. Esto significa que las librerías Angular no se pueden compilar AOT usando View Engine.\n\nAhora para compilar un componente en Ivy, Angular solo necesita información sobre el componente en sí. Pero, Ivy no necesita metadatos de ninguna dependencia declarable para compilar un componente.\n\nEl principio de localidad significa que, en general, veremos tiempos de construcción más rápidos.\n\n### Componentes con carga diferida\n\nLas declaraciones `entryComponents` están en desuso porque ya no son necesarias. Cualquier componente Ivy puede cargarse de forma diferida y renderizarse dinámicamente.\n\nEsto significa que ahora podemos cargar de forma diferida y renderizar un componente sin enrutamiento o módulos Angular. Sin embargo, en la práctica aún tenemos que usar módulos para renderizar componentes o módulos funcionales para vincular la plantilla de un componente a sus dependencias.\n\nLas librerías que solo son utilizadas por un componente con carga diferida se agrupan en fragmentos con carga diferida.\n\n## Mejoras en la carga diferencial\n\nCuando se introdujo la carga diferencial en Angular versión 8, el proceso de compilación se ejecutaba una vez para el paquete ES5 y otra vez para el paquete ES2015+.\n\nEn Angular versión 9, primero se emite un paquete ES2015+. Ese paquete se transfiere a un paquete ES5 separado. De esta manera, no tenemos que pasar por un proceso de compilación completo dos veces.\n\n## Compilación AOT en todas partes\n\nAOT está habilitado de forma predeterminada en las compilaciones, el servidor de desarrollo e incluso en las pruebas. Anteriormente, la compilación AOT era significativamente más lenta que la compilación JIT, por lo que JIT se usaba para el desarrollo y las pruebas. Con las mejoras de tiempo de construcción y reconstrucción en Ivy, la compilación AOT ahora ofrece una gran experiencia al desarrollador.\n\nCuando utilizábamos la compilación JIT en desarrollo y solo la compilación AOT en la compilación final, algunos errores se detectaban solo al hacer compilaciones de producción o, peor aún, en tiempo de ejecución.\n\n## Tamaños de paquete\n\nIvy puede habilitar paquetes más pequeños porque usa el _Ivy Instruction Set_, que es un conjunto de instrucciones de representación de tiempo de ejecución potencialmente **tree-shakable**. Nuestros paquetes solo incluirán las instrucciones de renderizado que realmente usamos en nuestros proyectos.\n\nEsto es ideal para casos de uso como _microfrontends_, Angular Elements y aplicaciones web donde Angular no controla todo el documento.\n\nSin embargo, la diferencia en los tamaños de nuestros paquetes entre View Engine e Ivy variará según el tamaño de nuestra aplicación y las librerías de terceros que utilizamos. En general:\n\n- Las aplicaciones pequeñas y simples verán una disminución considerable del peso del paquete.\n- Las aplicaciones complejas verán un aumento en el fichero principal, pero una disminución en los tamaños de paquetes con carga diferida.\n\nEsto significa una disminución considerable del tamaño de descarga combinada para aplicaciones grandes, pero podría significar un aumento en el peso total para aplicaciones medianas. En ambos casos, el tamaño del paquete principal probablemente aumentará, lo que es malo para el tiempo de carga inicial de la página.\n\n## Globalización\n\nLas configuraciones regionales (formato de número, formato de fecha y otras configuraciones regionales) se pueden cargar dinámicamente en tiempo de ejecución en lugar de tener que registrarse en tiempo de compilación.\n\n```typescript\n// main.ts\nimport '@angular/localize/init';\n\nimport { loadTranslations } from '@angular/localize';\n\nloadTranslations ({\n  '8374172394781134519': '¡Hola, {$nombre de usuario}! Bienvenido a {$appName}. ',\n});\n```\n\n*Listado 2. Carga dinámica de traducciones.*\n\nComo se ve en el Listado 2, los textos traducidos también se pueden cargar dinámicamente en tiempo de ejecución en lugar de ser parte de nuestros paquetes.\n\nLos textos traducidos pueden cargarse desde una base de datos o un archivo.\n\n### Múltiples idiomas desde un único paquete de aplicaciones\n\nPara cambiar el idioma, tenemos que reiniciar la aplicación, pero no tenemos que servir un fichero de aplicaciones diferente.\n\nEsto significa que podemos, con alguna configuración, admitir varios idiomas con un solo paquete de aplicaciones en un solo nombre de host.\n\n### Tiempo de compilación en línea\n\nUna aplicación localizada ahora solo se compilará una vez. En lugar de múltiples compilaciones para producir un paquete por idioma, se produce un paquete por idioma reemplazando los marcadores de posición `$localize` con textos traducidos.\n\nAhora  hay que agregar el paquete `@angular/localize` para posibilitar la localización (varios idiomas). La buena noticia es que ya no tenemos que incluir el código de localización de Angular en nuestros paquetes si solo tenemos un idioma.\n\nSi no usamos plantillas localizadas, las instrucciones de Ivy `i18n *` se sacan del paquete principal.\n\n### Textos localizables en modelos de componentes y servicios\n\n```typescript\n// app.component.ts\n@Component({\n  template: '{{ title }}'\n})\nexport class AppComponent {\n  title = $localize`Welcome to MyApp`;\n}\n```\n\n*Listado 3. Un marcador de posición de texto de traducción en un modelo de componente.*\n\nUna nueva característica de internacionalización es que también podemos incluir marcadores de posición para textos traducidos en el contenido de nuestros modelos como se ve en el Listado 3. Anteriormente, esto solo era posible en las plantillas.\n\n## Ámbitos adicionales de proveedores de dependencias\n\nSiempre hemos tenido alcance de módulo para los proveedores de inyección de servicios. La versión Angular 6 introdujo el alcance `'root'` y los proveedores _tree-shakable_, tanto para los proveedores de alcance desde el módulo raíz como desde módulos inferiores.\n\nLa versión angular 9 presenta los nuevos ámbitos de proveedor `'platform'` y `'any'`. Los proveedores con ámbito de `'platform'` se pueden compartir entre múltiples aplicaciones Angular en el mismo documento. El alcance del proveedor `'any'` compartirá un proveedor por inyector de módulo. Por ejemplo, una instancia de servicio para el paquete principal cargado por adelantado y una instancia de servicio para cada módulo cargado con retraso.\n\n## Experiencia mejorada del desarrollador\n\nIvy permite que _Angular Language Service_ admita comprobaciones adicionales durante el desarrollo. Esta es una gran mejora para la experiencia del desarrollador.\n\n### Comprobaciones de ruta de archivo\n\n_Angular Language Service_ verifica continuamente la hoja de estilo de componentes y las rutas de plantilla.\n\n### Verificaciones de tipo de plantilla\n\nLas plantillas se verifican por tipo, de acuerdo con el modo de verificación de tipo de plantilla como se describe más abajo en la sección \"Modo estricto\". Los nombres y tipos de miembros se verifican, incluso en vistas incrustadas. Lo que anteriormente resultaba en errores de tiempo de ejecución ahora se detecta durante el desarrollo y la construcción.\n\n## Nueva API de depuración en modo de desarrollo\n\n`ng.probe` ha sido reemplazado por una nueva API de depuración en modo de desarrollo. Las funciones más notables son `ng.applyChanges` y` ng.getComponent`.\n\n## Modo estricto\n\n### Esquema estricto del espacio de trabajo\n\nEl comando `ng new` ahora es compatible con el indicador` --strict` que por defecto está desactivado (`false`).\n\n```bash\nng new my-app --strict\n```\n\nCuando está habilitado, este parámetro agrega algunas comprobaciones estrictas del compilador TypeScript como se ve en el Listado 4.\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"strictlyNullChecks\": true\n  }\n}\n```\n\n*Listado 4. Opciones del compilador TypeScript habilitadas en un estricto espacio de trabajo angular.*\n\nCuriosamente, esto no agrega las mismas opciones que si simplemente estableciéramos `\"strict\": true` en el objeto `compilerOptions`. Comparemos la opción estricta del workscpace Angular con la opción estricta del compilador TypeScript.\n\nAmbos tienen estas opciones en común:\n\n- `noImplicitAny`\n- `noImplicitThis`\n- `strictlyNullChecks`\n\nLa opción estricta de Angular establece además estas opciones:\n\n- `noImplicitReturns`\n- `noFallthroughCasesInSwitch`\n\nmientras que la opción estricta del compilador TypeScript establece adicionalmente estas opciones:\n\n- `alwaysStrict`\n- `strictlyBindCallApply`\n- `strictlyFunctionTypes`\n- `estrictoPropertyInitialization`\n\nAdemás, la opción de Angular no establece la comprobación del tipo de plantilla en el nuevo modo estricto, lo deja en el modo `'full'` anterior.\n\n### Verificación estricta del tipo de plantilla\n\nHemos tenido la opción de habilitar la verificación del tipo de plantilla desde Angular versión 5 configurando `\"fullTemplateTypeCheck\": true` en el objeto` angularCompilerOptions`.\n\nIvy presenta una estricta comprobación del tipo de plantilla como se ve en el Listado 5. Cuando se establece esta nueva opción del compilador Angular, se ignora el valor de `fullTemplateTypeCheck`.\n\n```typescript\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"strictlyTemplates\": true\n  }\n}\n```\n\n*Listado 5. Habilita la comprobación estricta del tipo de plantilla.*\n\nLa comprobación de tipo de plantilla estricta verifica los tipos de enlaces de propiedades y respeta la opción `stricNullChecks`. También verifica los tipos de referencias de plantilla a directivas y componentes, incluidos los tipos genéricos. También se verifican los tipos de variables de contexto de plantilla, lo cual es excelente para los bucles 'NgFor'. El tipo `$ event` está marcado para enlaces de eventos y animaciones. Incluso el tipo de elementos DOM nativos se verifica con una comprobación estricta del tipo de plantilla.\n\nEstas comprobaciones adicionales pueden conducir a errores y falsos positivos bajo ciertas circunstancias. Por ejemplo, cuando se usan librerías que no están compiladas con `strictNullChecks`. Para abordar esto, la verificación estricta del tipo de plantilla tiene opciones para optar por no participar y ajustar los controles. Por ejemplo, `strictTemplates` es en realidad una atajo de 8 opciones de compilador Angular.\n\n## Herencia de clase de componente y directiva mejorada\n\nLas clases base sin selector ahora son compatibles con directivas y componentes. Algunos metadatos ahora se heredan de componentes base y clases directivas. Esto hace que sea más fácil extender, por ejemplo, las directivas Angular Components y Angular Router.\n\n## Últimas versiones de TypeScript\n\nLas versiones de TypeScript 3.6 y 3.7 son compatibles con la versión angular 9. Las versiones anteriores de TypeScript ya no son compatibles. Consulta la Tabla 1 para comparar la compatibilidad de TypeScript entre todas las versiones Angular.\n\n[ver sin formato](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support -cs-type-script-node-type-script-code-node-code-node-type. csv](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv) alojado con ❤ por [GitHub](https://github.com/)\n\n*Tabla 1. Tabla de compatibilidad de CLI angular, Angular, Node.js y TypeScript.* [*Abrir en una pestaña nueva*](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3)*\n\nTypeScript versión 3.6 presenta estas y otras características:\n\n- Soporte Unicode para identificadores en destinos modernos\n- Experiencia de desarrollador mejorada para promesas\n- Comprobación de tipo más estricto de generadores\n\nTypeScript versión 3.7 presenta estas y otras características que podemos usar con Angular versión 9:\n\n- Operador de encadenamiento opcional (`?.`) similar al operador de navegación segura para plantillas Angular\n- Operador de unión con nulos (`??`)\n- Funciones de afirmación de pruebas (`assert parameterName is typeName` y `asserts parameterName`)\n- `await` de primer nivel\n- Alias ​​de tipo recursivo mejorado\n- Mejora de la experiencia del desarrollador para funciones de comprobaciones\n\n## Generación mejorada del lado del servidor con Angular Universal\n\nAngular Universal versión 9 se lanza con un servidor de desarrollo Node.js Express para proporcionar un entorno realista durante el desarrollo.\n\nTambién parte de este lanzamiento es un constructor del CLI para pre-renderizar rutas estáticas usando `guess-parser`, inspirado en `angular-prerender`. Podemos pasar un archivo de rutas para renderizar rutas dinámicas (rutas con parámetros).\n\n### ¿Cómo empiezo?\n\nPodemos agregar Angular Universal usando el comando `ng add @nguniversal/express-engine`. Luego podemos usar el comando del constructor `ng run myapp:serve-ssr` para iniciar el servidor de desarrollo de renderizado del lado del servidor con recarga en vivo. De manera similar, podemos usar `ng run myapp:prerender` para detectar rutas estáticas y dinámicas y pre renderizarlas.\n\n## Experiencia de clases y estilo mejorada\n\nAl aplicación de estilo en Angular Ivy ha sido reelaborado. La combinación de clases HTML estáticas con las directivas `NgStyle` y` NgClass` es ahora totalmente compatible y más fácil de entender.\n\n### Soporte de propiedades personalizadas de CSS\n\nComo parte de la reescritura del estilo Ivy, ahora se admiten las propiedades personalizadas de CSS enlazadas.\n\nUn ejemplo de enlace css puede ser así:\n\n```html\n    <div [style.--my-var]=\"myProperty || 'any value'\"></div>\n```\n\nLas propiedades personalizadas de CSS tienen control de alcance, por lo que esta propiedad de CSS se limitaría al DOM del componente.\n\n## Lanzamiento estable de Bazel como opción de suscripción\n\nBazel versión 2.1 es una herramienta de automatización de compilación opcional para Angular versión 9.\n\n### ¿Cómo empiezo?\n\nPara habilitar Bazel, usa `ng add @angular/bazel` o la colección de esquemas `@angular/bazel` cuando generes un espacio de trabajo Angular.\n\nAsegúrate de seguir [la guía de instalación de Bazel](https://docs.bazel.build/versions/2.0.0/install.html) para tu sistema operativo.\n\n## Componentes Angular\n\nLa versión Angular 9 viene con componentes oficiales para YouTube y Google Maps. Se agregó una directiva y un servicio de portapapeles al Angular CDK.\n\n## Pruebas\n\nLa mayor sorpresa de la versión Angular versión 9 son las muchas mejoras en las pruebas. Se resuelven problemas de rendimiento, se mejoran los tipos y se introducen nuevos conceptos.\n\n[Obtén información sobre las principales características y mejoras para las pruebas en \"Pruebas de siguiente nivel en Angular Ivy versión 9\"](https://indepth.dev/next-level-testing-in-angular-ivy-version-9/).\n\n## Conclusión\n\nUno de los objetivos más importantes ha sido mantener la compatibilidad hacia atrás entre Ivy y View Engine tanto como fue posible.\n\nPor supuesto, la versión Angular 9 también incluye correcciones de errores, temas obsoletos y cambios importantes. Ivy también aborda algunos problemas de antiguos que no cubrimos en este artículo.\n\nAngular Ivy es un facilitador para las características que están por venir. Como hemos discutido en este artículo, Ivy ya nos ha dado beneficios para diferentes casos de uso. Sin embargo, las mejores características llegarán en futuras versiones de Angular. ¿Cuál de las posibles características que se entregarán en las versiones 10 y 11 de Angular está por decidir?\n\nSolo discutimos qué es parte de las API públicas y estables de Angular versión 9. Algunas API experimentales son parte de esta versión, como `renderComponent`,` markDirty` y `detectChanges`. Sin embargo, todavía están sujetos a cambios.\n\nCon la retirada de las declaraciones de componentes de entrada y los componentes con carga diferida utilizando módulos de representación, estamos un paso más cerca de [componentes que se pueden eliminar del árbol y módulos Angular opcionales](https://indepth.dev/angular-revisited-tree-shakable-components- y-opcional-ngmodules /).\n\n[Los componentes de funcionalidad](https://indepth.dev/component-features-with-angular-ivy/) también forman parte de esta versión, pero solo están expuestos para uso interno de Ivy.\n\nLa versión de Angular Ivy versión 9 nos brinda mejoras para el empaquetamiento, las pruebas, la experiencia del desarrollador, las herramientas, la depuración y la verificación de tipos. Toda una buena colección de características.\n\n## Recursos relacionados\n\n### Componentes con carga lenta\n\n[Información sobre los módulos de presentación en la charla \"Angular revisited: Tree-shakable components and optional NgModules\"](https://youtu.be/DA3efofhpq4).\n\n[Aprende a usar los componentes de carga diferida en \"Lazy load components in Angular\" por Kevin Kreuzer](https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8).\n\n### Comprobación de tipos en plantillas\n\n[Lee la guía oficial sobre la verificación de tipos en plantillas Angular para conocer los detalles de la resolución de problemas y la configuración](https://angular.io/guide/template-typecheck#troubleshooting-template-errors).\n\n### Globalización\n\n[Manfred Steyer analiza las configuraciones regionales de carga diferida en \"Lazy Loading Locales with Angular\"](https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/).\n\n[Cédric Exbrayat analiza la globalización de Ivy en \"Internationalization with @angular/localize\"](https://blog.ninja-squad.com/2019/12/10/angular-localize/).\n\n### Ámbitos adicionales de proveedor de dependencias\n\nObtén información sobre los ámbitos de proveedor de `'any'` y `'platform'` en [“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler](https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb).\n\n### Nueva API de depuración\n[Lee sobre la API de depuración completa en la documentación oficial](https://angular.io/api/core/global).\n\n### Angular Universal versión 9\n\nEstos dos artículos entran en detalles de Angular Universal versión 9:\n\n-   [“Angular Universal v9: What’s New ?” by Mark Pieszak](https://trilon.io/blog/angular-universal-v9-whats-new)\n-   [“Angular v9 & Universal: SSR and prerendering out of the box!” by Sam Vloeberghs](https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1)\n\nAprende sobre `angular-prerender`, la biblioteca que inspiró estas nuevas características de Angular Universal en [“Prerender Angular Apps with a single Command” by Christoph Guttandin](https://media-codings.com/articles/prerender-angular-apps-with-a-single-command).\n\n### Enlace de propiedades personalizadas de CSS\n\n[Mira este tweet y la demostración de Alexey Zuev para ver los enlaces de Propiedades personalizadas de CSS en acción](https://twitter.com/yurzui/status/1221159415820275717).\n\n## Revisores\n\nSiempre es útil tener una segunda opinión sobre nuestro trabajo o incluso detectar errores tontos. Para este artículo tuve el placer de ser revisado por:\n\n-   [Christoph Guttandin](https://twitter.com/chrisguttandin)\n-   [Evgeny Fedorenko](https://indepth.dev/author/evgeny/)\n-   [Santosh Yadav](https://dev.to/santoshyadav198613)\n\nLars Gyrup Brink Nielsen","date":"2023-07-02T10:25:58.482Z","updated":"2023-07-02T10:25:58.482Z","path":"angular_9-translate.html","title":"","comments":1,"layout":"page","_id":"cljlaq2f7000ee096gry1hz47","content":"<blockquote>\n<p>Ayudita conceptual…</p>\n<blockquote>\n<p><a href=\"https://www.campusmvp.es/recursos/post/angular-9-ya-esta-aqui-y-estas-son-sus-novedades.aspx\">https://www.campusmvp.es/recursos/post/angular-9-ya-esta-aqui-y-estas-son-sus-novedades.aspx</a></p>\n</blockquote>\n</blockquote>\n<h1 id=\"Un-vistazo-a-las-caracteristicas-principales-en-el-lanzamiento-de-Angular-Ivy-version-9\"><a href=\"#Un-vistazo-a-las-caracteristicas-principales-en-el-lanzamiento-de-Angular-Ivy-version-9\" class=\"headerlink\" title=\"Un vistazo a las características principales en el lanzamiento de Angular Ivy versión 9\"></a>Un vistazo a las características principales en el lanzamiento de Angular Ivy versión 9</h1><p><a href=\"https://admin.indepth.dev/ghost/#/editor/post/5e2f4cae430b1e0c3681c749\">editor de publicaciones</a></p>\n<p><a href=\"https://indepth.dev/author/layzee/\">Lars Gyrup Brink Nielsen</a> 06 de febrero de 2020 9 min de lectura</p>\n<p>MUCHO y en todas partes, globalización dinámica, modo estricto, Bazel y mucho más.</p>\n<ul>\n<li>(Sí, ahora se ha lanzado Angular Ivy versión 9) *</li>\n</ul>\n<h2 id=\"Ivy-esta-habilitado-por-defecto\"><a href=\"#Ivy-esta-habilitado-por-defecto\" class=\"headerlink\" title=\"Ivy está habilitado por defecto\"></a>Ivy está habilitado por defecto</h2><p>En versiones anteriores de Angular, tuvimos que optar por Ivy. En la versión 9, tenemos que optar por no participar en Ivy si queremos recurrir a View Engine. Esto es posible en ambas versiones 9 y 10 para garantizar una transición más fluida de View Engine a Ivy.</p>\n<p>Las librerías <em>se pueden</em> compilar AOT, pero no es recomendable. El equipo de Angular tiene un plan de migración de View Engine a Ivy que recomienda publicar solo librerías compatibles con View Engine compiladas con JIT para Angular versión 9. El compilador de compatibilidad Angular actualizará las librerías compatibles con View Engine a Ivy cuando se instalen en una aplicación Angular Ivy.</p>\n<p><a href=\"https://indepth.dev/the-angular-ivy-guide-for-library-authors/\">Obtén información sobre la compatibilidad de la biblioteca y el plan de transición de View Engine-to-Ivy en “La guía de Angular Ivy para autores de librerías”</a> .</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;angularCompilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;enableIvy&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// polyfills.ts</span></span><br><span class=\"line\"><span class=\"comment\">// Solo se usa en aplicaciones multilingües de Ivy</span></span><br><span class=\"line\"><span class=\"comment\">// import &#x27;@angular/localize/init&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 1. Optar por no usar Ivy para recurrir a View Engine.</em></p>\n<p>Si tienes problemas con Ivy en tu aplicación, o en cualquiera de las librerías de las que depende, puedes optar por salir de Ivy y recurrir a View Engine. Hazlo desactivando la opción del compilador angular <code>enableIvy</code> y deshabilitando<code> @angular/localize</code> como se ve en Listado 1.</p>\n<p>Optar por evitar Ivy en un entorno de servidor es un poco más complicado. <a href=\"https://angular.io/guide/ivy#using-ssr-without-ivy\">Sigue la guía oficial para darte de baja de Ivy cuando uses la renderización del lado del servidor</a>.</p>\n<h2 id=\"El-principio-de-localidad\"><a href=\"#El-principio-de-localidad\" class=\"headerlink\" title=\"El principio de localidad\"></a>El principio de localidad</h2><p>Antes, para compilar un componente en View Engine, Angular necesitaba información sobre todas sus dependencias declaradas. Esto significa que las librerías Angular no se pueden compilar AOT usando View Engine.</p>\n<p>Ahora para compilar un componente en Ivy, Angular solo necesita información sobre el componente en sí. Pero, Ivy no necesita metadatos de ninguna dependencia declarable para compilar un componente.</p>\n<p>El principio de localidad significa que, en general, veremos tiempos de construcción más rápidos.</p>\n<h3 id=\"Componentes-con-carga-diferida\"><a href=\"#Componentes-con-carga-diferida\" class=\"headerlink\" title=\"Componentes con carga diferida\"></a>Componentes con carga diferida</h3><p>Las declaraciones <code>entryComponents</code> están en desuso porque ya no son necesarias. Cualquier componente Ivy puede cargarse de forma diferida y renderizarse dinámicamente.</p>\n<p>Esto significa que ahora podemos cargar de forma diferida y renderizar un componente sin enrutamiento o módulos Angular. Sin embargo, en la práctica aún tenemos que usar módulos para renderizar componentes o módulos funcionales para vincular la plantilla de un componente a sus dependencias.</p>\n<p>Las librerías que solo son utilizadas por un componente con carga diferida se agrupan en fragmentos con carga diferida.</p>\n<h2 id=\"Mejoras-en-la-carga-diferencial\"><a href=\"#Mejoras-en-la-carga-diferencial\" class=\"headerlink\" title=\"Mejoras en la carga diferencial\"></a>Mejoras en la carga diferencial</h2><p>Cuando se introdujo la carga diferencial en Angular versión 8, el proceso de compilación se ejecutaba una vez para el paquete ES5 y otra vez para el paquete ES2015+.</p>\n<p>En Angular versión 9, primero se emite un paquete ES2015+. Ese paquete se transfiere a un paquete ES5 separado. De esta manera, no tenemos que pasar por un proceso de compilación completo dos veces.</p>\n<h2 id=\"Compilacion-AOT-en-todas-partes\"><a href=\"#Compilacion-AOT-en-todas-partes\" class=\"headerlink\" title=\"Compilación AOT en todas partes\"></a>Compilación AOT en todas partes</h2><p>AOT está habilitado de forma predeterminada en las compilaciones, el servidor de desarrollo e incluso en las pruebas. Anteriormente, la compilación AOT era significativamente más lenta que la compilación JIT, por lo que JIT se usaba para el desarrollo y las pruebas. Con las mejoras de tiempo de construcción y reconstrucción en Ivy, la compilación AOT ahora ofrece una gran experiencia al desarrollador.</p>\n<p>Cuando utilizábamos la compilación JIT en desarrollo y solo la compilación AOT en la compilación final, algunos errores se detectaban solo al hacer compilaciones de producción o, peor aún, en tiempo de ejecución.</p>\n<h2 id=\"Tamanos-de-paquete\"><a href=\"#Tamanos-de-paquete\" class=\"headerlink\" title=\"Tamaños de paquete\"></a>Tamaños de paquete</h2><p>Ivy puede habilitar paquetes más pequeños porque usa el <em>Ivy Instruction Set</em>, que es un conjunto de instrucciones de representación de tiempo de ejecución potencialmente <strong>tree-shakable</strong>. Nuestros paquetes solo incluirán las instrucciones de renderizado que realmente usamos en nuestros proyectos.</p>\n<p>Esto es ideal para casos de uso como <em>microfrontends</em>, Angular Elements y aplicaciones web donde Angular no controla todo el documento.</p>\n<p>Sin embargo, la diferencia en los tamaños de nuestros paquetes entre View Engine e Ivy variará según el tamaño de nuestra aplicación y las librerías de terceros que utilizamos. En general:</p>\n<ul>\n<li>Las aplicaciones pequeñas y simples verán una disminución considerable del peso del paquete.</li>\n<li>Las aplicaciones complejas verán un aumento en el fichero principal, pero una disminución en los tamaños de paquetes con carga diferida.</li>\n</ul>\n<p>Esto significa una disminución considerable del tamaño de descarga combinada para aplicaciones grandes, pero podría significar un aumento en el peso total para aplicaciones medianas. En ambos casos, el tamaño del paquete principal probablemente aumentará, lo que es malo para el tiempo de carga inicial de la página.</p>\n<h2 id=\"Globalizacion\"><a href=\"#Globalizacion\" class=\"headerlink\" title=\"Globalización\"></a>Globalización</h2><p>Las configuraciones regionales (formato de número, formato de fecha y otras configuraciones regionales) se pueden cargar dinámicamente en tiempo de ejecución en lugar de tener que registrarse en tiempo de compilación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@angular/localize/init&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; loadTranslations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/localize&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">loadTranslations (&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;8374172394781134519&#x27;</span>: <span class=\"string\">&#x27;¡Hola, &#123;$nombre de usuario&#125;! Bienvenido a &#123;$appName&#125;. &#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 2. Carga dinámica de traducciones.</em></p>\n<p>Como se ve en el Listado 2, los textos traducidos también se pueden cargar dinámicamente en tiempo de ejecución en lugar de ser parte de nuestros paquetes.</p>\n<p>Los textos traducidos pueden cargarse desde una base de datos o un archivo.</p>\n<h3 id=\"Multiples-idiomas-desde-un-unico-paquete-de-aplicaciones\"><a href=\"#Multiples-idiomas-desde-un-unico-paquete-de-aplicaciones\" class=\"headerlink\" title=\"Múltiples idiomas desde un único paquete de aplicaciones\"></a>Múltiples idiomas desde un único paquete de aplicaciones</h3><p>Para cambiar el idioma, tenemos que reiniciar la aplicación, pero no tenemos que servir un fichero de aplicaciones diferente.</p>\n<p>Esto significa que podemos, con alguna configuración, admitir varios idiomas con un solo paquete de aplicaciones en un solo nombre de host.</p>\n<h3 id=\"Tiempo-de-compilacion-en-linea\"><a href=\"#Tiempo-de-compilacion-en-linea\" class=\"headerlink\" title=\"Tiempo de compilación en línea\"></a>Tiempo de compilación en línea</h3><p>Una aplicación localizada ahora solo se compilará una vez. En lugar de múltiples compilaciones para producir un paquete por idioma, se produce un paquete por idioma reemplazando los marcadores de posición <code>$localize</code> con textos traducidos.</p>\n<p>Ahora  hay que agregar el paquete <code>@angular/localize</code> para posibilitar la localización (varios idiomas). La buena noticia es que ya no tenemos que incluir el código de localización de Angular en nuestros paquetes si solo tenemos un idioma.</p>\n<p>Si no usamos plantillas localizadas, las instrucciones de Ivy <code>i18n *</code> se sacan del paquete principal.</p>\n<h3 id=\"Textos-localizables-en-modelos-de-componentes-y-servicios\"><a href=\"#Textos-localizables-en-modelos-de-componentes-y-servicios\" class=\"headerlink\" title=\"Textos localizables en modelos de componentes y servicios\"></a>Textos localizables en modelos de componentes y servicios</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&#123;&#123; title &#125;&#125;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  title = $localize<span class=\"string\">`Welcome to MyApp`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 3. Un marcador de posición de texto de traducción en un modelo de componente.</em></p>\n<p>Una nueva característica de internacionalización es que también podemos incluir marcadores de posición para textos traducidos en el contenido de nuestros modelos como se ve en el Listado 3. Anteriormente, esto solo era posible en las plantillas.</p>\n<h2 id=\"Ambitos-adicionales-de-proveedores-de-dependencias\"><a href=\"#Ambitos-adicionales-de-proveedores-de-dependencias\" class=\"headerlink\" title=\"Ámbitos adicionales de proveedores de dependencias\"></a>Ámbitos adicionales de proveedores de dependencias</h2><p>Siempre hemos tenido alcance de módulo para los proveedores de inyección de servicios. La versión Angular 6 introdujo el alcance <code>&#39;root&#39;</code> y los proveedores <em>tree-shakable</em>, tanto para los proveedores de alcance desde el módulo raíz como desde módulos inferiores.</p>\n<p>La versión angular 9 presenta los nuevos ámbitos de proveedor <code>&#39;platform&#39;</code> y <code>&#39;any&#39;</code>. Los proveedores con ámbito de <code>&#39;platform&#39;</code> se pueden compartir entre múltiples aplicaciones Angular en el mismo documento. El alcance del proveedor <code>&#39;any&#39;</code> compartirá un proveedor por inyector de módulo. Por ejemplo, una instancia de servicio para el paquete principal cargado por adelantado y una instancia de servicio para cada módulo cargado con retraso.</p>\n<h2 id=\"Experiencia-mejorada-del-desarrollador\"><a href=\"#Experiencia-mejorada-del-desarrollador\" class=\"headerlink\" title=\"Experiencia mejorada del desarrollador\"></a>Experiencia mejorada del desarrollador</h2><p>Ivy permite que <em>Angular Language Service</em> admita comprobaciones adicionales durante el desarrollo. Esta es una gran mejora para la experiencia del desarrollador.</p>\n<h3 id=\"Comprobaciones-de-ruta-de-archivo\"><a href=\"#Comprobaciones-de-ruta-de-archivo\" class=\"headerlink\" title=\"Comprobaciones de ruta de archivo\"></a>Comprobaciones de ruta de archivo</h3><p><em>Angular Language Service</em> verifica continuamente la hoja de estilo de componentes y las rutas de plantilla.</p>\n<h3 id=\"Verificaciones-de-tipo-de-plantilla\"><a href=\"#Verificaciones-de-tipo-de-plantilla\" class=\"headerlink\" title=\"Verificaciones de tipo de plantilla\"></a>Verificaciones de tipo de plantilla</h3><p>Las plantillas se verifican por tipo, de acuerdo con el modo de verificación de tipo de plantilla como se describe más abajo en la sección “Modo estricto”. Los nombres y tipos de miembros se verifican, incluso en vistas incrustadas. Lo que anteriormente resultaba en errores de tiempo de ejecución ahora se detecta durante el desarrollo y la construcción.</p>\n<h2 id=\"Nueva-API-de-depuracion-en-modo-de-desarrollo\"><a href=\"#Nueva-API-de-depuracion-en-modo-de-desarrollo\" class=\"headerlink\" title=\"Nueva API de depuración en modo de desarrollo\"></a>Nueva API de depuración en modo de desarrollo</h2><p><code>ng.probe</code> ha sido reemplazado por una nueva API de depuración en modo de desarrollo. Las funciones más notables son <code>ng.applyChanges</code> y<code> ng.getComponent</code>.</p>\n<h2 id=\"Modo-estricto\"><a href=\"#Modo-estricto\" class=\"headerlink\" title=\"Modo estricto\"></a>Modo estricto</h2><h3 id=\"Esquema-estricto-del-espacio-de-trabajo\"><a href=\"#Esquema-estricto-del-espacio-de-trabajo\" class=\"headerlink\" title=\"Esquema estricto del espacio de trabajo\"></a>Esquema estricto del espacio de trabajo</h3><p>El comando <code>ng new</code> ahora es compatible con el indicador<code> --strict</code> que por defecto está desactivado (<code>false</code>).</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new my-app --strict</span><br></pre></td></tr></table></figure>\n\n<p>Cuando está habilitado, este parámetro agrega algunas comprobaciones estrictas del compilador TypeScript como se ve en el Listado 4.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitReturns&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitThis&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noFallthroughCasesInSwitch&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strictlyNullChecks&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 4. Opciones del compilador TypeScript habilitadas en un estricto espacio de trabajo angular.</em></p>\n<p>Curiosamente, esto no agrega las mismas opciones que si simplemente estableciéramos <code>&quot;strict&quot;: true</code> en el objeto <code>compilerOptions</code>. Comparemos la opción estricta del workscpace Angular con la opción estricta del compilador TypeScript.</p>\n<p>Ambos tienen estas opciones en común:</p>\n<ul>\n<li><code>noImplicitAny</code></li>\n<li><code>noImplicitThis</code></li>\n<li><code>strictlyNullChecks</code></li>\n</ul>\n<p>La opción estricta de Angular establece además estas opciones:</p>\n<ul>\n<li><code>noImplicitReturns</code></li>\n<li><code>noFallthroughCasesInSwitch</code></li>\n</ul>\n<p>mientras que la opción estricta del compilador TypeScript establece adicionalmente estas opciones:</p>\n<ul>\n<li><code>alwaysStrict</code></li>\n<li><code>strictlyBindCallApply</code></li>\n<li><code>strictlyFunctionTypes</code></li>\n<li><code>estrictoPropertyInitialization</code></li>\n</ul>\n<p>Además, la opción de Angular no establece la comprobación del tipo de plantilla en el nuevo modo estricto, lo deja en el modo <code>&#39;full&#39;</code> anterior.</p>\n<h3 id=\"Verificacion-estricta-del-tipo-de-plantilla\"><a href=\"#Verificacion-estricta-del-tipo-de-plantilla\" class=\"headerlink\" title=\"Verificación estricta del tipo de plantilla\"></a>Verificación estricta del tipo de plantilla</h3><p>Hemos tenido la opción de habilitar la verificación del tipo de plantilla desde Angular versión 5 configurando <code>&quot;fullTemplateTypeCheck&quot;: true</code> en el objeto<code> angularCompilerOptions</code>.</p>\n<p>Ivy presenta una estricta comprobación del tipo de plantilla como se ve en el Listado 5. Cuando se establece esta nueva opción del compilador Angular, se ignora el valor de <code>fullTemplateTypeCheck</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;angularCompilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;strictlyTemplates&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 5. Habilita la comprobación estricta del tipo de plantilla.</em></p>\n<p>La comprobación de tipo de plantilla estricta verifica los tipos de enlaces de propiedades y respeta la opción <code>stricNullChecks</code>. También verifica los tipos de referencias de plantilla a directivas y componentes, incluidos los tipos genéricos. También se verifican los tipos de variables de contexto de plantilla, lo cual es excelente para los bucles ‘NgFor’. El tipo <code>$ event</code> está marcado para enlaces de eventos y animaciones. Incluso el tipo de elementos DOM nativos se verifica con una comprobación estricta del tipo de plantilla.</p>\n<p>Estas comprobaciones adicionales pueden conducir a errores y falsos positivos bajo ciertas circunstancias. Por ejemplo, cuando se usan librerías que no están compiladas con <code>strictNullChecks</code>. Para abordar esto, la verificación estricta del tipo de plantilla tiene opciones para optar por no participar y ajustar los controles. Por ejemplo, <code>strictTemplates</code> es en realidad una atajo de 8 opciones de compilador Angular.</p>\n<h2 id=\"Herencia-de-clase-de-componente-y-directiva-mejorada\"><a href=\"#Herencia-de-clase-de-componente-y-directiva-mejorada\" class=\"headerlink\" title=\"Herencia de clase de componente y directiva mejorada\"></a>Herencia de clase de componente y directiva mejorada</h2><p>Las clases base sin selector ahora son compatibles con directivas y componentes. Algunos metadatos ahora se heredan de componentes base y clases directivas. Esto hace que sea más fácil extender, por ejemplo, las directivas Angular Components y Angular Router.</p>\n<h2 id=\"Ultimas-versiones-de-TypeScript\"><a href=\"#Ultimas-versiones-de-TypeScript\" class=\"headerlink\" title=\"Últimas versiones de TypeScript\"></a>Últimas versiones de TypeScript</h2><p>Las versiones de TypeScript 3.6 y 3.7 son compatibles con la versión angular 9. Las versiones anteriores de TypeScript ya no son compatibles. Consulta la Tabla 1 para comparar la compatibilidad de TypeScript entre todas las versiones Angular.</p>\n<p>[ver sin formato](<a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support\">https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support</a> -cs-type-script-node-type-script-code-node-code-node-type. csv](<a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv\">https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv</a>) alojado con ❤ por <a href=\"https://github.com/\">GitHub</a></p>\n<p><em>Tabla 1. Tabla de compatibilidad de CLI angular, Angular, Node.js y TypeScript.</em> <a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3\"><em>Abrir en una pestaña nueva</em></a>*</p>\n<p>TypeScript versión 3.6 presenta estas y otras características:</p>\n<ul>\n<li>Soporte Unicode para identificadores en destinos modernos</li>\n<li>Experiencia de desarrollador mejorada para promesas</li>\n<li>Comprobación de tipo más estricto de generadores</li>\n</ul>\n<p>TypeScript versión 3.7 presenta estas y otras características que podemos usar con Angular versión 9:</p>\n<ul>\n<li>Operador de encadenamiento opcional (<code>?.</code>) similar al operador de navegación segura para plantillas Angular</li>\n<li>Operador de unión con nulos (<code>??</code>)</li>\n<li>Funciones de afirmación de pruebas (<code>assert parameterName is typeName</code> y <code>asserts parameterName</code>)</li>\n<li><code>await</code> de primer nivel</li>\n<li>Alias ​​de tipo recursivo mejorado</li>\n<li>Mejora de la experiencia del desarrollador para funciones de comprobaciones</li>\n</ul>\n<h2 id=\"Generacion-mejorada-del-lado-del-servidor-con-Angular-Universal\"><a href=\"#Generacion-mejorada-del-lado-del-servidor-con-Angular-Universal\" class=\"headerlink\" title=\"Generación mejorada del lado del servidor con Angular Universal\"></a>Generación mejorada del lado del servidor con Angular Universal</h2><p>Angular Universal versión 9 se lanza con un servidor de desarrollo Node.js Express para proporcionar un entorno realista durante el desarrollo.</p>\n<p>También parte de este lanzamiento es un constructor del CLI para pre-renderizar rutas estáticas usando <code>guess-parser</code>, inspirado en <code>angular-prerender</code>. Podemos pasar un archivo de rutas para renderizar rutas dinámicas (rutas con parámetros).</p>\n<h3 id=\"¿Como-empiezo\"><a href=\"#¿Como-empiezo\" class=\"headerlink\" title=\"¿Cómo empiezo?\"></a>¿Cómo empiezo?</h3><p>Podemos agregar Angular Universal usando el comando <code>ng add @nguniversal/express-engine</code>. Luego podemos usar el comando del constructor <code>ng run myapp:serve-ssr</code> para iniciar el servidor de desarrollo de renderizado del lado del servidor con recarga en vivo. De manera similar, podemos usar <code>ng run myapp:prerender</code> para detectar rutas estáticas y dinámicas y pre renderizarlas.</p>\n<h2 id=\"Experiencia-de-clases-y-estilo-mejorada\"><a href=\"#Experiencia-de-clases-y-estilo-mejorada\" class=\"headerlink\" title=\"Experiencia de clases y estilo mejorada\"></a>Experiencia de clases y estilo mejorada</h2><p>Al aplicación de estilo en Angular Ivy ha sido reelaborado. La combinación de clases HTML estáticas con las directivas <code>NgStyle</code> y<code> NgClass</code> es ahora totalmente compatible y más fácil de entender.</p>\n<h3 id=\"Soporte-de-propiedades-personalizadas-de-CSS\"><a href=\"#Soporte-de-propiedades-personalizadas-de-CSS\" class=\"headerlink\" title=\"Soporte de propiedades personalizadas de CSS\"></a>Soporte de propiedades personalizadas de CSS</h3><p>Como parte de la reescritura del estilo Ivy, ahora se admiten las propiedades personalizadas de CSS enlazadas.</p>\n<p>Un ejemplo de enlace css puede ser así:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.--my-var</span>]=<span class=\"string\">&quot;myProperty || &#x27;any value&#x27;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Las propiedades personalizadas de CSS tienen control de alcance, por lo que esta propiedad de CSS se limitaría al DOM del componente.</p>\n<h2 id=\"Lanzamiento-estable-de-Bazel-como-opcion-de-suscripcion\"><a href=\"#Lanzamiento-estable-de-Bazel-como-opcion-de-suscripcion\" class=\"headerlink\" title=\"Lanzamiento estable de Bazel como opción de suscripción\"></a>Lanzamiento estable de Bazel como opción de suscripción</h2><p>Bazel versión 2.1 es una herramienta de automatización de compilación opcional para Angular versión 9.</p>\n<h3 id=\"¿Como-empiezo-1\"><a href=\"#¿Como-empiezo-1\" class=\"headerlink\" title=\"¿Cómo empiezo?\"></a>¿Cómo empiezo?</h3><p>Para habilitar Bazel, usa <code>ng add @angular/bazel</code> o la colección de esquemas <code>@angular/bazel</code> cuando generes un espacio de trabajo Angular.</p>\n<p>Asegúrate de seguir <a href=\"https://docs.bazel.build/versions/2.0.0/install.html\">la guía de instalación de Bazel</a> para tu sistema operativo.</p>\n<h2 id=\"Componentes-Angular\"><a href=\"#Componentes-Angular\" class=\"headerlink\" title=\"Componentes Angular\"></a>Componentes Angular</h2><p>La versión Angular 9 viene con componentes oficiales para YouTube y Google Maps. Se agregó una directiva y un servicio de portapapeles al Angular CDK.</p>\n<h2 id=\"Pruebas\"><a href=\"#Pruebas\" class=\"headerlink\" title=\"Pruebas\"></a>Pruebas</h2><p>La mayor sorpresa de la versión Angular versión 9 son las muchas mejoras en las pruebas. Se resuelven problemas de rendimiento, se mejoran los tipos y se introducen nuevos conceptos.</p>\n<p><a href=\"https://indepth.dev/next-level-testing-in-angular-ivy-version-9/\">Obtén información sobre las principales características y mejoras para las pruebas en “Pruebas de siguiente nivel en Angular Ivy versión 9”</a>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusión\"></a>Conclusión</h2><p>Uno de los objetivos más importantes ha sido mantener la compatibilidad hacia atrás entre Ivy y View Engine tanto como fue posible.</p>\n<p>Por supuesto, la versión Angular 9 también incluye correcciones de errores, temas obsoletos y cambios importantes. Ivy también aborda algunos problemas de antiguos que no cubrimos en este artículo.</p>\n<p>Angular Ivy es un facilitador para las características que están por venir. Como hemos discutido en este artículo, Ivy ya nos ha dado beneficios para diferentes casos de uso. Sin embargo, las mejores características llegarán en futuras versiones de Angular. ¿Cuál de las posibles características que se entregarán en las versiones 10 y 11 de Angular está por decidir?</p>\n<p>Solo discutimos qué es parte de las API públicas y estables de Angular versión 9. Algunas API experimentales son parte de esta versión, como <code>renderComponent</code>,<code> markDirty</code> y <code>detectChanges</code>. Sin embargo, todavía están sujetos a cambios.</p>\n<p>Con la retirada de las declaraciones de componentes de entrada y los componentes con carga diferida utilizando módulos de representación, estamos un paso más cerca de [componentes que se pueden eliminar del árbol y módulos Angular opcionales](<a href=\"https://indepth.dev/angular-revisited-tree-shakable-components-\">https://indepth.dev/angular-revisited-tree-shakable-components-</a> y-opcional-ngmodules &#x2F;).</p>\n<p><a href=\"https://indepth.dev/component-features-with-angular-ivy/\">Los componentes de funcionalidad</a> también forman parte de esta versión, pero solo están expuestos para uso interno de Ivy.</p>\n<p>La versión de Angular Ivy versión 9 nos brinda mejoras para el empaquetamiento, las pruebas, la experiencia del desarrollador, las herramientas, la depuración y la verificación de tipos. Toda una buena colección de características.</p>\n<h2 id=\"Recursos-relacionados\"><a href=\"#Recursos-relacionados\" class=\"headerlink\" title=\"Recursos relacionados\"></a>Recursos relacionados</h2><h3 id=\"Componentes-con-carga-lenta\"><a href=\"#Componentes-con-carga-lenta\" class=\"headerlink\" title=\"Componentes con carga lenta\"></a>Componentes con carga lenta</h3><p><a href=\"https://youtu.be/DA3efofhpq4\">Información sobre los módulos de presentación en la charla “Angular revisited: Tree-shakable components and optional NgModules”</a>.</p>\n<p><a href=\"https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8\">Aprende a usar los componentes de carga diferida en “Lazy load components in Angular” por Kevin Kreuzer</a>.</p>\n<h3 id=\"Comprobacion-de-tipos-en-plantillas\"><a href=\"#Comprobacion-de-tipos-en-plantillas\" class=\"headerlink\" title=\"Comprobación de tipos en plantillas\"></a>Comprobación de tipos en plantillas</h3><p><a href=\"https://angular.io/guide/template-typecheck#troubleshooting-template-errors\">Lee la guía oficial sobre la verificación de tipos en plantillas Angular para conocer los detalles de la resolución de problemas y la configuración</a>.</p>\n<h3 id=\"Globalizacion-1\"><a href=\"#Globalizacion-1\" class=\"headerlink\" title=\"Globalización\"></a>Globalización</h3><p><a href=\"https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/\">Manfred Steyer analiza las configuraciones regionales de carga diferida en “Lazy Loading Locales with Angular”</a>.</p>\n<p><a href=\"https://blog.ninja-squad.com/2019/12/10/angular-localize/\">Cédric Exbrayat analiza la globalización de Ivy en “Internationalization with @angular&#x2F;localize”</a>.</p>\n<h3 id=\"Ambitos-adicionales-de-proveedor-de-dependencias\"><a href=\"#Ambitos-adicionales-de-proveedor-de-dependencias\" class=\"headerlink\" title=\"Ámbitos adicionales de proveedor de dependencias\"></a>Ámbitos adicionales de proveedor de dependencias</h3><p>Obtén información sobre los ámbitos de proveedor de <code>&#39;any&#39;</code> y <code>&#39;platform&#39;</code> en <a href=\"https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb\">“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler</a>.</p>\n<h3 id=\"Nueva-API-de-depuracion\"><a href=\"#Nueva-API-de-depuracion\" class=\"headerlink\" title=\"Nueva API de depuración\"></a>Nueva API de depuración</h3><p><a href=\"https://angular.io/api/core/global\">Lee sobre la API de depuración completa en la documentación oficial</a>.</p>\n<h3 id=\"Angular-Universal-version-9\"><a href=\"#Angular-Universal-version-9\" class=\"headerlink\" title=\"Angular Universal versión 9\"></a>Angular Universal versión 9</h3><p>Estos dos artículos entran en detalles de Angular Universal versión 9:</p>\n<ul>\n<li><a href=\"https://trilon.io/blog/angular-universal-v9-whats-new\">“Angular Universal v9: What’s New ?” by Mark Pieszak</a></li>\n<li><a href=\"https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1\">“Angular v9 &amp; Universal: SSR and prerendering out of the box!” by Sam Vloeberghs</a></li>\n</ul>\n<p>Aprende sobre <code>angular-prerender</code>, la biblioteca que inspiró estas nuevas características de Angular Universal en <a href=\"https://media-codings.com/articles/prerender-angular-apps-with-a-single-command\">“Prerender Angular Apps with a single Command” by Christoph Guttandin</a>.</p>\n<h3 id=\"Enlace-de-propiedades-personalizadas-de-CSS\"><a href=\"#Enlace-de-propiedades-personalizadas-de-CSS\" class=\"headerlink\" title=\"Enlace de propiedades personalizadas de CSS\"></a>Enlace de propiedades personalizadas de CSS</h3><p><a href=\"https://twitter.com/yurzui/status/1221159415820275717\">Mira este tweet y la demostración de Alexey Zuev para ver los enlaces de Propiedades personalizadas de CSS en acción</a>.</p>\n<h2 id=\"Revisores\"><a href=\"#Revisores\" class=\"headerlink\" title=\"Revisores\"></a>Revisores</h2><p>Siempre es útil tener una segunda opinión sobre nuestro trabajo o incluso detectar errores tontos. Para este artículo tuve el placer de ser revisado por:</p>\n<ul>\n<li><a href=\"https://twitter.com/chrisguttandin\">Christoph Guttandin</a></li>\n<li><a href=\"https://indepth.dev/author/evgeny/\">Evgeny Fedorenko</a></li>\n<li><a href=\"https://dev.to/santoshyadav198613\">Santosh Yadav</a></li>\n</ul>\n<p>Lars Gyrup Brink Nielsen</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Ayudita conceptual…</p>\n<blockquote>\n<p><a href=\"https://www.campusmvp.es/recursos/post/angular-9-ya-esta-aqui-y-estas-son-sus-novedades.aspx\">https://www.campusmvp.es/recursos/post/angular-9-ya-esta-aqui-y-estas-son-sus-novedades.aspx</a></p>\n</blockquote>\n</blockquote>\n<h1 id=\"Un-vistazo-a-las-caracteristicas-principales-en-el-lanzamiento-de-Angular-Ivy-version-9\"><a href=\"#Un-vistazo-a-las-caracteristicas-principales-en-el-lanzamiento-de-Angular-Ivy-version-9\" class=\"headerlink\" title=\"Un vistazo a las características principales en el lanzamiento de Angular Ivy versión 9\"></a>Un vistazo a las características principales en el lanzamiento de Angular Ivy versión 9</h1><p><a href=\"https://admin.indepth.dev/ghost/#/editor/post/5e2f4cae430b1e0c3681c749\">editor de publicaciones</a></p>\n<p><a href=\"https://indepth.dev/author/layzee/\">Lars Gyrup Brink Nielsen</a> 06 de febrero de 2020 9 min de lectura</p>\n<p>MUCHO y en todas partes, globalización dinámica, modo estricto, Bazel y mucho más.</p>\n<ul>\n<li>(Sí, ahora se ha lanzado Angular Ivy versión 9) *</li>\n</ul>\n<h2 id=\"Ivy-esta-habilitado-por-defecto\"><a href=\"#Ivy-esta-habilitado-por-defecto\" class=\"headerlink\" title=\"Ivy está habilitado por defecto\"></a>Ivy está habilitado por defecto</h2><p>En versiones anteriores de Angular, tuvimos que optar por Ivy. En la versión 9, tenemos que optar por no participar en Ivy si queremos recurrir a View Engine. Esto es posible en ambas versiones 9 y 10 para garantizar una transición más fluida de View Engine a Ivy.</p>\n<p>Las librerías <em>se pueden</em> compilar AOT, pero no es recomendable. El equipo de Angular tiene un plan de migración de View Engine a Ivy que recomienda publicar solo librerías compatibles con View Engine compiladas con JIT para Angular versión 9. El compilador de compatibilidad Angular actualizará las librerías compatibles con View Engine a Ivy cuando se instalen en una aplicación Angular Ivy.</p>\n<p><a href=\"https://indepth.dev/the-angular-ivy-guide-for-library-authors/\">Obtén información sobre la compatibilidad de la biblioteca y el plan de transición de View Engine-to-Ivy en “La guía de Angular Ivy para autores de librerías”</a> .</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;angularCompilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;enableIvy&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// polyfills.ts</span></span><br><span class=\"line\"><span class=\"comment\">// Solo se usa en aplicaciones multilingües de Ivy</span></span><br><span class=\"line\"><span class=\"comment\">// import &#x27;@angular/localize/init&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 1. Optar por no usar Ivy para recurrir a View Engine.</em></p>\n<p>Si tienes problemas con Ivy en tu aplicación, o en cualquiera de las librerías de las que depende, puedes optar por salir de Ivy y recurrir a View Engine. Hazlo desactivando la opción del compilador angular <code>enableIvy</code> y deshabilitando<code> @angular/localize</code> como se ve en Listado 1.</p>\n<p>Optar por evitar Ivy en un entorno de servidor es un poco más complicado. <a href=\"https://angular.io/guide/ivy#using-ssr-without-ivy\">Sigue la guía oficial para darte de baja de Ivy cuando uses la renderización del lado del servidor</a>.</p>\n<h2 id=\"El-principio-de-localidad\"><a href=\"#El-principio-de-localidad\" class=\"headerlink\" title=\"El principio de localidad\"></a>El principio de localidad</h2><p>Antes, para compilar un componente en View Engine, Angular necesitaba información sobre todas sus dependencias declaradas. Esto significa que las librerías Angular no se pueden compilar AOT usando View Engine.</p>\n<p>Ahora para compilar un componente en Ivy, Angular solo necesita información sobre el componente en sí. Pero, Ivy no necesita metadatos de ninguna dependencia declarable para compilar un componente.</p>\n<p>El principio de localidad significa que, en general, veremos tiempos de construcción más rápidos.</p>\n<h3 id=\"Componentes-con-carga-diferida\"><a href=\"#Componentes-con-carga-diferida\" class=\"headerlink\" title=\"Componentes con carga diferida\"></a>Componentes con carga diferida</h3><p>Las declaraciones <code>entryComponents</code> están en desuso porque ya no son necesarias. Cualquier componente Ivy puede cargarse de forma diferida y renderizarse dinámicamente.</p>\n<p>Esto significa que ahora podemos cargar de forma diferida y renderizar un componente sin enrutamiento o módulos Angular. Sin embargo, en la práctica aún tenemos que usar módulos para renderizar componentes o módulos funcionales para vincular la plantilla de un componente a sus dependencias.</p>\n<p>Las librerías que solo son utilizadas por un componente con carga diferida se agrupan en fragmentos con carga diferida.</p>\n<h2 id=\"Mejoras-en-la-carga-diferencial\"><a href=\"#Mejoras-en-la-carga-diferencial\" class=\"headerlink\" title=\"Mejoras en la carga diferencial\"></a>Mejoras en la carga diferencial</h2><p>Cuando se introdujo la carga diferencial en Angular versión 8, el proceso de compilación se ejecutaba una vez para el paquete ES5 y otra vez para el paquete ES2015+.</p>\n<p>En Angular versión 9, primero se emite un paquete ES2015+. Ese paquete se transfiere a un paquete ES5 separado. De esta manera, no tenemos que pasar por un proceso de compilación completo dos veces.</p>\n<h2 id=\"Compilacion-AOT-en-todas-partes\"><a href=\"#Compilacion-AOT-en-todas-partes\" class=\"headerlink\" title=\"Compilación AOT en todas partes\"></a>Compilación AOT en todas partes</h2><p>AOT está habilitado de forma predeterminada en las compilaciones, el servidor de desarrollo e incluso en las pruebas. Anteriormente, la compilación AOT era significativamente más lenta que la compilación JIT, por lo que JIT se usaba para el desarrollo y las pruebas. Con las mejoras de tiempo de construcción y reconstrucción en Ivy, la compilación AOT ahora ofrece una gran experiencia al desarrollador.</p>\n<p>Cuando utilizábamos la compilación JIT en desarrollo y solo la compilación AOT en la compilación final, algunos errores se detectaban solo al hacer compilaciones de producción o, peor aún, en tiempo de ejecución.</p>\n<h2 id=\"Tamanos-de-paquete\"><a href=\"#Tamanos-de-paquete\" class=\"headerlink\" title=\"Tamaños de paquete\"></a>Tamaños de paquete</h2><p>Ivy puede habilitar paquetes más pequeños porque usa el <em>Ivy Instruction Set</em>, que es un conjunto de instrucciones de representación de tiempo de ejecución potencialmente <strong>tree-shakable</strong>. Nuestros paquetes solo incluirán las instrucciones de renderizado que realmente usamos en nuestros proyectos.</p>\n<p>Esto es ideal para casos de uso como <em>microfrontends</em>, Angular Elements y aplicaciones web donde Angular no controla todo el documento.</p>\n<p>Sin embargo, la diferencia en los tamaños de nuestros paquetes entre View Engine e Ivy variará según el tamaño de nuestra aplicación y las librerías de terceros que utilizamos. En general:</p>\n<ul>\n<li>Las aplicaciones pequeñas y simples verán una disminución considerable del peso del paquete.</li>\n<li>Las aplicaciones complejas verán un aumento en el fichero principal, pero una disminución en los tamaños de paquetes con carga diferida.</li>\n</ul>\n<p>Esto significa una disminución considerable del tamaño de descarga combinada para aplicaciones grandes, pero podría significar un aumento en el peso total para aplicaciones medianas. En ambos casos, el tamaño del paquete principal probablemente aumentará, lo que es malo para el tiempo de carga inicial de la página.</p>\n<h2 id=\"Globalizacion\"><a href=\"#Globalizacion\" class=\"headerlink\" title=\"Globalización\"></a>Globalización</h2><p>Las configuraciones regionales (formato de número, formato de fecha y otras configuraciones regionales) se pueden cargar dinámicamente en tiempo de ejecución en lugar de tener que registrarse en tiempo de compilación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@angular/localize/init&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; loadTranslations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/localize&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">loadTranslations (&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;8374172394781134519&#x27;</span>: <span class=\"string\">&#x27;¡Hola, &#123;$nombre de usuario&#125;! Bienvenido a &#123;$appName&#125;. &#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 2. Carga dinámica de traducciones.</em></p>\n<p>Como se ve en el Listado 2, los textos traducidos también se pueden cargar dinámicamente en tiempo de ejecución en lugar de ser parte de nuestros paquetes.</p>\n<p>Los textos traducidos pueden cargarse desde una base de datos o un archivo.</p>\n<h3 id=\"Multiples-idiomas-desde-un-unico-paquete-de-aplicaciones\"><a href=\"#Multiples-idiomas-desde-un-unico-paquete-de-aplicaciones\" class=\"headerlink\" title=\"Múltiples idiomas desde un único paquete de aplicaciones\"></a>Múltiples idiomas desde un único paquete de aplicaciones</h3><p>Para cambiar el idioma, tenemos que reiniciar la aplicación, pero no tenemos que servir un fichero de aplicaciones diferente.</p>\n<p>Esto significa que podemos, con alguna configuración, admitir varios idiomas con un solo paquete de aplicaciones en un solo nombre de host.</p>\n<h3 id=\"Tiempo-de-compilacion-en-linea\"><a href=\"#Tiempo-de-compilacion-en-linea\" class=\"headerlink\" title=\"Tiempo de compilación en línea\"></a>Tiempo de compilación en línea</h3><p>Una aplicación localizada ahora solo se compilará una vez. En lugar de múltiples compilaciones para producir un paquete por idioma, se produce un paquete por idioma reemplazando los marcadores de posición <code>$localize</code> con textos traducidos.</p>\n<p>Ahora  hay que agregar el paquete <code>@angular/localize</code> para posibilitar la localización (varios idiomas). La buena noticia es que ya no tenemos que incluir el código de localización de Angular en nuestros paquetes si solo tenemos un idioma.</p>\n<p>Si no usamos plantillas localizadas, las instrucciones de Ivy <code>i18n *</code> se sacan del paquete principal.</p>\n<h3 id=\"Textos-localizables-en-modelos-de-componentes-y-servicios\"><a href=\"#Textos-localizables-en-modelos-de-componentes-y-servicios\" class=\"headerlink\" title=\"Textos localizables en modelos de componentes y servicios\"></a>Textos localizables en modelos de componentes y servicios</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&#123;&#123; title &#125;&#125;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  title = $localize<span class=\"string\">`Welcome to MyApp`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 3. Un marcador de posición de texto de traducción en un modelo de componente.</em></p>\n<p>Una nueva característica de internacionalización es que también podemos incluir marcadores de posición para textos traducidos en el contenido de nuestros modelos como se ve en el Listado 3. Anteriormente, esto solo era posible en las plantillas.</p>\n<h2 id=\"Ambitos-adicionales-de-proveedores-de-dependencias\"><a href=\"#Ambitos-adicionales-de-proveedores-de-dependencias\" class=\"headerlink\" title=\"Ámbitos adicionales de proveedores de dependencias\"></a>Ámbitos adicionales de proveedores de dependencias</h2><p>Siempre hemos tenido alcance de módulo para los proveedores de inyección de servicios. La versión Angular 6 introdujo el alcance <code>&#39;root&#39;</code> y los proveedores <em>tree-shakable</em>, tanto para los proveedores de alcance desde el módulo raíz como desde módulos inferiores.</p>\n<p>La versión angular 9 presenta los nuevos ámbitos de proveedor <code>&#39;platform&#39;</code> y <code>&#39;any&#39;</code>. Los proveedores con ámbito de <code>&#39;platform&#39;</code> se pueden compartir entre múltiples aplicaciones Angular en el mismo documento. El alcance del proveedor <code>&#39;any&#39;</code> compartirá un proveedor por inyector de módulo. Por ejemplo, una instancia de servicio para el paquete principal cargado por adelantado y una instancia de servicio para cada módulo cargado con retraso.</p>\n<h2 id=\"Experiencia-mejorada-del-desarrollador\"><a href=\"#Experiencia-mejorada-del-desarrollador\" class=\"headerlink\" title=\"Experiencia mejorada del desarrollador\"></a>Experiencia mejorada del desarrollador</h2><p>Ivy permite que <em>Angular Language Service</em> admita comprobaciones adicionales durante el desarrollo. Esta es una gran mejora para la experiencia del desarrollador.</p>\n<h3 id=\"Comprobaciones-de-ruta-de-archivo\"><a href=\"#Comprobaciones-de-ruta-de-archivo\" class=\"headerlink\" title=\"Comprobaciones de ruta de archivo\"></a>Comprobaciones de ruta de archivo</h3><p><em>Angular Language Service</em> verifica continuamente la hoja de estilo de componentes y las rutas de plantilla.</p>\n<h3 id=\"Verificaciones-de-tipo-de-plantilla\"><a href=\"#Verificaciones-de-tipo-de-plantilla\" class=\"headerlink\" title=\"Verificaciones de tipo de plantilla\"></a>Verificaciones de tipo de plantilla</h3><p>Las plantillas se verifican por tipo, de acuerdo con el modo de verificación de tipo de plantilla como se describe más abajo en la sección “Modo estricto”. Los nombres y tipos de miembros se verifican, incluso en vistas incrustadas. Lo que anteriormente resultaba en errores de tiempo de ejecución ahora se detecta durante el desarrollo y la construcción.</p>\n<h2 id=\"Nueva-API-de-depuracion-en-modo-de-desarrollo\"><a href=\"#Nueva-API-de-depuracion-en-modo-de-desarrollo\" class=\"headerlink\" title=\"Nueva API de depuración en modo de desarrollo\"></a>Nueva API de depuración en modo de desarrollo</h2><p><code>ng.probe</code> ha sido reemplazado por una nueva API de depuración en modo de desarrollo. Las funciones más notables son <code>ng.applyChanges</code> y<code> ng.getComponent</code>.</p>\n<h2 id=\"Modo-estricto\"><a href=\"#Modo-estricto\" class=\"headerlink\" title=\"Modo estricto\"></a>Modo estricto</h2><h3 id=\"Esquema-estricto-del-espacio-de-trabajo\"><a href=\"#Esquema-estricto-del-espacio-de-trabajo\" class=\"headerlink\" title=\"Esquema estricto del espacio de trabajo\"></a>Esquema estricto del espacio de trabajo</h3><p>El comando <code>ng new</code> ahora es compatible con el indicador<code> --strict</code> que por defecto está desactivado (<code>false</code>).</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new my-app --strict</span><br></pre></td></tr></table></figure>\n\n<p>Cuando está habilitado, este parámetro agrega algunas comprobaciones estrictas del compilador TypeScript como se ve en el Listado 4.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitReturns&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitThis&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noFallthroughCasesInSwitch&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strictlyNullChecks&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 4. Opciones del compilador TypeScript habilitadas en un estricto espacio de trabajo angular.</em></p>\n<p>Curiosamente, esto no agrega las mismas opciones que si simplemente estableciéramos <code>&quot;strict&quot;: true</code> en el objeto <code>compilerOptions</code>. Comparemos la opción estricta del workscpace Angular con la opción estricta del compilador TypeScript.</p>\n<p>Ambos tienen estas opciones en común:</p>\n<ul>\n<li><code>noImplicitAny</code></li>\n<li><code>noImplicitThis</code></li>\n<li><code>strictlyNullChecks</code></li>\n</ul>\n<p>La opción estricta de Angular establece además estas opciones:</p>\n<ul>\n<li><code>noImplicitReturns</code></li>\n<li><code>noFallthroughCasesInSwitch</code></li>\n</ul>\n<p>mientras que la opción estricta del compilador TypeScript establece adicionalmente estas opciones:</p>\n<ul>\n<li><code>alwaysStrict</code></li>\n<li><code>strictlyBindCallApply</code></li>\n<li><code>strictlyFunctionTypes</code></li>\n<li><code>estrictoPropertyInitialization</code></li>\n</ul>\n<p>Además, la opción de Angular no establece la comprobación del tipo de plantilla en el nuevo modo estricto, lo deja en el modo <code>&#39;full&#39;</code> anterior.</p>\n<h3 id=\"Verificacion-estricta-del-tipo-de-plantilla\"><a href=\"#Verificacion-estricta-del-tipo-de-plantilla\" class=\"headerlink\" title=\"Verificación estricta del tipo de plantilla\"></a>Verificación estricta del tipo de plantilla</h3><p>Hemos tenido la opción de habilitar la verificación del tipo de plantilla desde Angular versión 5 configurando <code>&quot;fullTemplateTypeCheck&quot;: true</code> en el objeto<code> angularCompilerOptions</code>.</p>\n<p>Ivy presenta una estricta comprobación del tipo de plantilla como se ve en el Listado 5. Cuando se establece esta nueva opción del compilador Angular, se ignora el valor de <code>fullTemplateTypeCheck</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;angularCompilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;strictlyTemplates&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 5. Habilita la comprobación estricta del tipo de plantilla.</em></p>\n<p>La comprobación de tipo de plantilla estricta verifica los tipos de enlaces de propiedades y respeta la opción <code>stricNullChecks</code>. También verifica los tipos de referencias de plantilla a directivas y componentes, incluidos los tipos genéricos. También se verifican los tipos de variables de contexto de plantilla, lo cual es excelente para los bucles ‘NgFor’. El tipo <code>$ event</code> está marcado para enlaces de eventos y animaciones. Incluso el tipo de elementos DOM nativos se verifica con una comprobación estricta del tipo de plantilla.</p>\n<p>Estas comprobaciones adicionales pueden conducir a errores y falsos positivos bajo ciertas circunstancias. Por ejemplo, cuando se usan librerías que no están compiladas con <code>strictNullChecks</code>. Para abordar esto, la verificación estricta del tipo de plantilla tiene opciones para optar por no participar y ajustar los controles. Por ejemplo, <code>strictTemplates</code> es en realidad una atajo de 8 opciones de compilador Angular.</p>\n<h2 id=\"Herencia-de-clase-de-componente-y-directiva-mejorada\"><a href=\"#Herencia-de-clase-de-componente-y-directiva-mejorada\" class=\"headerlink\" title=\"Herencia de clase de componente y directiva mejorada\"></a>Herencia de clase de componente y directiva mejorada</h2><p>Las clases base sin selector ahora son compatibles con directivas y componentes. Algunos metadatos ahora se heredan de componentes base y clases directivas. Esto hace que sea más fácil extender, por ejemplo, las directivas Angular Components y Angular Router.</p>\n<h2 id=\"Ultimas-versiones-de-TypeScript\"><a href=\"#Ultimas-versiones-de-TypeScript\" class=\"headerlink\" title=\"Últimas versiones de TypeScript\"></a>Últimas versiones de TypeScript</h2><p>Las versiones de TypeScript 3.6 y 3.7 son compatibles con la versión angular 9. Las versiones anteriores de TypeScript ya no son compatibles. Consulta la Tabla 1 para comparar la compatibilidad de TypeScript entre todas las versiones Angular.</p>\n<p>[ver sin formato](<a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support\">https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support</a> -cs-type-script-node-type-script-code-node-code-node-type. csv](<a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv\">https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv</a>) alojado con ❤ por <a href=\"https://github.com/\">GitHub</a></p>\n<p><em>Tabla 1. Tabla de compatibilidad de CLI angular, Angular, Node.js y TypeScript.</em> <a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3\"><em>Abrir en una pestaña nueva</em></a>*</p>\n<p>TypeScript versión 3.6 presenta estas y otras características:</p>\n<ul>\n<li>Soporte Unicode para identificadores en destinos modernos</li>\n<li>Experiencia de desarrollador mejorada para promesas</li>\n<li>Comprobación de tipo más estricto de generadores</li>\n</ul>\n<p>TypeScript versión 3.7 presenta estas y otras características que podemos usar con Angular versión 9:</p>\n<ul>\n<li>Operador de encadenamiento opcional (<code>?.</code>) similar al operador de navegación segura para plantillas Angular</li>\n<li>Operador de unión con nulos (<code>??</code>)</li>\n<li>Funciones de afirmación de pruebas (<code>assert parameterName is typeName</code> y <code>asserts parameterName</code>)</li>\n<li><code>await</code> de primer nivel</li>\n<li>Alias ​​de tipo recursivo mejorado</li>\n<li>Mejora de la experiencia del desarrollador para funciones de comprobaciones</li>\n</ul>\n<h2 id=\"Generacion-mejorada-del-lado-del-servidor-con-Angular-Universal\"><a href=\"#Generacion-mejorada-del-lado-del-servidor-con-Angular-Universal\" class=\"headerlink\" title=\"Generación mejorada del lado del servidor con Angular Universal\"></a>Generación mejorada del lado del servidor con Angular Universal</h2><p>Angular Universal versión 9 se lanza con un servidor de desarrollo Node.js Express para proporcionar un entorno realista durante el desarrollo.</p>\n<p>También parte de este lanzamiento es un constructor del CLI para pre-renderizar rutas estáticas usando <code>guess-parser</code>, inspirado en <code>angular-prerender</code>. Podemos pasar un archivo de rutas para renderizar rutas dinámicas (rutas con parámetros).</p>\n<h3 id=\"¿Como-empiezo\"><a href=\"#¿Como-empiezo\" class=\"headerlink\" title=\"¿Cómo empiezo?\"></a>¿Cómo empiezo?</h3><p>Podemos agregar Angular Universal usando el comando <code>ng add @nguniversal/express-engine</code>. Luego podemos usar el comando del constructor <code>ng run myapp:serve-ssr</code> para iniciar el servidor de desarrollo de renderizado del lado del servidor con recarga en vivo. De manera similar, podemos usar <code>ng run myapp:prerender</code> para detectar rutas estáticas y dinámicas y pre renderizarlas.</p>\n<h2 id=\"Experiencia-de-clases-y-estilo-mejorada\"><a href=\"#Experiencia-de-clases-y-estilo-mejorada\" class=\"headerlink\" title=\"Experiencia de clases y estilo mejorada\"></a>Experiencia de clases y estilo mejorada</h2><p>Al aplicación de estilo en Angular Ivy ha sido reelaborado. La combinación de clases HTML estáticas con las directivas <code>NgStyle</code> y<code> NgClass</code> es ahora totalmente compatible y más fácil de entender.</p>\n<h3 id=\"Soporte-de-propiedades-personalizadas-de-CSS\"><a href=\"#Soporte-de-propiedades-personalizadas-de-CSS\" class=\"headerlink\" title=\"Soporte de propiedades personalizadas de CSS\"></a>Soporte de propiedades personalizadas de CSS</h3><p>Como parte de la reescritura del estilo Ivy, ahora se admiten las propiedades personalizadas de CSS enlazadas.</p>\n<p>Un ejemplo de enlace css puede ser así:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.--my-var</span>]=<span class=\"string\">&quot;myProperty || &#x27;any value&#x27;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Las propiedades personalizadas de CSS tienen control de alcance, por lo que esta propiedad de CSS se limitaría al DOM del componente.</p>\n<h2 id=\"Lanzamiento-estable-de-Bazel-como-opcion-de-suscripcion\"><a href=\"#Lanzamiento-estable-de-Bazel-como-opcion-de-suscripcion\" class=\"headerlink\" title=\"Lanzamiento estable de Bazel como opción de suscripción\"></a>Lanzamiento estable de Bazel como opción de suscripción</h2><p>Bazel versión 2.1 es una herramienta de automatización de compilación opcional para Angular versión 9.</p>\n<h3 id=\"¿Como-empiezo-1\"><a href=\"#¿Como-empiezo-1\" class=\"headerlink\" title=\"¿Cómo empiezo?\"></a>¿Cómo empiezo?</h3><p>Para habilitar Bazel, usa <code>ng add @angular/bazel</code> o la colección de esquemas <code>@angular/bazel</code> cuando generes un espacio de trabajo Angular.</p>\n<p>Asegúrate de seguir <a href=\"https://docs.bazel.build/versions/2.0.0/install.html\">la guía de instalación de Bazel</a> para tu sistema operativo.</p>\n<h2 id=\"Componentes-Angular\"><a href=\"#Componentes-Angular\" class=\"headerlink\" title=\"Componentes Angular\"></a>Componentes Angular</h2><p>La versión Angular 9 viene con componentes oficiales para YouTube y Google Maps. Se agregó una directiva y un servicio de portapapeles al Angular CDK.</p>\n<h2 id=\"Pruebas\"><a href=\"#Pruebas\" class=\"headerlink\" title=\"Pruebas\"></a>Pruebas</h2><p>La mayor sorpresa de la versión Angular versión 9 son las muchas mejoras en las pruebas. Se resuelven problemas de rendimiento, se mejoran los tipos y se introducen nuevos conceptos.</p>\n<p><a href=\"https://indepth.dev/next-level-testing-in-angular-ivy-version-9/\">Obtén información sobre las principales características y mejoras para las pruebas en “Pruebas de siguiente nivel en Angular Ivy versión 9”</a>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusión\"></a>Conclusión</h2><p>Uno de los objetivos más importantes ha sido mantener la compatibilidad hacia atrás entre Ivy y View Engine tanto como fue posible.</p>\n<p>Por supuesto, la versión Angular 9 también incluye correcciones de errores, temas obsoletos y cambios importantes. Ivy también aborda algunos problemas de antiguos que no cubrimos en este artículo.</p>\n<p>Angular Ivy es un facilitador para las características que están por venir. Como hemos discutido en este artículo, Ivy ya nos ha dado beneficios para diferentes casos de uso. Sin embargo, las mejores características llegarán en futuras versiones de Angular. ¿Cuál de las posibles características que se entregarán en las versiones 10 y 11 de Angular está por decidir?</p>\n<p>Solo discutimos qué es parte de las API públicas y estables de Angular versión 9. Algunas API experimentales son parte de esta versión, como <code>renderComponent</code>,<code> markDirty</code> y <code>detectChanges</code>. Sin embargo, todavía están sujetos a cambios.</p>\n<p>Con la retirada de las declaraciones de componentes de entrada y los componentes con carga diferida utilizando módulos de representación, estamos un paso más cerca de [componentes que se pueden eliminar del árbol y módulos Angular opcionales](<a href=\"https://indepth.dev/angular-revisited-tree-shakable-components-\">https://indepth.dev/angular-revisited-tree-shakable-components-</a> y-opcional-ngmodules &#x2F;).</p>\n<p><a href=\"https://indepth.dev/component-features-with-angular-ivy/\">Los componentes de funcionalidad</a> también forman parte de esta versión, pero solo están expuestos para uso interno de Ivy.</p>\n<p>La versión de Angular Ivy versión 9 nos brinda mejoras para el empaquetamiento, las pruebas, la experiencia del desarrollador, las herramientas, la depuración y la verificación de tipos. Toda una buena colección de características.</p>\n<h2 id=\"Recursos-relacionados\"><a href=\"#Recursos-relacionados\" class=\"headerlink\" title=\"Recursos relacionados\"></a>Recursos relacionados</h2><h3 id=\"Componentes-con-carga-lenta\"><a href=\"#Componentes-con-carga-lenta\" class=\"headerlink\" title=\"Componentes con carga lenta\"></a>Componentes con carga lenta</h3><p><a href=\"https://youtu.be/DA3efofhpq4\">Información sobre los módulos de presentación en la charla “Angular revisited: Tree-shakable components and optional NgModules”</a>.</p>\n<p><a href=\"https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8\">Aprende a usar los componentes de carga diferida en “Lazy load components in Angular” por Kevin Kreuzer</a>.</p>\n<h3 id=\"Comprobacion-de-tipos-en-plantillas\"><a href=\"#Comprobacion-de-tipos-en-plantillas\" class=\"headerlink\" title=\"Comprobación de tipos en plantillas\"></a>Comprobación de tipos en plantillas</h3><p><a href=\"https://angular.io/guide/template-typecheck#troubleshooting-template-errors\">Lee la guía oficial sobre la verificación de tipos en plantillas Angular para conocer los detalles de la resolución de problemas y la configuración</a>.</p>\n<h3 id=\"Globalizacion-1\"><a href=\"#Globalizacion-1\" class=\"headerlink\" title=\"Globalización\"></a>Globalización</h3><p><a href=\"https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/\">Manfred Steyer analiza las configuraciones regionales de carga diferida en “Lazy Loading Locales with Angular”</a>.</p>\n<p><a href=\"https://blog.ninja-squad.com/2019/12/10/angular-localize/\">Cédric Exbrayat analiza la globalización de Ivy en “Internationalization with @angular&#x2F;localize”</a>.</p>\n<h3 id=\"Ambitos-adicionales-de-proveedor-de-dependencias\"><a href=\"#Ambitos-adicionales-de-proveedor-de-dependencias\" class=\"headerlink\" title=\"Ámbitos adicionales de proveedor de dependencias\"></a>Ámbitos adicionales de proveedor de dependencias</h3><p>Obtén información sobre los ámbitos de proveedor de <code>&#39;any&#39;</code> y <code>&#39;platform&#39;</code> en <a href=\"https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb\">“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler</a>.</p>\n<h3 id=\"Nueva-API-de-depuracion\"><a href=\"#Nueva-API-de-depuracion\" class=\"headerlink\" title=\"Nueva API de depuración\"></a>Nueva API de depuración</h3><p><a href=\"https://angular.io/api/core/global\">Lee sobre la API de depuración completa en la documentación oficial</a>.</p>\n<h3 id=\"Angular-Universal-version-9\"><a href=\"#Angular-Universal-version-9\" class=\"headerlink\" title=\"Angular Universal versión 9\"></a>Angular Universal versión 9</h3><p>Estos dos artículos entran en detalles de Angular Universal versión 9:</p>\n<ul>\n<li><a href=\"https://trilon.io/blog/angular-universal-v9-whats-new\">“Angular Universal v9: What’s New ?” by Mark Pieszak</a></li>\n<li><a href=\"https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1\">“Angular v9 &amp; Universal: SSR and prerendering out of the box!” by Sam Vloeberghs</a></li>\n</ul>\n<p>Aprende sobre <code>angular-prerender</code>, la biblioteca que inspiró estas nuevas características de Angular Universal en <a href=\"https://media-codings.com/articles/prerender-angular-apps-with-a-single-command\">“Prerender Angular Apps with a single Command” by Christoph Guttandin</a>.</p>\n<h3 id=\"Enlace-de-propiedades-personalizadas-de-CSS\"><a href=\"#Enlace-de-propiedades-personalizadas-de-CSS\" class=\"headerlink\" title=\"Enlace de propiedades personalizadas de CSS\"></a>Enlace de propiedades personalizadas de CSS</h3><p><a href=\"https://twitter.com/yurzui/status/1221159415820275717\">Mira este tweet y la demostración de Alexey Zuev para ver los enlaces de Propiedades personalizadas de CSS en acción</a>.</p>\n<h2 id=\"Revisores\"><a href=\"#Revisores\" class=\"headerlink\" title=\"Revisores\"></a>Revisores</h2><p>Siempre es útil tener una segunda opinión sobre nuestro trabajo o incluso detectar errores tontos. Para este artículo tuve el placer de ser revisado por:</p>\n<ul>\n<li><a href=\"https://twitter.com/chrisguttandin\">Christoph Guttandin</a></li>\n<li><a href=\"https://indepth.dev/author/evgeny/\">Evgeny Fedorenko</a></li>\n<li><a href=\"https://dev.to/santoshyadav198613\">Santosh Yadav</a></li>\n</ul>\n<p>Lars Gyrup Brink Nielsen</p>\n"},{"title":"Cursos Online Avanzado de Angular","updated":"2019-04-24T12:07:39.000Z","date":"2019-03-20T09:07:39.000Z","_content":"\n[Implantación de buenas prácticas en desarrollos empresariales con Angular.](https://www.trainingit.es/index.php/producto/curso-angular-avanzado/)\n\n# Angular Business\n\n## 0 - Repositorios profesionales con Nx\n\n### 0.1 Nx y el CLI\n\n- Instalación de Nx y CLI\n- Crear y configurar un workspace\n\n### 0.1 Estructura de un workspace\n\n- Apps\n- Libs\n\n### 0.2 Proyectos\n\n- Frontend webs\n- Backend Apis\n\n### 0.3 Librerías\n\n- 4.1 Librerías en TypeScript\n- 4.2 Librerías de Angular\n\n## 1 - Testing de aplicaciones\n\n### 1.1 Tipos de tests\n\n- Integración o e2e\n- Unitarios\n\n### 1.2 Test de Integración con Cypress\n\n- Cypress\n- Test e2e\n\n### 1.3 Test Unitarios con Jest\n\n- Jest\n- Test unitarios\n\n## 2 - Detección del cambio en Angular\n\n### 2.1 Estrategias de detección del cambio\n\n- Default\n- OnPush\n\n### 2.2 Técnicas OnPush\n\n- DetectChanges\n- Async\n- Inmutable\n\n### 2.3 Optimización\n\n- OnPush es más ligero\n- Async, CDR y clone detectan los cambios\n\n\n## 3 - Componentes dinámicos, directivas y pipes\n\n### 3.1 Plantillas de contenido dinámico\n\n- Un componente común\n- Implementaciones distintas\n\n### 3.2 Atributos custom con Directivas\n\n- Generación de directivas\n- Consumo de directivas\n\n### 3.2 Funciones de transformación con Pipes\n\n- Generación de pipes\n- Consumo de pipes\n\n\n## 4 - Redux con observables\n\n### 4.1 Arquitectura del patrón Redux\n\n- Principios de Redux\n- Elementos de Redux\n\n### 4.2 Implementación de un Store con RxJs\n\n- El Store observable\n- El envío de acciones\n- La función reductora de estado\n- La selección de suscripciones\n\n## 5 - Redux con NgRx\n\n### 5.1 Instalación y configuración\n\n - Instalación de NgRx\n - Registro y configuración\n - Router y DevTools\n\n### 5.2 Actions\n\n - Create\n - Dispatch\n\n### 5.3 State reducer\n\n - State\n - Create function\n - Register in Store\n\n### 5.4 Selectors\n\n - Create selector\n - Selecting data\n - Fachadas\n\n### 5.5 Effects\n\n - Install\n - Efecto básico\n - Api async effects\n - More Api async effects\n\n## 6 - Deploy Progressive Web Apps\n\n### 6.1 Angular Service Worker con el CLI\n\n - Instalación\n - Modificaciones automáticas\n - Paquetes recomendados\n\n### 6.2 Configuración de caché\n\n - Assets\n - API\n\n### 6.3 Actualizaciones y notificaciones\n\n - Actualización de versiones\n - Notificaciones Push\n\n### 6.4 Shell\n\n - Una animación para amenizar la carga\n\n> WIP\n\n## 7 - Server Side Rendering\n\n### 7.1 Angular Universal\n### 7.2 Despliegue con Node Express\n### 7.3 Variantes: shell y pre-rendering\n\n## 8 - Internacionalización y puesta en producción\n\n### 8.1 Traducciones\n### 8.2 Adaptaciones culturales de tiempo y moneda\n### 8.3 Otras consideraciones para aplicaciones en producción.\n\n## 9 - Web Components\n\n### 9.1 Desarrollo en Angular\n### 9.2 Consumo en cualquier framework\n\n[Mejora ya!](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders/)\n\n[Contenido detallado Angular Basic](../cursos/angular-basic)\n","source":"Cursos/angular-business.md","raw":"---\ntitle: Cursos Online Avanzado de Angular\npermalink: cursos/angular-business\nupdated: '2019-04-24 14:07:39'\ndate: 2019-03-20 10:07:39\n---\n\n[Implantación de buenas prácticas en desarrollos empresariales con Angular.](https://www.trainingit.es/index.php/producto/curso-angular-avanzado/)\n\n# Angular Business\n\n## 0 - Repositorios profesionales con Nx\n\n### 0.1 Nx y el CLI\n\n- Instalación de Nx y CLI\n- Crear y configurar un workspace\n\n### 0.1 Estructura de un workspace\n\n- Apps\n- Libs\n\n### 0.2 Proyectos\n\n- Frontend webs\n- Backend Apis\n\n### 0.3 Librerías\n\n- 4.1 Librerías en TypeScript\n- 4.2 Librerías de Angular\n\n## 1 - Testing de aplicaciones\n\n### 1.1 Tipos de tests\n\n- Integración o e2e\n- Unitarios\n\n### 1.2 Test de Integración con Cypress\n\n- Cypress\n- Test e2e\n\n### 1.3 Test Unitarios con Jest\n\n- Jest\n- Test unitarios\n\n## 2 - Detección del cambio en Angular\n\n### 2.1 Estrategias de detección del cambio\n\n- Default\n- OnPush\n\n### 2.2 Técnicas OnPush\n\n- DetectChanges\n- Async\n- Inmutable\n\n### 2.3 Optimización\n\n- OnPush es más ligero\n- Async, CDR y clone detectan los cambios\n\n\n## 3 - Componentes dinámicos, directivas y pipes\n\n### 3.1 Plantillas de contenido dinámico\n\n- Un componente común\n- Implementaciones distintas\n\n### 3.2 Atributos custom con Directivas\n\n- Generación de directivas\n- Consumo de directivas\n\n### 3.2 Funciones de transformación con Pipes\n\n- Generación de pipes\n- Consumo de pipes\n\n\n## 4 - Redux con observables\n\n### 4.1 Arquitectura del patrón Redux\n\n- Principios de Redux\n- Elementos de Redux\n\n### 4.2 Implementación de un Store con RxJs\n\n- El Store observable\n- El envío de acciones\n- La función reductora de estado\n- La selección de suscripciones\n\n## 5 - Redux con NgRx\n\n### 5.1 Instalación y configuración\n\n - Instalación de NgRx\n - Registro y configuración\n - Router y DevTools\n\n### 5.2 Actions\n\n - Create\n - Dispatch\n\n### 5.3 State reducer\n\n - State\n - Create function\n - Register in Store\n\n### 5.4 Selectors\n\n - Create selector\n - Selecting data\n - Fachadas\n\n### 5.5 Effects\n\n - Install\n - Efecto básico\n - Api async effects\n - More Api async effects\n\n## 6 - Deploy Progressive Web Apps\n\n### 6.1 Angular Service Worker con el CLI\n\n - Instalación\n - Modificaciones automáticas\n - Paquetes recomendados\n\n### 6.2 Configuración de caché\n\n - Assets\n - API\n\n### 6.3 Actualizaciones y notificaciones\n\n - Actualización de versiones\n - Notificaciones Push\n\n### 6.4 Shell\n\n - Una animación para amenizar la carga\n\n> WIP\n\n## 7 - Server Side Rendering\n\n### 7.1 Angular Universal\n### 7.2 Despliegue con Node Express\n### 7.3 Variantes: shell y pre-rendering\n\n## 8 - Internacionalización y puesta en producción\n\n### 8.1 Traducciones\n### 8.2 Adaptaciones culturales de tiempo y moneda\n### 8.3 Otras consideraciones para aplicaciones en producción.\n\n## 9 - Web Components\n\n### 9.1 Desarrollo en Angular\n### 9.2 Consumo en cualquier framework\n\n[Mejora ya!](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders/)\n\n[Contenido detallado Angular Basic](../cursos/angular-basic)\n","path":"cursos/angular-business.html","comments":1,"layout":"page","_id":"cljlaq2f8000he096fp0k8jmq","content":"<p><a href=\"https://www.trainingit.es/index.php/producto/curso-angular-avanzado/\">Implantación de buenas prácticas en desarrollos empresariales con Angular.</a></p>\n<h1 id=\"Angular-Business\"><a href=\"#Angular-Business\" class=\"headerlink\" title=\"Angular Business\"></a>Angular Business</h1><h2 id=\"0-Repositorios-profesionales-con-Nx\"><a href=\"#0-Repositorios-profesionales-con-Nx\" class=\"headerlink\" title=\"0 - Repositorios profesionales con Nx\"></a>0 - Repositorios profesionales con Nx</h2><h3 id=\"0-1-Nx-y-el-CLI\"><a href=\"#0-1-Nx-y-el-CLI\" class=\"headerlink\" title=\"0.1 Nx y el CLI\"></a>0.1 Nx y el CLI</h3><ul>\n<li>Instalación de Nx y CLI</li>\n<li>Crear y configurar un workspace</li>\n</ul>\n<h3 id=\"0-1-Estructura-de-un-workspace\"><a href=\"#0-1-Estructura-de-un-workspace\" class=\"headerlink\" title=\"0.1 Estructura de un workspace\"></a>0.1 Estructura de un workspace</h3><ul>\n<li>Apps</li>\n<li>Libs</li>\n</ul>\n<h3 id=\"0-2-Proyectos\"><a href=\"#0-2-Proyectos\" class=\"headerlink\" title=\"0.2 Proyectos\"></a>0.2 Proyectos</h3><ul>\n<li>Frontend webs</li>\n<li>Backend Apis</li>\n</ul>\n<h3 id=\"0-3-Librerias\"><a href=\"#0-3-Librerias\" class=\"headerlink\" title=\"0.3 Librerías\"></a>0.3 Librerías</h3><ul>\n<li>4.1 Librerías en TypeScript</li>\n<li>4.2 Librerías de Angular</li>\n</ul>\n<h2 id=\"1-Testing-de-aplicaciones\"><a href=\"#1-Testing-de-aplicaciones\" class=\"headerlink\" title=\"1 - Testing de aplicaciones\"></a>1 - Testing de aplicaciones</h2><h3 id=\"1-1-Tipos-de-tests\"><a href=\"#1-1-Tipos-de-tests\" class=\"headerlink\" title=\"1.1 Tipos de tests\"></a>1.1 Tipos de tests</h3><ul>\n<li>Integración o e2e</li>\n<li>Unitarios</li>\n</ul>\n<h3 id=\"1-2-Test-de-Integracion-con-Cypress\"><a href=\"#1-2-Test-de-Integracion-con-Cypress\" class=\"headerlink\" title=\"1.2 Test de Integración con Cypress\"></a>1.2 Test de Integración con Cypress</h3><ul>\n<li>Cypress</li>\n<li>Test e2e</li>\n</ul>\n<h3 id=\"1-3-Test-Unitarios-con-Jest\"><a href=\"#1-3-Test-Unitarios-con-Jest\" class=\"headerlink\" title=\"1.3 Test Unitarios con Jest\"></a>1.3 Test Unitarios con Jest</h3><ul>\n<li>Jest</li>\n<li>Test unitarios</li>\n</ul>\n<h2 id=\"2-Deteccion-del-cambio-en-Angular\"><a href=\"#2-Deteccion-del-cambio-en-Angular\" class=\"headerlink\" title=\"2 - Detección del cambio en Angular\"></a>2 - Detección del cambio en Angular</h2><h3 id=\"2-1-Estrategias-de-deteccion-del-cambio\"><a href=\"#2-1-Estrategias-de-deteccion-del-cambio\" class=\"headerlink\" title=\"2.1 Estrategias de detección del cambio\"></a>2.1 Estrategias de detección del cambio</h3><ul>\n<li>Default</li>\n<li>OnPush</li>\n</ul>\n<h3 id=\"2-2-Tecnicas-OnPush\"><a href=\"#2-2-Tecnicas-OnPush\" class=\"headerlink\" title=\"2.2 Técnicas OnPush\"></a>2.2 Técnicas OnPush</h3><ul>\n<li>DetectChanges</li>\n<li>Async</li>\n<li>Inmutable</li>\n</ul>\n<h3 id=\"2-3-Optimizacion\"><a href=\"#2-3-Optimizacion\" class=\"headerlink\" title=\"2.3 Optimización\"></a>2.3 Optimización</h3><ul>\n<li>OnPush es más ligero</li>\n<li>Async, CDR y clone detectan los cambios</li>\n</ul>\n<h2 id=\"3-Componentes-dinamicos-directivas-y-pipes\"><a href=\"#3-Componentes-dinamicos-directivas-y-pipes\" class=\"headerlink\" title=\"3 - Componentes dinámicos, directivas y pipes\"></a>3 - Componentes dinámicos, directivas y pipes</h2><h3 id=\"3-1-Plantillas-de-contenido-dinamico\"><a href=\"#3-1-Plantillas-de-contenido-dinamico\" class=\"headerlink\" title=\"3.1 Plantillas de contenido dinámico\"></a>3.1 Plantillas de contenido dinámico</h3><ul>\n<li>Un componente común</li>\n<li>Implementaciones distintas</li>\n</ul>\n<h3 id=\"3-2-Atributos-custom-con-Directivas\"><a href=\"#3-2-Atributos-custom-con-Directivas\" class=\"headerlink\" title=\"3.2 Atributos custom con Directivas\"></a>3.2 Atributos custom con Directivas</h3><ul>\n<li>Generación de directivas</li>\n<li>Consumo de directivas</li>\n</ul>\n<h3 id=\"3-2-Funciones-de-transformacion-con-Pipes\"><a href=\"#3-2-Funciones-de-transformacion-con-Pipes\" class=\"headerlink\" title=\"3.2 Funciones de transformación con Pipes\"></a>3.2 Funciones de transformación con Pipes</h3><ul>\n<li>Generación de pipes</li>\n<li>Consumo de pipes</li>\n</ul>\n<h2 id=\"4-Redux-con-observables\"><a href=\"#4-Redux-con-observables\" class=\"headerlink\" title=\"4 - Redux con observables\"></a>4 - Redux con observables</h2><h3 id=\"4-1-Arquitectura-del-patron-Redux\"><a href=\"#4-1-Arquitectura-del-patron-Redux\" class=\"headerlink\" title=\"4.1 Arquitectura del patrón Redux\"></a>4.1 Arquitectura del patrón Redux</h3><ul>\n<li>Principios de Redux</li>\n<li>Elementos de Redux</li>\n</ul>\n<h3 id=\"4-2-Implementacion-de-un-Store-con-RxJs\"><a href=\"#4-2-Implementacion-de-un-Store-con-RxJs\" class=\"headerlink\" title=\"4.2 Implementación de un Store con RxJs\"></a>4.2 Implementación de un Store con RxJs</h3><ul>\n<li>El Store observable</li>\n<li>El envío de acciones</li>\n<li>La función reductora de estado</li>\n<li>La selección de suscripciones</li>\n</ul>\n<h2 id=\"5-Redux-con-NgRx\"><a href=\"#5-Redux-con-NgRx\" class=\"headerlink\" title=\"5 - Redux con NgRx\"></a>5 - Redux con NgRx</h2><h3 id=\"5-1-Instalacion-y-configuracion\"><a href=\"#5-1-Instalacion-y-configuracion\" class=\"headerlink\" title=\"5.1 Instalación y configuración\"></a>5.1 Instalación y configuración</h3><ul>\n<li>Instalación de NgRx</li>\n<li>Registro y configuración</li>\n<li>Router y DevTools</li>\n</ul>\n<h3 id=\"5-2-Actions\"><a href=\"#5-2-Actions\" class=\"headerlink\" title=\"5.2 Actions\"></a>5.2 Actions</h3><ul>\n<li>Create</li>\n<li>Dispatch</li>\n</ul>\n<h3 id=\"5-3-State-reducer\"><a href=\"#5-3-State-reducer\" class=\"headerlink\" title=\"5.3 State reducer\"></a>5.3 State reducer</h3><ul>\n<li>State</li>\n<li>Create function</li>\n<li>Register in Store</li>\n</ul>\n<h3 id=\"5-4-Selectors\"><a href=\"#5-4-Selectors\" class=\"headerlink\" title=\"5.4 Selectors\"></a>5.4 Selectors</h3><ul>\n<li>Create selector</li>\n<li>Selecting data</li>\n<li>Fachadas</li>\n</ul>\n<h3 id=\"5-5-Effects\"><a href=\"#5-5-Effects\" class=\"headerlink\" title=\"5.5 Effects\"></a>5.5 Effects</h3><ul>\n<li>Install</li>\n<li>Efecto básico</li>\n<li>Api async effects</li>\n<li>More Api async effects</li>\n</ul>\n<h2 id=\"6-Deploy-Progressive-Web-Apps\"><a href=\"#6-Deploy-Progressive-Web-Apps\" class=\"headerlink\" title=\"6 - Deploy Progressive Web Apps\"></a>6 - Deploy Progressive Web Apps</h2><h3 id=\"6-1-Angular-Service-Worker-con-el-CLI\"><a href=\"#6-1-Angular-Service-Worker-con-el-CLI\" class=\"headerlink\" title=\"6.1 Angular Service Worker con el CLI\"></a>6.1 Angular Service Worker con el CLI</h3><ul>\n<li>Instalación</li>\n<li>Modificaciones automáticas</li>\n<li>Paquetes recomendados</li>\n</ul>\n<h3 id=\"6-2-Configuracion-de-cache\"><a href=\"#6-2-Configuracion-de-cache\" class=\"headerlink\" title=\"6.2 Configuración de caché\"></a>6.2 Configuración de caché</h3><ul>\n<li>Assets</li>\n<li>API</li>\n</ul>\n<h3 id=\"6-3-Actualizaciones-y-notificaciones\"><a href=\"#6-3-Actualizaciones-y-notificaciones\" class=\"headerlink\" title=\"6.3 Actualizaciones y notificaciones\"></a>6.3 Actualizaciones y notificaciones</h3><ul>\n<li>Actualización de versiones</li>\n<li>Notificaciones Push</li>\n</ul>\n<h3 id=\"6-4-Shell\"><a href=\"#6-4-Shell\" class=\"headerlink\" title=\"6.4 Shell\"></a>6.4 Shell</h3><ul>\n<li>Una animación para amenizar la carga</li>\n</ul>\n<blockquote>\n<p>WIP</p>\n</blockquote>\n<h2 id=\"7-Server-Side-Rendering\"><a href=\"#7-Server-Side-Rendering\" class=\"headerlink\" title=\"7 - Server Side Rendering\"></a>7 - Server Side Rendering</h2><h3 id=\"7-1-Angular-Universal\"><a href=\"#7-1-Angular-Universal\" class=\"headerlink\" title=\"7.1 Angular Universal\"></a>7.1 Angular Universal</h3><h3 id=\"7-2-Despliegue-con-Node-Express\"><a href=\"#7-2-Despliegue-con-Node-Express\" class=\"headerlink\" title=\"7.2 Despliegue con Node Express\"></a>7.2 Despliegue con Node Express</h3><h3 id=\"7-3-Variantes-shell-y-pre-rendering\"><a href=\"#7-3-Variantes-shell-y-pre-rendering\" class=\"headerlink\" title=\"7.3 Variantes: shell y pre-rendering\"></a>7.3 Variantes: shell y pre-rendering</h3><h2 id=\"8-Internacionalizacion-y-puesta-en-produccion\"><a href=\"#8-Internacionalizacion-y-puesta-en-produccion\" class=\"headerlink\" title=\"8 - Internacionalización y puesta en producción\"></a>8 - Internacionalización y puesta en producción</h2><h3 id=\"8-1-Traducciones\"><a href=\"#8-1-Traducciones\" class=\"headerlink\" title=\"8.1 Traducciones\"></a>8.1 Traducciones</h3><h3 id=\"8-2-Adaptaciones-culturales-de-tiempo-y-moneda\"><a href=\"#8-2-Adaptaciones-culturales-de-tiempo-y-moneda\" class=\"headerlink\" title=\"8.2 Adaptaciones culturales de tiempo y moneda\"></a>8.2 Adaptaciones culturales de tiempo y moneda</h3><h3 id=\"8-3-Otras-consideraciones-para-aplicaciones-en-produccion\"><a href=\"#8-3-Otras-consideraciones-para-aplicaciones-en-produccion\" class=\"headerlink\" title=\"8.3 Otras consideraciones para aplicaciones en producción.\"></a>8.3 Otras consideraciones para aplicaciones en producción.</h3><h2 id=\"9-Web-Components\"><a href=\"#9-Web-Components\" class=\"headerlink\" title=\"9 - Web Components\"></a>9 - Web Components</h2><h3 id=\"9-1-Desarrollo-en-Angular\"><a href=\"#9-1-Desarrollo-en-Angular\" class=\"headerlink\" title=\"9.1 Desarrollo en Angular\"></a>9.1 Desarrollo en Angular</h3><h3 id=\"9-2-Consumo-en-cualquier-framework\"><a href=\"#9-2-Consumo-en-cualquier-framework\" class=\"headerlink\" title=\"9.2 Consumo en cualquier framework\"></a>9.2 Consumo en cualquier framework</h3><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders/\">Mejora ya!</a></p>\n<p><a href=\"../cursos/angular-basic\">Contenido detallado Angular Basic</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.trainingit.es/index.php/producto/curso-angular-avanzado/\">Implantación de buenas prácticas en desarrollos empresariales con Angular.</a></p>\n<h1 id=\"Angular-Business\"><a href=\"#Angular-Business\" class=\"headerlink\" title=\"Angular Business\"></a>Angular Business</h1><h2 id=\"0-Repositorios-profesionales-con-Nx\"><a href=\"#0-Repositorios-profesionales-con-Nx\" class=\"headerlink\" title=\"0 - Repositorios profesionales con Nx\"></a>0 - Repositorios profesionales con Nx</h2><h3 id=\"0-1-Nx-y-el-CLI\"><a href=\"#0-1-Nx-y-el-CLI\" class=\"headerlink\" title=\"0.1 Nx y el CLI\"></a>0.1 Nx y el CLI</h3><ul>\n<li>Instalación de Nx y CLI</li>\n<li>Crear y configurar un workspace</li>\n</ul>\n<h3 id=\"0-1-Estructura-de-un-workspace\"><a href=\"#0-1-Estructura-de-un-workspace\" class=\"headerlink\" title=\"0.1 Estructura de un workspace\"></a>0.1 Estructura de un workspace</h3><ul>\n<li>Apps</li>\n<li>Libs</li>\n</ul>\n<h3 id=\"0-2-Proyectos\"><a href=\"#0-2-Proyectos\" class=\"headerlink\" title=\"0.2 Proyectos\"></a>0.2 Proyectos</h3><ul>\n<li>Frontend webs</li>\n<li>Backend Apis</li>\n</ul>\n<h3 id=\"0-3-Librerias\"><a href=\"#0-3-Librerias\" class=\"headerlink\" title=\"0.3 Librerías\"></a>0.3 Librerías</h3><ul>\n<li>4.1 Librerías en TypeScript</li>\n<li>4.2 Librerías de Angular</li>\n</ul>\n<h2 id=\"1-Testing-de-aplicaciones\"><a href=\"#1-Testing-de-aplicaciones\" class=\"headerlink\" title=\"1 - Testing de aplicaciones\"></a>1 - Testing de aplicaciones</h2><h3 id=\"1-1-Tipos-de-tests\"><a href=\"#1-1-Tipos-de-tests\" class=\"headerlink\" title=\"1.1 Tipos de tests\"></a>1.1 Tipos de tests</h3><ul>\n<li>Integración o e2e</li>\n<li>Unitarios</li>\n</ul>\n<h3 id=\"1-2-Test-de-Integracion-con-Cypress\"><a href=\"#1-2-Test-de-Integracion-con-Cypress\" class=\"headerlink\" title=\"1.2 Test de Integración con Cypress\"></a>1.2 Test de Integración con Cypress</h3><ul>\n<li>Cypress</li>\n<li>Test e2e</li>\n</ul>\n<h3 id=\"1-3-Test-Unitarios-con-Jest\"><a href=\"#1-3-Test-Unitarios-con-Jest\" class=\"headerlink\" title=\"1.3 Test Unitarios con Jest\"></a>1.3 Test Unitarios con Jest</h3><ul>\n<li>Jest</li>\n<li>Test unitarios</li>\n</ul>\n<h2 id=\"2-Deteccion-del-cambio-en-Angular\"><a href=\"#2-Deteccion-del-cambio-en-Angular\" class=\"headerlink\" title=\"2 - Detección del cambio en Angular\"></a>2 - Detección del cambio en Angular</h2><h3 id=\"2-1-Estrategias-de-deteccion-del-cambio\"><a href=\"#2-1-Estrategias-de-deteccion-del-cambio\" class=\"headerlink\" title=\"2.1 Estrategias de detección del cambio\"></a>2.1 Estrategias de detección del cambio</h3><ul>\n<li>Default</li>\n<li>OnPush</li>\n</ul>\n<h3 id=\"2-2-Tecnicas-OnPush\"><a href=\"#2-2-Tecnicas-OnPush\" class=\"headerlink\" title=\"2.2 Técnicas OnPush\"></a>2.2 Técnicas OnPush</h3><ul>\n<li>DetectChanges</li>\n<li>Async</li>\n<li>Inmutable</li>\n</ul>\n<h3 id=\"2-3-Optimizacion\"><a href=\"#2-3-Optimizacion\" class=\"headerlink\" title=\"2.3 Optimización\"></a>2.3 Optimización</h3><ul>\n<li>OnPush es más ligero</li>\n<li>Async, CDR y clone detectan los cambios</li>\n</ul>\n<h2 id=\"3-Componentes-dinamicos-directivas-y-pipes\"><a href=\"#3-Componentes-dinamicos-directivas-y-pipes\" class=\"headerlink\" title=\"3 - Componentes dinámicos, directivas y pipes\"></a>3 - Componentes dinámicos, directivas y pipes</h2><h3 id=\"3-1-Plantillas-de-contenido-dinamico\"><a href=\"#3-1-Plantillas-de-contenido-dinamico\" class=\"headerlink\" title=\"3.1 Plantillas de contenido dinámico\"></a>3.1 Plantillas de contenido dinámico</h3><ul>\n<li>Un componente común</li>\n<li>Implementaciones distintas</li>\n</ul>\n<h3 id=\"3-2-Atributos-custom-con-Directivas\"><a href=\"#3-2-Atributos-custom-con-Directivas\" class=\"headerlink\" title=\"3.2 Atributos custom con Directivas\"></a>3.2 Atributos custom con Directivas</h3><ul>\n<li>Generación de directivas</li>\n<li>Consumo de directivas</li>\n</ul>\n<h3 id=\"3-2-Funciones-de-transformacion-con-Pipes\"><a href=\"#3-2-Funciones-de-transformacion-con-Pipes\" class=\"headerlink\" title=\"3.2 Funciones de transformación con Pipes\"></a>3.2 Funciones de transformación con Pipes</h3><ul>\n<li>Generación de pipes</li>\n<li>Consumo de pipes</li>\n</ul>\n<h2 id=\"4-Redux-con-observables\"><a href=\"#4-Redux-con-observables\" class=\"headerlink\" title=\"4 - Redux con observables\"></a>4 - Redux con observables</h2><h3 id=\"4-1-Arquitectura-del-patron-Redux\"><a href=\"#4-1-Arquitectura-del-patron-Redux\" class=\"headerlink\" title=\"4.1 Arquitectura del patrón Redux\"></a>4.1 Arquitectura del patrón Redux</h3><ul>\n<li>Principios de Redux</li>\n<li>Elementos de Redux</li>\n</ul>\n<h3 id=\"4-2-Implementacion-de-un-Store-con-RxJs\"><a href=\"#4-2-Implementacion-de-un-Store-con-RxJs\" class=\"headerlink\" title=\"4.2 Implementación de un Store con RxJs\"></a>4.2 Implementación de un Store con RxJs</h3><ul>\n<li>El Store observable</li>\n<li>El envío de acciones</li>\n<li>La función reductora de estado</li>\n<li>La selección de suscripciones</li>\n</ul>\n<h2 id=\"5-Redux-con-NgRx\"><a href=\"#5-Redux-con-NgRx\" class=\"headerlink\" title=\"5 - Redux con NgRx\"></a>5 - Redux con NgRx</h2><h3 id=\"5-1-Instalacion-y-configuracion\"><a href=\"#5-1-Instalacion-y-configuracion\" class=\"headerlink\" title=\"5.1 Instalación y configuración\"></a>5.1 Instalación y configuración</h3><ul>\n<li>Instalación de NgRx</li>\n<li>Registro y configuración</li>\n<li>Router y DevTools</li>\n</ul>\n<h3 id=\"5-2-Actions\"><a href=\"#5-2-Actions\" class=\"headerlink\" title=\"5.2 Actions\"></a>5.2 Actions</h3><ul>\n<li>Create</li>\n<li>Dispatch</li>\n</ul>\n<h3 id=\"5-3-State-reducer\"><a href=\"#5-3-State-reducer\" class=\"headerlink\" title=\"5.3 State reducer\"></a>5.3 State reducer</h3><ul>\n<li>State</li>\n<li>Create function</li>\n<li>Register in Store</li>\n</ul>\n<h3 id=\"5-4-Selectors\"><a href=\"#5-4-Selectors\" class=\"headerlink\" title=\"5.4 Selectors\"></a>5.4 Selectors</h3><ul>\n<li>Create selector</li>\n<li>Selecting data</li>\n<li>Fachadas</li>\n</ul>\n<h3 id=\"5-5-Effects\"><a href=\"#5-5-Effects\" class=\"headerlink\" title=\"5.5 Effects\"></a>5.5 Effects</h3><ul>\n<li>Install</li>\n<li>Efecto básico</li>\n<li>Api async effects</li>\n<li>More Api async effects</li>\n</ul>\n<h2 id=\"6-Deploy-Progressive-Web-Apps\"><a href=\"#6-Deploy-Progressive-Web-Apps\" class=\"headerlink\" title=\"6 - Deploy Progressive Web Apps\"></a>6 - Deploy Progressive Web Apps</h2><h3 id=\"6-1-Angular-Service-Worker-con-el-CLI\"><a href=\"#6-1-Angular-Service-Worker-con-el-CLI\" class=\"headerlink\" title=\"6.1 Angular Service Worker con el CLI\"></a>6.1 Angular Service Worker con el CLI</h3><ul>\n<li>Instalación</li>\n<li>Modificaciones automáticas</li>\n<li>Paquetes recomendados</li>\n</ul>\n<h3 id=\"6-2-Configuracion-de-cache\"><a href=\"#6-2-Configuracion-de-cache\" class=\"headerlink\" title=\"6.2 Configuración de caché\"></a>6.2 Configuración de caché</h3><ul>\n<li>Assets</li>\n<li>API</li>\n</ul>\n<h3 id=\"6-3-Actualizaciones-y-notificaciones\"><a href=\"#6-3-Actualizaciones-y-notificaciones\" class=\"headerlink\" title=\"6.3 Actualizaciones y notificaciones\"></a>6.3 Actualizaciones y notificaciones</h3><ul>\n<li>Actualización de versiones</li>\n<li>Notificaciones Push</li>\n</ul>\n<h3 id=\"6-4-Shell\"><a href=\"#6-4-Shell\" class=\"headerlink\" title=\"6.4 Shell\"></a>6.4 Shell</h3><ul>\n<li>Una animación para amenizar la carga</li>\n</ul>\n<blockquote>\n<p>WIP</p>\n</blockquote>\n<h2 id=\"7-Server-Side-Rendering\"><a href=\"#7-Server-Side-Rendering\" class=\"headerlink\" title=\"7 - Server Side Rendering\"></a>7 - Server Side Rendering</h2><h3 id=\"7-1-Angular-Universal\"><a href=\"#7-1-Angular-Universal\" class=\"headerlink\" title=\"7.1 Angular Universal\"></a>7.1 Angular Universal</h3><h3 id=\"7-2-Despliegue-con-Node-Express\"><a href=\"#7-2-Despliegue-con-Node-Express\" class=\"headerlink\" title=\"7.2 Despliegue con Node Express\"></a>7.2 Despliegue con Node Express</h3><h3 id=\"7-3-Variantes-shell-y-pre-rendering\"><a href=\"#7-3-Variantes-shell-y-pre-rendering\" class=\"headerlink\" title=\"7.3 Variantes: shell y pre-rendering\"></a>7.3 Variantes: shell y pre-rendering</h3><h2 id=\"8-Internacionalizacion-y-puesta-en-produccion\"><a href=\"#8-Internacionalizacion-y-puesta-en-produccion\" class=\"headerlink\" title=\"8 - Internacionalización y puesta en producción\"></a>8 - Internacionalización y puesta en producción</h2><h3 id=\"8-1-Traducciones\"><a href=\"#8-1-Traducciones\" class=\"headerlink\" title=\"8.1 Traducciones\"></a>8.1 Traducciones</h3><h3 id=\"8-2-Adaptaciones-culturales-de-tiempo-y-moneda\"><a href=\"#8-2-Adaptaciones-culturales-de-tiempo-y-moneda\" class=\"headerlink\" title=\"8.2 Adaptaciones culturales de tiempo y moneda\"></a>8.2 Adaptaciones culturales de tiempo y moneda</h3><h3 id=\"8-3-Otras-consideraciones-para-aplicaciones-en-produccion\"><a href=\"#8-3-Otras-consideraciones-para-aplicaciones-en-produccion\" class=\"headerlink\" title=\"8.3 Otras consideraciones para aplicaciones en producción.\"></a>8.3 Otras consideraciones para aplicaciones en producción.</h3><h2 id=\"9-Web-Components\"><a href=\"#9-Web-Components\" class=\"headerlink\" title=\"9 - Web Components\"></a>9 - Web Components</h2><h3 id=\"9-1-Desarrollo-en-Angular\"><a href=\"#9-1-Desarrollo-en-Angular\" class=\"headerlink\" title=\"9.1 Desarrollo en Angular\"></a>9.1 Desarrollo en Angular</h3><h3 id=\"9-2-Consumo-en-cualquier-framework\"><a href=\"#9-2-Consumo-en-cualquier-framework\" class=\"headerlink\" title=\"9.2 Consumo en cualquier framework\"></a>9.2 Consumo en cualquier framework</h3><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders/\">Mejora ya!</a></p>\n<p><a href=\"../cursos/angular-basic\">Contenido detallado Angular Basic</a></p>\n"},{"title":"Cursos Online de Angular","updated":"2021-06-10T08:07:39.000Z","date":"2019-03-20T09:07:39.000Z","_content":"\n# Cursos en video\n\n#### - A tu ritmo\n\n#### - Repasa en cualquier momento\n\n# Con calendario\n\n#### - Fechas de inicio y final\n\n#### - Motivación extra\n\n# Con prácticas\n\n#### - Evaluadas por el profesor\n\n#### - Individual o en grupo\n\n# Con soluciones\n\n#### - Foro de preguntas y respuestas\n\n#### - Ayuda del profesor\n\n## [Haz clic aquí e infórmate más](https://www.trainingit.es/index.php/producto/curso-angular-avanzado/)\n\n> Con diploma acreditativo, bolsa de trabajo y bonificables por Fundae.\n> -- <cite>Aprende online con Alberto Basalo</cite>\n","source":"Cursos/index.md","raw":"---\ntitle: Cursos Online de Angular\npermalink: cursos\nupdated: \"2021-06-10 10:07:39\"\ndate: 2019-03-20 10:07:39\n---\n\n# Cursos en video\n\n#### - A tu ritmo\n\n#### - Repasa en cualquier momento\n\n# Con calendario\n\n#### - Fechas de inicio y final\n\n#### - Motivación extra\n\n# Con prácticas\n\n#### - Evaluadas por el profesor\n\n#### - Individual o en grupo\n\n# Con soluciones\n\n#### - Foro de preguntas y respuestas\n\n#### - Ayuda del profesor\n\n## [Haz clic aquí e infórmate más](https://www.trainingit.es/index.php/producto/curso-angular-avanzado/)\n\n> Con diploma acreditativo, bolsa de trabajo y bonificables por Fundae.\n> -- <cite>Aprende online con Alberto Basalo</cite>\n","path":"cursos.html","comments":1,"layout":"page","_id":"cljlaq2fa000le09650s8b1u7","content":"<h1 id=\"Cursos-en-video\"><a href=\"#Cursos-en-video\" class=\"headerlink\" title=\"Cursos en video\"></a>Cursos en video</h1><h4 id=\"A-tu-ritmo\"><a href=\"#A-tu-ritmo\" class=\"headerlink\" title=\"- A tu ritmo\"></a>- A tu ritmo</h4><h4 id=\"Repasa-en-cualquier-momento\"><a href=\"#Repasa-en-cualquier-momento\" class=\"headerlink\" title=\"- Repasa en cualquier momento\"></a>- Repasa en cualquier momento</h4><h1 id=\"Con-calendario\"><a href=\"#Con-calendario\" class=\"headerlink\" title=\"Con calendario\"></a>Con calendario</h1><h4 id=\"Fechas-de-inicio-y-final\"><a href=\"#Fechas-de-inicio-y-final\" class=\"headerlink\" title=\"- Fechas de inicio y final\"></a>- Fechas de inicio y final</h4><h4 id=\"Motivacion-extra\"><a href=\"#Motivacion-extra\" class=\"headerlink\" title=\"- Motivación extra\"></a>- Motivación extra</h4><h1 id=\"Con-practicas\"><a href=\"#Con-practicas\" class=\"headerlink\" title=\"Con prácticas\"></a>Con prácticas</h1><h4 id=\"Evaluadas-por-el-profesor\"><a href=\"#Evaluadas-por-el-profesor\" class=\"headerlink\" title=\"- Evaluadas por el profesor\"></a>- Evaluadas por el profesor</h4><h4 id=\"Individual-o-en-grupo\"><a href=\"#Individual-o-en-grupo\" class=\"headerlink\" title=\"- Individual o en grupo\"></a>- Individual o en grupo</h4><h1 id=\"Con-soluciones\"><a href=\"#Con-soluciones\" class=\"headerlink\" title=\"Con soluciones\"></a>Con soluciones</h1><h4 id=\"Foro-de-preguntas-y-respuestas\"><a href=\"#Foro-de-preguntas-y-respuestas\" class=\"headerlink\" title=\"- Foro de preguntas y respuestas\"></a>- Foro de preguntas y respuestas</h4><h4 id=\"Ayuda-del-profesor\"><a href=\"#Ayuda-del-profesor\" class=\"headerlink\" title=\"- Ayuda del profesor\"></a>- Ayuda del profesor</h4><h2 id=\"Haz-clic-aqui-e-informate-mas\"><a href=\"#Haz-clic-aqui-e-informate-mas\" class=\"headerlink\" title=\"Haz clic aquí e infórmate más\"></a><a href=\"https://www.trainingit.es/index.php/producto/curso-angular-avanzado/\">Haz clic aquí e infórmate más</a></h2><blockquote>\n<p>Con diploma acreditativo, bolsa de trabajo y bonificables por Fundae.<br>– <cite>Aprende online con Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Cursos-en-video\"><a href=\"#Cursos-en-video\" class=\"headerlink\" title=\"Cursos en video\"></a>Cursos en video</h1><h4 id=\"A-tu-ritmo\"><a href=\"#A-tu-ritmo\" class=\"headerlink\" title=\"- A tu ritmo\"></a>- A tu ritmo</h4><h4 id=\"Repasa-en-cualquier-momento\"><a href=\"#Repasa-en-cualquier-momento\" class=\"headerlink\" title=\"- Repasa en cualquier momento\"></a>- Repasa en cualquier momento</h4><h1 id=\"Con-calendario\"><a href=\"#Con-calendario\" class=\"headerlink\" title=\"Con calendario\"></a>Con calendario</h1><h4 id=\"Fechas-de-inicio-y-final\"><a href=\"#Fechas-de-inicio-y-final\" class=\"headerlink\" title=\"- Fechas de inicio y final\"></a>- Fechas de inicio y final</h4><h4 id=\"Motivacion-extra\"><a href=\"#Motivacion-extra\" class=\"headerlink\" title=\"- Motivación extra\"></a>- Motivación extra</h4><h1 id=\"Con-practicas\"><a href=\"#Con-practicas\" class=\"headerlink\" title=\"Con prácticas\"></a>Con prácticas</h1><h4 id=\"Evaluadas-por-el-profesor\"><a href=\"#Evaluadas-por-el-profesor\" class=\"headerlink\" title=\"- Evaluadas por el profesor\"></a>- Evaluadas por el profesor</h4><h4 id=\"Individual-o-en-grupo\"><a href=\"#Individual-o-en-grupo\" class=\"headerlink\" title=\"- Individual o en grupo\"></a>- Individual o en grupo</h4><h1 id=\"Con-soluciones\"><a href=\"#Con-soluciones\" class=\"headerlink\" title=\"Con soluciones\"></a>Con soluciones</h1><h4 id=\"Foro-de-preguntas-y-respuestas\"><a href=\"#Foro-de-preguntas-y-respuestas\" class=\"headerlink\" title=\"- Foro de preguntas y respuestas\"></a>- Foro de preguntas y respuestas</h4><h4 id=\"Ayuda-del-profesor\"><a href=\"#Ayuda-del-profesor\" class=\"headerlink\" title=\"- Ayuda del profesor\"></a>- Ayuda del profesor</h4><h2 id=\"Haz-clic-aqui-e-informate-mas\"><a href=\"#Haz-clic-aqui-e-informate-mas\" class=\"headerlink\" title=\"Haz clic aquí e infórmate más\"></a><a href=\"https://www.trainingit.es/index.php/producto/curso-angular-avanzado/\">Haz clic aquí e infórmate más</a></h2><blockquote>\n<p>Con diploma acreditativo, bolsa de trabajo y bonificables por Fundae.<br>– <cite>Aprende online con Alberto Basalo</cite></p>\n</blockquote>\n"},{"title":"[object Object]","tags":null,"_content":"","source":"scaffolds/draft.md","raw":"---\ntitle: {{ title }}\ntags:\n---\n","date":"2023-07-02T10:25:58.513Z","updated":"2023-07-02T10:25:58.513Z","path":"scaffolds/draft.html","comments":1,"layout":"page","_id":"cljlaq2fb000pe0968zitglnd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[object Object]","date":"2023-07-02T10:25:58.513Z","_content":"","source":"scaffolds/page.md","raw":"---\ntitle: {{ title }}\ndate: {{ date }}\n---\n","updated":"2023-07-02T10:25:58.513Z","path":"scaffolds/page.html","comments":1,"layout":"page","_id":"cljlaq2fc000se0961lz2fbue","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[object Object]","date":"2023-07-02T10:25:58.514Z","tags":null,"_content":"","source":"scaffolds/post.md","raw":"---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n","updated":"2023-07-02T10:25:58.514Z","path":"scaffolds/post.html","comments":1,"layout":"page","_id":"cljlaq2fc000ve0965wpcal5r","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Node 6.0.0 actualización con nvm","id":"11","updated":"2016-05-05T08:02:26.000Z","date":"2016-05-05T07:39:40.000Z","_content":"\nAcabamos de recibir la buena noticia de la versión 6 de **NodeJS**. En este caso con mejoras de rendimiento e incorporación de sintaxis de **ES6**. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama [nvm](https://github.com/creationix/nvm)\n\nEstos son los pasos que has de seguir para instalar la herramienta.\n\nSe recomienda desinstalar las versiones de **node** y **npm** instaladas previamente. No es obligatorio.\n\n#### LINUX & OS X\n\n1- Comprobamos que tenemos instaladas las dependencias\n1.1 - Dependencias **Linux**\n```\nsudo apt-get update\nsudo apt-get install build-essential\n```\n\n1.2 -Dependencias **OSX** (herramientas de linea de comandos para XCode)\n```\nxcode-select --install\n```\n\n\n2- Descargamos y ejecutamos el script de instalación\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\n\n3- Comprobamos que está instalado **NVM**\n```\ncommand -v nvm\n```\n*debe devolver nvm*\n\n\n4- Instalamos la versión de Node que deseamos\n```\nnvm install 6.0.0\n```\n\n5- Elegimos la versión de Node instalada que deseamos usar\n\n```\nnvm use 6.0.0\n```\n\n#### WINDOWS\n\nPara **Windows** no existe una versión *nativa* de **nvm**, pero si hay dos opciones para gestionar las versiones de node instaladas.\n\n1- **nvm-windows**\n\thttps://github.com/coreybutler/nvm-windows\n\tEs un wrapper de npm para windows, el instalador se encuentra en la URL (https://github.com/coreybutler/nvm/releases).\n\nLos `comandos` para instalar y la versión de Node son los mismos que en Linux y OSX.\n\n2- **nodist**\nEs un gestor de versiones parecido a NVM solo para Windows\n\tLa URL del instalador (https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe).\n\tLos comandos se encuentran en la documentación. (https://github.com/marcelklehr/nodist)","source":"_posts/Node-6-0-0-actualizacion-con-nvm.md","raw":"---\ntitle: Node 6.0.0 actualización con nvm\ntags:\n- NodeJS\n- Introducción\npermalink: node-6-0-0-actualizacion-con-nvm\nid: 11\nupdated: '2016-05-05 10:02:26'\ndate: 2016-05-05 09:39:40\n---\n\nAcabamos de recibir la buena noticia de la versión 6 de **NodeJS**. En este caso con mejoras de rendimiento e incorporación de sintaxis de **ES6**. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama [nvm](https://github.com/creationix/nvm)\n\nEstos son los pasos que has de seguir para instalar la herramienta.\n\nSe recomienda desinstalar las versiones de **node** y **npm** instaladas previamente. No es obligatorio.\n\n#### LINUX & OS X\n\n1- Comprobamos que tenemos instaladas las dependencias\n1.1 - Dependencias **Linux**\n```\nsudo apt-get update\nsudo apt-get install build-essential\n```\n\n1.2 -Dependencias **OSX** (herramientas de linea de comandos para XCode)\n```\nxcode-select --install\n```\n\n\n2- Descargamos y ejecutamos el script de instalación\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\n\n3- Comprobamos que está instalado **NVM**\n```\ncommand -v nvm\n```\n*debe devolver nvm*\n\n\n4- Instalamos la versión de Node que deseamos\n```\nnvm install 6.0.0\n```\n\n5- Elegimos la versión de Node instalada que deseamos usar\n\n```\nnvm use 6.0.0\n```\n\n#### WINDOWS\n\nPara **Windows** no existe una versión *nativa* de **nvm**, pero si hay dos opciones para gestionar las versiones de node instaladas.\n\n1- **nvm-windows**\n\thttps://github.com/coreybutler/nvm-windows\n\tEs un wrapper de npm para windows, el instalador se encuentra en la URL (https://github.com/coreybutler/nvm/releases).\n\nLos `comandos` para instalar y la versión de Node son los mismos que en Linux y OSX.\n\n2- **nodist**\nEs un gestor de versiones parecido a NVM solo para Windows\n\tLa URL del instalador (https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe).\n\tLos comandos se encuentran en la documentación. (https://github.com/marcelklehr/nodist)","slug":"Node-6-0-0-actualizacion-con-nvm","published":1,"__permalink":"node-6-0-0-actualizacion-con-nvm","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2es0001e096eur8d6il","content":"<p>Acabamos de recibir la buena noticia de la versión 6 de <strong>NodeJS</strong>. En este caso con mejoras de rendimiento e incorporación de sintaxis de <strong>ES6</strong>. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama <a href=\"https://github.com/creationix/nvm\">nvm</a></p>\n<p>Estos son los pasos que has de seguir para instalar la herramienta.</p>\n<p>Se recomienda desinstalar las versiones de <strong>node</strong> y <strong>npm</strong> instaladas previamente. No es obligatorio.</p>\n<h4 id=\"LINUX-amp-OS-X\"><a href=\"#LINUX-amp-OS-X\" class=\"headerlink\" title=\"LINUX &amp; OS X\"></a>LINUX &amp; OS X</h4><p>1- Comprobamos que tenemos instaladas las dependencias<br>1.1 - Dependencias <strong>Linux</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>\n\n<p>1.2 -Dependencias <strong>OSX</strong> (herramientas de linea de comandos para XCode)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n\n<p>2- Descargamos y ejecutamos el script de instalación</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n\n<p>3- Comprobamos que está instalado <strong>NVM</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command -v nvm</span><br></pre></td></tr></table></figure>\n<p><em>debe devolver nvm</em></p>\n<p>4- Instalamos la versión de Node que deseamos</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 6.0.0</span><br></pre></td></tr></table></figure>\n\n<p>5- Elegimos la versión de Node instalada que deseamos usar</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 6.0.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"WINDOWS\"><a href=\"#WINDOWS\" class=\"headerlink\" title=\"WINDOWS\"></a>WINDOWS</h4><p>Para <strong>Windows</strong> no existe una versión <em>nativa</em> de <strong>nvm</strong>, pero si hay dos opciones para gestionar las versiones de node instaladas.</p>\n<p>1- <strong>nvm-windows</strong><br>    <a href=\"https://github.com/coreybutler/nvm-windows\">https://github.com/coreybutler/nvm-windows</a><br>    Es un wrapper de npm para windows, el instalador se encuentra en la URL (<a href=\"https://github.com/coreybutler/nvm/releases\">https://github.com/coreybutler/nvm/releases</a>).</p>\n<p>Los <code>comandos</code> para instalar y la versión de Node son los mismos que en Linux y OSX.</p>\n<p>2- <strong>nodist</strong><br>Es un gestor de versiones parecido a NVM solo para Windows<br>    La URL del instalador (<a href=\"https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe\">https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe</a>).<br>    Los comandos se encuentran en la documentación. (<a href=\"https://github.com/marcelklehr/nodist\">https://github.com/marcelklehr/nodist</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Acabamos de recibir la buena noticia de la versión 6 de <strong>NodeJS</strong>. En este caso con mejoras de rendimiento e incorporación de sintaxis de <strong>ES6</strong>. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama <a href=\"https://github.com/creationix/nvm\">nvm</a></p>\n<p>Estos son los pasos que has de seguir para instalar la herramienta.</p>\n<p>Se recomienda desinstalar las versiones de <strong>node</strong> y <strong>npm</strong> instaladas previamente. No es obligatorio.</p>\n<h4 id=\"LINUX-amp-OS-X\"><a href=\"#LINUX-amp-OS-X\" class=\"headerlink\" title=\"LINUX &amp; OS X\"></a>LINUX &amp; OS X</h4><p>1- Comprobamos que tenemos instaladas las dependencias<br>1.1 - Dependencias <strong>Linux</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>\n\n<p>1.2 -Dependencias <strong>OSX</strong> (herramientas de linea de comandos para XCode)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n\n<p>2- Descargamos y ejecutamos el script de instalación</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n\n<p>3- Comprobamos que está instalado <strong>NVM</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command -v nvm</span><br></pre></td></tr></table></figure>\n<p><em>debe devolver nvm</em></p>\n<p>4- Instalamos la versión de Node que deseamos</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 6.0.0</span><br></pre></td></tr></table></figure>\n\n<p>5- Elegimos la versión de Node instalada que deseamos usar</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 6.0.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"WINDOWS\"><a href=\"#WINDOWS\" class=\"headerlink\" title=\"WINDOWS\"></a>WINDOWS</h4><p>Para <strong>Windows</strong> no existe una versión <em>nativa</em> de <strong>nvm</strong>, pero si hay dos opciones para gestionar las versiones de node instaladas.</p>\n<p>1- <strong>nvm-windows</strong><br>    <a href=\"https://github.com/coreybutler/nvm-windows\">https://github.com/coreybutler/nvm-windows</a><br>    Es un wrapper de npm para windows, el instalador se encuentra en la URL (<a href=\"https://github.com/coreybutler/nvm/releases\">https://github.com/coreybutler/nvm/releases</a>).</p>\n<p>Los <code>comandos</code> para instalar y la versión de Node son los mismos que en Linux y OSX.</p>\n<p>2- <strong>nodist</strong><br>Es un gestor de versiones parecido a NVM solo para Windows<br>    La URL del instalador (<a href=\"https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe\">https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe</a>).<br>    Los comandos se encuentran en la documentación. (<a href=\"https://github.com/marcelklehr/nodist\">https://github.com/marcelklehr/nodist</a>)</p>\n"},{"title":"Para qué puedo usar NodeJS","id":"20","updated":"2015-08-20T12:53:50.000Z","date":"2015-08-20T12:28:01.000Z","_content":"\nNodeJS se ha hecho muy popular por dos razones relacionas: **potencia y escalabilidad.** Ambas derivadas de su modelo de *ejecución asíncrona no bloqueante*.\n\nSe basa en el lenguaje **JavaScript**: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.\n\nEl uso más inmediato de NodeJS está en la **programación de servicios web**. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el *JavaScript del lado del servidor.*\n\nPero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir **aplicaciones de escritorio** con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para **scripts de administración o monitorización** en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los *development workflows* de cada vez más empresas de programación en cualquier lenguaje.\n\nDada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en **tiempo real**. Y por su escasa demanda de *hardware* se usa también en proyectos de **Internet of Things**\n\nEn definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje **de propósito general.**\n\n\n","source":"_posts/Para-que-puedo-usar-NodeJS.md","raw":"---\ntitle: Para qué puedo usar NodeJS\ntags:\n- NodeJS\n- Introducción\npermalink: para-que-puedo-usar-nodejs\nid: 20\nupdated: '2015-08-20 14:53:50'\ndate: 2015-08-20 14:28:01\n---\n\nNodeJS se ha hecho muy popular por dos razones relacionas: **potencia y escalabilidad.** Ambas derivadas de su modelo de *ejecución asíncrona no bloqueante*.\n\nSe basa en el lenguaje **JavaScript**: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.\n\nEl uso más inmediato de NodeJS está en la **programación de servicios web**. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el *JavaScript del lado del servidor.*\n\nPero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir **aplicaciones de escritorio** con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para **scripts de administración o monitorización** en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los *development workflows* de cada vez más empresas de programación en cualquier lenguaje.\n\nDada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en **tiempo real**. Y por su escasa demanda de *hardware* se usa también en proyectos de **Internet of Things**\n\nEn definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje **de propósito general.**\n\n\n","slug":"Para-que-puedo-usar-NodeJS","published":1,"__permalink":"para-que-puedo-usar-nodejs","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2et0003e096hfhv2b60","content":"<p>NodeJS se ha hecho muy popular por dos razones relacionas: <strong>potencia y escalabilidad.</strong> Ambas derivadas de su modelo de <em>ejecución asíncrona no bloqueante</em>.</p>\n<p>Se basa en el lenguaje <strong>JavaScript</strong>: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.</p>\n<p>El uso más inmediato de NodeJS está en la <strong>programación de servicios web</strong>. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el <em>JavaScript del lado del servidor.</em></p>\n<p>Pero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir <strong>aplicaciones de escritorio</strong> con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para <strong>scripts de administración o monitorización</strong> en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los <em>development workflows</em> de cada vez más empresas de programación en cualquier lenguaje.</p>\n<p>Dada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en <strong>tiempo real</strong>. Y por su escasa demanda de <em>hardware</em> se usa también en proyectos de <strong>Internet of Things</strong></p>\n<p>En definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje <strong>de propósito general.</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>NodeJS se ha hecho muy popular por dos razones relacionas: <strong>potencia y escalabilidad.</strong> Ambas derivadas de su modelo de <em>ejecución asíncrona no bloqueante</em>.</p>\n<p>Se basa en el lenguaje <strong>JavaScript</strong>: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.</p>\n<p>El uso más inmediato de NodeJS está en la <strong>programación de servicios web</strong>. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el <em>JavaScript del lado del servidor.</em></p>\n<p>Pero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir <strong>aplicaciones de escritorio</strong> con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para <strong>scripts de administración o monitorización</strong> en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los <em>development workflows</em> de cada vez más empresas de programación en cualquier lenguaje.</p>\n<p>Dada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en <strong>tiempo real</strong>. Y por su escasa demanda de <em>hardware</em> se usa también en proyectos de <strong>Internet of Things</strong></p>\n<p>En definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje <strong>de propósito general.</strong></p>\n"},{"title":"TypeScript, programa en el front igual que en el back","id":"23","updated":"2017-03-14T18:10:13.000Z","date":"2017-03-14T18:02:11.000Z","thumbnail":"/css/images/typescript.jpg","_content":"\nHasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo *back end y el front end*. El primero era el de los programadores de verdad, con **lenguajes serios y patrones de diseño**. El último era el universo de los diseñadores, con lenguajes de segundo nivel y **micro scripts o código espagueti** descontrolado.\n\n<!-- more -->\n\nPero la llegada de los frameworks *MVC* en el cliente, llevó **grandes cantidades de código al navegador** y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre *back y front*.\n\nPero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo *Java* y *C#* las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo *JavaScript*.\n\nY entonces eclosionó *TypeScript*. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a *JavaScript* al siguiente nivel. Con **tipos estáticos** (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia **suaviza la rampa de entrada al *front* para los desarrolladores *back***.\n\nYa no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el *TypeScript* si dominas y te gusta la POO, serás un *full stack* cuestión de horas.","source":"_posts/TypeScript-programa-en-el-front-igual-que-en-el-back.md","raw":"---\ntitle: 'TypeScript, programa en el front igual que en el back'\ntags:\n- TypeScript\n- Opinión\npermalink: typescript-programa-en-el-front-igual-que-en-el-back\nid: 23\nupdated: '2017-03-14 19:10:13'\ndate: 2017-03-14 19:02:11\nthumbnail: /css/images/typescript.jpg\n---\n\nHasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo *back end y el front end*. El primero era el de los programadores de verdad, con **lenguajes serios y patrones de diseño**. El último era el universo de los diseñadores, con lenguajes de segundo nivel y **micro scripts o código espagueti** descontrolado.\n\n<!-- more -->\n\nPero la llegada de los frameworks *MVC* en el cliente, llevó **grandes cantidades de código al navegador** y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre *back y front*.\n\nPero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo *Java* y *C#* las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo *JavaScript*.\n\nY entonces eclosionó *TypeScript*. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a *JavaScript* al siguiente nivel. Con **tipos estáticos** (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia **suaviza la rampa de entrada al *front* para los desarrolladores *back***.\n\nYa no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el *TypeScript* si dominas y te gusta la POO, serás un *full stack* cuestión de horas.","slug":"TypeScript-programa-en-el-front-igual-que-en-el-back","published":1,"__permalink":"typescript-programa-en-el-front-igual-que-en-el-back","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2ez0006e096e9v9gwdh","content":"<p>Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo <em>back end y el front end</em>. El primero era el de los programadores de verdad, con <strong>lenguajes serios y patrones de diseño</strong>. El último era el universo de los diseñadores, con lenguajes de segundo nivel y <strong>micro scripts o código espagueti</strong> descontrolado.</p>\n<span id=\"more\"></span>\n\n<p>Pero la llegada de los frameworks <em>MVC</em> en el cliente, llevó <strong>grandes cantidades de código al navegador</strong> y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre <em>back y front</em>.</p>\n<p>Pero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo <em>Java</em> y <em>C#</em> las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo <em>JavaScript</em>.</p>\n<p>Y entonces eclosionó <em>TypeScript</em>. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a <em>JavaScript</em> al siguiente nivel. Con <strong>tipos estáticos</strong> (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia <strong>suaviza la rampa de entrada al <em>front</em> para los desarrolladores <em>back</em></strong>.</p>\n<p>Ya no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el <em>TypeScript</em> si dominas y te gusta la POO, serás un <em>full stack</em> cuestión de horas.</p>\n","site":{"data":{}},"excerpt":"<p>Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo <em>back end y el front end</em>. El primero era el de los programadores de verdad, con <strong>lenguajes serios y patrones de diseño</strong>. El último era el universo de los diseñadores, con lenguajes de segundo nivel y <strong>micro scripts o código espagueti</strong> descontrolado.</p>","more":"<p>Pero la llegada de los frameworks <em>MVC</em> en el cliente, llevó <strong>grandes cantidades de código al navegador</strong> y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre <em>back y front</em>.</p>\n<p>Pero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo <em>Java</em> y <em>C#</em> las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo <em>JavaScript</em>.</p>\n<p>Y entonces eclosionó <em>TypeScript</em>. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a <em>JavaScript</em> al siguiente nivel. Con <strong>tipos estáticos</strong> (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia <strong>suaviza la rampa de entrada al <em>front</em> para los desarrolladores <em>back</em></strong>.</p>\n<p>Ya no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el <em>TypeScript</em> si dominas y te gusta la POO, serás un <em>full stack</em> cuestión de horas.</p>"},{"title":"Soluciones FrontEnd 2016","id":"7","updated":"2016-01-14T10:17:31.000Z","date":"2016-01-14T09:39:32.000Z","_content":"\nInicio el año proponiendo una selección de tecnologías que serán **tendencia en el desarrollo front end** durante este 2016.\n\n* Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.\n\n* Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo **[JSPM](http://jspm.io/)**, que se incorporará definitivamente a nuestro toolbox durante el 2016.\n\n* De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente **[AngularJS1.5](https://www.angularjs.org/)**\n\n* En la parte visual, el look & feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería **[AngularMaterial](https://material.angularjs.org/latest/)** es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.\n\nEn [esta presentación](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing) tienes más información acerca de lo que llamo **frontEdge** : tecnología utilizable, de última generación y con enorme potencial.\n\n[Presentación frontEdge](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing)\n\nSi tienes tiempo, mira [este vídeo](https://www.youtube.com/watch?v=vJZb_rs2vvU) con una charla en la que comentamos estas y otras tecnologías para programadores.\n\n[video frontEdge](https://www.youtube.com/watch?v=vJZb_rs2vvU)","source":"_posts/Soluciones-FrontEnd-2016.md","raw":"---\ntitle: Soluciones FrontEnd 2016\ntags:\n- FrontEnd\n- AngularJS\n- Opinión\npermalink: soluciones-frontend-2016\nid: 7\nupdated: '2016-01-14 11:17:31'\ndate: 2016-01-14 10:39:32\n---\n\nInicio el año proponiendo una selección de tecnologías que serán **tendencia en el desarrollo front end** durante este 2016.\n\n* Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.\n\n* Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo **[JSPM](http://jspm.io/)**, que se incorporará definitivamente a nuestro toolbox durante el 2016.\n\n* De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente **[AngularJS1.5](https://www.angularjs.org/)**\n\n* En la parte visual, el look & feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería **[AngularMaterial](https://material.angularjs.org/latest/)** es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.\n\nEn [esta presentación](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing) tienes más información acerca de lo que llamo **frontEdge** : tecnología utilizable, de última generación y con enorme potencial.\n\n[Presentación frontEdge](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing)\n\nSi tienes tiempo, mira [este vídeo](https://www.youtube.com/watch?v=vJZb_rs2vvU) con una charla en la que comentamos estas y otras tecnologías para programadores.\n\n[video frontEdge](https://www.youtube.com/watch?v=vJZb_rs2vvU)","slug":"Soluciones-FrontEnd-2016","published":1,"__permalink":"soluciones-frontend-2016","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2f40008e0968xuy7jip","content":"<p>Inicio el año proponiendo una selección de tecnologías que serán <strong>tendencia en el desarrollo front end</strong> durante este 2016.</p>\n<ul>\n<li><p>Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\">ES6</a></strong>. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.</p>\n</li>\n<li><p>Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo <strong><a href=\"http://jspm.io/\">JSPM</a></strong>, que se incorporará definitivamente a nuestro toolbox durante el 2016.</p>\n</li>\n<li><p>De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente <strong><a href=\"https://www.angularjs.org/\">AngularJS1.5</a></strong></p>\n</li>\n<li><p>En la parte visual, el look &amp; feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería <strong><a href=\"https://material.angularjs.org/latest/\">AngularMaterial</a></strong> es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.</p>\n</li>\n</ul>\n<p>En <a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\">esta presentación</a> tienes más información acerca de lo que llamo <strong>frontEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p>\n<p><a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\">Presentación frontEdge</a></p>\n<p>Si tienes tiempo, mira <a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\">este vídeo</a> con una charla en la que comentamos estas y otras tecnologías para programadores.</p>\n<p><a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\">video frontEdge</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Inicio el año proponiendo una selección de tecnologías que serán <strong>tendencia en el desarrollo front end</strong> durante este 2016.</p>\n<ul>\n<li><p>Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\">ES6</a></strong>. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.</p>\n</li>\n<li><p>Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo <strong><a href=\"http://jspm.io/\">JSPM</a></strong>, que se incorporará definitivamente a nuestro toolbox durante el 2016.</p>\n</li>\n<li><p>De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente <strong><a href=\"https://www.angularjs.org/\">AngularJS1.5</a></strong></p>\n</li>\n<li><p>En la parte visual, el look &amp; feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería <strong><a href=\"https://material.angularjs.org/latest/\">AngularMaterial</a></strong> es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.</p>\n</li>\n</ul>\n<p>En <a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\">esta presentación</a> tienes más información acerca de lo que llamo <strong>frontEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p>\n<p><a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\">Presentación frontEdge</a></p>\n<p>Si tienes tiempo, mira <a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\">este vídeo</a> con una charla en la que comentamos estas y otras tecnologías para programadores.</p>\n<p><a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\">video frontEdge</a></p>\n"},{"title":"Soluciones BackEnd 2016","id":"8","updated":"2016-04-01T06:02:55.000Z","date":"2016-03-21T10:50:58.000Z","_content":"\nLas soluciones JavaScript para el servidor que marcan **tendencia en el desarrollo back end** durante este 2016. Continuación de la saga que iniciamos con **[FrontEdge](http://academia-binaria.com/soluciones-frontend-2016/)**.\n\n* Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. En el lado del servidor destaco la disponibilidad de [Promesas](http://es6-features.org/#PromiseUsage) de forma nativa..\n\n* Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que *hay que cumplir con el estándar REST y hay que documentar* todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses **[RAML](http://raml.org/)**. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.\n\n* El ya viejo conocido **[NodeJS](https://nodejs.org/)** se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.\n\n* En la base de datos irrumpe con fuerza la nueva versión de **[MongoDB 3.2](https://docs.mongodb.org/manual/release-notes/3.2/)**, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado *join* entre colecciones .\n\nEn [esta presentación](https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing) tienes más información acerca de lo que llamo **backEdge** : tecnología utilizable, de última generación y con enorme potencial.\n\nEn [este video](https://youtu.be/cfmJQjBfM-s) tienes la charla que di con o que llamo **Desarrollo Web** presentando las tendencias tecnológicas del 2016.","source":"_posts/Soluciones-BackEnd-2016.md","raw":"---\ntitle: Soluciones BackEnd 2016\ntags:\n- BackEnd\n- NodeJS\n- MongoDB\n- Opinión\npermalink: soluciones-backend-2016\nid: 8\nupdated: '2016-04-01 08:02:55'\ndate: 2016-03-21 11:50:58\n---\n\nLas soluciones JavaScript para el servidor que marcan **tendencia en el desarrollo back end** durante este 2016. Continuación de la saga que iniciamos con **[FrontEdge](http://academia-binaria.com/soluciones-frontend-2016/)**.\n\n* Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. En el lado del servidor destaco la disponibilidad de [Promesas](http://es6-features.org/#PromiseUsage) de forma nativa..\n\n* Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que *hay que cumplir con el estándar REST y hay que documentar* todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses **[RAML](http://raml.org/)**. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.\n\n* El ya viejo conocido **[NodeJS](https://nodejs.org/)** se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.\n\n* En la base de datos irrumpe con fuerza la nueva versión de **[MongoDB 3.2](https://docs.mongodb.org/manual/release-notes/3.2/)**, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado *join* entre colecciones .\n\nEn [esta presentación](https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing) tienes más información acerca de lo que llamo **backEdge** : tecnología utilizable, de última generación y con enorme potencial.\n\nEn [este video](https://youtu.be/cfmJQjBfM-s) tienes la charla que di con o que llamo **Desarrollo Web** presentando las tendencias tecnológicas del 2016.","slug":"Soluciones-BackEnd-2016","published":1,"__permalink":"soluciones-backend-2016","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2f5000ae0966qy4et2p","content":"<p>Las soluciones JavaScript para el servidor que marcan <strong>tendencia en el desarrollo back end</strong> durante este 2016. Continuación de la saga que iniciamos con <strong><a href=\"http://academia-binaria.com/soluciones-frontend-2016/\">FrontEdge</a></strong>.</p>\n<ul>\n<li><p>Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\">ES6</a></strong>. En el lado del servidor destaco la disponibilidad de <a href=\"http://es6-features.org/#PromiseUsage\">Promesas</a> de forma nativa..</p>\n</li>\n<li><p>Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que <em>hay que cumplir con el estándar REST y hay que documentar</em> todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses <strong><a href=\"http://raml.org/\">RAML</a></strong>. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.</p>\n</li>\n<li><p>El ya viejo conocido <strong><a href=\"https://nodejs.org/\">NodeJS</a></strong> se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.</p>\n</li>\n<li><p>En la base de datos irrumpe con fuerza la nueva versión de <strong><a href=\"https://docs.mongodb.org/manual/release-notes/3.2/\">MongoDB 3.2</a></strong>, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado <em>join</em> entre colecciones .</p>\n</li>\n</ul>\n<p>En <a href=\"https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing\">esta presentación</a> tienes más información acerca de lo que llamo <strong>backEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p>\n<p>En <a href=\"https://youtu.be/cfmJQjBfM-s\">este video</a> tienes la charla que di con o que llamo <strong>Desarrollo Web</strong> presentando las tendencias tecnológicas del 2016.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Las soluciones JavaScript para el servidor que marcan <strong>tendencia en el desarrollo back end</strong> durante este 2016. Continuación de la saga que iniciamos con <strong><a href=\"http://academia-binaria.com/soluciones-frontend-2016/\">FrontEdge</a></strong>.</p>\n<ul>\n<li><p>Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\">ES6</a></strong>. En el lado del servidor destaco la disponibilidad de <a href=\"http://es6-features.org/#PromiseUsage\">Promesas</a> de forma nativa..</p>\n</li>\n<li><p>Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que <em>hay que cumplir con el estándar REST y hay que documentar</em> todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses <strong><a href=\"http://raml.org/\">RAML</a></strong>. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.</p>\n</li>\n<li><p>El ya viejo conocido <strong><a href=\"https://nodejs.org/\">NodeJS</a></strong> se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.</p>\n</li>\n<li><p>En la base de datos irrumpe con fuerza la nueva versión de <strong><a href=\"https://docs.mongodb.org/manual/release-notes/3.2/\">MongoDB 3.2</a></strong>, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado <em>join</em> entre colecciones .</p>\n</li>\n</ul>\n<p>En <a href=\"https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing\">esta presentación</a> tienes más información acerca de lo que llamo <strong>backEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p>\n<p>En <a href=\"https://youtu.be/cfmJQjBfM-s\">este video</a> tienes la charla que di con o que llamo <strong>Desarrollo Web</strong> presentando las tendencias tecnológicas del 2016.</p>\n"},{"title":"Un vistazo a las características principales de Angular Ivy 9","date":"2020-02-19T16:19:39.000Z","thumbnail":"/css/images/angular.builders_cuadrado.png","_content":"\n![un-vistazo-a-las-características-principales-en-el-lanzamiento-de-Angular-Ivy-versión-9](/images/light-new-year-s-eve-fireworks-sylvester-40663.jpg)\n\nEste artículo es una traducción aprobada por el autor, [Lars Gyrup Brink Nielsen](https://twitter.com/LayZeeDK), y editor originales.\n\nEnlace original en inglés [A look at major features in the Angular Ivy version 9 release](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/) del 6 de febrero de 2020\n\nEn resumen con Angular 9 tenemos cambios. MUCHOS y en todas partes: globalización dinámica, modo estricto, _Bazel_ y mucho más.\n\n*(Y sí, ahora por fin se ha lanzado __Angular Ivy versión 9__)*\n\n<!-- more -->\n\n## _Ivy_ está habilitado por defecto\n\nEn versiones anteriores de Angular, tuvimos que optar por _Ivy_. En la versión 9, tenemos que optar por no usar  _Ivy_ si queremos quedarnos con View Engine. Esto es posible en las versiones 9 y la futura 10 para garantizar una transición más fluida de _View Engine_ a _Ivy_.\n\nLas librerías *se pueden* compilar AOT, pero no es recomendable. El equipo de Angular tiene un plan de migración de _View Engine_ a _Ivy_ que recomienda publicar solo librerías compatibles con _View Engine_ compiladas con JIT para Angular versión 9. El compilador de compatibilidad Angular actualizará las librerías compatibles con _View Engine_ a _Ivy_ cuando se instalen en una aplicación Angular _Ivy_.\n\nObtén información sobre la compatibilidad de la biblioteca y el plan de transición de `View Engine-to-Ivy` en [\"La guía de Angular _Ivy_ para autores de librerías\"](https://indepth.dev/the-angular-ivy-guide-for-library-authors/) .\n\n```json\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}\n```\n\n```typescript\n// polyfills.ts\n// Solo se usa en aplicaciones multilingües de Ivy\n// import '@angular/localize/init';\n```\n\n*Listado 1. Optar por no usar _Ivy_ para recurrir a _View Engine_.*\n\nSi tienes problemas con _Ivy_ en tu aplicación, o en cualquiera de las librerías de las que depende, puedes optar por salir de _Ivy_ y volver a _View Engine_. Hazlo desactivando la opción del compilador angular `enableIvy` y deshabilitando` @angular/localize` como se ve en Listado 1.\n\nOptar por evitar _Ivy_ en un entorno de servidor es un poco más complicado. [Sigue la guía oficial para darte de baja de _Ivy_ cuando uses la renderización del lado del servidor](https://angular.io/guide/ivy#using-ssr-without-ivy).\n\n## El principio de localidad\n\nAntes, para compilar un componente en _View Engine_, Angular necesitaba información sobre todas sus dependencias declaradas. Esto significa que las librerías Angular no se pueden compilar AOT usando _View Engine_.\n\nAhora para compilar un componente en _Ivy_, Angular solo necesita información sobre el componente en sí. Pero, _Ivy_ no necesita metadatos de ninguna dependencia declarable para compilar un componente.\n\nEl principio de localidad significa que, en general, veremos tiempos de construcción más rápidos.\n\n### Componentes con carga diferida\n\nLas declaraciones `entryComponents` están en desuso porque ya no son necesarias. Cualquier componente _Ivy_ puede cargarse de forma diferida y renderizarse dinámicamente.\n\nEsto significa que ahora podemos cargar de forma diferida y renderizar un componente sin enrutamiento o módulos Angular. Sin embargo, en la práctica aún tenemos que usar módulos para renderizar componentes o módulos funcionales para vincular la plantilla de un componente a sus dependencias.\n\nLas librerías que solo son utilizadas por un componente con carga diferida se agrupan en fragmentos con carga diferida.\n\n## Mejoras en la carga diferencial\n\nCuando se introdujo la carga diferencial en Angular versión 8, el proceso de compilación se ejecutaba una vez para el paquete ES5 y otra vez para el paquete ES2015+.\n\nEn Angular versión 9, primero se emite un paquete ES2015+. Ese paquete se transfiere a un paquete ES5 separado. De esta manera, no tenemos que pasar por un proceso de compilación completo dos veces.\n\n## Compilación AOT en todas partes\n\nAOT está habilitado de forma predeterminada en las compilaciones, el servidor de desarrollo e incluso en las pruebas. Anteriormente, la compilación AOT era significativamente más lenta que la compilación JIT, por lo que JIT se usaba para el desarrollo y las pruebas. Con las mejoras de tiempo de construcción y reconstrucción en Ivy, la compilación AOT ahora ofrece una gran experiencia al desarrollador.\n\nCuando utilizábamos la compilación JIT en desarrollo y solo la compilación AOT en la compilación final, algunos errores se detectaban solo al hacer compilaciones de producción o, peor aún, en tiempo de ejecución.\n\n## Tamaños de paquete\n\nIvy puede habilitar paquetes más pequeños porque usa el _Ivy Instruction Set_, que es un conjunto de instrucciones de representación de tiempo de ejecución potencialmente _tree-shakable_. Nuestros paquetes solo incluirán las instrucciones de renderizado que realmente usamos en nuestros proyectos.\n\nEsto es ideal para casos de uso como _micro-frontends_, Angular Elements y aplicaciones web donde Angular no controla todo el documento.\n\nSin embargo, la diferencia en los tamaños de nuestros paquetes entre _View Engine_ e _Ivy_ variará según el tamaño de nuestra aplicación y las librerías de terceros que utilizamos. En general:\n\n- Las aplicaciones pequeñas y simples verán una disminución considerable del peso del paquete.\n- Las aplicaciones complejas verán un aumento en el fichero principal, pero una disminución en los tamaños de paquetes con carga diferida.\n\nEsto significa una disminución considerable del tamaño de descarga combinada para aplicaciones grandes, pero podría significar un aumento en el peso total para aplicaciones medianas. En ambos casos, el tamaño del paquete principal probablemente aumentará, lo que es malo para el tiempo de carga inicial de la página.\n\n## Globalización\n\nLas configuraciones regionales (formato de número, formato de fecha y otras configuraciones regionales) se pueden cargar dinámicamente en tiempo de ejecución en lugar de tener que registrarse en tiempo de compilación.\n\n```typescript\n// main.ts\nimport '@angular/localize/init';\n\nimport { loadTranslations } from '@angular/localize';\n\nloadTranslations ({\n  '8374172394781134519': '¡Hola, {$nombre de usuario}! Bienvenido a {$appName}. ',\n});\n```\n\n*Listado 2. Carga dinámica de traducciones.*\n\nComo se ve en el Listado 2, los textos traducidos también se pueden cargar dinámicamente en tiempo de ejecución en lugar de ser parte de nuestros paquetes.\n\nLos textos traducidos pueden cargarse desde una base de datos o un archivo.\n\n### Múltiples idiomas desde un único paquete de aplicaciones\n\nPara cambiar el idioma, tenemos que reiniciar la aplicación, pero no tenemos que servir un fichero de aplicaciones diferente.\n\nEsto significa que podemos, con alguna configuración, admitir varios idiomas con un solo paquete de aplicaciones en un solo nombre de host.\n\n### Tiempo de compilación en línea\n\nUna aplicación localizada ahora solo se compilará una vez. En lugar de múltiples compilaciones para producir un paquete por idioma, se produce un paquete por idioma reemplazando los marcadores de posición `$localize` con textos traducidos.\n\nAhora  hay que agregar el paquete `@angular/localize` para posibilitar la localización (varios idiomas). La buena noticia es que ya no tenemos que incluir el código de localización de Angular en nuestros paquetes si solo tenemos un idioma.\n\nSi no usamos plantillas localizadas, las instrucciones de _Ivy_ `i18n *` se sacan del paquete principal.\n\n### Textos localizables en modelos de componentes y servicios\n\n```typescript\n// app.component.ts\n@Component({\n  template: '{{ title }}'\n})\nexport class AppComponent {\n  title = $localize`Welcome to MyApp`;\n}\n```\n\n*Listado 3. Un marcador de posición de texto de traducción en un modelo de componente.*\n\nUna nueva característica de internacionalización es que también podemos incluir marcadores de posición para textos traducidos en el contenido de nuestros modelos como se ve en el Listado 3. Anteriormente, esto solo era posible en las plantillas.\n\n## Ámbitos adicionales de proveedores de dependencias\n\nSiempre hemos tenido alcance de módulo para los proveedores de inyección de servicios. La versión Angular 6 introdujo el alcance `'root'` y los proveedores _tree-shakable_, tanto para los proveedores de alcance desde el módulo raíz como desde módulos inferiores.\n\nLa versión angular 9 presenta los nuevos ámbitos de proveedor `'platform'` y `'any'`. Los proveedores con ámbito de `'platform'` se pueden compartir entre múltiples aplicaciones Angular en el mismo documento. El alcance del proveedor `'any'` compartirá un proveedor por inyector de módulo. Por ejemplo, una instancia de servicio para el paquete principal cargado por adelantado y una instancia de servicio para cada módulo cargado con retraso.\n\n## Experiencia mejorada del desarrollador\n\nIvy permite que _Angular Language Service_ admita comprobaciones adicionales durante el desarrollo. Esta es una gran mejora para la experiencia del desarrollador.\n\n### Comprobaciones de ruta de archivo\n\n_Angular Language Service_ verifica continuamente la hoja de estilo de componentes y las rutas de plantilla.\n\n### Verificaciones de tipo de plantilla\n\nLas plantillas se verifican por tipo, de acuerdo con el modo de verificación de tipo de plantilla como se describe más abajo en la sección \"Modo estricto\". Los nombres y tipos de miembros se verifican, incluso en vistas incrustadas. Lo que anteriormente resultaba en errores de tiempo de ejecución ahora se detecta durante el desarrollo y la construcción.\n\n## Nueva API de depuración en modo de desarrollo\n\n`ng.probe` ha sido reemplazado por una nueva API de depuración en modo de desarrollo. Las funciones más notables son `ng.applyChanges` y` ng.getComponent`.\n\n## Modo estricto\n\n### Esquema estricto del espacio de trabajo\n\nEl comando `ng new` ahora es compatible con el indicador` --strict` que por defecto está desactivado (`false`).\n\n```bash\nng new my-app --strict\n```\n\nCuando está habilitado, este parámetro agrega algunas comprobaciones estrictas del compilador TypeScript como se ve en el Listado 4.\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"strictlyNullChecks\": true\n  }\n}\n```\n\n*Listado 4. Opciones del compilador TypeScript habilitadas en un estricto espacio de trabajo angular.*\n\nCuriosamente, esto no agrega las mismas opciones que si simplemente estableciéramos `\"strict\": true` en el objeto `compilerOptions`. Comparemos la opción estricta del _workspace_ Angular con la opción estricta del compilador TypeScript.\n\nAmbos tienen estas opciones en común:\n\n- `noImplicitAny`\n- `noImplicitThis`\n- `strictlyNullChecks`\n\nLa opción estricta de Angular establece además estas opciones:\n\n- `noImplicitReturns`\n- `noFallthroughCasesInSwitch`\n\nmientras que la opción estricta del compilador TypeScript establece adicionalmente estas opciones:\n\n- `alwaysStrict`\n- `strictlyBindCallApply`\n- `strictlyFunctionTypes`\n- `estrictoPropertyInitialization`\n\nAdemás, la opción de Angular no establece la comprobación del tipo de plantilla en el nuevo modo estricto, lo deja en el modo `'full'` anterior.\n\n### Verificación estricta del tipo de plantilla\n\nHemos tenido la opción de habilitar la verificación del tipo de plantilla desde Angular versión 5 configurando `\"fullTemplateTypeCheck\":true` en el objeto`angularCompilerOptions`.\n\nIvy presenta una estricta comprobación del tipo de plantilla como se ve en el Listado 5. Cuando se establece esta nueva opción del compilador Angular, se ignora el valor de `fullTemplateTypeCheck`.\n\n```typescript\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"strictTemplates\": true\n  }\n}\n```\n\n*Listado 5. Habilita la comprobación estricta del tipo de plantilla.*\n\nLa comprobación de tipo de plantilla estricta verifica los tipos de enlaces de propiedades y respeta la opción `stricNullChecks`. También verifica los tipos de referencias de plantilla a directivas y componentes, incluidos los tipos genéricos. También se verifican los tipos de variables de contexto de plantilla, lo cual es excelente para los bucles `NgFor`. El tipo `$ event` está marcado para enlaces de eventos y animaciones. Incluso el tipo de elementos DOM nativos se verifica con una comprobación estricta del tipo de plantilla.\n\nEstas comprobaciones adicionales pueden conducir a errores y falsos positivos bajo ciertas circunstancias. Por ejemplo, cuando se usan librerías que no están compiladas con `strictNullChecks`. Para abordar esto, la verificación estricta del tipo de plantilla tiene opciones para optar por no participar y ajustar los controles. Por ejemplo, `strictTemplates` es en realidad una atajo de 8 opciones de compilador Angular.\n\n## Herencia de clase de componente y directiva mejorada\n\nLas clases base sin selector ahora son compatibles con directivas y componentes. Algunos metadatos ahora se heredan de componentes base y clases directivas. Esto hace que sea más fácil extender, por ejemplo, las directivas Angular Components y Angular Router.\n\n## Últimas versiones de TypeScript\n\nLas versiones de TypeScript 3.6 y 3.7 son compatibles con la versión angular 9. Las versiones anteriores de TypeScript ya no son compatibles. Consulta la Tabla 1 para comparar la compatibilidad de TypeScript entre\ntodas las versiones Angular.\n\n[vista bruta](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support.csv)\n[descargable angular-cli-node-js-typescript-support.csv](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv) hosted with ❤ by [GitHub](https://github.com/)\n\n*Tabla 1. Tabla de compatibilidad del Angular CLI, Angular, Node.js y TypeScript.* [*Abrir en una pestaña nueva*](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3)*\n\nTypeScript versión 3.6 presenta estas y otras características:\n\n- Soporte Unicode para identificadores en destinos modernos\n- Experiencia de desarrollador mejorada para promesas\n- Comprobación de tipo más estricto de generadores\n\nTypeScript versión 3.7 presenta estas y otras características que podemos usar con Angular versión 9:\n\n- Operador de encadenamiento opcional (`?.`) similar al operador de navegación segura para plantillas Angular\n- Operador de unión con nulos (`??`)\n- Funciones de afirmación de pruebas (`assert parameterName is typeName` y `asserts parameterName`)\n- `await` de primer nivel\n- Alias ​​de tipo recursivo mejorado\n- Mejora de la experiencia del desarrollador para funciones de comprobaciones\n\n## Generación mejorada del lado del servidor con Angular Universal\n\nAngular Universal versión 9 se lanza con un servidor de desarrollo Node.js Express para proporcionar un entorno realista durante el desarrollo.\n\nTambién parte de este lanzamiento es un constructor del CLI para pre-renderizar rutas estáticas usando `guess-parser`, inspirado en `angular-prerender`. Podemos pasar un archivo de rutas para renderizar rutas dinámicas (rutas con parámetros).\n\n### ¿Cómo empiezo?\n\nPodemos agregar Angular Universal usando el comando `ng add @nguniversal/express-engine`. Luego podemos usar el comando del constructor `ng run myapp:serve-ssr` para iniciar el servidor de desarrollo de renderizado del lado del servidor con recarga en vivo. De manera similar, podemos usar `ng run myapp:prerender` para detectar rutas estáticas y dinámicas y pre renderizarlas.\n\n## Experiencia de clases y estilo mejorada\n\nAl aplicación de estilo en Angular _Ivy_ ha sido reelaborado. La combinación de clases HTML estáticas con las directivas `NgStyle` y` NgClass` es ahora totalmente compatible y más fácil de entender.\n\n### Soporte de propiedades personalizadas de CSS\n\nComo parte de la reescritura del estilo Ivy, ahora se admiten las propiedades personalizadas de CSS enlazadas.\n\nUn ejemplo de enlace css puede ser así:\n\n```html\n    <div [style.--my-var]=\"myProperty || 'any value'\"></div>\n```\n\nLas propiedades personalizadas de CSS tienen control de alcance, por lo que esta propiedad de CSS se limitaría al DOM del componente.\n\n## Lanzamiento estable de Bazel como opción de suscripción\n\nBazel versión 2.1 es una herramienta de automatización de compilación opcional para Angular versión 9.\n\n### ¿Cómo empiezo?\n\nPara habilitar Bazel, usa `ng add @angular/bazel` o la colección de esquemas `@angular/bazel` cuando generes un espacio de trabajo Angular.\n\nAsegúrate de seguir [la guía de instalación de Bazel](https://docs.bazel.build/versions/2.0.0/install.html) para tu sistema operativo.\n\n## Angular Components\n\nLa versión Angular 9 viene con componentes oficiales para YouTube y Google Maps. Se agregó una directiva y un servicio de portapapeles al Angular CDK.\n\n## Pruebas\n\nLa mayor sorpresa de la versión Angular versión 9 son las muchas mejoras en las pruebas. Se resuelven problemas de rendimiento, se mejoran los tipos y se introducen nuevos conceptos.\n\n[Obtén información sobre las principales características y mejoras para las pruebas en \"Pruebas de siguiente nivel en Angular _Ivy_ versión 9\"](https://indepth.dev/next-level-testing-in-angular-ivy-version-9/).\n\n## Conclusión\n\nUno de los objetivos más importantes ha sido mantener la compatibilidad hacia atrás entre _Ivy_ y _View Engine_ tanto como fue posible.\n\nPor supuesto, la versión Angular 9 también incluye correcciones de errores, temas obsoletos y cambios importantes. _Ivy_ también aborda algunos problemas de antiguos que no cubrimos en este artículo.\n\nAngular _Ivy_ es un facilitador para las características que están por venir. Como hemos discutido en este artículo, _Ivy_ ya nos ha dado beneficios para diferentes casos de uso. Sin embargo, las mejores características llegarán en futuras versiones de Angular. ¿Cuál de las posibles características que se entregarán en las versiones 10 y 11 de Angular está por decidir?\n\nSolo discutimos qué es parte de las API públicas y estables de Angular versión 9. Algunas API experimentales son parte de esta versión, como `renderComponent`,` markDirty` y `detectChanges`. Sin embargo, todavía están sujetos a cambios.\n\nCon la retirada de las declaraciones de componentes de entrada y los componentes con carga diferida utilizando módulos de representación, estamos un paso más cerca de tener [componentes que se pueden eliminar del árbol y módulos Angular opcionales](https://indepth.dev/angular-revisited-tree-shakable-components-and-optional-ngmodules/).\n\n[Los componentes de funcionalidad](https://indepth.dev/component-features-with-angular-ivy/) también forman parte de esta versión, pero solo están expuestos para uso interno de _Ivy_.\n\nLa versión de Angular _Ivy_ versión 9 nos brinda mejoras para el empaquetamiento, las pruebas, la experiencia del desarrollador, las herramientas, la depuración y la verificación de tipos. Toda una buena colección de características.\n\n## Recursos relacionados\n\n### Componentes con carga lenta\n\n[Información sobre los módulos de presentación en la charla \"Angular revisited: Tree-shakable components and optional NgModules\"](https://youtu.be/DA3efofhpq4).\n\n[Aprende a usar los componentes de carga diferida en \"Lazy load components in Angular\" por Kevin Kreuzer](https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8).\n\n### Comprobación de tipos en plantillas\n\n[Lee la guía oficial sobre la verificación de tipos en plantillas Angular para conocer los detalles de la resolución de problemas y la configuración](https://angular.io/guide/template-typecheck#troubleshooting-template-errors).\n\n### Globalización\n\n[Manfred Steyer analiza las configuraciones regionales de carga diferida en \"Lazy Loading Locales with Angular\"](https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/).\n\n[Cédric Exbrayat analiza la globalización de _Ivy_ en \"Internationalization with @angular/localize\"](https://blog.ninja-squad.com/2019/12/10/angular-localize/).\n\n### Ámbitos adicionales de proveedor de dependencias\n\nObtén información sobre los ámbitos de proveedor de `'any'` y `'platform'` en [“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler](https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb).\n\n### Nueva API de depuración\n[Lee sobre la API de depuración completa en la documentación oficial](https://angular.io/api/core/global).\n\n### Angular Universal versión 9\n\nEstos dos artículos entran en detalles de Angular Universal versión 9:\n\n-   [“Angular Universal v9: What’s New ?” by Mark Pieszak](https://trilon.io/blog/angular-universal-v9-whats-new)\n-   [“Angular v9 & Universal: SSR and prerendering out of the box!” by Sam Vloeberghs](https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1)\n\nAprende sobre `angular-prerender`, la biblioteca que inspiró estas nuevas características de Angular Universal en [“Prerender Angular Apps with a single Command” by Christoph Guttandin](https://media-codings.com/articles/prerender-angular-apps-with-a-single-command).\n\n### Enlace de propiedades personalizadas de CSS\n\n[Mira este tweet y la demostración de Alexey Zuev para ver los enlaces de Propiedades personalizadas de CSS en acción](https://twitter.com/yurzui/status/1221159415820275717).\n\n## Revisores\n\nSiempre es útil tener una segunda opinión sobre nuestro trabajo o incluso detectar errores tontos. Para este artículo el autor tuvo el placer de ser revisado por:\n\n-   [Christoph Guttandin](https://twitter.com/chrisguttandin)\n-   [Evgeny Fedorenko](https://indepth.dev/author/evgeny/)\n-   [Santosh Yadav](https://dev.to/santoshyadav198613)\n\nCover photo by [Pixabay](https://www.pexels.com/photo/light-new-year-s-eve-fireworks-sylvester-40663/) on Pexels.\n\nEl autor original: [Lars Gyrup Brink Nielsen](https://twitter.com/LayZeeDK)\n\nEl traductor al español: [Alberto Basalo](https://twitter.com/albertobasalo)\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/angular9.md","raw":"---\ntitle: Un vistazo a las características principales de Angular Ivy 9\npermalink: un-vistazo-a-las-características-principales-en-el-lanzamiento-de-Angular-Ivy-versión-9\ndate: 2020-02-19 17:19:39\ntags:\n- Angular\n- Angular9\n- Ivy\ncategories:\n- [Angular]\nthumbnail: /css/images/angular.builders_cuadrado.png\n---\n\n![un-vistazo-a-las-características-principales-en-el-lanzamiento-de-Angular-Ivy-versión-9](/images/light-new-year-s-eve-fireworks-sylvester-40663.jpg)\n\nEste artículo es una traducción aprobada por el autor, [Lars Gyrup Brink Nielsen](https://twitter.com/LayZeeDK), y editor originales.\n\nEnlace original en inglés [A look at major features in the Angular Ivy version 9 release](https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/) del 6 de febrero de 2020\n\nEn resumen con Angular 9 tenemos cambios. MUCHOS y en todas partes: globalización dinámica, modo estricto, _Bazel_ y mucho más.\n\n*(Y sí, ahora por fin se ha lanzado __Angular Ivy versión 9__)*\n\n<!-- more -->\n\n## _Ivy_ está habilitado por defecto\n\nEn versiones anteriores de Angular, tuvimos que optar por _Ivy_. En la versión 9, tenemos que optar por no usar  _Ivy_ si queremos quedarnos con View Engine. Esto es posible en las versiones 9 y la futura 10 para garantizar una transición más fluida de _View Engine_ a _Ivy_.\n\nLas librerías *se pueden* compilar AOT, pero no es recomendable. El equipo de Angular tiene un plan de migración de _View Engine_ a _Ivy_ que recomienda publicar solo librerías compatibles con _View Engine_ compiladas con JIT para Angular versión 9. El compilador de compatibilidad Angular actualizará las librerías compatibles con _View Engine_ a _Ivy_ cuando se instalen en una aplicación Angular _Ivy_.\n\nObtén información sobre la compatibilidad de la biblioteca y el plan de transición de `View Engine-to-Ivy` en [\"La guía de Angular _Ivy_ para autores de librerías\"](https://indepth.dev/the-angular-ivy-guide-for-library-authors/) .\n\n```json\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}\n```\n\n```typescript\n// polyfills.ts\n// Solo se usa en aplicaciones multilingües de Ivy\n// import '@angular/localize/init';\n```\n\n*Listado 1. Optar por no usar _Ivy_ para recurrir a _View Engine_.*\n\nSi tienes problemas con _Ivy_ en tu aplicación, o en cualquiera de las librerías de las que depende, puedes optar por salir de _Ivy_ y volver a _View Engine_. Hazlo desactivando la opción del compilador angular `enableIvy` y deshabilitando` @angular/localize` como se ve en Listado 1.\n\nOptar por evitar _Ivy_ en un entorno de servidor es un poco más complicado. [Sigue la guía oficial para darte de baja de _Ivy_ cuando uses la renderización del lado del servidor](https://angular.io/guide/ivy#using-ssr-without-ivy).\n\n## El principio de localidad\n\nAntes, para compilar un componente en _View Engine_, Angular necesitaba información sobre todas sus dependencias declaradas. Esto significa que las librerías Angular no se pueden compilar AOT usando _View Engine_.\n\nAhora para compilar un componente en _Ivy_, Angular solo necesita información sobre el componente en sí. Pero, _Ivy_ no necesita metadatos de ninguna dependencia declarable para compilar un componente.\n\nEl principio de localidad significa que, en general, veremos tiempos de construcción más rápidos.\n\n### Componentes con carga diferida\n\nLas declaraciones `entryComponents` están en desuso porque ya no son necesarias. Cualquier componente _Ivy_ puede cargarse de forma diferida y renderizarse dinámicamente.\n\nEsto significa que ahora podemos cargar de forma diferida y renderizar un componente sin enrutamiento o módulos Angular. Sin embargo, en la práctica aún tenemos que usar módulos para renderizar componentes o módulos funcionales para vincular la plantilla de un componente a sus dependencias.\n\nLas librerías que solo son utilizadas por un componente con carga diferida se agrupan en fragmentos con carga diferida.\n\n## Mejoras en la carga diferencial\n\nCuando se introdujo la carga diferencial en Angular versión 8, el proceso de compilación se ejecutaba una vez para el paquete ES5 y otra vez para el paquete ES2015+.\n\nEn Angular versión 9, primero se emite un paquete ES2015+. Ese paquete se transfiere a un paquete ES5 separado. De esta manera, no tenemos que pasar por un proceso de compilación completo dos veces.\n\n## Compilación AOT en todas partes\n\nAOT está habilitado de forma predeterminada en las compilaciones, el servidor de desarrollo e incluso en las pruebas. Anteriormente, la compilación AOT era significativamente más lenta que la compilación JIT, por lo que JIT se usaba para el desarrollo y las pruebas. Con las mejoras de tiempo de construcción y reconstrucción en Ivy, la compilación AOT ahora ofrece una gran experiencia al desarrollador.\n\nCuando utilizábamos la compilación JIT en desarrollo y solo la compilación AOT en la compilación final, algunos errores se detectaban solo al hacer compilaciones de producción o, peor aún, en tiempo de ejecución.\n\n## Tamaños de paquete\n\nIvy puede habilitar paquetes más pequeños porque usa el _Ivy Instruction Set_, que es un conjunto de instrucciones de representación de tiempo de ejecución potencialmente _tree-shakable_. Nuestros paquetes solo incluirán las instrucciones de renderizado que realmente usamos en nuestros proyectos.\n\nEsto es ideal para casos de uso como _micro-frontends_, Angular Elements y aplicaciones web donde Angular no controla todo el documento.\n\nSin embargo, la diferencia en los tamaños de nuestros paquetes entre _View Engine_ e _Ivy_ variará según el tamaño de nuestra aplicación y las librerías de terceros que utilizamos. En general:\n\n- Las aplicaciones pequeñas y simples verán una disminución considerable del peso del paquete.\n- Las aplicaciones complejas verán un aumento en el fichero principal, pero una disminución en los tamaños de paquetes con carga diferida.\n\nEsto significa una disminución considerable del tamaño de descarga combinada para aplicaciones grandes, pero podría significar un aumento en el peso total para aplicaciones medianas. En ambos casos, el tamaño del paquete principal probablemente aumentará, lo que es malo para el tiempo de carga inicial de la página.\n\n## Globalización\n\nLas configuraciones regionales (formato de número, formato de fecha y otras configuraciones regionales) se pueden cargar dinámicamente en tiempo de ejecución en lugar de tener que registrarse en tiempo de compilación.\n\n```typescript\n// main.ts\nimport '@angular/localize/init';\n\nimport { loadTranslations } from '@angular/localize';\n\nloadTranslations ({\n  '8374172394781134519': '¡Hola, {$nombre de usuario}! Bienvenido a {$appName}. ',\n});\n```\n\n*Listado 2. Carga dinámica de traducciones.*\n\nComo se ve en el Listado 2, los textos traducidos también se pueden cargar dinámicamente en tiempo de ejecución en lugar de ser parte de nuestros paquetes.\n\nLos textos traducidos pueden cargarse desde una base de datos o un archivo.\n\n### Múltiples idiomas desde un único paquete de aplicaciones\n\nPara cambiar el idioma, tenemos que reiniciar la aplicación, pero no tenemos que servir un fichero de aplicaciones diferente.\n\nEsto significa que podemos, con alguna configuración, admitir varios idiomas con un solo paquete de aplicaciones en un solo nombre de host.\n\n### Tiempo de compilación en línea\n\nUna aplicación localizada ahora solo se compilará una vez. En lugar de múltiples compilaciones para producir un paquete por idioma, se produce un paquete por idioma reemplazando los marcadores de posición `$localize` con textos traducidos.\n\nAhora  hay que agregar el paquete `@angular/localize` para posibilitar la localización (varios idiomas). La buena noticia es que ya no tenemos que incluir el código de localización de Angular en nuestros paquetes si solo tenemos un idioma.\n\nSi no usamos plantillas localizadas, las instrucciones de _Ivy_ `i18n *` se sacan del paquete principal.\n\n### Textos localizables en modelos de componentes y servicios\n\n```typescript\n// app.component.ts\n@Component({\n  template: '{{ title }}'\n})\nexport class AppComponent {\n  title = $localize`Welcome to MyApp`;\n}\n```\n\n*Listado 3. Un marcador de posición de texto de traducción en un modelo de componente.*\n\nUna nueva característica de internacionalización es que también podemos incluir marcadores de posición para textos traducidos en el contenido de nuestros modelos como se ve en el Listado 3. Anteriormente, esto solo era posible en las plantillas.\n\n## Ámbitos adicionales de proveedores de dependencias\n\nSiempre hemos tenido alcance de módulo para los proveedores de inyección de servicios. La versión Angular 6 introdujo el alcance `'root'` y los proveedores _tree-shakable_, tanto para los proveedores de alcance desde el módulo raíz como desde módulos inferiores.\n\nLa versión angular 9 presenta los nuevos ámbitos de proveedor `'platform'` y `'any'`. Los proveedores con ámbito de `'platform'` se pueden compartir entre múltiples aplicaciones Angular en el mismo documento. El alcance del proveedor `'any'` compartirá un proveedor por inyector de módulo. Por ejemplo, una instancia de servicio para el paquete principal cargado por adelantado y una instancia de servicio para cada módulo cargado con retraso.\n\n## Experiencia mejorada del desarrollador\n\nIvy permite que _Angular Language Service_ admita comprobaciones adicionales durante el desarrollo. Esta es una gran mejora para la experiencia del desarrollador.\n\n### Comprobaciones de ruta de archivo\n\n_Angular Language Service_ verifica continuamente la hoja de estilo de componentes y las rutas de plantilla.\n\n### Verificaciones de tipo de plantilla\n\nLas plantillas se verifican por tipo, de acuerdo con el modo de verificación de tipo de plantilla como se describe más abajo en la sección \"Modo estricto\". Los nombres y tipos de miembros se verifican, incluso en vistas incrustadas. Lo que anteriormente resultaba en errores de tiempo de ejecución ahora se detecta durante el desarrollo y la construcción.\n\n## Nueva API de depuración en modo de desarrollo\n\n`ng.probe` ha sido reemplazado por una nueva API de depuración en modo de desarrollo. Las funciones más notables son `ng.applyChanges` y` ng.getComponent`.\n\n## Modo estricto\n\n### Esquema estricto del espacio de trabajo\n\nEl comando `ng new` ahora es compatible con el indicador` --strict` que por defecto está desactivado (`false`).\n\n```bash\nng new my-app --strict\n```\n\nCuando está habilitado, este parámetro agrega algunas comprobaciones estrictas del compilador TypeScript como se ve en el Listado 4.\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"strictlyNullChecks\": true\n  }\n}\n```\n\n*Listado 4. Opciones del compilador TypeScript habilitadas en un estricto espacio de trabajo angular.*\n\nCuriosamente, esto no agrega las mismas opciones que si simplemente estableciéramos `\"strict\": true` en el objeto `compilerOptions`. Comparemos la opción estricta del _workspace_ Angular con la opción estricta del compilador TypeScript.\n\nAmbos tienen estas opciones en común:\n\n- `noImplicitAny`\n- `noImplicitThis`\n- `strictlyNullChecks`\n\nLa opción estricta de Angular establece además estas opciones:\n\n- `noImplicitReturns`\n- `noFallthroughCasesInSwitch`\n\nmientras que la opción estricta del compilador TypeScript establece adicionalmente estas opciones:\n\n- `alwaysStrict`\n- `strictlyBindCallApply`\n- `strictlyFunctionTypes`\n- `estrictoPropertyInitialization`\n\nAdemás, la opción de Angular no establece la comprobación del tipo de plantilla en el nuevo modo estricto, lo deja en el modo `'full'` anterior.\n\n### Verificación estricta del tipo de plantilla\n\nHemos tenido la opción de habilitar la verificación del tipo de plantilla desde Angular versión 5 configurando `\"fullTemplateTypeCheck\":true` en el objeto`angularCompilerOptions`.\n\nIvy presenta una estricta comprobación del tipo de plantilla como se ve en el Listado 5. Cuando se establece esta nueva opción del compilador Angular, se ignora el valor de `fullTemplateTypeCheck`.\n\n```typescript\n// tsconfig.json\n{\n  \"angularCompilerOptions\": {\n    \"strictTemplates\": true\n  }\n}\n```\n\n*Listado 5. Habilita la comprobación estricta del tipo de plantilla.*\n\nLa comprobación de tipo de plantilla estricta verifica los tipos de enlaces de propiedades y respeta la opción `stricNullChecks`. También verifica los tipos de referencias de plantilla a directivas y componentes, incluidos los tipos genéricos. También se verifican los tipos de variables de contexto de plantilla, lo cual es excelente para los bucles `NgFor`. El tipo `$ event` está marcado para enlaces de eventos y animaciones. Incluso el tipo de elementos DOM nativos se verifica con una comprobación estricta del tipo de plantilla.\n\nEstas comprobaciones adicionales pueden conducir a errores y falsos positivos bajo ciertas circunstancias. Por ejemplo, cuando se usan librerías que no están compiladas con `strictNullChecks`. Para abordar esto, la verificación estricta del tipo de plantilla tiene opciones para optar por no participar y ajustar los controles. Por ejemplo, `strictTemplates` es en realidad una atajo de 8 opciones de compilador Angular.\n\n## Herencia de clase de componente y directiva mejorada\n\nLas clases base sin selector ahora son compatibles con directivas y componentes. Algunos metadatos ahora se heredan de componentes base y clases directivas. Esto hace que sea más fácil extender, por ejemplo, las directivas Angular Components y Angular Router.\n\n## Últimas versiones de TypeScript\n\nLas versiones de TypeScript 3.6 y 3.7 son compatibles con la versión angular 9. Las versiones anteriores de TypeScript ya no son compatibles. Consulta la Tabla 1 para comparar la compatibilidad de TypeScript entre\ntodas las versiones Angular.\n\n[vista bruta](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support.csv)\n[descargable angular-cli-node-js-typescript-support.csv](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv) hosted with ❤ by [GitHub](https://github.com/)\n\n*Tabla 1. Tabla de compatibilidad del Angular CLI, Angular, Node.js y TypeScript.* [*Abrir en una pestaña nueva*](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3)*\n\nTypeScript versión 3.6 presenta estas y otras características:\n\n- Soporte Unicode para identificadores en destinos modernos\n- Experiencia de desarrollador mejorada para promesas\n- Comprobación de tipo más estricto de generadores\n\nTypeScript versión 3.7 presenta estas y otras características que podemos usar con Angular versión 9:\n\n- Operador de encadenamiento opcional (`?.`) similar al operador de navegación segura para plantillas Angular\n- Operador de unión con nulos (`??`)\n- Funciones de afirmación de pruebas (`assert parameterName is typeName` y `asserts parameterName`)\n- `await` de primer nivel\n- Alias ​​de tipo recursivo mejorado\n- Mejora de la experiencia del desarrollador para funciones de comprobaciones\n\n## Generación mejorada del lado del servidor con Angular Universal\n\nAngular Universal versión 9 se lanza con un servidor de desarrollo Node.js Express para proporcionar un entorno realista durante el desarrollo.\n\nTambién parte de este lanzamiento es un constructor del CLI para pre-renderizar rutas estáticas usando `guess-parser`, inspirado en `angular-prerender`. Podemos pasar un archivo de rutas para renderizar rutas dinámicas (rutas con parámetros).\n\n### ¿Cómo empiezo?\n\nPodemos agregar Angular Universal usando el comando `ng add @nguniversal/express-engine`. Luego podemos usar el comando del constructor `ng run myapp:serve-ssr` para iniciar el servidor de desarrollo de renderizado del lado del servidor con recarga en vivo. De manera similar, podemos usar `ng run myapp:prerender` para detectar rutas estáticas y dinámicas y pre renderizarlas.\n\n## Experiencia de clases y estilo mejorada\n\nAl aplicación de estilo en Angular _Ivy_ ha sido reelaborado. La combinación de clases HTML estáticas con las directivas `NgStyle` y` NgClass` es ahora totalmente compatible y más fácil de entender.\n\n### Soporte de propiedades personalizadas de CSS\n\nComo parte de la reescritura del estilo Ivy, ahora se admiten las propiedades personalizadas de CSS enlazadas.\n\nUn ejemplo de enlace css puede ser así:\n\n```html\n    <div [style.--my-var]=\"myProperty || 'any value'\"></div>\n```\n\nLas propiedades personalizadas de CSS tienen control de alcance, por lo que esta propiedad de CSS se limitaría al DOM del componente.\n\n## Lanzamiento estable de Bazel como opción de suscripción\n\nBazel versión 2.1 es una herramienta de automatización de compilación opcional para Angular versión 9.\n\n### ¿Cómo empiezo?\n\nPara habilitar Bazel, usa `ng add @angular/bazel` o la colección de esquemas `@angular/bazel` cuando generes un espacio de trabajo Angular.\n\nAsegúrate de seguir [la guía de instalación de Bazel](https://docs.bazel.build/versions/2.0.0/install.html) para tu sistema operativo.\n\n## Angular Components\n\nLa versión Angular 9 viene con componentes oficiales para YouTube y Google Maps. Se agregó una directiva y un servicio de portapapeles al Angular CDK.\n\n## Pruebas\n\nLa mayor sorpresa de la versión Angular versión 9 son las muchas mejoras en las pruebas. Se resuelven problemas de rendimiento, se mejoran los tipos y se introducen nuevos conceptos.\n\n[Obtén información sobre las principales características y mejoras para las pruebas en \"Pruebas de siguiente nivel en Angular _Ivy_ versión 9\"](https://indepth.dev/next-level-testing-in-angular-ivy-version-9/).\n\n## Conclusión\n\nUno de los objetivos más importantes ha sido mantener la compatibilidad hacia atrás entre _Ivy_ y _View Engine_ tanto como fue posible.\n\nPor supuesto, la versión Angular 9 también incluye correcciones de errores, temas obsoletos y cambios importantes. _Ivy_ también aborda algunos problemas de antiguos que no cubrimos en este artículo.\n\nAngular _Ivy_ es un facilitador para las características que están por venir. Como hemos discutido en este artículo, _Ivy_ ya nos ha dado beneficios para diferentes casos de uso. Sin embargo, las mejores características llegarán en futuras versiones de Angular. ¿Cuál de las posibles características que se entregarán en las versiones 10 y 11 de Angular está por decidir?\n\nSolo discutimos qué es parte de las API públicas y estables de Angular versión 9. Algunas API experimentales son parte de esta versión, como `renderComponent`,` markDirty` y `detectChanges`. Sin embargo, todavía están sujetos a cambios.\n\nCon la retirada de las declaraciones de componentes de entrada y los componentes con carga diferida utilizando módulos de representación, estamos un paso más cerca de tener [componentes que se pueden eliminar del árbol y módulos Angular opcionales](https://indepth.dev/angular-revisited-tree-shakable-components-and-optional-ngmodules/).\n\n[Los componentes de funcionalidad](https://indepth.dev/component-features-with-angular-ivy/) también forman parte de esta versión, pero solo están expuestos para uso interno de _Ivy_.\n\nLa versión de Angular _Ivy_ versión 9 nos brinda mejoras para el empaquetamiento, las pruebas, la experiencia del desarrollador, las herramientas, la depuración y la verificación de tipos. Toda una buena colección de características.\n\n## Recursos relacionados\n\n### Componentes con carga lenta\n\n[Información sobre los módulos de presentación en la charla \"Angular revisited: Tree-shakable components and optional NgModules\"](https://youtu.be/DA3efofhpq4).\n\n[Aprende a usar los componentes de carga diferida en \"Lazy load components in Angular\" por Kevin Kreuzer](https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8).\n\n### Comprobación de tipos en plantillas\n\n[Lee la guía oficial sobre la verificación de tipos en plantillas Angular para conocer los detalles de la resolución de problemas y la configuración](https://angular.io/guide/template-typecheck#troubleshooting-template-errors).\n\n### Globalización\n\n[Manfred Steyer analiza las configuraciones regionales de carga diferida en \"Lazy Loading Locales with Angular\"](https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/).\n\n[Cédric Exbrayat analiza la globalización de _Ivy_ en \"Internationalization with @angular/localize\"](https://blog.ninja-squad.com/2019/12/10/angular-localize/).\n\n### Ámbitos adicionales de proveedor de dependencias\n\nObtén información sobre los ámbitos de proveedor de `'any'` y `'platform'` en [“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler](https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb).\n\n### Nueva API de depuración\n[Lee sobre la API de depuración completa en la documentación oficial](https://angular.io/api/core/global).\n\n### Angular Universal versión 9\n\nEstos dos artículos entran en detalles de Angular Universal versión 9:\n\n-   [“Angular Universal v9: What’s New ?” by Mark Pieszak](https://trilon.io/blog/angular-universal-v9-whats-new)\n-   [“Angular v9 & Universal: SSR and prerendering out of the box!” by Sam Vloeberghs](https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1)\n\nAprende sobre `angular-prerender`, la biblioteca que inspiró estas nuevas características de Angular Universal en [“Prerender Angular Apps with a single Command” by Christoph Guttandin](https://media-codings.com/articles/prerender-angular-apps-with-a-single-command).\n\n### Enlace de propiedades personalizadas de CSS\n\n[Mira este tweet y la demostración de Alexey Zuev para ver los enlaces de Propiedades personalizadas de CSS en acción](https://twitter.com/yurzui/status/1221159415820275717).\n\n## Revisores\n\nSiempre es útil tener una segunda opinión sobre nuestro trabajo o incluso detectar errores tontos. Para este artículo el autor tuvo el placer de ser revisado por:\n\n-   [Christoph Guttandin](https://twitter.com/chrisguttandin)\n-   [Evgeny Fedorenko](https://indepth.dev/author/evgeny/)\n-   [Santosh Yadav](https://dev.to/santoshyadav198613)\n\nCover photo by [Pixabay](https://www.pexels.com/photo/light-new-year-s-eve-fireworks-sylvester-40663/) on Pexels.\n\nEl autor original: [Lars Gyrup Brink Nielsen](https://twitter.com/LayZeeDK)\n\nEl traductor al español: [Alberto Basalo](https://twitter.com/albertobasalo)\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"angular9","published":1,"updated":"2023-07-02T10:25:58.473Z","__permalink":"un-vistazo-a-las-características-principales-en-el-lanzamiento-de-Angular-Ivy-versión-9","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2f6000de09655fq0c1c","content":"<p><img src=\"/images/light-new-year-s-eve-fireworks-sylvester-40663.jpg\" alt=\"un-vistazo-a-las-características-principales-en-el-lanzamiento-de-Angular-Ivy-versión-9\"></p>\n<p>Este artículo es una traducción aprobada por el autor, <a href=\"https://twitter.com/LayZeeDK\">Lars Gyrup Brink Nielsen</a>, y editor originales.</p>\n<p>Enlace original en inglés <a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/\">A look at major features in the Angular Ivy version 9 release</a> del 6 de febrero de 2020</p>\n<p>En resumen con Angular 9 tenemos cambios. MUCHOS y en todas partes: globalización dinámica, modo estricto, <em>Bazel</em> y mucho más.</p>\n<p><em>(Y sí, ahora por fin se ha lanzado <strong>Angular Ivy versión 9</strong>)</em></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Ivy-esta-habilitado-por-defecto\"><a href=\"#Ivy-esta-habilitado-por-defecto\" class=\"headerlink\" title=\"Ivy está habilitado por defecto\"></a><em>Ivy</em> está habilitado por defecto</h2><p>En versiones anteriores de Angular, tuvimos que optar por <em>Ivy</em>. En la versión 9, tenemos que optar por no usar  <em>Ivy</em> si queremos quedarnos con View Engine. Esto es posible en las versiones 9 y la futura 10 para garantizar una transición más fluida de <em>View Engine</em> a <em>Ivy</em>.</p>\n<p>Las librerías <em>se pueden</em> compilar AOT, pero no es recomendable. El equipo de Angular tiene un plan de migración de <em>View Engine</em> a <em>Ivy</em> que recomienda publicar solo librerías compatibles con <em>View Engine</em> compiladas con JIT para Angular versión 9. El compilador de compatibilidad Angular actualizará las librerías compatibles con <em>View Engine</em> a <em>Ivy</em> cuando se instalen en una aplicación Angular <em>Ivy</em>.</p>\n<p>Obtén información sobre la compatibilidad de la biblioteca y el plan de transición de <code>View Engine-to-Ivy</code> en <a href=\"https://indepth.dev/the-angular-ivy-guide-for-library-authors/\">“La guía de Angular <em>Ivy</em> para autores de librerías”</a> .</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;angularCompilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;enableIvy&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// polyfills.ts</span></span><br><span class=\"line\"><span class=\"comment\">// Solo se usa en aplicaciones multilingües de Ivy</span></span><br><span class=\"line\"><span class=\"comment\">// import &#x27;@angular/localize/init&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 1. Optar por no usar <em>Ivy</em> para recurrir a <em>View Engine</em>.</em></p>\n<p>Si tienes problemas con <em>Ivy</em> en tu aplicación, o en cualquiera de las librerías de las que depende, puedes optar por salir de <em>Ivy</em> y volver a <em>View Engine</em>. Hazlo desactivando la opción del compilador angular <code>enableIvy</code> y deshabilitando<code> @angular/localize</code> como se ve en Listado 1.</p>\n<p>Optar por evitar <em>Ivy</em> en un entorno de servidor es un poco más complicado. <a href=\"https://angular.io/guide/ivy#using-ssr-without-ivy\">Sigue la guía oficial para darte de baja de <em>Ivy</em> cuando uses la renderización del lado del servidor</a>.</p>\n<h2 id=\"El-principio-de-localidad\"><a href=\"#El-principio-de-localidad\" class=\"headerlink\" title=\"El principio de localidad\"></a>El principio de localidad</h2><p>Antes, para compilar un componente en <em>View Engine</em>, Angular necesitaba información sobre todas sus dependencias declaradas. Esto significa que las librerías Angular no se pueden compilar AOT usando <em>View Engine</em>.</p>\n<p>Ahora para compilar un componente en <em>Ivy</em>, Angular solo necesita información sobre el componente en sí. Pero, <em>Ivy</em> no necesita metadatos de ninguna dependencia declarable para compilar un componente.</p>\n<p>El principio de localidad significa que, en general, veremos tiempos de construcción más rápidos.</p>\n<h3 id=\"Componentes-con-carga-diferida\"><a href=\"#Componentes-con-carga-diferida\" class=\"headerlink\" title=\"Componentes con carga diferida\"></a>Componentes con carga diferida</h3><p>Las declaraciones <code>entryComponents</code> están en desuso porque ya no son necesarias. Cualquier componente <em>Ivy</em> puede cargarse de forma diferida y renderizarse dinámicamente.</p>\n<p>Esto significa que ahora podemos cargar de forma diferida y renderizar un componente sin enrutamiento o módulos Angular. Sin embargo, en la práctica aún tenemos que usar módulos para renderizar componentes o módulos funcionales para vincular la plantilla de un componente a sus dependencias.</p>\n<p>Las librerías que solo son utilizadas por un componente con carga diferida se agrupan en fragmentos con carga diferida.</p>\n<h2 id=\"Mejoras-en-la-carga-diferencial\"><a href=\"#Mejoras-en-la-carga-diferencial\" class=\"headerlink\" title=\"Mejoras en la carga diferencial\"></a>Mejoras en la carga diferencial</h2><p>Cuando se introdujo la carga diferencial en Angular versión 8, el proceso de compilación se ejecutaba una vez para el paquete ES5 y otra vez para el paquete ES2015+.</p>\n<p>En Angular versión 9, primero se emite un paquete ES2015+. Ese paquete se transfiere a un paquete ES5 separado. De esta manera, no tenemos que pasar por un proceso de compilación completo dos veces.</p>\n<h2 id=\"Compilacion-AOT-en-todas-partes\"><a href=\"#Compilacion-AOT-en-todas-partes\" class=\"headerlink\" title=\"Compilación AOT en todas partes\"></a>Compilación AOT en todas partes</h2><p>AOT está habilitado de forma predeterminada en las compilaciones, el servidor de desarrollo e incluso en las pruebas. Anteriormente, la compilación AOT era significativamente más lenta que la compilación JIT, por lo que JIT se usaba para el desarrollo y las pruebas. Con las mejoras de tiempo de construcción y reconstrucción en Ivy, la compilación AOT ahora ofrece una gran experiencia al desarrollador.</p>\n<p>Cuando utilizábamos la compilación JIT en desarrollo y solo la compilación AOT en la compilación final, algunos errores se detectaban solo al hacer compilaciones de producción o, peor aún, en tiempo de ejecución.</p>\n<h2 id=\"Tamanos-de-paquete\"><a href=\"#Tamanos-de-paquete\" class=\"headerlink\" title=\"Tamaños de paquete\"></a>Tamaños de paquete</h2><p>Ivy puede habilitar paquetes más pequeños porque usa el <em>Ivy Instruction Set</em>, que es un conjunto de instrucciones de representación de tiempo de ejecución potencialmente <em>tree-shakable</em>. Nuestros paquetes solo incluirán las instrucciones de renderizado que realmente usamos en nuestros proyectos.</p>\n<p>Esto es ideal para casos de uso como <em>micro-frontends</em>, Angular Elements y aplicaciones web donde Angular no controla todo el documento.</p>\n<p>Sin embargo, la diferencia en los tamaños de nuestros paquetes entre <em>View Engine</em> e <em>Ivy</em> variará según el tamaño de nuestra aplicación y las librerías de terceros que utilizamos. En general:</p>\n<ul>\n<li>Las aplicaciones pequeñas y simples verán una disminución considerable del peso del paquete.</li>\n<li>Las aplicaciones complejas verán un aumento en el fichero principal, pero una disminución en los tamaños de paquetes con carga diferida.</li>\n</ul>\n<p>Esto significa una disminución considerable del tamaño de descarga combinada para aplicaciones grandes, pero podría significar un aumento en el peso total para aplicaciones medianas. En ambos casos, el tamaño del paquete principal probablemente aumentará, lo que es malo para el tiempo de carga inicial de la página.</p>\n<h2 id=\"Globalizacion\"><a href=\"#Globalizacion\" class=\"headerlink\" title=\"Globalización\"></a>Globalización</h2><p>Las configuraciones regionales (formato de número, formato de fecha y otras configuraciones regionales) se pueden cargar dinámicamente en tiempo de ejecución en lugar de tener que registrarse en tiempo de compilación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@angular/localize/init&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; loadTranslations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/localize&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">loadTranslations (&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;8374172394781134519&#x27;</span>: <span class=\"string\">&#x27;¡Hola, &#123;$nombre de usuario&#125;! Bienvenido a &#123;$appName&#125;. &#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 2. Carga dinámica de traducciones.</em></p>\n<p>Como se ve en el Listado 2, los textos traducidos también se pueden cargar dinámicamente en tiempo de ejecución en lugar de ser parte de nuestros paquetes.</p>\n<p>Los textos traducidos pueden cargarse desde una base de datos o un archivo.</p>\n<h3 id=\"Multiples-idiomas-desde-un-unico-paquete-de-aplicaciones\"><a href=\"#Multiples-idiomas-desde-un-unico-paquete-de-aplicaciones\" class=\"headerlink\" title=\"Múltiples idiomas desde un único paquete de aplicaciones\"></a>Múltiples idiomas desde un único paquete de aplicaciones</h3><p>Para cambiar el idioma, tenemos que reiniciar la aplicación, pero no tenemos que servir un fichero de aplicaciones diferente.</p>\n<p>Esto significa que podemos, con alguna configuración, admitir varios idiomas con un solo paquete de aplicaciones en un solo nombre de host.</p>\n<h3 id=\"Tiempo-de-compilacion-en-linea\"><a href=\"#Tiempo-de-compilacion-en-linea\" class=\"headerlink\" title=\"Tiempo de compilación en línea\"></a>Tiempo de compilación en línea</h3><p>Una aplicación localizada ahora solo se compilará una vez. En lugar de múltiples compilaciones para producir un paquete por idioma, se produce un paquete por idioma reemplazando los marcadores de posición <code>$localize</code> con textos traducidos.</p>\n<p>Ahora  hay que agregar el paquete <code>@angular/localize</code> para posibilitar la localización (varios idiomas). La buena noticia es que ya no tenemos que incluir el código de localización de Angular en nuestros paquetes si solo tenemos un idioma.</p>\n<p>Si no usamos plantillas localizadas, las instrucciones de <em>Ivy</em> <code>i18n *</code> se sacan del paquete principal.</p>\n<h3 id=\"Textos-localizables-en-modelos-de-componentes-y-servicios\"><a href=\"#Textos-localizables-en-modelos-de-componentes-y-servicios\" class=\"headerlink\" title=\"Textos localizables en modelos de componentes y servicios\"></a>Textos localizables en modelos de componentes y servicios</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&#123;&#123; title &#125;&#125;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  title = $localize<span class=\"string\">`Welcome to MyApp`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 3. Un marcador de posición de texto de traducción en un modelo de componente.</em></p>\n<p>Una nueva característica de internacionalización es que también podemos incluir marcadores de posición para textos traducidos en el contenido de nuestros modelos como se ve en el Listado 3. Anteriormente, esto solo era posible en las plantillas.</p>\n<h2 id=\"Ambitos-adicionales-de-proveedores-de-dependencias\"><a href=\"#Ambitos-adicionales-de-proveedores-de-dependencias\" class=\"headerlink\" title=\"Ámbitos adicionales de proveedores de dependencias\"></a>Ámbitos adicionales de proveedores de dependencias</h2><p>Siempre hemos tenido alcance de módulo para los proveedores de inyección de servicios. La versión Angular 6 introdujo el alcance <code>&#39;root&#39;</code> y los proveedores <em>tree-shakable</em>, tanto para los proveedores de alcance desde el módulo raíz como desde módulos inferiores.</p>\n<p>La versión angular 9 presenta los nuevos ámbitos de proveedor <code>&#39;platform&#39;</code> y <code>&#39;any&#39;</code>. Los proveedores con ámbito de <code>&#39;platform&#39;</code> se pueden compartir entre múltiples aplicaciones Angular en el mismo documento. El alcance del proveedor <code>&#39;any&#39;</code> compartirá un proveedor por inyector de módulo. Por ejemplo, una instancia de servicio para el paquete principal cargado por adelantado y una instancia de servicio para cada módulo cargado con retraso.</p>\n<h2 id=\"Experiencia-mejorada-del-desarrollador\"><a href=\"#Experiencia-mejorada-del-desarrollador\" class=\"headerlink\" title=\"Experiencia mejorada del desarrollador\"></a>Experiencia mejorada del desarrollador</h2><p>Ivy permite que <em>Angular Language Service</em> admita comprobaciones adicionales durante el desarrollo. Esta es una gran mejora para la experiencia del desarrollador.</p>\n<h3 id=\"Comprobaciones-de-ruta-de-archivo\"><a href=\"#Comprobaciones-de-ruta-de-archivo\" class=\"headerlink\" title=\"Comprobaciones de ruta de archivo\"></a>Comprobaciones de ruta de archivo</h3><p><em>Angular Language Service</em> verifica continuamente la hoja de estilo de componentes y las rutas de plantilla.</p>\n<h3 id=\"Verificaciones-de-tipo-de-plantilla\"><a href=\"#Verificaciones-de-tipo-de-plantilla\" class=\"headerlink\" title=\"Verificaciones de tipo de plantilla\"></a>Verificaciones de tipo de plantilla</h3><p>Las plantillas se verifican por tipo, de acuerdo con el modo de verificación de tipo de plantilla como se describe más abajo en la sección “Modo estricto”. Los nombres y tipos de miembros se verifican, incluso en vistas incrustadas. Lo que anteriormente resultaba en errores de tiempo de ejecución ahora se detecta durante el desarrollo y la construcción.</p>\n<h2 id=\"Nueva-API-de-depuracion-en-modo-de-desarrollo\"><a href=\"#Nueva-API-de-depuracion-en-modo-de-desarrollo\" class=\"headerlink\" title=\"Nueva API de depuración en modo de desarrollo\"></a>Nueva API de depuración en modo de desarrollo</h2><p><code>ng.probe</code> ha sido reemplazado por una nueva API de depuración en modo de desarrollo. Las funciones más notables son <code>ng.applyChanges</code> y<code> ng.getComponent</code>.</p>\n<h2 id=\"Modo-estricto\"><a href=\"#Modo-estricto\" class=\"headerlink\" title=\"Modo estricto\"></a>Modo estricto</h2><h3 id=\"Esquema-estricto-del-espacio-de-trabajo\"><a href=\"#Esquema-estricto-del-espacio-de-trabajo\" class=\"headerlink\" title=\"Esquema estricto del espacio de trabajo\"></a>Esquema estricto del espacio de trabajo</h3><p>El comando <code>ng new</code> ahora es compatible con el indicador<code> --strict</code> que por defecto está desactivado (<code>false</code>).</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new my-app --strict</span><br></pre></td></tr></table></figure>\n\n<p>Cuando está habilitado, este parámetro agrega algunas comprobaciones estrictas del compilador TypeScript como se ve en el Listado 4.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitReturns&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitThis&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noFallthroughCasesInSwitch&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strictlyNullChecks&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 4. Opciones del compilador TypeScript habilitadas en un estricto espacio de trabajo angular.</em></p>\n<p>Curiosamente, esto no agrega las mismas opciones que si simplemente estableciéramos <code>&quot;strict&quot;: true</code> en el objeto <code>compilerOptions</code>. Comparemos la opción estricta del <em>workspace</em> Angular con la opción estricta del compilador TypeScript.</p>\n<p>Ambos tienen estas opciones en común:</p>\n<ul>\n<li><code>noImplicitAny</code></li>\n<li><code>noImplicitThis</code></li>\n<li><code>strictlyNullChecks</code></li>\n</ul>\n<p>La opción estricta de Angular establece además estas opciones:</p>\n<ul>\n<li><code>noImplicitReturns</code></li>\n<li><code>noFallthroughCasesInSwitch</code></li>\n</ul>\n<p>mientras que la opción estricta del compilador TypeScript establece adicionalmente estas opciones:</p>\n<ul>\n<li><code>alwaysStrict</code></li>\n<li><code>strictlyBindCallApply</code></li>\n<li><code>strictlyFunctionTypes</code></li>\n<li><code>estrictoPropertyInitialization</code></li>\n</ul>\n<p>Además, la opción de Angular no establece la comprobación del tipo de plantilla en el nuevo modo estricto, lo deja en el modo <code>&#39;full&#39;</code> anterior.</p>\n<h3 id=\"Verificacion-estricta-del-tipo-de-plantilla\"><a href=\"#Verificacion-estricta-del-tipo-de-plantilla\" class=\"headerlink\" title=\"Verificación estricta del tipo de plantilla\"></a>Verificación estricta del tipo de plantilla</h3><p>Hemos tenido la opción de habilitar la verificación del tipo de plantilla desde Angular versión 5 configurando <code>&quot;fullTemplateTypeCheck&quot;:true</code> en el objeto<code>angularCompilerOptions</code>.</p>\n<p>Ivy presenta una estricta comprobación del tipo de plantilla como se ve en el Listado 5. Cuando se establece esta nueva opción del compilador Angular, se ignora el valor de <code>fullTemplateTypeCheck</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;angularCompilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;strictTemplates&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 5. Habilita la comprobación estricta del tipo de plantilla.</em></p>\n<p>La comprobación de tipo de plantilla estricta verifica los tipos de enlaces de propiedades y respeta la opción <code>stricNullChecks</code>. También verifica los tipos de referencias de plantilla a directivas y componentes, incluidos los tipos genéricos. También se verifican los tipos de variables de contexto de plantilla, lo cual es excelente para los bucles <code>NgFor</code>. El tipo <code>$ event</code> está marcado para enlaces de eventos y animaciones. Incluso el tipo de elementos DOM nativos se verifica con una comprobación estricta del tipo de plantilla.</p>\n<p>Estas comprobaciones adicionales pueden conducir a errores y falsos positivos bajo ciertas circunstancias. Por ejemplo, cuando se usan librerías que no están compiladas con <code>strictNullChecks</code>. Para abordar esto, la verificación estricta del tipo de plantilla tiene opciones para optar por no participar y ajustar los controles. Por ejemplo, <code>strictTemplates</code> es en realidad una atajo de 8 opciones de compilador Angular.</p>\n<h2 id=\"Herencia-de-clase-de-componente-y-directiva-mejorada\"><a href=\"#Herencia-de-clase-de-componente-y-directiva-mejorada\" class=\"headerlink\" title=\"Herencia de clase de componente y directiva mejorada\"></a>Herencia de clase de componente y directiva mejorada</h2><p>Las clases base sin selector ahora son compatibles con directivas y componentes. Algunos metadatos ahora se heredan de componentes base y clases directivas. Esto hace que sea más fácil extender, por ejemplo, las directivas Angular Components y Angular Router.</p>\n<h2 id=\"Ultimas-versiones-de-TypeScript\"><a href=\"#Ultimas-versiones-de-TypeScript\" class=\"headerlink\" title=\"Últimas versiones de TypeScript\"></a>Últimas versiones de TypeScript</h2><p>Las versiones de TypeScript 3.6 y 3.7 son compatibles con la versión angular 9. Las versiones anteriores de TypeScript ya no son compatibles. Consulta la Tabla 1 para comparar la compatibilidad de TypeScript entre<br>todas las versiones Angular.</p>\n<p><a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support.csv\">vista bruta</a><br><a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv\">descargable angular-cli-node-js-typescript-support.csv</a> hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<p><em>Tabla 1. Tabla de compatibilidad del Angular CLI, Angular, Node.js y TypeScript.</em> <a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3\"><em>Abrir en una pestaña nueva</em></a>*</p>\n<p>TypeScript versión 3.6 presenta estas y otras características:</p>\n<ul>\n<li>Soporte Unicode para identificadores en destinos modernos</li>\n<li>Experiencia de desarrollador mejorada para promesas</li>\n<li>Comprobación de tipo más estricto de generadores</li>\n</ul>\n<p>TypeScript versión 3.7 presenta estas y otras características que podemos usar con Angular versión 9:</p>\n<ul>\n<li>Operador de encadenamiento opcional (<code>?.</code>) similar al operador de navegación segura para plantillas Angular</li>\n<li>Operador de unión con nulos (<code>??</code>)</li>\n<li>Funciones de afirmación de pruebas (<code>assert parameterName is typeName</code> y <code>asserts parameterName</code>)</li>\n<li><code>await</code> de primer nivel</li>\n<li>Alias ​​de tipo recursivo mejorado</li>\n<li>Mejora de la experiencia del desarrollador para funciones de comprobaciones</li>\n</ul>\n<h2 id=\"Generacion-mejorada-del-lado-del-servidor-con-Angular-Universal\"><a href=\"#Generacion-mejorada-del-lado-del-servidor-con-Angular-Universal\" class=\"headerlink\" title=\"Generación mejorada del lado del servidor con Angular Universal\"></a>Generación mejorada del lado del servidor con Angular Universal</h2><p>Angular Universal versión 9 se lanza con un servidor de desarrollo Node.js Express para proporcionar un entorno realista durante el desarrollo.</p>\n<p>También parte de este lanzamiento es un constructor del CLI para pre-renderizar rutas estáticas usando <code>guess-parser</code>, inspirado en <code>angular-prerender</code>. Podemos pasar un archivo de rutas para renderizar rutas dinámicas (rutas con parámetros).</p>\n<h3 id=\"¿Como-empiezo\"><a href=\"#¿Como-empiezo\" class=\"headerlink\" title=\"¿Cómo empiezo?\"></a>¿Cómo empiezo?</h3><p>Podemos agregar Angular Universal usando el comando <code>ng add @nguniversal/express-engine</code>. Luego podemos usar el comando del constructor <code>ng run myapp:serve-ssr</code> para iniciar el servidor de desarrollo de renderizado del lado del servidor con recarga en vivo. De manera similar, podemos usar <code>ng run myapp:prerender</code> para detectar rutas estáticas y dinámicas y pre renderizarlas.</p>\n<h2 id=\"Experiencia-de-clases-y-estilo-mejorada\"><a href=\"#Experiencia-de-clases-y-estilo-mejorada\" class=\"headerlink\" title=\"Experiencia de clases y estilo mejorada\"></a>Experiencia de clases y estilo mejorada</h2><p>Al aplicación de estilo en Angular <em>Ivy</em> ha sido reelaborado. La combinación de clases HTML estáticas con las directivas <code>NgStyle</code> y<code> NgClass</code> es ahora totalmente compatible y más fácil de entender.</p>\n<h3 id=\"Soporte-de-propiedades-personalizadas-de-CSS\"><a href=\"#Soporte-de-propiedades-personalizadas-de-CSS\" class=\"headerlink\" title=\"Soporte de propiedades personalizadas de CSS\"></a>Soporte de propiedades personalizadas de CSS</h3><p>Como parte de la reescritura del estilo Ivy, ahora se admiten las propiedades personalizadas de CSS enlazadas.</p>\n<p>Un ejemplo de enlace css puede ser así:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.--my-var</span>]=<span class=\"string\">&quot;myProperty || &#x27;any value&#x27;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Las propiedades personalizadas de CSS tienen control de alcance, por lo que esta propiedad de CSS se limitaría al DOM del componente.</p>\n<h2 id=\"Lanzamiento-estable-de-Bazel-como-opcion-de-suscripcion\"><a href=\"#Lanzamiento-estable-de-Bazel-como-opcion-de-suscripcion\" class=\"headerlink\" title=\"Lanzamiento estable de Bazel como opción de suscripción\"></a>Lanzamiento estable de Bazel como opción de suscripción</h2><p>Bazel versión 2.1 es una herramienta de automatización de compilación opcional para Angular versión 9.</p>\n<h3 id=\"¿Como-empiezo-1\"><a href=\"#¿Como-empiezo-1\" class=\"headerlink\" title=\"¿Cómo empiezo?\"></a>¿Cómo empiezo?</h3><p>Para habilitar Bazel, usa <code>ng add @angular/bazel</code> o la colección de esquemas <code>@angular/bazel</code> cuando generes un espacio de trabajo Angular.</p>\n<p>Asegúrate de seguir <a href=\"https://docs.bazel.build/versions/2.0.0/install.html\">la guía de instalación de Bazel</a> para tu sistema operativo.</p>\n<h2 id=\"Angular-Components\"><a href=\"#Angular-Components\" class=\"headerlink\" title=\"Angular Components\"></a>Angular Components</h2><p>La versión Angular 9 viene con componentes oficiales para YouTube y Google Maps. Se agregó una directiva y un servicio de portapapeles al Angular CDK.</p>\n<h2 id=\"Pruebas\"><a href=\"#Pruebas\" class=\"headerlink\" title=\"Pruebas\"></a>Pruebas</h2><p>La mayor sorpresa de la versión Angular versión 9 son las muchas mejoras en las pruebas. Se resuelven problemas de rendimiento, se mejoran los tipos y se introducen nuevos conceptos.</p>\n<p><a href=\"https://indepth.dev/next-level-testing-in-angular-ivy-version-9/\">Obtén información sobre las principales características y mejoras para las pruebas en “Pruebas de siguiente nivel en Angular <em>Ivy</em> versión 9”</a>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusión\"></a>Conclusión</h2><p>Uno de los objetivos más importantes ha sido mantener la compatibilidad hacia atrás entre <em>Ivy</em> y <em>View Engine</em> tanto como fue posible.</p>\n<p>Por supuesto, la versión Angular 9 también incluye correcciones de errores, temas obsoletos y cambios importantes. <em>Ivy</em> también aborda algunos problemas de antiguos que no cubrimos en este artículo.</p>\n<p>Angular <em>Ivy</em> es un facilitador para las características que están por venir. Como hemos discutido en este artículo, <em>Ivy</em> ya nos ha dado beneficios para diferentes casos de uso. Sin embargo, las mejores características llegarán en futuras versiones de Angular. ¿Cuál de las posibles características que se entregarán en las versiones 10 y 11 de Angular está por decidir?</p>\n<p>Solo discutimos qué es parte de las API públicas y estables de Angular versión 9. Algunas API experimentales son parte de esta versión, como <code>renderComponent</code>,<code> markDirty</code> y <code>detectChanges</code>. Sin embargo, todavía están sujetos a cambios.</p>\n<p>Con la retirada de las declaraciones de componentes de entrada y los componentes con carga diferida utilizando módulos de representación, estamos un paso más cerca de tener <a href=\"https://indepth.dev/angular-revisited-tree-shakable-components-and-optional-ngmodules/\">componentes que se pueden eliminar del árbol y módulos Angular opcionales</a>.</p>\n<p><a href=\"https://indepth.dev/component-features-with-angular-ivy/\">Los componentes de funcionalidad</a> también forman parte de esta versión, pero solo están expuestos para uso interno de <em>Ivy</em>.</p>\n<p>La versión de Angular <em>Ivy</em> versión 9 nos brinda mejoras para el empaquetamiento, las pruebas, la experiencia del desarrollador, las herramientas, la depuración y la verificación de tipos. Toda una buena colección de características.</p>\n<h2 id=\"Recursos-relacionados\"><a href=\"#Recursos-relacionados\" class=\"headerlink\" title=\"Recursos relacionados\"></a>Recursos relacionados</h2><h3 id=\"Componentes-con-carga-lenta\"><a href=\"#Componentes-con-carga-lenta\" class=\"headerlink\" title=\"Componentes con carga lenta\"></a>Componentes con carga lenta</h3><p><a href=\"https://youtu.be/DA3efofhpq4\">Información sobre los módulos de presentación en la charla “Angular revisited: Tree-shakable components and optional NgModules”</a>.</p>\n<p><a href=\"https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8\">Aprende a usar los componentes de carga diferida en “Lazy load components in Angular” por Kevin Kreuzer</a>.</p>\n<h3 id=\"Comprobacion-de-tipos-en-plantillas\"><a href=\"#Comprobacion-de-tipos-en-plantillas\" class=\"headerlink\" title=\"Comprobación de tipos en plantillas\"></a>Comprobación de tipos en plantillas</h3><p><a href=\"https://angular.io/guide/template-typecheck#troubleshooting-template-errors\">Lee la guía oficial sobre la verificación de tipos en plantillas Angular para conocer los detalles de la resolución de problemas y la configuración</a>.</p>\n<h3 id=\"Globalizacion-1\"><a href=\"#Globalizacion-1\" class=\"headerlink\" title=\"Globalización\"></a>Globalización</h3><p><a href=\"https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/\">Manfred Steyer analiza las configuraciones regionales de carga diferida en “Lazy Loading Locales with Angular”</a>.</p>\n<p><a href=\"https://blog.ninja-squad.com/2019/12/10/angular-localize/\">Cédric Exbrayat analiza la globalización de <em>Ivy</em> en “Internationalization with @angular&#x2F;localize”</a>.</p>\n<h3 id=\"Ambitos-adicionales-de-proveedor-de-dependencias\"><a href=\"#Ambitos-adicionales-de-proveedor-de-dependencias\" class=\"headerlink\" title=\"Ámbitos adicionales de proveedor de dependencias\"></a>Ámbitos adicionales de proveedor de dependencias</h3><p>Obtén información sobre los ámbitos de proveedor de <code>&#39;any&#39;</code> y <code>&#39;platform&#39;</code> en <a href=\"https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb\">“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler</a>.</p>\n<h3 id=\"Nueva-API-de-depuracion\"><a href=\"#Nueva-API-de-depuracion\" class=\"headerlink\" title=\"Nueva API de depuración\"></a>Nueva API de depuración</h3><p><a href=\"https://angular.io/api/core/global\">Lee sobre la API de depuración completa en la documentación oficial</a>.</p>\n<h3 id=\"Angular-Universal-version-9\"><a href=\"#Angular-Universal-version-9\" class=\"headerlink\" title=\"Angular Universal versión 9\"></a>Angular Universal versión 9</h3><p>Estos dos artículos entran en detalles de Angular Universal versión 9:</p>\n<ul>\n<li><a href=\"https://trilon.io/blog/angular-universal-v9-whats-new\">“Angular Universal v9: What’s New ?” by Mark Pieszak</a></li>\n<li><a href=\"https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1\">“Angular v9 &amp; Universal: SSR and prerendering out of the box!” by Sam Vloeberghs</a></li>\n</ul>\n<p>Aprende sobre <code>angular-prerender</code>, la biblioteca que inspiró estas nuevas características de Angular Universal en <a href=\"https://media-codings.com/articles/prerender-angular-apps-with-a-single-command\">“Prerender Angular Apps with a single Command” by Christoph Guttandin</a>.</p>\n<h3 id=\"Enlace-de-propiedades-personalizadas-de-CSS\"><a href=\"#Enlace-de-propiedades-personalizadas-de-CSS\" class=\"headerlink\" title=\"Enlace de propiedades personalizadas de CSS\"></a>Enlace de propiedades personalizadas de CSS</h3><p><a href=\"https://twitter.com/yurzui/status/1221159415820275717\">Mira este tweet y la demostración de Alexey Zuev para ver los enlaces de Propiedades personalizadas de CSS en acción</a>.</p>\n<h2 id=\"Revisores\"><a href=\"#Revisores\" class=\"headerlink\" title=\"Revisores\"></a>Revisores</h2><p>Siempre es útil tener una segunda opinión sobre nuestro trabajo o incluso detectar errores tontos. Para este artículo el autor tuvo el placer de ser revisado por:</p>\n<ul>\n<li><a href=\"https://twitter.com/chrisguttandin\">Christoph Guttandin</a></li>\n<li><a href=\"https://indepth.dev/author/evgeny/\">Evgeny Fedorenko</a></li>\n<li><a href=\"https://dev.to/santoshyadav198613\">Santosh Yadav</a></li>\n</ul>\n<p>Cover photo by <a href=\"https://www.pexels.com/photo/light-new-year-s-eve-fireworks-sylvester-40663/\">Pixabay</a> on Pexels.</p>\n<p>El autor original: <a href=\"https://twitter.com/LayZeeDK\">Lars Gyrup Brink Nielsen</a></p>\n<p>El traductor al español: <a href=\"https://twitter.com/albertobasalo\">Alberto Basalo</a></p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/light-new-year-s-eve-fireworks-sylvester-40663.jpg\" alt=\"un-vistazo-a-las-características-principales-en-el-lanzamiento-de-Angular-Ivy-versión-9\"></p>\n<p>Este artículo es una traducción aprobada por el autor, <a href=\"https://twitter.com/LayZeeDK\">Lars Gyrup Brink Nielsen</a>, y editor originales.</p>\n<p>Enlace original en inglés <a href=\"https://indepth.dev/a-look-at-major-features-in-the-angular-ivy-version-9-release/\">A look at major features in the Angular Ivy version 9 release</a> del 6 de febrero de 2020</p>\n<p>En resumen con Angular 9 tenemos cambios. MUCHOS y en todas partes: globalización dinámica, modo estricto, <em>Bazel</em> y mucho más.</p>\n<p><em>(Y sí, ahora por fin se ha lanzado <strong>Angular Ivy versión 9</strong>)</em></p>","more":"<h2 id=\"Ivy-esta-habilitado-por-defecto\"><a href=\"#Ivy-esta-habilitado-por-defecto\" class=\"headerlink\" title=\"Ivy está habilitado por defecto\"></a><em>Ivy</em> está habilitado por defecto</h2><p>En versiones anteriores de Angular, tuvimos que optar por <em>Ivy</em>. En la versión 9, tenemos que optar por no usar  <em>Ivy</em> si queremos quedarnos con View Engine. Esto es posible en las versiones 9 y la futura 10 para garantizar una transición más fluida de <em>View Engine</em> a <em>Ivy</em>.</p>\n<p>Las librerías <em>se pueden</em> compilar AOT, pero no es recomendable. El equipo de Angular tiene un plan de migración de <em>View Engine</em> a <em>Ivy</em> que recomienda publicar solo librerías compatibles con <em>View Engine</em> compiladas con JIT para Angular versión 9. El compilador de compatibilidad Angular actualizará las librerías compatibles con <em>View Engine</em> a <em>Ivy</em> cuando se instalen en una aplicación Angular <em>Ivy</em>.</p>\n<p>Obtén información sobre la compatibilidad de la biblioteca y el plan de transición de <code>View Engine-to-Ivy</code> en <a href=\"https://indepth.dev/the-angular-ivy-guide-for-library-authors/\">“La guía de Angular <em>Ivy</em> para autores de librerías”</a> .</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;angularCompilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;enableIvy&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// polyfills.ts</span></span><br><span class=\"line\"><span class=\"comment\">// Solo se usa en aplicaciones multilingües de Ivy</span></span><br><span class=\"line\"><span class=\"comment\">// import &#x27;@angular/localize/init&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 1. Optar por no usar <em>Ivy</em> para recurrir a <em>View Engine</em>.</em></p>\n<p>Si tienes problemas con <em>Ivy</em> en tu aplicación, o en cualquiera de las librerías de las que depende, puedes optar por salir de <em>Ivy</em> y volver a <em>View Engine</em>. Hazlo desactivando la opción del compilador angular <code>enableIvy</code> y deshabilitando<code> @angular/localize</code> como se ve en Listado 1.</p>\n<p>Optar por evitar <em>Ivy</em> en un entorno de servidor es un poco más complicado. <a href=\"https://angular.io/guide/ivy#using-ssr-without-ivy\">Sigue la guía oficial para darte de baja de <em>Ivy</em> cuando uses la renderización del lado del servidor</a>.</p>\n<h2 id=\"El-principio-de-localidad\"><a href=\"#El-principio-de-localidad\" class=\"headerlink\" title=\"El principio de localidad\"></a>El principio de localidad</h2><p>Antes, para compilar un componente en <em>View Engine</em>, Angular necesitaba información sobre todas sus dependencias declaradas. Esto significa que las librerías Angular no se pueden compilar AOT usando <em>View Engine</em>.</p>\n<p>Ahora para compilar un componente en <em>Ivy</em>, Angular solo necesita información sobre el componente en sí. Pero, <em>Ivy</em> no necesita metadatos de ninguna dependencia declarable para compilar un componente.</p>\n<p>El principio de localidad significa que, en general, veremos tiempos de construcción más rápidos.</p>\n<h3 id=\"Componentes-con-carga-diferida\"><a href=\"#Componentes-con-carga-diferida\" class=\"headerlink\" title=\"Componentes con carga diferida\"></a>Componentes con carga diferida</h3><p>Las declaraciones <code>entryComponents</code> están en desuso porque ya no son necesarias. Cualquier componente <em>Ivy</em> puede cargarse de forma diferida y renderizarse dinámicamente.</p>\n<p>Esto significa que ahora podemos cargar de forma diferida y renderizar un componente sin enrutamiento o módulos Angular. Sin embargo, en la práctica aún tenemos que usar módulos para renderizar componentes o módulos funcionales para vincular la plantilla de un componente a sus dependencias.</p>\n<p>Las librerías que solo son utilizadas por un componente con carga diferida se agrupan en fragmentos con carga diferida.</p>\n<h2 id=\"Mejoras-en-la-carga-diferencial\"><a href=\"#Mejoras-en-la-carga-diferencial\" class=\"headerlink\" title=\"Mejoras en la carga diferencial\"></a>Mejoras en la carga diferencial</h2><p>Cuando se introdujo la carga diferencial en Angular versión 8, el proceso de compilación se ejecutaba una vez para el paquete ES5 y otra vez para el paquete ES2015+.</p>\n<p>En Angular versión 9, primero se emite un paquete ES2015+. Ese paquete se transfiere a un paquete ES5 separado. De esta manera, no tenemos que pasar por un proceso de compilación completo dos veces.</p>\n<h2 id=\"Compilacion-AOT-en-todas-partes\"><a href=\"#Compilacion-AOT-en-todas-partes\" class=\"headerlink\" title=\"Compilación AOT en todas partes\"></a>Compilación AOT en todas partes</h2><p>AOT está habilitado de forma predeterminada en las compilaciones, el servidor de desarrollo e incluso en las pruebas. Anteriormente, la compilación AOT era significativamente más lenta que la compilación JIT, por lo que JIT se usaba para el desarrollo y las pruebas. Con las mejoras de tiempo de construcción y reconstrucción en Ivy, la compilación AOT ahora ofrece una gran experiencia al desarrollador.</p>\n<p>Cuando utilizábamos la compilación JIT en desarrollo y solo la compilación AOT en la compilación final, algunos errores se detectaban solo al hacer compilaciones de producción o, peor aún, en tiempo de ejecución.</p>\n<h2 id=\"Tamanos-de-paquete\"><a href=\"#Tamanos-de-paquete\" class=\"headerlink\" title=\"Tamaños de paquete\"></a>Tamaños de paquete</h2><p>Ivy puede habilitar paquetes más pequeños porque usa el <em>Ivy Instruction Set</em>, que es un conjunto de instrucciones de representación de tiempo de ejecución potencialmente <em>tree-shakable</em>. Nuestros paquetes solo incluirán las instrucciones de renderizado que realmente usamos en nuestros proyectos.</p>\n<p>Esto es ideal para casos de uso como <em>micro-frontends</em>, Angular Elements y aplicaciones web donde Angular no controla todo el documento.</p>\n<p>Sin embargo, la diferencia en los tamaños de nuestros paquetes entre <em>View Engine</em> e <em>Ivy</em> variará según el tamaño de nuestra aplicación y las librerías de terceros que utilizamos. En general:</p>\n<ul>\n<li>Las aplicaciones pequeñas y simples verán una disminución considerable del peso del paquete.</li>\n<li>Las aplicaciones complejas verán un aumento en el fichero principal, pero una disminución en los tamaños de paquetes con carga diferida.</li>\n</ul>\n<p>Esto significa una disminución considerable del tamaño de descarga combinada para aplicaciones grandes, pero podría significar un aumento en el peso total para aplicaciones medianas. En ambos casos, el tamaño del paquete principal probablemente aumentará, lo que es malo para el tiempo de carga inicial de la página.</p>\n<h2 id=\"Globalizacion\"><a href=\"#Globalizacion\" class=\"headerlink\" title=\"Globalización\"></a>Globalización</h2><p>Las configuraciones regionales (formato de número, formato de fecha y otras configuraciones regionales) se pueden cargar dinámicamente en tiempo de ejecución en lugar de tener que registrarse en tiempo de compilación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@angular/localize/init&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; loadTranslations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/localize&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">loadTranslations (&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;8374172394781134519&#x27;</span>: <span class=\"string\">&#x27;¡Hola, &#123;$nombre de usuario&#125;! Bienvenido a &#123;$appName&#125;. &#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 2. Carga dinámica de traducciones.</em></p>\n<p>Como se ve en el Listado 2, los textos traducidos también se pueden cargar dinámicamente en tiempo de ejecución en lugar de ser parte de nuestros paquetes.</p>\n<p>Los textos traducidos pueden cargarse desde una base de datos o un archivo.</p>\n<h3 id=\"Multiples-idiomas-desde-un-unico-paquete-de-aplicaciones\"><a href=\"#Multiples-idiomas-desde-un-unico-paquete-de-aplicaciones\" class=\"headerlink\" title=\"Múltiples idiomas desde un único paquete de aplicaciones\"></a>Múltiples idiomas desde un único paquete de aplicaciones</h3><p>Para cambiar el idioma, tenemos que reiniciar la aplicación, pero no tenemos que servir un fichero de aplicaciones diferente.</p>\n<p>Esto significa que podemos, con alguna configuración, admitir varios idiomas con un solo paquete de aplicaciones en un solo nombre de host.</p>\n<h3 id=\"Tiempo-de-compilacion-en-linea\"><a href=\"#Tiempo-de-compilacion-en-linea\" class=\"headerlink\" title=\"Tiempo de compilación en línea\"></a>Tiempo de compilación en línea</h3><p>Una aplicación localizada ahora solo se compilará una vez. En lugar de múltiples compilaciones para producir un paquete por idioma, se produce un paquete por idioma reemplazando los marcadores de posición <code>$localize</code> con textos traducidos.</p>\n<p>Ahora  hay que agregar el paquete <code>@angular/localize</code> para posibilitar la localización (varios idiomas). La buena noticia es que ya no tenemos que incluir el código de localización de Angular en nuestros paquetes si solo tenemos un idioma.</p>\n<p>Si no usamos plantillas localizadas, las instrucciones de <em>Ivy</em> <code>i18n *</code> se sacan del paquete principal.</p>\n<h3 id=\"Textos-localizables-en-modelos-de-componentes-y-servicios\"><a href=\"#Textos-localizables-en-modelos-de-componentes-y-servicios\" class=\"headerlink\" title=\"Textos localizables en modelos de componentes y servicios\"></a>Textos localizables en modelos de componentes y servicios</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&#x27;&#123;&#123; title &#125;&#125;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  title = $localize<span class=\"string\">`Welcome to MyApp`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 3. Un marcador de posición de texto de traducción en un modelo de componente.</em></p>\n<p>Una nueva característica de internacionalización es que también podemos incluir marcadores de posición para textos traducidos en el contenido de nuestros modelos como se ve en el Listado 3. Anteriormente, esto solo era posible en las plantillas.</p>\n<h2 id=\"Ambitos-adicionales-de-proveedores-de-dependencias\"><a href=\"#Ambitos-adicionales-de-proveedores-de-dependencias\" class=\"headerlink\" title=\"Ámbitos adicionales de proveedores de dependencias\"></a>Ámbitos adicionales de proveedores de dependencias</h2><p>Siempre hemos tenido alcance de módulo para los proveedores de inyección de servicios. La versión Angular 6 introdujo el alcance <code>&#39;root&#39;</code> y los proveedores <em>tree-shakable</em>, tanto para los proveedores de alcance desde el módulo raíz como desde módulos inferiores.</p>\n<p>La versión angular 9 presenta los nuevos ámbitos de proveedor <code>&#39;platform&#39;</code> y <code>&#39;any&#39;</code>. Los proveedores con ámbito de <code>&#39;platform&#39;</code> se pueden compartir entre múltiples aplicaciones Angular en el mismo documento. El alcance del proveedor <code>&#39;any&#39;</code> compartirá un proveedor por inyector de módulo. Por ejemplo, una instancia de servicio para el paquete principal cargado por adelantado y una instancia de servicio para cada módulo cargado con retraso.</p>\n<h2 id=\"Experiencia-mejorada-del-desarrollador\"><a href=\"#Experiencia-mejorada-del-desarrollador\" class=\"headerlink\" title=\"Experiencia mejorada del desarrollador\"></a>Experiencia mejorada del desarrollador</h2><p>Ivy permite que <em>Angular Language Service</em> admita comprobaciones adicionales durante el desarrollo. Esta es una gran mejora para la experiencia del desarrollador.</p>\n<h3 id=\"Comprobaciones-de-ruta-de-archivo\"><a href=\"#Comprobaciones-de-ruta-de-archivo\" class=\"headerlink\" title=\"Comprobaciones de ruta de archivo\"></a>Comprobaciones de ruta de archivo</h3><p><em>Angular Language Service</em> verifica continuamente la hoja de estilo de componentes y las rutas de plantilla.</p>\n<h3 id=\"Verificaciones-de-tipo-de-plantilla\"><a href=\"#Verificaciones-de-tipo-de-plantilla\" class=\"headerlink\" title=\"Verificaciones de tipo de plantilla\"></a>Verificaciones de tipo de plantilla</h3><p>Las plantillas se verifican por tipo, de acuerdo con el modo de verificación de tipo de plantilla como se describe más abajo en la sección “Modo estricto”. Los nombres y tipos de miembros se verifican, incluso en vistas incrustadas. Lo que anteriormente resultaba en errores de tiempo de ejecución ahora se detecta durante el desarrollo y la construcción.</p>\n<h2 id=\"Nueva-API-de-depuracion-en-modo-de-desarrollo\"><a href=\"#Nueva-API-de-depuracion-en-modo-de-desarrollo\" class=\"headerlink\" title=\"Nueva API de depuración en modo de desarrollo\"></a>Nueva API de depuración en modo de desarrollo</h2><p><code>ng.probe</code> ha sido reemplazado por una nueva API de depuración en modo de desarrollo. Las funciones más notables son <code>ng.applyChanges</code> y<code> ng.getComponent</code>.</p>\n<h2 id=\"Modo-estricto\"><a href=\"#Modo-estricto\" class=\"headerlink\" title=\"Modo estricto\"></a>Modo estricto</h2><h3 id=\"Esquema-estricto-del-espacio-de-trabajo\"><a href=\"#Esquema-estricto-del-espacio-de-trabajo\" class=\"headerlink\" title=\"Esquema estricto del espacio de trabajo\"></a>Esquema estricto del espacio de trabajo</h3><p>El comando <code>ng new</code> ahora es compatible con el indicador<code> --strict</code> que por defecto está desactivado (<code>false</code>).</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new my-app --strict</span><br></pre></td></tr></table></figure>\n\n<p>Cuando está habilitado, este parámetro agrega algunas comprobaciones estrictas del compilador TypeScript como se ve en el Listado 4.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitReturns&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitThis&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;noFallthroughCasesInSwitch&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strictlyNullChecks&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 4. Opciones del compilador TypeScript habilitadas en un estricto espacio de trabajo angular.</em></p>\n<p>Curiosamente, esto no agrega las mismas opciones que si simplemente estableciéramos <code>&quot;strict&quot;: true</code> en el objeto <code>compilerOptions</code>. Comparemos la opción estricta del <em>workspace</em> Angular con la opción estricta del compilador TypeScript.</p>\n<p>Ambos tienen estas opciones en común:</p>\n<ul>\n<li><code>noImplicitAny</code></li>\n<li><code>noImplicitThis</code></li>\n<li><code>strictlyNullChecks</code></li>\n</ul>\n<p>La opción estricta de Angular establece además estas opciones:</p>\n<ul>\n<li><code>noImplicitReturns</code></li>\n<li><code>noFallthroughCasesInSwitch</code></li>\n</ul>\n<p>mientras que la opción estricta del compilador TypeScript establece adicionalmente estas opciones:</p>\n<ul>\n<li><code>alwaysStrict</code></li>\n<li><code>strictlyBindCallApply</code></li>\n<li><code>strictlyFunctionTypes</code></li>\n<li><code>estrictoPropertyInitialization</code></li>\n</ul>\n<p>Además, la opción de Angular no establece la comprobación del tipo de plantilla en el nuevo modo estricto, lo deja en el modo <code>&#39;full&#39;</code> anterior.</p>\n<h3 id=\"Verificacion-estricta-del-tipo-de-plantilla\"><a href=\"#Verificacion-estricta-del-tipo-de-plantilla\" class=\"headerlink\" title=\"Verificación estricta del tipo de plantilla\"></a>Verificación estricta del tipo de plantilla</h3><p>Hemos tenido la opción de habilitar la verificación del tipo de plantilla desde Angular versión 5 configurando <code>&quot;fullTemplateTypeCheck&quot;:true</code> en el objeto<code>angularCompilerOptions</code>.</p>\n<p>Ivy presenta una estricta comprobación del tipo de plantilla como se ve en el Listado 5. Cuando se establece esta nueva opción del compilador Angular, se ignora el valor de <code>fullTemplateTypeCheck</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;angularCompilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;strictTemplates&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Listado 5. Habilita la comprobación estricta del tipo de plantilla.</em></p>\n<p>La comprobación de tipo de plantilla estricta verifica los tipos de enlaces de propiedades y respeta la opción <code>stricNullChecks</code>. También verifica los tipos de referencias de plantilla a directivas y componentes, incluidos los tipos genéricos. También se verifican los tipos de variables de contexto de plantilla, lo cual es excelente para los bucles <code>NgFor</code>. El tipo <code>$ event</code> está marcado para enlaces de eventos y animaciones. Incluso el tipo de elementos DOM nativos se verifica con una comprobación estricta del tipo de plantilla.</p>\n<p>Estas comprobaciones adicionales pueden conducir a errores y falsos positivos bajo ciertas circunstancias. Por ejemplo, cuando se usan librerías que no están compiladas con <code>strictNullChecks</code>. Para abordar esto, la verificación estricta del tipo de plantilla tiene opciones para optar por no participar y ajustar los controles. Por ejemplo, <code>strictTemplates</code> es en realidad una atajo de 8 opciones de compilador Angular.</p>\n<h2 id=\"Herencia-de-clase-de-componente-y-directiva-mejorada\"><a href=\"#Herencia-de-clase-de-componente-y-directiva-mejorada\" class=\"headerlink\" title=\"Herencia de clase de componente y directiva mejorada\"></a>Herencia de clase de componente y directiva mejorada</h2><p>Las clases base sin selector ahora son compatibles con directivas y componentes. Algunos metadatos ahora se heredan de componentes base y clases directivas. Esto hace que sea más fácil extender, por ejemplo, las directivas Angular Components y Angular Router.</p>\n<h2 id=\"Ultimas-versiones-de-TypeScript\"><a href=\"#Ultimas-versiones-de-TypeScript\" class=\"headerlink\" title=\"Últimas versiones de TypeScript\"></a>Últimas versiones de TypeScript</h2><p>Las versiones de TypeScript 3.6 y 3.7 son compatibles con la versión angular 9. Las versiones anteriores de TypeScript ya no son compatibles. Consulta la Tabla 1 para comparar la compatibilidad de TypeScript entre<br>todas las versiones Angular.</p>\n<p><a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3/raw/ad300b4d2bdbc51b4dd8092c059a68cb22d3774d/angular-cli-node-js-typescript-support.csv\">vista bruta</a><br><a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3#file-angular-cli-node-js-typescript-support-csv\">descargable angular-cli-node-js-typescript-support.csv</a> hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<p><em>Tabla 1. Tabla de compatibilidad del Angular CLI, Angular, Node.js y TypeScript.</em> <a href=\"https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3\"><em>Abrir en una pestaña nueva</em></a>*</p>\n<p>TypeScript versión 3.6 presenta estas y otras características:</p>\n<ul>\n<li>Soporte Unicode para identificadores en destinos modernos</li>\n<li>Experiencia de desarrollador mejorada para promesas</li>\n<li>Comprobación de tipo más estricto de generadores</li>\n</ul>\n<p>TypeScript versión 3.7 presenta estas y otras características que podemos usar con Angular versión 9:</p>\n<ul>\n<li>Operador de encadenamiento opcional (<code>?.</code>) similar al operador de navegación segura para plantillas Angular</li>\n<li>Operador de unión con nulos (<code>??</code>)</li>\n<li>Funciones de afirmación de pruebas (<code>assert parameterName is typeName</code> y <code>asserts parameterName</code>)</li>\n<li><code>await</code> de primer nivel</li>\n<li>Alias ​​de tipo recursivo mejorado</li>\n<li>Mejora de la experiencia del desarrollador para funciones de comprobaciones</li>\n</ul>\n<h2 id=\"Generacion-mejorada-del-lado-del-servidor-con-Angular-Universal\"><a href=\"#Generacion-mejorada-del-lado-del-servidor-con-Angular-Universal\" class=\"headerlink\" title=\"Generación mejorada del lado del servidor con Angular Universal\"></a>Generación mejorada del lado del servidor con Angular Universal</h2><p>Angular Universal versión 9 se lanza con un servidor de desarrollo Node.js Express para proporcionar un entorno realista durante el desarrollo.</p>\n<p>También parte de este lanzamiento es un constructor del CLI para pre-renderizar rutas estáticas usando <code>guess-parser</code>, inspirado en <code>angular-prerender</code>. Podemos pasar un archivo de rutas para renderizar rutas dinámicas (rutas con parámetros).</p>\n<h3 id=\"¿Como-empiezo\"><a href=\"#¿Como-empiezo\" class=\"headerlink\" title=\"¿Cómo empiezo?\"></a>¿Cómo empiezo?</h3><p>Podemos agregar Angular Universal usando el comando <code>ng add @nguniversal/express-engine</code>. Luego podemos usar el comando del constructor <code>ng run myapp:serve-ssr</code> para iniciar el servidor de desarrollo de renderizado del lado del servidor con recarga en vivo. De manera similar, podemos usar <code>ng run myapp:prerender</code> para detectar rutas estáticas y dinámicas y pre renderizarlas.</p>\n<h2 id=\"Experiencia-de-clases-y-estilo-mejorada\"><a href=\"#Experiencia-de-clases-y-estilo-mejorada\" class=\"headerlink\" title=\"Experiencia de clases y estilo mejorada\"></a>Experiencia de clases y estilo mejorada</h2><p>Al aplicación de estilo en Angular <em>Ivy</em> ha sido reelaborado. La combinación de clases HTML estáticas con las directivas <code>NgStyle</code> y<code> NgClass</code> es ahora totalmente compatible y más fácil de entender.</p>\n<h3 id=\"Soporte-de-propiedades-personalizadas-de-CSS\"><a href=\"#Soporte-de-propiedades-personalizadas-de-CSS\" class=\"headerlink\" title=\"Soporte de propiedades personalizadas de CSS\"></a>Soporte de propiedades personalizadas de CSS</h3><p>Como parte de la reescritura del estilo Ivy, ahora se admiten las propiedades personalizadas de CSS enlazadas.</p>\n<p>Un ejemplo de enlace css puede ser así:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">style.--my-var</span>]=<span class=\"string\">&quot;myProperty || &#x27;any value&#x27;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Las propiedades personalizadas de CSS tienen control de alcance, por lo que esta propiedad de CSS se limitaría al DOM del componente.</p>\n<h2 id=\"Lanzamiento-estable-de-Bazel-como-opcion-de-suscripcion\"><a href=\"#Lanzamiento-estable-de-Bazel-como-opcion-de-suscripcion\" class=\"headerlink\" title=\"Lanzamiento estable de Bazel como opción de suscripción\"></a>Lanzamiento estable de Bazel como opción de suscripción</h2><p>Bazel versión 2.1 es una herramienta de automatización de compilación opcional para Angular versión 9.</p>\n<h3 id=\"¿Como-empiezo-1\"><a href=\"#¿Como-empiezo-1\" class=\"headerlink\" title=\"¿Cómo empiezo?\"></a>¿Cómo empiezo?</h3><p>Para habilitar Bazel, usa <code>ng add @angular/bazel</code> o la colección de esquemas <code>@angular/bazel</code> cuando generes un espacio de trabajo Angular.</p>\n<p>Asegúrate de seguir <a href=\"https://docs.bazel.build/versions/2.0.0/install.html\">la guía de instalación de Bazel</a> para tu sistema operativo.</p>\n<h2 id=\"Angular-Components\"><a href=\"#Angular-Components\" class=\"headerlink\" title=\"Angular Components\"></a>Angular Components</h2><p>La versión Angular 9 viene con componentes oficiales para YouTube y Google Maps. Se agregó una directiva y un servicio de portapapeles al Angular CDK.</p>\n<h2 id=\"Pruebas\"><a href=\"#Pruebas\" class=\"headerlink\" title=\"Pruebas\"></a>Pruebas</h2><p>La mayor sorpresa de la versión Angular versión 9 son las muchas mejoras en las pruebas. Se resuelven problemas de rendimiento, se mejoran los tipos y se introducen nuevos conceptos.</p>\n<p><a href=\"https://indepth.dev/next-level-testing-in-angular-ivy-version-9/\">Obtén información sobre las principales características y mejoras para las pruebas en “Pruebas de siguiente nivel en Angular <em>Ivy</em> versión 9”</a>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusión\"></a>Conclusión</h2><p>Uno de los objetivos más importantes ha sido mantener la compatibilidad hacia atrás entre <em>Ivy</em> y <em>View Engine</em> tanto como fue posible.</p>\n<p>Por supuesto, la versión Angular 9 también incluye correcciones de errores, temas obsoletos y cambios importantes. <em>Ivy</em> también aborda algunos problemas de antiguos que no cubrimos en este artículo.</p>\n<p>Angular <em>Ivy</em> es un facilitador para las características que están por venir. Como hemos discutido en este artículo, <em>Ivy</em> ya nos ha dado beneficios para diferentes casos de uso. Sin embargo, las mejores características llegarán en futuras versiones de Angular. ¿Cuál de las posibles características que se entregarán en las versiones 10 y 11 de Angular está por decidir?</p>\n<p>Solo discutimos qué es parte de las API públicas y estables de Angular versión 9. Algunas API experimentales son parte de esta versión, como <code>renderComponent</code>,<code> markDirty</code> y <code>detectChanges</code>. Sin embargo, todavía están sujetos a cambios.</p>\n<p>Con la retirada de las declaraciones de componentes de entrada y los componentes con carga diferida utilizando módulos de representación, estamos un paso más cerca de tener <a href=\"https://indepth.dev/angular-revisited-tree-shakable-components-and-optional-ngmodules/\">componentes que se pueden eliminar del árbol y módulos Angular opcionales</a>.</p>\n<p><a href=\"https://indepth.dev/component-features-with-angular-ivy/\">Los componentes de funcionalidad</a> también forman parte de esta versión, pero solo están expuestos para uso interno de <em>Ivy</em>.</p>\n<p>La versión de Angular <em>Ivy</em> versión 9 nos brinda mejoras para el empaquetamiento, las pruebas, la experiencia del desarrollador, las herramientas, la depuración y la verificación de tipos. Toda una buena colección de características.</p>\n<h2 id=\"Recursos-relacionados\"><a href=\"#Recursos-relacionados\" class=\"headerlink\" title=\"Recursos relacionados\"></a>Recursos relacionados</h2><h3 id=\"Componentes-con-carga-lenta\"><a href=\"#Componentes-con-carga-lenta\" class=\"headerlink\" title=\"Componentes con carga lenta\"></a>Componentes con carga lenta</h3><p><a href=\"https://youtu.be/DA3efofhpq4\">Información sobre los módulos de presentación en la charla “Angular revisited: Tree-shakable components and optional NgModules”</a>.</p>\n<p><a href=\"https://medium.com/angular-in-depth/lazy-load-components-in-angular-596357ab05d8\">Aprende a usar los componentes de carga diferida en “Lazy load components in Angular” por Kevin Kreuzer</a>.</p>\n<h3 id=\"Comprobacion-de-tipos-en-plantillas\"><a href=\"#Comprobacion-de-tipos-en-plantillas\" class=\"headerlink\" title=\"Comprobación de tipos en plantillas\"></a>Comprobación de tipos en plantillas</h3><p><a href=\"https://angular.io/guide/template-typecheck#troubleshooting-template-errors\">Lee la guía oficial sobre la verificación de tipos en plantillas Angular para conocer los detalles de la resolución de problemas y la configuración</a>.</p>\n<h3 id=\"Globalizacion-1\"><a href=\"#Globalizacion-1\" class=\"headerlink\" title=\"Globalización\"></a>Globalización</h3><p><a href=\"https://www.softwarearchitekt.at/aktuelles/lazy-loading-locals-with-angular/\">Manfred Steyer analiza las configuraciones regionales de carga diferida en “Lazy Loading Locales with Angular”</a>.</p>\n<p><a href=\"https://blog.ninja-squad.com/2019/12/10/angular-localize/\">Cédric Exbrayat analiza la globalización de <em>Ivy</em> en “Internationalization with @angular&#x2F;localize”</a>.</p>\n<h3 id=\"Ambitos-adicionales-de-proveedor-de-dependencias\"><a href=\"#Ambitos-adicionales-de-proveedor-de-dependencias\" class=\"headerlink\" title=\"Ámbitos adicionales de proveedor de dependencias\"></a>Ámbitos adicionales de proveedor de dependencias</h3><p>Obtén información sobre los ámbitos de proveedor de <code>&#39;any&#39;</code> y <code>&#39;platform&#39;</code> en <a href=\"https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb\">“Improved Dependeny Injection with the new providedIn scopes ‘any’ and ‘platform’” by Christian Kohler</a>.</p>\n<h3 id=\"Nueva-API-de-depuracion\"><a href=\"#Nueva-API-de-depuracion\" class=\"headerlink\" title=\"Nueva API de depuración\"></a>Nueva API de depuración</h3><p><a href=\"https://angular.io/api/core/global\">Lee sobre la API de depuración completa en la documentación oficial</a>.</p>\n<h3 id=\"Angular-Universal-version-9\"><a href=\"#Angular-Universal-version-9\" class=\"headerlink\" title=\"Angular Universal versión 9\"></a>Angular Universal versión 9</h3><p>Estos dos artículos entran en detalles de Angular Universal versión 9:</p>\n<ul>\n<li><a href=\"https://trilon.io/blog/angular-universal-v9-whats-new\">“Angular Universal v9: What’s New ?” by Mark Pieszak</a></li>\n<li><a href=\"https://dev.to/angular/angular-v9-universal-ssr-and-prerendering-out-of-the-box-33b1\">“Angular v9 &amp; Universal: SSR and prerendering out of the box!” by Sam Vloeberghs</a></li>\n</ul>\n<p>Aprende sobre <code>angular-prerender</code>, la biblioteca que inspiró estas nuevas características de Angular Universal en <a href=\"https://media-codings.com/articles/prerender-angular-apps-with-a-single-command\">“Prerender Angular Apps with a single Command” by Christoph Guttandin</a>.</p>\n<h3 id=\"Enlace-de-propiedades-personalizadas-de-CSS\"><a href=\"#Enlace-de-propiedades-personalizadas-de-CSS\" class=\"headerlink\" title=\"Enlace de propiedades personalizadas de CSS\"></a>Enlace de propiedades personalizadas de CSS</h3><p><a href=\"https://twitter.com/yurzui/status/1221159415820275717\">Mira este tweet y la demostración de Alexey Zuev para ver los enlaces de Propiedades personalizadas de CSS en acción</a>.</p>\n<h2 id=\"Revisores\"><a href=\"#Revisores\" class=\"headerlink\" title=\"Revisores\"></a>Revisores</h2><p>Siempre es útil tener una segunda opinión sobre nuestro trabajo o incluso detectar errores tontos. Para este artículo el autor tuvo el placer de ser revisado por:</p>\n<ul>\n<li><a href=\"https://twitter.com/chrisguttandin\">Christoph Guttandin</a></li>\n<li><a href=\"https://indepth.dev/author/evgeny/\">Evgeny Fedorenko</a></li>\n<li><a href=\"https://dev.to/santoshyadav198613\">Santosh Yadav</a></li>\n</ul>\n<p>Cover photo by <a href=\"https://www.pexels.com/photo/light-new-year-s-eve-fireworks-sylvester-40663/\">Pixabay</a> on Pexels.</p>\n<p>El autor original: <a href=\"https://twitter.com/LayZeeDK\">Lars Gyrup Brink Nielsen</a></p>\n<p>El traductor al español: <a href=\"https://twitter.com/albertobasalo\">Alberto Basalo</a></p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Detección del cambio en Angular","date":"2019-09-11T16:09:27.000Z","thumbnail":"/css/images/angular-12_change.png","_content":"\n![deteccion-del-cambio-en-Angular](/images/tutorial-angular-12_change.png)\n\nLa forma en que Angular realiza su renderizado y actualiza sus vistas es un factor clave para el rendimiento de las aplicaciones. ¿Cómo funciona la estrategia de detección de cambios de Angular? Pues tiene dos modos: `default` o *automágico* y `onPush` o *mindfulness*.\n\n> Es importante tomar consciencia sobre el proceso y las implicaciones. Es costoso realizar la detección más veces de lo necesario y  no hacerlo suficientemente implica no ver resultados reales.\n\nAfortunadamente el cambio del modo automático al manual no tiene por qué ser traumático. Con un mayor conocimiento del `changeDetectionStrategy` y un poco de trabajo extra tendrás aplicaciones más eficientes y mantenibles.\n\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Tests unitarios con Jest y e2e con Cypress en Angular](../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular/). Al finalizar tendrás una aplicación que actualiza la vista sólo cuando es necesario, es decir: cuando los datos han cambiado.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n\n## Tabla de Contenido:\n\n[1. Comunicación de datos entre componentes.](./#1-Comunicacion-de-datos-entre-componentes)\n\n[2. Change detection strategies](./#2-Change-detection-strategies)\n\n[3. Inmutabilidad](./#3-Inmutabilidad)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1 Comunicación de datos entre componentes\n\n```yaml\nAs a: customer,\n  I want: to see a shopping cart page\n  so that: i can browse the list of products in my basket\n\nAs a: customer,\n  I want: to pick a product\n  so that: I can add units to my basket\n\nAs a: customer,\n  I want: to remove a product from my basket\n  so that: I can take less units\n\nAs a: customer,\n  I want: to see always counters of my basket\n  so that: I can know what I'm buying\n```\n\nSigue la pista al código de ejemplo creado a partir de estos comandos:\n\n```terminal\nng g m cart --project=shop --module=app.module.ts --routing --route=cart\n```\n\n`apps\\shop\\src\\app\\app.component.html`\n\n```html\n<nav>\n  <a [routerLink]=\"['/cart']\">Basket</a>\n</nav>\n```\n\n```terminal\nng g c cart/item-picker --project=shop\nng g c cart/basket-list --project=shop\nng g s basket --project=shop\n```\n\nLa detección de cambios se dispara ante eventos que le ocurren a los componentes. **La detección se realiza componente a componente**, así que compensa tener muchos componentes pequeños, para que cada uno por si sólo no genere demasiado ruido.\n\n## 1.1 Componentes Contenedores y Presentadores\n\nAl pasar de un único componente a varios mini-componentes, se propone usar **el patrón contenedor / presentadores**. Se mantiene un componente padre que contiene múltiples componentes presentadores hijos. El contendor es el único con acceso a los servicios de negocio y datos. Los presentadores reciben los datos y emiten eventos. Los presentadores no obtienen ni modifican datos por su cuenta.\n\nNomenclatura\n- **Container**: aka *Parent, Smart*. `AppComponent` y `CartComponent`\n- **Presenter**: aka *Child, Dumb*. `ItemPickerComponent` y `BasketListComponent`\n\n> Este reparto de responsabilidades es aconsejable independientemente de la estrategia de detección aplicada. Tienes más información el artículo de introducción [flujo de datos entre componentes](../flujo-de-datos-entre-componentes-angular).\n\n# 2 Change detection strategies\n\nCon la aplicación bien estructurada en componentes y con la comunicación estandarizada, habremos reducido el impacto de la detección del cambio y estaremos preparados para optimizarlo. Conozcamos en detalle las estrategias de detección del cambio.\n\nEl decorador `@Component()` admite en su configuración la poco conocida propiedad `changeDetection`. Dicha propiedad puede asignarse manualmente al componente, o indicarle su uso al generador del cli.\n\n## 2.1 Detección automática, *default*\n\nPor defecto, Angular tiene que ser conservador y verificar cada posible cambio, esto se denomina comprobación sucia o *dirty checking*. Se dispara **con demasiada frecuencia**, al menos en los siguientes casos:\n\n- Eventos desde el browser\n- Timers, intervals etc..\n- Llamadas http\n- Promesas y código asíncrono.\n\nPor si fuera poco, además de dispararse mucho es **muy costoso**. Determinar que algo ha cambiado implica comparar dos estados: el actual y el anterior.\n\n> La comparación es valor a valor, en profundidad, para cada propiedad de cada objeto, para cada objeto de cada array.\n\nCon todo, esta estrategia es cómoda para el programador y suficiente para casos básicos. Pero demasiada magia dificulta el control en aplicaciones complejas. Y en pantallas de mucha información e interacción degrada el rendimiento percibido.\n\n## 2.2 Detección manual, *onPush*\n\nComo se puede prever, la detección del cambio manual es lanzada por el programador. No siempre va a ser laborioso, pero será más consciente pues para que ocurra han de darse alguna de estas circunstancias:\n\n- **Explícitamente** el programador solicita la detección llamando a `ChangeDetectorRef.detectChanges();\n- **Implícitamente** al usar el `pipe Async` en la vista se llama a ese mismo método.\n- **Conscientemente** el desarrollador obliga a un componente a repintarse si le cambia la referencia a un `@Input()`.\n\n> En este modo los componentes dejan de evaluar y comparar sus propiedades rutinariamente. Sólo atienden a eventos `@Output()` o **cambios de referencia** `@Input()`. Esto relaja mucho al motor de Angular, que ya no tiene que hacer comparaciones odiosas. Sabrá que algo ha cambiado porque... es otro objeto.\n\n# 3 Inmutabilidad\n\nComo ya se ha dicho, para que Angular en la estrategia automática decida que algo ha cambiado necesita hacer una comparación por valor. Para evitar ese coste usamos la estrategia manual y el programador tiene que cambiar la referencia de algo cuando quiera que Angular repinte la vista.\n\n## 3.1 Por referencia y por valor\n\nNormalmente tendrá que crear un nuevo objeto y reasignarlo en lugar del anterior en un **ciclo de clonación, mutación y asignación**. Por costoso que parezca siempre compensa si evita muchas e innecesarias comparaciones por valor en estructuras profundas.\n\nLa estrategia `onPush` trata a todos los `Inputs` en inmutables, es decir, algo que no espera que cambie. Similar al paso de parámetros por valor, que si cambia es porque es otro puntero.\n\n## 3.2 El clonado\nEl potencialmente pesado trabajo de clonado lo podemos evitar en muchos casos usando alguna de estas técnicas:\n\n- **Tipos primitivos** que se pasan por valor en las propiedades `@Input()`\n- **Arrays**: muchos métodos como `.filter() .slice() .sort() .concat()` etc., devuelven nuevas referencias sin modificar el array original.\n- **Observables y el pipe Async**, pues en este caso se subscribe y lanza implícitamente la detección del cambio. No hay necesidad de clonar todo lo que llega por _http_.\n\nPara los demás casos tenemos operadores *TypeScript* sencillos y optimizados para obtener nuevas referencias a partir de otros ya existentes.\n\n```typescript\n// js cloning techniques\nconst original = { name:'first', value:1 };\nconst cloned = { ...original };\n// > { name:'first', value:1 }\nconst mutated = { ...original, value:2, newProperty: 'added' };\n// > { name:'first', value:2, newProperty: 'added' }\nconst list = [ original, cloned, mutated ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\nconst clonedList = [ ...list ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\nconst mutatedList = [ ...list, { name: 'new item'} ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' }, { name: 'new item'} ]\nconst newList = list.filter(i => i.name=='first');\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\n```\n\nYa tienes los conocimientos para acelerar y reducir la incertidumbre sobre el actualización de vistas usando el patrón **contenedor / presentador** junto con la estrategia de detección de cambios `OnPush`. Ahora vamos a ver un ejemplo.\n\n\n\n## 3.3 Todo reactivo.\n\n```yaml\n Como: desarrollador\n  quiero: que las comunicaciones sean fluidas e independientes del tiempo\n  para que: los cambios en los datos cambien la presentación sin esfuerzo\n```\n\nOtro de los pilares de la programación moderna de grandes aplicaciones es la **reactividad** (nada que ver con Chernóbil). Se trata de que los cambios se comuniquen cuando ocurran, sin necesidad de preguntar por ellos. De esta forma **los componentes reaccionarán al cambio** en lugar de buscarlo proactivamente mejorando mucho el rendimiento de las aplicaciones.\n\nReducida a lo esencial, la lógica más básica que quiero comunicar es un contador de elementos y la propia cesta. Un mísero número y un array. Pero claro, hacerlo reactivo requiere usar observables, y para eso emplearemos la librería [RxJs](https://www.learnrxjs.io/concepts/rxjs-primer.html).\n\n---\n\n## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro los procesos que sique Angular para la detección del cambio y sus dos estrategias.\n\n![Detección del cambio](/images/change-detection.jpg)\n\n---\n\n## Resumen\n\n### OnPush es más ligero\n\n- Se lanza menos veces\n\n- Sólo comprueba referencias, no valores\n\n\n### Async, CDR y clone detectan los cambios\n\n- **`Async`:** para que las respuestas desde observables sean limpias\n\n- **_CDR_:** cuando el cambio venga de procesos asíncronos pero no observables\n\n- **_Clonado_:** para que se detecten cambios simplemente usando las referencias\n\nLa detección automática es cómoda pero costosa. Por dos razones: se dispara muchas veces y necesita comprobar si hay cambios comparando valor por valor. La detección manual es más eficiente. Se lanza menos veces y además le basta un cambio de referencia para saber que hay novedades. Para poder usarla sin grandes trabajos recomiendo usar el _pipe_ `async`, siempre con orígenes de datos observables. Para ello necesitamos usar y conocer patrones que hagan uso de la librería observable _RxJs_\n\nPero vale ya de infraestructura, pasemos a algo visual. En este tutorial de formación [avanzada en Angular](../tag/Avanzado/) veremos ahora cómo crear [componentes dinámicos, directivas y pipes con Angular](../componentes-dinamicos-directivas-y-pipes-con-Angular). Todos esos detalles se tratan en el [curso avanzado online](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-12-Deteccion-del-cambio-en-Angular.md","raw":"---\ntitle: Detección del cambio en Angular\npermalink: deteccion-del-cambio-en-Angular\ndate: 2019-09-11 18:09:27\ntags:\n- Angular\n- Angular8\n- ChangeDetection\n- Observables\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-12_change.png\n---\n\n![deteccion-del-cambio-en-Angular](/images/tutorial-angular-12_change.png)\n\nLa forma en que Angular realiza su renderizado y actualiza sus vistas es un factor clave para el rendimiento de las aplicaciones. ¿Cómo funciona la estrategia de detección de cambios de Angular? Pues tiene dos modos: `default` o *automágico* y `onPush` o *mindfulness*.\n\n> Es importante tomar consciencia sobre el proceso y las implicaciones. Es costoso realizar la detección más veces de lo necesario y  no hacerlo suficientemente implica no ver resultados reales.\n\nAfortunadamente el cambio del modo automático al manual no tiene por qué ser traumático. Con un mayor conocimiento del `changeDetectionStrategy` y un poco de trabajo extra tendrás aplicaciones más eficientes y mantenibles.\n\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Tests unitarios con Jest y e2e con Cypress en Angular](../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular/). Al finalizar tendrás una aplicación que actualiza la vista sólo cuando es necesario, es decir: cuando los datos han cambiado.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n\n## Tabla de Contenido:\n\n[1. Comunicación de datos entre componentes.](./#1-Comunicacion-de-datos-entre-componentes)\n\n[2. Change detection strategies](./#2-Change-detection-strategies)\n\n[3. Inmutabilidad](./#3-Inmutabilidad)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1 Comunicación de datos entre componentes\n\n```yaml\nAs a: customer,\n  I want: to see a shopping cart page\n  so that: i can browse the list of products in my basket\n\nAs a: customer,\n  I want: to pick a product\n  so that: I can add units to my basket\n\nAs a: customer,\n  I want: to remove a product from my basket\n  so that: I can take less units\n\nAs a: customer,\n  I want: to see always counters of my basket\n  so that: I can know what I'm buying\n```\n\nSigue la pista al código de ejemplo creado a partir de estos comandos:\n\n```terminal\nng g m cart --project=shop --module=app.module.ts --routing --route=cart\n```\n\n`apps\\shop\\src\\app\\app.component.html`\n\n```html\n<nav>\n  <a [routerLink]=\"['/cart']\">Basket</a>\n</nav>\n```\n\n```terminal\nng g c cart/item-picker --project=shop\nng g c cart/basket-list --project=shop\nng g s basket --project=shop\n```\n\nLa detección de cambios se dispara ante eventos que le ocurren a los componentes. **La detección se realiza componente a componente**, así que compensa tener muchos componentes pequeños, para que cada uno por si sólo no genere demasiado ruido.\n\n## 1.1 Componentes Contenedores y Presentadores\n\nAl pasar de un único componente a varios mini-componentes, se propone usar **el patrón contenedor / presentadores**. Se mantiene un componente padre que contiene múltiples componentes presentadores hijos. El contendor es el único con acceso a los servicios de negocio y datos. Los presentadores reciben los datos y emiten eventos. Los presentadores no obtienen ni modifican datos por su cuenta.\n\nNomenclatura\n- **Container**: aka *Parent, Smart*. `AppComponent` y `CartComponent`\n- **Presenter**: aka *Child, Dumb*. `ItemPickerComponent` y `BasketListComponent`\n\n> Este reparto de responsabilidades es aconsejable independientemente de la estrategia de detección aplicada. Tienes más información el artículo de introducción [flujo de datos entre componentes](../flujo-de-datos-entre-componentes-angular).\n\n# 2 Change detection strategies\n\nCon la aplicación bien estructurada en componentes y con la comunicación estandarizada, habremos reducido el impacto de la detección del cambio y estaremos preparados para optimizarlo. Conozcamos en detalle las estrategias de detección del cambio.\n\nEl decorador `@Component()` admite en su configuración la poco conocida propiedad `changeDetection`. Dicha propiedad puede asignarse manualmente al componente, o indicarle su uso al generador del cli.\n\n## 2.1 Detección automática, *default*\n\nPor defecto, Angular tiene que ser conservador y verificar cada posible cambio, esto se denomina comprobación sucia o *dirty checking*. Se dispara **con demasiada frecuencia**, al menos en los siguientes casos:\n\n- Eventos desde el browser\n- Timers, intervals etc..\n- Llamadas http\n- Promesas y código asíncrono.\n\nPor si fuera poco, además de dispararse mucho es **muy costoso**. Determinar que algo ha cambiado implica comparar dos estados: el actual y el anterior.\n\n> La comparación es valor a valor, en profundidad, para cada propiedad de cada objeto, para cada objeto de cada array.\n\nCon todo, esta estrategia es cómoda para el programador y suficiente para casos básicos. Pero demasiada magia dificulta el control en aplicaciones complejas. Y en pantallas de mucha información e interacción degrada el rendimiento percibido.\n\n## 2.2 Detección manual, *onPush*\n\nComo se puede prever, la detección del cambio manual es lanzada por el programador. No siempre va a ser laborioso, pero será más consciente pues para que ocurra han de darse alguna de estas circunstancias:\n\n- **Explícitamente** el programador solicita la detección llamando a `ChangeDetectorRef.detectChanges();\n- **Implícitamente** al usar el `pipe Async` en la vista se llama a ese mismo método.\n- **Conscientemente** el desarrollador obliga a un componente a repintarse si le cambia la referencia a un `@Input()`.\n\n> En este modo los componentes dejan de evaluar y comparar sus propiedades rutinariamente. Sólo atienden a eventos `@Output()` o **cambios de referencia** `@Input()`. Esto relaja mucho al motor de Angular, que ya no tiene que hacer comparaciones odiosas. Sabrá que algo ha cambiado porque... es otro objeto.\n\n# 3 Inmutabilidad\n\nComo ya se ha dicho, para que Angular en la estrategia automática decida que algo ha cambiado necesita hacer una comparación por valor. Para evitar ese coste usamos la estrategia manual y el programador tiene que cambiar la referencia de algo cuando quiera que Angular repinte la vista.\n\n## 3.1 Por referencia y por valor\n\nNormalmente tendrá que crear un nuevo objeto y reasignarlo en lugar del anterior en un **ciclo de clonación, mutación y asignación**. Por costoso que parezca siempre compensa si evita muchas e innecesarias comparaciones por valor en estructuras profundas.\n\nLa estrategia `onPush` trata a todos los `Inputs` en inmutables, es decir, algo que no espera que cambie. Similar al paso de parámetros por valor, que si cambia es porque es otro puntero.\n\n## 3.2 El clonado\nEl potencialmente pesado trabajo de clonado lo podemos evitar en muchos casos usando alguna de estas técnicas:\n\n- **Tipos primitivos** que se pasan por valor en las propiedades `@Input()`\n- **Arrays**: muchos métodos como `.filter() .slice() .sort() .concat()` etc., devuelven nuevas referencias sin modificar el array original.\n- **Observables y el pipe Async**, pues en este caso se subscribe y lanza implícitamente la detección del cambio. No hay necesidad de clonar todo lo que llega por _http_.\n\nPara los demás casos tenemos operadores *TypeScript* sencillos y optimizados para obtener nuevas referencias a partir de otros ya existentes.\n\n```typescript\n// js cloning techniques\nconst original = { name:'first', value:1 };\nconst cloned = { ...original };\n// > { name:'first', value:1 }\nconst mutated = { ...original, value:2, newProperty: 'added' };\n// > { name:'first', value:2, newProperty: 'added' }\nconst list = [ original, cloned, mutated ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\nconst clonedList = [ ...list ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\nconst mutatedList = [ ...list, { name: 'new item'} ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' }, { name: 'new item'} ]\nconst newList = list.filter(i => i.name=='first');\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\n```\n\nYa tienes los conocimientos para acelerar y reducir la incertidumbre sobre el actualización de vistas usando el patrón **contenedor / presentador** junto con la estrategia de detección de cambios `OnPush`. Ahora vamos a ver un ejemplo.\n\n\n\n## 3.3 Todo reactivo.\n\n```yaml\n Como: desarrollador\n  quiero: que las comunicaciones sean fluidas e independientes del tiempo\n  para que: los cambios en los datos cambien la presentación sin esfuerzo\n```\n\nOtro de los pilares de la programación moderna de grandes aplicaciones es la **reactividad** (nada que ver con Chernóbil). Se trata de que los cambios se comuniquen cuando ocurran, sin necesidad de preguntar por ellos. De esta forma **los componentes reaccionarán al cambio** en lugar de buscarlo proactivamente mejorando mucho el rendimiento de las aplicaciones.\n\nReducida a lo esencial, la lógica más básica que quiero comunicar es un contador de elementos y la propia cesta. Un mísero número y un array. Pero claro, hacerlo reactivo requiere usar observables, y para eso emplearemos la librería [RxJs](https://www.learnrxjs.io/concepts/rxjs-primer.html).\n\n---\n\n## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro los procesos que sique Angular para la detección del cambio y sus dos estrategias.\n\n![Detección del cambio](/images/change-detection.jpg)\n\n---\n\n## Resumen\n\n### OnPush es más ligero\n\n- Se lanza menos veces\n\n- Sólo comprueba referencias, no valores\n\n\n### Async, CDR y clone detectan los cambios\n\n- **`Async`:** para que las respuestas desde observables sean limpias\n\n- **_CDR_:** cuando el cambio venga de procesos asíncronos pero no observables\n\n- **_Clonado_:** para que se detecten cambios simplemente usando las referencias\n\nLa detección automática es cómoda pero costosa. Por dos razones: se dispara muchas veces y necesita comprobar si hay cambios comparando valor por valor. La detección manual es más eficiente. Se lanza menos veces y además le basta un cambio de referencia para saber que hay novedades. Para poder usarla sin grandes trabajos recomiendo usar el _pipe_ `async`, siempre con orígenes de datos observables. Para ello necesitamos usar y conocer patrones que hagan uso de la librería observable _RxJs_\n\nPero vale ya de infraestructura, pasemos a algo visual. En este tutorial de formación [avanzada en Angular](../tag/Avanzado/) veremos ahora cómo crear [componentes dinámicos, directivas y pipes con Angular](../componentes-dinamicos-directivas-y-pipes-con-Angular). Todos esos detalles se tratan en el [curso avanzado online](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-12-Deteccion-del-cambio-en-Angular","published":1,"updated":"2023-07-02T10:25:58.474Z","__permalink":"deteccion-del-cambio-en-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2f7000fe096enwh7vvr","content":"<p><img src=\"/images/tutorial-angular-12_change.png\" alt=\"deteccion-del-cambio-en-Angular\"></p>\n<p>La forma en que Angular realiza su renderizado y actualiza sus vistas es un factor clave para el rendimiento de las aplicaciones. ¿Cómo funciona la estrategia de detección de cambios de Angular? Pues tiene dos modos: <code>default</code> o <em>automágico</em> y <code>onPush</code> o <em>mindfulness</em>.</p>\n<blockquote>\n<p>Es importante tomar consciencia sobre el proceso y las implicaciones. Es costoso realizar la detección más veces de lo necesario y  no hacerlo suficientemente implica no ver resultados reales.</p>\n</blockquote>\n<p>Afortunadamente el cambio del modo automático al manual no tiene por qué ser traumático. Con un mayor conocimiento del <code>changeDetectionStrategy</code> y un poco de trabajo extra tendrás aplicaciones más eficientes y mantenibles.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular/\">Tests unitarios con Jest y e2e con Cypress en Angular</a>. Al finalizar tendrás una aplicación que actualiza la vista sólo cuando es necesario, es decir: cuando los datos han cambiado.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Comunicacion-de-datos-entre-componentes\">1. Comunicación de datos entre componentes.</a></p>\n<p><a href=\"./#2-Change-detection-strategies\">2. Change detection strategies</a></p>\n<p><a href=\"./#3-Inmutabilidad\">3. Inmutabilidad</a></p>\n<p><a href=\"./#Diagramas\">Diagramas</a></p>\n<p><a href=\"./#Resumen\">Resumen</a></p>\n<hr>\n<h1 id=\"1-Comunicacion-de-datos-entre-componentes\"><a href=\"#1-Comunicacion-de-datos-entre-componentes\" class=\"headerlink\" title=\"1 Comunicación de datos entre componentes\"></a>1 Comunicación de datos entre componentes</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">shopping</span> <span class=\"string\">cart</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">i</span> <span class=\"string\">can</span> <span class=\"string\">browse</span> <span class=\"string\">the</span> <span class=\"string\">list</span> <span class=\"string\">of</span> <span class=\"string\">products</span> <span class=\"string\">in</span> <span class=\"string\">my</span> <span class=\"string\">basket</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">pick</span> <span class=\"string\">a</span> <span class=\"string\">product</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">add</span> <span class=\"string\">units</span> <span class=\"string\">to</span> <span class=\"string\">my</span> <span class=\"string\">basket</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">remove</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">from</span> <span class=\"string\">my</span> <span class=\"string\">basket</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">take</span> <span class=\"string\">less</span> <span class=\"string\">units</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">always</span> <span class=\"string\">counters</span> <span class=\"string\">of</span> <span class=\"string\">my</span> <span class=\"string\">basket</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">know</span> <span class=\"string\">what</span> <span class=\"string\">I&#x27;m</span> <span class=\"string\">buying</span></span><br></pre></td></tr></table></figure>\n\n<p>Sigue la pista al código de ejemplo creado a partir de estos comandos:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m cart --project=shop --module=app.module.ts --routing --route=cart</span><br></pre></td></tr></table></figure>\n\n<p><code>apps\\shop\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/cart&#x27;]&quot;</span>&gt;</span>Basket<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c cart/item-picker --project=shop</span><br><span class=\"line\">ng g c cart/basket-list --project=shop</span><br><span class=\"line\">ng g s basket --project=shop</span><br></pre></td></tr></table></figure>\n\n<p>La detección de cambios se dispara ante eventos que le ocurren a los componentes. <strong>La detección se realiza componente a componente</strong>, así que compensa tener muchos componentes pequeños, para que cada uno por si sólo no genere demasiado ruido.</p>\n<h2 id=\"1-1-Componentes-Contenedores-y-Presentadores\"><a href=\"#1-1-Componentes-Contenedores-y-Presentadores\" class=\"headerlink\" title=\"1.1 Componentes Contenedores y Presentadores\"></a>1.1 Componentes Contenedores y Presentadores</h2><p>Al pasar de un único componente a varios mini-componentes, se propone usar <strong>el patrón contenedor &#x2F; presentadores</strong>. Se mantiene un componente padre que contiene múltiples componentes presentadores hijos. El contendor es el único con acceso a los servicios de negocio y datos. Los presentadores reciben los datos y emiten eventos. Los presentadores no obtienen ni modifican datos por su cuenta.</p>\n<p>Nomenclatura</p>\n<ul>\n<li><strong>Container</strong>: aka <em>Parent, Smart</em>. <code>AppComponent</code> y <code>CartComponent</code></li>\n<li><strong>Presenter</strong>: aka <em>Child, Dumb</em>. <code>ItemPickerComponent</code> y <code>BasketListComponent</code></li>\n</ul>\n<blockquote>\n<p>Este reparto de responsabilidades es aconsejable independientemente de la estrategia de detección aplicada. Tienes más información el artículo de introducción <a href=\"../flujo-de-datos-entre-componentes-angular\">flujo de datos entre componentes</a>.</p>\n</blockquote>\n<h1 id=\"2-Change-detection-strategies\"><a href=\"#2-Change-detection-strategies\" class=\"headerlink\" title=\"2 Change detection strategies\"></a>2 Change detection strategies</h1><p>Con la aplicación bien estructurada en componentes y con la comunicación estandarizada, habremos reducido el impacto de la detección del cambio y estaremos preparados para optimizarlo. Conozcamos en detalle las estrategias de detección del cambio.</p>\n<p>El decorador <code>@Component()</code> admite en su configuración la poco conocida propiedad <code>changeDetection</code>. Dicha propiedad puede asignarse manualmente al componente, o indicarle su uso al generador del cli.</p>\n<h2 id=\"2-1-Deteccion-automatica-default\"><a href=\"#2-1-Deteccion-automatica-default\" class=\"headerlink\" title=\"2.1 Detección automática, default\"></a>2.1 Detección automática, <em>default</em></h2><p>Por defecto, Angular tiene que ser conservador y verificar cada posible cambio, esto se denomina comprobación sucia o <em>dirty checking</em>. Se dispara <strong>con demasiada frecuencia</strong>, al menos en los siguientes casos:</p>\n<ul>\n<li>Eventos desde el browser</li>\n<li>Timers, intervals etc..</li>\n<li>Llamadas http</li>\n<li>Promesas y código asíncrono.</li>\n</ul>\n<p>Por si fuera poco, además de dispararse mucho es <strong>muy costoso</strong>. Determinar que algo ha cambiado implica comparar dos estados: el actual y el anterior.</p>\n<blockquote>\n<p>La comparación es valor a valor, en profundidad, para cada propiedad de cada objeto, para cada objeto de cada array.</p>\n</blockquote>\n<p>Con todo, esta estrategia es cómoda para el programador y suficiente para casos básicos. Pero demasiada magia dificulta el control en aplicaciones complejas. Y en pantallas de mucha información e interacción degrada el rendimiento percibido.</p>\n<h2 id=\"2-2-Deteccion-manual-onPush\"><a href=\"#2-2-Deteccion-manual-onPush\" class=\"headerlink\" title=\"2.2 Detección manual, onPush\"></a>2.2 Detección manual, <em>onPush</em></h2><p>Como se puede prever, la detección del cambio manual es lanzada por el programador. No siempre va a ser laborioso, pero será más consciente pues para que ocurra han de darse alguna de estas circunstancias:</p>\n<ul>\n<li><strong>Explícitamente</strong> el programador solicita la detección llamando a &#96;ChangeDetectorRef.detectChanges();</li>\n<li><strong>Implícitamente</strong> al usar el <code>pipe Async</code> en la vista se llama a ese mismo método.</li>\n<li><strong>Conscientemente</strong> el desarrollador obliga a un componente a repintarse si le cambia la referencia a un <code>@Input()</code>.</li>\n</ul>\n<blockquote>\n<p>En este modo los componentes dejan de evaluar y comparar sus propiedades rutinariamente. Sólo atienden a eventos <code>@Output()</code> o <strong>cambios de referencia</strong> <code>@Input()</code>. Esto relaja mucho al motor de Angular, que ya no tiene que hacer comparaciones odiosas. Sabrá que algo ha cambiado porque… es otro objeto.</p>\n</blockquote>\n<h1 id=\"3-Inmutabilidad\"><a href=\"#3-Inmutabilidad\" class=\"headerlink\" title=\"3 Inmutabilidad\"></a>3 Inmutabilidad</h1><p>Como ya se ha dicho, para que Angular en la estrategia automática decida que algo ha cambiado necesita hacer una comparación por valor. Para evitar ese coste usamos la estrategia manual y el programador tiene que cambiar la referencia de algo cuando quiera que Angular repinte la vista.</p>\n<h2 id=\"3-1-Por-referencia-y-por-valor\"><a href=\"#3-1-Por-referencia-y-por-valor\" class=\"headerlink\" title=\"3.1 Por referencia y por valor\"></a>3.1 Por referencia y por valor</h2><p>Normalmente tendrá que crear un nuevo objeto y reasignarlo en lugar del anterior en un <strong>ciclo de clonación, mutación y asignación</strong>. Por costoso que parezca siempre compensa si evita muchas e innecesarias comparaciones por valor en estructuras profundas.</p>\n<p>La estrategia <code>onPush</code> trata a todos los <code>Inputs</code> en inmutables, es decir, algo que no espera que cambie. Similar al paso de parámetros por valor, que si cambia es porque es otro puntero.</p>\n<h2 id=\"3-2-El-clonado\"><a href=\"#3-2-El-clonado\" class=\"headerlink\" title=\"3.2 El clonado\"></a>3.2 El clonado</h2><p>El potencialmente pesado trabajo de clonado lo podemos evitar en muchos casos usando alguna de estas técnicas:</p>\n<ul>\n<li><strong>Tipos primitivos</strong> que se pasan por valor en las propiedades <code>@Input()</code></li>\n<li><strong>Arrays</strong>: muchos métodos como <code>.filter() .slice() .sort() .concat()</code> etc., devuelven nuevas referencias sin modificar el array original.</li>\n<li><strong>Observables y el pipe Async</strong>, pues en este caso se subscribe y lanza implícitamente la detección del cambio. No hay necesidad de clonar todo lo que llega por <em>http</em>.</li>\n</ul>\n<p>Para los demás casos tenemos operadores <em>TypeScript</em> sencillos y optimizados para obtener nuevas referencias a partir de otros ya existentes.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js cloning techniques</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> original = &#123; <span class=\"attr\">name</span>:<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"attr\">value</span>:<span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cloned = &#123; ...original &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &gt; &#123; name:&#x27;first&#x27;, value:1 &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutated = &#123; ...original, <span class=\"attr\">value</span>:<span class=\"number\">2</span>, <span class=\"attr\">newProperty</span>: <span class=\"string\">&#x27;added&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &gt; &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> list = [ original, cloned, mutated ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clonedList = [ ...list ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutatedList = [ ...list, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;new item&#x27;</span>&#125; ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125;, &#123; name: &#x27;new item&#x27;&#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newList = list.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i.<span class=\"property\">name</span>==<span class=\"string\">&#x27;first&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure>\n\n<p>Ya tienes los conocimientos para acelerar y reducir la incertidumbre sobre el actualización de vistas usando el patrón <strong>contenedor &#x2F; presentador</strong> junto con la estrategia de detección de cambios <code>OnPush</code>. Ahora vamos a ver un ejemplo.</p>\n<h2 id=\"3-3-Todo-reactivo\"><a href=\"#3-3-Todo-reactivo\" class=\"headerlink\" title=\"3.3 Todo reactivo.\"></a>3.3 Todo reactivo.</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">desarrollador</span></span><br><span class=\"line\"> <span class=\"attr\">quiero:</span> <span class=\"string\">que</span> <span class=\"string\">las</span> <span class=\"string\">comunicaciones</span> <span class=\"string\">sean</span> <span class=\"string\">fluidas</span> <span class=\"string\">e</span> <span class=\"string\">independientes</span> <span class=\"string\">del</span> <span class=\"string\">tiempo</span></span><br><span class=\"line\"> <span class=\"attr\">para que:</span> <span class=\"string\">los</span> <span class=\"string\">cambios</span> <span class=\"string\">en</span> <span class=\"string\">los</span> <span class=\"string\">datos</span> <span class=\"string\">cambien</span> <span class=\"string\">la</span> <span class=\"string\">presentación</span> <span class=\"string\">sin</span> <span class=\"string\">esfuerzo</span></span><br></pre></td></tr></table></figure>\n\n<p>Otro de los pilares de la programación moderna de grandes aplicaciones es la <strong>reactividad</strong> (nada que ver con Chernóbil). Se trata de que los cambios se comuniquen cuando ocurran, sin necesidad de preguntar por ellos. De esta forma <strong>los componentes reaccionarán al cambio</strong> en lugar de buscarlo proactivamente mejorando mucho el rendimiento de las aplicaciones.</p>\n<p>Reducida a lo esencial, la lógica más básica que quiero comunicar es un contador de elementos y la propia cesta. Un mísero número y un array. Pero claro, hacerlo reactivo requiere usar observables, y para eso emplearemos la librería <a href=\"https://www.learnrxjs.io/concepts/rxjs-primer.html\">RxJs</a>.</p>\n<hr>\n<h2 id=\"Diagramas\"><a href=\"#Diagramas\" class=\"headerlink\" title=\"Diagramas\"></a>Diagramas</h2><p>El siguiente diagrama nos muestra a vista de pájaro los procesos que sique Angular para la detección del cambio y sus dos estrategias.</p>\n<p><img src=\"/images/change-detection.jpg\" alt=\"Detección del cambio\"></p>\n<hr>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><h3 id=\"OnPush-es-mas-ligero\"><a href=\"#OnPush-es-mas-ligero\" class=\"headerlink\" title=\"OnPush es más ligero\"></a>OnPush es más ligero</h3><ul>\n<li><p>Se lanza menos veces</p>\n</li>\n<li><p>Sólo comprueba referencias, no valores</p>\n</li>\n</ul>\n<h3 id=\"Async-CDR-y-clone-detectan-los-cambios\"><a href=\"#Async-CDR-y-clone-detectan-los-cambios\" class=\"headerlink\" title=\"Async, CDR y clone detectan los cambios\"></a>Async, CDR y clone detectan los cambios</h3><ul>\n<li><p><strong><code>Async</code>:</strong> para que las respuestas desde observables sean limpias</p>\n</li>\n<li><p><strong><em>CDR</em>:</strong> cuando el cambio venga de procesos asíncronos pero no observables</p>\n</li>\n<li><p><strong><em>Clonado</em>:</strong> para que se detecten cambios simplemente usando las referencias</p>\n</li>\n</ul>\n<p>La detección automática es cómoda pero costosa. Por dos razones: se dispara muchas veces y necesita comprobar si hay cambios comparando valor por valor. La detección manual es más eficiente. Se lanza menos veces y además le basta un cambio de referencia para saber que hay novedades. Para poder usarla sin grandes trabajos recomiendo usar el <em>pipe</em> <code>async</code>, siempre con orígenes de datos observables. Para ello necesitamos usar y conocer patrones que hagan uso de la librería observable <em>RxJs</em></p>\n<p>Pero vale ya de infraestructura, pasemos a algo visual. En este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> veremos ahora cómo crear <a href=\"../componentes-dinamicos-directivas-y-pipes-con-Angular\">componentes dinámicos, directivas y pipes con Angular</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-12_change.png\" alt=\"deteccion-del-cambio-en-Angular\"></p>\n<p>La forma en que Angular realiza su renderizado y actualiza sus vistas es un factor clave para el rendimiento de las aplicaciones. ¿Cómo funciona la estrategia de detección de cambios de Angular? Pues tiene dos modos: <code>default</code> o <em>automágico</em> y <code>onPush</code> o <em>mindfulness</em>.</p>\n<blockquote>\n<p>Es importante tomar consciencia sobre el proceso y las implicaciones. Es costoso realizar la detección más veces de lo necesario y  no hacerlo suficientemente implica no ver resultados reales.</p>\n</blockquote>\n<p>Afortunadamente el cambio del modo automático al manual no tiene por qué ser traumático. Con un mayor conocimiento del <code>changeDetectionStrategy</code> y un poco de trabajo extra tendrás aplicaciones más eficientes y mantenibles.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular/\">Tests unitarios con Jest y e2e con Cypress en Angular</a>. Al finalizar tendrás una aplicación que actualiza la vista sólo cuando es necesario, es decir: cuando los datos han cambiado.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Comunicacion-de-datos-entre-componentes\">1. Comunicación de datos entre componentes.</a></p>\n<p><a href=\"./#2-Change-detection-strategies\">2. Change detection strategies</a></p>\n<p><a href=\"./#3-Inmutabilidad\">3. Inmutabilidad</a></p>\n<p><a href=\"./#Diagramas\">Diagramas</a></p>\n<p><a href=\"./#Resumen\">Resumen</a></p>\n<hr>\n<h1 id=\"1-Comunicacion-de-datos-entre-componentes\"><a href=\"#1-Comunicacion-de-datos-entre-componentes\" class=\"headerlink\" title=\"1 Comunicación de datos entre componentes\"></a>1 Comunicación de datos entre componentes</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">shopping</span> <span class=\"string\">cart</span> <span class=\"string\">page</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">i</span> <span class=\"string\">can</span> <span class=\"string\">browse</span> <span class=\"string\">the</span> <span class=\"string\">list</span> <span class=\"string\">of</span> <span class=\"string\">products</span> <span class=\"string\">in</span> <span class=\"string\">my</span> <span class=\"string\">basket</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">pick</span> <span class=\"string\">a</span> <span class=\"string\">product</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">add</span> <span class=\"string\">units</span> <span class=\"string\">to</span> <span class=\"string\">my</span> <span class=\"string\">basket</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">remove</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">from</span> <span class=\"string\">my</span> <span class=\"string\">basket</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">take</span> <span class=\"string\">less</span> <span class=\"string\">units</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">always</span> <span class=\"string\">counters</span> <span class=\"string\">of</span> <span class=\"string\">my</span> <span class=\"string\">basket</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">know</span> <span class=\"string\">what</span> <span class=\"string\">I&#x27;m</span> <span class=\"string\">buying</span></span><br></pre></td></tr></table></figure>\n\n<p>Sigue la pista al código de ejemplo creado a partir de estos comandos:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m cart --project=shop --module=app.module.ts --routing --route=cart</span><br></pre></td></tr></table></figure>\n\n<p><code>apps\\shop\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/cart&#x27;]&quot;</span>&gt;</span>Basket<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c cart/item-picker --project=shop</span><br><span class=\"line\">ng g c cart/basket-list --project=shop</span><br><span class=\"line\">ng g s basket --project=shop</span><br></pre></td></tr></table></figure>\n\n<p>La detección de cambios se dispara ante eventos que le ocurren a los componentes. <strong>La detección se realiza componente a componente</strong>, así que compensa tener muchos componentes pequeños, para que cada uno por si sólo no genere demasiado ruido.</p>\n<h2 id=\"1-1-Componentes-Contenedores-y-Presentadores\"><a href=\"#1-1-Componentes-Contenedores-y-Presentadores\" class=\"headerlink\" title=\"1.1 Componentes Contenedores y Presentadores\"></a>1.1 Componentes Contenedores y Presentadores</h2><p>Al pasar de un único componente a varios mini-componentes, se propone usar <strong>el patrón contenedor &#x2F; presentadores</strong>. Se mantiene un componente padre que contiene múltiples componentes presentadores hijos. El contendor es el único con acceso a los servicios de negocio y datos. Los presentadores reciben los datos y emiten eventos. Los presentadores no obtienen ni modifican datos por su cuenta.</p>\n<p>Nomenclatura</p>\n<ul>\n<li><strong>Container</strong>: aka <em>Parent, Smart</em>. <code>AppComponent</code> y <code>CartComponent</code></li>\n<li><strong>Presenter</strong>: aka <em>Child, Dumb</em>. <code>ItemPickerComponent</code> y <code>BasketListComponent</code></li>\n</ul>\n<blockquote>\n<p>Este reparto de responsabilidades es aconsejable independientemente de la estrategia de detección aplicada. Tienes más información el artículo de introducción <a href=\"../flujo-de-datos-entre-componentes-angular\">flujo de datos entre componentes</a>.</p>\n</blockquote>\n<h1 id=\"2-Change-detection-strategies\"><a href=\"#2-Change-detection-strategies\" class=\"headerlink\" title=\"2 Change detection strategies\"></a>2 Change detection strategies</h1><p>Con la aplicación bien estructurada en componentes y con la comunicación estandarizada, habremos reducido el impacto de la detección del cambio y estaremos preparados para optimizarlo. Conozcamos en detalle las estrategias de detección del cambio.</p>\n<p>El decorador <code>@Component()</code> admite en su configuración la poco conocida propiedad <code>changeDetection</code>. Dicha propiedad puede asignarse manualmente al componente, o indicarle su uso al generador del cli.</p>\n<h2 id=\"2-1-Deteccion-automatica-default\"><a href=\"#2-1-Deteccion-automatica-default\" class=\"headerlink\" title=\"2.1 Detección automática, default\"></a>2.1 Detección automática, <em>default</em></h2><p>Por defecto, Angular tiene que ser conservador y verificar cada posible cambio, esto se denomina comprobación sucia o <em>dirty checking</em>. Se dispara <strong>con demasiada frecuencia</strong>, al menos en los siguientes casos:</p>\n<ul>\n<li>Eventos desde el browser</li>\n<li>Timers, intervals etc..</li>\n<li>Llamadas http</li>\n<li>Promesas y código asíncrono.</li>\n</ul>\n<p>Por si fuera poco, además de dispararse mucho es <strong>muy costoso</strong>. Determinar que algo ha cambiado implica comparar dos estados: el actual y el anterior.</p>\n<blockquote>\n<p>La comparación es valor a valor, en profundidad, para cada propiedad de cada objeto, para cada objeto de cada array.</p>\n</blockquote>\n<p>Con todo, esta estrategia es cómoda para el programador y suficiente para casos básicos. Pero demasiada magia dificulta el control en aplicaciones complejas. Y en pantallas de mucha información e interacción degrada el rendimiento percibido.</p>\n<h2 id=\"2-2-Deteccion-manual-onPush\"><a href=\"#2-2-Deteccion-manual-onPush\" class=\"headerlink\" title=\"2.2 Detección manual, onPush\"></a>2.2 Detección manual, <em>onPush</em></h2><p>Como se puede prever, la detección del cambio manual es lanzada por el programador. No siempre va a ser laborioso, pero será más consciente pues para que ocurra han de darse alguna de estas circunstancias:</p>\n<ul>\n<li><strong>Explícitamente</strong> el programador solicita la detección llamando a &#96;ChangeDetectorRef.detectChanges();</li>\n<li><strong>Implícitamente</strong> al usar el <code>pipe Async</code> en la vista se llama a ese mismo método.</li>\n<li><strong>Conscientemente</strong> el desarrollador obliga a un componente a repintarse si le cambia la referencia a un <code>@Input()</code>.</li>\n</ul>\n<blockquote>\n<p>En este modo los componentes dejan de evaluar y comparar sus propiedades rutinariamente. Sólo atienden a eventos <code>@Output()</code> o <strong>cambios de referencia</strong> <code>@Input()</code>. Esto relaja mucho al motor de Angular, que ya no tiene que hacer comparaciones odiosas. Sabrá que algo ha cambiado porque… es otro objeto.</p>\n</blockquote>\n<h1 id=\"3-Inmutabilidad\"><a href=\"#3-Inmutabilidad\" class=\"headerlink\" title=\"3 Inmutabilidad\"></a>3 Inmutabilidad</h1><p>Como ya se ha dicho, para que Angular en la estrategia automática decida que algo ha cambiado necesita hacer una comparación por valor. Para evitar ese coste usamos la estrategia manual y el programador tiene que cambiar la referencia de algo cuando quiera que Angular repinte la vista.</p>\n<h2 id=\"3-1-Por-referencia-y-por-valor\"><a href=\"#3-1-Por-referencia-y-por-valor\" class=\"headerlink\" title=\"3.1 Por referencia y por valor\"></a>3.1 Por referencia y por valor</h2><p>Normalmente tendrá que crear un nuevo objeto y reasignarlo en lugar del anterior en un <strong>ciclo de clonación, mutación y asignación</strong>. Por costoso que parezca siempre compensa si evita muchas e innecesarias comparaciones por valor en estructuras profundas.</p>\n<p>La estrategia <code>onPush</code> trata a todos los <code>Inputs</code> en inmutables, es decir, algo que no espera que cambie. Similar al paso de parámetros por valor, que si cambia es porque es otro puntero.</p>\n<h2 id=\"3-2-El-clonado\"><a href=\"#3-2-El-clonado\" class=\"headerlink\" title=\"3.2 El clonado\"></a>3.2 El clonado</h2><p>El potencialmente pesado trabajo de clonado lo podemos evitar en muchos casos usando alguna de estas técnicas:</p>\n<ul>\n<li><strong>Tipos primitivos</strong> que se pasan por valor en las propiedades <code>@Input()</code></li>\n<li><strong>Arrays</strong>: muchos métodos como <code>.filter() .slice() .sort() .concat()</code> etc., devuelven nuevas referencias sin modificar el array original.</li>\n<li><strong>Observables y el pipe Async</strong>, pues en este caso se subscribe y lanza implícitamente la detección del cambio. No hay necesidad de clonar todo lo que llega por <em>http</em>.</li>\n</ul>\n<p>Para los demás casos tenemos operadores <em>TypeScript</em> sencillos y optimizados para obtener nuevas referencias a partir de otros ya existentes.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js cloning techniques</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> original = &#123; <span class=\"attr\">name</span>:<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"attr\">value</span>:<span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cloned = &#123; ...original &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &gt; &#123; name:&#x27;first&#x27;, value:1 &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutated = &#123; ...original, <span class=\"attr\">value</span>:<span class=\"number\">2</span>, <span class=\"attr\">newProperty</span>: <span class=\"string\">&#x27;added&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &gt; &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> list = [ original, cloned, mutated ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clonedList = [ ...list ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutatedList = [ ...list, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;new item&#x27;</span>&#125; ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125;, &#123; name: &#x27;new item&#x27;&#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newList = list.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i.<span class=\"property\">name</span>==<span class=\"string\">&#x27;first&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:1 &#125;, &#123; name:&#x27;first&#x27;, value:2, newProperty: &#x27;added&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure>\n\n<p>Ya tienes los conocimientos para acelerar y reducir la incertidumbre sobre el actualización de vistas usando el patrón <strong>contenedor &#x2F; presentador</strong> junto con la estrategia de detección de cambios <code>OnPush</code>. Ahora vamos a ver un ejemplo.</p>\n<h2 id=\"3-3-Todo-reactivo\"><a href=\"#3-3-Todo-reactivo\" class=\"headerlink\" title=\"3.3 Todo reactivo.\"></a>3.3 Todo reactivo.</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">desarrollador</span></span><br><span class=\"line\"> <span class=\"attr\">quiero:</span> <span class=\"string\">que</span> <span class=\"string\">las</span> <span class=\"string\">comunicaciones</span> <span class=\"string\">sean</span> <span class=\"string\">fluidas</span> <span class=\"string\">e</span> <span class=\"string\">independientes</span> <span class=\"string\">del</span> <span class=\"string\">tiempo</span></span><br><span class=\"line\"> <span class=\"attr\">para que:</span> <span class=\"string\">los</span> <span class=\"string\">cambios</span> <span class=\"string\">en</span> <span class=\"string\">los</span> <span class=\"string\">datos</span> <span class=\"string\">cambien</span> <span class=\"string\">la</span> <span class=\"string\">presentación</span> <span class=\"string\">sin</span> <span class=\"string\">esfuerzo</span></span><br></pre></td></tr></table></figure>\n\n<p>Otro de los pilares de la programación moderna de grandes aplicaciones es la <strong>reactividad</strong> (nada que ver con Chernóbil). Se trata de que los cambios se comuniquen cuando ocurran, sin necesidad de preguntar por ellos. De esta forma <strong>los componentes reaccionarán al cambio</strong> en lugar de buscarlo proactivamente mejorando mucho el rendimiento de las aplicaciones.</p>\n<p>Reducida a lo esencial, la lógica más básica que quiero comunicar es un contador de elementos y la propia cesta. Un mísero número y un array. Pero claro, hacerlo reactivo requiere usar observables, y para eso emplearemos la librería <a href=\"https://www.learnrxjs.io/concepts/rxjs-primer.html\">RxJs</a>.</p>\n<hr>\n<h2 id=\"Diagramas\"><a href=\"#Diagramas\" class=\"headerlink\" title=\"Diagramas\"></a>Diagramas</h2><p>El siguiente diagrama nos muestra a vista de pájaro los procesos que sique Angular para la detección del cambio y sus dos estrategias.</p>\n<p><img src=\"/images/change-detection.jpg\" alt=\"Detección del cambio\"></p>\n<hr>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><h3 id=\"OnPush-es-mas-ligero\"><a href=\"#OnPush-es-mas-ligero\" class=\"headerlink\" title=\"OnPush es más ligero\"></a>OnPush es más ligero</h3><ul>\n<li><p>Se lanza menos veces</p>\n</li>\n<li><p>Sólo comprueba referencias, no valores</p>\n</li>\n</ul>\n<h3 id=\"Async-CDR-y-clone-detectan-los-cambios\"><a href=\"#Async-CDR-y-clone-detectan-los-cambios\" class=\"headerlink\" title=\"Async, CDR y clone detectan los cambios\"></a>Async, CDR y clone detectan los cambios</h3><ul>\n<li><p><strong><code>Async</code>:</strong> para que las respuestas desde observables sean limpias</p>\n</li>\n<li><p><strong><em>CDR</em>:</strong> cuando el cambio venga de procesos asíncronos pero no observables</p>\n</li>\n<li><p><strong><em>Clonado</em>:</strong> para que se detecten cambios simplemente usando las referencias</p>\n</li>\n</ul>\n<p>La detección automática es cómoda pero costosa. Por dos razones: se dispara muchas veces y necesita comprobar si hay cambios comparando valor por valor. La detección manual es más eficiente. Se lanza menos veces y además le basta un cambio de referencia para saber que hay novedades. Para poder usarla sin grandes trabajos recomiendo usar el <em>pipe</em> <code>async</code>, siempre con orígenes de datos observables. Para ello necesitamos usar y conocer patrones que hagan uso de la librería observable <em>RxJs</em></p>\n<p>Pero vale ya de infraestructura, pasemos a algo visual. En este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> veremos ahora cómo crear <a href=\"../componentes-dinamicos-directivas-y-pipes-con-Angular\">componentes dinámicos, directivas y pipes con Angular</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Nx, mono repositorios en Angular","date":"2019-09-03T16:59:27.000Z","thumbnail":"/css/images/angular-10_monorepo.png","_content":"\n![nx-mono-repositorios-en-Angular](/images/tutorial-angular-10_monorepo.png)\n\nEmpiezo este **tutorial de Angular Avanzado** con la frase con la que acabé un artículo de opinión sobre arquitectura de software acerca de [Angular para grandes aplicaciones.](https://medium.com/@albertobasalo71/angular-para-grandes-aplicaciones-b66786fd3032)\n\n> Angular y las decisiones de diseño que le acompañan tienen como objetivo facilitar el desarrollo y mantenimiento a medio y largo plazo de aplicaciones web no triviales.\n\nLas empresas de desarrollo y los clientes finales que escogen **Angular**, suelen ser de tamaño medio o grande. Cuanto mayor sea el problema más destaca este _framework_. Y tarde o temprano esos grandes proyectos necesitarán compartir o reutilizar código. La herramienta [Nx de Nrwl](https://nx.dev/angular) ayuda en esa tarea facilitando la creación de espacios de trabajo multi proyecto: **los mono repositorios.**\n\n<!-- more -->\n\nPartiendo de cero y usando las herramientas de [Nrwl.io/](https://nrwl.io/) crearemos un _blueprint_ para desarrollar grandes aplicaciones. Al finalizar tendrás, en el mismo repositorio, un par de aplicaciones y varias librerías reutilizables creadas con los _Nx power-ups_.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Crear el repositorio.](./#1-Crear-el-repositorio)\n\n[2. Generar varias aplicaciones con Angular.](./#2-Generar-una-SPA-con-Angular)\n\n[3. Tener una biblioteca TypeScript con lógica de dominio.](./#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio)\n\n[4. Tener una biblioteca Angular con componentes de interfaz.](./#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz)\n\n[5. Tener una biblioteca Angular con servicios de datos.](./#5-Tener-una-biblioteca-Angular-con-servicios-de-datos)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Crear el repositorio\n\n```yaml\n Como: arquitecto de software\n quiero: disponer de un espacio de trabajo único\n para: crear aplicaciones y librerías.\n ```\n\nLo primero será preparar las herramientas. **Nx** es un complemento del **CLI** así que debemos tener este último disponible. Voy a emplear [yarn](https://yarnpkg.com/lang/en/) para la instalación de paquetes y la ejecución de comandos. Pero se muestran las instrucciones alternativas con `npm`. El repositorio siempre lo creo vacío y después agrego las capacidades específicas para **Angular**.\n\n```bash\n# Add latest Angular CLI\nyarn global add @angular/cli\n# Sets yarn as default packager for cli\nng config -g cli.packageManager yarn\n\n# Creates empty repository\nyarn create nx-workspace angular-blueprint\n\n# also with NPM...\nnpm i -g @angular/cli\nnpx create-nx-workspace@latest angular-blueprint\n```\n\n---\n\n# 2. Generar una SPA con Angular\n\n```yaml\nAs a: customer,\n  I want: to see a shop\n  so that: I can buy products\n\n As a: seller,\n  I want: to see a warehouse\n  so that: I can take control\n```\n\nLos próximos comandos te sonarán a los mismo del **angular-cli**. Es normal, pues **Nx** utiliza y mejora las capacidades de la herramienta original. La diferencia está en que la recién creada aplicación, en lugar de nacer en la raíz del _workspace_, va la carpeta específica `/apps`.\n\n```bash\n# Add Angular capabilities\nyarn add --dev @nrwl/angular\n\n# Generate an Angular application with nx power-ups\nng g @nrwl/schematics:application shop --inlineStyle --routing --directory= -p ab-shop\n# Start default !!!\nyarn start\n# Generate an Angular application with nx power-ups\nng g @nrwl/schematics:application warehouse --inlineStyle --routing --directory= -p ab-warehouse\n# Start especific !!!\nng serve warehouse --port=4202 -o\n```\n\nAmbas aplicaciones comparten la configuración del `angular.json` y las demás herramientas de ayuda como **tslint** y **prettier**. Destaca mucho que también que compartan `/node_modules`, lo cual se agradece en el tiempo y en el espacio.\n\nCon nx puedes crear también aplicaciones de Backend. Por ejemplo un API REST hecha con [NestJS](https://nestjs.com/). Para acceder a los generadores específico tienes que instalarlos antes. por ejemplo:\n\n```bash\nyarn add --dev @nrwl/nest\nng g @nrwl/nest:application api\nng serve api\n```\n\nAl tener varias aplicaciones es conveniente disponer de scripts específicos para cada una. Por ejemplo yo en el `package.json` tendía algo así.\n\n```json\n{\n  \"start:shop\": \"ng serve shop --port=4201 -o\",\n  \"build:shop\": \"ng build shop --prod\",\n  \"test:shop\": \"ng test shop\",\n  \"start:warehouse\": \"ng serve warehouse --port=4202 -o\",\n  \"build:warehouse\": \"ng build warehouse --prod\",\n  \"test:warehouse\": \"ng test warehouse\",\n  \"start:api\": \"ng serve api\",\n  \"build:api\": \"ng build api --prod\",\n  \"test:api\": \"ng test api\",\n}\n```\n\nPor supuesto que todos estos comando se pueden lanzar visualmente mediante la extensión [Angular Console para VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). Te recomiendo además estas otras extensiones:\n\n```json\n{\n  \"recommendations\": [\n    \"nrwl.angular-console\",\n    \"angular.ng-template\",\n    \"ms-vscode.vscode-typescript-tslint-plugin\",\n    \"esbenp.prettier-vscode\",\n    \"pkief.material-icon-theme\",\n    \"christian-kohler.path-intellisense\",\n    \"ban.spellright\",\n    \"johnpapa.angular-essentials\"\n  ]\n}\n```\n\n---\n\n\n# 3. Tener una biblioteca TypeScript con lógica de dominio.\n\n```yaml\n Como: arquitecto\n quiero: tener una biblioteca en TypeScript con lógica de dominio\n de modo que: pueda usarla con varios frameworks o incluso en puro JavaScript.\n ```\n\nMás temprano que tarde aparecerán funcionalidades comunes a distintas aplicaciones. Validadores genéricos, utilidades o casos concretos de un cliente pero que se usan en todos sus desarrollos. En este ejemplo partimos de la necesidad común de un sistema de saludos (un mensaje, vaya). Y para ello empezamos por definir una `interface` pública reutilizable.\n\nUn poco de arquitectura de software. Todo lo que podamos programar y que no dependa de un _framework_ debemos encapsularlo en librerías independientes. De esa forma puede reutilizarse con otras tecnologías o sobrevivir dignamente a la evolución o desaparición de Angular.\n\nLo primero será crear la librería. Pero esta vez no usaremos los _schematics_ del **cli**, si no los propios de **nrwl**. La idea es usarla como la **capa de dominio de la arquitectura**. En ella pondremos los modelos y servicios de lógica de negocio con las menores dependencias posibles. Repito lo fundamental: minimizar las dependencias. En concreto no dependeremos de Angular, lo cual permitiría usarlo con otros _frameworks_ actuales o futuros.\n\n```bash\n# Generate a Type Script library with nx power-ups\nng generate @nrwl/workspace:library domain --directory=shared\n```\nPor ahora no te preocupes de la implementación. La muestro para destacar las dos cosas que considero más importantes:\n\n- No hay ninguna referencia explícita a _Angular_.\n\n- Lo que quieras exportar debe indicarse en el fichero `index.ts`.\n\nPor lo demás es puro _TypeScript_; en una carpeta con intenciones bien claras: `models/` creo de forma manual el siguiente fichero:\n\n`libs\\shared\\domain\\src\\lib\\models\\greetings.interface.ts`\n\n```typescript\nexport interface Greetings {\n  message: string;\n}\n```\nal no disponer del sistema de módulos de angular tengo que exportarlo en el índice de la librería.\n\n`libs\\shared\\domain\\src\\index.ts`\n\n```typescript\nexport * from './lib/models/greetings.interface';\n```\n\nPara localizarlo, Nx crea un alias en el `tsconfig.json`, que puedes retocar a voluntad\n\n```json\n\"paths\": {\n  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]\n}\n```\n\nYa está listo para seer consumido desde distintos proyectos (Lo haré después en el API y ya mismo en la próxima librería de componentes).\n\n---\n\n# 4. Tener una biblioteca Angular con componentes de interfaz\n\n```yaml\nAs a: customer,\n  I want: to be greeted\n  so that: I feel at home\n\nAs a: seller,\n  I want: to be greeted\n  so that: I feel at home\n```\n\nSi eres una empresa consultora es posible que te encuentres repitiendo funciones o pantallas una y otra vez para distintos clientes. Por supuesto que una gran empresa seguro que se hacen muchas aplicaciones similares, a las que les vendría de maravilla **compartir una biblioteca de componentes**.\n\nPues ahora crear librerías es igual de sencillo que crear aplicaciones. **Nx** las depositará en la carpeta `/libs` y se ocupará de apuntarlas en el `tsconfig.json` para que la importación desde el resto del proyecto use alias cortos y evidentes.\n\nCrear componentes en un entorno multi proyecto requiere especificar a qué proyecto se asociarán. Para empezar vamos a crear los componentes básicos para esta funcionalidad en una librería compartida de para interfaz de usuario.\n\n```bash\n# Generate an Angular library with nx power-ups\nng g @nrwl/angular:library ui --directory=shared --prefix=ab-ui --simpleModuleName\n# Generate Greetings Component\nng g component greetings --project=shared-ui --module=ui.module.ts --export --inlineStyle --inlineTemplate\n```\n\nY le damos contenido al componente. Fíjate en la importación de la interfaz `Greetings`.\n\n\n`libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-ui-greetings',\n  template: `\n    <p>\n      {{ theGreeting.message }}\n    </p>\n  `,\n  styles: []\n})\nexport class GreetingsComponent implements OnInit {\n  public theGreeting: Greetings = { message: 'Hello world' };\n  constructor() {}\n\n  ngOnInit() {}\n}\n```\n---\n\nPuedes usarlos como cualquier otro componente y en cualquier aplicación del repositorio. Simplemente importando el módulo en el que se declaran: el `UiModule`. NX se encarga de referenciar cada proyecto en el fichero `tsconfig.json`. De esa forma se facilita su importación en cualquier otra aplicación del repositorio.\n\nPrimero importamos el módulo.\n\n`apps\\shop\\src\\app\\app.module.ts`\n\n```typescript\nimport { UiModule } from '@a-boss/ui';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot([], { initialNavigation: 'enabled' }),\n    UiModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nY ya podemos incrustar sus componentes públicos.\n\n`apps\\shop\\src\\app\\app.component.html`\n\n```html\n<ab-ui-greetings></ab-ui-greetings>\n<router-outlet></router-outlet>\n```\n\n`apps\\shop\\src\\app\\app.component.ts`\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'ab-shop-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent {\n  title = 'shop';\n}\n```\n\n---\n\n# 5. Tener una biblioteca Angular con servicios de datos\n\n```yaml\nAs a: customer,\n  I want: to be greeted by the API :-)\n  so that: I know I am not alone.\n\nAs a: seller,\n  I want: to be greeted by the API :-)\n  so that: I know I am not alone.\n```\n\nAdemás de componentes visuales, podemos tener librerías con servicios de lógica o de acceso a datos. Por ejemplo un servicio para comunicarnos con el API podría ser utilizado en diversos proyectos (aplicaciones o librerías).\n\nCon lo ya sabido vamos a crear una librería compartida para acceso a datos.\n\n\n```bash\nng g @nrwl/angular:library data --directory=shared --prefix=ab-data --simpleModuleName\nng g service greetings --project=shared-data --no-flat\n```\n\nEl servicio realiza la llamada http y devuelve un observable.\n\n`libs\\shared\\data\\src\\lib\\greetings\\greetings.service.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class GreetingsService {\n  private apiUrl = 'http://localhost:3333/api';\n  constructor(private httpClient: HttpClient) {}\n  public getGrettings$(): Observable<Greetings> {\n    return this.httpClient.get<Greetings>(this.apiUrl);\n  }\n}\n```\n\nPara consumir el servicio no hay que hacer nada más. Pero, para importarlo en TypeScript, necesitmaos que nos lo exporten adecuadamente.\n\n`libs\\shared\\data\\src\\index.ts`\n\n```typescript\nexport * from './lib/data.module';\nexport * from './lib/greetings/greetings.service';\n```\n\n`tsconfig.json`\n\n```json\n\"paths\": {\n  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]\n}\n```\n\nY ahora consumirlo ya no es un problema. Por ejemplo directamente en el componente.\n\n`libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts`\n\n```typescript\nimport { GreetingsService } from '@a-boss/data';\nimport { Greetings } from '@a-boss/domain';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-ui-greetings',\n  template: `\n    <p>\n      {{ theGreeting.message }}\n    </p>\n  `,\n  styles: []\n})\nexport class GreetingsComponent implements OnInit {\n  public theGreeting: Greetings = { message: 'Hello world' };\n  constructor(private greetingsService: GreetingsService) {}\n  public ngOnInit() {\n    this.greetingsService.getGrettings$().subscribe(this.appendApiMessage);\n  }\n  private appendApiMessage = (apiGreetings: Greetings) =>\n    (this.theGreeting.message += ' and ' + apiGreetings.message);\n}\n```\n\nYa que estamos accediendo al API, podemos aprovechar para adecuar sus tipos a la interfaz declarada en el dominio. Fíjate lo familiar que resulta este código **NodeJS** gracias al framework [nest](https://nestjs.com/).\n\n`apps\\api\\src\\app\\app.controller.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData(): Greetings {\n    return this.appService.getData();\n  }\n}\n```\n\n\n<!-- ## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro las distintas librerías y aplicaciones que tenemos en este momento. Fíjate en la jerarquía de dependencias : Aplicaciones -> Librerías Angular -> Librerías del Dominio.\n\n![Dependencias entre proyectos](/images/10-projects-dependency.png)\n\n---\n\nTienes más ejemplos en el repositorio como [la implementación un _ErrorHandler_](https://github.com/angularbuilders/angular-blueprint/blob/master/libs/tracer/src/lib/services/error-handler.service.ts). Es un servicio que una vez proveído hace uso del servicio de trazas.\n\nDispones de un _journal_ con indicaciones paso a paso de este tutorial. Consulta directamente la [documentación](https://angularbuilders.github.io/angular-blueprint/0-mono_repo) del proyecto en GitHub.\n\nLas tareas relativas a este tutorial están resueltas en el [proyecto 0 - monorepo](https://github.com/angularbuilders/angular-blueprint/projects/1)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n-->\n\n---\n\n## Resumen\n\nEn definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones avanzadas. **Angular** es una plataforma ideal para esos grandes proyectos, pero requiere conocimiento y bases sólidas para sacarle partido.\n\nCon este tutorial empiezas tu formación [avanzada en Angular](../tag/Avanzado/) para poder afrontar retos de tamaño industrial. Continúa aprendiendo a crear y ejecutar pruebas automatizadas creando [tests unitarios con Jest y e2e con Cypress en Angular](../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular). Todos esos detalles se tratan en el [curso avanzado online](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-10-nx-mono-repositorios-en-Angular.md","raw":"---\ntitle: Nx, mono repositorios en Angular\npermalink: nx-mono-repositorios-en-Angular\ndate: 2019-09-03 18:59:27\ntags:\n- Angular\n- Angular8\n- Nx\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-10_monorepo.png\n---\n\n![nx-mono-repositorios-en-Angular](/images/tutorial-angular-10_monorepo.png)\n\nEmpiezo este **tutorial de Angular Avanzado** con la frase con la que acabé un artículo de opinión sobre arquitectura de software acerca de [Angular para grandes aplicaciones.](https://medium.com/@albertobasalo71/angular-para-grandes-aplicaciones-b66786fd3032)\n\n> Angular y las decisiones de diseño que le acompañan tienen como objetivo facilitar el desarrollo y mantenimiento a medio y largo plazo de aplicaciones web no triviales.\n\nLas empresas de desarrollo y los clientes finales que escogen **Angular**, suelen ser de tamaño medio o grande. Cuanto mayor sea el problema más destaca este _framework_. Y tarde o temprano esos grandes proyectos necesitarán compartir o reutilizar código. La herramienta [Nx de Nrwl](https://nx.dev/angular) ayuda en esa tarea facilitando la creación de espacios de trabajo multi proyecto: **los mono repositorios.**\n\n<!-- more -->\n\nPartiendo de cero y usando las herramientas de [Nrwl.io/](https://nrwl.io/) crearemos un _blueprint_ para desarrollar grandes aplicaciones. Al finalizar tendrás, en el mismo repositorio, un par de aplicaciones y varias librerías reutilizables creadas con los _Nx power-ups_.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Crear el repositorio.](./#1-Crear-el-repositorio)\n\n[2. Generar varias aplicaciones con Angular.](./#2-Generar-una-SPA-con-Angular)\n\n[3. Tener una biblioteca TypeScript con lógica de dominio.](./#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio)\n\n[4. Tener una biblioteca Angular con componentes de interfaz.](./#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz)\n\n[5. Tener una biblioteca Angular con servicios de datos.](./#5-Tener-una-biblioteca-Angular-con-servicios-de-datos)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Crear el repositorio\n\n```yaml\n Como: arquitecto de software\n quiero: disponer de un espacio de trabajo único\n para: crear aplicaciones y librerías.\n ```\n\nLo primero será preparar las herramientas. **Nx** es un complemento del **CLI** así que debemos tener este último disponible. Voy a emplear [yarn](https://yarnpkg.com/lang/en/) para la instalación de paquetes y la ejecución de comandos. Pero se muestran las instrucciones alternativas con `npm`. El repositorio siempre lo creo vacío y después agrego las capacidades específicas para **Angular**.\n\n```bash\n# Add latest Angular CLI\nyarn global add @angular/cli\n# Sets yarn as default packager for cli\nng config -g cli.packageManager yarn\n\n# Creates empty repository\nyarn create nx-workspace angular-blueprint\n\n# also with NPM...\nnpm i -g @angular/cli\nnpx create-nx-workspace@latest angular-blueprint\n```\n\n---\n\n# 2. Generar una SPA con Angular\n\n```yaml\nAs a: customer,\n  I want: to see a shop\n  so that: I can buy products\n\n As a: seller,\n  I want: to see a warehouse\n  so that: I can take control\n```\n\nLos próximos comandos te sonarán a los mismo del **angular-cli**. Es normal, pues **Nx** utiliza y mejora las capacidades de la herramienta original. La diferencia está en que la recién creada aplicación, en lugar de nacer en la raíz del _workspace_, va la carpeta específica `/apps`.\n\n```bash\n# Add Angular capabilities\nyarn add --dev @nrwl/angular\n\n# Generate an Angular application with nx power-ups\nng g @nrwl/schematics:application shop --inlineStyle --routing --directory= -p ab-shop\n# Start default !!!\nyarn start\n# Generate an Angular application with nx power-ups\nng g @nrwl/schematics:application warehouse --inlineStyle --routing --directory= -p ab-warehouse\n# Start especific !!!\nng serve warehouse --port=4202 -o\n```\n\nAmbas aplicaciones comparten la configuración del `angular.json` y las demás herramientas de ayuda como **tslint** y **prettier**. Destaca mucho que también que compartan `/node_modules`, lo cual se agradece en el tiempo y en el espacio.\n\nCon nx puedes crear también aplicaciones de Backend. Por ejemplo un API REST hecha con [NestJS](https://nestjs.com/). Para acceder a los generadores específico tienes que instalarlos antes. por ejemplo:\n\n```bash\nyarn add --dev @nrwl/nest\nng g @nrwl/nest:application api\nng serve api\n```\n\nAl tener varias aplicaciones es conveniente disponer de scripts específicos para cada una. Por ejemplo yo en el `package.json` tendía algo así.\n\n```json\n{\n  \"start:shop\": \"ng serve shop --port=4201 -o\",\n  \"build:shop\": \"ng build shop --prod\",\n  \"test:shop\": \"ng test shop\",\n  \"start:warehouse\": \"ng serve warehouse --port=4202 -o\",\n  \"build:warehouse\": \"ng build warehouse --prod\",\n  \"test:warehouse\": \"ng test warehouse\",\n  \"start:api\": \"ng serve api\",\n  \"build:api\": \"ng build api --prod\",\n  \"test:api\": \"ng test api\",\n}\n```\n\nPor supuesto que todos estos comando se pueden lanzar visualmente mediante la extensión [Angular Console para VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). Te recomiendo además estas otras extensiones:\n\n```json\n{\n  \"recommendations\": [\n    \"nrwl.angular-console\",\n    \"angular.ng-template\",\n    \"ms-vscode.vscode-typescript-tslint-plugin\",\n    \"esbenp.prettier-vscode\",\n    \"pkief.material-icon-theme\",\n    \"christian-kohler.path-intellisense\",\n    \"ban.spellright\",\n    \"johnpapa.angular-essentials\"\n  ]\n}\n```\n\n---\n\n\n# 3. Tener una biblioteca TypeScript con lógica de dominio.\n\n```yaml\n Como: arquitecto\n quiero: tener una biblioteca en TypeScript con lógica de dominio\n de modo que: pueda usarla con varios frameworks o incluso en puro JavaScript.\n ```\n\nMás temprano que tarde aparecerán funcionalidades comunes a distintas aplicaciones. Validadores genéricos, utilidades o casos concretos de un cliente pero que se usan en todos sus desarrollos. En este ejemplo partimos de la necesidad común de un sistema de saludos (un mensaje, vaya). Y para ello empezamos por definir una `interface` pública reutilizable.\n\nUn poco de arquitectura de software. Todo lo que podamos programar y que no dependa de un _framework_ debemos encapsularlo en librerías independientes. De esa forma puede reutilizarse con otras tecnologías o sobrevivir dignamente a la evolución o desaparición de Angular.\n\nLo primero será crear la librería. Pero esta vez no usaremos los _schematics_ del **cli**, si no los propios de **nrwl**. La idea es usarla como la **capa de dominio de la arquitectura**. En ella pondremos los modelos y servicios de lógica de negocio con las menores dependencias posibles. Repito lo fundamental: minimizar las dependencias. En concreto no dependeremos de Angular, lo cual permitiría usarlo con otros _frameworks_ actuales o futuros.\n\n```bash\n# Generate a Type Script library with nx power-ups\nng generate @nrwl/workspace:library domain --directory=shared\n```\nPor ahora no te preocupes de la implementación. La muestro para destacar las dos cosas que considero más importantes:\n\n- No hay ninguna referencia explícita a _Angular_.\n\n- Lo que quieras exportar debe indicarse en el fichero `index.ts`.\n\nPor lo demás es puro _TypeScript_; en una carpeta con intenciones bien claras: `models/` creo de forma manual el siguiente fichero:\n\n`libs\\shared\\domain\\src\\lib\\models\\greetings.interface.ts`\n\n```typescript\nexport interface Greetings {\n  message: string;\n}\n```\nal no disponer del sistema de módulos de angular tengo que exportarlo en el índice de la librería.\n\n`libs\\shared\\domain\\src\\index.ts`\n\n```typescript\nexport * from './lib/models/greetings.interface';\n```\n\nPara localizarlo, Nx crea un alias en el `tsconfig.json`, que puedes retocar a voluntad\n\n```json\n\"paths\": {\n  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]\n}\n```\n\nYa está listo para seer consumido desde distintos proyectos (Lo haré después en el API y ya mismo en la próxima librería de componentes).\n\n---\n\n# 4. Tener una biblioteca Angular con componentes de interfaz\n\n```yaml\nAs a: customer,\n  I want: to be greeted\n  so that: I feel at home\n\nAs a: seller,\n  I want: to be greeted\n  so that: I feel at home\n```\n\nSi eres una empresa consultora es posible que te encuentres repitiendo funciones o pantallas una y otra vez para distintos clientes. Por supuesto que una gran empresa seguro que se hacen muchas aplicaciones similares, a las que les vendría de maravilla **compartir una biblioteca de componentes**.\n\nPues ahora crear librerías es igual de sencillo que crear aplicaciones. **Nx** las depositará en la carpeta `/libs` y se ocupará de apuntarlas en el `tsconfig.json` para que la importación desde el resto del proyecto use alias cortos y evidentes.\n\nCrear componentes en un entorno multi proyecto requiere especificar a qué proyecto se asociarán. Para empezar vamos a crear los componentes básicos para esta funcionalidad en una librería compartida de para interfaz de usuario.\n\n```bash\n# Generate an Angular library with nx power-ups\nng g @nrwl/angular:library ui --directory=shared --prefix=ab-ui --simpleModuleName\n# Generate Greetings Component\nng g component greetings --project=shared-ui --module=ui.module.ts --export --inlineStyle --inlineTemplate\n```\n\nY le damos contenido al componente. Fíjate en la importación de la interfaz `Greetings`.\n\n\n`libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-ui-greetings',\n  template: `\n    <p>\n      {{ theGreeting.message }}\n    </p>\n  `,\n  styles: []\n})\nexport class GreetingsComponent implements OnInit {\n  public theGreeting: Greetings = { message: 'Hello world' };\n  constructor() {}\n\n  ngOnInit() {}\n}\n```\n---\n\nPuedes usarlos como cualquier otro componente y en cualquier aplicación del repositorio. Simplemente importando el módulo en el que se declaran: el `UiModule`. NX se encarga de referenciar cada proyecto en el fichero `tsconfig.json`. De esa forma se facilita su importación en cualquier otra aplicación del repositorio.\n\nPrimero importamos el módulo.\n\n`apps\\shop\\src\\app\\app.module.ts`\n\n```typescript\nimport { UiModule } from '@a-boss/ui';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot([], { initialNavigation: 'enabled' }),\n    UiModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nY ya podemos incrustar sus componentes públicos.\n\n`apps\\shop\\src\\app\\app.component.html`\n\n```html\n<ab-ui-greetings></ab-ui-greetings>\n<router-outlet></router-outlet>\n```\n\n`apps\\shop\\src\\app\\app.component.ts`\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'ab-shop-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent {\n  title = 'shop';\n}\n```\n\n---\n\n# 5. Tener una biblioteca Angular con servicios de datos\n\n```yaml\nAs a: customer,\n  I want: to be greeted by the API :-)\n  so that: I know I am not alone.\n\nAs a: seller,\n  I want: to be greeted by the API :-)\n  so that: I know I am not alone.\n```\n\nAdemás de componentes visuales, podemos tener librerías con servicios de lógica o de acceso a datos. Por ejemplo un servicio para comunicarnos con el API podría ser utilizado en diversos proyectos (aplicaciones o librerías).\n\nCon lo ya sabido vamos a crear una librería compartida para acceso a datos.\n\n\n```bash\nng g @nrwl/angular:library data --directory=shared --prefix=ab-data --simpleModuleName\nng g service greetings --project=shared-data --no-flat\n```\n\nEl servicio realiza la llamada http y devuelve un observable.\n\n`libs\\shared\\data\\src\\lib\\greetings\\greetings.service.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class GreetingsService {\n  private apiUrl = 'http://localhost:3333/api';\n  constructor(private httpClient: HttpClient) {}\n  public getGrettings$(): Observable<Greetings> {\n    return this.httpClient.get<Greetings>(this.apiUrl);\n  }\n}\n```\n\nPara consumir el servicio no hay que hacer nada más. Pero, para importarlo en TypeScript, necesitmaos que nos lo exporten adecuadamente.\n\n`libs\\shared\\data\\src\\index.ts`\n\n```typescript\nexport * from './lib/data.module';\nexport * from './lib/greetings/greetings.service';\n```\n\n`tsconfig.json`\n\n```json\n\"paths\": {\n  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]\n}\n```\n\nY ahora consumirlo ya no es un problema. Por ejemplo directamente en el componente.\n\n`libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts`\n\n```typescript\nimport { GreetingsService } from '@a-boss/data';\nimport { Greetings } from '@a-boss/domain';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-ui-greetings',\n  template: `\n    <p>\n      {{ theGreeting.message }}\n    </p>\n  `,\n  styles: []\n})\nexport class GreetingsComponent implements OnInit {\n  public theGreeting: Greetings = { message: 'Hello world' };\n  constructor(private greetingsService: GreetingsService) {}\n  public ngOnInit() {\n    this.greetingsService.getGrettings$().subscribe(this.appendApiMessage);\n  }\n  private appendApiMessage = (apiGreetings: Greetings) =>\n    (this.theGreeting.message += ' and ' + apiGreetings.message);\n}\n```\n\nYa que estamos accediendo al API, podemos aprovechar para adecuar sus tipos a la interfaz declarada en el dominio. Fíjate lo familiar que resulta este código **NodeJS** gracias al framework [nest](https://nestjs.com/).\n\n`apps\\api\\src\\app\\app.controller.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData(): Greetings {\n    return this.appService.getData();\n  }\n}\n```\n\n\n<!-- ## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro las distintas librerías y aplicaciones que tenemos en este momento. Fíjate en la jerarquía de dependencias : Aplicaciones -> Librerías Angular -> Librerías del Dominio.\n\n![Dependencias entre proyectos](/images/10-projects-dependency.png)\n\n---\n\nTienes más ejemplos en el repositorio como [la implementación un _ErrorHandler_](https://github.com/angularbuilders/angular-blueprint/blob/master/libs/tracer/src/lib/services/error-handler.service.ts). Es un servicio que una vez proveído hace uso del servicio de trazas.\n\nDispones de un _journal_ con indicaciones paso a paso de este tutorial. Consulta directamente la [documentación](https://angularbuilders.github.io/angular-blueprint/0-mono_repo) del proyecto en GitHub.\n\nLas tareas relativas a este tutorial están resueltas en el [proyecto 0 - monorepo](https://github.com/angularbuilders/angular-blueprint/projects/1)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n-->\n\n---\n\n## Resumen\n\nEn definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones avanzadas. **Angular** es una plataforma ideal para esos grandes proyectos, pero requiere conocimiento y bases sólidas para sacarle partido.\n\nCon este tutorial empiezas tu formación [avanzada en Angular](../tag/Avanzado/) para poder afrontar retos de tamaño industrial. Continúa aprendiendo a crear y ejecutar pruebas automatizadas creando [tests unitarios con Jest y e2e con Cypress en Angular](../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular). Todos esos detalles se tratan en el [curso avanzado online](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-10-nx-mono-repositorios-en-Angular","published":1,"updated":"2023-07-02T10:25:58.473Z","__permalink":"nx-mono-repositorios-en-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2f9000ie096g0thfq0f","content":"<p><img src=\"/images/tutorial-angular-10_monorepo.png\" alt=\"nx-mono-repositorios-en-Angular\"></p>\n<p>Empiezo este <strong>tutorial de Angular Avanzado</strong> con la frase con la que acabé un artículo de opinión sobre arquitectura de software acerca de <a href=\"https://medium.com/@albertobasalo71/angular-para-grandes-aplicaciones-b66786fd3032\">Angular para grandes aplicaciones.</a></p>\n<blockquote>\n<p>Angular y las decisiones de diseño que le acompañan tienen como objetivo facilitar el desarrollo y mantenimiento a medio y largo plazo de aplicaciones web no triviales.</p>\n</blockquote>\n<p>Las empresas de desarrollo y los clientes finales que escogen <strong>Angular</strong>, suelen ser de tamaño medio o grande. Cuanto mayor sea el problema más destaca este <em>framework</em>. Y tarde o temprano esos grandes proyectos necesitarán compartir o reutilizar código. La herramienta <a href=\"https://nx.dev/angular\">Nx de Nrwl</a> ayuda en esa tarea facilitando la creación de espacios de trabajo multi proyecto: <strong>los mono repositorios.</strong></p>\n<span id=\"more\"></span>\n\n<p>Partiendo de cero y usando las herramientas de <a href=\"https://nrwl.io/\">Nrwl.io&#x2F;</a> crearemos un <em>blueprint</em> para desarrollar grandes aplicaciones. Al finalizar tendrás, en el mismo repositorio, un par de aplicaciones y varias librerías reutilizables creadas con los <em>Nx power-ups</em>.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Crear-el-repositorio\">1. Crear el repositorio.</a></p>\n<p><a href=\"./#2-Generar-una-SPA-con-Angular\">2. Generar varias aplicaciones con Angular.</a></p>\n<p><a href=\"./#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\">3. Tener una biblioteca TypeScript con lógica de dominio.</a></p>\n<p><a href=\"./#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\">4. Tener una biblioteca Angular con componentes de interfaz.</a></p>\n<p><a href=\"./#5-Tener-una-biblioteca-Angular-con-servicios-de-datos\">5. Tener una biblioteca Angular con servicios de datos.</a></p>\n<p><a href=\"./#Diagramas\">Diagramas</a></p>\n<p><a href=\"./#Resumen\">Resumen</a></p>\n<hr>\n<h1 id=\"1-Crear-el-repositorio\"><a href=\"#1-Crear-el-repositorio\" class=\"headerlink\" title=\"1. Crear el repositorio\"></a>1. Crear el repositorio</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">arquitecto</span> <span class=\"string\">de</span> <span class=\"string\">software</span></span><br><span class=\"line\"><span class=\"attr\">quiero:</span> <span class=\"string\">disponer</span> <span class=\"string\">de</span> <span class=\"string\">un</span> <span class=\"string\">espacio</span> <span class=\"string\">de</span> <span class=\"string\">trabajo</span> <span class=\"string\">único</span></span><br><span class=\"line\"><span class=\"attr\">para:</span> <span class=\"string\">crear</span> <span class=\"string\">aplicaciones</span> <span class=\"string\">y</span> <span class=\"string\">librerías.</span></span><br></pre></td></tr></table></figure>\n\n<p>Lo primero será preparar las herramientas. <strong>Nx</strong> es un complemento del <strong>CLI</strong> así que debemos tener este último disponible. Voy a emplear <a href=\"https://yarnpkg.com/lang/en/\">yarn</a> para la instalación de paquetes y la ejecución de comandos. Pero se muestran las instrucciones alternativas con <code>npm</code>. El repositorio siempre lo creo vacío y después agrego las capacidades específicas para <strong>Angular</strong>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Add latest Angular CLI</span></span><br><span class=\"line\">yarn global add @angular/cli</span><br><span class=\"line\"><span class=\"comment\"># Sets yarn as default packager for cli</span></span><br><span class=\"line\">ng config -g cli.packageManager yarn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creates empty repository</span></span><br><span class=\"line\">yarn create nx-workspace angular-blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># also with NPM...</span></span><br><span class=\"line\">npm i -g @angular/cli</span><br><span class=\"line\">npx create-nx-workspace@latest angular-blueprint</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"2-Generar-una-SPA-con-Angular\"><a href=\"#2-Generar-una-SPA-con-Angular\" class=\"headerlink\" title=\"2. Generar una SPA con Angular\"></a>2. Generar una SPA con Angular</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">shop</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">buy</span> <span class=\"string\">products</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">warehouse</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">take</span> <span class=\"string\">control</span></span><br></pre></td></tr></table></figure>\n\n<p>Los próximos comandos te sonarán a los mismo del <strong>angular-cli</strong>. Es normal, pues <strong>Nx</strong> utiliza y mejora las capacidades de la herramienta original. La diferencia está en que la recién creada aplicación, en lugar de nacer en la raíz del <em>workspace</em>, va la carpeta específica <code>/apps</code>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Add Angular capabilities</span></span><br><span class=\"line\">yarn add --dev @nrwl/angular</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate an Angular application with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/schematics:application shop --inlineStyle --routing --directory= -p ab-shop</span><br><span class=\"line\"><span class=\"comment\"># Start default !!!</span></span><br><span class=\"line\">yarn start</span><br><span class=\"line\"><span class=\"comment\"># Generate an Angular application with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/schematics:application warehouse --inlineStyle --routing --directory= -p ab-warehouse</span><br><span class=\"line\"><span class=\"comment\"># Start especific !!!</span></span><br><span class=\"line\">ng serve warehouse --port=4202 -o</span><br></pre></td></tr></table></figure>\n\n<p>Ambas aplicaciones comparten la configuración del <code>angular.json</code> y las demás herramientas de ayuda como <strong>tslint</strong> y <strong>prettier</strong>. Destaca mucho que también que compartan <code>/node_modules</code>, lo cual se agradece en el tiempo y en el espacio.</p>\n<p>Con nx puedes crear también aplicaciones de Backend. Por ejemplo un API REST hecha con <a href=\"https://nestjs.com/\">NestJS</a>. Para acceder a los generadores específico tienes que instalarlos antes. por ejemplo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add --dev @nrwl/nest</span><br><span class=\"line\">ng g @nrwl/nest:application api</span><br><span class=\"line\">ng serve api</span><br></pre></td></tr></table></figure>\n\n<p>Al tener varias aplicaciones es conveniente disponer de scripts específicos para cada una. Por ejemplo yo en el <code>package.json</code> tendía algo así.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve shop --port=4201 -o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build shop --prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test shop&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve warehouse --port=4202 -o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build warehouse --prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test warehouse&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:api&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve api&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:api&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build api --prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:api&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test api&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Por supuesto que todos estos comando se pueden lanzar visualmente mediante la extensión <a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\">Angular Console para VSCode</a>. Te recomiendo además estas otras extensiones:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;recommendations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;nrwl.angular-console&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;angular.ng-template&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ms-vscode.vscode-typescript-tslint-plugin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pkief.material-icon-theme&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;christian-kohler.path-intellisense&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ban.spellright&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;johnpapa.angular-essentials&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\"><a href=\"#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\" class=\"headerlink\" title=\"3. Tener una biblioteca TypeScript con lógica de dominio.\"></a>3. Tener una biblioteca TypeScript con lógica de dominio.</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">arquitecto</span></span><br><span class=\"line\"><span class=\"attr\">quiero:</span> <span class=\"string\">tener</span> <span class=\"string\">una</span> <span class=\"string\">biblioteca</span> <span class=\"string\">en</span> <span class=\"string\">TypeScript</span> <span class=\"string\">con</span> <span class=\"string\">lógica</span> <span class=\"string\">de</span> <span class=\"string\">dominio</span></span><br><span class=\"line\"><span class=\"attr\">de modo que:</span> <span class=\"string\">pueda</span> <span class=\"string\">usarla</span> <span class=\"string\">con</span> <span class=\"string\">varios</span> <span class=\"string\">frameworks</span> <span class=\"string\">o</span> <span class=\"string\">incluso</span> <span class=\"string\">en</span> <span class=\"string\">puro</span> <span class=\"string\">JavaScript.</span></span><br></pre></td></tr></table></figure>\n\n<p>Más temprano que tarde aparecerán funcionalidades comunes a distintas aplicaciones. Validadores genéricos, utilidades o casos concretos de un cliente pero que se usan en todos sus desarrollos. En este ejemplo partimos de la necesidad común de un sistema de saludos (un mensaje, vaya). Y para ello empezamos por definir una <code>interface</code> pública reutilizable.</p>\n<p>Un poco de arquitectura de software. Todo lo que podamos programar y que no dependa de un <em>framework</em> debemos encapsularlo en librerías independientes. De esa forma puede reutilizarse con otras tecnologías o sobrevivir dignamente a la evolución o desaparición de Angular.</p>\n<p>Lo primero será crear la librería. Pero esta vez no usaremos los <em>schematics</em> del <strong>cli</strong>, si no los propios de <strong>nrwl</strong>. La idea es usarla como la <strong>capa de dominio de la arquitectura</strong>. En ella pondremos los modelos y servicios de lógica de negocio con las menores dependencias posibles. Repito lo fundamental: minimizar las dependencias. En concreto no dependeremos de Angular, lo cual permitiría usarlo con otros <em>frameworks</em> actuales o futuros.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a Type Script library with nx power-ups</span></span><br><span class=\"line\">ng generate @nrwl/workspace:library domain --directory=shared</span><br></pre></td></tr></table></figure>\n<p>Por ahora no te preocupes de la implementación. La muestro para destacar las dos cosas que considero más importantes:</p>\n<ul>\n<li><p>No hay ninguna referencia explícita a <em>Angular</em>.</p>\n</li>\n<li><p>Lo que quieras exportar debe indicarse en el fichero <code>index.ts</code>.</p>\n</li>\n</ul>\n<p>Por lo demás es puro <em>TypeScript</em>; en una carpeta con intenciones bien claras: <code>models/</code> creo de forma manual el siguiente fichero:</p>\n<p><code>libs\\shared\\domain\\src\\lib\\models\\greetings.interface.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Greetings</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>al no disponer del sistema de módulos de angular tengo que exportarlo en el índice de la librería.</p>\n<p><code>libs\\shared\\domain\\src\\index.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib/models/greetings.interface&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Para localizarlo, Nx crea un alias en el <code>tsconfig.json</code>, que puedes retocar a voluntad</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;@a-boss/domain&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;libs/shared/domain/src/index.ts&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Ya está listo para seer consumido desde distintos proyectos (Lo haré después en el API y ya mismo en la próxima librería de componentes).</p>\n<hr>\n<h1 id=\"4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\"><a href=\"#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\" class=\"headerlink\" title=\"4. Tener una biblioteca Angular con componentes de interfaz\"></a>4. Tener una biblioteca Angular con componentes de interfaz</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">feel</span> <span class=\"string\">at</span> <span class=\"string\">home</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">feel</span> <span class=\"string\">at</span> <span class=\"string\">home</span></span><br></pre></td></tr></table></figure>\n\n<p>Si eres una empresa consultora es posible que te encuentres repitiendo funciones o pantallas una y otra vez para distintos clientes. Por supuesto que una gran empresa seguro que se hacen muchas aplicaciones similares, a las que les vendría de maravilla <strong>compartir una biblioteca de componentes</strong>.</p>\n<p>Pues ahora crear librerías es igual de sencillo que crear aplicaciones. <strong>Nx</strong> las depositará en la carpeta <code>/libs</code> y se ocupará de apuntarlas en el <code>tsconfig.json</code> para que la importación desde el resto del proyecto use alias cortos y evidentes.</p>\n<p>Crear componentes en un entorno multi proyecto requiere especificar a qué proyecto se asociarán. Para empezar vamos a crear los componentes básicos para esta funcionalidad en una librería compartida de para interfaz de usuario.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate an Angular library with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/angular:library ui --directory=shared --prefix=ab-ui --simpleModuleName</span><br><span class=\"line\"><span class=\"comment\"># Generate Greetings Component</span></span><br><span class=\"line\">ng g component greetings --project=shared-ui --module=ui.module.ts --<span class=\"built_in\">export</span> --inlineStyle --inlineTemplate</span><br></pre></td></tr></table></figure>\n\n<p>Y le damos contenido al componente. Fíjate en la importación de la interfaz <code>Greetings</code>.</p>\n<p><code>libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Greetings</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/domain&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-ui-greetings&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; theGreeting.message &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GreetingsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">theGreeting</span>: <span class=\"title class_\">Greetings</span> = &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello world&#x27;</span> &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>Puedes usarlos como cualquier otro componente y en cualquier aplicación del repositorio. Simplemente importando el módulo en el que se declaran: el <code>UiModule</code>. NX se encarga de referenciar cada proyecto en el fichero <code>tsconfig.json</code>. De esa forma se facilita su importación en cualquier otra aplicación del repositorio.</p>\n<p>Primero importamos el módulo.</p>\n<p><code>apps\\shop\\src\\app\\app.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UiModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/ui&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([], &#123; <span class=\"attr\">initialNavigation</span>: <span class=\"string\">&#x27;enabled&#x27;</span> &#125;),</span><br><span class=\"line\">    <span class=\"title class_\">UiModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y ya podemos incrustar sus componentes públicos.</p>\n<p><code>apps\\shop\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-ui-greetings</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-ui-greetings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>apps\\shop\\src\\app\\app.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-shop-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  title = <span class=\"string\">&#x27;shop&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"5-Tener-una-biblioteca-Angular-con-servicios-de-datos\"><a href=\"#5-Tener-una-biblioteca-Angular-con-servicios-de-datos\" class=\"headerlink\" title=\"5. Tener una biblioteca Angular con servicios de datos\"></a>5. Tener una biblioteca Angular con servicios de datos</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span> <span class=\"string\">by</span> <span class=\"string\">the</span> <span class=\"string\">API</span> <span class=\"string\">:-)</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">am</span> <span class=\"string\">not</span> <span class=\"string\">alone.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span> <span class=\"string\">by</span> <span class=\"string\">the</span> <span class=\"string\">API</span> <span class=\"string\">:-)</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">am</span> <span class=\"string\">not</span> <span class=\"string\">alone.</span></span><br></pre></td></tr></table></figure>\n\n<p>Además de componentes visuales, podemos tener librerías con servicios de lógica o de acceso a datos. Por ejemplo un servicio para comunicarnos con el API podría ser utilizado en diversos proyectos (aplicaciones o librerías).</p>\n<p>Con lo ya sabido vamos a crear una librería compartida para acceso a datos.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @nrwl/angular:library data --directory=shared --prefix=ab-data --simpleModuleName</span><br><span class=\"line\">ng g service greetings --project=shared-data --no-flat</span><br></pre></td></tr></table></figure>\n\n<p>El servicio realiza la llamada http y devuelve un observable.</p>\n<p><code>libs\\shared\\data\\src\\lib\\greetings\\greetings.service.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Greetings</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/domain&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GreetingsService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> apiUrl = <span class=\"string\">&#x27;http://localhost:3333/api&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">getGrettings$</span>(): <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">Greetings</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">Greetings</span>&gt;(<span class=\"variable language_\">this</span>.<span class=\"property\">apiUrl</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Para consumir el servicio no hay que hacer nada más. Pero, para importarlo en TypeScript, necesitmaos que nos lo exporten adecuadamente.</p>\n<p><code>libs\\shared\\data\\src\\index.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib/data.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib/greetings/greetings.service&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>tsconfig.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;@a-boss/domain&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;libs/shared/domain/src/index.ts&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y ahora consumirlo ya no es un problema. Por ejemplo directamente en el componente.</p>\n<p><code>libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">GreetingsService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/data&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Greetings</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/domain&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-ui-greetings&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; theGreeting.message &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GreetingsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">theGreeting</span>: <span class=\"title class_\">Greetings</span> = &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello world&#x27;</span> &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> greetingsService: GreetingsService</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">greetingsService</span>.<span class=\"title function_\">getGrettings$</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">appendApiMessage</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> appendApiMessage = <span class=\"function\">(<span class=\"params\">apiGreetings: Greetings</span>) =&gt;</span></span><br><span class=\"line\">    (<span class=\"variable language_\">this</span>.<span class=\"property\">theGreeting</span>.<span class=\"property\">message</span> += <span class=\"string\">&#x27; and &#x27;</span> + apiGreetings.<span class=\"property\">message</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ya que estamos accediendo al API, podemos aprovechar para adecuar sus tipos a la interfaz declarada en el dominio. Fíjate lo familiar que resulta este código <strong>NodeJS</strong> gracias al framework <a href=\"https://nestjs.com/\">nest</a>.</p>\n<p><code>apps\\api\\src\\app\\app.controller.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Greetings</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/domain&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppController</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> appService: AppService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>()</span><br><span class=\"line\">  <span class=\"title function_\">getData</span>(): <span class=\"title class_\">Greetings</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">appService</span>.<span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<!-- ## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro las distintas librerías y aplicaciones que tenemos en este momento. Fíjate en la jerarquía de dependencias : Aplicaciones -> Librerías Angular -> Librerías del Dominio.\n\n![Dependencias entre proyectos](/images/10-projects-dependency.png)\n\n---\n\nTienes más ejemplos en el repositorio como [la implementación un _ErrorHandler_](https://github.com/angularbuilders/angular-blueprint/blob/master/libs/tracer/src/lib/services/error-handler.service.ts). Es un servicio que una vez proveído hace uso del servicio de trazas.\n\nDispones de un _journal_ con indicaciones paso a paso de este tutorial. Consulta directamente la [documentación](https://angularbuilders.github.io/angular-blueprint/0-mono_repo) del proyecto en GitHub.\n\nLas tareas relativas a este tutorial están resueltas en el [proyecto 0 - monorepo](https://github.com/angularbuilders/angular-blueprint/projects/1)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n-->\n\n<hr>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>En definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones avanzadas. <strong>Angular</strong> es una plataforma ideal para esos grandes proyectos, pero requiere conocimiento y bases sólidas para sacarle partido.</p>\n<p>Con este tutorial empiezas tu formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> para poder afrontar retos de tamaño industrial. Continúa aprendiendo a crear y ejecutar pruebas automatizadas creando <a href=\"../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\">tests unitarios con Jest y e2e con Cypress en Angular</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-10_monorepo.png\" alt=\"nx-mono-repositorios-en-Angular\"></p>\n<p>Empiezo este <strong>tutorial de Angular Avanzado</strong> con la frase con la que acabé un artículo de opinión sobre arquitectura de software acerca de <a href=\"https://medium.com/@albertobasalo71/angular-para-grandes-aplicaciones-b66786fd3032\">Angular para grandes aplicaciones.</a></p>\n<blockquote>\n<p>Angular y las decisiones de diseño que le acompañan tienen como objetivo facilitar el desarrollo y mantenimiento a medio y largo plazo de aplicaciones web no triviales.</p>\n</blockquote>\n<p>Las empresas de desarrollo y los clientes finales que escogen <strong>Angular</strong>, suelen ser de tamaño medio o grande. Cuanto mayor sea el problema más destaca este <em>framework</em>. Y tarde o temprano esos grandes proyectos necesitarán compartir o reutilizar código. La herramienta <a href=\"https://nx.dev/angular\">Nx de Nrwl</a> ayuda en esa tarea facilitando la creación de espacios de trabajo multi proyecto: <strong>los mono repositorios.</strong></p>","more":"<p>Partiendo de cero y usando las herramientas de <a href=\"https://nrwl.io/\">Nrwl.io&#x2F;</a> crearemos un <em>blueprint</em> para desarrollar grandes aplicaciones. Al finalizar tendrás, en el mismo repositorio, un par de aplicaciones y varias librerías reutilizables creadas con los <em>Nx power-ups</em>.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Crear-el-repositorio\">1. Crear el repositorio.</a></p>\n<p><a href=\"./#2-Generar-una-SPA-con-Angular\">2. Generar varias aplicaciones con Angular.</a></p>\n<p><a href=\"./#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\">3. Tener una biblioteca TypeScript con lógica de dominio.</a></p>\n<p><a href=\"./#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\">4. Tener una biblioteca Angular con componentes de interfaz.</a></p>\n<p><a href=\"./#5-Tener-una-biblioteca-Angular-con-servicios-de-datos\">5. Tener una biblioteca Angular con servicios de datos.</a></p>\n<p><a href=\"./#Diagramas\">Diagramas</a></p>\n<p><a href=\"./#Resumen\">Resumen</a></p>\n<hr>\n<h1 id=\"1-Crear-el-repositorio\"><a href=\"#1-Crear-el-repositorio\" class=\"headerlink\" title=\"1. Crear el repositorio\"></a>1. Crear el repositorio</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">arquitecto</span> <span class=\"string\">de</span> <span class=\"string\">software</span></span><br><span class=\"line\"><span class=\"attr\">quiero:</span> <span class=\"string\">disponer</span> <span class=\"string\">de</span> <span class=\"string\">un</span> <span class=\"string\">espacio</span> <span class=\"string\">de</span> <span class=\"string\">trabajo</span> <span class=\"string\">único</span></span><br><span class=\"line\"><span class=\"attr\">para:</span> <span class=\"string\">crear</span> <span class=\"string\">aplicaciones</span> <span class=\"string\">y</span> <span class=\"string\">librerías.</span></span><br></pre></td></tr></table></figure>\n\n<p>Lo primero será preparar las herramientas. <strong>Nx</strong> es un complemento del <strong>CLI</strong> así que debemos tener este último disponible. Voy a emplear <a href=\"https://yarnpkg.com/lang/en/\">yarn</a> para la instalación de paquetes y la ejecución de comandos. Pero se muestran las instrucciones alternativas con <code>npm</code>. El repositorio siempre lo creo vacío y después agrego las capacidades específicas para <strong>Angular</strong>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Add latest Angular CLI</span></span><br><span class=\"line\">yarn global add @angular/cli</span><br><span class=\"line\"><span class=\"comment\"># Sets yarn as default packager for cli</span></span><br><span class=\"line\">ng config -g cli.packageManager yarn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creates empty repository</span></span><br><span class=\"line\">yarn create nx-workspace angular-blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># also with NPM...</span></span><br><span class=\"line\">npm i -g @angular/cli</span><br><span class=\"line\">npx create-nx-workspace@latest angular-blueprint</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"2-Generar-una-SPA-con-Angular\"><a href=\"#2-Generar-una-SPA-con-Angular\" class=\"headerlink\" title=\"2. Generar una SPA con Angular\"></a>2. Generar una SPA con Angular</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">shop</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">buy</span> <span class=\"string\">products</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">warehouse</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">take</span> <span class=\"string\">control</span></span><br></pre></td></tr></table></figure>\n\n<p>Los próximos comandos te sonarán a los mismo del <strong>angular-cli</strong>. Es normal, pues <strong>Nx</strong> utiliza y mejora las capacidades de la herramienta original. La diferencia está en que la recién creada aplicación, en lugar de nacer en la raíz del <em>workspace</em>, va la carpeta específica <code>/apps</code>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Add Angular capabilities</span></span><br><span class=\"line\">yarn add --dev @nrwl/angular</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate an Angular application with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/schematics:application shop --inlineStyle --routing --directory= -p ab-shop</span><br><span class=\"line\"><span class=\"comment\"># Start default !!!</span></span><br><span class=\"line\">yarn start</span><br><span class=\"line\"><span class=\"comment\"># Generate an Angular application with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/schematics:application warehouse --inlineStyle --routing --directory= -p ab-warehouse</span><br><span class=\"line\"><span class=\"comment\"># Start especific !!!</span></span><br><span class=\"line\">ng serve warehouse --port=4202 -o</span><br></pre></td></tr></table></figure>\n\n<p>Ambas aplicaciones comparten la configuración del <code>angular.json</code> y las demás herramientas de ayuda como <strong>tslint</strong> y <strong>prettier</strong>. Destaca mucho que también que compartan <code>/node_modules</code>, lo cual se agradece en el tiempo y en el espacio.</p>\n<p>Con nx puedes crear también aplicaciones de Backend. Por ejemplo un API REST hecha con <a href=\"https://nestjs.com/\">NestJS</a>. Para acceder a los generadores específico tienes que instalarlos antes. por ejemplo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add --dev @nrwl/nest</span><br><span class=\"line\">ng g @nrwl/nest:application api</span><br><span class=\"line\">ng serve api</span><br></pre></td></tr></table></figure>\n\n<p>Al tener varias aplicaciones es conveniente disponer de scripts específicos para cada una. Por ejemplo yo en el <code>package.json</code> tendía algo así.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve shop --port=4201 -o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build shop --prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test shop&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve warehouse --port=4202 -o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build warehouse --prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test warehouse&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:api&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve api&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:api&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build api --prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:api&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test api&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Por supuesto que todos estos comando se pueden lanzar visualmente mediante la extensión <a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\">Angular Console para VSCode</a>. Te recomiendo además estas otras extensiones:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;recommendations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;nrwl.angular-console&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;angular.ng-template&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ms-vscode.vscode-typescript-tslint-plugin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pkief.material-icon-theme&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;christian-kohler.path-intellisense&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;ban.spellright&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;johnpapa.angular-essentials&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\"><a href=\"#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\" class=\"headerlink\" title=\"3. Tener una biblioteca TypeScript con lógica de dominio.\"></a>3. Tener una biblioteca TypeScript con lógica de dominio.</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">arquitecto</span></span><br><span class=\"line\"><span class=\"attr\">quiero:</span> <span class=\"string\">tener</span> <span class=\"string\">una</span> <span class=\"string\">biblioteca</span> <span class=\"string\">en</span> <span class=\"string\">TypeScript</span> <span class=\"string\">con</span> <span class=\"string\">lógica</span> <span class=\"string\">de</span> <span class=\"string\">dominio</span></span><br><span class=\"line\"><span class=\"attr\">de modo que:</span> <span class=\"string\">pueda</span> <span class=\"string\">usarla</span> <span class=\"string\">con</span> <span class=\"string\">varios</span> <span class=\"string\">frameworks</span> <span class=\"string\">o</span> <span class=\"string\">incluso</span> <span class=\"string\">en</span> <span class=\"string\">puro</span> <span class=\"string\">JavaScript.</span></span><br></pre></td></tr></table></figure>\n\n<p>Más temprano que tarde aparecerán funcionalidades comunes a distintas aplicaciones. Validadores genéricos, utilidades o casos concretos de un cliente pero que se usan en todos sus desarrollos. En este ejemplo partimos de la necesidad común de un sistema de saludos (un mensaje, vaya). Y para ello empezamos por definir una <code>interface</code> pública reutilizable.</p>\n<p>Un poco de arquitectura de software. Todo lo que podamos programar y que no dependa de un <em>framework</em> debemos encapsularlo en librerías independientes. De esa forma puede reutilizarse con otras tecnologías o sobrevivir dignamente a la evolución o desaparición de Angular.</p>\n<p>Lo primero será crear la librería. Pero esta vez no usaremos los <em>schematics</em> del <strong>cli</strong>, si no los propios de <strong>nrwl</strong>. La idea es usarla como la <strong>capa de dominio de la arquitectura</strong>. En ella pondremos los modelos y servicios de lógica de negocio con las menores dependencias posibles. Repito lo fundamental: minimizar las dependencias. En concreto no dependeremos de Angular, lo cual permitiría usarlo con otros <em>frameworks</em> actuales o futuros.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a Type Script library with nx power-ups</span></span><br><span class=\"line\">ng generate @nrwl/workspace:library domain --directory=shared</span><br></pre></td></tr></table></figure>\n<p>Por ahora no te preocupes de la implementación. La muestro para destacar las dos cosas que considero más importantes:</p>\n<ul>\n<li><p>No hay ninguna referencia explícita a <em>Angular</em>.</p>\n</li>\n<li><p>Lo que quieras exportar debe indicarse en el fichero <code>index.ts</code>.</p>\n</li>\n</ul>\n<p>Por lo demás es puro <em>TypeScript</em>; en una carpeta con intenciones bien claras: <code>models/</code> creo de forma manual el siguiente fichero:</p>\n<p><code>libs\\shared\\domain\\src\\lib\\models\\greetings.interface.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Greetings</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>al no disponer del sistema de módulos de angular tengo que exportarlo en el índice de la librería.</p>\n<p><code>libs\\shared\\domain\\src\\index.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib/models/greetings.interface&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Para localizarlo, Nx crea un alias en el <code>tsconfig.json</code>, que puedes retocar a voluntad</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;@a-boss/domain&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;libs/shared/domain/src/index.ts&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Ya está listo para seer consumido desde distintos proyectos (Lo haré después en el API y ya mismo en la próxima librería de componentes).</p>\n<hr>\n<h1 id=\"4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\"><a href=\"#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\" class=\"headerlink\" title=\"4. Tener una biblioteca Angular con componentes de interfaz\"></a>4. Tener una biblioteca Angular con componentes de interfaz</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">feel</span> <span class=\"string\">at</span> <span class=\"string\">home</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">feel</span> <span class=\"string\">at</span> <span class=\"string\">home</span></span><br></pre></td></tr></table></figure>\n\n<p>Si eres una empresa consultora es posible que te encuentres repitiendo funciones o pantallas una y otra vez para distintos clientes. Por supuesto que una gran empresa seguro que se hacen muchas aplicaciones similares, a las que les vendría de maravilla <strong>compartir una biblioteca de componentes</strong>.</p>\n<p>Pues ahora crear librerías es igual de sencillo que crear aplicaciones. <strong>Nx</strong> las depositará en la carpeta <code>/libs</code> y se ocupará de apuntarlas en el <code>tsconfig.json</code> para que la importación desde el resto del proyecto use alias cortos y evidentes.</p>\n<p>Crear componentes en un entorno multi proyecto requiere especificar a qué proyecto se asociarán. Para empezar vamos a crear los componentes básicos para esta funcionalidad en una librería compartida de para interfaz de usuario.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate an Angular library with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/angular:library ui --directory=shared --prefix=ab-ui --simpleModuleName</span><br><span class=\"line\"><span class=\"comment\"># Generate Greetings Component</span></span><br><span class=\"line\">ng g component greetings --project=shared-ui --module=ui.module.ts --<span class=\"built_in\">export</span> --inlineStyle --inlineTemplate</span><br></pre></td></tr></table></figure>\n\n<p>Y le damos contenido al componente. Fíjate en la importación de la interfaz <code>Greetings</code>.</p>\n<p><code>libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Greetings</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/domain&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-ui-greetings&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; theGreeting.message &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GreetingsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">theGreeting</span>: <span class=\"title class_\">Greetings</span> = &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello world&#x27;</span> &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>Puedes usarlos como cualquier otro componente y en cualquier aplicación del repositorio. Simplemente importando el módulo en el que se declaran: el <code>UiModule</code>. NX se encarga de referenciar cada proyecto en el fichero <code>tsconfig.json</code>. De esa forma se facilita su importación en cualquier otra aplicación del repositorio.</p>\n<p>Primero importamos el módulo.</p>\n<p><code>apps\\shop\\src\\app\\app.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UiModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/ui&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">BrowserModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>([], &#123; <span class=\"attr\">initialNavigation</span>: <span class=\"string\">&#x27;enabled&#x27;</span> &#125;),</span><br><span class=\"line\">    <span class=\"title class_\">UiModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y ya podemos incrustar sus componentes públicos.</p>\n<p><code>apps\\shop\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-ui-greetings</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-ui-greetings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>apps\\shop\\src\\app\\app.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-shop-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  title = <span class=\"string\">&#x27;shop&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"5-Tener-una-biblioteca-Angular-con-servicios-de-datos\"><a href=\"#5-Tener-una-biblioteca-Angular-con-servicios-de-datos\" class=\"headerlink\" title=\"5. Tener una biblioteca Angular con servicios de datos\"></a>5. Tener una biblioteca Angular con servicios de datos</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span> <span class=\"string\">by</span> <span class=\"string\">the</span> <span class=\"string\">API</span> <span class=\"string\">:-)</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">am</span> <span class=\"string\">not</span> <span class=\"string\">alone.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span> <span class=\"string\">by</span> <span class=\"string\">the</span> <span class=\"string\">API</span> <span class=\"string\">:-)</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">am</span> <span class=\"string\">not</span> <span class=\"string\">alone.</span></span><br></pre></td></tr></table></figure>\n\n<p>Además de componentes visuales, podemos tener librerías con servicios de lógica o de acceso a datos. Por ejemplo un servicio para comunicarnos con el API podría ser utilizado en diversos proyectos (aplicaciones o librerías).</p>\n<p>Con lo ya sabido vamos a crear una librería compartida para acceso a datos.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @nrwl/angular:library data --directory=shared --prefix=ab-data --simpleModuleName</span><br><span class=\"line\">ng g service greetings --project=shared-data --no-flat</span><br></pre></td></tr></table></figure>\n\n<p>El servicio realiza la llamada http y devuelve un observable.</p>\n<p><code>libs\\shared\\data\\src\\lib\\greetings\\greetings.service.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Greetings</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/domain&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GreetingsService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> apiUrl = <span class=\"string\">&#x27;http://localhost:3333/api&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">getGrettings$</span>(): <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">Greetings</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">Greetings</span>&gt;(<span class=\"variable language_\">this</span>.<span class=\"property\">apiUrl</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Para consumir el servicio no hay que hacer nada más. Pero, para importarlo en TypeScript, necesitmaos que nos lo exporten adecuadamente.</p>\n<p><code>libs\\shared\\data\\src\\index.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib/data.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./lib/greetings/greetings.service&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>tsconfig.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;@a-boss/domain&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;libs/shared/domain/src/index.ts&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y ahora consumirlo ya no es un problema. Por ejemplo directamente en el componente.</p>\n<p><code>libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">GreetingsService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/data&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Greetings</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/domain&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-ui-greetings&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; theGreeting.message &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GreetingsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">theGreeting</span>: <span class=\"title class_\">Greetings</span> = &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello world&#x27;</span> &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> greetingsService: GreetingsService</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">greetingsService</span>.<span class=\"title function_\">getGrettings$</span>().<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">appendApiMessage</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> appendApiMessage = <span class=\"function\">(<span class=\"params\">apiGreetings: Greetings</span>) =&gt;</span></span><br><span class=\"line\">    (<span class=\"variable language_\">this</span>.<span class=\"property\">theGreeting</span>.<span class=\"property\">message</span> += <span class=\"string\">&#x27; and &#x27;</span> + apiGreetings.<span class=\"property\">message</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ya que estamos accediendo al API, podemos aprovechar para adecuar sus tipos a la interfaz declarada en el dominio. Fíjate lo familiar que resulta este código <strong>NodeJS</strong> gracias al framework <a href=\"https://nestjs.com/\">nest</a>.</p>\n<p><code>apps\\api\\src\\app\\app.controller.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Greetings</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/domain&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppController</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> appService: AppService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>()</span><br><span class=\"line\">  <span class=\"title function_\">getData</span>(): <span class=\"title class_\">Greetings</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">appService</span>.<span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<!-- ## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro las distintas librerías y aplicaciones que tenemos en este momento. Fíjate en la jerarquía de dependencias : Aplicaciones -> Librerías Angular -> Librerías del Dominio.\n\n![Dependencias entre proyectos](/images/10-projects-dependency.png)\n\n---\n\nTienes más ejemplos en el repositorio como [la implementación un _ErrorHandler_](https://github.com/angularbuilders/angular-blueprint/blob/master/libs/tracer/src/lib/services/error-handler.service.ts). Es un servicio que una vez proveído hace uso del servicio de trazas.\n\nDispones de un _journal_ con indicaciones paso a paso de este tutorial. Consulta directamente la [documentación](https://angularbuilders.github.io/angular-blueprint/0-mono_repo) del proyecto en GitHub.\n\nLas tareas relativas a este tutorial están resueltas en el [proyecto 0 - monorepo](https://github.com/angularbuilders/angular-blueprint/projects/1)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n-->\n\n<hr>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>En definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones avanzadas. <strong>Angular</strong> es una plataforma ideal para esos grandes proyectos, pero requiere conocimiento y bases sólidas para sacarle partido.</p>\n<p>Con este tutorial empiezas tu formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> para poder afrontar retos de tamaño industrial. Continúa aprendiendo a crear y ejecutar pruebas automatizadas creando <a href=\"../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\">tests unitarios con Jest y e2e con Cypress en Angular</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Tests unitarios con Jest y e2e con Cypress en Angular","date":"2019-09-05T12:25:12.000Z","thumbnail":"/css/images/angular-11_test.png","_content":"\n![tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular](/images/tutorial-angular-11_test.png)\n\nContinuamos este **tutorial de Angular Avanzado** con el tema controvertido del testing. Sí, ya sé que todos deberíamos hacerlo siempre, pero también sé que no es cierto. Así que vamos a ponerle remedio eliminando excusas y facilitando las pruebas automatizadas.\n\n> Por si hace falta su defensa: Las pruebas automáticas de código son la principal técnica de reducción de bugs y garantizan el buen funcionamiento durante un refactoring. Bueno para el usuario bueno para el programador.\n\nLos desarrollos que hoy en día hacemos con **Angular** suelen ser de tamaño medio o grande y con una esperanza de vida y mantenimiento que se mide en años. Así que cuantas más pruebas tengamos menos miedo tendremos a cambiar el código. Y la necesidad de cambio siempre estará ahí. Veremos como _Jest_ y _Cypress_ nos ayudan muchísimo en la tarea.\n\n<!-- more -->\n\nPartiendo del [mono repositorio creado](../nx-mono-repositorios-en-Angular) usando las herramientas de [Nrwl.io/](https://nrwl.io/) aprovecharemos las herramientas que instala y configura dos productos de última generación que facilitan la tarea. Usaremos [Jest](https://jestjs.io/) para los test unitarios y [Cypress](https://www.cypress.io/) para los de integración _End to End_. Vamos a empezar por el final.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Test de Integración con Cypress.](./#1.-Test-de-Integración-con-Cypress)\n\n[2. Test Unitarios con Jest.](./#2.-Test-Unitarios-con-Jest)\n\n<!-- [Diagramas](./#Diagramas) -->\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Test de Integración con Cypress\n\n```yaml\nAs a: developer,\n  I want: to test end to end my app\n  so that: I can be sure of the functions\n```\n\nLas pruebas de integración son las que tienen un retorno de inversión más inmediato. Si esta es tu primera aproximación al testing, te recomiendo empezar por aquí. Se trata de definir un escenario y pre programar el comportamiento del usuario. El sistema lo ejecutará y podrás contrastar el resultado con algún valor esperado.\n\nSon pruebas de caja negra que interactúan con el sistema en ejecución. Todo ello automatizado y con informes visuales interactivos o en ficheros de texto con el resultado de las pruebas.\n\n## 1.1 Cypress\n\n[Cypress](https://www.cypress.io/) es el equivalente a Protractor, el producto propio de Angular. La ventaja principal es que no está atado a ningún framework y por tanto lo que hagas valdrá para probar cualquier web en cualquier tecnología.\n\nCon cada aplicación generada se crea una hermana para sus pruebas _e2e_. Esa aplicación de pruebas está configurada y lista para compilar, servir y probar su aplicación objetivo. Con [Nx](https://twitter.com/NxDevTools) tenemos todo instalado, configurado y listo para ejecutarse con comandos como los siguientes que yo coloco en el `packcage.json`:\n\n```json\n{\n  \"e2e:shop\": \"ng e2e shop-e2e --watch\",\n  \"e2e:warehouse\": \"ng e2e warehouse-e2e --watch\"\n}\n```\n\nLuego se pueden lanzar desde la terminal muy cómodamente.\n\n```terminal\nyarn e2e:shop\nyarn e2e:warehouse\n```\n\n## 1.2 Test e2e\n\n```yaml\nGIVEN: the shop web app\n  WHEN: user visits home page\n    THEN: should display welcome message\n    THEN: should display welcome message from the API\n```\n\nTu trabajo como _tester_ será definir las pruebas en la carpeta `/integration`. Por ejemplo para empezar nos ofrecen el fichero `app-spec.ts` en el que yo he especificado el comportamiento deseado por mi página. La sintaxis se entiende por si misma. He seguido el convenio **GIVEN, WHEN, THEN** para especificar pruebas que podrían considerarse casi de comportamiento o aceptación.\n\n`apps\\shop-e2e\\src\\integration\\app.spec.ts`\n\n```typescript\nimport { getGreeting } from '../support/app.po';\n\ndescribe('GIVEN: the shop web app', () => {\n  beforeEach(() => cy.visit('/'));\n  context('WHEN: user visits home page', () => {\n    it('THEN: should display welcome message', () => {\n      getGreeting().contains('Hello world');\n    });\n    // needs the api server to run\n    // yarn start:api\n    it('THEN: should display welcome message from the API', () => {\n      getGreeting().contains('and Welcome to api!');\n    });\n  });\n});\n```\n\nLa parte más técnica y tediosa es la que accede al _DOM_ y lo mejor es tener eso a parte. En la carpeta `/support` nos sugieren que creemos utilidades para tratar con el _DOM_ y de esa forma mantener los test lo más cercanos posible a un lenguaje natural de negocio. En este caso uso una aproximación libre al [BDD con gherkin](https://www.genbeta.com/desarrollo/bdd-cucumber-y-gherkin-desarrollo-dirigido-por-comportamiento) para mantener el espíritu de sencillez de un tutorial sobre tecnología Angular, no sobre testing.\n\n`apps\\shop-e2e\\src\\support\\app.po.ts`\n\n```typescript\nexport const getGreeting = () => cy.get('h1');\n```\n\n---\n\n\n# 2. Test Unitarios con Jest\n\nLas pruebas unitarias, muy asociadas al [TDD](https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92), son las mejores amigas del desarrollador. Pero, también son las más engorrosas para empezar. Así que aquí veremos una introducción sencilla para que nadie deje de hacerlas.\n\n\n## 2.1 Jest\n\n[Jest](https://jestjs.io/) es un framework de testing para JavaScript muy sencillo y rápido. Puedes usarlo con cualquier otro framework. Para el caso de Angular ya viene preconfigurado si usas las extensiones Nx.\n\nMete los siguientes scripts en el `package.json` y así tendrás a mano siempre las pruebas. Te recomiendo que desarrolles con el test unitario lanzado; es la manera más rápida de probar el código que estés tocando. Idealmente incluso con **TDD** el [test antes del código](https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80).\n\n> Para más información acerca de lo útil y rentable que resulta practicar **TDD**, te recomiendo que leas este artículo: [Statistics & Studies: The Benefits Of Test Driven Development](https://theqalead.com/general/statistics-studies-benefits-test-driven-development/)\n\n```json\n{\n  \"test:shop\": \"ng test shop --watch --verbose\",\n  \"test:warehouse\": \"ng test warehouse --watch --verbose\",\n  \"test:api\": \"ng test api --watch --verbose\"\n}\n```\n\n```terminal\nyarn test:shop\nyarn test:warehouse\nyarn test:api\n```\n\n## 2.2 Tests unitarios\n\n\n### 2.2.1 Componentes\n\n```yaml\nGIVEN: an AppComponent declared in AppModule\n  WHEN: the AppModule is compiled\n    THEN: should create the component\n    THEN: should have a property title with value 'shop'\n    THEN: should render 'Hello world' in a H1 tag\n```\n\nEn este caso queremos probar una librería de componentes. Y empezamos por el componente raíz. Esta es una prueba unitarias pero con un toque de integración parcial pues necesita de otros componentes para ejecutarse. Cuanto más arriba en la jerarquía esté el componente mayor será su necesidad de integrar a otros. Pero no pasa nada, de esta forma te aseguras de que el módulo de la librería se importa y que sus componentes se exportan correctamente.\n\nAl grano, vamos a la aplicación _shop_ para  comprobar que su componente `AppComponent` funciona y (de paso) que se renderiza también el componente `ab-ui-greetings` incrustando los saludos.\n\n\n`apps\\shop\\src\\app\\app.component.spec.ts`\n\n```typescript\nimport { UiModule } from '@a-boss/ui';\nimport { async, TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { AppComponent } from './app.component';\n\ndescribe('GIVEN: an AppComponent declared in AppModule', () => {\n  describe('WHEN: the AppModule is compiled', () => {\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [RouterTestingModule, UiModule],\n        declarations: [AppComponent]\n      }).compileComponents();\n    }));\n\n    it('THEN: should create the component', () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      const app = fixture.debugElement.componentInstance;\n      expect(app).toBeTruthy();\n    });\n\n    it(`THEN: should have a property title with value 'shop'`, () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      const app = fixture.debugElement.componentInstance;\n      expect(app.title).toEqual('shop');\n    });\n\n    it(`THEN: should render 'Hello world' in a H1 tag`, () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      fixture.detectChanges();\n      const compiled = fixture.debugElement.nativeElement;\n      expect(compiled.querySelector('h1').textContent).toContain('Hello world');\n    });\n  });\n});\n```\n\n### 2.2.2 Services\n\n```yaml\nGIVEN: a GreetingsService\n  WHEN: the DataModule is compiled\n    THEN: should be created\n    THEN: should return an observable when call 'getGrettings()'\n    THEN: should return 'Welcome to api!' when call 'getGrettings()'\n```\n\nLa prueba de servicios es más sencilla que la de componentes pues no hay que tratar con la renderización del HTML; sólo funcionalidad en una clase TypeScript. Pero, siempre hay un pero, muchos de estos servicios tratarán con llamadas asíncronas. Afortunadamente está todo pensado y se resuelve con dos conceptos: la función `async()` y inyección de réplicas (_mocks_) de las dependencias.\n\n`libs\\shared\\data\\src\\lib\\greetings\\greetings.service.spec.ts`\n\n```typescript\n// importar réplicas para testing de las dependencias del servicio\nimport {\n  HttpClientTestingModule,\n  HttpTestingController\n} from '@angular/common/http/testing';\nimport { async, TestBed } from '@angular/core/testing';\nimport { Observable } from 'rxjs';\nimport { GreetingsService } from './greetings.service';\n\ndescribe('GIVEN: a GreetingsService', () => {\n  describe('WHEN: the DataModule is compiled', () => {\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule]\n      });\n    });\n\n    it('THEN: should be created', () => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      expect(service).toBeTruthy();\n    });\n\n    it(`THEN: should return an observable when call 'getGrettings()'`, () => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      const greetings$: Observable<any> = service.getGrettings$();\n      expect(greetings$).toBeInstanceOf(Observable);\n    });\n\n    // Ojo al async para ejectuar las llamadas asíncronas\n    it(`THEN: should return 'Welcome to api!' when call 'getGrettings()'`, async(() => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      service\n        .getGrettings$()\n        .subscribe(result =>\n          expect(result).toEqual({ message: 'Welcome to api!' })\n        );\n      // mock del backend para no depender del servidor\n      const httpMock = TestBed.get(HttpTestingController);\n      // esperar a que se llame a esta ruta\n      const req = httpMock.expectOne('http://localhost:3333/api');\n      req.flush({ message: 'Welcome to api!' }); // responder con esto\n      httpMock.verify(); // comprobar que no hay más llamadas\n    }));\n  });\n});\n```\n\nA partir de aquí es siempre igual. Defines un respuesta esperada, le das una entrada conocida y si algo no cuadra, entonces el código no pasa la prueba y tienes una oportunidad para mejorarlo.\n\nEn la prueba de servicios es fundamental que uses réplicas de sus dependencias. Es la forma de garantizar que pruebas únicamente el servicio, sin depender de nada. Esto era mucho más complejo con los componentes, pero un mandamiento con los servicios.\n\n---\n\n## Resumen\n\nEn definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones fiables y mantenibles. Y eso pasa inexcusablemente por hacer testing. **Angular** facilita las pruebas unitarias y de integración; especialmente con las herramientas _Jest_ y  _Cypress_ ya configuradas por **NxDevTools**.\n\nCon este tutorial de formación [avanzada en Angular](../tag/Avanzado/) te preparas para poder afrontar retos de tamaño industrial. Continúa aprendiendo a mejorar el rendimiento usando la [detección del cambio en Angular](../deteccion-del-cambio-en-Angular). Todos esos detalles se tratan en el [curso avanzado online](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-11-tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular.md","raw":"---\ntitle: Tests unitarios con Jest y e2e con Cypress en Angular\npermalink: tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\ndate: 2019-09-05 14:25:12\ntags:\n- Angular\n- Angular8\n- Nx\n- Test\n- Jest\n- Cypress\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-11_test.png\n---\n\n![tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular](/images/tutorial-angular-11_test.png)\n\nContinuamos este **tutorial de Angular Avanzado** con el tema controvertido del testing. Sí, ya sé que todos deberíamos hacerlo siempre, pero también sé que no es cierto. Así que vamos a ponerle remedio eliminando excusas y facilitando las pruebas automatizadas.\n\n> Por si hace falta su defensa: Las pruebas automáticas de código son la principal técnica de reducción de bugs y garantizan el buen funcionamiento durante un refactoring. Bueno para el usuario bueno para el programador.\n\nLos desarrollos que hoy en día hacemos con **Angular** suelen ser de tamaño medio o grande y con una esperanza de vida y mantenimiento que se mide en años. Así que cuantas más pruebas tengamos menos miedo tendremos a cambiar el código. Y la necesidad de cambio siempre estará ahí. Veremos como _Jest_ y _Cypress_ nos ayudan muchísimo en la tarea.\n\n<!-- more -->\n\nPartiendo del [mono repositorio creado](../nx-mono-repositorios-en-Angular) usando las herramientas de [Nrwl.io/](https://nrwl.io/) aprovecharemos las herramientas que instala y configura dos productos de última generación que facilitan la tarea. Usaremos [Jest](https://jestjs.io/) para los test unitarios y [Cypress](https://www.cypress.io/) para los de integración _End to End_. Vamos a empezar por el final.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Test de Integración con Cypress.](./#1.-Test-de-Integración-con-Cypress)\n\n[2. Test Unitarios con Jest.](./#2.-Test-Unitarios-con-Jest)\n\n<!-- [Diagramas](./#Diagramas) -->\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Test de Integración con Cypress\n\n```yaml\nAs a: developer,\n  I want: to test end to end my app\n  so that: I can be sure of the functions\n```\n\nLas pruebas de integración son las que tienen un retorno de inversión más inmediato. Si esta es tu primera aproximación al testing, te recomiendo empezar por aquí. Se trata de definir un escenario y pre programar el comportamiento del usuario. El sistema lo ejecutará y podrás contrastar el resultado con algún valor esperado.\n\nSon pruebas de caja negra que interactúan con el sistema en ejecución. Todo ello automatizado y con informes visuales interactivos o en ficheros de texto con el resultado de las pruebas.\n\n## 1.1 Cypress\n\n[Cypress](https://www.cypress.io/) es el equivalente a Protractor, el producto propio de Angular. La ventaja principal es que no está atado a ningún framework y por tanto lo que hagas valdrá para probar cualquier web en cualquier tecnología.\n\nCon cada aplicación generada se crea una hermana para sus pruebas _e2e_. Esa aplicación de pruebas está configurada y lista para compilar, servir y probar su aplicación objetivo. Con [Nx](https://twitter.com/NxDevTools) tenemos todo instalado, configurado y listo para ejecutarse con comandos como los siguientes que yo coloco en el `packcage.json`:\n\n```json\n{\n  \"e2e:shop\": \"ng e2e shop-e2e --watch\",\n  \"e2e:warehouse\": \"ng e2e warehouse-e2e --watch\"\n}\n```\n\nLuego se pueden lanzar desde la terminal muy cómodamente.\n\n```terminal\nyarn e2e:shop\nyarn e2e:warehouse\n```\n\n## 1.2 Test e2e\n\n```yaml\nGIVEN: the shop web app\n  WHEN: user visits home page\n    THEN: should display welcome message\n    THEN: should display welcome message from the API\n```\n\nTu trabajo como _tester_ será definir las pruebas en la carpeta `/integration`. Por ejemplo para empezar nos ofrecen el fichero `app-spec.ts` en el que yo he especificado el comportamiento deseado por mi página. La sintaxis se entiende por si misma. He seguido el convenio **GIVEN, WHEN, THEN** para especificar pruebas que podrían considerarse casi de comportamiento o aceptación.\n\n`apps\\shop-e2e\\src\\integration\\app.spec.ts`\n\n```typescript\nimport { getGreeting } from '../support/app.po';\n\ndescribe('GIVEN: the shop web app', () => {\n  beforeEach(() => cy.visit('/'));\n  context('WHEN: user visits home page', () => {\n    it('THEN: should display welcome message', () => {\n      getGreeting().contains('Hello world');\n    });\n    // needs the api server to run\n    // yarn start:api\n    it('THEN: should display welcome message from the API', () => {\n      getGreeting().contains('and Welcome to api!');\n    });\n  });\n});\n```\n\nLa parte más técnica y tediosa es la que accede al _DOM_ y lo mejor es tener eso a parte. En la carpeta `/support` nos sugieren que creemos utilidades para tratar con el _DOM_ y de esa forma mantener los test lo más cercanos posible a un lenguaje natural de negocio. En este caso uso una aproximación libre al [BDD con gherkin](https://www.genbeta.com/desarrollo/bdd-cucumber-y-gherkin-desarrollo-dirigido-por-comportamiento) para mantener el espíritu de sencillez de un tutorial sobre tecnología Angular, no sobre testing.\n\n`apps\\shop-e2e\\src\\support\\app.po.ts`\n\n```typescript\nexport const getGreeting = () => cy.get('h1');\n```\n\n---\n\n\n# 2. Test Unitarios con Jest\n\nLas pruebas unitarias, muy asociadas al [TDD](https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92), son las mejores amigas del desarrollador. Pero, también son las más engorrosas para empezar. Así que aquí veremos una introducción sencilla para que nadie deje de hacerlas.\n\n\n## 2.1 Jest\n\n[Jest](https://jestjs.io/) es un framework de testing para JavaScript muy sencillo y rápido. Puedes usarlo con cualquier otro framework. Para el caso de Angular ya viene preconfigurado si usas las extensiones Nx.\n\nMete los siguientes scripts en el `package.json` y así tendrás a mano siempre las pruebas. Te recomiendo que desarrolles con el test unitario lanzado; es la manera más rápida de probar el código que estés tocando. Idealmente incluso con **TDD** el [test antes del código](https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80).\n\n> Para más información acerca de lo útil y rentable que resulta practicar **TDD**, te recomiendo que leas este artículo: [Statistics & Studies: The Benefits Of Test Driven Development](https://theqalead.com/general/statistics-studies-benefits-test-driven-development/)\n\n```json\n{\n  \"test:shop\": \"ng test shop --watch --verbose\",\n  \"test:warehouse\": \"ng test warehouse --watch --verbose\",\n  \"test:api\": \"ng test api --watch --verbose\"\n}\n```\n\n```terminal\nyarn test:shop\nyarn test:warehouse\nyarn test:api\n```\n\n## 2.2 Tests unitarios\n\n\n### 2.2.1 Componentes\n\n```yaml\nGIVEN: an AppComponent declared in AppModule\n  WHEN: the AppModule is compiled\n    THEN: should create the component\n    THEN: should have a property title with value 'shop'\n    THEN: should render 'Hello world' in a H1 tag\n```\n\nEn este caso queremos probar una librería de componentes. Y empezamos por el componente raíz. Esta es una prueba unitarias pero con un toque de integración parcial pues necesita de otros componentes para ejecutarse. Cuanto más arriba en la jerarquía esté el componente mayor será su necesidad de integrar a otros. Pero no pasa nada, de esta forma te aseguras de que el módulo de la librería se importa y que sus componentes se exportan correctamente.\n\nAl grano, vamos a la aplicación _shop_ para  comprobar que su componente `AppComponent` funciona y (de paso) que se renderiza también el componente `ab-ui-greetings` incrustando los saludos.\n\n\n`apps\\shop\\src\\app\\app.component.spec.ts`\n\n```typescript\nimport { UiModule } from '@a-boss/ui';\nimport { async, TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { AppComponent } from './app.component';\n\ndescribe('GIVEN: an AppComponent declared in AppModule', () => {\n  describe('WHEN: the AppModule is compiled', () => {\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [RouterTestingModule, UiModule],\n        declarations: [AppComponent]\n      }).compileComponents();\n    }));\n\n    it('THEN: should create the component', () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      const app = fixture.debugElement.componentInstance;\n      expect(app).toBeTruthy();\n    });\n\n    it(`THEN: should have a property title with value 'shop'`, () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      const app = fixture.debugElement.componentInstance;\n      expect(app.title).toEqual('shop');\n    });\n\n    it(`THEN: should render 'Hello world' in a H1 tag`, () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      fixture.detectChanges();\n      const compiled = fixture.debugElement.nativeElement;\n      expect(compiled.querySelector('h1').textContent).toContain('Hello world');\n    });\n  });\n});\n```\n\n### 2.2.2 Services\n\n```yaml\nGIVEN: a GreetingsService\n  WHEN: the DataModule is compiled\n    THEN: should be created\n    THEN: should return an observable when call 'getGrettings()'\n    THEN: should return 'Welcome to api!' when call 'getGrettings()'\n```\n\nLa prueba de servicios es más sencilla que la de componentes pues no hay que tratar con la renderización del HTML; sólo funcionalidad en una clase TypeScript. Pero, siempre hay un pero, muchos de estos servicios tratarán con llamadas asíncronas. Afortunadamente está todo pensado y se resuelve con dos conceptos: la función `async()` y inyección de réplicas (_mocks_) de las dependencias.\n\n`libs\\shared\\data\\src\\lib\\greetings\\greetings.service.spec.ts`\n\n```typescript\n// importar réplicas para testing de las dependencias del servicio\nimport {\n  HttpClientTestingModule,\n  HttpTestingController\n} from '@angular/common/http/testing';\nimport { async, TestBed } from '@angular/core/testing';\nimport { Observable } from 'rxjs';\nimport { GreetingsService } from './greetings.service';\n\ndescribe('GIVEN: a GreetingsService', () => {\n  describe('WHEN: the DataModule is compiled', () => {\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule]\n      });\n    });\n\n    it('THEN: should be created', () => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      expect(service).toBeTruthy();\n    });\n\n    it(`THEN: should return an observable when call 'getGrettings()'`, () => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      const greetings$: Observable<any> = service.getGrettings$();\n      expect(greetings$).toBeInstanceOf(Observable);\n    });\n\n    // Ojo al async para ejectuar las llamadas asíncronas\n    it(`THEN: should return 'Welcome to api!' when call 'getGrettings()'`, async(() => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      service\n        .getGrettings$()\n        .subscribe(result =>\n          expect(result).toEqual({ message: 'Welcome to api!' })\n        );\n      // mock del backend para no depender del servidor\n      const httpMock = TestBed.get(HttpTestingController);\n      // esperar a que se llame a esta ruta\n      const req = httpMock.expectOne('http://localhost:3333/api');\n      req.flush({ message: 'Welcome to api!' }); // responder con esto\n      httpMock.verify(); // comprobar que no hay más llamadas\n    }));\n  });\n});\n```\n\nA partir de aquí es siempre igual. Defines un respuesta esperada, le das una entrada conocida y si algo no cuadra, entonces el código no pasa la prueba y tienes una oportunidad para mejorarlo.\n\nEn la prueba de servicios es fundamental que uses réplicas de sus dependencias. Es la forma de garantizar que pruebas únicamente el servicio, sin depender de nada. Esto era mucho más complejo con los componentes, pero un mandamiento con los servicios.\n\n---\n\n## Resumen\n\nEn definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones fiables y mantenibles. Y eso pasa inexcusablemente por hacer testing. **Angular** facilita las pruebas unitarias y de integración; especialmente con las herramientas _Jest_ y  _Cypress_ ya configuradas por **NxDevTools**.\n\nCon este tutorial de formación [avanzada en Angular](../tag/Avanzado/) te preparas para poder afrontar retos de tamaño industrial. Continúa aprendiendo a mejorar el rendimiento usando la [detección del cambio en Angular](../deteccion-del-cambio-en-Angular). Todos esos detalles se tratan en el [curso avanzado online](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-11-tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular","published":1,"updated":"2023-07-02T10:25:58.474Z","__permalink":"tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fa000me0965bj470jd","content":"<p><img src=\"/images/tutorial-angular-11_test.png\" alt=\"tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\"></p>\n<p>Continuamos este <strong>tutorial de Angular Avanzado</strong> con el tema controvertido del testing. Sí, ya sé que todos deberíamos hacerlo siempre, pero también sé que no es cierto. Así que vamos a ponerle remedio eliminando excusas y facilitando las pruebas automatizadas.</p>\n<blockquote>\n<p>Por si hace falta su defensa: Las pruebas automáticas de código son la principal técnica de reducción de bugs y garantizan el buen funcionamiento durante un refactoring. Bueno para el usuario bueno para el programador.</p>\n</blockquote>\n<p>Los desarrollos que hoy en día hacemos con <strong>Angular</strong> suelen ser de tamaño medio o grande y con una esperanza de vida y mantenimiento que se mide en años. Así que cuantas más pruebas tengamos menos miedo tendremos a cambiar el código. Y la necesidad de cambio siempre estará ahí. Veremos como <em>Jest</em> y <em>Cypress</em> nos ayudan muchísimo en la tarea.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo del <a href=\"../nx-mono-repositorios-en-Angular\">mono repositorio creado</a> usando las herramientas de <a href=\"https://nrwl.io/\">Nrwl.io&#x2F;</a> aprovecharemos las herramientas que instala y configura dos productos de última generación que facilitan la tarea. Usaremos <a href=\"https://jestjs.io/\">Jest</a> para los test unitarios y <a href=\"https://www.cypress.io/\">Cypress</a> para los de integración <em>End to End</em>. Vamos a empezar por el final.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1.-Test-de-Integraci%C3%B3n-con-Cypress\">1. Test de Integración con Cypress.</a></p>\n<p><a href=\"./#2.-Test-Unitarios-con-Jest\">2. Test Unitarios con Jest.</a></p>\n<!-- [Diagramas](./#Diagramas) -->\n\n<p><a href=\"./#Resumen\">Resumen</a></p>\n<hr>\n<h1 id=\"1-Test-de-Integracion-con-Cypress\"><a href=\"#1-Test-de-Integracion-con-Cypress\" class=\"headerlink\" title=\"1. Test de Integración con Cypress\"></a>1. Test de Integración con Cypress</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">developer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">test</span> <span class=\"string\">end</span> <span class=\"string\">to</span> <span class=\"string\">end</span> <span class=\"string\">my</span> <span class=\"string\">app</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">be</span> <span class=\"string\">sure</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">functions</span></span><br></pre></td></tr></table></figure>\n\n<p>Las pruebas de integración son las que tienen un retorno de inversión más inmediato. Si esta es tu primera aproximación al testing, te recomiendo empezar por aquí. Se trata de definir un escenario y pre programar el comportamiento del usuario. El sistema lo ejecutará y podrás contrastar el resultado con algún valor esperado.</p>\n<p>Son pruebas de caja negra que interactúan con el sistema en ejecución. Todo ello automatizado y con informes visuales interactivos o en ficheros de texto con el resultado de las pruebas.</p>\n<h2 id=\"1-1-Cypress\"><a href=\"#1-1-Cypress\" class=\"headerlink\" title=\"1.1 Cypress\"></a>1.1 Cypress</h2><p><a href=\"https://www.cypress.io/\">Cypress</a> es el equivalente a Protractor, el producto propio de Angular. La ventaja principal es que no está atado a ningún framework y por tanto lo que hagas valdrá para probar cualquier web en cualquier tecnología.</p>\n<p>Con cada aplicación generada se crea una hermana para sus pruebas <em>e2e</em>. Esa aplicación de pruebas está configurada y lista para compilar, servir y probar su aplicación objetivo. Con <a href=\"https://twitter.com/NxDevTools\">Nx</a> tenemos todo instalado, configurado y listo para ejecutarse con comandos como los siguientes que yo coloco en el <code>packcage.json</code>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e2e:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng e2e shop-e2e --watch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e2e:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng e2e warehouse-e2e --watch&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Luego se pueden lanzar desde la terminal muy cómodamente.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn e2e:shop</span><br><span class=\"line\">yarn e2e:warehouse</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-Test-e2e\"><a href=\"#1-2-Test-e2e\" class=\"headerlink\" title=\"1.2 Test e2e\"></a>1.2 Test e2e</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">the</span> <span class=\"string\">shop</span> <span class=\"string\">web</span> <span class=\"string\">app</span></span><br><span class=\"line\">  <span class=\"attr\">WHEN:</span> <span class=\"string\">user</span> <span class=\"string\">visits</span> <span class=\"string\">home</span> <span class=\"string\">page</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">display</span> <span class=\"string\">welcome</span> <span class=\"string\">message</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">display</span> <span class=\"string\">welcome</span> <span class=\"string\">message</span> <span class=\"string\">from</span> <span class=\"string\">the</span> <span class=\"string\">API</span></span><br></pre></td></tr></table></figure>\n\n<p>Tu trabajo como <em>tester</em> será definir las pruebas en la carpeta <code>/integration</code>. Por ejemplo para empezar nos ofrecen el fichero <code>app-spec.ts</code> en el que yo he especificado el comportamiento deseado por mi página. La sintaxis se entiende por si misma. He seguido el convenio <strong>GIVEN, WHEN, THEN</strong> para especificar pruebas que podrían considerarse casi de comportamiento o aceptación.</p>\n<p><code>apps\\shop-e2e\\src\\integration\\app.spec.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getGreeting &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../support/app.po&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;GIVEN: the shop web app&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">beforeEach</span>(<span class=\"function\">() =&gt;</span> cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&#x27;/&#x27;</span>));</span><br><span class=\"line\">  <span class=\"title function_\">context</span>(<span class=\"string\">&#x27;WHEN: user visits home page&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: should display welcome message&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">getGreeting</span>().<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;Hello world&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// needs the api server to run</span></span><br><span class=\"line\">    <span class=\"comment\">// yarn start:api</span></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: should display welcome message from the API&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">getGreeting</span>().<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;and Welcome to api!&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>La parte más técnica y tediosa es la que accede al <em>DOM</em> y lo mejor es tener eso a parte. En la carpeta <code>/support</code> nos sugieren que creemos utilidades para tratar con el <em>DOM</em> y de esa forma mantener los test lo más cercanos posible a un lenguaje natural de negocio. En este caso uso una aproximación libre al <a href=\"https://www.genbeta.com/desarrollo/bdd-cucumber-y-gherkin-desarrollo-dirigido-por-comportamiento\">BDD con gherkin</a> para mantener el espíritu de sencillez de un tutorial sobre tecnología Angular, no sobre testing.</p>\n<p><code>apps\\shop-e2e\\src\\support\\app.po.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">getGreeting</span> = (<span class=\"params\"></span>) =&gt; cy.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;h1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"2-Test-Unitarios-con-Jest\"><a href=\"#2-Test-Unitarios-con-Jest\" class=\"headerlink\" title=\"2. Test Unitarios con Jest\"></a>2. Test Unitarios con Jest</h1><p>Las pruebas unitarias, muy asociadas al <a href=\"https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92\">TDD</a>, son las mejores amigas del desarrollador. Pero, también son las más engorrosas para empezar. Así que aquí veremos una introducción sencilla para que nadie deje de hacerlas.</p>\n<h2 id=\"2-1-Jest\"><a href=\"#2-1-Jest\" class=\"headerlink\" title=\"2.1 Jest\"></a>2.1 Jest</h2><p><a href=\"https://jestjs.io/\">Jest</a> es un framework de testing para JavaScript muy sencillo y rápido. Puedes usarlo con cualquier otro framework. Para el caso de Angular ya viene preconfigurado si usas las extensiones Nx.</p>\n<p>Mete los siguientes scripts en el <code>package.json</code> y así tendrás a mano siempre las pruebas. Te recomiendo que desarrolles con el test unitario lanzado; es la manera más rápida de probar el código que estés tocando. Idealmente incluso con <strong>TDD</strong> el <a href=\"https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80\">test antes del código</a>.</p>\n<blockquote>\n<p>Para más información acerca de lo útil y rentable que resulta practicar <strong>TDD</strong>, te recomiendo que leas este artículo: <a href=\"https://theqalead.com/general/statistics-studies-benefits-test-driven-development/\">Statistics &amp; Studies: The Benefits Of Test Driven Development</a></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test shop --watch --verbose&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test warehouse --watch --verbose&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:api&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test api --watch --verbose&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn test:shop</span><br><span class=\"line\">yarn test:warehouse</span><br><span class=\"line\">yarn test:api</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Tests-unitarios\"><a href=\"#2-2-Tests-unitarios\" class=\"headerlink\" title=\"2.2 Tests unitarios\"></a>2.2 Tests unitarios</h2><h3 id=\"2-2-1-Componentes\"><a href=\"#2-2-1-Componentes\" class=\"headerlink\" title=\"2.2.1 Componentes\"></a>2.2.1 Componentes</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">an</span> <span class=\"string\">AppComponent</span> <span class=\"string\">declared</span> <span class=\"string\">in</span> <span class=\"string\">AppModule</span></span><br><span class=\"line\">  <span class=\"attr\">WHEN:</span> <span class=\"string\">the</span> <span class=\"string\">AppModule</span> <span class=\"string\">is</span> <span class=\"string\">compiled</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">create</span> <span class=\"string\">the</span> <span class=\"string\">component</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">have</span> <span class=\"string\">a</span> <span class=\"string\">property</span> <span class=\"string\">title</span> <span class=\"string\">with</span> <span class=\"string\">value</span> <span class=\"string\">&#x27;shop&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">render</span> <span class=\"string\">&#x27;Hello world&#x27;</span> <span class=\"string\">in</span> <span class=\"string\">a</span> <span class=\"string\">H1</span> <span class=\"string\">tag</span></span><br></pre></td></tr></table></figure>\n\n<p>En este caso queremos probar una librería de componentes. Y empezamos por el componente raíz. Esta es una prueba unitarias pero con un toque de integración parcial pues necesita de otros componentes para ejecutarse. Cuanto más arriba en la jerarquía esté el componente mayor será su necesidad de integrar a otros. Pero no pasa nada, de esta forma te aseguras de que el módulo de la librería se importa y que sus componentes se exportan correctamente.</p>\n<p>Al grano, vamos a la aplicación <em>shop</em> para  comprobar que su componente <code>AppComponent</code> funciona y (de paso) que se renderiza también el componente <code>ab-ui-greetings</code> incrustando los saludos.</p>\n<p><code>apps\\shop\\src\\app\\app.component.spec.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UiModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/ui&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">async</span>, <span class=\"title class_\">TestBed</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterTestingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router/testing&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;GIVEN: an AppComponent declared in AppModule&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: the AppModule is compiled&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">beforeEach</span>(<span class=\"title function_\">async</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">configureTestingModule</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterTestingModule</span>, <span class=\"title class_\">UiModule</span>],</span><br><span class=\"line\">        <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">compileComponents</span>();</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: should create the component&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">createComponent</span>(<span class=\"title class_\">AppComponent</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> app = fixture.<span class=\"property\">debugElement</span>.<span class=\"property\">componentInstance</span>;</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(app).<span class=\"title function_\">toBeTruthy</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">`THEN: should have a property title with value &#x27;shop&#x27;`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">createComponent</span>(<span class=\"title class_\">AppComponent</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> app = fixture.<span class=\"property\">debugElement</span>.<span class=\"property\">componentInstance</span>;</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(app.<span class=\"property\">title</span>).<span class=\"title function_\">toEqual</span>(<span class=\"string\">&#x27;shop&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">`THEN: should render &#x27;Hello world&#x27; in a H1 tag`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">createComponent</span>(<span class=\"title class_\">AppComponent</span>);</span><br><span class=\"line\">      fixture.<span class=\"title function_\">detectChanges</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> compiled = fixture.<span class=\"property\">debugElement</span>.<span class=\"property\">nativeElement</span>;</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(compiled.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;h1&#x27;</span>).<span class=\"property\">textContent</span>).<span class=\"title function_\">toContain</span>(<span class=\"string\">&#x27;Hello world&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-Services\"><a href=\"#2-2-2-Services\" class=\"headerlink\" title=\"2.2.2 Services\"></a>2.2.2 Services</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">a</span> <span class=\"string\">GreetingsService</span></span><br><span class=\"line\">  <span class=\"attr\">WHEN:</span> <span class=\"string\">the</span> <span class=\"string\">DataModule</span> <span class=\"string\">is</span> <span class=\"string\">compiled</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">be</span> <span class=\"string\">created</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">return</span> <span class=\"string\">an</span> <span class=\"string\">observable</span> <span class=\"string\">when</span> <span class=\"string\">call</span> <span class=\"string\">&#x27;getGrettings()&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">return</span> <span class=\"string\">&#x27;Welcome to api!&#x27;</span> <span class=\"string\">when</span> <span class=\"string\">call</span> <span class=\"string\">&#x27;getGrettings()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>La prueba de servicios es más sencilla que la de componentes pues no hay que tratar con la renderización del HTML; sólo funcionalidad en una clase TypeScript. Pero, siempre hay un pero, muchos de estos servicios tratarán con llamadas asíncronas. Afortunadamente está todo pensado y se resuelve con dos conceptos: la función <code>async()</code> y inyección de réplicas (<em>mocks</em>) de las dependencias.</p>\n<p><code>libs\\shared\\data\\src\\lib\\greetings\\greetings.service.spec.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// importar réplicas para testing de las dependencias del servicio</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">HttpClientTestingModule</span>,</span><br><span class=\"line\">  <span class=\"title class_\">HttpTestingController</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http/testing&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">async</span>, <span class=\"title class_\">TestBed</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">GreetingsService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./greetings.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;GIVEN: a GreetingsService&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: the DataModule is compiled&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">beforeEach</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">configureTestingModule</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">imports</span>: [<span class=\"title class_\">HttpClientTestingModule</span>]</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: should be created&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">service</span>: <span class=\"title class_\">GreetingsService</span> = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">get</span>(<span class=\"title class_\">GreetingsService</span>);</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(service).<span class=\"title function_\">toBeTruthy</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">`THEN: should return an observable when call &#x27;getGrettings()&#x27;`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">service</span>: <span class=\"title class_\">GreetingsService</span> = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">get</span>(<span class=\"title class_\">GreetingsService</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">greetings$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; = service.<span class=\"title function_\">getGrettings$</span>();</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(greetings$).<span class=\"title function_\">toBeInstanceOf</span>(<span class=\"title class_\">Observable</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ojo al async para ejectuar las llamadas asíncronas</span></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">`THEN: should return &#x27;Welcome to api!&#x27; when call &#x27;getGrettings()&#x27;`</span>, <span class=\"title function_\">async</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">service</span>: <span class=\"title class_\">GreetingsService</span> = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">get</span>(<span class=\"title class_\">GreetingsService</span>);</span><br><span class=\"line\">      service</span><br><span class=\"line\">        .<span class=\"title function_\">getGrettings$</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span></span><br><span class=\"line\">          <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Welcome to api!&#x27;</span> &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">      <span class=\"comment\">// mock del backend para no depender del servidor</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> httpMock = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">get</span>(<span class=\"title class_\">HttpTestingController</span>);</span><br><span class=\"line\">      <span class=\"comment\">// esperar a que se llame a esta ruta</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> req = httpMock.<span class=\"title function_\">expectOne</span>(<span class=\"string\">&#x27;http://localhost:3333/api&#x27;</span>);</span><br><span class=\"line\">      req.<span class=\"title function_\">flush</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Welcome to api!&#x27;</span> &#125;); <span class=\"comment\">// responder con esto</span></span><br><span class=\"line\">      httpMock.<span class=\"title function_\">verify</span>(); <span class=\"comment\">// comprobar que no hay más llamadas</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>A partir de aquí es siempre igual. Defines un respuesta esperada, le das una entrada conocida y si algo no cuadra, entonces el código no pasa la prueba y tienes una oportunidad para mejorarlo.</p>\n<p>En la prueba de servicios es fundamental que uses réplicas de sus dependencias. Es la forma de garantizar que pruebas únicamente el servicio, sin depender de nada. Esto era mucho más complejo con los componentes, pero un mandamiento con los servicios.</p>\n<hr>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>En definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones fiables y mantenibles. Y eso pasa inexcusablemente por hacer testing. <strong>Angular</strong> facilita las pruebas unitarias y de integración; especialmente con las herramientas <em>Jest</em> y  <em>Cypress</em> ya configuradas por <strong>NxDevTools</strong>.</p>\n<p>Con este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> te preparas para poder afrontar retos de tamaño industrial. Continúa aprendiendo a mejorar el rendimiento usando la <a href=\"../deteccion-del-cambio-en-Angular\">detección del cambio en Angular</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-11_test.png\" alt=\"tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\"></p>\n<p>Continuamos este <strong>tutorial de Angular Avanzado</strong> con el tema controvertido del testing. Sí, ya sé que todos deberíamos hacerlo siempre, pero también sé que no es cierto. Así que vamos a ponerle remedio eliminando excusas y facilitando las pruebas automatizadas.</p>\n<blockquote>\n<p>Por si hace falta su defensa: Las pruebas automáticas de código son la principal técnica de reducción de bugs y garantizan el buen funcionamiento durante un refactoring. Bueno para el usuario bueno para el programador.</p>\n</blockquote>\n<p>Los desarrollos que hoy en día hacemos con <strong>Angular</strong> suelen ser de tamaño medio o grande y con una esperanza de vida y mantenimiento que se mide en años. Así que cuantas más pruebas tengamos menos miedo tendremos a cambiar el código. Y la necesidad de cambio siempre estará ahí. Veremos como <em>Jest</em> y <em>Cypress</em> nos ayudan muchísimo en la tarea.</p>","more":"<p>Partiendo del <a href=\"../nx-mono-repositorios-en-Angular\">mono repositorio creado</a> usando las herramientas de <a href=\"https://nrwl.io/\">Nrwl.io&#x2F;</a> aprovecharemos las herramientas que instala y configura dos productos de última generación que facilitan la tarea. Usaremos <a href=\"https://jestjs.io/\">Jest</a> para los test unitarios y <a href=\"https://www.cypress.io/\">Cypress</a> para los de integración <em>End to End</em>. Vamos a empezar por el final.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1.-Test-de-Integraci%C3%B3n-con-Cypress\">1. Test de Integración con Cypress.</a></p>\n<p><a href=\"./#2.-Test-Unitarios-con-Jest\">2. Test Unitarios con Jest.</a></p>\n<!-- [Diagramas](./#Diagramas) -->\n\n<p><a href=\"./#Resumen\">Resumen</a></p>\n<hr>\n<h1 id=\"1-Test-de-Integracion-con-Cypress\"><a href=\"#1-Test-de-Integracion-con-Cypress\" class=\"headerlink\" title=\"1. Test de Integración con Cypress\"></a>1. Test de Integración con Cypress</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">developer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">test</span> <span class=\"string\">end</span> <span class=\"string\">to</span> <span class=\"string\">end</span> <span class=\"string\">my</span> <span class=\"string\">app</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">be</span> <span class=\"string\">sure</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">functions</span></span><br></pre></td></tr></table></figure>\n\n<p>Las pruebas de integración son las que tienen un retorno de inversión más inmediato. Si esta es tu primera aproximación al testing, te recomiendo empezar por aquí. Se trata de definir un escenario y pre programar el comportamiento del usuario. El sistema lo ejecutará y podrás contrastar el resultado con algún valor esperado.</p>\n<p>Son pruebas de caja negra que interactúan con el sistema en ejecución. Todo ello automatizado y con informes visuales interactivos o en ficheros de texto con el resultado de las pruebas.</p>\n<h2 id=\"1-1-Cypress\"><a href=\"#1-1-Cypress\" class=\"headerlink\" title=\"1.1 Cypress\"></a>1.1 Cypress</h2><p><a href=\"https://www.cypress.io/\">Cypress</a> es el equivalente a Protractor, el producto propio de Angular. La ventaja principal es que no está atado a ningún framework y por tanto lo que hagas valdrá para probar cualquier web en cualquier tecnología.</p>\n<p>Con cada aplicación generada se crea una hermana para sus pruebas <em>e2e</em>. Esa aplicación de pruebas está configurada y lista para compilar, servir y probar su aplicación objetivo. Con <a href=\"https://twitter.com/NxDevTools\">Nx</a> tenemos todo instalado, configurado y listo para ejecutarse con comandos como los siguientes que yo coloco en el <code>packcage.json</code>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e2e:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng e2e shop-e2e --watch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e2e:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng e2e warehouse-e2e --watch&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Luego se pueden lanzar desde la terminal muy cómodamente.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn e2e:shop</span><br><span class=\"line\">yarn e2e:warehouse</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-Test-e2e\"><a href=\"#1-2-Test-e2e\" class=\"headerlink\" title=\"1.2 Test e2e\"></a>1.2 Test e2e</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">the</span> <span class=\"string\">shop</span> <span class=\"string\">web</span> <span class=\"string\">app</span></span><br><span class=\"line\">  <span class=\"attr\">WHEN:</span> <span class=\"string\">user</span> <span class=\"string\">visits</span> <span class=\"string\">home</span> <span class=\"string\">page</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">display</span> <span class=\"string\">welcome</span> <span class=\"string\">message</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">display</span> <span class=\"string\">welcome</span> <span class=\"string\">message</span> <span class=\"string\">from</span> <span class=\"string\">the</span> <span class=\"string\">API</span></span><br></pre></td></tr></table></figure>\n\n<p>Tu trabajo como <em>tester</em> será definir las pruebas en la carpeta <code>/integration</code>. Por ejemplo para empezar nos ofrecen el fichero <code>app-spec.ts</code> en el que yo he especificado el comportamiento deseado por mi página. La sintaxis se entiende por si misma. He seguido el convenio <strong>GIVEN, WHEN, THEN</strong> para especificar pruebas que podrían considerarse casi de comportamiento o aceptación.</p>\n<p><code>apps\\shop-e2e\\src\\integration\\app.spec.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getGreeting &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../support/app.po&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;GIVEN: the shop web app&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">beforeEach</span>(<span class=\"function\">() =&gt;</span> cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&#x27;/&#x27;</span>));</span><br><span class=\"line\">  <span class=\"title function_\">context</span>(<span class=\"string\">&#x27;WHEN: user visits home page&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: should display welcome message&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">getGreeting</span>().<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;Hello world&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// needs the api server to run</span></span><br><span class=\"line\">    <span class=\"comment\">// yarn start:api</span></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: should display welcome message from the API&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">getGreeting</span>().<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;and Welcome to api!&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>La parte más técnica y tediosa es la que accede al <em>DOM</em> y lo mejor es tener eso a parte. En la carpeta <code>/support</code> nos sugieren que creemos utilidades para tratar con el <em>DOM</em> y de esa forma mantener los test lo más cercanos posible a un lenguaje natural de negocio. En este caso uso una aproximación libre al <a href=\"https://www.genbeta.com/desarrollo/bdd-cucumber-y-gherkin-desarrollo-dirigido-por-comportamiento\">BDD con gherkin</a> para mantener el espíritu de sencillez de un tutorial sobre tecnología Angular, no sobre testing.</p>\n<p><code>apps\\shop-e2e\\src\\support\\app.po.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">getGreeting</span> = (<span class=\"params\"></span>) =&gt; cy.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;h1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"2-Test-Unitarios-con-Jest\"><a href=\"#2-Test-Unitarios-con-Jest\" class=\"headerlink\" title=\"2. Test Unitarios con Jest\"></a>2. Test Unitarios con Jest</h1><p>Las pruebas unitarias, muy asociadas al <a href=\"https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92\">TDD</a>, son las mejores amigas del desarrollador. Pero, también son las más engorrosas para empezar. Así que aquí veremos una introducción sencilla para que nadie deje de hacerlas.</p>\n<h2 id=\"2-1-Jest\"><a href=\"#2-1-Jest\" class=\"headerlink\" title=\"2.1 Jest\"></a>2.1 Jest</h2><p><a href=\"https://jestjs.io/\">Jest</a> es un framework de testing para JavaScript muy sencillo y rápido. Puedes usarlo con cualquier otro framework. Para el caso de Angular ya viene preconfigurado si usas las extensiones Nx.</p>\n<p>Mete los siguientes scripts en el <code>package.json</code> y así tendrás a mano siempre las pruebas. Te recomiendo que desarrolles con el test unitario lanzado; es la manera más rápida de probar el código que estés tocando. Idealmente incluso con <strong>TDD</strong> el <a href=\"https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80\">test antes del código</a>.</p>\n<blockquote>\n<p>Para más información acerca de lo útil y rentable que resulta practicar <strong>TDD</strong>, te recomiendo que leas este artículo: <a href=\"https://theqalead.com/general/statistics-studies-benefits-test-driven-development/\">Statistics &amp; Studies: The Benefits Of Test Driven Development</a></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:shop&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test shop --watch --verbose&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test warehouse --watch --verbose&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test:api&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test api --watch --verbose&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn test:shop</span><br><span class=\"line\">yarn test:warehouse</span><br><span class=\"line\">yarn test:api</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Tests-unitarios\"><a href=\"#2-2-Tests-unitarios\" class=\"headerlink\" title=\"2.2 Tests unitarios\"></a>2.2 Tests unitarios</h2><h3 id=\"2-2-1-Componentes\"><a href=\"#2-2-1-Componentes\" class=\"headerlink\" title=\"2.2.1 Componentes\"></a>2.2.1 Componentes</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">an</span> <span class=\"string\">AppComponent</span> <span class=\"string\">declared</span> <span class=\"string\">in</span> <span class=\"string\">AppModule</span></span><br><span class=\"line\">  <span class=\"attr\">WHEN:</span> <span class=\"string\">the</span> <span class=\"string\">AppModule</span> <span class=\"string\">is</span> <span class=\"string\">compiled</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">create</span> <span class=\"string\">the</span> <span class=\"string\">component</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">have</span> <span class=\"string\">a</span> <span class=\"string\">property</span> <span class=\"string\">title</span> <span class=\"string\">with</span> <span class=\"string\">value</span> <span class=\"string\">&#x27;shop&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">render</span> <span class=\"string\">&#x27;Hello world&#x27;</span> <span class=\"string\">in</span> <span class=\"string\">a</span> <span class=\"string\">H1</span> <span class=\"string\">tag</span></span><br></pre></td></tr></table></figure>\n\n<p>En este caso queremos probar una librería de componentes. Y empezamos por el componente raíz. Esta es una prueba unitarias pero con un toque de integración parcial pues necesita de otros componentes para ejecutarse. Cuanto más arriba en la jerarquía esté el componente mayor será su necesidad de integrar a otros. Pero no pasa nada, de esta forma te aseguras de que el módulo de la librería se importa y que sus componentes se exportan correctamente.</p>\n<p>Al grano, vamos a la aplicación <em>shop</em> para  comprobar que su componente <code>AppComponent</code> funciona y (de paso) que se renderiza también el componente <code>ab-ui-greetings</code> incrustando los saludos.</p>\n<p><code>apps\\shop\\src\\app\\app.component.spec.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UiModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@a-boss/ui&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">async</span>, <span class=\"title class_\">TestBed</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RouterTestingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router/testing&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;GIVEN: an AppComponent declared in AppModule&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: the AppModule is compiled&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">beforeEach</span>(<span class=\"title function_\">async</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">configureTestingModule</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterTestingModule</span>, <span class=\"title class_\">UiModule</span>],</span><br><span class=\"line\">        <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">compileComponents</span>();</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: should create the component&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">createComponent</span>(<span class=\"title class_\">AppComponent</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> app = fixture.<span class=\"property\">debugElement</span>.<span class=\"property\">componentInstance</span>;</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(app).<span class=\"title function_\">toBeTruthy</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">`THEN: should have a property title with value &#x27;shop&#x27;`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">createComponent</span>(<span class=\"title class_\">AppComponent</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> app = fixture.<span class=\"property\">debugElement</span>.<span class=\"property\">componentInstance</span>;</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(app.<span class=\"property\">title</span>).<span class=\"title function_\">toEqual</span>(<span class=\"string\">&#x27;shop&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">`THEN: should render &#x27;Hello world&#x27; in a H1 tag`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">createComponent</span>(<span class=\"title class_\">AppComponent</span>);</span><br><span class=\"line\">      fixture.<span class=\"title function_\">detectChanges</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> compiled = fixture.<span class=\"property\">debugElement</span>.<span class=\"property\">nativeElement</span>;</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(compiled.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;h1&#x27;</span>).<span class=\"property\">textContent</span>).<span class=\"title function_\">toContain</span>(<span class=\"string\">&#x27;Hello world&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-Services\"><a href=\"#2-2-2-Services\" class=\"headerlink\" title=\"2.2.2 Services\"></a>2.2.2 Services</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">a</span> <span class=\"string\">GreetingsService</span></span><br><span class=\"line\">  <span class=\"attr\">WHEN:</span> <span class=\"string\">the</span> <span class=\"string\">DataModule</span> <span class=\"string\">is</span> <span class=\"string\">compiled</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">be</span> <span class=\"string\">created</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">return</span> <span class=\"string\">an</span> <span class=\"string\">observable</span> <span class=\"string\">when</span> <span class=\"string\">call</span> <span class=\"string\">&#x27;getGrettings()&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">THEN:</span> <span class=\"string\">should</span> <span class=\"string\">return</span> <span class=\"string\">&#x27;Welcome to api!&#x27;</span> <span class=\"string\">when</span> <span class=\"string\">call</span> <span class=\"string\">&#x27;getGrettings()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>La prueba de servicios es más sencilla que la de componentes pues no hay que tratar con la renderización del HTML; sólo funcionalidad en una clase TypeScript. Pero, siempre hay un pero, muchos de estos servicios tratarán con llamadas asíncronas. Afortunadamente está todo pensado y se resuelve con dos conceptos: la función <code>async()</code> y inyección de réplicas (<em>mocks</em>) de las dependencias.</p>\n<p><code>libs\\shared\\data\\src\\lib\\greetings\\greetings.service.spec.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// importar réplicas para testing de las dependencias del servicio</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">HttpClientTestingModule</span>,</span><br><span class=\"line\">  <span class=\"title class_\">HttpTestingController</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http/testing&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">async</span>, <span class=\"title class_\">TestBed</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">GreetingsService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./greetings.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;GIVEN: a GreetingsService&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: the DataModule is compiled&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">beforeEach</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">configureTestingModule</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">imports</span>: [<span class=\"title class_\">HttpClientTestingModule</span>]</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: should be created&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">service</span>: <span class=\"title class_\">GreetingsService</span> = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">get</span>(<span class=\"title class_\">GreetingsService</span>);</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(service).<span class=\"title function_\">toBeTruthy</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">`THEN: should return an observable when call &#x27;getGrettings()&#x27;`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">service</span>: <span class=\"title class_\">GreetingsService</span> = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">get</span>(<span class=\"title class_\">GreetingsService</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">greetings$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; = service.<span class=\"title function_\">getGrettings$</span>();</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(greetings$).<span class=\"title function_\">toBeInstanceOf</span>(<span class=\"title class_\">Observable</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ojo al async para ejectuar las llamadas asíncronas</span></span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">`THEN: should return &#x27;Welcome to api!&#x27; when call &#x27;getGrettings()&#x27;`</span>, <span class=\"title function_\">async</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">service</span>: <span class=\"title class_\">GreetingsService</span> = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">get</span>(<span class=\"title class_\">GreetingsService</span>);</span><br><span class=\"line\">      service</span><br><span class=\"line\">        .<span class=\"title function_\">getGrettings$</span>()</span><br><span class=\"line\">        .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span></span><br><span class=\"line\">          <span class=\"title function_\">expect</span>(result).<span class=\"title function_\">toEqual</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Welcome to api!&#x27;</span> &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">      <span class=\"comment\">// mock del backend para no depender del servidor</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> httpMock = <span class=\"title class_\">TestBed</span>.<span class=\"title function_\">get</span>(<span class=\"title class_\">HttpTestingController</span>);</span><br><span class=\"line\">      <span class=\"comment\">// esperar a que se llame a esta ruta</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> req = httpMock.<span class=\"title function_\">expectOne</span>(<span class=\"string\">&#x27;http://localhost:3333/api&#x27;</span>);</span><br><span class=\"line\">      req.<span class=\"title function_\">flush</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Welcome to api!&#x27;</span> &#125;); <span class=\"comment\">// responder con esto</span></span><br><span class=\"line\">      httpMock.<span class=\"title function_\">verify</span>(); <span class=\"comment\">// comprobar que no hay más llamadas</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>A partir de aquí es siempre igual. Defines un respuesta esperada, le das una entrada conocida y si algo no cuadra, entonces el código no pasa la prueba y tienes una oportunidad para mejorarlo.</p>\n<p>En la prueba de servicios es fundamental que uses réplicas de sus dependencias. Es la forma de garantizar que pruebas únicamente el servicio, sin depender de nada. Esto era mucho más complejo con los componentes, pero un mandamiento con los servicios.</p>\n<hr>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>En definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones fiables y mantenibles. Y eso pasa inexcusablemente por hacer testing. <strong>Angular</strong> facilita las pruebas unitarias y de integración; especialmente con las herramientas <em>Jest</em> y  <em>Cypress</em> ya configuradas por <strong>NxDevTools</strong>.</p>\n<p>Con este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> te preparas para poder afrontar retos de tamaño industrial. Continúa aprendiendo a mejorar el rendimiento usando la <a href=\"../deteccion-del-cambio-en-Angular\">detección del cambio en Angular</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Componentes dinámicos, directivas y pipes con Angular","date":"2019-09-13T12:27:09.000Z","thumbnail":"/css/images/angular-13_template.png","_content":"\n![componentes-dinamicos-directivas-y-pipes-con-Angular](/images/tutorial-angular-13_template.png)\n\nEl sistema de componentes de Angular te permite reutilizar pequeñas unidades para montar grandes y complejas interfaces. Eso es bueno porque la capa de presentación se _come_ la mayor parte del tiempo de desarrollo. Pero podemos ir más allá.\n\n> Podemos crear componentes con estructura fija y contenido dinámico. Podemos dar funcionalidad extra mediante directivas y podemos crear pipes para transformar la presentación.\n\nY todo esto de una forma sencilla y familiar usando el CLI. No hay excusa para no reutilizar código en la capa de presentación. _Don't repeat Yourself!_.\n\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Detección del cambio en Angular](../deteccion-del-cambio-en-Angular/). Al finalizar tendrás una aplicación que muestra información sobre productos de manera flexible y al gusto del programador.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n\n## Tabla de Contenido:\n\n[1. Plantillas de contenido dinámico.](./#1-Plantillas-de-contenido-dinamico)\n\n[2. Atributos custom con Directivas.](./#2-Atributos-custom-con-Directivas)\n\n[3. Funciones de transformación con Pipes.](./#3-Funciones-de-transformacion-con-Pipes)\n\n---\n\n# 1 Plantillas de contenido dinámico\n\n```yaml\nAs a: customer,\n  I want: to see a product card with price in euros\n  so that: i can decide to purchase it or not\n\nAs a: seller,\n  I want: to see a product card with stock\n  so that: I can ask for more or not\n```\n\nEn muchas ocasiones tenemos que presentar la misma información pero con ligeros cambios. Por ejemplo una vista a veces con unos botones a veces con un texto.\n\nEn otras ocasiones mostramos información muy diferente pero con la misma estructura. Por ejemplo páginas de búsqueda; pueden ser de productos, clientes, tareas... pero siempre con la parte de filtro y la del listado.\n\nAlgunas veces se puede resolver con un `*ngIf`. Pero hay ocasiones que donde la técnica del `ng-content` te puede ser mucho más útil. Como ejemplo voy a crear un componente base para mostrar una ficha de producto. Después usaré esa plantilla para _rellenarla_ según las especificaciones de cada pantalla.\n\n---\n\n## 1.1 Un componente común\n\n```bash\nng g c product-template --project=products --module=products.module.ts --export\n```\n\n\n> La visión del comprador y del vendedor es parecida. Mantenemos estructura, inyectamos contenido.\n\n```html\n<article style=\"margin: 5px; padding: 5px; border: 2px; border-style: solid;\">\n  <header>\n    <h2>\n      {{ product.description }}\n    </h2>\n  </header>\n  <main>\n    <ng-content select=\"main\"></ng-content>\n  </main>\n  <footer style=\"margin-top: 5px\">\n    <ng-content select=\".actions\"></ng-content>\n  </footer>\n</article>\n```\n\nLa directiva `ngContent` permite crear *slots* para incrustar contenido a voluntad del consumidor. Cada *slot* se identifica mediante un `select=\"css-selector\"`.\n\nLos selectores pueden referirse a elementos _html_, clases _css_ o identificadores. En la práctica es como dejar unos sitios en los que inyectar contenido. Y para referirse a esos sitios les damos un nombre selector.\n\n---\n\n## 1.2 Implementaciones distintas\n\nA partir de aquí podría haber múltiples componentes que usasen la misma plantilla. Voy a mostrar uno de ejemplo.\n\n```bash\nng g c catalog/product --project=shop\n```\nLa etiqueta `<main>` y el atributo `class=\"actions\"` son usados para seleccionar los slots en los que serán inyectados. Por lo demás el componente `ab-products-product-template` se comporta como cualquier otro pudiendo recibir argumentos...\n\n`apps\\shop\\src\\app\\catalog\\catalog.component.html`\n\n```html\n<ab-products-product-template [product]=\"product\">\n  <main>\n    <div>\n      {{ product.brand }} - {{ product.category }}\n    </div>\n    <div>\n      Price: {{ product.price }}\n    </div>\n  </main>\n  <nav class=\"actions\">\n    <button (clic)=\"buy.next()\"\n            style=\"background-color:coral; padding: 5px\"><strong>Buy me!</strong></button>\n  </nav>\n</ab-products-product-template>\n```\n\nLa idea es que bajo **una misma estructura puedas crear distintas implementaciones** y así mantener una coherencia visual o simplemente no repetir código.\n\n# 2 Atributos custom con Directivas\n\n```yaml\nAs a: seller,\n  I want: to see a green mark on products with stock\n  so that: I know I don't do need to refill\n\nAs a: seller,\n  I want: to see a red mark on products with out stock\n  so that: I know I need to refill\n```\n## 2.1 Generación de directivas\n\nPrimero la definición. Si los componentes nos permite crear nuevas etiquetas en _html_, las directivas nos permiten crear atributos. Se usan para dar **funcionalidad extra a los elementos** estándar o no de las aplicaciones.\n\nLa forma de crearlas es mediante el CLI. En este caso con el comando `directive`.\n\n```terminal\nng g directive out-of-stock --project=products --export\n```\n\nEL resultado es una clase con su propio decorador `@Directive` en el que asignamos su selector. Es decir el nombre del atributo que podremos usar. El convenio es utilizar el prefijo y el propio nombre de directiva en _camel case_.\n\n```typescript\n@Directive({\n  selector: '[abProductsOutOfStock]'\n})\nexport class OutOfStockDirective {\n  private minimalStock = 10;\n\n  @Input()\n  set abProductsOutOfStock(stock: number) {\n    const color = stock <= this.minimalStock ? 'MistyRose' : 'Aquamarine';\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n  constructor(private el: ElementRef) {}\n}\n```\n\nEn la implementación ya puedes hacer lo que te parezca. Es muy habitual que las directivas se usen para manipular el elemento nativo al que se aplican. Por eso casi siempre solicitarás la inyección de un puntero a dicho elemento: el de la dependencia de tipo `ElementRef` que viene en el _core_ de Angular.\n\nA partir de ahí ya puedes hacer lo necesario manipulando el _html_ tanto en el constructor como en respuesta a cambios o durante la entrada de atributos.\n\n---\n\n## 2.2 Consumo de directivas\n\nUsarlas es todavía más sencillo. Una vez exportadas e importadas como cualquier otro artificio Angular, ya puedes asignarlas como atributo a las etiquetas de tus plantillas.\n\n`apps\\shop\\src\\app\\catalog\\product\\product.component.html`\n\n```html\n  <div [abProductsOutOfStock]=\"product.stock\">\n    Stock: {{ product.stock }}\n  </div>\n```\n\nAlgunas, como este caso, reciben valores. Otras simplemente actúan una vez asignadas. De nuevo la idea es que **todas las manipulaciones de bajo nivel se _escondan_ en las directivas** y que los controladores de nuestros componentes queden limpios y desacoplados de la capa de presentación.\n\n# 3 Funciones de transformación con Pipes\n\n```yaml\nAs a: customer,\n  I want: to see a product price also in dollars\n  so that: I can compare prices\nAs a: customer,\n  I want: to see a product price also in pounds\n  so that: I can compare prices\n```\n\nEn este caso lo que queremos es transformar un dato de nuestro modelo antes de presentarlo en pantalla. Para ello seguro que has usado algún `pipe` de Angular desde el primer día que empezaste a programar.\n\n## 3.1 Generación de pipes\n\nPero ahora vamos a generar nuestros propios _pipes_. Una vez más usaremos el CLI con su comando específico para este caso:\n\n```terminal\nng g pipe exRate --project=products --export\n```\n\nAl igual que los componentes y que las directivas, los _pipes_ tienen un nombre como clase y un nombre en su decorador para ser usados desde fuera.\n\n```typescript\n@Pipe({\n  name: 'exRate'\n})\nexport class ExRatePipe implements PipeTransform {\n  private readonly euroDollars = 1.13;\n  private readonly ratesApi = 'https://api.exchangeratesapi.io/latest?symbols=';\n\n  constructor(private httpClient: HttpClient) {}\n\n  public transform(euros: number, symbol: string): number | Observable<number> {\n    if (!symbol) {\n      return euros * this.euroDollars;\n    } else {\n      return this.getOnlineRates$(symbol).pipe(map(rate => euros * rate));\n    }\n  }\n}\n```\nLa clase tienen que implementar la interfaz `PipeTransform` que obliga a tener un método público `transform(value: any):any`. En este método definimos nuestra función de transformación.\n\nLa única salvedad es incidir en que sea lo más ligera posible pues se ejecuta en cada uso y repintado. Por ejemplo yo aquí necesito un servicio asíncrono, y para no penalizar demasiado el rendimiento, le aplico el operador `shareReplay` para que actúe como una caché.\n\n```typescript\nprivate getOnlineRates$(symbol: string) {\n  const ratesUrl = this.ratesApi + symbol;\n  return this.httpClient.get<any>(ratesUrl).pipe(\n    shareReplay(1),\n    refCount(),\n    map(resp => resp.rates[symbol])\n  );\n}\n```\n\n## 3.2 Consumo de pipes\n\nLa parte del consumo es la más simple. Se trata de invocar a la transformación pasándole los atributos necesarios y volver a transformar o utilizar directamente el resultado.\n\n`apps\\shop\\src\\app\\catalog\\product\\product.component.html`\n\n```html\n  <div>\n    ${{ product.price | exRate | number:'1.0-0'}}\n    {{ product.price | exRate:'GBP' | async | number:'1.0-0'}} £\n  </div>\n```\n\nY con esto ya tenemos tres nuevas maneras de reutilizar código y dar nuevas capacidades a la parte de presentación. Pero en este tutorial de formación [avanzada en Angular](../tag/Avanzado/) volvemos de nuevo a las profundidades del modelo y la gestión de datos empezando con el [Flujo reactivo unidireccional con Angular y RxJs](../flujo-reactivo-unidireccional-con-Angular-y-RxJs). Todos esos detalles se tratan en el [curso avanzado online](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-13-Componentes-dinamicos-directivas-y-pipes-con-Angular.md","raw":"---\ntitle: Componentes dinámicos, directivas y pipes con Angular\npermalink: componentes-dinamicos-directivas-y-pipes-con-Angular\ndate: 2019-09-13 14:27:09\ntags:\n- Angular\n- Angular8\n- Template\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-13_template.png\n---\n\n![componentes-dinamicos-directivas-y-pipes-con-Angular](/images/tutorial-angular-13_template.png)\n\nEl sistema de componentes de Angular te permite reutilizar pequeñas unidades para montar grandes y complejas interfaces. Eso es bueno porque la capa de presentación se _come_ la mayor parte del tiempo de desarrollo. Pero podemos ir más allá.\n\n> Podemos crear componentes con estructura fija y contenido dinámico. Podemos dar funcionalidad extra mediante directivas y podemos crear pipes para transformar la presentación.\n\nY todo esto de una forma sencilla y familiar usando el CLI. No hay excusa para no reutilizar código en la capa de presentación. _Don't repeat Yourself!_.\n\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Detección del cambio en Angular](../deteccion-del-cambio-en-Angular/). Al finalizar tendrás una aplicación que muestra información sobre productos de manera flexible y al gusto del programador.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n\n## Tabla de Contenido:\n\n[1. Plantillas de contenido dinámico.](./#1-Plantillas-de-contenido-dinamico)\n\n[2. Atributos custom con Directivas.](./#2-Atributos-custom-con-Directivas)\n\n[3. Funciones de transformación con Pipes.](./#3-Funciones-de-transformacion-con-Pipes)\n\n---\n\n# 1 Plantillas de contenido dinámico\n\n```yaml\nAs a: customer,\n  I want: to see a product card with price in euros\n  so that: i can decide to purchase it or not\n\nAs a: seller,\n  I want: to see a product card with stock\n  so that: I can ask for more or not\n```\n\nEn muchas ocasiones tenemos que presentar la misma información pero con ligeros cambios. Por ejemplo una vista a veces con unos botones a veces con un texto.\n\nEn otras ocasiones mostramos información muy diferente pero con la misma estructura. Por ejemplo páginas de búsqueda; pueden ser de productos, clientes, tareas... pero siempre con la parte de filtro y la del listado.\n\nAlgunas veces se puede resolver con un `*ngIf`. Pero hay ocasiones que donde la técnica del `ng-content` te puede ser mucho más útil. Como ejemplo voy a crear un componente base para mostrar una ficha de producto. Después usaré esa plantilla para _rellenarla_ según las especificaciones de cada pantalla.\n\n---\n\n## 1.1 Un componente común\n\n```bash\nng g c product-template --project=products --module=products.module.ts --export\n```\n\n\n> La visión del comprador y del vendedor es parecida. Mantenemos estructura, inyectamos contenido.\n\n```html\n<article style=\"margin: 5px; padding: 5px; border: 2px; border-style: solid;\">\n  <header>\n    <h2>\n      {{ product.description }}\n    </h2>\n  </header>\n  <main>\n    <ng-content select=\"main\"></ng-content>\n  </main>\n  <footer style=\"margin-top: 5px\">\n    <ng-content select=\".actions\"></ng-content>\n  </footer>\n</article>\n```\n\nLa directiva `ngContent` permite crear *slots* para incrustar contenido a voluntad del consumidor. Cada *slot* se identifica mediante un `select=\"css-selector\"`.\n\nLos selectores pueden referirse a elementos _html_, clases _css_ o identificadores. En la práctica es como dejar unos sitios en los que inyectar contenido. Y para referirse a esos sitios les damos un nombre selector.\n\n---\n\n## 1.2 Implementaciones distintas\n\nA partir de aquí podría haber múltiples componentes que usasen la misma plantilla. Voy a mostrar uno de ejemplo.\n\n```bash\nng g c catalog/product --project=shop\n```\nLa etiqueta `<main>` y el atributo `class=\"actions\"` son usados para seleccionar los slots en los que serán inyectados. Por lo demás el componente `ab-products-product-template` se comporta como cualquier otro pudiendo recibir argumentos...\n\n`apps\\shop\\src\\app\\catalog\\catalog.component.html`\n\n```html\n<ab-products-product-template [product]=\"product\">\n  <main>\n    <div>\n      {{ product.brand }} - {{ product.category }}\n    </div>\n    <div>\n      Price: {{ product.price }}\n    </div>\n  </main>\n  <nav class=\"actions\">\n    <button (clic)=\"buy.next()\"\n            style=\"background-color:coral; padding: 5px\"><strong>Buy me!</strong></button>\n  </nav>\n</ab-products-product-template>\n```\n\nLa idea es que bajo **una misma estructura puedas crear distintas implementaciones** y así mantener una coherencia visual o simplemente no repetir código.\n\n# 2 Atributos custom con Directivas\n\n```yaml\nAs a: seller,\n  I want: to see a green mark on products with stock\n  so that: I know I don't do need to refill\n\nAs a: seller,\n  I want: to see a red mark on products with out stock\n  so that: I know I need to refill\n```\n## 2.1 Generación de directivas\n\nPrimero la definición. Si los componentes nos permite crear nuevas etiquetas en _html_, las directivas nos permiten crear atributos. Se usan para dar **funcionalidad extra a los elementos** estándar o no de las aplicaciones.\n\nLa forma de crearlas es mediante el CLI. En este caso con el comando `directive`.\n\n```terminal\nng g directive out-of-stock --project=products --export\n```\n\nEL resultado es una clase con su propio decorador `@Directive` en el que asignamos su selector. Es decir el nombre del atributo que podremos usar. El convenio es utilizar el prefijo y el propio nombre de directiva en _camel case_.\n\n```typescript\n@Directive({\n  selector: '[abProductsOutOfStock]'\n})\nexport class OutOfStockDirective {\n  private minimalStock = 10;\n\n  @Input()\n  set abProductsOutOfStock(stock: number) {\n    const color = stock <= this.minimalStock ? 'MistyRose' : 'Aquamarine';\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n  constructor(private el: ElementRef) {}\n}\n```\n\nEn la implementación ya puedes hacer lo que te parezca. Es muy habitual que las directivas se usen para manipular el elemento nativo al que se aplican. Por eso casi siempre solicitarás la inyección de un puntero a dicho elemento: el de la dependencia de tipo `ElementRef` que viene en el _core_ de Angular.\n\nA partir de ahí ya puedes hacer lo necesario manipulando el _html_ tanto en el constructor como en respuesta a cambios o durante la entrada de atributos.\n\n---\n\n## 2.2 Consumo de directivas\n\nUsarlas es todavía más sencillo. Una vez exportadas e importadas como cualquier otro artificio Angular, ya puedes asignarlas como atributo a las etiquetas de tus plantillas.\n\n`apps\\shop\\src\\app\\catalog\\product\\product.component.html`\n\n```html\n  <div [abProductsOutOfStock]=\"product.stock\">\n    Stock: {{ product.stock }}\n  </div>\n```\n\nAlgunas, como este caso, reciben valores. Otras simplemente actúan una vez asignadas. De nuevo la idea es que **todas las manipulaciones de bajo nivel se _escondan_ en las directivas** y que los controladores de nuestros componentes queden limpios y desacoplados de la capa de presentación.\n\n# 3 Funciones de transformación con Pipes\n\n```yaml\nAs a: customer,\n  I want: to see a product price also in dollars\n  so that: I can compare prices\nAs a: customer,\n  I want: to see a product price also in pounds\n  so that: I can compare prices\n```\n\nEn este caso lo que queremos es transformar un dato de nuestro modelo antes de presentarlo en pantalla. Para ello seguro que has usado algún `pipe` de Angular desde el primer día que empezaste a programar.\n\n## 3.1 Generación de pipes\n\nPero ahora vamos a generar nuestros propios _pipes_. Una vez más usaremos el CLI con su comando específico para este caso:\n\n```terminal\nng g pipe exRate --project=products --export\n```\n\nAl igual que los componentes y que las directivas, los _pipes_ tienen un nombre como clase y un nombre en su decorador para ser usados desde fuera.\n\n```typescript\n@Pipe({\n  name: 'exRate'\n})\nexport class ExRatePipe implements PipeTransform {\n  private readonly euroDollars = 1.13;\n  private readonly ratesApi = 'https://api.exchangeratesapi.io/latest?symbols=';\n\n  constructor(private httpClient: HttpClient) {}\n\n  public transform(euros: number, symbol: string): number | Observable<number> {\n    if (!symbol) {\n      return euros * this.euroDollars;\n    } else {\n      return this.getOnlineRates$(symbol).pipe(map(rate => euros * rate));\n    }\n  }\n}\n```\nLa clase tienen que implementar la interfaz `PipeTransform` que obliga a tener un método público `transform(value: any):any`. En este método definimos nuestra función de transformación.\n\nLa única salvedad es incidir en que sea lo más ligera posible pues se ejecuta en cada uso y repintado. Por ejemplo yo aquí necesito un servicio asíncrono, y para no penalizar demasiado el rendimiento, le aplico el operador `shareReplay` para que actúe como una caché.\n\n```typescript\nprivate getOnlineRates$(symbol: string) {\n  const ratesUrl = this.ratesApi + symbol;\n  return this.httpClient.get<any>(ratesUrl).pipe(\n    shareReplay(1),\n    refCount(),\n    map(resp => resp.rates[symbol])\n  );\n}\n```\n\n## 3.2 Consumo de pipes\n\nLa parte del consumo es la más simple. Se trata de invocar a la transformación pasándole los atributos necesarios y volver a transformar o utilizar directamente el resultado.\n\n`apps\\shop\\src\\app\\catalog\\product\\product.component.html`\n\n```html\n  <div>\n    ${{ product.price | exRate | number:'1.0-0'}}\n    {{ product.price | exRate:'GBP' | async | number:'1.0-0'}} £\n  </div>\n```\n\nY con esto ya tenemos tres nuevas maneras de reutilizar código y dar nuevas capacidades a la parte de presentación. Pero en este tutorial de formación [avanzada en Angular](../tag/Avanzado/) volvemos de nuevo a las profundidades del modelo y la gestión de datos empezando con el [Flujo reactivo unidireccional con Angular y RxJs](../flujo-reactivo-unidireccional-con-Angular-y-RxJs). Todos esos detalles se tratan en el [curso avanzado online](https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-13-Componentes-dinamicos-directivas-y-pipes-con-Angular","published":1,"updated":"2023-07-02T10:25:58.474Z","__permalink":"componentes-dinamicos-directivas-y-pipes-con-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fb000qe0968whx836v","content":"<p><img src=\"/images/tutorial-angular-13_template.png\" alt=\"componentes-dinamicos-directivas-y-pipes-con-Angular\"></p>\n<p>El sistema de componentes de Angular te permite reutilizar pequeñas unidades para montar grandes y complejas interfaces. Eso es bueno porque la capa de presentación se <em>come</em> la mayor parte del tiempo de desarrollo. Pero podemos ir más allá.</p>\n<blockquote>\n<p>Podemos crear componentes con estructura fija y contenido dinámico. Podemos dar funcionalidad extra mediante directivas y podemos crear pipes para transformar la presentación.</p>\n</blockquote>\n<p>Y todo esto de una forma sencilla y familiar usando el CLI. No hay excusa para no reutilizar código en la capa de presentación. <em>Don’t repeat Yourself!</em>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../deteccion-del-cambio-en-Angular/\">Detección del cambio en Angular</a>. Al finalizar tendrás una aplicación que muestra información sobre productos de manera flexible y al gusto del programador.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Plantillas-de-contenido-dinamico\">1. Plantillas de contenido dinámico.</a></p>\n<p><a href=\"./#2-Atributos-custom-con-Directivas\">2. Atributos custom con Directivas.</a></p>\n<p><a href=\"./#3-Funciones-de-transformacion-con-Pipes\">3. Funciones de transformación con Pipes.</a></p>\n<hr>\n<h1 id=\"1-Plantillas-de-contenido-dinamico\"><a href=\"#1-Plantillas-de-contenido-dinamico\" class=\"headerlink\" title=\"1 Plantillas de contenido dinámico\"></a>1 Plantillas de contenido dinámico</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">card</span> <span class=\"string\">with</span> <span class=\"string\">price</span> <span class=\"string\">in</span> <span class=\"string\">euros</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">i</span> <span class=\"string\">can</span> <span class=\"string\">decide</span> <span class=\"string\">to</span> <span class=\"string\">purchase</span> <span class=\"string\">it</span> <span class=\"string\">or</span> <span class=\"string\">not</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">card</span> <span class=\"string\">with</span> <span class=\"string\">stock</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">ask</span> <span class=\"string\">for</span> <span class=\"string\">more</span> <span class=\"string\">or</span> <span class=\"string\">not</span></span><br></pre></td></tr></table></figure>\n\n<p>En muchas ocasiones tenemos que presentar la misma información pero con ligeros cambios. Por ejemplo una vista a veces con unos botones a veces con un texto.</p>\n<p>En otras ocasiones mostramos información muy diferente pero con la misma estructura. Por ejemplo páginas de búsqueda; pueden ser de productos, clientes, tareas… pero siempre con la parte de filtro y la del listado.</p>\n<p>Algunas veces se puede resolver con un <code>*ngIf</code>. Pero hay ocasiones que donde la técnica del <code>ng-content</code> te puede ser mucho más útil. Como ejemplo voy a crear un componente base para mostrar una ficha de producto. Después usaré esa plantilla para <em>rellenarla</em> según las especificaciones de cada pantalla.</p>\n<hr>\n<h2 id=\"1-1-Un-componente-comun\"><a href=\"#1-1-Un-componente-comun\" class=\"headerlink\" title=\"1.1 Un componente común\"></a>1.1 Un componente común</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c product-template --project=products --module=products.module.ts --<span class=\"built_in\">export</span></span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>La visión del comprador y del vendedor es parecida. Mantenemos estructura, inyectamos contenido.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin: 5px; padding: 5px; border: 2px; border-style: solid;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; product.description &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-top: 5px&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;.actions&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>La directiva <code>ngContent</code> permite crear <em>slots</em> para incrustar contenido a voluntad del consumidor. Cada <em>slot</em> se identifica mediante un <code>select=&quot;css-selector&quot;</code>.</p>\n<p>Los selectores pueden referirse a elementos <em>html</em>, clases <em>css</em> o identificadores. En la práctica es como dejar unos sitios en los que inyectar contenido. Y para referirse a esos sitios les damos un nombre selector.</p>\n<hr>\n<h2 id=\"1-2-Implementaciones-distintas\"><a href=\"#1-2-Implementaciones-distintas\" class=\"headerlink\" title=\"1.2 Implementaciones distintas\"></a>1.2 Implementaciones distintas</h2><p>A partir de aquí podría haber múltiples componentes que usasen la misma plantilla. Voy a mostrar uno de ejemplo.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c catalog/product --project=shop</span><br></pre></td></tr></table></figure>\n<p>La etiqueta <code>&lt;main&gt;</code> y el atributo <code>class=&quot;actions&quot;</code> son usados para seleccionar los slots en los que serán inyectados. Por lo demás el componente <code>ab-products-product-template</code> se comporta como cualquier otro pudiendo recibir argumentos…</p>\n<p><code>apps\\shop\\src\\app\\catalog\\catalog.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-products-product-template</span> [<span class=\"attr\">product</span>]=<span class=\"string\">&quot;product&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; product.brand &#125;&#125; - &#123;&#123; product.category &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      Price: &#123;&#123; product.price &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;actions&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">clic</span>)=<span class=\"string\">&quot;buy.next()&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:coral; padding: 5px&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>Buy me!<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-products-product-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>La idea es que bajo <strong>una misma estructura puedas crear distintas implementaciones</strong> y así mantener una coherencia visual o simplemente no repetir código.</p>\n<h1 id=\"2-Atributos-custom-con-Directivas\"><a href=\"#2-Atributos-custom-con-Directivas\" class=\"headerlink\" title=\"2 Atributos custom con Directivas\"></a>2 Atributos custom con Directivas</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">green</span> <span class=\"string\">mark</span> <span class=\"string\">on</span> <span class=\"string\">products</span> <span class=\"string\">with</span> <span class=\"string\">stock</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">don&#x27;t</span> <span class=\"string\">do</span> <span class=\"string\">need</span> <span class=\"string\">to</span> <span class=\"string\">refill</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">red</span> <span class=\"string\">mark</span> <span class=\"string\">on</span> <span class=\"string\">products</span> <span class=\"string\">with</span> <span class=\"string\">out</span> <span class=\"string\">stock</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">need</span> <span class=\"string\">to</span> <span class=\"string\">refill</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-Generacion-de-directivas\"><a href=\"#2-1-Generacion-de-directivas\" class=\"headerlink\" title=\"2.1 Generación de directivas\"></a>2.1 Generación de directivas</h2><p>Primero la definición. Si los componentes nos permite crear nuevas etiquetas en <em>html</em>, las directivas nos permiten crear atributos. Se usan para dar <strong>funcionalidad extra a los elementos</strong> estándar o no de las aplicaciones.</p>\n<p>La forma de crearlas es mediante el CLI. En este caso con el comando <code>directive</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g directive out-of-stock --project=products --export</span><br></pre></td></tr></table></figure>\n\n<p>EL resultado es una clase con su propio decorador <code>@Directive</code> en el que asignamos su selector. Es decir el nombre del atributo que podremos usar. El convenio es utilizar el prefijo y el propio nombre de directiva en <em>camel case</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[abProductsOutOfStock]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OutOfStockDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> minimalStock = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>()</span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">abProductsOutOfStock</span>(<span class=\"params\">stock: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> color = stock &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">minimalStock</span> ? <span class=\"string\">&#x27;MistyRose&#x27;</span> : <span class=\"string\">&#x27;Aquamarine&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> el: ElementRef</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>En la implementación ya puedes hacer lo que te parezca. Es muy habitual que las directivas se usen para manipular el elemento nativo al que se aplican. Por eso casi siempre solicitarás la inyección de un puntero a dicho elemento: el de la dependencia de tipo <code>ElementRef</code> que viene en el <em>core</em> de Angular.</p>\n<p>A partir de ahí ya puedes hacer lo necesario manipulando el <em>html</em> tanto en el constructor como en respuesta a cambios o durante la entrada de atributos.</p>\n<hr>\n<h2 id=\"2-2-Consumo-de-directivas\"><a href=\"#2-2-Consumo-de-directivas\" class=\"headerlink\" title=\"2.2 Consumo de directivas\"></a>2.2 Consumo de directivas</h2><p>Usarlas es todavía más sencillo. Una vez exportadas e importadas como cualquier otro artificio Angular, ya puedes asignarlas como atributo a las etiquetas de tus plantillas.</p>\n<p><code>apps\\shop\\src\\app\\catalog\\product\\product.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">abProductsOutOfStock</span>]=<span class=\"string\">&quot;product.stock&quot;</span>&gt;</span></span><br><span class=\"line\">  Stock: &#123;&#123; product.stock &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Algunas, como este caso, reciben valores. Otras simplemente actúan una vez asignadas. De nuevo la idea es que <strong>todas las manipulaciones de bajo nivel se <em>escondan</em> en las directivas</strong> y que los controladores de nuestros componentes queden limpios y desacoplados de la capa de presentación.</p>\n<h1 id=\"3-Funciones-de-transformacion-con-Pipes\"><a href=\"#3-Funciones-de-transformacion-con-Pipes\" class=\"headerlink\" title=\"3 Funciones de transformación con Pipes\"></a>3 Funciones de transformación con Pipes</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">price</span> <span class=\"string\">also</span> <span class=\"string\">in</span> <span class=\"string\">dollars</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">compare</span> <span class=\"string\">prices</span></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">price</span> <span class=\"string\">also</span> <span class=\"string\">in</span> <span class=\"string\">pounds</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">compare</span> <span class=\"string\">prices</span></span><br></pre></td></tr></table></figure>\n\n<p>En este caso lo que queremos es transformar un dato de nuestro modelo antes de presentarlo en pantalla. Para ello seguro que has usado algún <code>pipe</code> de Angular desde el primer día que empezaste a programar.</p>\n<h2 id=\"3-1-Generacion-de-pipes\"><a href=\"#3-1-Generacion-de-pipes\" class=\"headerlink\" title=\"3.1 Generación de pipes\"></a>3.1 Generación de pipes</h2><p>Pero ahora vamos a generar nuestros propios <em>pipes</em>. Una vez más usaremos el CLI con su comando específico para este caso:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g pipe exRate --project=products --export</span><br></pre></td></tr></table></figure>\n\n<p>Al igual que los componentes y que las directivas, los <em>pipes</em> tienen un nombre como clase y un nombre en su decorador para ser usados desde fuera.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;exRate&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExRatePipe</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PipeTransform</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> euroDollars = <span class=\"number\">1.13</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ratesApi = <span class=\"string\">&#x27;https://api.exchangeratesapi.io/latest?symbols=&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">transform</span>(<span class=\"attr\">euros</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">symbol</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">number</span> | <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">number</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">symbol</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> euros * <span class=\"variable language_\">this</span>.<span class=\"property\">euroDollars</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getOnlineRates$</span>(<span class=\"built_in\">symbol</span>).<span class=\"title function_\">pipe</span>(<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">rate</span> =&gt;</span> euros * rate));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>La clase tienen que implementar la interfaz <code>PipeTransform</code> que obliga a tener un método público <code>transform(value: any):any</code>. En este método definimos nuestra función de transformación.</p>\n<p>La única salvedad es incidir en que sea lo más ligera posible pues se ejecuta en cada uso y repintado. Por ejemplo yo aquí necesito un servicio asíncrono, y para no penalizar demasiado el rendimiento, le aplico el operador <code>shareReplay</code> para que actúe como una caché.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">getOnlineRates$</span>(<span class=\"attr\">symbol</span>: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ratesUrl = <span class=\"variable language_\">this</span>.<span class=\"property\">ratesApi</span> + <span class=\"built_in\">symbol</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">any</span>&gt;(ratesUrl).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">shareReplay</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"title function_\">refCount</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.<span class=\"property\">rates</span>[<span class=\"built_in\">symbol</span>])</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Consumo-de-pipes\"><a href=\"#3-2-Consumo-de-pipes\" class=\"headerlink\" title=\"3.2 Consumo de pipes\"></a>3.2 Consumo de pipes</h2><p>La parte del consumo es la más simple. Se trata de invocar a la transformación pasándole los atributos necesarios y volver a transformar o utilizar directamente el resultado.</p>\n<p><code>apps\\shop\\src\\app\\catalog\\product\\product.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  $&#123;&#123; product.price | exRate | number:&#x27;1.0-0&#x27;&#125;&#125;</span><br><span class=\"line\">  &#123;&#123; product.price | exRate:&#x27;GBP&#x27; | async | number:&#x27;1.0-0&#x27;&#125;&#125; £</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y con esto ya tenemos tres nuevas maneras de reutilizar código y dar nuevas capacidades a la parte de presentación. Pero en este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> volvemos de nuevo a las profundidades del modelo y la gestión de datos empezando con el <a href=\"../flujo-reactivo-unidireccional-con-Angular-y-RxJs\">Flujo reactivo unidireccional con Angular y RxJs</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-13_template.png\" alt=\"componentes-dinamicos-directivas-y-pipes-con-Angular\"></p>\n<p>El sistema de componentes de Angular te permite reutilizar pequeñas unidades para montar grandes y complejas interfaces. Eso es bueno porque la capa de presentación se <em>come</em> la mayor parte del tiempo de desarrollo. Pero podemos ir más allá.</p>\n<blockquote>\n<p>Podemos crear componentes con estructura fija y contenido dinámico. Podemos dar funcionalidad extra mediante directivas y podemos crear pipes para transformar la presentación.</p>\n</blockquote>\n<p>Y todo esto de una forma sencilla y familiar usando el CLI. No hay excusa para no reutilizar código en la capa de presentación. <em>Don’t repeat Yourself!</em>.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../deteccion-del-cambio-en-Angular/\">Detección del cambio en Angular</a>. Al finalizar tendrás una aplicación que muestra información sobre productos de manera flexible y al gusto del programador.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Plantillas-de-contenido-dinamico\">1. Plantillas de contenido dinámico.</a></p>\n<p><a href=\"./#2-Atributos-custom-con-Directivas\">2. Atributos custom con Directivas.</a></p>\n<p><a href=\"./#3-Funciones-de-transformacion-con-Pipes\">3. Funciones de transformación con Pipes.</a></p>\n<hr>\n<h1 id=\"1-Plantillas-de-contenido-dinamico\"><a href=\"#1-Plantillas-de-contenido-dinamico\" class=\"headerlink\" title=\"1 Plantillas de contenido dinámico\"></a>1 Plantillas de contenido dinámico</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">card</span> <span class=\"string\">with</span> <span class=\"string\">price</span> <span class=\"string\">in</span> <span class=\"string\">euros</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">i</span> <span class=\"string\">can</span> <span class=\"string\">decide</span> <span class=\"string\">to</span> <span class=\"string\">purchase</span> <span class=\"string\">it</span> <span class=\"string\">or</span> <span class=\"string\">not</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">card</span> <span class=\"string\">with</span> <span class=\"string\">stock</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">ask</span> <span class=\"string\">for</span> <span class=\"string\">more</span> <span class=\"string\">or</span> <span class=\"string\">not</span></span><br></pre></td></tr></table></figure>\n\n<p>En muchas ocasiones tenemos que presentar la misma información pero con ligeros cambios. Por ejemplo una vista a veces con unos botones a veces con un texto.</p>\n<p>En otras ocasiones mostramos información muy diferente pero con la misma estructura. Por ejemplo páginas de búsqueda; pueden ser de productos, clientes, tareas… pero siempre con la parte de filtro y la del listado.</p>\n<p>Algunas veces se puede resolver con un <code>*ngIf</code>. Pero hay ocasiones que donde la técnica del <code>ng-content</code> te puede ser mucho más útil. Como ejemplo voy a crear un componente base para mostrar una ficha de producto. Después usaré esa plantilla para <em>rellenarla</em> según las especificaciones de cada pantalla.</p>\n<hr>\n<h2 id=\"1-1-Un-componente-comun\"><a href=\"#1-1-Un-componente-comun\" class=\"headerlink\" title=\"1.1 Un componente común\"></a>1.1 Un componente común</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c product-template --project=products --module=products.module.ts --<span class=\"built_in\">export</span></span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>La visión del comprador y del vendedor es parecida. Mantenemos estructura, inyectamos contenido.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin: 5px; padding: 5px; border: 2px; border-style: solid;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; product.description &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-top: 5px&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;.actions&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>La directiva <code>ngContent</code> permite crear <em>slots</em> para incrustar contenido a voluntad del consumidor. Cada <em>slot</em> se identifica mediante un <code>select=&quot;css-selector&quot;</code>.</p>\n<p>Los selectores pueden referirse a elementos <em>html</em>, clases <em>css</em> o identificadores. En la práctica es como dejar unos sitios en los que inyectar contenido. Y para referirse a esos sitios les damos un nombre selector.</p>\n<hr>\n<h2 id=\"1-2-Implementaciones-distintas\"><a href=\"#1-2-Implementaciones-distintas\" class=\"headerlink\" title=\"1.2 Implementaciones distintas\"></a>1.2 Implementaciones distintas</h2><p>A partir de aquí podría haber múltiples componentes que usasen la misma plantilla. Voy a mostrar uno de ejemplo.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c catalog/product --project=shop</span><br></pre></td></tr></table></figure>\n<p>La etiqueta <code>&lt;main&gt;</code> y el atributo <code>class=&quot;actions&quot;</code> son usados para seleccionar los slots en los que serán inyectados. Por lo demás el componente <code>ab-products-product-template</code> se comporta como cualquier otro pudiendo recibir argumentos…</p>\n<p><code>apps\\shop\\src\\app\\catalog\\catalog.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-products-product-template</span> [<span class=\"attr\">product</span>]=<span class=\"string\">&quot;product&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123; product.brand &#125;&#125; - &#123;&#123; product.category &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      Price: &#123;&#123; product.price &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;actions&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">clic</span>)=<span class=\"string\">&quot;buy.next()&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color:coral; padding: 5px&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>Buy me!<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-products-product-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>La idea es que bajo <strong>una misma estructura puedas crear distintas implementaciones</strong> y así mantener una coherencia visual o simplemente no repetir código.</p>\n<h1 id=\"2-Atributos-custom-con-Directivas\"><a href=\"#2-Atributos-custom-con-Directivas\" class=\"headerlink\" title=\"2 Atributos custom con Directivas\"></a>2 Atributos custom con Directivas</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">green</span> <span class=\"string\">mark</span> <span class=\"string\">on</span> <span class=\"string\">products</span> <span class=\"string\">with</span> <span class=\"string\">stock</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">don&#x27;t</span> <span class=\"string\">do</span> <span class=\"string\">need</span> <span class=\"string\">to</span> <span class=\"string\">refill</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">red</span> <span class=\"string\">mark</span> <span class=\"string\">on</span> <span class=\"string\">products</span> <span class=\"string\">with</span> <span class=\"string\">out</span> <span class=\"string\">stock</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">need</span> <span class=\"string\">to</span> <span class=\"string\">refill</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-Generacion-de-directivas\"><a href=\"#2-1-Generacion-de-directivas\" class=\"headerlink\" title=\"2.1 Generación de directivas\"></a>2.1 Generación de directivas</h2><p>Primero la definición. Si los componentes nos permite crear nuevas etiquetas en <em>html</em>, las directivas nos permiten crear atributos. Se usan para dar <strong>funcionalidad extra a los elementos</strong> estándar o no de las aplicaciones.</p>\n<p>La forma de crearlas es mediante el CLI. En este caso con el comando <code>directive</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g directive out-of-stock --project=products --export</span><br></pre></td></tr></table></figure>\n\n<p>EL resultado es una clase con su propio decorador <code>@Directive</code> en el que asignamos su selector. Es decir el nombre del atributo que podremos usar. El convenio es utilizar el prefijo y el propio nombre de directiva en <em>camel case</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[abProductsOutOfStock]&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OutOfStockDirective</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> minimalStock = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Input</span>()</span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">abProductsOutOfStock</span>(<span class=\"params\">stock: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> color = stock &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">minimalStock</span> ? <span class=\"string\">&#x27;MistyRose&#x27;</span> : <span class=\"string\">&#x27;Aquamarine&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">el</span>.<span class=\"property\">nativeElement</span>.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> el: ElementRef</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>En la implementación ya puedes hacer lo que te parezca. Es muy habitual que las directivas se usen para manipular el elemento nativo al que se aplican. Por eso casi siempre solicitarás la inyección de un puntero a dicho elemento: el de la dependencia de tipo <code>ElementRef</code> que viene en el <em>core</em> de Angular.</p>\n<p>A partir de ahí ya puedes hacer lo necesario manipulando el <em>html</em> tanto en el constructor como en respuesta a cambios o durante la entrada de atributos.</p>\n<hr>\n<h2 id=\"2-2-Consumo-de-directivas\"><a href=\"#2-2-Consumo-de-directivas\" class=\"headerlink\" title=\"2.2 Consumo de directivas\"></a>2.2 Consumo de directivas</h2><p>Usarlas es todavía más sencillo. Una vez exportadas e importadas como cualquier otro artificio Angular, ya puedes asignarlas como atributo a las etiquetas de tus plantillas.</p>\n<p><code>apps\\shop\\src\\app\\catalog\\product\\product.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">abProductsOutOfStock</span>]=<span class=\"string\">&quot;product.stock&quot;</span>&gt;</span></span><br><span class=\"line\">  Stock: &#123;&#123; product.stock &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Algunas, como este caso, reciben valores. Otras simplemente actúan una vez asignadas. De nuevo la idea es que <strong>todas las manipulaciones de bajo nivel se <em>escondan</em> en las directivas</strong> y que los controladores de nuestros componentes queden limpios y desacoplados de la capa de presentación.</p>\n<h1 id=\"3-Funciones-de-transformacion-con-Pipes\"><a href=\"#3-Funciones-de-transformacion-con-Pipes\" class=\"headerlink\" title=\"3 Funciones de transformación con Pipes\"></a>3 Funciones de transformación con Pipes</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">price</span> <span class=\"string\">also</span> <span class=\"string\">in</span> <span class=\"string\">dollars</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">compare</span> <span class=\"string\">prices</span></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">product</span> <span class=\"string\">price</span> <span class=\"string\">also</span> <span class=\"string\">in</span> <span class=\"string\">pounds</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">compare</span> <span class=\"string\">prices</span></span><br></pre></td></tr></table></figure>\n\n<p>En este caso lo que queremos es transformar un dato de nuestro modelo antes de presentarlo en pantalla. Para ello seguro que has usado algún <code>pipe</code> de Angular desde el primer día que empezaste a programar.</p>\n<h2 id=\"3-1-Generacion-de-pipes\"><a href=\"#3-1-Generacion-de-pipes\" class=\"headerlink\" title=\"3.1 Generación de pipes\"></a>3.1 Generación de pipes</h2><p>Pero ahora vamos a generar nuestros propios <em>pipes</em>. Una vez más usaremos el CLI con su comando específico para este caso:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g pipe exRate --project=products --export</span><br></pre></td></tr></table></figure>\n\n<p>Al igual que los componentes y que las directivas, los <em>pipes</em> tienen un nombre como clase y un nombre en su decorador para ser usados desde fuera.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;exRate&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExRatePipe</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PipeTransform</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> euroDollars = <span class=\"number\">1.13</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ratesApi = <span class=\"string\">&#x27;https://api.exchangeratesapi.io/latest?symbols=&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">transform</span>(<span class=\"attr\">euros</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">symbol</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">number</span> | <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">number</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">symbol</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> euros * <span class=\"variable language_\">this</span>.<span class=\"property\">euroDollars</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getOnlineRates$</span>(<span class=\"built_in\">symbol</span>).<span class=\"title function_\">pipe</span>(<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">rate</span> =&gt;</span> euros * rate));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>La clase tienen que implementar la interfaz <code>PipeTransform</code> que obliga a tener un método público <code>transform(value: any):any</code>. En este método definimos nuestra función de transformación.</p>\n<p>La única salvedad es incidir en que sea lo más ligera posible pues se ejecuta en cada uso y repintado. Por ejemplo yo aquí necesito un servicio asíncrono, y para no penalizar demasiado el rendimiento, le aplico el operador <code>shareReplay</code> para que actúe como una caché.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">getOnlineRates$</span>(<span class=\"attr\">symbol</span>: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ratesUrl = <span class=\"variable language_\">this</span>.<span class=\"property\">ratesApi</span> + <span class=\"built_in\">symbol</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">any</span>&gt;(ratesUrl).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">shareReplay</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"title function_\">refCount</span>(),</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.<span class=\"property\">rates</span>[<span class=\"built_in\">symbol</span>])</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Consumo-de-pipes\"><a href=\"#3-2-Consumo-de-pipes\" class=\"headerlink\" title=\"3.2 Consumo de pipes\"></a>3.2 Consumo de pipes</h2><p>La parte del consumo es la más simple. Se trata de invocar a la transformación pasándole los atributos necesarios y volver a transformar o utilizar directamente el resultado.</p>\n<p><code>apps\\shop\\src\\app\\catalog\\product\\product.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  $&#123;&#123; product.price | exRate | number:&#x27;1.0-0&#x27;&#125;&#125;</span><br><span class=\"line\">  &#123;&#123; product.price | exRate:&#x27;GBP&#x27; | async | number:&#x27;1.0-0&#x27;&#125;&#125; £</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y con esto ya tenemos tres nuevas maneras de reutilizar código y dar nuevas capacidades a la parte de presentación. Pero en este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> volvemos de nuevo a las profundidades del modelo y la gestión de datos empezando con el <a href=\"../flujo-reactivo-unidireccional-con-Angular-y-RxJs\">Flujo reactivo unidireccional con Angular y RxJs</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"El patrón Redux con NgRx en Angular","date":"2019-09-25T11:08:50.000Z","thumbnail":"/css/images/angular-15_ngrx.png","_content":"\n![el-patron-redux-con-ngrx-en-angular](/images/tutorial-angular-15_ngrx.png)\n\nLe pasa a todas las aplicaciones, crecen y crecen en funcionalidad y complejidad. En Angular estamos preparados para modularizar, componentizar e inyectar servicios. Pero con grandes aplicaciones, o con grandes equipos, parece que nada es suficiente. Se necesita una **gestión del estado centralizada** como la del [patrón Redux]((../flujo-reactivo-unidireccional-con-Angular-y-RxJs/)).\n\nSi decíamos que **Redux no hace rápido lo simple, sino mantenible lo complejo**, ahora te digo que **NgRx no hace rápido a Redux, sino mantenible su boilerplate.** Así que si tienes delante un desarrollo funcionalmente complejo, te recomiendo que uses *NgRX*; la solución estándar para implementar **Redux con Angular**.\n\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [Redux, flujo reactivo unidireccional con Angular y RxJs](../flujo-reactivo-unidireccional-con-Angular-y-RxJs/). Al finalizar tendrás una aplicación que gestiona centralizadamente los cambios, que permite conocer qué ocurrió y predecir lo que ocurrirá usando NgRx.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n# 1 Instalación y configuración\n\n**NgRx** es el estándar de facto para implementar _Redux_ en Angular. Está basada en _RxJS_ y es una librería modular con todo lo necesario para crear grandes aplicaciones. Esto son los módulos que la componen:\n\n- **store**: Es el módulo principal con el administrador del estado centralizado y reactivo.\n- **store-devtools**: Instrumentación para depurar desde el navegador. Vale su peso en oro.\n- **router-Store** : Almacena el estado del *router* de Angular en el *store*, tratando cada evento como una acción Redux.\n- **effects**: Los reductores son funciones puras sin efectos colaterales. Este módulo es la solución para comandos asíncronos.\n- **schematics, entity, ngrx-data**: Son otros módulos opcionales con ayudas y plantillas de NgRX.\n\n## 1.1 Instalación de NgRx\n\nPara agregar *NgRx* a un app te propongo que uses los _schematics_ de NxDev pues disponen de más opciones de configuración inmediata. Aunque la alternativa con el CLI también es suficiente para empezar.\n\n```shell\n# with Nx.dev tools\nng g @nrwl/angular:ngrx app --module=apps/shop/src/app/app.module.ts --root --minimal\n# with only CLI\nng add @ngrx/store\n\n```\nCon esto habrás instalado y configurado NgRx y tu `AppModule` tendrá algo así:\n\n```typescript\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    StoreModule.forRoot(\n      {},\n      {\n        metaReducers: !environment.production ? [] : [],\n        runtimeChecks: {\n          strictActionImmutability: true,\n          strictStateImmutability: true\n        }\n      }\n    ),\n    EffectsModule.forRoot([])\n  ]\n})\nexport class AppModule {}\n```\n\n> El código generado por cualquiera de los dos schematics no es para todos los gustos. Tómalo como un punto de partida y crea la estructura que mejor te encaje.\n\n## 1.2 DevTools\n\nLa razón principal de usar Redux es la capacidad que da al programador para comprender cómo el estado de sus variables ha variado en el tiempo. Es decir ¿Cómo hemos llegado hasta aquí?. Esta es claramente una cuestión de análisis y depuración de código. Y para ello necesitamos herramientas de desarrollador. Presentamos las [**Redux DevTools for Chrome**](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en).\n\nEste es un plugin que se engancha a cualquier solución Redux (no sólo NgRx, ni siquiera sólo Angular) y que permite explorar el valor del estado y lo más interesante: la secuencia de acciones que se ha despachado y el efecto que cada una tuvo sobre el valor del estado.\n\nPara realizar el enganche sirve la línea que verás también en el `AppModule`. La cual activa la monitorización cuando no estamos en producción. Normal, esto es un herramienta para el desarrollador, nunca para el usuario.\n\n```typescript\n  !environment.production ? StoreDevtoolsModule.instrument() : [],\n```\nPara verlo en funcionamiento tienes que ejecutar y abrir tu app en Chrome. Después en la pantalla de inspección del código aparecerá una pestaña al final de todo (más allá de Network y Application...) llamada Redux. La interfaz es muy intuitiva; no tardarás en hacerte con ella. aunque ahora mismo un poco pobre...\n\n## 1.3 Router\n\nPara darle algo de contenido y de paso acercarnos a las capacidades de Redux y NgRx vamos a conectarle el `RouterModule` de la aplicación. Para ello sirve la siguiente línea que tienes que poner también en la importaciones del `AppModule`.\n\n```typescript\n  StoreRouterConnectingModule.forRoot({ routerState: RouterState.Minimal })\n```\n\nA partir de este momento cada evento de navegación del _router_ va a generar una acción que _NgRx_ recogerá y registrará. Esas acciones y su impacto en el estado se pueden visualizar con el plugin de Redux. Podrás ver los cambios y reproducirlos hacia adelante y atrás. Es como viajar en el tiempo dentro de la ejecución de app.\n\n\n# 2 Actions\n\nHasta el momento ha sido todo muy de infraestructura, pero es hora de que hagamos algo funcional. Un ejemplo sería agregar a nuestra app un módulo para la gestión de medios de pago de un usuario. Algo así:\n\n```yaml\nAs a: customer,\n  I want: to add payment methods\n  so that: I can pay with them\n\nAs a: customer,\n  I want: to select one as preferred\n  so that: I can make fewer clicks\n\nAs a: customer,\n  I want: to change de expiration date\n  so that: I get my cards up to date\n```\n\nPara ello, y valiendo una vez más de los schematics vamos a agregar una _feature_\n\n```bash\nng g m payments --project=shop --module=app.module.ts --routing --route=payments\nng g @ngrx/schematics:feature payments/store/paymentMethod --project=shop --module=payments/payments.module.ts --no-flat --no-spec --creators\n```\n\nEsto habrá generado un buen montón de código. Pero todo demasiado genérico. Vamos a empezar a adaptarlo a nuestro problema aportando un modelo de datos.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.model.ts`\n\n```typescript\nexport interface PaymentMethod {\n  id: string;\n  expiration: Date;\n}\n\nexport interface PaymentMethods {\n  list: PaymentMethod[];\n  preferred: string;\n}\n```\nY ahora sí, vamos a por las acciones.\n\n## 2.1 Create\n\nUno de los parámetros usados durante la generación de la _feature_ fue `--creators`. Esto le indicó a NgRx que preferimos usar funciones en lugar de clases para definir nuestras acciones. Así que en el fichero de definición de acciones te encontrarás con llamadas a una función como esta `createAction('Descripción de la acción', props<{ parametro: Tipo }>() )`.\nCon esto tenemos que cubrir los dos requerimientos de Redux: las acciones han de tener un tipo y una _payload_.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.actions.ts`\n\n```typescript\nexport const loadPaymentMethods = createAction(\n  '[PaymentMethod] Load PaymentMethods'\n);\n\nexport const addPaymentMethod = createAction(\n  '[PaymentMethod] Add PaymentMethod',\n  props<{ newPaymentMethod: PaymentMethod }>()\n);\n\nexport const selectPreferredPaymentMethod = createAction(\n  '[PaymentMethod] Select preferred PaymentMethod',\n  props<{ preferredId: string }>()\n);\n\nexport const setExpirationPaymentMethod = createAction(\n  '[PaymentMethod] Set Expiration Date on PaymentMethod',\n  props<{ updatedPaymentMethod: PaymentMethod }>()\n);\n```\n\nEl código puede resultar extraño a primera vista; pero es siempre igual y acabas familiarizando muy rápido. Esencialmente se trata de dar un nombre a la acción y luego configurarla. Lo imprescindible va a ser un string que la describa. Es recomendable seguir el convenio con el formato `[Origen] Nombre acción descriptivo`.\n\nEl segundo argumento de la función `creteAction` es a su vez otra función. La parte interesante de la función `propos<>()` está en su tipo genérico. Es ahí dónde definimos el tipo de datos de la _payload_ que puede transportar la acción.\n\n## 2.2 Dispatch\n\nDefinir el catálogo de acciones es la primera parte del problema. Ahora nos toca invocarlas, o como se dice en el argot Redux: despacharlas. Para ello voy a crear un servicio auxiliar que encapsule toda la interacción con NgRx. Es una implementación del patrón fachada para unificar y facilitar el trabajo con Redux desde fuera.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.service.ts`\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as PaymentMethodActions from './payment-method.actions';\nimport { PaymentMethod, PaymentMethods } from './payment-method.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentMethodService {\n  constructor(private store: Store<PaymentMethods>) {}\n}\n```\n\nY aquí puedo crear los métodos funcionales que despachen las acciones sobre el _store_ de NgRx.\n\n```typescript\npublic loadPaymentMethods() {\n  this.store.dispatch(PaymentMethodActions.loadPaymentMethods());\n}\npublic addPaymentMethod(newPaymentMethod: PaymentMethod) {\n    this.store.dispatch(\n      PaymentMethodActions.addPaymentMethod({\n        newPaymentMethod: { ...newPaymentMethod }\n      })\n    );\n  }\npublic selectPreferredPaymentMethod(preferredId: string) {\n  this.store.dispatch(\n    PaymentMethodActions.selectPreferredPaymentMethod({ preferredId })\n  );\n}\npublic setExpirationPaymentMethod(updatedPaymentMethod: PaymentMethod) {\n  this.store.dispatch(\n    PaymentMethodActions.setExpirationPaymentMethod({\n      updatedPaymentMethod: { ...updatedPaymentMethod }\n    })\n  );\n}\n```\n\nEs necesario enviar siempre un clon de los argumentos para desconectarlos del origen. En Redux queremos tener la fuente única de la verdad, y eso sólo es posible si los argumentos que recibimos están sellados y aislados del resto del mundo.\n\nPara una primera aproximación, reconozco que es mucho código para tan poca funcionalidad. Claro que para quien use esta fachada el mundo es mucho más sencillo. Y por dentro es muy potente y controlable.\n\n`apps\\shop\\src\\app\\payments\\payments.component.ts`\n\n```typescript\nexport class PaymentsComponent implements OnInit {\n  constructor(private paymentMethodService: PaymentMethodService) {}\n\n  ngOnInit() {\n    this.paymentMethodService.loadPaymentMethods();\n    const visa: PaymentMethod = {\n      id: '1234 7896 3214 6549',\n      expiration: new Date(2020, 6-1, 30)\n    };\n    this.paymentMethodService.addPaymentMethod(visa);\n    this.paymentMethodService.selectPreferredPaymentMethod(visa.id);\n    visa.expiration = new Date(2021, 12-1, 31);\n    this.paymentMethodService.setExpirationPaymentMethod(visa);\n  }\n}\n```\n\n# 3 State reducer\n\n## 3.1 State\n\nEl estado en *redux* es un objeto tipado a partir de una interfaz, inicialmente llamada `State` a secas, aunque yo prefiero identificarla como `PaymentMethodsState`. Tendrá propiedades para almacenar objetos más o menos complejos. Cada propiedad tendrá su propio tipo complejo y necesita un estado inicial. Eso es lo que hace este código:\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts`\n\n```typescript\nexport const paymentMethodFeatureKey = 'paymentMethod';\n\nexport interface PaymentMethodsState {\n  paymentMethods: PaymentMethods;\n}\n\nexport const initialState: PaymentMethodsState = {\n  paymentMethods: { list: [], preferred: null }\n};\n```\n\n## 3.2 Create function\n\nPero todo estado necesita su reductor, y una vez más lo crearemos mediante una función. En este caso es la `createReducer(state, on(action1, function1) )`. Su encarnación más básica tiene la siguiente pinta:\n\n```typescript\nconst paymentMethodReducer = createReducer(\n  initialState,\n  on(PaymentMethodActions.loadPaymentMethods, state => state)\n);\n```\nLo que hace es definir una serie de `hooks` para enganchar funciones de mutación en respuesta a las acciones despachadas. Empezamos con la acción `loadPaymentMethods` y en este caso no por ahora hacemos ninguna mutación al estado. Es un reductor transparente e innecesario. Lo pongo para familiarizarnos con la sintaxis.\n\nVamos a algo más complejo y útil como la acción `addPaymentMethod`. Funcionalmente queremos agregar el nuevo método de pago que viene en su carga al array actual de métodos de pago. Nada complejo, ya sí deben ser todas las funciones reductoras.\n\nPero, siempre hay un pero, resulta que **una función reductora debe ser también una función pura**. Y esto nos obliga a mutar el estado sin mutar los argumentos; es decir, nos obliga a clonar el estado y sus propiedades antes de cambiarlas.\n\n```typescript\non(PaymentMethodActions.addPaymentMethod, (state, { newPaymentMethod }) => {\n  return {\n    ...state,\n    paymentMethods: {\n      ...state.paymentMethods,\n      list: [...state.paymentMethods.list, newPaymentMethod]\n    }\n  };\n})\n```\n\nEl proceso de clonado puedes hacerlo con mayor o menor profundidad, pero al menos un clonado superficial del estado es obligatorio. Yo aquí he optado por clonar incluso el array interno, aunque no sea estrictamente obligatorio.\n\n\n## 3.3 Register in Store\n\nEl resultado de esta invocación a `createReducer()` se será a su vez otra función que yo almacené en la contante `paymentMethodReducer`. Por requerimiento del proceso de empaquetado con `webpack` que nada tiene que ver con NgRx, estamos obligados a exportar la función mediante un _wrapper_ como este:\n\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts`\n\n```typescript\nexport function reducer(state: PaymentMethodsState | undefined, action: Action) {\n  return paymentMethodReducer(state, action);\n}\n```\n\nHecho esto tenemos ya una función reductora que debemos registrar en el _store_. Lo que hacemos es decirle a NgRx que cuando llegue una acción de mutado invoque a esta acción pasándole la propiedad del estado encargada gestionar.\n\n`apps\\shop\\src\\app\\payments\\payments.module.ts`\n\n```typescript\nimport * as fromPaymentMethod from './store/payment-method/payment-method.reducer';\n@NgModule({\n  imports: [\n    StoreModule.forFeature(\n      fromPaymentMethod.paymentMethodFeatureKey,\n      fromPaymentMethod.reducer\n    )]\n```\n\nNormalmente el nombre de dicha propiedad se estable en una constante exportada para evitar fallos de tecleo con consecuencias imprevisibles.\n\n# 4 Selectors\n\nHasta ahora hemos definido el estado, y creado las acciones que despachamos conta él. Y hemos creado las funciones reductoras que lo modifican al recibir las acciones. No es poco, pero es la mitad del camino. Nos queda enterarnos de los cambios que se ha realizado. Y para eso nos ofrecen un concepto muy de base de datos `select`.\n\n## 4.1 Create selector\n\nLos selectores, mejor dicho las funciones selectoras, se crean mediante una función factoría igual que hemos visto para las reductoras y las acciones. La diferencia es que aquí las tenemos que llamar a dos niveles: el de la funcionalidad y el de la propiedad específica que nos interesa.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.selectors.ts`\n\n```typescript\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { paymentMethodFeatureKey, State } from './payment-method.reducer';\n\nexport const getPaymentMethodState = createFeatureSelector<State>(\n  paymentMethodFeatureKey\n);\n\nexport const getPaymentMethodsList = createSelector(\n  getPaymentMethodState,\n  (state: State) => state.paymentMethods.list\n);\n\nexport const getPreferredPaymentMethod = createSelector(\n  getPaymentMethodState,\n  (state: State) => state.paymentMethods.preferred\n);\n```\n\nPodemos tener tantos selectores como queramos. Se aconseja crearlos para cada tema de interés que pueda tener el resto de la aplicación. Pueden ser simples vista parciales del estado o complejas transformaciones a gusto del consumidor. NgRx lo hace de forma que optimiza cálculos y llamadas así que nos sugieren que abusemos de ellos y encapsulemos aquí todo el acceso al valor y a los cambios del estado.\n\n## 4.2 Selecting data\n\nUna vez más, si queremos que nuestra aplicación se desacople lo  más posible de ngRx, debemos llamar a los selectores desde un servicio fachada. Así que añadimos al `apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.service.ts` un par de nuevos métodos públicos.\n\n```typescript\n  public getPaymentMethodsList$(): Observable<PaymentMethod[]> {\n    return this.store.select(PaymentMethodSelectors.getPaymentMethodsList);\n  }\n\n  public getPreferredPaymentMethod$(): Observable<string> {\n    return this.store.select(PaymentMethodSelectors.getPreferredPaymentMethod);\n  }\n```\n\n## 4.3 Showing data\n\nEstos métodos devuelven observables a los que suscribirse para mostrar los valores cambiantes del estado. Gracias a la fachada anterior el componente consumidor es completamente inconsciente de la existencia de NgRx.\n\n```typescript\nexport class PaymentsComponent implements OnInit {\n  public paymentMethodsList$: Observable<PaymentMethod[]>;\n  public preferredPaymentMethod$: Observable<string>;\n  constructor(private paymentMethodService: PaymentMethodService) {}\n\n  ngOnInit() {\n    this.paymentMethodsList$ = this.paymentMethodService.getPaymentMethodsList$();\n    this.preferredPaymentMethod$ = this.paymentMethodService.getPreferredPaymentMethod$();\n  }\n}\n```\n\nPor supuesto, desde la _template_ lo tratamos como a cualquier otro dato asíncrono.\n\n```html\n<p>Payment Methods List:</p>\n<pre>{{ paymentMethodsList$ | async | json }}</pre>\n<p>Preferred Payment Method:</p>\n<pre>{{ preferredPaymentMethod$ | async | json }}</pre>\n```\n\n\n# 5 Effects\n\nLas funciones reductoras, como ya se ha dicho, deben ser puras. La idea es que puedan ser auditadas, re-ejecutadas y testeadas sin que necesiten servicios externos ni causen efectos colaterales. Y esto es un problema con la cantidad de **ejecuciones asíncronas en las aplicaciones web**. Cualquier tentación de lanzar una llamada *AJAX* dentro de un reductor debe ser eliminada de inmediato.\n\n> Dos razones: por un lado en Angular se necesita invocar al *httpClient* de alguna manera para realizar la llamada *AJAX*. Y ya que la función reductora no pertenece a ninguna clase Angular, no puede haber constructor que reclame la inyección de la dependencia a dicho servicio. Tampoco las funciones puras tienen permitido usar nada que no venga entre sus argumentos. Por otra parte las funciones puras han de ser predecibles, y una llamada a un servidor remoto no es en absoluto predecible. Puede pasarle de todo, así que **los reductores no son país para procesos asíncronos**.\n\nLa solución que proponen *NgRX* es usar un artificio llamado efecto, porque será encargado de **los efectos secundarios que provocan las las instrucciones asíncronas**. De una forma simplista, diremos que las acciones asíncronas se multiplicarán por tres. El comando que genera la llamada, y los dos potenciales eventos con la respuesta correcta o el error.\n\nPara manejarlo todo incluyen en la librería el módulo `EffectsModule` que ha de registrarse junto al `StoreModule`. Desde ese momento *NgRX* activa un sistema de seguimiento que trata las acciones como un stream de *RxJS* y permite subscribirse a la invocación de dichas acciones y tratarlas adecuadamente.\n\n## 5.1 Install\n\nSegún el proceso que hayas escogido para agregar Ngrx puede que ya tengas los efectos agregados o que tengas que hacerlo manualmente mediante un instrucción como esta:\n\n```bash\nng add @ngrx/effects\n```\nEn cualquier caso aparecerá una instrucción de registro en el módulo raíz o funcional que lo necesite. Por ejemplo el de `PaymentsModule` es:\n\n```typescript\nEffectsModule.forFeature([])\n```\n\n## 5.2 Efecto básico\n\nEn un ejemplo inicial vamos a intentar almacenar y recuperar los métodos de pago desde el _local storage_ del navegador. Esta es claramente una actividad de riesgo (y no lo dogo sólo por el evidente peligro de seguridad). Pero el acceso puede fallar o no estar disponible. Y en el mejor de los casos es un recurso externo que nunca podría ir dentro de una función reductora.\n\nAsí que vamos a ver el trabajo necesario para montar esto _como Redux manda_.\n\n### Acciones\n\nPara empezar agregamos dos nuevas acciones en respuesta a los potenciales eventos que puedan surgir del acceso al _local storage_\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.actions.ts`\n\n```typescript\nexport const loadPaymentMethods = createAction(\n  '[PaymentMethod] Load Payment Methods'\n);\n\nexport const loadPaymentMethodsSucess = createAction(\n  '[PaymentMethod] Load Payment Methods Success',\n  props<{ paymentMethodList: PaymentMethod[] }>()\n);\n\nexport const loadPaymentMethodsError = createAction(\n  '[PaymentMethod] Load Payment Methods Error'\n);\n```\n\nPara simplificarlo no estoy reportando nada del error específico. La `loadPaymentMethodsError` servirá para indicar que el proceso ha fallado. sin más.\n\n### Definición\n\nAhora viene lo bueno. La creación de un efecto. Empezamos como siempre usando una función factoría : `createEffect()`. Sólo que esta vez va asociada a una propiedad pública de un servicio de Angular. Y aquí ya tenemos todos nuestros juguetes disponibles.\n\nPor ejemplo la inyección de dependencias; en el constructor `constructor(private actions$: Actions) {}` solicitamos como argumento un observable de todas las acciones que se hayan despachado en nuestro `store`. Ese _stream_ servirá para escuchar y filtrar las acciones que nos interesen. Después haremos nuestra operativa con todas las llamadas que hagan falta.\n\nSólo un requisito. Al terminar hemos de retornar un observable con una nueva acción que el sistema encauzará para ser despachada. Esto obliga a conocer bien los operadores _RxJs_ que están en la base do todo este montaje. De ahí el uso `concatMap()` y por supuesto del creador observable más básico: `of()`.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.effects.ts`\n\n```typescript\npublic loadPaymentMethods$ = createEffect(() =>\n  this.actions$.pipe(\n    ofType(PaymentMethodActions.loadPaymentMethods),\n    concatMap(() => {\n      try {\n        let storedList = JSON.parse(\n          window.localStorage.getItem(this.storeKey)\n        );\n        if (!storedList) {\n          storedList = initialState.paymentMethods.list;\n          window.localStorage.setItem(\n            this.storeKey,\n            JSON.stringify(storedList)\n          );\n        }\n        return of(\n          PaymentMethodActions.loadPaymentMethodsSucess({\n            paymentMethodList: storedList\n          })\n        );\n      } catch (e) {\n        return of(PaymentMethodActions.loadPaymentMethodsError);\n      }\n    })\n  )\n);\n```\nTómate tu tiempo para entender este efecto, y recuerda que por raro que te parezca al principio, te acabarás acostumbrando muy pronto porque siempre sigue el mismo esquema.\n\n### Reducer y Register\n\nPor si te olvidabas, todo este trabajo no altera para nada al estado. Recuerda que sólo las reductoras asociadas a las acciones lo hacen. Así que incrementamos nuestro código con nuevos casos para el reductor.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts`\n\n```typescript\non(\n    PaymentMethodActions.loadPaymentMethodsSucess,\n    (state, { paymentMethodList }) => {\n      return {\n        ...state,\n        paymentMethods: { ...state.paymentMethods, list: paymentMethodList }\n      };\n    }\n  ),\n  on(PaymentMethodActions.loadPaymentMethodsError, state => state),\n```\n\nY para finalizar registramos la clase que contiene al efecto (como un provider especial) en el módulo de efectos.\n\n`apps\\shop\\src\\app\\payments\\payments.module.ts`\n\n```typescript\nEffectsModule.forFeature([PaymentMethodEffects])\n```\n\n## 5.3 Api async\n\nUna vez familiarizado con la sintaxis de los efectos básicos, es hora de pasar a los que sin duda se utilizan más: los efectos sobre servicios asíncronos. Es decir casi todas las llamadas a un API. Algo muy sencillo podría ser agregar a nuestra tienda un converso de divisas para saber los precios en distintas monedas.\n\n```yaml\nAs a: customer,\n  I want: to see the current exchange rate in several currencies\n  so that: I can decide\n```\n\n### Actions\n\nA estas alturas te pido un último esfuerzo para que interpretes el siguiente código:\n\n`apps\\shop\\src\\app\\rates\\store\\exchange-rate\\exchange-rate.actions.ts`\n\n```typescript\nexport const loadExchangeRates = createAction(\n  '[ExchangeRate] Load ExchangeRates'\n);\n\nexport const loadExchangeRatesSuccess = createAction(\n  '[ExchangeRate] Load ExchangeRates Success',\n  props<{ rates: any }>()\n);\n\nexport const loadExchangeRatesError = createAction(\n  '[ExchangeRate] Load ExchangeRates Error',\n  props<{ rates: any }>()\n);\n```\n\n\nEfectivamente, para cada llamada usaremos tres acciones. El comando que la inicia y los dos eventos que pueden ocurrir _success and error_.\n\n### Effect\n\n`apps\\shop\\src\\app\\rates\\store\\exchange-rate\\exchange-rate.effects.ts`\n\n```typescript\nexport class ExchangeRateEffects {\n  public loadExchangeRates$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ExchangeRateActions.loadExchangeRates),\n      concatMap(() =>\n        this.http.get<any>('https://api.exchangeratesapi.io/latest').pipe(\n          map(res =>\n            ExchangeRateActions.loadExchangeRatesSuccess({ rates: res.rates })\n          ),\n          catchError(err =>\n            of(ExchangeRateActions.loadExchangeRatesError({ rates: err }))\n          )\n        )))\n  );\n  constructor(private actions$: Actions, private http: HttpClient) {}\n}\n```\n\nParadójicamente un efecto que incluya una llamada _http_ es más sencillo, pues la naturaleza asíncrona de _Ajax_ junto con el uso de _Observables_ en `httpClient` nos dejan medio trabajo hecho.\n\nLo que realmente hacemos es encauzar el flujo de acciones `pipe(concatMap())` hacia un flujo de respuestas _http_ `this.http.get()`. Pero claro esto es trampa, así que de nuevo encauzamos la respuesta hacia una acción `pipe(map(res=> actionSuccess(res)))`. Cuando la respuesta no llega volvemos a lo que ya sabemos, crear un nuevo observable con `of(actionError(err))`.\n\nAquí lo dejamos. Soy consciente de que Redux es complejo. Soy consciente de que NgRx añade mucho código de infraestructura. Pero también te animo a revisar este artículo y practicar con un caso sencillo antes de tomar cualquier decisión. Incluir NgRx o no hacerlo tiene un alto impacto en el mantenimiento de tu proyecto. No te tires a de cabeza ni lo rechaces de plano.\n\nDescarga y revisa la aplicación de ejemplo. Si la dominas, entonces es que ya tienes los conocimientos para gestionar de manera centralizada, auditable y predecible el estado de tus programas. El patrón Redux lucirá más cuanto más grande y compleja sea tu aplicación.\n\nContinúa tu formación avanzada para crear aplicaciones [PWA, entre la web y las apps con Angular](../pwa-entre-la-web-y-las-apps-con-angular) y verás como aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-15-El-patron-Redux-con-NgRx-en-Angular.md","raw":"---\ntitle: El patrón Redux con NgRx en Angular\npermalink: el-patron-redux-con-ngrx-en-angular\ndate: 2019-09-25 13:08:50\ntags:\n- Angular\n- Angular8\n- Angular2\n- Redux\n- NgRx\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-15_ngrx.png\n---\n\n![el-patron-redux-con-ngrx-en-angular](/images/tutorial-angular-15_ngrx.png)\n\nLe pasa a todas las aplicaciones, crecen y crecen en funcionalidad y complejidad. En Angular estamos preparados para modularizar, componentizar e inyectar servicios. Pero con grandes aplicaciones, o con grandes equipos, parece que nada es suficiente. Se necesita una **gestión del estado centralizada** como la del [patrón Redux]((../flujo-reactivo-unidireccional-con-Angular-y-RxJs/)).\n\nSi decíamos que **Redux no hace rápido lo simple, sino mantenible lo complejo**, ahora te digo que **NgRx no hace rápido a Redux, sino mantenible su boilerplate.** Así que si tienes delante un desarrollo funcionalmente complejo, te recomiendo que uses *NgRX*; la solución estándar para implementar **Redux con Angular**.\n\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [Redux, flujo reactivo unidireccional con Angular y RxJs](../flujo-reactivo-unidireccional-con-Angular-y-RxJs/). Al finalizar tendrás una aplicación que gestiona centralizadamente los cambios, que permite conocer qué ocurrió y predecir lo que ocurrirá usando NgRx.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n# 1 Instalación y configuración\n\n**NgRx** es el estándar de facto para implementar _Redux_ en Angular. Está basada en _RxJS_ y es una librería modular con todo lo necesario para crear grandes aplicaciones. Esto son los módulos que la componen:\n\n- **store**: Es el módulo principal con el administrador del estado centralizado y reactivo.\n- **store-devtools**: Instrumentación para depurar desde el navegador. Vale su peso en oro.\n- **router-Store** : Almacena el estado del *router* de Angular en el *store*, tratando cada evento como una acción Redux.\n- **effects**: Los reductores son funciones puras sin efectos colaterales. Este módulo es la solución para comandos asíncronos.\n- **schematics, entity, ngrx-data**: Son otros módulos opcionales con ayudas y plantillas de NgRX.\n\n## 1.1 Instalación de NgRx\n\nPara agregar *NgRx* a un app te propongo que uses los _schematics_ de NxDev pues disponen de más opciones de configuración inmediata. Aunque la alternativa con el CLI también es suficiente para empezar.\n\n```shell\n# with Nx.dev tools\nng g @nrwl/angular:ngrx app --module=apps/shop/src/app/app.module.ts --root --minimal\n# with only CLI\nng add @ngrx/store\n\n```\nCon esto habrás instalado y configurado NgRx y tu `AppModule` tendrá algo así:\n\n```typescript\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    StoreModule.forRoot(\n      {},\n      {\n        metaReducers: !environment.production ? [] : [],\n        runtimeChecks: {\n          strictActionImmutability: true,\n          strictStateImmutability: true\n        }\n      }\n    ),\n    EffectsModule.forRoot([])\n  ]\n})\nexport class AppModule {}\n```\n\n> El código generado por cualquiera de los dos schematics no es para todos los gustos. Tómalo como un punto de partida y crea la estructura que mejor te encaje.\n\n## 1.2 DevTools\n\nLa razón principal de usar Redux es la capacidad que da al programador para comprender cómo el estado de sus variables ha variado en el tiempo. Es decir ¿Cómo hemos llegado hasta aquí?. Esta es claramente una cuestión de análisis y depuración de código. Y para ello necesitamos herramientas de desarrollador. Presentamos las [**Redux DevTools for Chrome**](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en).\n\nEste es un plugin que se engancha a cualquier solución Redux (no sólo NgRx, ni siquiera sólo Angular) y que permite explorar el valor del estado y lo más interesante: la secuencia de acciones que se ha despachado y el efecto que cada una tuvo sobre el valor del estado.\n\nPara realizar el enganche sirve la línea que verás también en el `AppModule`. La cual activa la monitorización cuando no estamos en producción. Normal, esto es un herramienta para el desarrollador, nunca para el usuario.\n\n```typescript\n  !environment.production ? StoreDevtoolsModule.instrument() : [],\n```\nPara verlo en funcionamiento tienes que ejecutar y abrir tu app en Chrome. Después en la pantalla de inspección del código aparecerá una pestaña al final de todo (más allá de Network y Application...) llamada Redux. La interfaz es muy intuitiva; no tardarás en hacerte con ella. aunque ahora mismo un poco pobre...\n\n## 1.3 Router\n\nPara darle algo de contenido y de paso acercarnos a las capacidades de Redux y NgRx vamos a conectarle el `RouterModule` de la aplicación. Para ello sirve la siguiente línea que tienes que poner también en la importaciones del `AppModule`.\n\n```typescript\n  StoreRouterConnectingModule.forRoot({ routerState: RouterState.Minimal })\n```\n\nA partir de este momento cada evento de navegación del _router_ va a generar una acción que _NgRx_ recogerá y registrará. Esas acciones y su impacto en el estado se pueden visualizar con el plugin de Redux. Podrás ver los cambios y reproducirlos hacia adelante y atrás. Es como viajar en el tiempo dentro de la ejecución de app.\n\n\n# 2 Actions\n\nHasta el momento ha sido todo muy de infraestructura, pero es hora de que hagamos algo funcional. Un ejemplo sería agregar a nuestra app un módulo para la gestión de medios de pago de un usuario. Algo así:\n\n```yaml\nAs a: customer,\n  I want: to add payment methods\n  so that: I can pay with them\n\nAs a: customer,\n  I want: to select one as preferred\n  so that: I can make fewer clicks\n\nAs a: customer,\n  I want: to change de expiration date\n  so that: I get my cards up to date\n```\n\nPara ello, y valiendo una vez más de los schematics vamos a agregar una _feature_\n\n```bash\nng g m payments --project=shop --module=app.module.ts --routing --route=payments\nng g @ngrx/schematics:feature payments/store/paymentMethod --project=shop --module=payments/payments.module.ts --no-flat --no-spec --creators\n```\n\nEsto habrá generado un buen montón de código. Pero todo demasiado genérico. Vamos a empezar a adaptarlo a nuestro problema aportando un modelo de datos.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.model.ts`\n\n```typescript\nexport interface PaymentMethod {\n  id: string;\n  expiration: Date;\n}\n\nexport interface PaymentMethods {\n  list: PaymentMethod[];\n  preferred: string;\n}\n```\nY ahora sí, vamos a por las acciones.\n\n## 2.1 Create\n\nUno de los parámetros usados durante la generación de la _feature_ fue `--creators`. Esto le indicó a NgRx que preferimos usar funciones en lugar de clases para definir nuestras acciones. Así que en el fichero de definición de acciones te encontrarás con llamadas a una función como esta `createAction('Descripción de la acción', props<{ parametro: Tipo }>() )`.\nCon esto tenemos que cubrir los dos requerimientos de Redux: las acciones han de tener un tipo y una _payload_.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.actions.ts`\n\n```typescript\nexport const loadPaymentMethods = createAction(\n  '[PaymentMethod] Load PaymentMethods'\n);\n\nexport const addPaymentMethod = createAction(\n  '[PaymentMethod] Add PaymentMethod',\n  props<{ newPaymentMethod: PaymentMethod }>()\n);\n\nexport const selectPreferredPaymentMethod = createAction(\n  '[PaymentMethod] Select preferred PaymentMethod',\n  props<{ preferredId: string }>()\n);\n\nexport const setExpirationPaymentMethod = createAction(\n  '[PaymentMethod] Set Expiration Date on PaymentMethod',\n  props<{ updatedPaymentMethod: PaymentMethod }>()\n);\n```\n\nEl código puede resultar extraño a primera vista; pero es siempre igual y acabas familiarizando muy rápido. Esencialmente se trata de dar un nombre a la acción y luego configurarla. Lo imprescindible va a ser un string que la describa. Es recomendable seguir el convenio con el formato `[Origen] Nombre acción descriptivo`.\n\nEl segundo argumento de la función `creteAction` es a su vez otra función. La parte interesante de la función `propos<>()` está en su tipo genérico. Es ahí dónde definimos el tipo de datos de la _payload_ que puede transportar la acción.\n\n## 2.2 Dispatch\n\nDefinir el catálogo de acciones es la primera parte del problema. Ahora nos toca invocarlas, o como se dice en el argot Redux: despacharlas. Para ello voy a crear un servicio auxiliar que encapsule toda la interacción con NgRx. Es una implementación del patrón fachada para unificar y facilitar el trabajo con Redux desde fuera.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.service.ts`\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as PaymentMethodActions from './payment-method.actions';\nimport { PaymentMethod, PaymentMethods } from './payment-method.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentMethodService {\n  constructor(private store: Store<PaymentMethods>) {}\n}\n```\n\nY aquí puedo crear los métodos funcionales que despachen las acciones sobre el _store_ de NgRx.\n\n```typescript\npublic loadPaymentMethods() {\n  this.store.dispatch(PaymentMethodActions.loadPaymentMethods());\n}\npublic addPaymentMethod(newPaymentMethod: PaymentMethod) {\n    this.store.dispatch(\n      PaymentMethodActions.addPaymentMethod({\n        newPaymentMethod: { ...newPaymentMethod }\n      })\n    );\n  }\npublic selectPreferredPaymentMethod(preferredId: string) {\n  this.store.dispatch(\n    PaymentMethodActions.selectPreferredPaymentMethod({ preferredId })\n  );\n}\npublic setExpirationPaymentMethod(updatedPaymentMethod: PaymentMethod) {\n  this.store.dispatch(\n    PaymentMethodActions.setExpirationPaymentMethod({\n      updatedPaymentMethod: { ...updatedPaymentMethod }\n    })\n  );\n}\n```\n\nEs necesario enviar siempre un clon de los argumentos para desconectarlos del origen. En Redux queremos tener la fuente única de la verdad, y eso sólo es posible si los argumentos que recibimos están sellados y aislados del resto del mundo.\n\nPara una primera aproximación, reconozco que es mucho código para tan poca funcionalidad. Claro que para quien use esta fachada el mundo es mucho más sencillo. Y por dentro es muy potente y controlable.\n\n`apps\\shop\\src\\app\\payments\\payments.component.ts`\n\n```typescript\nexport class PaymentsComponent implements OnInit {\n  constructor(private paymentMethodService: PaymentMethodService) {}\n\n  ngOnInit() {\n    this.paymentMethodService.loadPaymentMethods();\n    const visa: PaymentMethod = {\n      id: '1234 7896 3214 6549',\n      expiration: new Date(2020, 6-1, 30)\n    };\n    this.paymentMethodService.addPaymentMethod(visa);\n    this.paymentMethodService.selectPreferredPaymentMethod(visa.id);\n    visa.expiration = new Date(2021, 12-1, 31);\n    this.paymentMethodService.setExpirationPaymentMethod(visa);\n  }\n}\n```\n\n# 3 State reducer\n\n## 3.1 State\n\nEl estado en *redux* es un objeto tipado a partir de una interfaz, inicialmente llamada `State` a secas, aunque yo prefiero identificarla como `PaymentMethodsState`. Tendrá propiedades para almacenar objetos más o menos complejos. Cada propiedad tendrá su propio tipo complejo y necesita un estado inicial. Eso es lo que hace este código:\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts`\n\n```typescript\nexport const paymentMethodFeatureKey = 'paymentMethod';\n\nexport interface PaymentMethodsState {\n  paymentMethods: PaymentMethods;\n}\n\nexport const initialState: PaymentMethodsState = {\n  paymentMethods: { list: [], preferred: null }\n};\n```\n\n## 3.2 Create function\n\nPero todo estado necesita su reductor, y una vez más lo crearemos mediante una función. En este caso es la `createReducer(state, on(action1, function1) )`. Su encarnación más básica tiene la siguiente pinta:\n\n```typescript\nconst paymentMethodReducer = createReducer(\n  initialState,\n  on(PaymentMethodActions.loadPaymentMethods, state => state)\n);\n```\nLo que hace es definir una serie de `hooks` para enganchar funciones de mutación en respuesta a las acciones despachadas. Empezamos con la acción `loadPaymentMethods` y en este caso no por ahora hacemos ninguna mutación al estado. Es un reductor transparente e innecesario. Lo pongo para familiarizarnos con la sintaxis.\n\nVamos a algo más complejo y útil como la acción `addPaymentMethod`. Funcionalmente queremos agregar el nuevo método de pago que viene en su carga al array actual de métodos de pago. Nada complejo, ya sí deben ser todas las funciones reductoras.\n\nPero, siempre hay un pero, resulta que **una función reductora debe ser también una función pura**. Y esto nos obliga a mutar el estado sin mutar los argumentos; es decir, nos obliga a clonar el estado y sus propiedades antes de cambiarlas.\n\n```typescript\non(PaymentMethodActions.addPaymentMethod, (state, { newPaymentMethod }) => {\n  return {\n    ...state,\n    paymentMethods: {\n      ...state.paymentMethods,\n      list: [...state.paymentMethods.list, newPaymentMethod]\n    }\n  };\n})\n```\n\nEl proceso de clonado puedes hacerlo con mayor o menor profundidad, pero al menos un clonado superficial del estado es obligatorio. Yo aquí he optado por clonar incluso el array interno, aunque no sea estrictamente obligatorio.\n\n\n## 3.3 Register in Store\n\nEl resultado de esta invocación a `createReducer()` se será a su vez otra función que yo almacené en la contante `paymentMethodReducer`. Por requerimiento del proceso de empaquetado con `webpack` que nada tiene que ver con NgRx, estamos obligados a exportar la función mediante un _wrapper_ como este:\n\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts`\n\n```typescript\nexport function reducer(state: PaymentMethodsState | undefined, action: Action) {\n  return paymentMethodReducer(state, action);\n}\n```\n\nHecho esto tenemos ya una función reductora que debemos registrar en el _store_. Lo que hacemos es decirle a NgRx que cuando llegue una acción de mutado invoque a esta acción pasándole la propiedad del estado encargada gestionar.\n\n`apps\\shop\\src\\app\\payments\\payments.module.ts`\n\n```typescript\nimport * as fromPaymentMethod from './store/payment-method/payment-method.reducer';\n@NgModule({\n  imports: [\n    StoreModule.forFeature(\n      fromPaymentMethod.paymentMethodFeatureKey,\n      fromPaymentMethod.reducer\n    )]\n```\n\nNormalmente el nombre de dicha propiedad se estable en una constante exportada para evitar fallos de tecleo con consecuencias imprevisibles.\n\n# 4 Selectors\n\nHasta ahora hemos definido el estado, y creado las acciones que despachamos conta él. Y hemos creado las funciones reductoras que lo modifican al recibir las acciones. No es poco, pero es la mitad del camino. Nos queda enterarnos de los cambios que se ha realizado. Y para eso nos ofrecen un concepto muy de base de datos `select`.\n\n## 4.1 Create selector\n\nLos selectores, mejor dicho las funciones selectoras, se crean mediante una función factoría igual que hemos visto para las reductoras y las acciones. La diferencia es que aquí las tenemos que llamar a dos niveles: el de la funcionalidad y el de la propiedad específica que nos interesa.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.selectors.ts`\n\n```typescript\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { paymentMethodFeatureKey, State } from './payment-method.reducer';\n\nexport const getPaymentMethodState = createFeatureSelector<State>(\n  paymentMethodFeatureKey\n);\n\nexport const getPaymentMethodsList = createSelector(\n  getPaymentMethodState,\n  (state: State) => state.paymentMethods.list\n);\n\nexport const getPreferredPaymentMethod = createSelector(\n  getPaymentMethodState,\n  (state: State) => state.paymentMethods.preferred\n);\n```\n\nPodemos tener tantos selectores como queramos. Se aconseja crearlos para cada tema de interés que pueda tener el resto de la aplicación. Pueden ser simples vista parciales del estado o complejas transformaciones a gusto del consumidor. NgRx lo hace de forma que optimiza cálculos y llamadas así que nos sugieren que abusemos de ellos y encapsulemos aquí todo el acceso al valor y a los cambios del estado.\n\n## 4.2 Selecting data\n\nUna vez más, si queremos que nuestra aplicación se desacople lo  más posible de ngRx, debemos llamar a los selectores desde un servicio fachada. Así que añadimos al `apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.service.ts` un par de nuevos métodos públicos.\n\n```typescript\n  public getPaymentMethodsList$(): Observable<PaymentMethod[]> {\n    return this.store.select(PaymentMethodSelectors.getPaymentMethodsList);\n  }\n\n  public getPreferredPaymentMethod$(): Observable<string> {\n    return this.store.select(PaymentMethodSelectors.getPreferredPaymentMethod);\n  }\n```\n\n## 4.3 Showing data\n\nEstos métodos devuelven observables a los que suscribirse para mostrar los valores cambiantes del estado. Gracias a la fachada anterior el componente consumidor es completamente inconsciente de la existencia de NgRx.\n\n```typescript\nexport class PaymentsComponent implements OnInit {\n  public paymentMethodsList$: Observable<PaymentMethod[]>;\n  public preferredPaymentMethod$: Observable<string>;\n  constructor(private paymentMethodService: PaymentMethodService) {}\n\n  ngOnInit() {\n    this.paymentMethodsList$ = this.paymentMethodService.getPaymentMethodsList$();\n    this.preferredPaymentMethod$ = this.paymentMethodService.getPreferredPaymentMethod$();\n  }\n}\n```\n\nPor supuesto, desde la _template_ lo tratamos como a cualquier otro dato asíncrono.\n\n```html\n<p>Payment Methods List:</p>\n<pre>{{ paymentMethodsList$ | async | json }}</pre>\n<p>Preferred Payment Method:</p>\n<pre>{{ preferredPaymentMethod$ | async | json }}</pre>\n```\n\n\n# 5 Effects\n\nLas funciones reductoras, como ya se ha dicho, deben ser puras. La idea es que puedan ser auditadas, re-ejecutadas y testeadas sin que necesiten servicios externos ni causen efectos colaterales. Y esto es un problema con la cantidad de **ejecuciones asíncronas en las aplicaciones web**. Cualquier tentación de lanzar una llamada *AJAX* dentro de un reductor debe ser eliminada de inmediato.\n\n> Dos razones: por un lado en Angular se necesita invocar al *httpClient* de alguna manera para realizar la llamada *AJAX*. Y ya que la función reductora no pertenece a ninguna clase Angular, no puede haber constructor que reclame la inyección de la dependencia a dicho servicio. Tampoco las funciones puras tienen permitido usar nada que no venga entre sus argumentos. Por otra parte las funciones puras han de ser predecibles, y una llamada a un servidor remoto no es en absoluto predecible. Puede pasarle de todo, así que **los reductores no son país para procesos asíncronos**.\n\nLa solución que proponen *NgRX* es usar un artificio llamado efecto, porque será encargado de **los efectos secundarios que provocan las las instrucciones asíncronas**. De una forma simplista, diremos que las acciones asíncronas se multiplicarán por tres. El comando que genera la llamada, y los dos potenciales eventos con la respuesta correcta o el error.\n\nPara manejarlo todo incluyen en la librería el módulo `EffectsModule` que ha de registrarse junto al `StoreModule`. Desde ese momento *NgRX* activa un sistema de seguimiento que trata las acciones como un stream de *RxJS* y permite subscribirse a la invocación de dichas acciones y tratarlas adecuadamente.\n\n## 5.1 Install\n\nSegún el proceso que hayas escogido para agregar Ngrx puede que ya tengas los efectos agregados o que tengas que hacerlo manualmente mediante un instrucción como esta:\n\n```bash\nng add @ngrx/effects\n```\nEn cualquier caso aparecerá una instrucción de registro en el módulo raíz o funcional que lo necesite. Por ejemplo el de `PaymentsModule` es:\n\n```typescript\nEffectsModule.forFeature([])\n```\n\n## 5.2 Efecto básico\n\nEn un ejemplo inicial vamos a intentar almacenar y recuperar los métodos de pago desde el _local storage_ del navegador. Esta es claramente una actividad de riesgo (y no lo dogo sólo por el evidente peligro de seguridad). Pero el acceso puede fallar o no estar disponible. Y en el mejor de los casos es un recurso externo que nunca podría ir dentro de una función reductora.\n\nAsí que vamos a ver el trabajo necesario para montar esto _como Redux manda_.\n\n### Acciones\n\nPara empezar agregamos dos nuevas acciones en respuesta a los potenciales eventos que puedan surgir del acceso al _local storage_\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.actions.ts`\n\n```typescript\nexport const loadPaymentMethods = createAction(\n  '[PaymentMethod] Load Payment Methods'\n);\n\nexport const loadPaymentMethodsSucess = createAction(\n  '[PaymentMethod] Load Payment Methods Success',\n  props<{ paymentMethodList: PaymentMethod[] }>()\n);\n\nexport const loadPaymentMethodsError = createAction(\n  '[PaymentMethod] Load Payment Methods Error'\n);\n```\n\nPara simplificarlo no estoy reportando nada del error específico. La `loadPaymentMethodsError` servirá para indicar que el proceso ha fallado. sin más.\n\n### Definición\n\nAhora viene lo bueno. La creación de un efecto. Empezamos como siempre usando una función factoría : `createEffect()`. Sólo que esta vez va asociada a una propiedad pública de un servicio de Angular. Y aquí ya tenemos todos nuestros juguetes disponibles.\n\nPor ejemplo la inyección de dependencias; en el constructor `constructor(private actions$: Actions) {}` solicitamos como argumento un observable de todas las acciones que se hayan despachado en nuestro `store`. Ese _stream_ servirá para escuchar y filtrar las acciones que nos interesen. Después haremos nuestra operativa con todas las llamadas que hagan falta.\n\nSólo un requisito. Al terminar hemos de retornar un observable con una nueva acción que el sistema encauzará para ser despachada. Esto obliga a conocer bien los operadores _RxJs_ que están en la base do todo este montaje. De ahí el uso `concatMap()` y por supuesto del creador observable más básico: `of()`.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.effects.ts`\n\n```typescript\npublic loadPaymentMethods$ = createEffect(() =>\n  this.actions$.pipe(\n    ofType(PaymentMethodActions.loadPaymentMethods),\n    concatMap(() => {\n      try {\n        let storedList = JSON.parse(\n          window.localStorage.getItem(this.storeKey)\n        );\n        if (!storedList) {\n          storedList = initialState.paymentMethods.list;\n          window.localStorage.setItem(\n            this.storeKey,\n            JSON.stringify(storedList)\n          );\n        }\n        return of(\n          PaymentMethodActions.loadPaymentMethodsSucess({\n            paymentMethodList: storedList\n          })\n        );\n      } catch (e) {\n        return of(PaymentMethodActions.loadPaymentMethodsError);\n      }\n    })\n  )\n);\n```\nTómate tu tiempo para entender este efecto, y recuerda que por raro que te parezca al principio, te acabarás acostumbrando muy pronto porque siempre sigue el mismo esquema.\n\n### Reducer y Register\n\nPor si te olvidabas, todo este trabajo no altera para nada al estado. Recuerda que sólo las reductoras asociadas a las acciones lo hacen. Así que incrementamos nuestro código con nuevos casos para el reductor.\n\n`apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts`\n\n```typescript\non(\n    PaymentMethodActions.loadPaymentMethodsSucess,\n    (state, { paymentMethodList }) => {\n      return {\n        ...state,\n        paymentMethods: { ...state.paymentMethods, list: paymentMethodList }\n      };\n    }\n  ),\n  on(PaymentMethodActions.loadPaymentMethodsError, state => state),\n```\n\nY para finalizar registramos la clase que contiene al efecto (como un provider especial) en el módulo de efectos.\n\n`apps\\shop\\src\\app\\payments\\payments.module.ts`\n\n```typescript\nEffectsModule.forFeature([PaymentMethodEffects])\n```\n\n## 5.3 Api async\n\nUna vez familiarizado con la sintaxis de los efectos básicos, es hora de pasar a los que sin duda se utilizan más: los efectos sobre servicios asíncronos. Es decir casi todas las llamadas a un API. Algo muy sencillo podría ser agregar a nuestra tienda un converso de divisas para saber los precios en distintas monedas.\n\n```yaml\nAs a: customer,\n  I want: to see the current exchange rate in several currencies\n  so that: I can decide\n```\n\n### Actions\n\nA estas alturas te pido un último esfuerzo para que interpretes el siguiente código:\n\n`apps\\shop\\src\\app\\rates\\store\\exchange-rate\\exchange-rate.actions.ts`\n\n```typescript\nexport const loadExchangeRates = createAction(\n  '[ExchangeRate] Load ExchangeRates'\n);\n\nexport const loadExchangeRatesSuccess = createAction(\n  '[ExchangeRate] Load ExchangeRates Success',\n  props<{ rates: any }>()\n);\n\nexport const loadExchangeRatesError = createAction(\n  '[ExchangeRate] Load ExchangeRates Error',\n  props<{ rates: any }>()\n);\n```\n\n\nEfectivamente, para cada llamada usaremos tres acciones. El comando que la inicia y los dos eventos que pueden ocurrir _success and error_.\n\n### Effect\n\n`apps\\shop\\src\\app\\rates\\store\\exchange-rate\\exchange-rate.effects.ts`\n\n```typescript\nexport class ExchangeRateEffects {\n  public loadExchangeRates$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ExchangeRateActions.loadExchangeRates),\n      concatMap(() =>\n        this.http.get<any>('https://api.exchangeratesapi.io/latest').pipe(\n          map(res =>\n            ExchangeRateActions.loadExchangeRatesSuccess({ rates: res.rates })\n          ),\n          catchError(err =>\n            of(ExchangeRateActions.loadExchangeRatesError({ rates: err }))\n          )\n        )))\n  );\n  constructor(private actions$: Actions, private http: HttpClient) {}\n}\n```\n\nParadójicamente un efecto que incluya una llamada _http_ es más sencillo, pues la naturaleza asíncrona de _Ajax_ junto con el uso de _Observables_ en `httpClient` nos dejan medio trabajo hecho.\n\nLo que realmente hacemos es encauzar el flujo de acciones `pipe(concatMap())` hacia un flujo de respuestas _http_ `this.http.get()`. Pero claro esto es trampa, así que de nuevo encauzamos la respuesta hacia una acción `pipe(map(res=> actionSuccess(res)))`. Cuando la respuesta no llega volvemos a lo que ya sabemos, crear un nuevo observable con `of(actionError(err))`.\n\nAquí lo dejamos. Soy consciente de que Redux es complejo. Soy consciente de que NgRx añade mucho código de infraestructura. Pero también te animo a revisar este artículo y practicar con un caso sencillo antes de tomar cualquier decisión. Incluir NgRx o no hacerlo tiene un alto impacto en el mantenimiento de tu proyecto. No te tires a de cabeza ni lo rechaces de plano.\n\nDescarga y revisa la aplicación de ejemplo. Si la dominas, entonces es que ya tienes los conocimientos para gestionar de manera centralizada, auditable y predecible el estado de tus programas. El patrón Redux lucirá más cuanto más grande y compleja sea tu aplicación.\n\nContinúa tu formación avanzada para crear aplicaciones [PWA, entre la web y las apps con Angular](../pwa-entre-la-web-y-las-apps-con-angular) y verás como aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-15-El-patron-Redux-con-NgRx-en-Angular","published":1,"updated":"2023-07-02T10:25:58.475Z","__permalink":"el-patron-redux-con-ngrx-en-angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fc000te096bafmefpa","content":"<p><img src=\"/images/tutorial-angular-15_ngrx.png\" alt=\"el-patron-redux-con-ngrx-en-angular\"></p>\n<p>Le pasa a todas las aplicaciones, crecen y crecen en funcionalidad y complejidad. En Angular estamos preparados para modularizar, componentizar e inyectar servicios. Pero con grandes aplicaciones, o con grandes equipos, parece que nada es suficiente. Se necesita una <strong>gestión del estado centralizada</strong> como la del <a href=\"(../flujo-reactivo-unidireccional-con-Angular-y-RxJs/)\">patrón Redux</a>.</p>\n<p>Si decíamos que <strong>Redux no hace rápido lo simple, sino mantenible lo complejo</strong>, ahora te digo que <strong>NgRx no hace rápido a Redux, sino mantenible su boilerplate.</strong> Así que si tienes delante un desarrollo funcionalmente complejo, te recomiendo que uses <em>NgRX</em>; la solución estándar para implementar <strong>Redux con Angular</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo del código tal como quedó en <a href=\"../flujo-reactivo-unidireccional-con-Angular-y-RxJs/\">Redux, flujo reactivo unidireccional con Angular y RxJs</a>. Al finalizar tendrás una aplicación que gestiona centralizadamente los cambios, que permite conocer qué ocurrió y predecir lo que ocurrirá usando NgRx.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Instalacion-y-configuracion\"><a href=\"#1-Instalacion-y-configuracion\" class=\"headerlink\" title=\"1 Instalación y configuración\"></a>1 Instalación y configuración</h1><p><strong>NgRx</strong> es el estándar de facto para implementar <em>Redux</em> en Angular. Está basada en <em>RxJS</em> y es una librería modular con todo lo necesario para crear grandes aplicaciones. Esto son los módulos que la componen:</p>\n<ul>\n<li><strong>store</strong>: Es el módulo principal con el administrador del estado centralizado y reactivo.</li>\n<li><strong>store-devtools</strong>: Instrumentación para depurar desde el navegador. Vale su peso en oro.</li>\n<li><strong>router-Store</strong> : Almacena el estado del <em>router</em> de Angular en el <em>store</em>, tratando cada evento como una acción Redux.</li>\n<li><strong>effects</strong>: Los reductores son funciones puras sin efectos colaterales. Este módulo es la solución para comandos asíncronos.</li>\n<li><strong>schematics, entity, ngrx-data</strong>: Son otros módulos opcionales con ayudas y plantillas de NgRX.</li>\n</ul>\n<h2 id=\"1-1-Instalacion-de-NgRx\"><a href=\"#1-1-Instalacion-de-NgRx\" class=\"headerlink\" title=\"1.1 Instalación de NgRx\"></a>1.1 Instalación de NgRx</h2><p>Para agregar <em>NgRx</em> a un app te propongo que uses los <em>schematics</em> de NxDev pues disponen de más opciones de configuración inmediata. Aunque la alternativa con el CLI también es suficiente para empezar.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">with Nx.dev tools</span></span><br><span class=\"line\">ng g @nrwl/angular:ngrx app --module=apps/shop/src/app/app.module.ts --root --minimal</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">with only CLI</span></span><br><span class=\"line\">ng add @ngrx/store</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Con esto habrás instalado y configurado NgRx y tu <code>AppModule</code> tendrá algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">RouterModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">StoreModule</span>.<span class=\"title function_\">forRoot</span>(</span><br><span class=\"line\">      &#123;&#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">metaReducers</span>: !environment.<span class=\"property\">production</span> ? [] : [],</span><br><span class=\"line\">        <span class=\"attr\">runtimeChecks</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">strictActionImmutability</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">strictStateImmutability</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"title class_\">EffectsModule</span>.<span class=\"title function_\">forRoot</span>([])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>El código generado por cualquiera de los dos schematics no es para todos los gustos. Tómalo como un punto de partida y crea la estructura que mejor te encaje.</p>\n</blockquote>\n<h2 id=\"1-2-DevTools\"><a href=\"#1-2-DevTools\" class=\"headerlink\" title=\"1.2 DevTools\"></a>1.2 DevTools</h2><p>La razón principal de usar Redux es la capacidad que da al programador para comprender cómo el estado de sus variables ha variado en el tiempo. Es decir ¿Cómo hemos llegado hasta aquí?. Esta es claramente una cuestión de análisis y depuración de código. Y para ello necesitamos herramientas de desarrollador. Presentamos las <a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en\"><strong>Redux DevTools for Chrome</strong></a>.</p>\n<p>Este es un plugin que se engancha a cualquier solución Redux (no sólo NgRx, ni siquiera sólo Angular) y que permite explorar el valor del estado y lo más interesante: la secuencia de acciones que se ha despachado y el efecto que cada una tuvo sobre el valor del estado.</p>\n<p>Para realizar el enganche sirve la línea que verás también en el <code>AppModule</code>. La cual activa la monitorización cuando no estamos en producción. Normal, esto es un herramienta para el desarrollador, nunca para el usuario.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!environment.<span class=\"property\">production</span> ? <span class=\"title class_\">StoreDevtoolsModule</span>.<span class=\"title function_\">instrument</span>() : [],</span><br></pre></td></tr></table></figure>\n<p>Para verlo en funcionamiento tienes que ejecutar y abrir tu app en Chrome. Después en la pantalla de inspección del código aparecerá una pestaña al final de todo (más allá de Network y Application…) llamada Redux. La interfaz es muy intuitiva; no tardarás en hacerte con ella. aunque ahora mismo un poco pobre…</p>\n<h2 id=\"1-3-Router\"><a href=\"#1-3-Router\" class=\"headerlink\" title=\"1.3 Router\"></a>1.3 Router</h2><p>Para darle algo de contenido y de paso acercarnos a las capacidades de Redux y NgRx vamos a conectarle el <code>RouterModule</code> de la aplicación. Para ello sirve la siguiente línea que tienes que poner también en la importaciones del <code>AppModule</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">StoreRouterConnectingModule</span>.<span class=\"title function_\">forRoot</span>(&#123; <span class=\"attr\">routerState</span>: <span class=\"title class_\">RouterState</span>.<span class=\"property\">Minimal</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>A partir de este momento cada evento de navegación del <em>router</em> va a generar una acción que <em>NgRx</em> recogerá y registrará. Esas acciones y su impacto en el estado se pueden visualizar con el plugin de Redux. Podrás ver los cambios y reproducirlos hacia adelante y atrás. Es como viajar en el tiempo dentro de la ejecución de app.</p>\n<h1 id=\"2-Actions\"><a href=\"#2-Actions\" class=\"headerlink\" title=\"2 Actions\"></a>2 Actions</h1><p>Hasta el momento ha sido todo muy de infraestructura, pero es hora de que hagamos algo funcional. Un ejemplo sería agregar a nuestra app un módulo para la gestión de medios de pago de un usuario. Algo así:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">add</span> <span class=\"string\">payment</span> <span class=\"string\">methods</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">pay</span> <span class=\"string\">with</span> <span class=\"string\">them</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">select</span> <span class=\"string\">one</span> <span class=\"string\">as</span> <span class=\"string\">preferred</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">make</span> <span class=\"string\">fewer</span> <span class=\"string\">clicks</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">change</span> <span class=\"string\">de</span> <span class=\"string\">expiration</span> <span class=\"string\">date</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">get</span> <span class=\"string\">my</span> <span class=\"string\">cards</span> <span class=\"string\">up</span> <span class=\"string\">to</span> <span class=\"string\">date</span></span><br></pre></td></tr></table></figure>\n\n<p>Para ello, y valiendo una vez más de los schematics vamos a agregar una <em>feature</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m payments --project=shop --module=app.module.ts --routing --route=payments</span><br><span class=\"line\">ng g @ngrx/schematics:feature payments/store/paymentMethod --project=shop --module=payments/payments.module.ts --no-flat --no-spec --creators</span><br></pre></td></tr></table></figure>\n\n<p>Esto habrá generado un buen montón de código. Pero todo demasiado genérico. Vamos a empezar a adaptarlo a nuestro problema aportando un modelo de datos.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.model.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PaymentMethod</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">expiration</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PaymentMethods</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">list</span>: <span class=\"title class_\">PaymentMethod</span>[];</span><br><span class=\"line\">  <span class=\"attr\">preferred</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Y ahora sí, vamos a por las acciones.</p>\n<h2 id=\"2-1-Create\"><a href=\"#2-1-Create\" class=\"headerlink\" title=\"2.1 Create\"></a>2.1 Create</h2><p>Uno de los parámetros usados durante la generación de la <em>feature</em> fue <code>--creators</code>. Esto le indicó a NgRx que preferimos usar funciones en lugar de clases para definir nuestras acciones. Así que en el fichero de definición de acciones te encontrarás con llamadas a una función como esta <code>createAction(&#39;Descripción de la acción&#39;, props&lt;&#123; parametro: Tipo &#125;&gt;() )</code>.<br>Con esto tenemos que cubrir los dos requerimientos de Redux: las acciones han de tener un tipo y una <em>payload</em>.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.actions.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadPaymentMethods = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Load PaymentMethods&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addPaymentMethod = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Add PaymentMethod&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">newPaymentMethod</span>: <span class=\"title class_\">PaymentMethod</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> selectPreferredPaymentMethod = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Select preferred PaymentMethod&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">preferredId</span>: <span class=\"built_in\">string</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> setExpirationPaymentMethod = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Set Expiration Date on PaymentMethod&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">updatedPaymentMethod</span>: <span class=\"title class_\">PaymentMethod</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>El código puede resultar extraño a primera vista; pero es siempre igual y acabas familiarizando muy rápido. Esencialmente se trata de dar un nombre a la acción y luego configurarla. Lo imprescindible va a ser un string que la describa. Es recomendable seguir el convenio con el formato <code>[Origen] Nombre acción descriptivo</code>.</p>\n<p>El segundo argumento de la función <code>creteAction</code> es a su vez otra función. La parte interesante de la función <code>propos&lt;&gt;()</code> está en su tipo genérico. Es ahí dónde definimos el tipo de datos de la <em>payload</em> que puede transportar la acción.</p>\n<h2 id=\"2-2-Dispatch\"><a href=\"#2-2-Dispatch\" class=\"headerlink\" title=\"2.2 Dispatch\"></a>2.2 Dispatch</h2><p>Definir el catálogo de acciones es la primera parte del problema. Ahora nos toca invocarlas, o como se dice en el argot Redux: despacharlas. Para ello voy a crear un servicio auxiliar que encapsule toda la interacción con NgRx. Es una implementación del patrón fachada para unificar y facilitar el trabajo con Redux desde fuera.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.service.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Store</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">PaymentMethodActions</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./payment-method.actions&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PaymentMethod</span>, <span class=\"title class_\">PaymentMethods</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./payment-method.model&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentMethodService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> store: Store&lt;PaymentMethods&gt;</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y aquí puedo crear los métodos funcionales que despachen las acciones sobre el <em>store</em> de NgRx.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">loadPaymentMethods</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">loadPaymentMethods</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">addPaymentMethod</span>(<span class=\"params\">newPaymentMethod: PaymentMethod</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(</span><br><span class=\"line\">      <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">addPaymentMethod</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">newPaymentMethod</span>: &#123; ...newPaymentMethod &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">selectPreferredPaymentMethod</span>(<span class=\"params\">preferredId: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(</span><br><span class=\"line\">    <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">selectPreferredPaymentMethod</span>(&#123; preferredId &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">setExpirationPaymentMethod</span>(<span class=\"params\">updatedPaymentMethod: PaymentMethod</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(</span><br><span class=\"line\">    <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">setExpirationPaymentMethod</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">updatedPaymentMethod</span>: &#123; ...updatedPaymentMethod &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Es necesario enviar siempre un clon de los argumentos para desconectarlos del origen. En Redux queremos tener la fuente única de la verdad, y eso sólo es posible si los argumentos que recibimos están sellados y aislados del resto del mundo.</p>\n<p>Para una primera aproximación, reconozco que es mucho código para tan poca funcionalidad. Claro que para quien use esta fachada el mundo es mucho más sencillo. Y por dentro es muy potente y controlable.</p>\n<p><code>apps\\shop\\src\\app\\payments\\payments.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> paymentMethodService: PaymentMethodService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">loadPaymentMethods</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">visa</span>: <span class=\"title class_\">PaymentMethod</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1234 7896 3214 6549&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">expiration</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">6</span>-<span class=\"number\">1</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">addPaymentMethod</span>(visa);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">selectPreferredPaymentMethod</span>(visa.<span class=\"property\">id</span>);</span><br><span class=\"line\">    visa.<span class=\"property\">expiration</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2021</span>, <span class=\"number\">12</span>-<span class=\"number\">1</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">setExpirationPaymentMethod</span>(visa);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-State-reducer\"><a href=\"#3-State-reducer\" class=\"headerlink\" title=\"3 State reducer\"></a>3 State reducer</h1><h2 id=\"3-1-State\"><a href=\"#3-1-State\" class=\"headerlink\" title=\"3.1 State\"></a>3.1 State</h2><p>El estado en <em>redux</em> es un objeto tipado a partir de una interfaz, inicialmente llamada <code>State</code> a secas, aunque yo prefiero identificarla como <code>PaymentMethodsState</code>. Tendrá propiedades para almacenar objetos más o menos complejos. Cada propiedad tendrá su propio tipo complejo y necesita un estado inicial. Eso es lo que hace este código:</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> paymentMethodFeatureKey = <span class=\"string\">&#x27;paymentMethod&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PaymentMethodsState</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">paymentMethods</span>: <span class=\"title class_\">PaymentMethods</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">initialState</span>: <span class=\"title class_\">PaymentMethodsState</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">paymentMethods</span>: &#123; <span class=\"attr\">list</span>: [], <span class=\"attr\">preferred</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Create-function\"><a href=\"#3-2-Create-function\" class=\"headerlink\" title=\"3.2 Create function\"></a>3.2 Create function</h2><p>Pero todo estado necesita su reductor, y una vez más lo crearemos mediante una función. En este caso es la <code>createReducer(state, on(action1, function1) )</code>. Su encarnación más básica tiene la siguiente pinta:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> paymentMethodReducer = <span class=\"title function_\">createReducer</span>(</span><br><span class=\"line\">  initialState,</span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethods</span>, <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Lo que hace es definir una serie de <code>hooks</code> para enganchar funciones de mutación en respuesta a las acciones despachadas. Empezamos con la acción <code>loadPaymentMethods</code> y en este caso no por ahora hacemos ninguna mutación al estado. Es un reductor transparente e innecesario. Lo pongo para familiarizarnos con la sintaxis.</p>\n<p>Vamos a algo más complejo y útil como la acción <code>addPaymentMethod</code>. Funcionalmente queremos agregar el nuevo método de pago que viene en su carga al array actual de métodos de pago. Nada complejo, ya sí deben ser todas las funciones reductoras.</p>\n<p>Pero, siempre hay un pero, resulta que <strong>una función reductora debe ser también una función pura</strong>. Y esto nos obliga a mutar el estado sin mutar los argumentos; es decir, nos obliga a clonar el estado y sus propiedades antes de cambiarlas.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">on</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">addPaymentMethod</span>, <span class=\"function\">(<span class=\"params\">state, &#123; newPaymentMethod &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...state,</span><br><span class=\"line\">    <span class=\"attr\">paymentMethods</span>: &#123;</span><br><span class=\"line\">      ...state.<span class=\"property\">paymentMethods</span>,</span><br><span class=\"line\">      <span class=\"attr\">list</span>: [...state.<span class=\"property\">paymentMethods</span>.<span class=\"property\">list</span>, newPaymentMethod]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>El proceso de clonado puedes hacerlo con mayor o menor profundidad, pero al menos un clonado superficial del estado es obligatorio. Yo aquí he optado por clonar incluso el array interno, aunque no sea estrictamente obligatorio.</p>\n<h2 id=\"3-3-Register-in-Store\"><a href=\"#3-3-Register-in-Store\" class=\"headerlink\" title=\"3.3 Register in Store\"></a>3.3 Register in Store</h2><p>El resultado de esta invocación a <code>createReducer()</code> se será a su vez otra función que yo almacené en la contante <code>paymentMethodReducer</code>. Por requerimiento del proceso de empaquetado con <code>webpack</code> que nada tiene que ver con NgRx, estamos obligados a exportar la función mediante un <em>wrapper</em> como este:</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state: PaymentMethodsState | <span class=\"literal\">undefined</span>, action: Action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">paymentMethodReducer</span>(state, action);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Hecho esto tenemos ya una función reductora que debemos registrar en el <em>store</em>. Lo que hacemos es decirle a NgRx que cuando llegue una acción de mutado invoque a esta acción pasándole la propiedad del estado encargada gestionar.</p>\n<p><code>apps\\shop\\src\\app\\payments\\payments.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fromPaymentMethod <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/payment-method/payment-method.reducer&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">StoreModule</span>.<span class=\"title function_\">forFeature</span>(</span><br><span class=\"line\">      fromPaymentMethod.<span class=\"property\">paymentMethodFeatureKey</span>,</span><br><span class=\"line\">      fromPaymentMethod.<span class=\"property\">reducer</span></span><br><span class=\"line\">    )]</span><br></pre></td></tr></table></figure>\n\n<p>Normalmente el nombre de dicha propiedad se estable en una constante exportada para evitar fallos de tecleo con consecuencias imprevisibles.</p>\n<h1 id=\"4-Selectors\"><a href=\"#4-Selectors\" class=\"headerlink\" title=\"4 Selectors\"></a>4 Selectors</h1><p>Hasta ahora hemos definido el estado, y creado las acciones que despachamos conta él. Y hemos creado las funciones reductoras que lo modifican al recibir las acciones. No es poco, pero es la mitad del camino. Nos queda enterarnos de los cambios que se ha realizado. Y para eso nos ofrecen un concepto muy de base de datos <code>select</code>.</p>\n<h2 id=\"4-1-Create-selector\"><a href=\"#4-1-Create-selector\" class=\"headerlink\" title=\"4.1 Create selector\"></a>4.1 Create selector</h2><p>Los selectores, mejor dicho las funciones selectoras, se crean mediante una función factoría igual que hemos visto para las reductoras y las acciones. La diferencia es que aquí las tenemos que llamar a dos niveles: el de la funcionalidad y el de la propiedad específica que nos interesa.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.selectors.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFeatureSelector, createSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; paymentMethodFeatureKey, <span class=\"title class_\">State</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./payment-method.reducer&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getPaymentMethodState = createFeatureSelector&lt;<span class=\"title class_\">State</span>&gt;(</span><br><span class=\"line\">  paymentMethodFeatureKey</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getPaymentMethodsList = <span class=\"title function_\">createSelector</span>(</span><br><span class=\"line\">  getPaymentMethodState,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">state: State</span>) =&gt;</span> state.<span class=\"property\">paymentMethods</span>.<span class=\"property\">list</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getPreferredPaymentMethod = <span class=\"title function_\">createSelector</span>(</span><br><span class=\"line\">  getPaymentMethodState,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">state: State</span>) =&gt;</span> state.<span class=\"property\">paymentMethods</span>.<span class=\"property\">preferred</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>Podemos tener tantos selectores como queramos. Se aconseja crearlos para cada tema de interés que pueda tener el resto de la aplicación. Pueden ser simples vista parciales del estado o complejas transformaciones a gusto del consumidor. NgRx lo hace de forma que optimiza cálculos y llamadas así que nos sugieren que abusemos de ellos y encapsulemos aquí todo el acceso al valor y a los cambios del estado.</p>\n<h2 id=\"4-2-Selecting-data\"><a href=\"#4-2-Selecting-data\" class=\"headerlink\" title=\"4.2 Selecting data\"></a>4.2 Selecting data</h2><p>Una vez más, si queremos que nuestra aplicación se desacople lo  más posible de ngRx, debemos llamar a los selectores desde un servicio fachada. Así que añadimos al <code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.service.ts</code> un par de nuevos métodos públicos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">getPaymentMethodsList$</span>(): <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">PaymentMethod</span>[]&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">select</span>(<span class=\"title class_\">PaymentMethodSelectors</span>.<span class=\"property\">getPaymentMethodsList</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">getPreferredPaymentMethod$</span>(): <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">string</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">select</span>(<span class=\"title class_\">PaymentMethodSelectors</span>.<span class=\"property\">getPreferredPaymentMethod</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-Showing-data\"><a href=\"#4-3-Showing-data\" class=\"headerlink\" title=\"4.3 Showing data\"></a>4.3 Showing data</h2><p>Estos métodos devuelven observables a los que suscribirse para mostrar los valores cambiantes del estado. Gracias a la fachada anterior el componente consumidor es completamente inconsciente de la existencia de NgRx.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">paymentMethodsList$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">PaymentMethod</span>[]&gt;;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">preferredPaymentMethod$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> paymentMethodService: PaymentMethodService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodsList$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">getPaymentMethodsList$</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">preferredPaymentMethod$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">getPreferredPaymentMethod$</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Por supuesto, desde la <em>template</em> lo tratamos como a cualquier otro dato asíncrono.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Payment Methods List:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; paymentMethodsList$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Preferred Payment Method:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; preferredPaymentMethod$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"5-Effects\"><a href=\"#5-Effects\" class=\"headerlink\" title=\"5 Effects\"></a>5 Effects</h1><p>Las funciones reductoras, como ya se ha dicho, deben ser puras. La idea es que puedan ser auditadas, re-ejecutadas y testeadas sin que necesiten servicios externos ni causen efectos colaterales. Y esto es un problema con la cantidad de <strong>ejecuciones asíncronas en las aplicaciones web</strong>. Cualquier tentación de lanzar una llamada <em>AJAX</em> dentro de un reductor debe ser eliminada de inmediato.</p>\n<blockquote>\n<p>Dos razones: por un lado en Angular se necesita invocar al <em>httpClient</em> de alguna manera para realizar la llamada <em>AJAX</em>. Y ya que la función reductora no pertenece a ninguna clase Angular, no puede haber constructor que reclame la inyección de la dependencia a dicho servicio. Tampoco las funciones puras tienen permitido usar nada que no venga entre sus argumentos. Por otra parte las funciones puras han de ser predecibles, y una llamada a un servidor remoto no es en absoluto predecible. Puede pasarle de todo, así que <strong>los reductores no son país para procesos asíncronos</strong>.</p>\n</blockquote>\n<p>La solución que proponen <em>NgRX</em> es usar un artificio llamado efecto, porque será encargado de <strong>los efectos secundarios que provocan las las instrucciones asíncronas</strong>. De una forma simplista, diremos que las acciones asíncronas se multiplicarán por tres. El comando que genera la llamada, y los dos potenciales eventos con la respuesta correcta o el error.</p>\n<p>Para manejarlo todo incluyen en la librería el módulo <code>EffectsModule</code> que ha de registrarse junto al <code>StoreModule</code>. Desde ese momento <em>NgRX</em> activa un sistema de seguimiento que trata las acciones como un stream de <em>RxJS</em> y permite subscribirse a la invocación de dichas acciones y tratarlas adecuadamente.</p>\n<h2 id=\"5-1-Install\"><a href=\"#5-1-Install\" class=\"headerlink\" title=\"5.1 Install\"></a>5.1 Install</h2><p>Según el proceso que hayas escogido para agregar Ngrx puede que ya tengas los efectos agregados o que tengas que hacerlo manualmente mediante un instrucción como esta:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @ngrx/effects</span><br></pre></td></tr></table></figure>\n<p>En cualquier caso aparecerá una instrucción de registro en el módulo raíz o funcional que lo necesite. Por ejemplo el de <code>PaymentsModule</code> es:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">EffectsModule</span>.<span class=\"title function_\">forFeature</span>([])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-2-Efecto-basico\"><a href=\"#5-2-Efecto-basico\" class=\"headerlink\" title=\"5.2 Efecto básico\"></a>5.2 Efecto básico</h2><p>En un ejemplo inicial vamos a intentar almacenar y recuperar los métodos de pago desde el <em>local storage</em> del navegador. Esta es claramente una actividad de riesgo (y no lo dogo sólo por el evidente peligro de seguridad). Pero el acceso puede fallar o no estar disponible. Y en el mejor de los casos es un recurso externo que nunca podría ir dentro de una función reductora.</p>\n<p>Así que vamos a ver el trabajo necesario para montar esto <em>como Redux manda</em>.</p>\n<h3 id=\"Acciones\"><a href=\"#Acciones\" class=\"headerlink\" title=\"Acciones\"></a>Acciones</h3><p>Para empezar agregamos dos nuevas acciones en respuesta a los potenciales eventos que puedan surgir del acceso al <em>local storage</em></p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.actions.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadPaymentMethods = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Load Payment Methods&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadPaymentMethodsSucess = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Load Payment Methods Success&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">paymentMethodList</span>: <span class=\"title class_\">PaymentMethod</span>[] &#125;&gt;()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadPaymentMethodsError = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Load Payment Methods Error&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>Para simplificarlo no estoy reportando nada del error específico. La <code>loadPaymentMethodsError</code> servirá para indicar que el proceso ha fallado. sin más.</p>\n<h3 id=\"Definicion\"><a href=\"#Definicion\" class=\"headerlink\" title=\"Definición\"></a>Definición</h3><p>Ahora viene lo bueno. La creación de un efecto. Empezamos como siempre usando una función factoría : <code>createEffect()</code>. Sólo que esta vez va asociada a una propiedad pública de un servicio de Angular. Y aquí ya tenemos todos nuestros juguetes disponibles.</p>\n<p>Por ejemplo la inyección de dependencias; en el constructor <code>constructor(private actions$: Actions) &#123;&#125;</code> solicitamos como argumento un observable de todas las acciones que se hayan despachado en nuestro <code>store</code>. Ese <em>stream</em> servirá para escuchar y filtrar las acciones que nos interesen. Después haremos nuestra operativa con todas las llamadas que hagan falta.</p>\n<p>Sólo un requisito. Al terminar hemos de retornar un observable con una nueva acción que el sistema encauzará para ser despachada. Esto obliga a conocer bien los operadores <em>RxJs</em> que están en la base do todo este montaje. De ahí el uso <code>concatMap()</code> y por supuesto del creador observable más básico: <code>of()</code>.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.effects.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> loadPaymentMethods$ = <span class=\"title function_\">createEffect</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span>.<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">ofType</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethods</span>),</span><br><span class=\"line\">    <span class=\"title function_\">concatMap</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> storedList = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(</span><br><span class=\"line\">          <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">storeKey</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!storedList) &#123;</span><br><span class=\"line\">          storedList = initialState.<span class=\"property\">paymentMethods</span>.<span class=\"property\">list</span>;</span><br><span class=\"line\">          <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">setItem</span>(</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">storeKey</span>,</span><br><span class=\"line\">            <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(storedList)</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">of</span>(</span><br><span class=\"line\">          <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">loadPaymentMethodsSucess</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">paymentMethodList</span>: storedList</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">of</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethodsError</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Tómate tu tiempo para entender este efecto, y recuerda que por raro que te parezca al principio, te acabarás acostumbrando muy pronto porque siempre sigue el mismo esquema.</p>\n<h3 id=\"Reducer-y-Register\"><a href=\"#Reducer-y-Register\" class=\"headerlink\" title=\"Reducer y Register\"></a>Reducer y Register</h3><p>Por si te olvidabas, todo este trabajo no altera para nada al estado. Recuerda que sólo las reductoras asociadas a las acciones lo hacen. Así que incrementamos nuestro código con nuevos casos para el reductor.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">on</span>(</span><br><span class=\"line\">    <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethodsSucess</span>,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">state, &#123; paymentMethodList &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        <span class=\"attr\">paymentMethods</span>: &#123; ...state.<span class=\"property\">paymentMethods</span>, <span class=\"attr\">list</span>: paymentMethodList &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethodsError</span>, <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state),</span><br></pre></td></tr></table></figure>\n\n<p>Y para finalizar registramos la clase que contiene al efecto (como un provider especial) en el módulo de efectos.</p>\n<p><code>apps\\shop\\src\\app\\payments\\payments.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">EffectsModule</span>.<span class=\"title function_\">forFeature</span>([<span class=\"title class_\">PaymentMethodEffects</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-3-Api-async\"><a href=\"#5-3-Api-async\" class=\"headerlink\" title=\"5.3 Api async\"></a>5.3 Api async</h2><p>Una vez familiarizado con la sintaxis de los efectos básicos, es hora de pasar a los que sin duda se utilizan más: los efectos sobre servicios asíncronos. Es decir casi todas las llamadas a un API. Algo muy sencillo podría ser agregar a nuestra tienda un converso de divisas para saber los precios en distintas monedas.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">the</span> <span class=\"string\">current</span> <span class=\"string\">exchange</span> <span class=\"string\">rate</span> <span class=\"string\">in</span> <span class=\"string\">several</span> <span class=\"string\">currencies</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">decide</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h3><p>A estas alturas te pido un último esfuerzo para que interpretes el siguiente código:</p>\n<p><code>apps\\shop\\src\\app\\rates\\store\\exchange-rate\\exchange-rate.actions.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadExchangeRates = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[ExchangeRate] Load ExchangeRates&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadExchangeRatesSuccess = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[ExchangeRate] Load ExchangeRates Success&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">rates</span>: <span class=\"built_in\">any</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadExchangeRatesError = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[ExchangeRate] Load ExchangeRates Error&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">rates</span>: <span class=\"built_in\">any</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n<p>Efectivamente, para cada llamada usaremos tres acciones. El comando que la inicia y los dos eventos que pueden ocurrir <em>success and error</em>.</p>\n<h3 id=\"Effect\"><a href=\"#Effect\" class=\"headerlink\" title=\"Effect\"></a>Effect</h3><p><code>apps\\shop\\src\\app\\rates\\store\\exchange-rate\\exchange-rate.effects.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExchangeRateEffects</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> loadExchangeRates$ = <span class=\"title function_\">createEffect</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span>.<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">      <span class=\"title function_\">ofType</span>(<span class=\"title class_\">ExchangeRateActions</span>.<span class=\"property\">loadExchangeRates</span>),</span><br><span class=\"line\">      <span class=\"title function_\">concatMap</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"string\">&#x27;https://api.exchangeratesapi.io/latest&#x27;</span>).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">          <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"title class_\">ExchangeRateActions</span>.<span class=\"title function_\">loadExchangeRatesSuccess</span>(&#123; <span class=\"attr\">rates</span>: res.<span class=\"property\">rates</span> &#125;)</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          <span class=\"title function_\">catchError</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"title function_\">of</span>(<span class=\"title class_\">ExchangeRateActions</span>.<span class=\"title function_\">loadExchangeRatesError</span>(&#123; <span class=\"attr\">rates</span>: err &#125;))</span><br><span class=\"line\">          )</span><br><span class=\"line\">        )))</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> actions$: Actions, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Paradójicamente un efecto que incluya una llamada <em>http</em> es más sencillo, pues la naturaleza asíncrona de <em>Ajax</em> junto con el uso de <em>Observables</em> en <code>httpClient</code> nos dejan medio trabajo hecho.</p>\n<p>Lo que realmente hacemos es encauzar el flujo de acciones <code>pipe(concatMap())</code> hacia un flujo de respuestas <em>http</em> <code>this.http.get()</code>. Pero claro esto es trampa, así que de nuevo encauzamos la respuesta hacia una acción <code>pipe(map(res=&gt; actionSuccess(res)))</code>. Cuando la respuesta no llega volvemos a lo que ya sabemos, crear un nuevo observable con <code>of(actionError(err))</code>.</p>\n<p>Aquí lo dejamos. Soy consciente de que Redux es complejo. Soy consciente de que NgRx añade mucho código de infraestructura. Pero también te animo a revisar este artículo y practicar con un caso sencillo antes de tomar cualquier decisión. Incluir NgRx o no hacerlo tiene un alto impacto en el mantenimiento de tu proyecto. No te tires a de cabeza ni lo rechaces de plano.</p>\n<p>Descarga y revisa la aplicación de ejemplo. Si la dominas, entonces es que ya tienes los conocimientos para gestionar de manera centralizada, auditable y predecible el estado de tus programas. El patrón Redux lucirá más cuanto más grande y compleja sea tu aplicación.</p>\n<p>Continúa tu formación avanzada para crear aplicaciones <a href=\"../pwa-entre-la-web-y-las-apps-con-angular\">PWA, entre la web y las apps con Angular</a> y verás como aprendes a programar con Angular 8.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-15_ngrx.png\" alt=\"el-patron-redux-con-ngrx-en-angular\"></p>\n<p>Le pasa a todas las aplicaciones, crecen y crecen en funcionalidad y complejidad. En Angular estamos preparados para modularizar, componentizar e inyectar servicios. Pero con grandes aplicaciones, o con grandes equipos, parece que nada es suficiente. Se necesita una <strong>gestión del estado centralizada</strong> como la del <a href=\"(../flujo-reactivo-unidireccional-con-Angular-y-RxJs/)\">patrón Redux</a>.</p>\n<p>Si decíamos que <strong>Redux no hace rápido lo simple, sino mantenible lo complejo</strong>, ahora te digo que <strong>NgRx no hace rápido a Redux, sino mantenible su boilerplate.</strong> Así que si tienes delante un desarrollo funcionalmente complejo, te recomiendo que uses <em>NgRX</em>; la solución estándar para implementar <strong>Redux con Angular</strong>.</p>","more":"<p>Partiendo del código tal como quedó en <a href=\"../flujo-reactivo-unidireccional-con-Angular-y-RxJs/\">Redux, flujo reactivo unidireccional con Angular y RxJs</a>. Al finalizar tendrás una aplicación que gestiona centralizadamente los cambios, que permite conocer qué ocurrió y predecir lo que ocurrirá usando NgRx.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Instalacion-y-configuracion\"><a href=\"#1-Instalacion-y-configuracion\" class=\"headerlink\" title=\"1 Instalación y configuración\"></a>1 Instalación y configuración</h1><p><strong>NgRx</strong> es el estándar de facto para implementar <em>Redux</em> en Angular. Está basada en <em>RxJS</em> y es una librería modular con todo lo necesario para crear grandes aplicaciones. Esto son los módulos que la componen:</p>\n<ul>\n<li><strong>store</strong>: Es el módulo principal con el administrador del estado centralizado y reactivo.</li>\n<li><strong>store-devtools</strong>: Instrumentación para depurar desde el navegador. Vale su peso en oro.</li>\n<li><strong>router-Store</strong> : Almacena el estado del <em>router</em> de Angular en el <em>store</em>, tratando cada evento como una acción Redux.</li>\n<li><strong>effects</strong>: Los reductores son funciones puras sin efectos colaterales. Este módulo es la solución para comandos asíncronos.</li>\n<li><strong>schematics, entity, ngrx-data</strong>: Son otros módulos opcionales con ayudas y plantillas de NgRX.</li>\n</ul>\n<h2 id=\"1-1-Instalacion-de-NgRx\"><a href=\"#1-1-Instalacion-de-NgRx\" class=\"headerlink\" title=\"1.1 Instalación de NgRx\"></a>1.1 Instalación de NgRx</h2><p>Para agregar <em>NgRx</em> a un app te propongo que uses los <em>schematics</em> de NxDev pues disponen de más opciones de configuración inmediata. Aunque la alternativa con el CLI también es suficiente para empezar.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">with Nx.dev tools</span></span><br><span class=\"line\">ng g @nrwl/angular:ngrx app --module=apps/shop/src/app/app.module.ts --root --minimal</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">with only CLI</span></span><br><span class=\"line\">ng add @ngrx/store</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Con esto habrás instalado y configurado NgRx y tu <code>AppModule</code> tendrá algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">RouterModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">StoreModule</span>.<span class=\"title function_\">forRoot</span>(</span><br><span class=\"line\">      &#123;&#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">metaReducers</span>: !environment.<span class=\"property\">production</span> ? [] : [],</span><br><span class=\"line\">        <span class=\"attr\">runtimeChecks</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">strictActionImmutability</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">strictStateImmutability</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"title class_\">EffectsModule</span>.<span class=\"title function_\">forRoot</span>([])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>El código generado por cualquiera de los dos schematics no es para todos los gustos. Tómalo como un punto de partida y crea la estructura que mejor te encaje.</p>\n</blockquote>\n<h2 id=\"1-2-DevTools\"><a href=\"#1-2-DevTools\" class=\"headerlink\" title=\"1.2 DevTools\"></a>1.2 DevTools</h2><p>La razón principal de usar Redux es la capacidad que da al programador para comprender cómo el estado de sus variables ha variado en el tiempo. Es decir ¿Cómo hemos llegado hasta aquí?. Esta es claramente una cuestión de análisis y depuración de código. Y para ello necesitamos herramientas de desarrollador. Presentamos las <a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en\"><strong>Redux DevTools for Chrome</strong></a>.</p>\n<p>Este es un plugin que se engancha a cualquier solución Redux (no sólo NgRx, ni siquiera sólo Angular) y que permite explorar el valor del estado y lo más interesante: la secuencia de acciones que se ha despachado y el efecto que cada una tuvo sobre el valor del estado.</p>\n<p>Para realizar el enganche sirve la línea que verás también en el <code>AppModule</code>. La cual activa la monitorización cuando no estamos en producción. Normal, esto es un herramienta para el desarrollador, nunca para el usuario.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!environment.<span class=\"property\">production</span> ? <span class=\"title class_\">StoreDevtoolsModule</span>.<span class=\"title function_\">instrument</span>() : [],</span><br></pre></td></tr></table></figure>\n<p>Para verlo en funcionamiento tienes que ejecutar y abrir tu app en Chrome. Después en la pantalla de inspección del código aparecerá una pestaña al final de todo (más allá de Network y Application…) llamada Redux. La interfaz es muy intuitiva; no tardarás en hacerte con ella. aunque ahora mismo un poco pobre…</p>\n<h2 id=\"1-3-Router\"><a href=\"#1-3-Router\" class=\"headerlink\" title=\"1.3 Router\"></a>1.3 Router</h2><p>Para darle algo de contenido y de paso acercarnos a las capacidades de Redux y NgRx vamos a conectarle el <code>RouterModule</code> de la aplicación. Para ello sirve la siguiente línea que tienes que poner también en la importaciones del <code>AppModule</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">StoreRouterConnectingModule</span>.<span class=\"title function_\">forRoot</span>(&#123; <span class=\"attr\">routerState</span>: <span class=\"title class_\">RouterState</span>.<span class=\"property\">Minimal</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>A partir de este momento cada evento de navegación del <em>router</em> va a generar una acción que <em>NgRx</em> recogerá y registrará. Esas acciones y su impacto en el estado se pueden visualizar con el plugin de Redux. Podrás ver los cambios y reproducirlos hacia adelante y atrás. Es como viajar en el tiempo dentro de la ejecución de app.</p>\n<h1 id=\"2-Actions\"><a href=\"#2-Actions\" class=\"headerlink\" title=\"2 Actions\"></a>2 Actions</h1><p>Hasta el momento ha sido todo muy de infraestructura, pero es hora de que hagamos algo funcional. Un ejemplo sería agregar a nuestra app un módulo para la gestión de medios de pago de un usuario. Algo así:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">add</span> <span class=\"string\">payment</span> <span class=\"string\">methods</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">pay</span> <span class=\"string\">with</span> <span class=\"string\">them</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">select</span> <span class=\"string\">one</span> <span class=\"string\">as</span> <span class=\"string\">preferred</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">make</span> <span class=\"string\">fewer</span> <span class=\"string\">clicks</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">change</span> <span class=\"string\">de</span> <span class=\"string\">expiration</span> <span class=\"string\">date</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">get</span> <span class=\"string\">my</span> <span class=\"string\">cards</span> <span class=\"string\">up</span> <span class=\"string\">to</span> <span class=\"string\">date</span></span><br></pre></td></tr></table></figure>\n\n<p>Para ello, y valiendo una vez más de los schematics vamos a agregar una <em>feature</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m payments --project=shop --module=app.module.ts --routing --route=payments</span><br><span class=\"line\">ng g @ngrx/schematics:feature payments/store/paymentMethod --project=shop --module=payments/payments.module.ts --no-flat --no-spec --creators</span><br></pre></td></tr></table></figure>\n\n<p>Esto habrá generado un buen montón de código. Pero todo demasiado genérico. Vamos a empezar a adaptarlo a nuestro problema aportando un modelo de datos.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.model.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PaymentMethod</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">expiration</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PaymentMethods</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">list</span>: <span class=\"title class_\">PaymentMethod</span>[];</span><br><span class=\"line\">  <span class=\"attr\">preferred</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Y ahora sí, vamos a por las acciones.</p>\n<h2 id=\"2-1-Create\"><a href=\"#2-1-Create\" class=\"headerlink\" title=\"2.1 Create\"></a>2.1 Create</h2><p>Uno de los parámetros usados durante la generación de la <em>feature</em> fue <code>--creators</code>. Esto le indicó a NgRx que preferimos usar funciones en lugar de clases para definir nuestras acciones. Así que en el fichero de definición de acciones te encontrarás con llamadas a una función como esta <code>createAction(&#39;Descripción de la acción&#39;, props&lt;&#123; parametro: Tipo &#125;&gt;() )</code>.<br>Con esto tenemos que cubrir los dos requerimientos de Redux: las acciones han de tener un tipo y una <em>payload</em>.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.actions.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadPaymentMethods = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Load PaymentMethods&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addPaymentMethod = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Add PaymentMethod&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">newPaymentMethod</span>: <span class=\"title class_\">PaymentMethod</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> selectPreferredPaymentMethod = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Select preferred PaymentMethod&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">preferredId</span>: <span class=\"built_in\">string</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> setExpirationPaymentMethod = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Set Expiration Date on PaymentMethod&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">updatedPaymentMethod</span>: <span class=\"title class_\">PaymentMethod</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>El código puede resultar extraño a primera vista; pero es siempre igual y acabas familiarizando muy rápido. Esencialmente se trata de dar un nombre a la acción y luego configurarla. Lo imprescindible va a ser un string que la describa. Es recomendable seguir el convenio con el formato <code>[Origen] Nombre acción descriptivo</code>.</p>\n<p>El segundo argumento de la función <code>creteAction</code> es a su vez otra función. La parte interesante de la función <code>propos&lt;&gt;()</code> está en su tipo genérico. Es ahí dónde definimos el tipo de datos de la <em>payload</em> que puede transportar la acción.</p>\n<h2 id=\"2-2-Dispatch\"><a href=\"#2-2-Dispatch\" class=\"headerlink\" title=\"2.2 Dispatch\"></a>2.2 Dispatch</h2><p>Definir el catálogo de acciones es la primera parte del problema. Ahora nos toca invocarlas, o como se dice en el argot Redux: despacharlas. Para ello voy a crear un servicio auxiliar que encapsule toda la interacción con NgRx. Es una implementación del patrón fachada para unificar y facilitar el trabajo con Redux desde fuera.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.service.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Store</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">PaymentMethodActions</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./payment-method.actions&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PaymentMethod</span>, <span class=\"title class_\">PaymentMethods</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./payment-method.model&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentMethodService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> store: Store&lt;PaymentMethods&gt;</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y aquí puedo crear los métodos funcionales que despachen las acciones sobre el <em>store</em> de NgRx.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">loadPaymentMethods</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">loadPaymentMethods</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">addPaymentMethod</span>(<span class=\"params\">newPaymentMethod: PaymentMethod</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(</span><br><span class=\"line\">      <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">addPaymentMethod</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">newPaymentMethod</span>: &#123; ...newPaymentMethod &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">selectPreferredPaymentMethod</span>(<span class=\"params\">preferredId: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(</span><br><span class=\"line\">    <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">selectPreferredPaymentMethod</span>(&#123; preferredId &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">setExpirationPaymentMethod</span>(<span class=\"params\">updatedPaymentMethod: PaymentMethod</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(</span><br><span class=\"line\">    <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">setExpirationPaymentMethod</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">updatedPaymentMethod</span>: &#123; ...updatedPaymentMethod &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Es necesario enviar siempre un clon de los argumentos para desconectarlos del origen. En Redux queremos tener la fuente única de la verdad, y eso sólo es posible si los argumentos que recibimos están sellados y aislados del resto del mundo.</p>\n<p>Para una primera aproximación, reconozco que es mucho código para tan poca funcionalidad. Claro que para quien use esta fachada el mundo es mucho más sencillo. Y por dentro es muy potente y controlable.</p>\n<p><code>apps\\shop\\src\\app\\payments\\payments.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> paymentMethodService: PaymentMethodService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">loadPaymentMethods</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">visa</span>: <span class=\"title class_\">PaymentMethod</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1234 7896 3214 6549&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">expiration</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">6</span>-<span class=\"number\">1</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">addPaymentMethod</span>(visa);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">selectPreferredPaymentMethod</span>(visa.<span class=\"property\">id</span>);</span><br><span class=\"line\">    visa.<span class=\"property\">expiration</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2021</span>, <span class=\"number\">12</span>-<span class=\"number\">1</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">setExpirationPaymentMethod</span>(visa);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-State-reducer\"><a href=\"#3-State-reducer\" class=\"headerlink\" title=\"3 State reducer\"></a>3 State reducer</h1><h2 id=\"3-1-State\"><a href=\"#3-1-State\" class=\"headerlink\" title=\"3.1 State\"></a>3.1 State</h2><p>El estado en <em>redux</em> es un objeto tipado a partir de una interfaz, inicialmente llamada <code>State</code> a secas, aunque yo prefiero identificarla como <code>PaymentMethodsState</code>. Tendrá propiedades para almacenar objetos más o menos complejos. Cada propiedad tendrá su propio tipo complejo y necesita un estado inicial. Eso es lo que hace este código:</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> paymentMethodFeatureKey = <span class=\"string\">&#x27;paymentMethod&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PaymentMethodsState</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">paymentMethods</span>: <span class=\"title class_\">PaymentMethods</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">initialState</span>: <span class=\"title class_\">PaymentMethodsState</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">paymentMethods</span>: &#123; <span class=\"attr\">list</span>: [], <span class=\"attr\">preferred</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Create-function\"><a href=\"#3-2-Create-function\" class=\"headerlink\" title=\"3.2 Create function\"></a>3.2 Create function</h2><p>Pero todo estado necesita su reductor, y una vez más lo crearemos mediante una función. En este caso es la <code>createReducer(state, on(action1, function1) )</code>. Su encarnación más básica tiene la siguiente pinta:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> paymentMethodReducer = <span class=\"title function_\">createReducer</span>(</span><br><span class=\"line\">  initialState,</span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethods</span>, <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Lo que hace es definir una serie de <code>hooks</code> para enganchar funciones de mutación en respuesta a las acciones despachadas. Empezamos con la acción <code>loadPaymentMethods</code> y en este caso no por ahora hacemos ninguna mutación al estado. Es un reductor transparente e innecesario. Lo pongo para familiarizarnos con la sintaxis.</p>\n<p>Vamos a algo más complejo y útil como la acción <code>addPaymentMethod</code>. Funcionalmente queremos agregar el nuevo método de pago que viene en su carga al array actual de métodos de pago. Nada complejo, ya sí deben ser todas las funciones reductoras.</p>\n<p>Pero, siempre hay un pero, resulta que <strong>una función reductora debe ser también una función pura</strong>. Y esto nos obliga a mutar el estado sin mutar los argumentos; es decir, nos obliga a clonar el estado y sus propiedades antes de cambiarlas.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">on</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">addPaymentMethod</span>, <span class=\"function\">(<span class=\"params\">state, &#123; newPaymentMethod &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...state,</span><br><span class=\"line\">    <span class=\"attr\">paymentMethods</span>: &#123;</span><br><span class=\"line\">      ...state.<span class=\"property\">paymentMethods</span>,</span><br><span class=\"line\">      <span class=\"attr\">list</span>: [...state.<span class=\"property\">paymentMethods</span>.<span class=\"property\">list</span>, newPaymentMethod]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>El proceso de clonado puedes hacerlo con mayor o menor profundidad, pero al menos un clonado superficial del estado es obligatorio. Yo aquí he optado por clonar incluso el array interno, aunque no sea estrictamente obligatorio.</p>\n<h2 id=\"3-3-Register-in-Store\"><a href=\"#3-3-Register-in-Store\" class=\"headerlink\" title=\"3.3 Register in Store\"></a>3.3 Register in Store</h2><p>El resultado de esta invocación a <code>createReducer()</code> se será a su vez otra función que yo almacené en la contante <code>paymentMethodReducer</code>. Por requerimiento del proceso de empaquetado con <code>webpack</code> que nada tiene que ver con NgRx, estamos obligados a exportar la función mediante un <em>wrapper</em> como este:</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">reducer</span>(<span class=\"params\">state: PaymentMethodsState | <span class=\"literal\">undefined</span>, action: Action</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">paymentMethodReducer</span>(state, action);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Hecho esto tenemos ya una función reductora que debemos registrar en el <em>store</em>. Lo que hacemos es decirle a NgRx que cuando llegue una acción de mutado invoque a esta acción pasándole la propiedad del estado encargada gestionar.</p>\n<p><code>apps\\shop\\src\\app\\payments\\payments.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fromPaymentMethod <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/payment-method/payment-method.reducer&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">StoreModule</span>.<span class=\"title function_\">forFeature</span>(</span><br><span class=\"line\">      fromPaymentMethod.<span class=\"property\">paymentMethodFeatureKey</span>,</span><br><span class=\"line\">      fromPaymentMethod.<span class=\"property\">reducer</span></span><br><span class=\"line\">    )]</span><br></pre></td></tr></table></figure>\n\n<p>Normalmente el nombre de dicha propiedad se estable en una constante exportada para evitar fallos de tecleo con consecuencias imprevisibles.</p>\n<h1 id=\"4-Selectors\"><a href=\"#4-Selectors\" class=\"headerlink\" title=\"4 Selectors\"></a>4 Selectors</h1><p>Hasta ahora hemos definido el estado, y creado las acciones que despachamos conta él. Y hemos creado las funciones reductoras que lo modifican al recibir las acciones. No es poco, pero es la mitad del camino. Nos queda enterarnos de los cambios que se ha realizado. Y para eso nos ofrecen un concepto muy de base de datos <code>select</code>.</p>\n<h2 id=\"4-1-Create-selector\"><a href=\"#4-1-Create-selector\" class=\"headerlink\" title=\"4.1 Create selector\"></a>4.1 Create selector</h2><p>Los selectores, mejor dicho las funciones selectoras, se crean mediante una función factoría igual que hemos visto para las reductoras y las acciones. La diferencia es que aquí las tenemos que llamar a dos niveles: el de la funcionalidad y el de la propiedad específica que nos interesa.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.selectors.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFeatureSelector, createSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@ngrx/store&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; paymentMethodFeatureKey, <span class=\"title class_\">State</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./payment-method.reducer&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getPaymentMethodState = createFeatureSelector&lt;<span class=\"title class_\">State</span>&gt;(</span><br><span class=\"line\">  paymentMethodFeatureKey</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getPaymentMethodsList = <span class=\"title function_\">createSelector</span>(</span><br><span class=\"line\">  getPaymentMethodState,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">state: State</span>) =&gt;</span> state.<span class=\"property\">paymentMethods</span>.<span class=\"property\">list</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getPreferredPaymentMethod = <span class=\"title function_\">createSelector</span>(</span><br><span class=\"line\">  getPaymentMethodState,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">state: State</span>) =&gt;</span> state.<span class=\"property\">paymentMethods</span>.<span class=\"property\">preferred</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>Podemos tener tantos selectores como queramos. Se aconseja crearlos para cada tema de interés que pueda tener el resto de la aplicación. Pueden ser simples vista parciales del estado o complejas transformaciones a gusto del consumidor. NgRx lo hace de forma que optimiza cálculos y llamadas así que nos sugieren que abusemos de ellos y encapsulemos aquí todo el acceso al valor y a los cambios del estado.</p>\n<h2 id=\"4-2-Selecting-data\"><a href=\"#4-2-Selecting-data\" class=\"headerlink\" title=\"4.2 Selecting data\"></a>4.2 Selecting data</h2><p>Una vez más, si queremos que nuestra aplicación se desacople lo  más posible de ngRx, debemos llamar a los selectores desde un servicio fachada. Así que añadimos al <code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.service.ts</code> un par de nuevos métodos públicos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">getPaymentMethodsList$</span>(): <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">PaymentMethod</span>[]&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">select</span>(<span class=\"title class_\">PaymentMethodSelectors</span>.<span class=\"property\">getPaymentMethodsList</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">getPreferredPaymentMethod$</span>(): <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">string</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">select</span>(<span class=\"title class_\">PaymentMethodSelectors</span>.<span class=\"property\">getPreferredPaymentMethod</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-Showing-data\"><a href=\"#4-3-Showing-data\" class=\"headerlink\" title=\"4.3 Showing data\"></a>4.3 Showing data</h2><p>Estos métodos devuelven observables a los que suscribirse para mostrar los valores cambiantes del estado. Gracias a la fachada anterior el componente consumidor es completamente inconsciente de la existencia de NgRx.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">paymentMethodsList$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">PaymentMethod</span>[]&gt;;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">preferredPaymentMethod$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> paymentMethodService: PaymentMethodService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodsList$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">getPaymentMethodsList$</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">preferredPaymentMethod$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">paymentMethodService</span>.<span class=\"title function_\">getPreferredPaymentMethod$</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Por supuesto, desde la <em>template</em> lo tratamos como a cualquier otro dato asíncrono.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Payment Methods List:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; paymentMethodsList$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Preferred Payment Method:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; preferredPaymentMethod$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"5-Effects\"><a href=\"#5-Effects\" class=\"headerlink\" title=\"5 Effects\"></a>5 Effects</h1><p>Las funciones reductoras, como ya se ha dicho, deben ser puras. La idea es que puedan ser auditadas, re-ejecutadas y testeadas sin que necesiten servicios externos ni causen efectos colaterales. Y esto es un problema con la cantidad de <strong>ejecuciones asíncronas en las aplicaciones web</strong>. Cualquier tentación de lanzar una llamada <em>AJAX</em> dentro de un reductor debe ser eliminada de inmediato.</p>\n<blockquote>\n<p>Dos razones: por un lado en Angular se necesita invocar al <em>httpClient</em> de alguna manera para realizar la llamada <em>AJAX</em>. Y ya que la función reductora no pertenece a ninguna clase Angular, no puede haber constructor que reclame la inyección de la dependencia a dicho servicio. Tampoco las funciones puras tienen permitido usar nada que no venga entre sus argumentos. Por otra parte las funciones puras han de ser predecibles, y una llamada a un servidor remoto no es en absoluto predecible. Puede pasarle de todo, así que <strong>los reductores no son país para procesos asíncronos</strong>.</p>\n</blockquote>\n<p>La solución que proponen <em>NgRX</em> es usar un artificio llamado efecto, porque será encargado de <strong>los efectos secundarios que provocan las las instrucciones asíncronas</strong>. De una forma simplista, diremos que las acciones asíncronas se multiplicarán por tres. El comando que genera la llamada, y los dos potenciales eventos con la respuesta correcta o el error.</p>\n<p>Para manejarlo todo incluyen en la librería el módulo <code>EffectsModule</code> que ha de registrarse junto al <code>StoreModule</code>. Desde ese momento <em>NgRX</em> activa un sistema de seguimiento que trata las acciones como un stream de <em>RxJS</em> y permite subscribirse a la invocación de dichas acciones y tratarlas adecuadamente.</p>\n<h2 id=\"5-1-Install\"><a href=\"#5-1-Install\" class=\"headerlink\" title=\"5.1 Install\"></a>5.1 Install</h2><p>Según el proceso que hayas escogido para agregar Ngrx puede que ya tengas los efectos agregados o que tengas que hacerlo manualmente mediante un instrucción como esta:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @ngrx/effects</span><br></pre></td></tr></table></figure>\n<p>En cualquier caso aparecerá una instrucción de registro en el módulo raíz o funcional que lo necesite. Por ejemplo el de <code>PaymentsModule</code> es:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">EffectsModule</span>.<span class=\"title function_\">forFeature</span>([])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-2-Efecto-basico\"><a href=\"#5-2-Efecto-basico\" class=\"headerlink\" title=\"5.2 Efecto básico\"></a>5.2 Efecto básico</h2><p>En un ejemplo inicial vamos a intentar almacenar y recuperar los métodos de pago desde el <em>local storage</em> del navegador. Esta es claramente una actividad de riesgo (y no lo dogo sólo por el evidente peligro de seguridad). Pero el acceso puede fallar o no estar disponible. Y en el mejor de los casos es un recurso externo que nunca podría ir dentro de una función reductora.</p>\n<p>Así que vamos a ver el trabajo necesario para montar esto <em>como Redux manda</em>.</p>\n<h3 id=\"Acciones\"><a href=\"#Acciones\" class=\"headerlink\" title=\"Acciones\"></a>Acciones</h3><p>Para empezar agregamos dos nuevas acciones en respuesta a los potenciales eventos que puedan surgir del acceso al <em>local storage</em></p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.actions.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadPaymentMethods = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Load Payment Methods&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadPaymentMethodsSucess = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Load Payment Methods Success&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">paymentMethodList</span>: <span class=\"title class_\">PaymentMethod</span>[] &#125;&gt;()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadPaymentMethodsError = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[PaymentMethod] Load Payment Methods Error&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>Para simplificarlo no estoy reportando nada del error específico. La <code>loadPaymentMethodsError</code> servirá para indicar que el proceso ha fallado. sin más.</p>\n<h3 id=\"Definicion\"><a href=\"#Definicion\" class=\"headerlink\" title=\"Definición\"></a>Definición</h3><p>Ahora viene lo bueno. La creación de un efecto. Empezamos como siempre usando una función factoría : <code>createEffect()</code>. Sólo que esta vez va asociada a una propiedad pública de un servicio de Angular. Y aquí ya tenemos todos nuestros juguetes disponibles.</p>\n<p>Por ejemplo la inyección de dependencias; en el constructor <code>constructor(private actions$: Actions) &#123;&#125;</code> solicitamos como argumento un observable de todas las acciones que se hayan despachado en nuestro <code>store</code>. Ese <em>stream</em> servirá para escuchar y filtrar las acciones que nos interesen. Después haremos nuestra operativa con todas las llamadas que hagan falta.</p>\n<p>Sólo un requisito. Al terminar hemos de retornar un observable con una nueva acción que el sistema encauzará para ser despachada. Esto obliga a conocer bien los operadores <em>RxJs</em> que están en la base do todo este montaje. De ahí el uso <code>concatMap()</code> y por supuesto del creador observable más básico: <code>of()</code>.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.effects.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> loadPaymentMethods$ = <span class=\"title function_\">createEffect</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span>.<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">ofType</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethods</span>),</span><br><span class=\"line\">    <span class=\"title function_\">concatMap</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> storedList = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(</span><br><span class=\"line\">          <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">storeKey</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!storedList) &#123;</span><br><span class=\"line\">          storedList = initialState.<span class=\"property\">paymentMethods</span>.<span class=\"property\">list</span>;</span><br><span class=\"line\">          <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">setItem</span>(</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">storeKey</span>,</span><br><span class=\"line\">            <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(storedList)</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">of</span>(</span><br><span class=\"line\">          <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"title function_\">loadPaymentMethodsSucess</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">paymentMethodList</span>: storedList</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">of</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethodsError</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Tómate tu tiempo para entender este efecto, y recuerda que por raro que te parezca al principio, te acabarás acostumbrando muy pronto porque siempre sigue el mismo esquema.</p>\n<h3 id=\"Reducer-y-Register\"><a href=\"#Reducer-y-Register\" class=\"headerlink\" title=\"Reducer y Register\"></a>Reducer y Register</h3><p>Por si te olvidabas, todo este trabajo no altera para nada al estado. Recuerda que sólo las reductoras asociadas a las acciones lo hacen. Así que incrementamos nuestro código con nuevos casos para el reductor.</p>\n<p><code>apps\\shop\\src\\app\\payments\\store\\payment-method\\payment-method.reducer.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">on</span>(</span><br><span class=\"line\">    <span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethodsSucess</span>,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">state, &#123; paymentMethodList &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        <span class=\"attr\">paymentMethods</span>: &#123; ...state.<span class=\"property\">paymentMethods</span>, <span class=\"attr\">list</span>: paymentMethodList &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"title class_\">PaymentMethodActions</span>.<span class=\"property\">loadPaymentMethodsError</span>, <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state),</span><br></pre></td></tr></table></figure>\n\n<p>Y para finalizar registramos la clase que contiene al efecto (como un provider especial) en el módulo de efectos.</p>\n<p><code>apps\\shop\\src\\app\\payments\\payments.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">EffectsModule</span>.<span class=\"title function_\">forFeature</span>([<span class=\"title class_\">PaymentMethodEffects</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-3-Api-async\"><a href=\"#5-3-Api-async\" class=\"headerlink\" title=\"5.3 Api async\"></a>5.3 Api async</h2><p>Una vez familiarizado con la sintaxis de los efectos básicos, es hora de pasar a los que sin duda se utilizan más: los efectos sobre servicios asíncronos. Es decir casi todas las llamadas a un API. Algo muy sencillo podría ser agregar a nuestra tienda un converso de divisas para saber los precios en distintas monedas.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">the</span> <span class=\"string\">current</span> <span class=\"string\">exchange</span> <span class=\"string\">rate</span> <span class=\"string\">in</span> <span class=\"string\">several</span> <span class=\"string\">currencies</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">decide</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h3><p>A estas alturas te pido un último esfuerzo para que interpretes el siguiente código:</p>\n<p><code>apps\\shop\\src\\app\\rates\\store\\exchange-rate\\exchange-rate.actions.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadExchangeRates = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[ExchangeRate] Load ExchangeRates&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadExchangeRatesSuccess = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[ExchangeRate] Load ExchangeRates Success&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">rates</span>: <span class=\"built_in\">any</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> loadExchangeRatesError = <span class=\"title function_\">createAction</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;[ExchangeRate] Load ExchangeRates Error&#x27;</span>,</span><br><span class=\"line\">  props&lt;&#123; <span class=\"attr\">rates</span>: <span class=\"built_in\">any</span> &#125;&gt;()</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n<p>Efectivamente, para cada llamada usaremos tres acciones. El comando que la inicia y los dos eventos que pueden ocurrir <em>success and error</em>.</p>\n<h3 id=\"Effect\"><a href=\"#Effect\" class=\"headerlink\" title=\"Effect\"></a>Effect</h3><p><code>apps\\shop\\src\\app\\rates\\store\\exchange-rate\\exchange-rate.effects.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExchangeRateEffects</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> loadExchangeRates$ = <span class=\"title function_\">createEffect</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span>.<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">      <span class=\"title function_\">ofType</span>(<span class=\"title class_\">ExchangeRateActions</span>.<span class=\"property\">loadExchangeRates</span>),</span><br><span class=\"line\">      <span class=\"title function_\">concatMap</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">http</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"string\">&#x27;https://api.exchangeratesapi.io/latest&#x27;</span>).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">          <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"title class_\">ExchangeRateActions</span>.<span class=\"title function_\">loadExchangeRatesSuccess</span>(&#123; <span class=\"attr\">rates</span>: res.<span class=\"property\">rates</span> &#125;)</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          <span class=\"title function_\">catchError</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span></span><br><span class=\"line\">            <span class=\"title function_\">of</span>(<span class=\"title class_\">ExchangeRateActions</span>.<span class=\"title function_\">loadExchangeRatesError</span>(&#123; <span class=\"attr\">rates</span>: err &#125;))</span><br><span class=\"line\">          )</span><br><span class=\"line\">        )))</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> actions$: Actions, <span class=\"keyword\">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Paradójicamente un efecto que incluya una llamada <em>http</em> es más sencillo, pues la naturaleza asíncrona de <em>Ajax</em> junto con el uso de <em>Observables</em> en <code>httpClient</code> nos dejan medio trabajo hecho.</p>\n<p>Lo que realmente hacemos es encauzar el flujo de acciones <code>pipe(concatMap())</code> hacia un flujo de respuestas <em>http</em> <code>this.http.get()</code>. Pero claro esto es trampa, así que de nuevo encauzamos la respuesta hacia una acción <code>pipe(map(res=&gt; actionSuccess(res)))</code>. Cuando la respuesta no llega volvemos a lo que ya sabemos, crear un nuevo observable con <code>of(actionError(err))</code>.</p>\n<p>Aquí lo dejamos. Soy consciente de que Redux es complejo. Soy consciente de que NgRx añade mucho código de infraestructura. Pero también te animo a revisar este artículo y practicar con un caso sencillo antes de tomar cualquier decisión. Incluir NgRx o no hacerlo tiene un alto impacto en el mantenimiento de tu proyecto. No te tires a de cabeza ni lo rechaces de plano.</p>\n<p>Descarga y revisa la aplicación de ejemplo. Si la dominas, entonces es que ya tienes los conocimientos para gestionar de manera centralizada, auditable y predecible el estado de tus programas. El patrón Redux lucirá más cuanto más grande y compleja sea tu aplicación.</p>\n<p>Continúa tu formación avanzada para crear aplicaciones <a href=\"../pwa-entre-la-web-y-las-apps-con-angular\">PWA, entre la web y las apps con Angular</a> y verás como aprendes a programar con Angular 8.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Redux, flujo reactivo unidireccional con Angular y RxJs","date":"2019-09-17T10:47:58.000Z","thumbnail":"/css/images/angular-14_redux.png","_content":"\n![flujo-reactivo-unidireccional-con-Angular-y-RxJs](/images/tutorial-angular-14_redux.png)\n\nContinuando con el **tutorial de Angular Avanzado** nos centramos ahora en una arquitectura de comunicación de datos conocida como _Unidirectional Data Flow_ o flujo de datos en un mismo sentido; la base del **patrón Redux**. Esta técnica es una mejora sobre el modelo básico de Angular, el _double-binding_, el cual facilitaba mucho el desarrollo en pequeños proyectos.\n\n> Cuando hablamos de mejora debemos ser honestos con los costes y beneficios: aquí vamos a mejorar la eficiencia en ejecución y a facilitar la depuración a costa de una mayor complejidad estructural y sintáctica. Merece la pena cuanto más grande sea el proyecto. Este es un ejemplo simplificado pero realista que implementa _Redux_. Tómate tu tiempo para estudiarlo con calma.\n\nTomar las decisiones correctas en cuestiones de este calibre puede suponer la diferencia entre el éxito o fracaso de un proyecto. Voy a explicarte las razones para usar este patrón y la manera más sencilla de introducirlo en tus aplicaciones, dejándote en el umbral de soluciones aún más potentes como la gestión de estado centralizada con _Redux_.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Componentes dinámicos, directivas y pipes con Angular](../componentes-dinamicos-directivas-y-pipes-con-Angular). Al finalizar dotaremos a la aplicación de un almacén de datos _Redux_ que notifica cambios reactivos.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Arquitectura del patrón Redux.](./#1-Arquitectura-del-patron-Redux)\n\n[2. Implementación de un Store con RxJs.](./#2-Implementacion-de-un-Store-con-RxJs)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Arquitectura del patrón Redux\n\n```yaml\nComo: desarrollador,\n   Quiero: saber qué acciones se pueden hacer\n   para que: pueda controlar la funcionalidad\n\nComo: desarrollador,\n   Quiero: saber qué cambios se han realizado\n   para que: pueda depurar y predecir el comportamiento\n```\n\nHablar de _Unidirectional Data Flow_ sin presentar **_Redux_** es poco menos que imposible. Vamos a ver en qué consiste este patrón tan usado, no sólo en Angular. Lo que aprendas te servirá también para _react_, _vue_ y otros.\n\n**Redux se ocupa de la gestión del estado**, es decir, del valor de las variables en un determinado momento. Centraliza sus cambios para saber qué ocurrió para llegar a este valor, y qué valor tendrá según lo que ocurra. Desacopla los emisores de acciones de los receptores de información, para ello combina otros dos patrones:\n\n- **Action:** Envío de comandos al almacén para actualizar el estado\n\n- **Observable:** Subscripción a cambios en el estado del almacén.\n\nComo incorpora cierta complejidad de serie conviene que nos hagamos esta pregunta ¿Cuándo usarlo?. Una pequeña lista de ideas sobre cuándo implementar Redux.\n\n- Aplicaciones complejas con **múltiples componentes**.\n    - El patrón contenedor / presentadores se hace complejo y tedioso a partir de tres niveles de profundidad del árbol.\n    - Los `router-outlets` inician una jerarquía propia. Comunicar componentes entre árboles no es factible con `@Input` y `@Output`\n- Uso de estrategias de **detección del cambio OnPush**.\n    - Consumo de datos mediante _pipes async_ suscritos a observables.\n- **Cambios concurrentes** por el usuario y los servicios.\n    - Peticiones mediante _pull_ a intervalos regulares\n    - Recepción de _sockets_\n    - Llamadas en paralelo\n- Gestión de datos local con _cachés_\n\n> Redux no hace rápido lo simple, sino mantenible lo complejo.\n\n\n## 1.1 Principios de Redux\n\nTenemos tres principios básicos que cumplir:\n\n- **Single Source Of Truth**: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.\n- **Read Only State**: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.\n- **Changes By Pure Functions**: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.\n\n## 1.2 Elementos de Redux\n\nLos artificios fundamentales que incorporaremos a nuestro desarrollo van en dos niveles. El primer nivel resuelve los dos primeros principios.\n\n- **Store**: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.\n- **State**: Objeto que contiene la única copia válida de la información. Representa el valor del almacén en un momento determinado. Nunca expondremos un puntero a este dato privado.\n\n### Acceso al estado\n\n- **Setters** : Métodos que asignan y notifican un nuevo cambio. Clonan la información recibida para que el llamante no tenga un puntero al estado.\n\n- **Selectors** : Métodos para consulta del estado. Devuelven un observable al que suscribirse para obtener notificaciones de cambio o una instantánea. En cualquier caso siempre emitirá o devolverá un clon del estado.\n\n### Mutaciones del estado\n\n- **Actions**: Objetos identificados por un tipo y cargados con un *payload*. Transmiten una intención de mutación sobre el estado del *store*.\n\n- **Reducers** : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Clonan el estado, realizan los cambios oportunos y devuelven el estado mutado.\n\n![Redux](/images/Redux.png)\n\nPodemos verlo en un diagrama antes de pasar a verlo en código.\n\n\n# 2. Implementación de un Store con RxJs\n\n```yaml\nAs a: seller,\n  I want: to know how many products are out of stock\n  so that: I can refill them\n```\n\nPara que veas que **Redux es independiente de Angular**, vamos a montarlo en una librería sin dependencias del _framework_. **Sólo TypeScript y RxJs**. A día de hoy ambas tecnologías son transversales al ecosistema _frontend_.\n\n```\nng g @nrwl/workspace:library rx-store\n```\n\n## 2.1 El Store observable mínimo\n\nEmpezaremos por la implementación más inocente de un almacén reactivo. Una clase con [tipos genéricos](https://www.typescriptlang.org/docs/handbook/generics.html) que hace uso de la librería de observables RxJs. De esta, toma el `BehaviorSubject` que permite notificar cambios y valores iniciales.\n\nAunque para evitar que otra clase consumidora también emita sin control, sólo exponemos su interfaz `asObservable()`. Relacionado con esto también es obligatorio evitar a toda costa punteros al estado. Para ell siempre trabajamos con clones. Los métodos `get() set()` usan el [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) de JS `{ ...this.state }` tanto al recibir como al devolver el valor del estado.\n\n`libs\\rx-store\\src\\lib\\mini-store.ts`\n\n```typescript\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport class MiniStore<T> {\n  private state: T;\n  private subject$ = new BehaviorSubject(this.get());\n\n  constructor(initialState: T) {\n    this.set(initialState);\n  }\n  public set(newSate: T) {\n    this.state = { ...newSate };\n    this.subject$.next(this.get());\n  }\n  public select$(): Observable<T> {\n    return this.subject$.asObservable();\n  }\n  private get(): T {\n    return { ...this.state };\n  }\n}\n```\nPuedes ver su uso en los test unitarios que le acompañan en `libs\\rx-store\\src\\lib\\rx-store.spec.ts`.\n\n```typescript\nimport { MiniStore } from './mini-store';\ndescribe('GIVEN: a basic mini-store of  product stocks', () => {\n  interface ProductStock { stock: number; }\n  const initial: ProductStock = { stock: 25 };\n  describe('WHEN: I start one ', () => {\n    const stockMiniStore = new MiniStore<ProductStock>(initial);\n    it('THEN: it should have the inital value', done => {\n      stockMiniStore.select$().subscribe(res => {\n        expect(res).toEqual(initial);\n        done();\n      });\n    });\n  });\n  describe('WHEN: I start and set a new value ', () => {\n    const stockMiniStore = new MiniStore<ProductStock>(initial);\n    stockMiniStore.set({ stock: 40 });\n    it('THEN: it should emit the same value', done => {\n      stockMiniStore.select$().subscribe(res => {\n        expect(res).toEqual({ stock: 40 });\n        done();\n      });\n    });\n  });\n});\n```\n\n## 2.2 El envío de acciones\n\nEn una situación más realista y aproximada al patrón Redux **no deberíamos asignar el valor de manera directa**, pues hay que dejar rastro de cómo se llegó ahí. Necesitamos entonces los conceptos de acciones y función reductora. La idea es que el almacén reciba acciones, invoque al reductor y asigne el valor obtenido. Vamos a verlo.\n\nEmpezamos por crear otra clase similar `libs\\rx-store\\src\\lib\\rx-store.ts` y un par de ayudas. Como mínimo el _interface_ que debe cumplir toda `Action`; es muy sencillo y siempre igual: una cadena para especificar el comando y cualquier cosa como argumento de carga. Aprovechando las potencia del TypeScript también creamos un _type_ para asegurar que la `reducerFunction` tiene la firma adecuada. La obligamos a recibir como argumentos el estado actual y la acción que se le aplica; teniendo que devolver el nuevo estado.\n\n```typescript\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface Action {\n  type: string;\n  payload: any;\n}\n\nexport type reducerFunction<T> = (state: T, action: Action) => T;\n\nexport class RxStore<T> {\n  private state: T;\n  private subject$ = new BehaviorSubject<T>(this.get());\n\n  constructor(initialState: T, private reducer: reducerFunction<T>) {\n    this.set(initialState);\n  }\n  public select$(): Observable<T> {\n    return this.subject$.asObservable();\n  }\n  public dispatch(action: Action) {\n    const curretState = this.get();\n    const newState = this.reducer(curretState, action);\n    // instrumentation, cache, log...\n    this.set(newState);\n  }\n  private get(): T {\n    return { ...this.state };\n  }\n  private set(newSate: T) {\n    this.state = { ...newSate };\n    this.subject$.next(this.get());\n  }\n}\n```\n\nComo puedes ver, los `get()` y `set()` son ahora privados. El mundo exterior nos envía acciones al método `public dispatch(action: Action)`.  Ese sería un buen momento para incluir lógica de infraestructura e instrumentación. Hay quien  crea un _log_ de lo ocurrido, un histórico de valores... las librerías profesionales nos dan todo eso y mas. Una vez recibida la acción empieza la fiesta de los _clones_ invocando en medio a una función reductora que ahora veremos.\n\n---\n\n## 2.3 La función reductora de estado\n\nEn el fichero de _test_ `libs\\rx-store\\src\\lib\\rx-store.spec.ts` tenemos un ejemplo clarificador :\n\n```typescript\nconst stockReducer: reducerFunction<ProductStock> = function(\n    state: ProductStock,\n    action: Action\n  ): ProductStock {\n    const clonedState = { ...state };\n    switch (action.type) {\n      case 'set':\n        clonedState.stock = action.payload;\n        break;\n      case 'increment':\n        clonedState.stock += action.payload;\n        break;\n      default:\n        break;\n    }\n    return clonedState;\n  };\n```\nDefinimos `stockReducer` como una [**función pura**](https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/) que cumple con el tipo `reducerFunction`. Normalmente estas funciones tienen un _switch_ que evalúa el tipo de la acción. En cada caso se asigna un nuevo estado según la mínima lógica oportuna y al finalizar se devuelve el estado mutado.\n\nVeamos el resto del _test_ para tener una idea de cómo se utiliza.\n\n```typescript\ndescribe('WHEN: I get an increment ', () => {\n  const stockRxStore = new RxStore<ProductStock>(initial, stockReducer);\n  const incrementAction: Action = { type: 'increment', payload: 5 };\n  stockRxStore.dispatch(incrementAction);\n  it('THEN: it should raise the stock', done => {\n    stockRxStore.select$().subscribe(res => {\n      expect(res).toEqual({ stock: 30 });\n      done();\n    });\n  });\n});\n```\n\nDe esta forma ya tenemos un sistema sencillo pero del que podríamos decir que cumple con los principios básicos de Redux.\n\n## Resumen\n\nLas aplicaciones reales no son sencillas. Este es un tutorial avanzado que te exige conocimiento previo y dedicación. A cambio espero que te resulte útil y que podáis incorporar las técnicas de detección del cambio y control de estado observable en vuestros proyectos.\n\nCon este tutorial continúas tu formación [avanzada en Angular](../tag/Avanzado/); para poder afrontar retos de tamaño industrial usando te recomiendo que uses [El patrón Redux con NgRx en Angular](../el-patron-redux-con-ngrx-en-angular). Todos esos detalles se tratan en el [curso avanzado online](../https://academia-binaria.com/cursos/angular-business) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-14-Flujo reactivo unidireccional con Angular y RxJs.md","raw":"---\ntitle: Redux, flujo reactivo unidireccional con Angular y RxJs\npermalink: flujo-reactivo-unidireccional-con-Angular-y-RxJs\ndate: 2019-09-17 12:47:58\ntags:\n- Angular\n- Angular8\n- Redux\n- RxJs\n- Observables\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-14_redux.png\n---\n\n![flujo-reactivo-unidireccional-con-Angular-y-RxJs](/images/tutorial-angular-14_redux.png)\n\nContinuando con el **tutorial de Angular Avanzado** nos centramos ahora en una arquitectura de comunicación de datos conocida como _Unidirectional Data Flow_ o flujo de datos en un mismo sentido; la base del **patrón Redux**. Esta técnica es una mejora sobre el modelo básico de Angular, el _double-binding_, el cual facilitaba mucho el desarrollo en pequeños proyectos.\n\n> Cuando hablamos de mejora debemos ser honestos con los costes y beneficios: aquí vamos a mejorar la eficiencia en ejecución y a facilitar la depuración a costa de una mayor complejidad estructural y sintáctica. Merece la pena cuanto más grande sea el proyecto. Este es un ejemplo simplificado pero realista que implementa _Redux_. Tómate tu tiempo para estudiarlo con calma.\n\nTomar las decisiones correctas en cuestiones de este calibre puede suponer la diferencia entre el éxito o fracaso de un proyecto. Voy a explicarte las razones para usar este patrón y la manera más sencilla de introducirlo en tus aplicaciones, dejándote en el umbral de soluciones aún más potentes como la gestión de estado centralizada con _Redux_.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Componentes dinámicos, directivas y pipes con Angular](../componentes-dinamicos-directivas-y-pipes-con-Angular). Al finalizar dotaremos a la aplicación de un almacén de datos _Redux_ que notifica cambios reactivos.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Arquitectura del patrón Redux.](./#1-Arquitectura-del-patron-Redux)\n\n[2. Implementación de un Store con RxJs.](./#2-Implementacion-de-un-Store-con-RxJs)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Arquitectura del patrón Redux\n\n```yaml\nComo: desarrollador,\n   Quiero: saber qué acciones se pueden hacer\n   para que: pueda controlar la funcionalidad\n\nComo: desarrollador,\n   Quiero: saber qué cambios se han realizado\n   para que: pueda depurar y predecir el comportamiento\n```\n\nHablar de _Unidirectional Data Flow_ sin presentar **_Redux_** es poco menos que imposible. Vamos a ver en qué consiste este patrón tan usado, no sólo en Angular. Lo que aprendas te servirá también para _react_, _vue_ y otros.\n\n**Redux se ocupa de la gestión del estado**, es decir, del valor de las variables en un determinado momento. Centraliza sus cambios para saber qué ocurrió para llegar a este valor, y qué valor tendrá según lo que ocurra. Desacopla los emisores de acciones de los receptores de información, para ello combina otros dos patrones:\n\n- **Action:** Envío de comandos al almacén para actualizar el estado\n\n- **Observable:** Subscripción a cambios en el estado del almacén.\n\nComo incorpora cierta complejidad de serie conviene que nos hagamos esta pregunta ¿Cuándo usarlo?. Una pequeña lista de ideas sobre cuándo implementar Redux.\n\n- Aplicaciones complejas con **múltiples componentes**.\n    - El patrón contenedor / presentadores se hace complejo y tedioso a partir de tres niveles de profundidad del árbol.\n    - Los `router-outlets` inician una jerarquía propia. Comunicar componentes entre árboles no es factible con `@Input` y `@Output`\n- Uso de estrategias de **detección del cambio OnPush**.\n    - Consumo de datos mediante _pipes async_ suscritos a observables.\n- **Cambios concurrentes** por el usuario y los servicios.\n    - Peticiones mediante _pull_ a intervalos regulares\n    - Recepción de _sockets_\n    - Llamadas en paralelo\n- Gestión de datos local con _cachés_\n\n> Redux no hace rápido lo simple, sino mantenible lo complejo.\n\n\n## 1.1 Principios de Redux\n\nTenemos tres principios básicos que cumplir:\n\n- **Single Source Of Truth**: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.\n- **Read Only State**: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.\n- **Changes By Pure Functions**: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.\n\n## 1.2 Elementos de Redux\n\nLos artificios fundamentales que incorporaremos a nuestro desarrollo van en dos niveles. El primer nivel resuelve los dos primeros principios.\n\n- **Store**: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.\n- **State**: Objeto que contiene la única copia válida de la información. Representa el valor del almacén en un momento determinado. Nunca expondremos un puntero a este dato privado.\n\n### Acceso al estado\n\n- **Setters** : Métodos que asignan y notifican un nuevo cambio. Clonan la información recibida para que el llamante no tenga un puntero al estado.\n\n- **Selectors** : Métodos para consulta del estado. Devuelven un observable al que suscribirse para obtener notificaciones de cambio o una instantánea. En cualquier caso siempre emitirá o devolverá un clon del estado.\n\n### Mutaciones del estado\n\n- **Actions**: Objetos identificados por un tipo y cargados con un *payload*. Transmiten una intención de mutación sobre el estado del *store*.\n\n- **Reducers** : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Clonan el estado, realizan los cambios oportunos y devuelven el estado mutado.\n\n![Redux](/images/Redux.png)\n\nPodemos verlo en un diagrama antes de pasar a verlo en código.\n\n\n# 2. Implementación de un Store con RxJs\n\n```yaml\nAs a: seller,\n  I want: to know how many products are out of stock\n  so that: I can refill them\n```\n\nPara que veas que **Redux es independiente de Angular**, vamos a montarlo en una librería sin dependencias del _framework_. **Sólo TypeScript y RxJs**. A día de hoy ambas tecnologías son transversales al ecosistema _frontend_.\n\n```\nng g @nrwl/workspace:library rx-store\n```\n\n## 2.1 El Store observable mínimo\n\nEmpezaremos por la implementación más inocente de un almacén reactivo. Una clase con [tipos genéricos](https://www.typescriptlang.org/docs/handbook/generics.html) que hace uso de la librería de observables RxJs. De esta, toma el `BehaviorSubject` que permite notificar cambios y valores iniciales.\n\nAunque para evitar que otra clase consumidora también emita sin control, sólo exponemos su interfaz `asObservable()`. Relacionado con esto también es obligatorio evitar a toda costa punteros al estado. Para ell siempre trabajamos con clones. Los métodos `get() set()` usan el [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) de JS `{ ...this.state }` tanto al recibir como al devolver el valor del estado.\n\n`libs\\rx-store\\src\\lib\\mini-store.ts`\n\n```typescript\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport class MiniStore<T> {\n  private state: T;\n  private subject$ = new BehaviorSubject(this.get());\n\n  constructor(initialState: T) {\n    this.set(initialState);\n  }\n  public set(newSate: T) {\n    this.state = { ...newSate };\n    this.subject$.next(this.get());\n  }\n  public select$(): Observable<T> {\n    return this.subject$.asObservable();\n  }\n  private get(): T {\n    return { ...this.state };\n  }\n}\n```\nPuedes ver su uso en los test unitarios que le acompañan en `libs\\rx-store\\src\\lib\\rx-store.spec.ts`.\n\n```typescript\nimport { MiniStore } from './mini-store';\ndescribe('GIVEN: a basic mini-store of  product stocks', () => {\n  interface ProductStock { stock: number; }\n  const initial: ProductStock = { stock: 25 };\n  describe('WHEN: I start one ', () => {\n    const stockMiniStore = new MiniStore<ProductStock>(initial);\n    it('THEN: it should have the inital value', done => {\n      stockMiniStore.select$().subscribe(res => {\n        expect(res).toEqual(initial);\n        done();\n      });\n    });\n  });\n  describe('WHEN: I start and set a new value ', () => {\n    const stockMiniStore = new MiniStore<ProductStock>(initial);\n    stockMiniStore.set({ stock: 40 });\n    it('THEN: it should emit the same value', done => {\n      stockMiniStore.select$().subscribe(res => {\n        expect(res).toEqual({ stock: 40 });\n        done();\n      });\n    });\n  });\n});\n```\n\n## 2.2 El envío de acciones\n\nEn una situación más realista y aproximada al patrón Redux **no deberíamos asignar el valor de manera directa**, pues hay que dejar rastro de cómo se llegó ahí. Necesitamos entonces los conceptos de acciones y función reductora. La idea es que el almacén reciba acciones, invoque al reductor y asigne el valor obtenido. Vamos a verlo.\n\nEmpezamos por crear otra clase similar `libs\\rx-store\\src\\lib\\rx-store.ts` y un par de ayudas. Como mínimo el _interface_ que debe cumplir toda `Action`; es muy sencillo y siempre igual: una cadena para especificar el comando y cualquier cosa como argumento de carga. Aprovechando las potencia del TypeScript también creamos un _type_ para asegurar que la `reducerFunction` tiene la firma adecuada. La obligamos a recibir como argumentos el estado actual y la acción que se le aplica; teniendo que devolver el nuevo estado.\n\n```typescript\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface Action {\n  type: string;\n  payload: any;\n}\n\nexport type reducerFunction<T> = (state: T, action: Action) => T;\n\nexport class RxStore<T> {\n  private state: T;\n  private subject$ = new BehaviorSubject<T>(this.get());\n\n  constructor(initialState: T, private reducer: reducerFunction<T>) {\n    this.set(initialState);\n  }\n  public select$(): Observable<T> {\n    return this.subject$.asObservable();\n  }\n  public dispatch(action: Action) {\n    const curretState = this.get();\n    const newState = this.reducer(curretState, action);\n    // instrumentation, cache, log...\n    this.set(newState);\n  }\n  private get(): T {\n    return { ...this.state };\n  }\n  private set(newSate: T) {\n    this.state = { ...newSate };\n    this.subject$.next(this.get());\n  }\n}\n```\n\nComo puedes ver, los `get()` y `set()` son ahora privados. El mundo exterior nos envía acciones al método `public dispatch(action: Action)`.  Ese sería un buen momento para incluir lógica de infraestructura e instrumentación. Hay quien  crea un _log_ de lo ocurrido, un histórico de valores... las librerías profesionales nos dan todo eso y mas. Una vez recibida la acción empieza la fiesta de los _clones_ invocando en medio a una función reductora que ahora veremos.\n\n---\n\n## 2.3 La función reductora de estado\n\nEn el fichero de _test_ `libs\\rx-store\\src\\lib\\rx-store.spec.ts` tenemos un ejemplo clarificador :\n\n```typescript\nconst stockReducer: reducerFunction<ProductStock> = function(\n    state: ProductStock,\n    action: Action\n  ): ProductStock {\n    const clonedState = { ...state };\n    switch (action.type) {\n      case 'set':\n        clonedState.stock = action.payload;\n        break;\n      case 'increment':\n        clonedState.stock += action.payload;\n        break;\n      default:\n        break;\n    }\n    return clonedState;\n  };\n```\nDefinimos `stockReducer` como una [**función pura**](https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/) que cumple con el tipo `reducerFunction`. Normalmente estas funciones tienen un _switch_ que evalúa el tipo de la acción. En cada caso se asigna un nuevo estado según la mínima lógica oportuna y al finalizar se devuelve el estado mutado.\n\nVeamos el resto del _test_ para tener una idea de cómo se utiliza.\n\n```typescript\ndescribe('WHEN: I get an increment ', () => {\n  const stockRxStore = new RxStore<ProductStock>(initial, stockReducer);\n  const incrementAction: Action = { type: 'increment', payload: 5 };\n  stockRxStore.dispatch(incrementAction);\n  it('THEN: it should raise the stock', done => {\n    stockRxStore.select$().subscribe(res => {\n      expect(res).toEqual({ stock: 30 });\n      done();\n    });\n  });\n});\n```\n\nDe esta forma ya tenemos un sistema sencillo pero del que podríamos decir que cumple con los principios básicos de Redux.\n\n## Resumen\n\nLas aplicaciones reales no son sencillas. Este es un tutorial avanzado que te exige conocimiento previo y dedicación. A cambio espero que te resulte útil y que podáis incorporar las técnicas de detección del cambio y control de estado observable en vuestros proyectos.\n\nCon este tutorial continúas tu formación [avanzada en Angular](../tag/Avanzado/); para poder afrontar retos de tamaño industrial usando te recomiendo que uses [El patrón Redux con NgRx en Angular](../el-patron-redux-con-ngrx-en-angular). Todos esos detalles se tratan en el [curso avanzado online](../https://academia-binaria.com/cursos/angular-business) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-14-Flujo reactivo unidireccional con Angular y RxJs","published":1,"updated":"2023-07-02T10:25:58.475Z","__permalink":"flujo-reactivo-unidireccional-con-Angular-y-RxJs","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fd000we096hbc0h3wm","content":"<p><img src=\"/images/tutorial-angular-14_redux.png\" alt=\"flujo-reactivo-unidireccional-con-Angular-y-RxJs\"></p>\n<p>Continuando con el <strong>tutorial de Angular Avanzado</strong> nos centramos ahora en una arquitectura de comunicación de datos conocida como <em>Unidirectional Data Flow</em> o flujo de datos en un mismo sentido; la base del <strong>patrón Redux</strong>. Esta técnica es una mejora sobre el modelo básico de Angular, el <em>double-binding</em>, el cual facilitaba mucho el desarrollo en pequeños proyectos.</p>\n<blockquote>\n<p>Cuando hablamos de mejora debemos ser honestos con los costes y beneficios: aquí vamos a mejorar la eficiencia en ejecución y a facilitar la depuración a costa de una mayor complejidad estructural y sintáctica. Merece la pena cuanto más grande sea el proyecto. Este es un ejemplo simplificado pero realista que implementa <em>Redux</em>. Tómate tu tiempo para estudiarlo con calma.</p>\n</blockquote>\n<p>Tomar las decisiones correctas en cuestiones de este calibre puede suponer la diferencia entre el éxito o fracaso de un proyecto. Voy a explicarte las razones para usar este patrón y la manera más sencilla de introducirlo en tus aplicaciones, dejándote en el umbral de soluciones aún más potentes como la gestión de estado centralizada con <em>Redux</em>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../componentes-dinamicos-directivas-y-pipes-con-Angular\">Componentes dinámicos, directivas y pipes con Angular</a>. Al finalizar dotaremos a la aplicación de un almacén de datos <em>Redux</em> que notifica cambios reactivos.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Arquitectura-del-patron-Redux\">1. Arquitectura del patrón Redux.</a></p>\n<p><a href=\"./#2-Implementacion-de-un-Store-con-RxJs\">2. Implementación de un Store con RxJs.</a></p>\n<p><a href=\"./#Resumen\">Resumen</a></p>\n<hr>\n<h1 id=\"1-Arquitectura-del-patron-Redux\"><a href=\"#1-Arquitectura-del-patron-Redux\" class=\"headerlink\" title=\"1. Arquitectura del patrón Redux\"></a>1. Arquitectura del patrón Redux</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">desarrollador,</span></span><br><span class=\"line\">   <span class=\"attr\">Quiero:</span> <span class=\"string\">saber</span> <span class=\"string\">qué</span> <span class=\"string\">acciones</span> <span class=\"string\">se</span> <span class=\"string\">pueden</span> <span class=\"string\">hacer</span></span><br><span class=\"line\">   <span class=\"attr\">para que:</span> <span class=\"string\">pueda</span> <span class=\"string\">controlar</span> <span class=\"string\">la</span> <span class=\"string\">funcionalidad</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">desarrollador,</span></span><br><span class=\"line\">   <span class=\"attr\">Quiero:</span> <span class=\"string\">saber</span> <span class=\"string\">qué</span> <span class=\"string\">cambios</span> <span class=\"string\">se</span> <span class=\"string\">han</span> <span class=\"string\">realizado</span></span><br><span class=\"line\">   <span class=\"attr\">para que:</span> <span class=\"string\">pueda</span> <span class=\"string\">depurar</span> <span class=\"string\">y</span> <span class=\"string\">predecir</span> <span class=\"string\">el</span> <span class=\"string\">comportamiento</span></span><br></pre></td></tr></table></figure>\n\n<p>Hablar de <em>Unidirectional Data Flow</em> sin presentar <strong><em>Redux</em></strong> es poco menos que imposible. Vamos a ver en qué consiste este patrón tan usado, no sólo en Angular. Lo que aprendas te servirá también para <em>react</em>, <em>vue</em> y otros.</p>\n<p><strong>Redux se ocupa de la gestión del estado</strong>, es decir, del valor de las variables en un determinado momento. Centraliza sus cambios para saber qué ocurrió para llegar a este valor, y qué valor tendrá según lo que ocurra. Desacopla los emisores de acciones de los receptores de información, para ello combina otros dos patrones:</p>\n<ul>\n<li><p><strong>Action:</strong> Envío de comandos al almacén para actualizar el estado</p>\n</li>\n<li><p><strong>Observable:</strong> Subscripción a cambios en el estado del almacén.</p>\n</li>\n</ul>\n<p>Como incorpora cierta complejidad de serie conviene que nos hagamos esta pregunta ¿Cuándo usarlo?. Una pequeña lista de ideas sobre cuándo implementar Redux.</p>\n<ul>\n<li>Aplicaciones complejas con <strong>múltiples componentes</strong>.<ul>\n<li>El patrón contenedor &#x2F; presentadores se hace complejo y tedioso a partir de tres niveles de profundidad del árbol.</li>\n<li>Los <code>router-outlets</code> inician una jerarquía propia. Comunicar componentes entre árboles no es factible con <code>@Input</code> y <code>@Output</code></li>\n</ul>\n</li>\n<li>Uso de estrategias de <strong>detección del cambio OnPush</strong>.<ul>\n<li>Consumo de datos mediante <em>pipes async</em> suscritos a observables.</li>\n</ul>\n</li>\n<li><strong>Cambios concurrentes</strong> por el usuario y los servicios.<ul>\n<li>Peticiones mediante <em>pull</em> a intervalos regulares</li>\n<li>Recepción de <em>sockets</em></li>\n<li>Llamadas en paralelo</li>\n</ul>\n</li>\n<li>Gestión de datos local con <em>cachés</em></li>\n</ul>\n<blockquote>\n<p>Redux no hace rápido lo simple, sino mantenible lo complejo.</p>\n</blockquote>\n<h2 id=\"1-1-Principios-de-Redux\"><a href=\"#1-1-Principios-de-Redux\" class=\"headerlink\" title=\"1.1 Principios de Redux\"></a>1.1 Principios de Redux</h2><p>Tenemos tres principios básicos que cumplir:</p>\n<ul>\n<li><strong>Single Source Of Truth</strong>: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.</li>\n<li><strong>Read Only State</strong>: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.</li>\n<li><strong>Changes By Pure Functions</strong>: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.</li>\n</ul>\n<h2 id=\"1-2-Elementos-de-Redux\"><a href=\"#1-2-Elementos-de-Redux\" class=\"headerlink\" title=\"1.2 Elementos de Redux\"></a>1.2 Elementos de Redux</h2><p>Los artificios fundamentales que incorporaremos a nuestro desarrollo van en dos niveles. El primer nivel resuelve los dos primeros principios.</p>\n<ul>\n<li><strong>Store</strong>: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.</li>\n<li><strong>State</strong>: Objeto que contiene la única copia válida de la información. Representa el valor del almacén en un momento determinado. Nunca expondremos un puntero a este dato privado.</li>\n</ul>\n<h3 id=\"Acceso-al-estado\"><a href=\"#Acceso-al-estado\" class=\"headerlink\" title=\"Acceso al estado\"></a>Acceso al estado</h3><ul>\n<li><p><strong>Setters</strong> : Métodos que asignan y notifican un nuevo cambio. Clonan la información recibida para que el llamante no tenga un puntero al estado.</p>\n</li>\n<li><p><strong>Selectors</strong> : Métodos para consulta del estado. Devuelven un observable al que suscribirse para obtener notificaciones de cambio o una instantánea. En cualquier caso siempre emitirá o devolverá un clon del estado.</p>\n</li>\n</ul>\n<h3 id=\"Mutaciones-del-estado\"><a href=\"#Mutaciones-del-estado\" class=\"headerlink\" title=\"Mutaciones del estado\"></a>Mutaciones del estado</h3><ul>\n<li><p><strong>Actions</strong>: Objetos identificados por un tipo y cargados con un <em>payload</em>. Transmiten una intención de mutación sobre el estado del <em>store</em>.</p>\n</li>\n<li><p><strong>Reducers</strong> : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Clonan el estado, realizan los cambios oportunos y devuelven el estado mutado.</p>\n</li>\n</ul>\n<p><img src=\"/images/Redux.png\" alt=\"Redux\"></p>\n<p>Podemos verlo en un diagrama antes de pasar a verlo en código.</p>\n<h1 id=\"2-Implementacion-de-un-Store-con-RxJs\"><a href=\"#2-Implementacion-de-un-Store-con-RxJs\" class=\"headerlink\" title=\"2. Implementación de un Store con RxJs\"></a>2. Implementación de un Store con RxJs</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">know</span> <span class=\"string\">how</span> <span class=\"string\">many</span> <span class=\"string\">products</span> <span class=\"string\">are</span> <span class=\"string\">out</span> <span class=\"string\">of</span> <span class=\"string\">stock</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">refill</span> <span class=\"string\">them</span></span><br></pre></td></tr></table></figure>\n\n<p>Para que veas que <strong>Redux es independiente de Angular</strong>, vamos a montarlo en una librería sin dependencias del <em>framework</em>. <strong>Sólo TypeScript y RxJs</strong>. A día de hoy ambas tecnologías son transversales al ecosistema <em>frontend</em>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @nrwl/workspace:library rx-store</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1-El-Store-observable-minimo\"><a href=\"#2-1-El-Store-observable-minimo\" class=\"headerlink\" title=\"2.1 El Store observable mínimo\"></a>2.1 El Store observable mínimo</h2><p>Empezaremos por la implementación más inocente de un almacén reactivo. Una clase con <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\">tipos genéricos</a> que hace uso de la librería de observables RxJs. De esta, toma el <code>BehaviorSubject</code> que permite notificar cambios y valores iniciales.</p>\n<p>Aunque para evitar que otra clase consumidora también emita sin control, sólo exponemos su interfaz <code>asObservable()</code>. Relacionado con esto también es obligatorio evitar a toda costa punteros al estado. Para ell siempre trabajamos con clones. Los métodos <code>get() set()</code> usan el <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread operator</a> de JS <code>&#123; ...this.state &#125;</code> tanto al recibir como al devolver el valor del estado.</p>\n<p><code>libs\\rx-store\\src\\lib\\mini-store.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BehaviorSubject</span>, <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MiniStore</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">state</span>: T;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> subject$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">initialState: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">set</span>(initialState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">set</span>(<span class=\"params\">newSate: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123; ...newSate &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subject$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">select$</span>(): <span class=\"title class_\">Observable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">subject$</span>.<span class=\"title function_\">asObservable</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">get</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; ...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Puedes ver su uso en los test unitarios que le acompañan en <code>libs\\rx-store\\src\\lib\\rx-store.spec.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MiniStore</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mini-store&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;GIVEN: a basic mini-store of  product stocks&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">interface</span> <span class=\"title class_\">ProductStock</span> &#123; <span class=\"attr\">stock</span>: <span class=\"built_in\">number</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">initial</span>: <span class=\"title class_\">ProductStock</span> = &#123; <span class=\"attr\">stock</span>: <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: I start one &#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stockMiniStore = <span class=\"keyword\">new</span> <span class=\"title class_\">MiniStore</span>&lt;<span class=\"title class_\">ProductStock</span>&gt;(initial);</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: it should have the inital value&#x27;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">      stockMiniStore.<span class=\"title function_\">select$</span>().<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(res).<span class=\"title function_\">toEqual</span>(initial);</span><br><span class=\"line\">        <span class=\"title function_\">done</span>();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: I start and set a new value &#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stockMiniStore = <span class=\"keyword\">new</span> <span class=\"title class_\">MiniStore</span>&lt;<span class=\"title class_\">ProductStock</span>&gt;(initial);</span><br><span class=\"line\">    stockMiniStore.<span class=\"title function_\">set</span>(&#123; <span class=\"attr\">stock</span>: <span class=\"number\">40</span> &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: it should emit the same value&#x27;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">      stockMiniStore.<span class=\"title function_\">select$</span>().<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(res).<span class=\"title function_\">toEqual</span>(&#123; <span class=\"attr\">stock</span>: <span class=\"number\">40</span> &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">done</span>();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-El-envio-de-acciones\"><a href=\"#2-2-El-envio-de-acciones\" class=\"headerlink\" title=\"2.2 El envío de acciones\"></a>2.2 El envío de acciones</h2><p>En una situación más realista y aproximada al patrón Redux <strong>no deberíamos asignar el valor de manera directa</strong>, pues hay que dejar rastro de cómo se llegó ahí. Necesitamos entonces los conceptos de acciones y función reductora. La idea es que el almacén reciba acciones, invoque al reductor y asigne el valor obtenido. Vamos a verlo.</p>\n<p>Empezamos por crear otra clase similar <code>libs\\rx-store\\src\\lib\\rx-store.ts</code> y un par de ayudas. Como mínimo el <em>interface</em> que debe cumplir toda <code>Action</code>; es muy sencillo y siempre igual: una cadena para especificar el comando y cualquier cosa como argumento de carga. Aprovechando las potencia del TypeScript también creamos un <em>type</em> para asegurar que la <code>reducerFunction</code> tiene la firma adecuada. La obligamos a recibir como argumentos el estado actual y la acción que se le aplica; teniendo que devolver el nuevo estado.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BehaviorSubject</span>, <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">payload</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> reducerFunction&lt;T&gt; = <span class=\"function\">(<span class=\"params\">state: T, action: Action</span>) =&gt;</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RxStore</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">state</span>: T;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> subject$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;T&gt;(<span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">initialState: T, <span class=\"keyword\">private</span> reducer: reducerFunction&lt;T&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">set</span>(initialState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">select$</span>(): <span class=\"title class_\">Observable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">subject$</span>.<span class=\"title function_\">asObservable</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">action: Action</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> curretState = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = <span class=\"variable language_\">this</span>.<span class=\"title function_\">reducer</span>(curretState, action);</span><br><span class=\"line\">    <span class=\"comment\">// instrumentation, cache, log...</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">set</span>(newState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">get</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; ...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">set</span>(<span class=\"params\">newSate: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123; ...newSate &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subject$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Como puedes ver, los <code>get()</code> y <code>set()</code> son ahora privados. El mundo exterior nos envía acciones al método <code>public dispatch(action: Action)</code>.  Ese sería un buen momento para incluir lógica de infraestructura e instrumentación. Hay quien  crea un <em>log</em> de lo ocurrido, un histórico de valores… las librerías profesionales nos dan todo eso y mas. Una vez recibida la acción empieza la fiesta de los <em>clones</em> invocando en medio a una función reductora que ahora veremos.</p>\n<hr>\n<h2 id=\"2-3-La-funcion-reductora-de-estado\"><a href=\"#2-3-La-funcion-reductora-de-estado\" class=\"headerlink\" title=\"2.3 La función reductora de estado\"></a>2.3 La función reductora de estado</h2><p>En el fichero de <em>test</em> <code>libs\\rx-store\\src\\lib\\rx-store.spec.ts</code> tenemos un ejemplo clarificador :</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">stockReducer</span>: reducerFunction&lt;<span class=\"title class_\">ProductStock</span>&gt; = <span class=\"keyword\">function</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    state: ProductStock,</span></span><br><span class=\"line\"><span class=\"params\">    action: Action</span></span><br><span class=\"line\"><span class=\"params\">  </span>): <span class=\"title class_\">ProductStock</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clonedState = &#123; ...state &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;set&#x27;</span>:</span><br><span class=\"line\">        clonedState.<span class=\"property\">stock</span> = action.<span class=\"property\">payload</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;increment&#x27;</span>:</span><br><span class=\"line\">        clonedState.<span class=\"property\">stock</span> += action.<span class=\"property\">payload</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clonedState;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>Definimos <code>stockReducer</code> como una <a href=\"https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/\"><strong>función pura</strong></a> que cumple con el tipo <code>reducerFunction</code>. Normalmente estas funciones tienen un <em>switch</em> que evalúa el tipo de la acción. En cada caso se asigna un nuevo estado según la mínima lógica oportuna y al finalizar se devuelve el estado mutado.</p>\n<p>Veamos el resto del <em>test</em> para tener una idea de cómo se utiliza.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: I get an increment &#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stockRxStore = <span class=\"keyword\">new</span> <span class=\"title class_\">RxStore</span>&lt;<span class=\"title class_\">ProductStock</span>&gt;(initial, stockReducer);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">incrementAction</span>: <span class=\"title class_\">Action</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;increment&#x27;</span>, <span class=\"attr\">payload</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">  stockRxStore.<span class=\"title function_\">dispatch</span>(incrementAction);</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: it should raise the stock&#x27;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    stockRxStore.<span class=\"title function_\">select$</span>().<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(res).<span class=\"title function_\">toEqual</span>(&#123; <span class=\"attr\">stock</span>: <span class=\"number\">30</span> &#125;);</span><br><span class=\"line\">      <span class=\"title function_\">done</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>De esta forma ya tenemos un sistema sencillo pero del que podríamos decir que cumple con los principios básicos de Redux.</p>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>Las aplicaciones reales no son sencillas. Este es un tutorial avanzado que te exige conocimiento previo y dedicación. A cambio espero que te resulte útil y que podáis incorporar las técnicas de detección del cambio y control de estado observable en vuestros proyectos.</p>\n<p>Con este tutorial continúas tu formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a>; para poder afrontar retos de tamaño industrial usando te recomiendo que uses <a href=\"../el-patron-redux-con-ngrx-en-angular\">El patrón Redux con NgRx en Angular</a>. Todos esos detalles se tratan en el <a href=\"../https://academia-binaria.com/cursos/angular-business\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-14_redux.png\" alt=\"flujo-reactivo-unidireccional-con-Angular-y-RxJs\"></p>\n<p>Continuando con el <strong>tutorial de Angular Avanzado</strong> nos centramos ahora en una arquitectura de comunicación de datos conocida como <em>Unidirectional Data Flow</em> o flujo de datos en un mismo sentido; la base del <strong>patrón Redux</strong>. Esta técnica es una mejora sobre el modelo básico de Angular, el <em>double-binding</em>, el cual facilitaba mucho el desarrollo en pequeños proyectos.</p>\n<blockquote>\n<p>Cuando hablamos de mejora debemos ser honestos con los costes y beneficios: aquí vamos a mejorar la eficiencia en ejecución y a facilitar la depuración a costa de una mayor complejidad estructural y sintáctica. Merece la pena cuanto más grande sea el proyecto. Este es un ejemplo simplificado pero realista que implementa <em>Redux</em>. Tómate tu tiempo para estudiarlo con calma.</p>\n</blockquote>\n<p>Tomar las decisiones correctas en cuestiones de este calibre puede suponer la diferencia entre el éxito o fracaso de un proyecto. Voy a explicarte las razones para usar este patrón y la manera más sencilla de introducirlo en tus aplicaciones, dejándote en el umbral de soluciones aún más potentes como la gestión de estado centralizada con <em>Redux</em>.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../componentes-dinamicos-directivas-y-pipes-con-Angular\">Componentes dinámicos, directivas y pipes con Angular</a>. Al finalizar dotaremos a la aplicación de un almacén de datos <em>Redux</em> que notifica cambios reactivos.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Arquitectura-del-patron-Redux\">1. Arquitectura del patrón Redux.</a></p>\n<p><a href=\"./#2-Implementacion-de-un-Store-con-RxJs\">2. Implementación de un Store con RxJs.</a></p>\n<p><a href=\"./#Resumen\">Resumen</a></p>\n<hr>\n<h1 id=\"1-Arquitectura-del-patron-Redux\"><a href=\"#1-Arquitectura-del-patron-Redux\" class=\"headerlink\" title=\"1. Arquitectura del patrón Redux\"></a>1. Arquitectura del patrón Redux</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">desarrollador,</span></span><br><span class=\"line\">   <span class=\"attr\">Quiero:</span> <span class=\"string\">saber</span> <span class=\"string\">qué</span> <span class=\"string\">acciones</span> <span class=\"string\">se</span> <span class=\"string\">pueden</span> <span class=\"string\">hacer</span></span><br><span class=\"line\">   <span class=\"attr\">para que:</span> <span class=\"string\">pueda</span> <span class=\"string\">controlar</span> <span class=\"string\">la</span> <span class=\"string\">funcionalidad</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">desarrollador,</span></span><br><span class=\"line\">   <span class=\"attr\">Quiero:</span> <span class=\"string\">saber</span> <span class=\"string\">qué</span> <span class=\"string\">cambios</span> <span class=\"string\">se</span> <span class=\"string\">han</span> <span class=\"string\">realizado</span></span><br><span class=\"line\">   <span class=\"attr\">para que:</span> <span class=\"string\">pueda</span> <span class=\"string\">depurar</span> <span class=\"string\">y</span> <span class=\"string\">predecir</span> <span class=\"string\">el</span> <span class=\"string\">comportamiento</span></span><br></pre></td></tr></table></figure>\n\n<p>Hablar de <em>Unidirectional Data Flow</em> sin presentar <strong><em>Redux</em></strong> es poco menos que imposible. Vamos a ver en qué consiste este patrón tan usado, no sólo en Angular. Lo que aprendas te servirá también para <em>react</em>, <em>vue</em> y otros.</p>\n<p><strong>Redux se ocupa de la gestión del estado</strong>, es decir, del valor de las variables en un determinado momento. Centraliza sus cambios para saber qué ocurrió para llegar a este valor, y qué valor tendrá según lo que ocurra. Desacopla los emisores de acciones de los receptores de información, para ello combina otros dos patrones:</p>\n<ul>\n<li><p><strong>Action:</strong> Envío de comandos al almacén para actualizar el estado</p>\n</li>\n<li><p><strong>Observable:</strong> Subscripción a cambios en el estado del almacén.</p>\n</li>\n</ul>\n<p>Como incorpora cierta complejidad de serie conviene que nos hagamos esta pregunta ¿Cuándo usarlo?. Una pequeña lista de ideas sobre cuándo implementar Redux.</p>\n<ul>\n<li>Aplicaciones complejas con <strong>múltiples componentes</strong>.<ul>\n<li>El patrón contenedor &#x2F; presentadores se hace complejo y tedioso a partir de tres niveles de profundidad del árbol.</li>\n<li>Los <code>router-outlets</code> inician una jerarquía propia. Comunicar componentes entre árboles no es factible con <code>@Input</code> y <code>@Output</code></li>\n</ul>\n</li>\n<li>Uso de estrategias de <strong>detección del cambio OnPush</strong>.<ul>\n<li>Consumo de datos mediante <em>pipes async</em> suscritos a observables.</li>\n</ul>\n</li>\n<li><strong>Cambios concurrentes</strong> por el usuario y los servicios.<ul>\n<li>Peticiones mediante <em>pull</em> a intervalos regulares</li>\n<li>Recepción de <em>sockets</em></li>\n<li>Llamadas en paralelo</li>\n</ul>\n</li>\n<li>Gestión de datos local con <em>cachés</em></li>\n</ul>\n<blockquote>\n<p>Redux no hace rápido lo simple, sino mantenible lo complejo.</p>\n</blockquote>\n<h2 id=\"1-1-Principios-de-Redux\"><a href=\"#1-1-Principios-de-Redux\" class=\"headerlink\" title=\"1.1 Principios de Redux\"></a>1.1 Principios de Redux</h2><p>Tenemos tres principios básicos que cumplir:</p>\n<ul>\n<li><strong>Single Source Of Truth</strong>: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.</li>\n<li><strong>Read Only State</strong>: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.</li>\n<li><strong>Changes By Pure Functions</strong>: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.</li>\n</ul>\n<h2 id=\"1-2-Elementos-de-Redux\"><a href=\"#1-2-Elementos-de-Redux\" class=\"headerlink\" title=\"1.2 Elementos de Redux\"></a>1.2 Elementos de Redux</h2><p>Los artificios fundamentales que incorporaremos a nuestro desarrollo van en dos niveles. El primer nivel resuelve los dos primeros principios.</p>\n<ul>\n<li><strong>Store</strong>: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.</li>\n<li><strong>State</strong>: Objeto que contiene la única copia válida de la información. Representa el valor del almacén en un momento determinado. Nunca expondremos un puntero a este dato privado.</li>\n</ul>\n<h3 id=\"Acceso-al-estado\"><a href=\"#Acceso-al-estado\" class=\"headerlink\" title=\"Acceso al estado\"></a>Acceso al estado</h3><ul>\n<li><p><strong>Setters</strong> : Métodos que asignan y notifican un nuevo cambio. Clonan la información recibida para que el llamante no tenga un puntero al estado.</p>\n</li>\n<li><p><strong>Selectors</strong> : Métodos para consulta del estado. Devuelven un observable al que suscribirse para obtener notificaciones de cambio o una instantánea. En cualquier caso siempre emitirá o devolverá un clon del estado.</p>\n</li>\n</ul>\n<h3 id=\"Mutaciones-del-estado\"><a href=\"#Mutaciones-del-estado\" class=\"headerlink\" title=\"Mutaciones del estado\"></a>Mutaciones del estado</h3><ul>\n<li><p><strong>Actions</strong>: Objetos identificados por un tipo y cargados con un <em>payload</em>. Transmiten una intención de mutación sobre el estado del <em>store</em>.</p>\n</li>\n<li><p><strong>Reducers</strong> : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Clonan el estado, realizan los cambios oportunos y devuelven el estado mutado.</p>\n</li>\n</ul>\n<p><img src=\"/images/Redux.png\" alt=\"Redux\"></p>\n<p>Podemos verlo en un diagrama antes de pasar a verlo en código.</p>\n<h1 id=\"2-Implementacion-de-un-Store-con-RxJs\"><a href=\"#2-Implementacion-de-un-Store-con-RxJs\" class=\"headerlink\" title=\"2. Implementación de un Store con RxJs\"></a>2. Implementación de un Store con RxJs</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">As a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"attr\">I want:</span> <span class=\"string\">to</span> <span class=\"string\">know</span> <span class=\"string\">how</span> <span class=\"string\">many</span> <span class=\"string\">products</span> <span class=\"string\">are</span> <span class=\"string\">out</span> <span class=\"string\">of</span> <span class=\"string\">stock</span></span><br><span class=\"line\">  <span class=\"attr\">so that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">refill</span> <span class=\"string\">them</span></span><br></pre></td></tr></table></figure>\n\n<p>Para que veas que <strong>Redux es independiente de Angular</strong>, vamos a montarlo en una librería sin dependencias del <em>framework</em>. <strong>Sólo TypeScript y RxJs</strong>. A día de hoy ambas tecnologías son transversales al ecosistema <em>frontend</em>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @nrwl/workspace:library rx-store</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1-El-Store-observable-minimo\"><a href=\"#2-1-El-Store-observable-minimo\" class=\"headerlink\" title=\"2.1 El Store observable mínimo\"></a>2.1 El Store observable mínimo</h2><p>Empezaremos por la implementación más inocente de un almacén reactivo. Una clase con <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\">tipos genéricos</a> que hace uso de la librería de observables RxJs. De esta, toma el <code>BehaviorSubject</code> que permite notificar cambios y valores iniciales.</p>\n<p>Aunque para evitar que otra clase consumidora también emita sin control, sólo exponemos su interfaz <code>asObservable()</code>. Relacionado con esto también es obligatorio evitar a toda costa punteros al estado. Para ell siempre trabajamos con clones. Los métodos <code>get() set()</code> usan el <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread operator</a> de JS <code>&#123; ...this.state &#125;</code> tanto al recibir como al devolver el valor del estado.</p>\n<p><code>libs\\rx-store\\src\\lib\\mini-store.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BehaviorSubject</span>, <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MiniStore</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">state</span>: T;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> subject$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">initialState: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">set</span>(initialState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">set</span>(<span class=\"params\">newSate: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123; ...newSate &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subject$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">select$</span>(): <span class=\"title class_\">Observable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">subject$</span>.<span class=\"title function_\">asObservable</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">get</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; ...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Puedes ver su uso en los test unitarios que le acompañan en <code>libs\\rx-store\\src\\lib\\rx-store.spec.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MiniStore</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mini-store&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;GIVEN: a basic mini-store of  product stocks&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">interface</span> <span class=\"title class_\">ProductStock</span> &#123; <span class=\"attr\">stock</span>: <span class=\"built_in\">number</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">initial</span>: <span class=\"title class_\">ProductStock</span> = &#123; <span class=\"attr\">stock</span>: <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: I start one &#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stockMiniStore = <span class=\"keyword\">new</span> <span class=\"title class_\">MiniStore</span>&lt;<span class=\"title class_\">ProductStock</span>&gt;(initial);</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: it should have the inital value&#x27;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">      stockMiniStore.<span class=\"title function_\">select$</span>().<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(res).<span class=\"title function_\">toEqual</span>(initial);</span><br><span class=\"line\">        <span class=\"title function_\">done</span>();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: I start and set a new value &#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stockMiniStore = <span class=\"keyword\">new</span> <span class=\"title class_\">MiniStore</span>&lt;<span class=\"title class_\">ProductStock</span>&gt;(initial);</span><br><span class=\"line\">    stockMiniStore.<span class=\"title function_\">set</span>(&#123; <span class=\"attr\">stock</span>: <span class=\"number\">40</span> &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: it should emit the same value&#x27;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">      stockMiniStore.<span class=\"title function_\">select$</span>().<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(res).<span class=\"title function_\">toEqual</span>(&#123; <span class=\"attr\">stock</span>: <span class=\"number\">40</span> &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">done</span>();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-El-envio-de-acciones\"><a href=\"#2-2-El-envio-de-acciones\" class=\"headerlink\" title=\"2.2 El envío de acciones\"></a>2.2 El envío de acciones</h2><p>En una situación más realista y aproximada al patrón Redux <strong>no deberíamos asignar el valor de manera directa</strong>, pues hay que dejar rastro de cómo se llegó ahí. Necesitamos entonces los conceptos de acciones y función reductora. La idea es que el almacén reciba acciones, invoque al reductor y asigne el valor obtenido. Vamos a verlo.</p>\n<p>Empezamos por crear otra clase similar <code>libs\\rx-store\\src\\lib\\rx-store.ts</code> y un par de ayudas. Como mínimo el <em>interface</em> que debe cumplir toda <code>Action</code>; es muy sencillo y siempre igual: una cadena para especificar el comando y cualquier cosa como argumento de carga. Aprovechando las potencia del TypeScript también creamos un <em>type</em> para asegurar que la <code>reducerFunction</code> tiene la firma adecuada. La obligamos a recibir como argumentos el estado actual y la acción que se le aplica; teniendo que devolver el nuevo estado.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BehaviorSubject</span>, <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">payload</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> reducerFunction&lt;T&gt; = <span class=\"function\">(<span class=\"params\">state: T, action: Action</span>) =&gt;</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RxStore</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">state</span>: T;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> subject$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;T&gt;(<span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">initialState: T, <span class=\"keyword\">private</span> reducer: reducerFunction&lt;T&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">set</span>(initialState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">select$</span>(): <span class=\"title class_\">Observable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">subject$</span>.<span class=\"title function_\">asObservable</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">action: Action</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> curretState = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = <span class=\"variable language_\">this</span>.<span class=\"title function_\">reducer</span>(curretState, action);</span><br><span class=\"line\">    <span class=\"comment\">// instrumentation, cache, log...</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">set</span>(newState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">get</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; ...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">set</span>(<span class=\"params\">newSate: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123; ...newSate &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subject$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Como puedes ver, los <code>get()</code> y <code>set()</code> son ahora privados. El mundo exterior nos envía acciones al método <code>public dispatch(action: Action)</code>.  Ese sería un buen momento para incluir lógica de infraestructura e instrumentación. Hay quien  crea un <em>log</em> de lo ocurrido, un histórico de valores… las librerías profesionales nos dan todo eso y mas. Una vez recibida la acción empieza la fiesta de los <em>clones</em> invocando en medio a una función reductora que ahora veremos.</p>\n<hr>\n<h2 id=\"2-3-La-funcion-reductora-de-estado\"><a href=\"#2-3-La-funcion-reductora-de-estado\" class=\"headerlink\" title=\"2.3 La función reductora de estado\"></a>2.3 La función reductora de estado</h2><p>En el fichero de <em>test</em> <code>libs\\rx-store\\src\\lib\\rx-store.spec.ts</code> tenemos un ejemplo clarificador :</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">stockReducer</span>: reducerFunction&lt;<span class=\"title class_\">ProductStock</span>&gt; = <span class=\"keyword\">function</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    state: ProductStock,</span></span><br><span class=\"line\"><span class=\"params\">    action: Action</span></span><br><span class=\"line\"><span class=\"params\">  </span>): <span class=\"title class_\">ProductStock</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clonedState = &#123; ...state &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;set&#x27;</span>:</span><br><span class=\"line\">        clonedState.<span class=\"property\">stock</span> = action.<span class=\"property\">payload</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;increment&#x27;</span>:</span><br><span class=\"line\">        clonedState.<span class=\"property\">stock</span> += action.<span class=\"property\">payload</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clonedState;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>Definimos <code>stockReducer</code> como una <a href=\"https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/\"><strong>función pura</strong></a> que cumple con el tipo <code>reducerFunction</code>. Normalmente estas funciones tienen un <em>switch</em> que evalúa el tipo de la acción. En cada caso se asigna un nuevo estado según la mínima lógica oportuna y al finalizar se devuelve el estado mutado.</p>\n<p>Veamos el resto del <em>test</em> para tener una idea de cómo se utiliza.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;WHEN: I get an increment &#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stockRxStore = <span class=\"keyword\">new</span> <span class=\"title class_\">RxStore</span>&lt;<span class=\"title class_\">ProductStock</span>&gt;(initial, stockReducer);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">incrementAction</span>: <span class=\"title class_\">Action</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;increment&#x27;</span>, <span class=\"attr\">payload</span>: <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">  stockRxStore.<span class=\"title function_\">dispatch</span>(incrementAction);</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;THEN: it should raise the stock&#x27;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    stockRxStore.<span class=\"title function_\">select$</span>().<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(res).<span class=\"title function_\">toEqual</span>(&#123; <span class=\"attr\">stock</span>: <span class=\"number\">30</span> &#125;);</span><br><span class=\"line\">      <span class=\"title function_\">done</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>De esta forma ya tenemos un sistema sencillo pero del que podríamos decir que cumple con los principios básicos de Redux.</p>\n<h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>Las aplicaciones reales no son sencillas. Este es un tutorial avanzado que te exige conocimiento previo y dedicación. A cambio espero que te resulte útil y que podáis incorporar las técnicas de detección del cambio y control de estado observable en vuestros proyectos.</p>\n<p>Con este tutorial continúas tu formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a>; para poder afrontar retos de tamaño industrial usando te recomiendo que uses <a href=\"../el-patron-redux-con-ngrx-en-angular\">El patrón Redux con NgRx en Angular</a>. Todos esos detalles se tratan en el <a href=\"../https://academia-binaria.com/cursos/angular-business\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"PWA, Entre la web y las apps con Angular","date":"2019-10-03T17:50:27.000Z","thumbnail":"/css/images/angular-16_pwa.png","_content":"\n![pwa-entre-la-web-y-las-apps-con-angular](/images/tutorial-angular-16_pwa.png)\n\nLas aplicaciones web han evolucionado desde el contenido estático al dinámico, luego al adaptable y ahora se acercan **progresivamente a la experiencia y rendimiento de aplicaciones nativas**. En Angular se incorporan esas capacidades desde el propio *framework*.\n\nMediante la librería `@ngular/pwa` dispondremos de todo lo necesario para ofrecer instalación en escritorio, actualizar la aplicación controladamente, recibir notificaciones del servidor e incluso mejoras en la caché de comunicaciones que pudieran permitir un funcionamiento *offline*.\n\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [El patrón Redux con NgRx en Angular](../el-patron-redux-con-ngrx-en-angular/). Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n# 1 Las herramientas de la librería PWA\n\nAprovechando las nuevas características del *Angular CLI* tenemos el comando `ng add @angular/pwa` que instala los paquetes y configura cualquier aplicación Angular convirtiéndola en una *PWA* básica.\n\nEstos son los actores y ficheros involucrados en este proceso tras la agregación del paquete `pwa`.\n\n- ServiceWorkerModule\n- ./angular.json { \"serviceWorker\": true }\n- ./ngsw-config.json\n- ./src/manifest.webmanifest\n- ./src/index.html\n- ./assets/icons/..\n\nCon todo instalado y configurado, querrás probar que funciona. Pero, a primera vista no ocurre nada. **Las características *PWA* están preparadas para funcionar en modo producción**. Así que lo primero será ejecutar el comando `ng build --prod` y lanzar un servidor sobre la carpeta de distribución recién creada.\n\nDe entre los nuevos ficheros que aparecen hay dos que debes conocer especialmente, **el *manifest* y el *service worker***.\n\n## 1.1 El manifest.webmanifest\n\nEste sencillo documento acompaña al `index.html` y le da indicaciones al navegador para que trate esta aplicación de manera especial. El fichero en sí contiene una *metadata* con textos descriptivos, colores e iconos para ser usados por el navegador y el sistema operativo y **ofrecerle al usuario que instale la *web* como una *app***.\n\nCasi todo es cosmético, pero merece la pena prestar especial atención a los iconos. Por defecto el *CLI* instala distintas versiones del logo oficial de Angular. Una forma cómoda de sustituirlo por los tuyos es usar la herramienta [*ngx-pwa-icons*](https://www.npmjs.com/package/ngx-pwa-icons)\n\n```json\n{\n  \"name\": \"shop\",\n  \"short_name\": \"shop\",\n  \"theme_color\": \"#1976d2\",\n  \"background_color\": \"#fafafa\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/\",\n  \"icons\": [\n    {\n      \"src\": \"assets/icons/icon-72x72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\"\n    },\n    ...\n   ]\n}\n```\n\n> Asegúrate de que en la `start_url` apunte a la página de inicio correcta y despliega en modo producción en un servidor seguro con *https*. Pruébalo varias veces en distintos navegadores y verás las distintas experiencias de instalación que ofrecen.\n\n## 1.2 El ngsw-worker.js\n\nEl otro gran fichero, y más importante para los desarrolladores, es **el configurador del *Service Worker***. Cuando un navegador ejecuta un *script* lo hace en *thread* dedicado a la interacción con el usuario y la manipulación del *DOM*. Normalmente ese hilo está muy ocupado, cuando no está saturado. La solución para agilizar los procesos está en usar más *threads*. Presentamos el *worker thread*.\n\nSe le llama así a los hilos creados a partir del principal y que le ayudan en tareas en segundo plano. Esos hilos tienen **prohibido el acceso al DOM, ni lo escuchan ni lo manipulan**. Pero a cambio están muy liberados para realizar cálculos complejos o llamadas a servicios. Se comunican con el *thread* principal a través de un sencillo protocolo de eventos y subscripciones.\n\nUna de las tareas para las que más se les utiliza es para la gestión inteligente de las comunicaciones. Este fichero viene pre programado para realizar las siguientes **funciones PWA de Angular**:\n\n- Caché de contenido estático para funcionamiento offline\n- Caché de datos dinámicos para mayor velocidad\n- Gestión de instalaciones y versiones\n- Notificaciones de datos push\n\nTodo lo que hay que hacer es configurar estas funciones en un fichero, el `ngsw-config.json`, ya generado con valores por defecto. El *CLI*, durante el proceso de construcción en modo producción, copiará y manipulará los scripts y sus configuraciones. En ejecución, el `AppModule` registrará el script en el navegador, se subscribirá a sus eventos y ejecutará lo configurado por el programador en el *json*.\n\n\n# 2 Comunicaciones y caché\n\n**El service worker de Angular** está especialmente diseñado para hacerse cargo de las comunicaciones con el servidor. Digamos que se convierte en un **interceptor transparente de todas las peticiones http**. Tanto de los ficheros propios de la aplicación como de las comunicaciones de datos.\n\n## 2.1 Descarga y actualización de la aplicación\n\nUna vez descargado el *index.html* con el contenido mínimo de Angular, diríamos que la aplicación se ha instalado y está lista para ejecutarse. A partir de ese momento el *ngsw* toma el control y puede pre descargar ficheros en segundo plano; de forma que **cuando sean reclamados ya estén disponibles** y mejoren la experiencia del usuario.\n\nRutinariamente el servicio se ocupará de consultar novedades en el servidor para mantener los ficheros locales actualizados. Todo ello se configura en la sección `assetGroups` del  `ngsw-config.json`.\n\n### Default: Full App\n\nSe descarga la aplicación completa. Tranquilidad, esto sucede en segundo plano y una vez arrancado angular y con el usuario contento viendo ya la página pedida. Al navegar por las páginas la respuesta es instantánea porque los módulos con el código ya están ahí.\n\n```json\n  \"assetGroups\": [\n    {\n      \"name\": \"app\",\n      \"installMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/favicon.ico\", \"/index.html\",\n          \"/manifest.webmanifest\",  \"/*.css\", \"/*.js\"\n        ]\n      }\n    },\n    {\n      \"name\": \"assets\",\n      \"installMode\": \"lazy\",\n      \"updateMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/assets/**\",\n          \"/*.(eot|svg|cur|jpg|png|webp|gif|otf|ttf|woff|woff2|ani)\"\n        ]\n      }\n    }\n  ],\n```\n\nEso sí, la descarga consume línea. En cierto casos, con usuarios móviles y grandes aplicaciones quizás no sea adecuado. Si prefieres que los módulos Lazy no se descarguen hasta que nose visiten, te propongo esta otra configuración.\n\n### Proposed: Lazy App\n\n```json\n  \"assetGroups\":[\n    {\n      \"name\": \"coreapp\",\n      \"installMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/favicon.ico\",\n          \"/index.html\",\n          \"/manifest.webmanifest\",\n          \"/*.css\",\n          \"/common*.js\",\n          \"/main*.js\",\n          \"/ngsw*.js\",\n          \"/*woker*.js\",\n          \"/*polyfills*.js\",\n          \"/runtime*.js\"\n        ]\n      }\n    },\n    {\n      \"name\": \"lazyapp\",\n      \"installMode\": \"lazy\",\n      \"updateMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\"/*.js\"]\n      }\n    }...\n```\n\n\n## 2.2 Caché inteligente de datos\n\nEl control de la **recepción de datos dinámicos** es la otra gran tarea del *service worker*. En este caso para tener una caché que acelere la presentación de datos o que incluso permita un funcionamiento *offline*.\n\nMediante **dos estrategias complementarias que tratan de mantener los datos actualizados y disponibles** en todo momento. En este caso configurándolo en los `dataGroups`.\n\n> La idea del *cache-first* es tener el dato ya listo para ser usado cuanto antes. Mientras que con *api-first* se pretende tener la versión más actual posible, y usar la última descargada en caso de problemas o desconexión total.\n\n```json\n \"dataGroups\": [\n  {\n    \"name\": \"cache-first-greeting\",\n    \"urls\": [\n      \"http://localhost:3333/api\"\n    ],\n    \"cacheConfig\": {\n      \"strategy\": \"performance\",\n      \"maxAge\": \"1d\",\n      \"maxSize\": 10\n    }\n  },\n  {\n    \"name\": \"api-first-rates\",\n    \"urls\": [\n      \"https://api.exchangeratesapi.io/latest?symbols=GBP\",\n      \"https://api.exchangeratesapi.io/latest\"\n    ],\n    \"cacheConfig\": {\n      \"strategy\": \"freshness\",\n      \"timeout\": \"5s\",\n      \"maxAge\": \"1h\",\n      \"maxSize\": 10,\n    }\n  }\n]\n```\n\n# 3 Servicios\n\nLa librería `@angular/pwa` publica el módulo `ServiceWorkerModule` que contiene la lógica de registro del *service worker* y dos servicios programables con los que interactuar desde el código de tu aplicación Angular.\n\n## 3.1 Actualización con el SwUpdate\n\nCuando despliegas una nueva versión seguro que estás deseando que los usuarios disfruten cuanto antes de las mejoras o correcciones. Pero en las aplicaciones SPA resulta que **la actualización no es tan inmediata** como pudiera parecer. Al no forzar la recarga del documento en las navegaciones internas, el `index.html` puede residir sin cambios más de lo debido. Confiar en que lo hagan el navegador o el usuario puede no ser una opción.\n\nLa solución PWA es usar el `ServiceWorker` para detectar nuevas versiones en el servidor. Para ello utiliza un sistema propio de *hashes* que le permite comparar la versión descargada y la disponible en el servidor.** Cuando detecta un cambio emite un evento al que te puedes subscribir** usando el servicio `SwUpdate`. En ese momento puedes consultar al usuario, o forzar a lo bestia la recarga ;-).\n\n\n```typescript\nconstructor(private swUpdate: SwUpdate) {\n  if (this.swUpdate.isEnabled) {\n    this.swUpdate.available.subscribe((event: UpdateAvailableEvent) => {\n      if (confirm(`Do you want to update?`)) {\n        window.location.reload();\n      }\n    });\n  }\n}\n```\n\n## 3.2 Notificaciones con el SwPush\n\nUna característica de las *apps* nativas muy aprecia por los usuarios es la capacidad de mostrar **mensajes recibidos vía *push* por parte del servidor**. Pueden ser avisos, novedades o simple marketing. Pero lo importante es que lo recibe el sistema operativo, la aplicación no necesita estar en marcha y el mensaje se muestra de forma nativa.\n\n> Obviamente para ello hay que involucrar código de servidor y un servicio de mensajería de terceros. Pero la parte Angular del desarrollo es muy sencilla. Consiste en registrar al usuario, que voluntariamente decide ser notificado, y luego escuchar los mensajes provenientes en forma de eventos. Todo ello reclamando una dependencia al servicio de notificaciones `constructor(private swPush: SwPush)`.\n\n```typescript\nconstructor(private swUpdate: SwUpdate) {\n  if (this.swPush.isEnabled) {\n      this.swPush\n        .requestSubscription({ serverPublicKey: 'VAPID_PUBLIC_KEY' })\n        .then(sub => {\n          console.log('send subscription to your server and wait form messages', sub.toJSON());\n          this.swPush.messages.subscribe(msg => console.log('Received: ', msg));\n        })\n    }\n}\n```\n\nYa tienes una web que se comporta progresivamente como una App nativa, una *Progressive Web Application*. Las mejoras en rendimiento y experiencia de usuario son recompensa más que suficiente para que le des una oportunidad a las **Angular PWA**.\n\nContinúa tu formación avanzada para crear aplicaciones con mayor [Velocidad y SEO con el SSR de Angular Universal](../velocidad-y-seo-con-el-ssr-de-angular-universal) y verás como aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-16-PWA-Entre-la-web-y-las-apps-con-Angular.md","raw":"---\ntitle: PWA, Entre la web y las apps con Angular\npermalink: pwa-entre-la-web-y-las-apps-con-angular\ndate: 2019-10-03 19:50:27\ntags:\n- Angular\n- Angular8\n- Angular2\n- PWA\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-16_pwa.png\n---\n\n![pwa-entre-la-web-y-las-apps-con-angular](/images/tutorial-angular-16_pwa.png)\n\nLas aplicaciones web han evolucionado desde el contenido estático al dinámico, luego al adaptable y ahora se acercan **progresivamente a la experiencia y rendimiento de aplicaciones nativas**. En Angular se incorporan esas capacidades desde el propio *framework*.\n\nMediante la librería `@ngular/pwa` dispondremos de todo lo necesario para ofrecer instalación en escritorio, actualizar la aplicación controladamente, recibir notificaciones del servidor e incluso mejoras en la caché de comunicaciones que pudieran permitir un funcionamiento *offline*.\n\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [El patrón Redux con NgRx en Angular](../el-patron-redux-con-ngrx-en-angular/). Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n# 1 Las herramientas de la librería PWA\n\nAprovechando las nuevas características del *Angular CLI* tenemos el comando `ng add @angular/pwa` que instala los paquetes y configura cualquier aplicación Angular convirtiéndola en una *PWA* básica.\n\nEstos son los actores y ficheros involucrados en este proceso tras la agregación del paquete `pwa`.\n\n- ServiceWorkerModule\n- ./angular.json { \"serviceWorker\": true }\n- ./ngsw-config.json\n- ./src/manifest.webmanifest\n- ./src/index.html\n- ./assets/icons/..\n\nCon todo instalado y configurado, querrás probar que funciona. Pero, a primera vista no ocurre nada. **Las características *PWA* están preparadas para funcionar en modo producción**. Así que lo primero será ejecutar el comando `ng build --prod` y lanzar un servidor sobre la carpeta de distribución recién creada.\n\nDe entre los nuevos ficheros que aparecen hay dos que debes conocer especialmente, **el *manifest* y el *service worker***.\n\n## 1.1 El manifest.webmanifest\n\nEste sencillo documento acompaña al `index.html` y le da indicaciones al navegador para que trate esta aplicación de manera especial. El fichero en sí contiene una *metadata* con textos descriptivos, colores e iconos para ser usados por el navegador y el sistema operativo y **ofrecerle al usuario que instale la *web* como una *app***.\n\nCasi todo es cosmético, pero merece la pena prestar especial atención a los iconos. Por defecto el *CLI* instala distintas versiones del logo oficial de Angular. Una forma cómoda de sustituirlo por los tuyos es usar la herramienta [*ngx-pwa-icons*](https://www.npmjs.com/package/ngx-pwa-icons)\n\n```json\n{\n  \"name\": \"shop\",\n  \"short_name\": \"shop\",\n  \"theme_color\": \"#1976d2\",\n  \"background_color\": \"#fafafa\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/\",\n  \"icons\": [\n    {\n      \"src\": \"assets/icons/icon-72x72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\"\n    },\n    ...\n   ]\n}\n```\n\n> Asegúrate de que en la `start_url` apunte a la página de inicio correcta y despliega en modo producción en un servidor seguro con *https*. Pruébalo varias veces en distintos navegadores y verás las distintas experiencias de instalación que ofrecen.\n\n## 1.2 El ngsw-worker.js\n\nEl otro gran fichero, y más importante para los desarrolladores, es **el configurador del *Service Worker***. Cuando un navegador ejecuta un *script* lo hace en *thread* dedicado a la interacción con el usuario y la manipulación del *DOM*. Normalmente ese hilo está muy ocupado, cuando no está saturado. La solución para agilizar los procesos está en usar más *threads*. Presentamos el *worker thread*.\n\nSe le llama así a los hilos creados a partir del principal y que le ayudan en tareas en segundo plano. Esos hilos tienen **prohibido el acceso al DOM, ni lo escuchan ni lo manipulan**. Pero a cambio están muy liberados para realizar cálculos complejos o llamadas a servicios. Se comunican con el *thread* principal a través de un sencillo protocolo de eventos y subscripciones.\n\nUna de las tareas para las que más se les utiliza es para la gestión inteligente de las comunicaciones. Este fichero viene pre programado para realizar las siguientes **funciones PWA de Angular**:\n\n- Caché de contenido estático para funcionamiento offline\n- Caché de datos dinámicos para mayor velocidad\n- Gestión de instalaciones y versiones\n- Notificaciones de datos push\n\nTodo lo que hay que hacer es configurar estas funciones en un fichero, el `ngsw-config.json`, ya generado con valores por defecto. El *CLI*, durante el proceso de construcción en modo producción, copiará y manipulará los scripts y sus configuraciones. En ejecución, el `AppModule` registrará el script en el navegador, se subscribirá a sus eventos y ejecutará lo configurado por el programador en el *json*.\n\n\n# 2 Comunicaciones y caché\n\n**El service worker de Angular** está especialmente diseñado para hacerse cargo de las comunicaciones con el servidor. Digamos que se convierte en un **interceptor transparente de todas las peticiones http**. Tanto de los ficheros propios de la aplicación como de las comunicaciones de datos.\n\n## 2.1 Descarga y actualización de la aplicación\n\nUna vez descargado el *index.html* con el contenido mínimo de Angular, diríamos que la aplicación se ha instalado y está lista para ejecutarse. A partir de ese momento el *ngsw* toma el control y puede pre descargar ficheros en segundo plano; de forma que **cuando sean reclamados ya estén disponibles** y mejoren la experiencia del usuario.\n\nRutinariamente el servicio se ocupará de consultar novedades en el servidor para mantener los ficheros locales actualizados. Todo ello se configura en la sección `assetGroups` del  `ngsw-config.json`.\n\n### Default: Full App\n\nSe descarga la aplicación completa. Tranquilidad, esto sucede en segundo plano y una vez arrancado angular y con el usuario contento viendo ya la página pedida. Al navegar por las páginas la respuesta es instantánea porque los módulos con el código ya están ahí.\n\n```json\n  \"assetGroups\": [\n    {\n      \"name\": \"app\",\n      \"installMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/favicon.ico\", \"/index.html\",\n          \"/manifest.webmanifest\",  \"/*.css\", \"/*.js\"\n        ]\n      }\n    },\n    {\n      \"name\": \"assets\",\n      \"installMode\": \"lazy\",\n      \"updateMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/assets/**\",\n          \"/*.(eot|svg|cur|jpg|png|webp|gif|otf|ttf|woff|woff2|ani)\"\n        ]\n      }\n    }\n  ],\n```\n\nEso sí, la descarga consume línea. En cierto casos, con usuarios móviles y grandes aplicaciones quizás no sea adecuado. Si prefieres que los módulos Lazy no se descarguen hasta que nose visiten, te propongo esta otra configuración.\n\n### Proposed: Lazy App\n\n```json\n  \"assetGroups\":[\n    {\n      \"name\": \"coreapp\",\n      \"installMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/favicon.ico\",\n          \"/index.html\",\n          \"/manifest.webmanifest\",\n          \"/*.css\",\n          \"/common*.js\",\n          \"/main*.js\",\n          \"/ngsw*.js\",\n          \"/*woker*.js\",\n          \"/*polyfills*.js\",\n          \"/runtime*.js\"\n        ]\n      }\n    },\n    {\n      \"name\": \"lazyapp\",\n      \"installMode\": \"lazy\",\n      \"updateMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\"/*.js\"]\n      }\n    }...\n```\n\n\n## 2.2 Caché inteligente de datos\n\nEl control de la **recepción de datos dinámicos** es la otra gran tarea del *service worker*. En este caso para tener una caché que acelere la presentación de datos o que incluso permita un funcionamiento *offline*.\n\nMediante **dos estrategias complementarias que tratan de mantener los datos actualizados y disponibles** en todo momento. En este caso configurándolo en los `dataGroups`.\n\n> La idea del *cache-first* es tener el dato ya listo para ser usado cuanto antes. Mientras que con *api-first* se pretende tener la versión más actual posible, y usar la última descargada en caso de problemas o desconexión total.\n\n```json\n \"dataGroups\": [\n  {\n    \"name\": \"cache-first-greeting\",\n    \"urls\": [\n      \"http://localhost:3333/api\"\n    ],\n    \"cacheConfig\": {\n      \"strategy\": \"performance\",\n      \"maxAge\": \"1d\",\n      \"maxSize\": 10\n    }\n  },\n  {\n    \"name\": \"api-first-rates\",\n    \"urls\": [\n      \"https://api.exchangeratesapi.io/latest?symbols=GBP\",\n      \"https://api.exchangeratesapi.io/latest\"\n    ],\n    \"cacheConfig\": {\n      \"strategy\": \"freshness\",\n      \"timeout\": \"5s\",\n      \"maxAge\": \"1h\",\n      \"maxSize\": 10,\n    }\n  }\n]\n```\n\n# 3 Servicios\n\nLa librería `@angular/pwa` publica el módulo `ServiceWorkerModule` que contiene la lógica de registro del *service worker* y dos servicios programables con los que interactuar desde el código de tu aplicación Angular.\n\n## 3.1 Actualización con el SwUpdate\n\nCuando despliegas una nueva versión seguro que estás deseando que los usuarios disfruten cuanto antes de las mejoras o correcciones. Pero en las aplicaciones SPA resulta que **la actualización no es tan inmediata** como pudiera parecer. Al no forzar la recarga del documento en las navegaciones internas, el `index.html` puede residir sin cambios más de lo debido. Confiar en que lo hagan el navegador o el usuario puede no ser una opción.\n\nLa solución PWA es usar el `ServiceWorker` para detectar nuevas versiones en el servidor. Para ello utiliza un sistema propio de *hashes* que le permite comparar la versión descargada y la disponible en el servidor.** Cuando detecta un cambio emite un evento al que te puedes subscribir** usando el servicio `SwUpdate`. En ese momento puedes consultar al usuario, o forzar a lo bestia la recarga ;-).\n\n\n```typescript\nconstructor(private swUpdate: SwUpdate) {\n  if (this.swUpdate.isEnabled) {\n    this.swUpdate.available.subscribe((event: UpdateAvailableEvent) => {\n      if (confirm(`Do you want to update?`)) {\n        window.location.reload();\n      }\n    });\n  }\n}\n```\n\n## 3.2 Notificaciones con el SwPush\n\nUna característica de las *apps* nativas muy aprecia por los usuarios es la capacidad de mostrar **mensajes recibidos vía *push* por parte del servidor**. Pueden ser avisos, novedades o simple marketing. Pero lo importante es que lo recibe el sistema operativo, la aplicación no necesita estar en marcha y el mensaje se muestra de forma nativa.\n\n> Obviamente para ello hay que involucrar código de servidor y un servicio de mensajería de terceros. Pero la parte Angular del desarrollo es muy sencilla. Consiste en registrar al usuario, que voluntariamente decide ser notificado, y luego escuchar los mensajes provenientes en forma de eventos. Todo ello reclamando una dependencia al servicio de notificaciones `constructor(private swPush: SwPush)`.\n\n```typescript\nconstructor(private swUpdate: SwUpdate) {\n  if (this.swPush.isEnabled) {\n      this.swPush\n        .requestSubscription({ serverPublicKey: 'VAPID_PUBLIC_KEY' })\n        .then(sub => {\n          console.log('send subscription to your server and wait form messages', sub.toJSON());\n          this.swPush.messages.subscribe(msg => console.log('Received: ', msg));\n        })\n    }\n}\n```\n\nYa tienes una web que se comporta progresivamente como una App nativa, una *Progressive Web Application*. Las mejoras en rendimiento y experiencia de usuario son recompensa más que suficiente para que le des una oportunidad a las **Angular PWA**.\n\nContinúa tu formación avanzada para crear aplicaciones con mayor [Velocidad y SEO con el SSR de Angular Universal](../velocidad-y-seo-con-el-ssr-de-angular-universal) y verás como aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-16-PWA-Entre-la-web-y-las-apps-con-Angular","published":1,"updated":"2023-07-02T10:25:58.475Z","__permalink":"pwa-entre-la-web-y-las-apps-con-angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fd000ze0969fd02tog","content":"<p><img src=\"/images/tutorial-angular-16_pwa.png\" alt=\"pwa-entre-la-web-y-las-apps-con-angular\"></p>\n<p>Las aplicaciones web han evolucionado desde el contenido estático al dinámico, luego al adaptable y ahora se acercan <strong>progresivamente a la experiencia y rendimiento de aplicaciones nativas</strong>. En Angular se incorporan esas capacidades desde el propio <em>framework</em>.</p>\n<p>Mediante la librería <code>@ngular/pwa</code> dispondremos de todo lo necesario para ofrecer instalación en escritorio, actualizar la aplicación controladamente, recibir notificaciones del servidor e incluso mejoras en la caché de comunicaciones que pudieran permitir un funcionamiento <em>offline</em>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo del código tal como quedó en <a href=\"../el-patron-redux-con-ngrx-en-angular/\">El patrón Redux con NgRx en Angular</a>. Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Las-herramientas-de-la-libreria-PWA\"><a href=\"#1-Las-herramientas-de-la-libreria-PWA\" class=\"headerlink\" title=\"1 Las herramientas de la librería PWA\"></a>1 Las herramientas de la librería PWA</h1><p>Aprovechando las nuevas características del <em>Angular CLI</em> tenemos el comando <code>ng add @angular/pwa</code> que instala los paquetes y configura cualquier aplicación Angular convirtiéndola en una <em>PWA</em> básica.</p>\n<p>Estos son los actores y ficheros involucrados en este proceso tras la agregación del paquete <code>pwa</code>.</p>\n<ul>\n<li>ServiceWorkerModule</li>\n<li>.&#x2F;angular.json { “serviceWorker”: true }</li>\n<li>.&#x2F;ngsw-config.json</li>\n<li>.&#x2F;src&#x2F;manifest.webmanifest</li>\n<li>.&#x2F;src&#x2F;index.html</li>\n<li>.&#x2F;assets&#x2F;icons&#x2F;..</li>\n</ul>\n<p>Con todo instalado y configurado, querrás probar que funciona. Pero, a primera vista no ocurre nada. <strong>Las características <em>PWA</em> están preparadas para funcionar en modo producción</strong>. Así que lo primero será ejecutar el comando <code>ng build --prod</code> y lanzar un servidor sobre la carpeta de distribución recién creada.</p>\n<p>De entre los nuevos ficheros que aparecen hay dos que debes conocer especialmente, <strong>el <em>manifest</em> y el <em>service worker</em></strong>.</p>\n<h2 id=\"1-1-El-manifest-webmanifest\"><a href=\"#1-1-El-manifest-webmanifest\" class=\"headerlink\" title=\"1.1 El manifest.webmanifest\"></a>1.1 El manifest.webmanifest</h2><p>Este sencillo documento acompaña al <code>index.html</code> y le da indicaciones al navegador para que trate esta aplicación de manera especial. El fichero en sí contiene una <em>metadata</em> con textos descriptivos, colores e iconos para ser usados por el navegador y el sistema operativo y <strong>ofrecerle al usuario que instale la <em>web</em> como una <em>app</em></strong>.</p>\n<p>Casi todo es cosmético, pero merece la pena prestar especial atención a los iconos. Por defecto el <em>CLI</em> instala distintas versiones del logo oficial de Angular. Una forma cómoda de sustituirlo por los tuyos es usar la herramienta <a href=\"https://www.npmjs.com/package/ngx-pwa-icons\"><em>ngx-pwa-icons</em></a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shop&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shop&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;theme_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#1976d2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;background_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#fafafa&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;display&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;standalone&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;icons&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;src&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;assets/icons/icon-72x72.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sizes&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;72x72&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">   <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Asegúrate de que en la <code>start_url</code> apunte a la página de inicio correcta y despliega en modo producción en un servidor seguro con <em>https</em>. Pruébalo varias veces en distintos navegadores y verás las distintas experiencias de instalación que ofrecen.</p>\n</blockquote>\n<h2 id=\"1-2-El-ngsw-worker-js\"><a href=\"#1-2-El-ngsw-worker-js\" class=\"headerlink\" title=\"1.2 El ngsw-worker.js\"></a>1.2 El ngsw-worker.js</h2><p>El otro gran fichero, y más importante para los desarrolladores, es <strong>el configurador del <em>Service Worker</em></strong>. Cuando un navegador ejecuta un <em>script</em> lo hace en <em>thread</em> dedicado a la interacción con el usuario y la manipulación del <em>DOM</em>. Normalmente ese hilo está muy ocupado, cuando no está saturado. La solución para agilizar los procesos está en usar más <em>threads</em>. Presentamos el <em>worker thread</em>.</p>\n<p>Se le llama así a los hilos creados a partir del principal y que le ayudan en tareas en segundo plano. Esos hilos tienen <strong>prohibido el acceso al DOM, ni lo escuchan ni lo manipulan</strong>. Pero a cambio están muy liberados para realizar cálculos complejos o llamadas a servicios. Se comunican con el <em>thread</em> principal a través de un sencillo protocolo de eventos y subscripciones.</p>\n<p>Una de las tareas para las que más se les utiliza es para la gestión inteligente de las comunicaciones. Este fichero viene pre programado para realizar las siguientes <strong>funciones PWA de Angular</strong>:</p>\n<ul>\n<li>Caché de contenido estático para funcionamiento offline</li>\n<li>Caché de datos dinámicos para mayor velocidad</li>\n<li>Gestión de instalaciones y versiones</li>\n<li>Notificaciones de datos push</li>\n</ul>\n<p>Todo lo que hay que hacer es configurar estas funciones en un fichero, el <code>ngsw-config.json</code>, ya generado con valores por defecto. El <em>CLI</em>, durante el proceso de construcción en modo producción, copiará y manipulará los scripts y sus configuraciones. En ejecución, el <code>AppModule</code> registrará el script en el navegador, se subscribirá a sus eventos y ejecutará lo configurado por el programador en el <em>json</em>.</p>\n<h1 id=\"2-Comunicaciones-y-cache\"><a href=\"#2-Comunicaciones-y-cache\" class=\"headerlink\" title=\"2 Comunicaciones y caché\"></a>2 Comunicaciones y caché</h1><p><strong>El service worker de Angular</strong> está especialmente diseñado para hacerse cargo de las comunicaciones con el servidor. Digamos que se convierte en un <strong>interceptor transparente de todas las peticiones http</strong>. Tanto de los ficheros propios de la aplicación como de las comunicaciones de datos.</p>\n<h2 id=\"2-1-Descarga-y-actualizacion-de-la-aplicacion\"><a href=\"#2-1-Descarga-y-actualizacion-de-la-aplicacion\" class=\"headerlink\" title=\"2.1 Descarga y actualización de la aplicación\"></a>2.1 Descarga y actualización de la aplicación</h2><p>Una vez descargado el <em>index.html</em> con el contenido mínimo de Angular, diríamos que la aplicación se ha instalado y está lista para ejecutarse. A partir de ese momento el <em>ngsw</em> toma el control y puede pre descargar ficheros en segundo plano; de forma que <strong>cuando sean reclamados ya estén disponibles</strong> y mejoren la experiencia del usuario.</p>\n<p>Rutinariamente el servicio se ocupará de consultar novedades en el servidor para mantener los ficheros locales actualizados. Todo ello se configura en la sección <code>assetGroups</code> del  <code>ngsw-config.json</code>.</p>\n<h3 id=\"Default-Full-App\"><a href=\"#Default-Full-App\" class=\"headerlink\" title=\"Default: Full App\"></a>Default: Full App</h3><p>Se descarga la aplicación completa. Tranquilidad, esto sucede en segundo plano y una vez arrancado angular y con el usuario contento viendo ya la página pedida. Al navegar por las páginas la respuesta es instantánea porque los módulos con el código ya están ahí.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;assetGroups&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;app&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prefetch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/favicon.ico&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;/index.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/manifest.webmanifest&quot;</span><span class=\"punctuation\">,</span>  <span class=\"string\">&quot;/*.css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;/*.js&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;assets&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lazy&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;updateMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prefetch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/assets/**&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/*.(eot|svg|cur|jpg|png|webp|gif|otf|ttf|woff|woff2|ani)&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>Eso sí, la descarga consume línea. En cierto casos, con usuarios móviles y grandes aplicaciones quizás no sea adecuado. Si prefieres que los módulos Lazy no se descarguen hasta que nose visiten, te propongo esta otra configuración.</p>\n<h3 id=\"Proposed-Lazy-App\"><a href=\"#Proposed-Lazy-App\" class=\"headerlink\" title=\"Proposed: Lazy App\"></a>Proposed: Lazy App</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;assetGroups&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;coreapp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prefetch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/favicon.ico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/index.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/manifest.webmanifest&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/*.css&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/common*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/main*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/ngsw*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/*woker*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/*polyfills*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/runtime*.js&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lazyapp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lazy&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;updateMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prefetch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;/*.js&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span>...</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-2-Cache-inteligente-de-datos\"><a href=\"#2-2-Cache-inteligente-de-datos\" class=\"headerlink\" title=\"2.2 Caché inteligente de datos\"></a>2.2 Caché inteligente de datos</h2><p>El control de la <strong>recepción de datos dinámicos</strong> es la otra gran tarea del <em>service worker</em>. En este caso para tener una caché que acelere la presentación de datos o que incluso permita un funcionamiento <em>offline</em>.</p>\n<p>Mediante <strong>dos estrategias complementarias que tratan de mantener los datos actualizados y disponibles</strong> en todo momento. En este caso configurándolo en los <code>dataGroups</code>.</p>\n<blockquote>\n<p>La idea del <em>cache-first</em> es tener el dato ya listo para ser usado cuanto antes. Mientras que con <em>api-first</em> se pretende tener la versión más actual posible, y usar la última descargada en caso de problemas o desconexión total.</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">&quot;dataGroups&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cache-first-greeting&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;urls&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;http://localhost:3333/api&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;cacheConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;strategy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;performance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;maxAge&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;maxSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;api-first-rates&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;urls&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;https://api.exchangeratesapi.io/latest?symbols=GBP&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;https://api.exchangeratesapi.io/latest&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;cacheConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;strategy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;freshness&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;5s&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;maxAge&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1h&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;maxSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Servicios\"><a href=\"#3-Servicios\" class=\"headerlink\" title=\"3 Servicios\"></a>3 Servicios</h1><p>La librería <code>@angular/pwa</code> publica el módulo <code>ServiceWorkerModule</code> que contiene la lógica de registro del <em>service worker</em> y dos servicios programables con los que interactuar desde el código de tu aplicación Angular.</p>\n<h2 id=\"3-1-Actualizacion-con-el-SwUpdate\"><a href=\"#3-1-Actualizacion-con-el-SwUpdate\" class=\"headerlink\" title=\"3.1 Actualización con el SwUpdate\"></a>3.1 Actualización con el SwUpdate</h2><p>Cuando despliegas una nueva versión seguro que estás deseando que los usuarios disfruten cuanto antes de las mejoras o correcciones. Pero en las aplicaciones SPA resulta que <strong>la actualización no es tan inmediata</strong> como pudiera parecer. Al no forzar la recarga del documento en las navegaciones internas, el <code>index.html</code> puede residir sin cambios más de lo debido. Confiar en que lo hagan el navegador o el usuario puede no ser una opción.</p>\n<p>La solución PWA es usar el <code>ServiceWorker</code> para detectar nuevas versiones en el servidor. Para ello utiliza un sistema propio de <em>hashes</em> que le permite comparar la versión descargada y la disponible en el servidor.** Cuando detecta un cambio emite un evento al que te puedes subscribir** usando el servicio <code>SwUpdate</code>. En ese momento puedes consultar al usuario, o forzar a lo bestia la recarga ;-).</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> swUpdate: SwUpdate</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">swUpdate</span>.<span class=\"property\">isEnabled</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">swUpdate</span>.<span class=\"property\">available</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">event: UpdateAvailableEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">confirm</span>(<span class=\"string\">`Do you want to update?`</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"title function_\">reload</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Notificaciones-con-el-SwPush\"><a href=\"#3-2-Notificaciones-con-el-SwPush\" class=\"headerlink\" title=\"3.2 Notificaciones con el SwPush\"></a>3.2 Notificaciones con el SwPush</h2><p>Una característica de las <em>apps</em> nativas muy aprecia por los usuarios es la capacidad de mostrar <strong>mensajes recibidos vía <em>push</em> por parte del servidor</strong>. Pueden ser avisos, novedades o simple marketing. Pero lo importante es que lo recibe el sistema operativo, la aplicación no necesita estar en marcha y el mensaje se muestra de forma nativa.</p>\n<blockquote>\n<p>Obviamente para ello hay que involucrar código de servidor y un servicio de mensajería de terceros. Pero la parte Angular del desarrollo es muy sencilla. Consiste en registrar al usuario, que voluntariamente decide ser notificado, y luego escuchar los mensajes provenientes en forma de eventos. Todo ello reclamando una dependencia al servicio de notificaciones <code>constructor(private swPush: SwPush)</code>.</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> swUpdate: SwUpdate</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">swPush</span>.<span class=\"property\">isEnabled</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">swPush</span></span><br><span class=\"line\">        .<span class=\"title function_\">requestSubscription</span>(&#123; <span class=\"attr\">serverPublicKey</span>: <span class=\"string\">&#x27;VAPID_PUBLIC_KEY&#x27;</span> &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send subscription to your server and wait form messages&#x27;</span>, sub.<span class=\"title function_\">toJSON</span>());</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">swPush</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Received: &#x27;</span>, msg));</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ya tienes una web que se comporta progresivamente como una App nativa, una <em>Progressive Web Application</em>. Las mejoras en rendimiento y experiencia de usuario son recompensa más que suficiente para que le des una oportunidad a las <strong>Angular PWA</strong>.</p>\n<p>Continúa tu formación avanzada para crear aplicaciones con mayor <a href=\"../velocidad-y-seo-con-el-ssr-de-angular-universal\">Velocidad y SEO con el SSR de Angular Universal</a> y verás como aprendes a programar con Angular 8.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-16_pwa.png\" alt=\"pwa-entre-la-web-y-las-apps-con-angular\"></p>\n<p>Las aplicaciones web han evolucionado desde el contenido estático al dinámico, luego al adaptable y ahora se acercan <strong>progresivamente a la experiencia y rendimiento de aplicaciones nativas</strong>. En Angular se incorporan esas capacidades desde el propio <em>framework</em>.</p>\n<p>Mediante la librería <code>@ngular/pwa</code> dispondremos de todo lo necesario para ofrecer instalación en escritorio, actualizar la aplicación controladamente, recibir notificaciones del servidor e incluso mejoras en la caché de comunicaciones que pudieran permitir un funcionamiento <em>offline</em>.</p>","more":"<p>Partiendo del código tal como quedó en <a href=\"../el-patron-redux-con-ngrx-en-angular/\">El patrón Redux con NgRx en Angular</a>. Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Las-herramientas-de-la-libreria-PWA\"><a href=\"#1-Las-herramientas-de-la-libreria-PWA\" class=\"headerlink\" title=\"1 Las herramientas de la librería PWA\"></a>1 Las herramientas de la librería PWA</h1><p>Aprovechando las nuevas características del <em>Angular CLI</em> tenemos el comando <code>ng add @angular/pwa</code> que instala los paquetes y configura cualquier aplicación Angular convirtiéndola en una <em>PWA</em> básica.</p>\n<p>Estos son los actores y ficheros involucrados en este proceso tras la agregación del paquete <code>pwa</code>.</p>\n<ul>\n<li>ServiceWorkerModule</li>\n<li>.&#x2F;angular.json { “serviceWorker”: true }</li>\n<li>.&#x2F;ngsw-config.json</li>\n<li>.&#x2F;src&#x2F;manifest.webmanifest</li>\n<li>.&#x2F;src&#x2F;index.html</li>\n<li>.&#x2F;assets&#x2F;icons&#x2F;..</li>\n</ul>\n<p>Con todo instalado y configurado, querrás probar que funciona. Pero, a primera vista no ocurre nada. <strong>Las características <em>PWA</em> están preparadas para funcionar en modo producción</strong>. Así que lo primero será ejecutar el comando <code>ng build --prod</code> y lanzar un servidor sobre la carpeta de distribución recién creada.</p>\n<p>De entre los nuevos ficheros que aparecen hay dos que debes conocer especialmente, <strong>el <em>manifest</em> y el <em>service worker</em></strong>.</p>\n<h2 id=\"1-1-El-manifest-webmanifest\"><a href=\"#1-1-El-manifest-webmanifest\" class=\"headerlink\" title=\"1.1 El manifest.webmanifest\"></a>1.1 El manifest.webmanifest</h2><p>Este sencillo documento acompaña al <code>index.html</code> y le da indicaciones al navegador para que trate esta aplicación de manera especial. El fichero en sí contiene una <em>metadata</em> con textos descriptivos, colores e iconos para ser usados por el navegador y el sistema operativo y <strong>ofrecerle al usuario que instale la <em>web</em> como una <em>app</em></strong>.</p>\n<p>Casi todo es cosmético, pero merece la pena prestar especial atención a los iconos. Por defecto el <em>CLI</em> instala distintas versiones del logo oficial de Angular. Una forma cómoda de sustituirlo por los tuyos es usar la herramienta <a href=\"https://www.npmjs.com/package/ngx-pwa-icons\"><em>ngx-pwa-icons</em></a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shop&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shop&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;theme_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#1976d2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;background_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#fafafa&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;display&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;standalone&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;icons&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;src&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;assets/icons/icon-72x72.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sizes&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;72x72&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">   <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Asegúrate de que en la <code>start_url</code> apunte a la página de inicio correcta y despliega en modo producción en un servidor seguro con <em>https</em>. Pruébalo varias veces en distintos navegadores y verás las distintas experiencias de instalación que ofrecen.</p>\n</blockquote>\n<h2 id=\"1-2-El-ngsw-worker-js\"><a href=\"#1-2-El-ngsw-worker-js\" class=\"headerlink\" title=\"1.2 El ngsw-worker.js\"></a>1.2 El ngsw-worker.js</h2><p>El otro gran fichero, y más importante para los desarrolladores, es <strong>el configurador del <em>Service Worker</em></strong>. Cuando un navegador ejecuta un <em>script</em> lo hace en <em>thread</em> dedicado a la interacción con el usuario y la manipulación del <em>DOM</em>. Normalmente ese hilo está muy ocupado, cuando no está saturado. La solución para agilizar los procesos está en usar más <em>threads</em>. Presentamos el <em>worker thread</em>.</p>\n<p>Se le llama así a los hilos creados a partir del principal y que le ayudan en tareas en segundo plano. Esos hilos tienen <strong>prohibido el acceso al DOM, ni lo escuchan ni lo manipulan</strong>. Pero a cambio están muy liberados para realizar cálculos complejos o llamadas a servicios. Se comunican con el <em>thread</em> principal a través de un sencillo protocolo de eventos y subscripciones.</p>\n<p>Una de las tareas para las que más se les utiliza es para la gestión inteligente de las comunicaciones. Este fichero viene pre programado para realizar las siguientes <strong>funciones PWA de Angular</strong>:</p>\n<ul>\n<li>Caché de contenido estático para funcionamiento offline</li>\n<li>Caché de datos dinámicos para mayor velocidad</li>\n<li>Gestión de instalaciones y versiones</li>\n<li>Notificaciones de datos push</li>\n</ul>\n<p>Todo lo que hay que hacer es configurar estas funciones en un fichero, el <code>ngsw-config.json</code>, ya generado con valores por defecto. El <em>CLI</em>, durante el proceso de construcción en modo producción, copiará y manipulará los scripts y sus configuraciones. En ejecución, el <code>AppModule</code> registrará el script en el navegador, se subscribirá a sus eventos y ejecutará lo configurado por el programador en el <em>json</em>.</p>\n<h1 id=\"2-Comunicaciones-y-cache\"><a href=\"#2-Comunicaciones-y-cache\" class=\"headerlink\" title=\"2 Comunicaciones y caché\"></a>2 Comunicaciones y caché</h1><p><strong>El service worker de Angular</strong> está especialmente diseñado para hacerse cargo de las comunicaciones con el servidor. Digamos que se convierte en un <strong>interceptor transparente de todas las peticiones http</strong>. Tanto de los ficheros propios de la aplicación como de las comunicaciones de datos.</p>\n<h2 id=\"2-1-Descarga-y-actualizacion-de-la-aplicacion\"><a href=\"#2-1-Descarga-y-actualizacion-de-la-aplicacion\" class=\"headerlink\" title=\"2.1 Descarga y actualización de la aplicación\"></a>2.1 Descarga y actualización de la aplicación</h2><p>Una vez descargado el <em>index.html</em> con el contenido mínimo de Angular, diríamos que la aplicación se ha instalado y está lista para ejecutarse. A partir de ese momento el <em>ngsw</em> toma el control y puede pre descargar ficheros en segundo plano; de forma que <strong>cuando sean reclamados ya estén disponibles</strong> y mejoren la experiencia del usuario.</p>\n<p>Rutinariamente el servicio se ocupará de consultar novedades en el servidor para mantener los ficheros locales actualizados. Todo ello se configura en la sección <code>assetGroups</code> del  <code>ngsw-config.json</code>.</p>\n<h3 id=\"Default-Full-App\"><a href=\"#Default-Full-App\" class=\"headerlink\" title=\"Default: Full App\"></a>Default: Full App</h3><p>Se descarga la aplicación completa. Tranquilidad, esto sucede en segundo plano y una vez arrancado angular y con el usuario contento viendo ya la página pedida. Al navegar por las páginas la respuesta es instantánea porque los módulos con el código ya están ahí.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;assetGroups&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;app&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prefetch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/favicon.ico&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;/index.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/manifest.webmanifest&quot;</span><span class=\"punctuation\">,</span>  <span class=\"string\">&quot;/*.css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;/*.js&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;assets&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lazy&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;updateMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prefetch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/assets/**&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/*.(eot|svg|cur|jpg|png|webp|gif|otf|ttf|woff|woff2|ani)&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>Eso sí, la descarga consume línea. En cierto casos, con usuarios móviles y grandes aplicaciones quizás no sea adecuado. Si prefieres que los módulos Lazy no se descarguen hasta que nose visiten, te propongo esta otra configuración.</p>\n<h3 id=\"Proposed-Lazy-App\"><a href=\"#Proposed-Lazy-App\" class=\"headerlink\" title=\"Proposed: Lazy App\"></a>Proposed: Lazy App</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;assetGroups&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;coreapp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prefetch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/favicon.ico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/index.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/manifest.webmanifest&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/*.css&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/common*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/main*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/ngsw*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/*woker*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/*polyfills*.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/runtime*.js&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lazyapp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;installMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;lazy&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;updateMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prefetch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;files&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;/*.js&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span>...</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-2-Cache-inteligente-de-datos\"><a href=\"#2-2-Cache-inteligente-de-datos\" class=\"headerlink\" title=\"2.2 Caché inteligente de datos\"></a>2.2 Caché inteligente de datos</h2><p>El control de la <strong>recepción de datos dinámicos</strong> es la otra gran tarea del <em>service worker</em>. En este caso para tener una caché que acelere la presentación de datos o que incluso permita un funcionamiento <em>offline</em>.</p>\n<p>Mediante <strong>dos estrategias complementarias que tratan de mantener los datos actualizados y disponibles</strong> en todo momento. En este caso configurándolo en los <code>dataGroups</code>.</p>\n<blockquote>\n<p>La idea del <em>cache-first</em> es tener el dato ya listo para ser usado cuanto antes. Mientras que con <em>api-first</em> se pretende tener la versión más actual posible, y usar la última descargada en caso de problemas o desconexión total.</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">&quot;dataGroups&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cache-first-greeting&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;urls&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;http://localhost:3333/api&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;cacheConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;strategy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;performance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;maxAge&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;maxSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;api-first-rates&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;urls&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;https://api.exchangeratesapi.io/latest?symbols=GBP&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;https://api.exchangeratesapi.io/latest&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;cacheConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;strategy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;freshness&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;5s&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;maxAge&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1h&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;maxSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Servicios\"><a href=\"#3-Servicios\" class=\"headerlink\" title=\"3 Servicios\"></a>3 Servicios</h1><p>La librería <code>@angular/pwa</code> publica el módulo <code>ServiceWorkerModule</code> que contiene la lógica de registro del <em>service worker</em> y dos servicios programables con los que interactuar desde el código de tu aplicación Angular.</p>\n<h2 id=\"3-1-Actualizacion-con-el-SwUpdate\"><a href=\"#3-1-Actualizacion-con-el-SwUpdate\" class=\"headerlink\" title=\"3.1 Actualización con el SwUpdate\"></a>3.1 Actualización con el SwUpdate</h2><p>Cuando despliegas una nueva versión seguro que estás deseando que los usuarios disfruten cuanto antes de las mejoras o correcciones. Pero en las aplicaciones SPA resulta que <strong>la actualización no es tan inmediata</strong> como pudiera parecer. Al no forzar la recarga del documento en las navegaciones internas, el <code>index.html</code> puede residir sin cambios más de lo debido. Confiar en que lo hagan el navegador o el usuario puede no ser una opción.</p>\n<p>La solución PWA es usar el <code>ServiceWorker</code> para detectar nuevas versiones en el servidor. Para ello utiliza un sistema propio de <em>hashes</em> que le permite comparar la versión descargada y la disponible en el servidor.** Cuando detecta un cambio emite un evento al que te puedes subscribir** usando el servicio <code>SwUpdate</code>. En ese momento puedes consultar al usuario, o forzar a lo bestia la recarga ;-).</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> swUpdate: SwUpdate</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">swUpdate</span>.<span class=\"property\">isEnabled</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">swUpdate</span>.<span class=\"property\">available</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\">(<span class=\"params\">event: UpdateAvailableEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">confirm</span>(<span class=\"string\">`Do you want to update?`</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"title function_\">reload</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Notificaciones-con-el-SwPush\"><a href=\"#3-2-Notificaciones-con-el-SwPush\" class=\"headerlink\" title=\"3.2 Notificaciones con el SwPush\"></a>3.2 Notificaciones con el SwPush</h2><p>Una característica de las <em>apps</em> nativas muy aprecia por los usuarios es la capacidad de mostrar <strong>mensajes recibidos vía <em>push</em> por parte del servidor</strong>. Pueden ser avisos, novedades o simple marketing. Pero lo importante es que lo recibe el sistema operativo, la aplicación no necesita estar en marcha y el mensaje se muestra de forma nativa.</p>\n<blockquote>\n<p>Obviamente para ello hay que involucrar código de servidor y un servicio de mensajería de terceros. Pero la parte Angular del desarrollo es muy sencilla. Consiste en registrar al usuario, que voluntariamente decide ser notificado, y luego escuchar los mensajes provenientes en forma de eventos. Todo ello reclamando una dependencia al servicio de notificaciones <code>constructor(private swPush: SwPush)</code>.</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> swUpdate: SwUpdate</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">swPush</span>.<span class=\"property\">isEnabled</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">swPush</span></span><br><span class=\"line\">        .<span class=\"title function_\">requestSubscription</span>(&#123; <span class=\"attr\">serverPublicKey</span>: <span class=\"string\">&#x27;VAPID_PUBLIC_KEY&#x27;</span> &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send subscription to your server and wait form messages&#x27;</span>, sub.<span class=\"title function_\">toJSON</span>());</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">swPush</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Received: &#x27;</span>, msg));</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ya tienes una web que se comporta progresivamente como una App nativa, una <em>Progressive Web Application</em>. Las mejoras en rendimiento y experiencia de usuario son recompensa más que suficiente para que le des una oportunidad a las <strong>Angular PWA</strong>.</p>\n<p>Continúa tu formación avanzada para crear aplicaciones con mayor <a href=\"../velocidad-y-seo-con-el-ssr-de-angular-universal\">Velocidad y SEO con el SSR de Angular Universal</a> y verás como aprendes a programar con Angular 8.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Velocidad y SEO con el SSR de Angular Universal","date":"2019-10-09T11:50:27.000Z","thumbnail":"/css/images/angular-17_ssr.png","_content":"\n![velocidad-y-seo-con-el-ssr-de-angular-universal](/images/tutorial-angular-17_ssr.png)\n\nLas *SPA JavaScript*, muy balanceadas hacia el navegador, nacieron para **crear con tecnología web aplicaciones de negocio**. Normalmente se desplegaban en *intranets*, o en internet para usuarios autorizados. Eran aplicaciones de uso intensivo, visita recurrente y alto rendimiento diario. El éxito tecnológico de *frameworks* como Angular las llevó a ser usadas para desarrollar webs clásicas de internet y ser utilizadas por visitantes ocasionales.\n\nPero en esta situación presentaron dos problemas para los que inicialmente no estaban preparadas. Por un lado la primera visita de un humano obligaba a la descarga completa de la aplicación antes de poder ver nada. Y nada era lo que veían los visitantes robóticos que pretendían indexar un sitio. Las soluciones a estos problemas incluyen, entre otras medidas, **una vuelta al servidor**. Lo que en Angular se conoce como **aplicación universal**.\n\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [PWA, Entre la web y las apps con Angular](../pwa-entre-la-web-y-las-apps-con-angular/). Al finalizar tendrás una aplicación que  ofrece lo que buscan tanto a personas como a robots.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n# 1 Angular Universal\n\n## 1.1 Vuelta al servidor\n\n> Tenemos: Angular nació para vivir en el navegador.\n\n- Para **quitarle carga al servidor** generando el contenido dinámico en el navegador en base a plantillas.\n\n- Para enviar por la red primero la aplicación y después los datos, **ahorrando transferencia** durante un uso continuado.\n\n- Para mejorar la **experiencia del usuario** al no percibir recarga de página durante la navegación dentro de la aplicación.\n\n**Ideal en entornos de intranet o aplicaciones de gestión de uso intensivo.**\n\n**Problemático para uso esporádico o indexable públicamente.**\n\n> Queremos: Indexado SEO y velocidad en la primera visita y también en las sucesivas.\n\n## 1.2 Para mejorar el SEO\n\n> El contenido se genera durante la ejecución del JavaScript en el navegador.\n\n- Los **robots** no tienen nada significativo que indexar.\n\n- Las **redes sociales** no encuentran cabeceras para mejorar la presentación de enlaces.\n\n**Hay que enviar el contenido ya generado.**\n\n**Pero sin perder la experiencia de usuario durante la ejecución.**\n\n## 1.3 Para mejorar la experiencia en la primera visita\n\n> Para mostrar contenido antes hay que descargar y ejecutar la aplicación.\n\n- Los **usuarios** ven una página vacía demasiado tiempo.\n\n- El **peso de la descarga inicial** es desproporcionado a pesar de _lazy loading_.\n\n**Hay que enviar el contenido ya generado.**\n\n**Descargar la aplicación en segundo plano.**\n\n\n# 2 Despliegue con Node Express\n\nEl reto está en mantener lo bueno de las aplicaciones *JavaScript* como es la transición fluida entre páginas, la interactividad o la descarga de datos bajo demanda, pero combinado con una mejor primera experiencia. Para ello la descarga del `index.html` tiene que venir con un documento html ya preparado con algo para mostrar y tardar lo menos posible en permitir la interacción.\n\nEl **tiempo para el primer pintado** se ve penalizado por el tamaño del *bundle* principal de Angular, pues en él reside habitualmente el componente *app* que actúa de raíz. Por supuesto que utilizar la carga diferida de módulos es una manera obligada de reducir el peso del *main*. Todas las rutas, incluida la ruta base, deben ser *lazy* para retrasar la navegación y que la descarga se produzca más tarde. Sólo el componente raíz con la *shell* de navegación básica debería venir en el *bundle* principal.\n\nPero ni con eso es suficiente. El usuario no verá nada hasta que Angular se descargue, reclame el *bundle main*, lo procese y renderice ese *shell*. Hay usar alguna estrategia extra para reducir el tiempo de espera y entretener al usuario.\n\n\n## 2.1 Add Express Engine\n\nClaro que esto es sólo un truco para que ese primer momento de espera se reduzca y no perdamos potenciales visitantes. Si queremos algo más, como por ejemplo que el contenido a descargar sea más fresco, entonces necesitaremos **renderizar en el servidor**. Y para ello necesitaremos un servidor de verdad. El propuesto y mejor documentado es *Express de NodeJS*.\n\nPara empezar tendrás que instalar y registrar las librarías necesarias. Además habrá que crear el pequeño servidor *Express*, y configurar al CLI para que haga el despliegue de ambos: cliente y servidor. Este laborioso trabajo se ha automatizado y ahora mismo se resuelve casi todo con una instrucción.\n\n```bash\nng add @nguniversal/express-engine --clientProject shop\n```\n\n## 2.2 Scripts de compilado y despliegue\n\nCuando termina la generación e instalación, comienza el compilado. En este caso es doble, porque además de la compilación habitual que llamaremos _client-bundle_, habrá que compilar el servidor con su propia versión de la aplicación cliente. Será el _server-bundle_.\n\nAdemás necesitamos una tercera compilación (aunque no es propiamente de Angular) para el servidor _node/express_ que ejecutará el _server-bundle_. Y por último ya sólo nos queda poner en marcha dicho servidor que se quedará a la espera de peticiones de páginas.\n\nTodo esto se resume en los siguientes scripts, casi todos auto generados por el CLI.\n\n```json\n{\n  \"start:ssr\": \"npm run build:ssr && npm run serve:ssr\",\n  \"build:ssr\": \"npm run build:client-and-server-bundles && npm run compile:server\",\n  \"build:client-and-server-bundles\": \"ng build --prod && ng run shop:server:production --bundleDependencies all\",\n  \"compile:server\": \"webpack --config webpack.server.config.js --progress --colors\",\n  \"serve:ssr\": \"node dist/server\"\n}\n```\n## 2.3 Control de rutas\n\nEl resultado es un servidor *Node* que a cada petición web responde enviando el `index.html`. Pero, y esta es la clave, resolverá la ruta ejecutando la aplicación Angular antes de responder al navegador. De esa forma el `index.html` irá recién generado con el contenido tal cual lo vería el usuario tras la ejecución de Angular en local. Así que **la espera al primer pintado significativo se reduce** y eso es bueno.\n\nPor si fuera poco, la principal ventaja al usar este método es que al traer información dinámica puede usarse para indexar el contenido real del sitio. Esto es doblemente bueno, porque ahora todos **los robots indexadores podrán catalogar tu *site*** como si de una web clásica se tratase. Y los usuarios humanos podrán continuar la ejecución en local disfrutando de las ventajas de una SPA.\n\nEl trabajo del servidor a partir de ese momento será mayúsculo. Recibe la petición, invoca a su versión de nuestra aplicación Angular y la ejecuta en memoria. El resultado es un documento HTML que devolverá al usuario. Dará lo mismo que ruta se le pida y si se resuelve por lazy-loading. Va totalmente preparado y configurado para cargar el JavaScript oportuno y ejecutarlo como lo haría un navegador.\n\nCompruébalo solicitando diversas rutas e inspeccionando la respuesta del servidor.\n\n```json\nhttp://localhost:4000\nhttp://localhost:4000/rates\n```\n\nDe todas formas tengo que advertirte de que tomes todo esto con cautela por varios motivos:\n\n- Tecnología compleja estable pero con carencias\n- Herramientas de generación buenas pero incompletas\n- Transferencia de estado manual para evitar llamadas repetidas al API\n\nTampoco es sencilla la convivencia con librerías propias del *browser*, y menos si se trata de una PWA. Yo procuro usar un servicio que aisle al servidor de ciertas llamadas sólo disponibles en el navegador, como por ejemplo todo lo relativo al *localStorage*.\n\n```typescript\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UniversalService {\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n  public isBrowser() => isPlatformBrowser(this.platformId);\n  public isServer() => isPlatformServer(this.platformId);\n\n  public saveOnStorage(key, value) {\n    if (this.isBrowser()) {\n      sessionStorage.setItem(key, value);\n    } else {\n    }\n  }\n  public loadFromStorage(key) {\n    if (this.isBrowser()) {\n      sessionStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n}\n```\n\n# 3 Variantes: shell y pre-rendering\n\nLa técnica vista anteriormente resuelve los problemas de usuario y de robot SEO, pero a costa de cierta complejidad. Y, sobre todo, a costa de necesitar un servidor node en producción.\n\nEn algunas situaciones queremos desplegar la aplicación en un sencillo servidor de ficheros. A veces ni siquiera tenemos la necesidad del indexado completo.\n\nPara esos caso tenemos alternativas más sencillas.\n\n## 3.1 Shell para mejora de experiencia inicial\n\n- Muestra un contenido instantáneo mientras descarga la app.\n\n- Mejora la experiencia de usuario en la primera visita.\n\n- De cara al SEO, sólo indexa el contenido inicial.\n\n> Adecuado para aplicaciones de usuario registrado, pero con un portal de bienvenida indexable y rápido.\n\nLa más sencilla es hacer que el `index.html`, habitualmente vacío, se rellene con un **contenido visualizable mientras el proceso principal de Angular no arranca**. En ocasiones basta con poner a mano algún mensaje o animación que indique que estamos cargando. Pero cuanto más se parezca esa primera visión al resultado final mejor para el usuario. Así que lo propio sería que el `index.html` ya bajase con el *shell* real de la aplicación.\n\nMontar eso a mano no es la mejor opción. La solución parte de **renderizar el *html* durante el proceso de *deploy***. Se trata de configurar el CLI para que ejecute la aplicación en la máquina del desarrollador sobre una ruta predefinida; y que copie el resultado sobre el `index.html` que enviará a distribución.\n\nEste trabajo se ha automatizado y se resuelve con un par de comandos del Angular CLI.\n\n```bash\nng g app-shell --client-project shop --universal-project server-shop\n```\n\nEl efecto de este comando se materializa especialmente con la aparición de nuevos *targets para los builders* del CLI en el fichero `angular.json`.\n\nCon el comando `ng run shop:app-shell` podrás generar una versión especial de distribución en al que el `index.html` ya va prerenderizado con el contenido del componente asociado a la ruta *shell*. Realmente lo que hace es ejecutar tu aplicación sobre una ruta predefinida, tomar el *html* resultado e inyectarlo en el *body* del `index.html` que irá a distribución.\n\n> Por cierto, esta técnica no obliga a disponer de ningún servidor web especial. Sigue funcionando con un servidor estático de ficheros pues la prerenderización se produjo en la máquina del programador.\n\n## 3.2 Pre renderizado de toda la aplicación\n\n- Se trata de volver no sólo al servidor web, si no al servidor de ficheros.\n\n- La idea es invocar repetidamente al SSR y almacenar el HTML resultante en ficheros físicos.\n\n- En producción, los robots y los usuarios recibirán ya esas copias pre generadas.\n\n- Para mantener el sistema actualizado se necesita regenerar frecuentemente los ficheros\n\n> Adecuado para blogs y sitios que no puedan o no quieran tener un servidor web corriendo.\n\n\nA falta de una solución oficial, podemos seguir la pista a iniciativas tipo [Angular Prerender](https://github.com/chrisguttandin/angular-prerender)\n\n# 4 SEO en la página, en el navegador y en el servidor\n\nCon lo visto hasta ahora tu aplicación estará más que cubierta en cuanto a ofrecer la mejor experiencia para usuarios al tiempo que envía contenido indexable para robots... Pero falta algo.\n\nHabitualmente las aplicaciones Angular manejan el contenido visible de una página web; es decir, el *body*. Para **acceder y cambiar el contenido del *header***, tan utilizado por los robots de redes sociales, hay que usar algo más.\n\n## 4.1 Titulo y meta etiquetas de página\n\nComo parte del *framework* viene la librería *platform-browser* dónde tenemos un par de servicios para manipular el título y cualquier etiqueta de meta información de la página.\n\nPara ello suele usarse un código similar a este en el componente raíz de la aplicación. Es muy sencillo pero te dará una idea del potencial de estos servicios:\n\n```typescript\nimport { Meta, Title } from '@angular/platform-browser';\n@Component({\n  selector: 'app-root',\n  template: `<p>Aprende a usar el framework Angular</p>`,\n})\nexport class AppComponent implements OnInit {\n  constructor(private title: Title, private meta: Meta) {}\n  ngOnInit() {\n    this.title.setTitle('My title');\n    this.meta.addTag({ property: 'og:title', content: 'My title' }, true);\n  }\n}\n```\n\nAhora ya tienes una aplicación que satisface a usuarios y robots por igual. Continúa tu formación avanzada para crear aplicaciones Angular para el mundo globalizado con técnicas de [Internacionalización y puesta en producción](../internacionalizacion-y-puesta-en-produccion-con-Angular/) y verás como aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/ng-17-velocidad-y-seo-con-el-ssr-de-angular-universal.md","raw":"---\ntitle: Velocidad y SEO con el SSR de Angular Universal\npermalink: velocidad-y-seo-con-el-ssr-de-angular-universal\ndate: 2019-10-09 13:50:27\ntags:\n- Angular\n- Angular8\n- Angular2\n- Universal\n- SSR\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-17_ssr.png\n---\n\n![velocidad-y-seo-con-el-ssr-de-angular-universal](/images/tutorial-angular-17_ssr.png)\n\nLas *SPA JavaScript*, muy balanceadas hacia el navegador, nacieron para **crear con tecnología web aplicaciones de negocio**. Normalmente se desplegaban en *intranets*, o en internet para usuarios autorizados. Eran aplicaciones de uso intensivo, visita recurrente y alto rendimiento diario. El éxito tecnológico de *frameworks* como Angular las llevó a ser usadas para desarrollar webs clásicas de internet y ser utilizadas por visitantes ocasionales.\n\nPero en esta situación presentaron dos problemas para los que inicialmente no estaban preparadas. Por un lado la primera visita de un humano obligaba a la descarga completa de la aplicación antes de poder ver nada. Y nada era lo que veían los visitantes robóticos que pretendían indexar un sitio. Las soluciones a estos problemas incluyen, entre otras medidas, **una vuelta al servidor**. Lo que en Angular se conoce como **aplicación universal**.\n\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [PWA, Entre la web y las apps con Angular](../pwa-entre-la-web-y-las-apps-con-angular/). Al finalizar tendrás una aplicación que  ofrece lo que buscan tanto a personas como a robots.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n# 1 Angular Universal\n\n## 1.1 Vuelta al servidor\n\n> Tenemos: Angular nació para vivir en el navegador.\n\n- Para **quitarle carga al servidor** generando el contenido dinámico en el navegador en base a plantillas.\n\n- Para enviar por la red primero la aplicación y después los datos, **ahorrando transferencia** durante un uso continuado.\n\n- Para mejorar la **experiencia del usuario** al no percibir recarga de página durante la navegación dentro de la aplicación.\n\n**Ideal en entornos de intranet o aplicaciones de gestión de uso intensivo.**\n\n**Problemático para uso esporádico o indexable públicamente.**\n\n> Queremos: Indexado SEO y velocidad en la primera visita y también en las sucesivas.\n\n## 1.2 Para mejorar el SEO\n\n> El contenido se genera durante la ejecución del JavaScript en el navegador.\n\n- Los **robots** no tienen nada significativo que indexar.\n\n- Las **redes sociales** no encuentran cabeceras para mejorar la presentación de enlaces.\n\n**Hay que enviar el contenido ya generado.**\n\n**Pero sin perder la experiencia de usuario durante la ejecución.**\n\n## 1.3 Para mejorar la experiencia en la primera visita\n\n> Para mostrar contenido antes hay que descargar y ejecutar la aplicación.\n\n- Los **usuarios** ven una página vacía demasiado tiempo.\n\n- El **peso de la descarga inicial** es desproporcionado a pesar de _lazy loading_.\n\n**Hay que enviar el contenido ya generado.**\n\n**Descargar la aplicación en segundo plano.**\n\n\n# 2 Despliegue con Node Express\n\nEl reto está en mantener lo bueno de las aplicaciones *JavaScript* como es la transición fluida entre páginas, la interactividad o la descarga de datos bajo demanda, pero combinado con una mejor primera experiencia. Para ello la descarga del `index.html` tiene que venir con un documento html ya preparado con algo para mostrar y tardar lo menos posible en permitir la interacción.\n\nEl **tiempo para el primer pintado** se ve penalizado por el tamaño del *bundle* principal de Angular, pues en él reside habitualmente el componente *app* que actúa de raíz. Por supuesto que utilizar la carga diferida de módulos es una manera obligada de reducir el peso del *main*. Todas las rutas, incluida la ruta base, deben ser *lazy* para retrasar la navegación y que la descarga se produzca más tarde. Sólo el componente raíz con la *shell* de navegación básica debería venir en el *bundle* principal.\n\nPero ni con eso es suficiente. El usuario no verá nada hasta que Angular se descargue, reclame el *bundle main*, lo procese y renderice ese *shell*. Hay usar alguna estrategia extra para reducir el tiempo de espera y entretener al usuario.\n\n\n## 2.1 Add Express Engine\n\nClaro que esto es sólo un truco para que ese primer momento de espera se reduzca y no perdamos potenciales visitantes. Si queremos algo más, como por ejemplo que el contenido a descargar sea más fresco, entonces necesitaremos **renderizar en el servidor**. Y para ello necesitaremos un servidor de verdad. El propuesto y mejor documentado es *Express de NodeJS*.\n\nPara empezar tendrás que instalar y registrar las librarías necesarias. Además habrá que crear el pequeño servidor *Express*, y configurar al CLI para que haga el despliegue de ambos: cliente y servidor. Este laborioso trabajo se ha automatizado y ahora mismo se resuelve casi todo con una instrucción.\n\n```bash\nng add @nguniversal/express-engine --clientProject shop\n```\n\n## 2.2 Scripts de compilado y despliegue\n\nCuando termina la generación e instalación, comienza el compilado. En este caso es doble, porque además de la compilación habitual que llamaremos _client-bundle_, habrá que compilar el servidor con su propia versión de la aplicación cliente. Será el _server-bundle_.\n\nAdemás necesitamos una tercera compilación (aunque no es propiamente de Angular) para el servidor _node/express_ que ejecutará el _server-bundle_. Y por último ya sólo nos queda poner en marcha dicho servidor que se quedará a la espera de peticiones de páginas.\n\nTodo esto se resume en los siguientes scripts, casi todos auto generados por el CLI.\n\n```json\n{\n  \"start:ssr\": \"npm run build:ssr && npm run serve:ssr\",\n  \"build:ssr\": \"npm run build:client-and-server-bundles && npm run compile:server\",\n  \"build:client-and-server-bundles\": \"ng build --prod && ng run shop:server:production --bundleDependencies all\",\n  \"compile:server\": \"webpack --config webpack.server.config.js --progress --colors\",\n  \"serve:ssr\": \"node dist/server\"\n}\n```\n## 2.3 Control de rutas\n\nEl resultado es un servidor *Node* que a cada petición web responde enviando el `index.html`. Pero, y esta es la clave, resolverá la ruta ejecutando la aplicación Angular antes de responder al navegador. De esa forma el `index.html` irá recién generado con el contenido tal cual lo vería el usuario tras la ejecución de Angular en local. Así que **la espera al primer pintado significativo se reduce** y eso es bueno.\n\nPor si fuera poco, la principal ventaja al usar este método es que al traer información dinámica puede usarse para indexar el contenido real del sitio. Esto es doblemente bueno, porque ahora todos **los robots indexadores podrán catalogar tu *site*** como si de una web clásica se tratase. Y los usuarios humanos podrán continuar la ejecución en local disfrutando de las ventajas de una SPA.\n\nEl trabajo del servidor a partir de ese momento será mayúsculo. Recibe la petición, invoca a su versión de nuestra aplicación Angular y la ejecuta en memoria. El resultado es un documento HTML que devolverá al usuario. Dará lo mismo que ruta se le pida y si se resuelve por lazy-loading. Va totalmente preparado y configurado para cargar el JavaScript oportuno y ejecutarlo como lo haría un navegador.\n\nCompruébalo solicitando diversas rutas e inspeccionando la respuesta del servidor.\n\n```json\nhttp://localhost:4000\nhttp://localhost:4000/rates\n```\n\nDe todas formas tengo que advertirte de que tomes todo esto con cautela por varios motivos:\n\n- Tecnología compleja estable pero con carencias\n- Herramientas de generación buenas pero incompletas\n- Transferencia de estado manual para evitar llamadas repetidas al API\n\nTampoco es sencilla la convivencia con librerías propias del *browser*, y menos si se trata de una PWA. Yo procuro usar un servicio que aisle al servidor de ciertas llamadas sólo disponibles en el navegador, como por ejemplo todo lo relativo al *localStorage*.\n\n```typescript\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UniversalService {\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n  public isBrowser() => isPlatformBrowser(this.platformId);\n  public isServer() => isPlatformServer(this.platformId);\n\n  public saveOnStorage(key, value) {\n    if (this.isBrowser()) {\n      sessionStorage.setItem(key, value);\n    } else {\n    }\n  }\n  public loadFromStorage(key) {\n    if (this.isBrowser()) {\n      sessionStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n}\n```\n\n# 3 Variantes: shell y pre-rendering\n\nLa técnica vista anteriormente resuelve los problemas de usuario y de robot SEO, pero a costa de cierta complejidad. Y, sobre todo, a costa de necesitar un servidor node en producción.\n\nEn algunas situaciones queremos desplegar la aplicación en un sencillo servidor de ficheros. A veces ni siquiera tenemos la necesidad del indexado completo.\n\nPara esos caso tenemos alternativas más sencillas.\n\n## 3.1 Shell para mejora de experiencia inicial\n\n- Muestra un contenido instantáneo mientras descarga la app.\n\n- Mejora la experiencia de usuario en la primera visita.\n\n- De cara al SEO, sólo indexa el contenido inicial.\n\n> Adecuado para aplicaciones de usuario registrado, pero con un portal de bienvenida indexable y rápido.\n\nLa más sencilla es hacer que el `index.html`, habitualmente vacío, se rellene con un **contenido visualizable mientras el proceso principal de Angular no arranca**. En ocasiones basta con poner a mano algún mensaje o animación que indique que estamos cargando. Pero cuanto más se parezca esa primera visión al resultado final mejor para el usuario. Así que lo propio sería que el `index.html` ya bajase con el *shell* real de la aplicación.\n\nMontar eso a mano no es la mejor opción. La solución parte de **renderizar el *html* durante el proceso de *deploy***. Se trata de configurar el CLI para que ejecute la aplicación en la máquina del desarrollador sobre una ruta predefinida; y que copie el resultado sobre el `index.html` que enviará a distribución.\n\nEste trabajo se ha automatizado y se resuelve con un par de comandos del Angular CLI.\n\n```bash\nng g app-shell --client-project shop --universal-project server-shop\n```\n\nEl efecto de este comando se materializa especialmente con la aparición de nuevos *targets para los builders* del CLI en el fichero `angular.json`.\n\nCon el comando `ng run shop:app-shell` podrás generar una versión especial de distribución en al que el `index.html` ya va prerenderizado con el contenido del componente asociado a la ruta *shell*. Realmente lo que hace es ejecutar tu aplicación sobre una ruta predefinida, tomar el *html* resultado e inyectarlo en el *body* del `index.html` que irá a distribución.\n\n> Por cierto, esta técnica no obliga a disponer de ningún servidor web especial. Sigue funcionando con un servidor estático de ficheros pues la prerenderización se produjo en la máquina del programador.\n\n## 3.2 Pre renderizado de toda la aplicación\n\n- Se trata de volver no sólo al servidor web, si no al servidor de ficheros.\n\n- La idea es invocar repetidamente al SSR y almacenar el HTML resultante en ficheros físicos.\n\n- En producción, los robots y los usuarios recibirán ya esas copias pre generadas.\n\n- Para mantener el sistema actualizado se necesita regenerar frecuentemente los ficheros\n\n> Adecuado para blogs y sitios que no puedan o no quieran tener un servidor web corriendo.\n\n\nA falta de una solución oficial, podemos seguir la pista a iniciativas tipo [Angular Prerender](https://github.com/chrisguttandin/angular-prerender)\n\n# 4 SEO en la página, en el navegador y en el servidor\n\nCon lo visto hasta ahora tu aplicación estará más que cubierta en cuanto a ofrecer la mejor experiencia para usuarios al tiempo que envía contenido indexable para robots... Pero falta algo.\n\nHabitualmente las aplicaciones Angular manejan el contenido visible de una página web; es decir, el *body*. Para **acceder y cambiar el contenido del *header***, tan utilizado por los robots de redes sociales, hay que usar algo más.\n\n## 4.1 Titulo y meta etiquetas de página\n\nComo parte del *framework* viene la librería *platform-browser* dónde tenemos un par de servicios para manipular el título y cualquier etiqueta de meta información de la página.\n\nPara ello suele usarse un código similar a este en el componente raíz de la aplicación. Es muy sencillo pero te dará una idea del potencial de estos servicios:\n\n```typescript\nimport { Meta, Title } from '@angular/platform-browser';\n@Component({\n  selector: 'app-root',\n  template: `<p>Aprende a usar el framework Angular</p>`,\n})\nexport class AppComponent implements OnInit {\n  constructor(private title: Title, private meta: Meta) {}\n  ngOnInit() {\n    this.title.setTitle('My title');\n    this.meta.addTag({ property: 'og:title', content: 'My title' }, true);\n  }\n}\n```\n\nAhora ya tienes una aplicación que satisface a usuarios y robots por igual. Continúa tu formación avanzada para crear aplicaciones Angular para el mundo globalizado con técnicas de [Internacionalización y puesta en producción](../internacionalizacion-y-puesta-en-produccion-con-Angular/) y verás como aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"ng-17-velocidad-y-seo-con-el-ssr-de-angular-universal","published":1,"updated":"2023-07-02T10:25:58.476Z","__permalink":"velocidad-y-seo-con-el-ssr-de-angular-universal","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fe0013e0966lhk6ldf","content":"<p><img src=\"/images/tutorial-angular-17_ssr.png\" alt=\"velocidad-y-seo-con-el-ssr-de-angular-universal\"></p>\n<p>Las <em>SPA JavaScript</em>, muy balanceadas hacia el navegador, nacieron para <strong>crear con tecnología web aplicaciones de negocio</strong>. Normalmente se desplegaban en <em>intranets</em>, o en internet para usuarios autorizados. Eran aplicaciones de uso intensivo, visita recurrente y alto rendimiento diario. El éxito tecnológico de <em>frameworks</em> como Angular las llevó a ser usadas para desarrollar webs clásicas de internet y ser utilizadas por visitantes ocasionales.</p>\n<p>Pero en esta situación presentaron dos problemas para los que inicialmente no estaban preparadas. Por un lado la primera visita de un humano obligaba a la descarga completa de la aplicación antes de poder ver nada. Y nada era lo que veían los visitantes robóticos que pretendían indexar un sitio. Las soluciones a estos problemas incluyen, entre otras medidas, <strong>una vuelta al servidor</strong>. Lo que en Angular se conoce como <strong>aplicación universal</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo del código tal como quedó en <a href=\"../pwa-entre-la-web-y-las-apps-con-angular/\">PWA, Entre la web y las apps con Angular</a>. Al finalizar tendrás una aplicación que  ofrece lo que buscan tanto a personas como a robots.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Angular-Universal\"><a href=\"#1-Angular-Universal\" class=\"headerlink\" title=\"1 Angular Universal\"></a>1 Angular Universal</h1><h2 id=\"1-1-Vuelta-al-servidor\"><a href=\"#1-1-Vuelta-al-servidor\" class=\"headerlink\" title=\"1.1 Vuelta al servidor\"></a>1.1 Vuelta al servidor</h2><blockquote>\n<p>Tenemos: Angular nació para vivir en el navegador.</p>\n</blockquote>\n<ul>\n<li><p>Para <strong>quitarle carga al servidor</strong> generando el contenido dinámico en el navegador en base a plantillas.</p>\n</li>\n<li><p>Para enviar por la red primero la aplicación y después los datos, <strong>ahorrando transferencia</strong> durante un uso continuado.</p>\n</li>\n<li><p>Para mejorar la <strong>experiencia del usuario</strong> al no percibir recarga de página durante la navegación dentro de la aplicación.</p>\n</li>\n</ul>\n<p><strong>Ideal en entornos de intranet o aplicaciones de gestión de uso intensivo.</strong></p>\n<p><strong>Problemático para uso esporádico o indexable públicamente.</strong></p>\n<blockquote>\n<p>Queremos: Indexado SEO y velocidad en la primera visita y también en las sucesivas.</p>\n</blockquote>\n<h2 id=\"1-2-Para-mejorar-el-SEO\"><a href=\"#1-2-Para-mejorar-el-SEO\" class=\"headerlink\" title=\"1.2 Para mejorar el SEO\"></a>1.2 Para mejorar el SEO</h2><blockquote>\n<p>El contenido se genera durante la ejecución del JavaScript en el navegador.</p>\n</blockquote>\n<ul>\n<li><p>Los <strong>robots</strong> no tienen nada significativo que indexar.</p>\n</li>\n<li><p>Las <strong>redes sociales</strong> no encuentran cabeceras para mejorar la presentación de enlaces.</p>\n</li>\n</ul>\n<p><strong>Hay que enviar el contenido ya generado.</strong></p>\n<p><strong>Pero sin perder la experiencia de usuario durante la ejecución.</strong></p>\n<h2 id=\"1-3-Para-mejorar-la-experiencia-en-la-primera-visita\"><a href=\"#1-3-Para-mejorar-la-experiencia-en-la-primera-visita\" class=\"headerlink\" title=\"1.3 Para mejorar la experiencia en la primera visita\"></a>1.3 Para mejorar la experiencia en la primera visita</h2><blockquote>\n<p>Para mostrar contenido antes hay que descargar y ejecutar la aplicación.</p>\n</blockquote>\n<ul>\n<li><p>Los <strong>usuarios</strong> ven una página vacía demasiado tiempo.</p>\n</li>\n<li><p>El <strong>peso de la descarga inicial</strong> es desproporcionado a pesar de <em>lazy loading</em>.</p>\n</li>\n</ul>\n<p><strong>Hay que enviar el contenido ya generado.</strong></p>\n<p><strong>Descargar la aplicación en segundo plano.</strong></p>\n<h1 id=\"2-Despliegue-con-Node-Express\"><a href=\"#2-Despliegue-con-Node-Express\" class=\"headerlink\" title=\"2 Despliegue con Node Express\"></a>2 Despliegue con Node Express</h1><p>El reto está en mantener lo bueno de las aplicaciones <em>JavaScript</em> como es la transición fluida entre páginas, la interactividad o la descarga de datos bajo demanda, pero combinado con una mejor primera experiencia. Para ello la descarga del <code>index.html</code> tiene que venir con un documento html ya preparado con algo para mostrar y tardar lo menos posible en permitir la interacción.</p>\n<p>El <strong>tiempo para el primer pintado</strong> se ve penalizado por el tamaño del <em>bundle</em> principal de Angular, pues en él reside habitualmente el componente <em>app</em> que actúa de raíz. Por supuesto que utilizar la carga diferida de módulos es una manera obligada de reducir el peso del <em>main</em>. Todas las rutas, incluida la ruta base, deben ser <em>lazy</em> para retrasar la navegación y que la descarga se produzca más tarde. Sólo el componente raíz con la <em>shell</em> de navegación básica debería venir en el <em>bundle</em> principal.</p>\n<p>Pero ni con eso es suficiente. El usuario no verá nada hasta que Angular se descargue, reclame el <em>bundle main</em>, lo procese y renderice ese <em>shell</em>. Hay usar alguna estrategia extra para reducir el tiempo de espera y entretener al usuario.</p>\n<h2 id=\"2-1-Add-Express-Engine\"><a href=\"#2-1-Add-Express-Engine\" class=\"headerlink\" title=\"2.1 Add Express Engine\"></a>2.1 Add Express Engine</h2><p>Claro que esto es sólo un truco para que ese primer momento de espera se reduzca y no perdamos potenciales visitantes. Si queremos algo más, como por ejemplo que el contenido a descargar sea más fresco, entonces necesitaremos <strong>renderizar en el servidor</strong>. Y para ello necesitaremos un servidor de verdad. El propuesto y mejor documentado es <em>Express de NodeJS</em>.</p>\n<p>Para empezar tendrás que instalar y registrar las librarías necesarias. Además habrá que crear el pequeño servidor <em>Express</em>, y configurar al CLI para que haga el despliegue de ambos: cliente y servidor. Este laborioso trabajo se ha automatizado y ahora mismo se resuelve casi todo con una instrucción.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @nguniversal/express-engine --clientProject shop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Scripts-de-compilado-y-despliegue\"><a href=\"#2-2-Scripts-de-compilado-y-despliegue\" class=\"headerlink\" title=\"2.2 Scripts de compilado y despliegue\"></a>2.2 Scripts de compilado y despliegue</h2><p>Cuando termina la generación e instalación, comienza el compilado. En este caso es doble, porque además de la compilación habitual que llamaremos <em>client-bundle</em>, habrá que compilar el servidor con su propia versión de la aplicación cliente. Será el <em>server-bundle</em>.</p>\n<p>Además necesitamos una tercera compilación (aunque no es propiamente de Angular) para el servidor <em>node&#x2F;express</em> que ejecutará el <em>server-bundle</em>. Y por último ya sólo nos queda poner en marcha dicho servidor que se quedará a la espera de peticiones de páginas.</p>\n<p>Todo esto se resume en los siguientes scripts, casi todos auto generados por el CLI.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:ssr&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run build:ssr &amp;&amp; npm run serve:ssr&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:ssr&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run build:client-and-server-bundles &amp;&amp; npm run compile:server&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:client-and-server-bundles&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build --prod &amp;&amp; ng run shop:server:production --bundleDependencies all&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compile:server&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config webpack.server.config.js --progress --colors&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;serve:ssr&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node dist/server&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-Control-de-rutas\"><a href=\"#2-3-Control-de-rutas\" class=\"headerlink\" title=\"2.3 Control de rutas\"></a>2.3 Control de rutas</h2><p>El resultado es un servidor <em>Node</em> que a cada petición web responde enviando el <code>index.html</code>. Pero, y esta es la clave, resolverá la ruta ejecutando la aplicación Angular antes de responder al navegador. De esa forma el <code>index.html</code> irá recién generado con el contenido tal cual lo vería el usuario tras la ejecución de Angular en local. Así que <strong>la espera al primer pintado significativo se reduce</strong> y eso es bueno.</p>\n<p>Por si fuera poco, la principal ventaja al usar este método es que al traer información dinámica puede usarse para indexar el contenido real del sitio. Esto es doblemente bueno, porque ahora todos <strong>los robots indexadores podrán catalogar tu <em>site</em></strong> como si de una web clásica se tratase. Y los usuarios humanos podrán continuar la ejecución en local disfrutando de las ventajas de una SPA.</p>\n<p>El trabajo del servidor a partir de ese momento será mayúsculo. Recibe la petición, invoca a su versión de nuestra aplicación Angular y la ejecuta en memoria. El resultado es un documento HTML que devolverá al usuario. Dará lo mismo que ruta se le pida y si se resuelve por lazy-loading. Va totalmente preparado y configurado para cargar el JavaScript oportuno y ejecutarlo como lo haría un navegador.</p>\n<p>Compruébalo solicitando diversas rutas e inspeccionando la respuesta del servidor.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http<span class=\"punctuation\">:</span><span class=\"comment\">//localhost:4000</span></span><br><span class=\"line\">http<span class=\"punctuation\">:</span><span class=\"comment\">//localhost:4000/rates</span></span><br></pre></td></tr></table></figure>\n\n<p>De todas formas tengo que advertirte de que tomes todo esto con cautela por varios motivos:</p>\n<ul>\n<li>Tecnología compleja estable pero con carencias</li>\n<li>Herramientas de generación buenas pero incompletas</li>\n<li>Transferencia de estado manual para evitar llamadas repetidas al API</li>\n</ul>\n<p>Tampoco es sencilla la convivencia con librerías propias del <em>browser</em>, y menos si se trata de una PWA. Yo procuro usar un servicio que aisle al servidor de ciertas llamadas sólo disponibles en el navegador, como por ejemplo todo lo relativo al <em>localStorage</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isPlatformBrowser, isPlatformServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Inject</span>, <span class=\"title class_\">Injectable</span>, <span class=\"variable constant_\">PLATFORM_ID</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UniversalService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"meta\">@Inject</span>(PLATFORM_ID) <span class=\"keyword\">private</span> platformId: <span class=\"built_in\">string</span></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">isBrowser</span>() =&gt; <span class=\"title function_\">isPlatformBrowser</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">platformId</span>);</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">isServer</span>() =&gt; <span class=\"title function_\">isPlatformServer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">platformId</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">saveOnStorage</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isBrowser</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(key, value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">loadFromStorage</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isBrowser</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Variantes-shell-y-pre-rendering\"><a href=\"#3-Variantes-shell-y-pre-rendering\" class=\"headerlink\" title=\"3 Variantes: shell y pre-rendering\"></a>3 Variantes: shell y pre-rendering</h1><p>La técnica vista anteriormente resuelve los problemas de usuario y de robot SEO, pero a costa de cierta complejidad. Y, sobre todo, a costa de necesitar un servidor node en producción.</p>\n<p>En algunas situaciones queremos desplegar la aplicación en un sencillo servidor de ficheros. A veces ni siquiera tenemos la necesidad del indexado completo.</p>\n<p>Para esos caso tenemos alternativas más sencillas.</p>\n<h2 id=\"3-1-Shell-para-mejora-de-experiencia-inicial\"><a href=\"#3-1-Shell-para-mejora-de-experiencia-inicial\" class=\"headerlink\" title=\"3.1 Shell para mejora de experiencia inicial\"></a>3.1 Shell para mejora de experiencia inicial</h2><ul>\n<li><p>Muestra un contenido instantáneo mientras descarga la app.</p>\n</li>\n<li><p>Mejora la experiencia de usuario en la primera visita.</p>\n</li>\n<li><p>De cara al SEO, sólo indexa el contenido inicial.</p>\n</li>\n</ul>\n<blockquote>\n<p>Adecuado para aplicaciones de usuario registrado, pero con un portal de bienvenida indexable y rápido.</p>\n</blockquote>\n<p>La más sencilla es hacer que el <code>index.html</code>, habitualmente vacío, se rellene con un <strong>contenido visualizable mientras el proceso principal de Angular no arranca</strong>. En ocasiones basta con poner a mano algún mensaje o animación que indique que estamos cargando. Pero cuanto más se parezca esa primera visión al resultado final mejor para el usuario. Así que lo propio sería que el <code>index.html</code> ya bajase con el <em>shell</em> real de la aplicación.</p>\n<p>Montar eso a mano no es la mejor opción. La solución parte de <strong>renderizar el <em>html</em> durante el proceso de <em>deploy</em></strong>. Se trata de configurar el CLI para que ejecute la aplicación en la máquina del desarrollador sobre una ruta predefinida; y que copie el resultado sobre el <code>index.html</code> que enviará a distribución.</p>\n<p>Este trabajo se ha automatizado y se resuelve con un par de comandos del Angular CLI.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g app-shell --client-project shop --universal-project server-shop</span><br></pre></td></tr></table></figure>\n\n<p>El efecto de este comando se materializa especialmente con la aparición de nuevos <em>targets para los builders</em> del CLI en el fichero <code>angular.json</code>.</p>\n<p>Con el comando <code>ng run shop:app-shell</code> podrás generar una versión especial de distribución en al que el <code>index.html</code> ya va prerenderizado con el contenido del componente asociado a la ruta <em>shell</em>. Realmente lo que hace es ejecutar tu aplicación sobre una ruta predefinida, tomar el <em>html</em> resultado e inyectarlo en el <em>body</em> del <code>index.html</code> que irá a distribución.</p>\n<blockquote>\n<p>Por cierto, esta técnica no obliga a disponer de ningún servidor web especial. Sigue funcionando con un servidor estático de ficheros pues la prerenderización se produjo en la máquina del programador.</p>\n</blockquote>\n<h2 id=\"3-2-Pre-renderizado-de-toda-la-aplicacion\"><a href=\"#3-2-Pre-renderizado-de-toda-la-aplicacion\" class=\"headerlink\" title=\"3.2 Pre renderizado de toda la aplicación\"></a>3.2 Pre renderizado de toda la aplicación</h2><ul>\n<li><p>Se trata de volver no sólo al servidor web, si no al servidor de ficheros.</p>\n</li>\n<li><p>La idea es invocar repetidamente al SSR y almacenar el HTML resultante en ficheros físicos.</p>\n</li>\n<li><p>En producción, los robots y los usuarios recibirán ya esas copias pre generadas.</p>\n</li>\n<li><p>Para mantener el sistema actualizado se necesita regenerar frecuentemente los ficheros</p>\n</li>\n</ul>\n<blockquote>\n<p>Adecuado para blogs y sitios que no puedan o no quieran tener un servidor web corriendo.</p>\n</blockquote>\n<p>A falta de una solución oficial, podemos seguir la pista a iniciativas tipo <a href=\"https://github.com/chrisguttandin/angular-prerender\">Angular Prerender</a></p>\n<h1 id=\"4-SEO-en-la-pagina-en-el-navegador-y-en-el-servidor\"><a href=\"#4-SEO-en-la-pagina-en-el-navegador-y-en-el-servidor\" class=\"headerlink\" title=\"4 SEO en la página, en el navegador y en el servidor\"></a>4 SEO en la página, en el navegador y en el servidor</h1><p>Con lo visto hasta ahora tu aplicación estará más que cubierta en cuanto a ofrecer la mejor experiencia para usuarios al tiempo que envía contenido indexable para robots… Pero falta algo.</p>\n<p>Habitualmente las aplicaciones Angular manejan el contenido visible de una página web; es decir, el <em>body</em>. Para <strong>acceder y cambiar el contenido del <em>header</em></strong>, tan utilizado por los robots de redes sociales, hay que usar algo más.</p>\n<h2 id=\"4-1-Titulo-y-meta-etiquetas-de-pagina\"><a href=\"#4-1-Titulo-y-meta-etiquetas-de-pagina\" class=\"headerlink\" title=\"4.1 Titulo y meta etiquetas de página\"></a>4.1 Titulo y meta etiquetas de página</h2><p>Como parte del <em>framework</em> viene la librería <em>platform-browser</em> dónde tenemos un par de servicios para manipular el título y cualquier etiqueta de meta información de la página.</p>\n<p>Para ello suele usarse un código similar a este en el componente raíz de la aplicación. Es muy sencillo pero te dará una idea del potencial de estos servicios:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Meta</span>, <span class=\"title class_\">Title</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`&lt;p&gt;Aprende a usar el framework Angular&lt;/p&gt;`</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> title: Title, <span class=\"keyword\">private</span> meta: Meta</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">title</span>.<span class=\"title function_\">setTitle</span>(<span class=\"string\">&#x27;My title&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">meta</span>.<span class=\"title function_\">addTag</span>(&#123; <span class=\"attr\">property</span>: <span class=\"string\">&#x27;og:title&#x27;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&#x27;My title&#x27;</span> &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ahora ya tienes una aplicación que satisface a usuarios y robots por igual. Continúa tu formación avanzada para crear aplicaciones Angular para el mundo globalizado con técnicas de <a href=\"../internacionalizacion-y-puesta-en-produccion-con-Angular/\">Internacionalización y puesta en producción</a> y verás como aprendes a programar con Angular 8.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-17_ssr.png\" alt=\"velocidad-y-seo-con-el-ssr-de-angular-universal\"></p>\n<p>Las <em>SPA JavaScript</em>, muy balanceadas hacia el navegador, nacieron para <strong>crear con tecnología web aplicaciones de negocio</strong>. Normalmente se desplegaban en <em>intranets</em>, o en internet para usuarios autorizados. Eran aplicaciones de uso intensivo, visita recurrente y alto rendimiento diario. El éxito tecnológico de <em>frameworks</em> como Angular las llevó a ser usadas para desarrollar webs clásicas de internet y ser utilizadas por visitantes ocasionales.</p>\n<p>Pero en esta situación presentaron dos problemas para los que inicialmente no estaban preparadas. Por un lado la primera visita de un humano obligaba a la descarga completa de la aplicación antes de poder ver nada. Y nada era lo que veían los visitantes robóticos que pretendían indexar un sitio. Las soluciones a estos problemas incluyen, entre otras medidas, <strong>una vuelta al servidor</strong>. Lo que en Angular se conoce como <strong>aplicación universal</strong>.</p>","more":"<p>Partiendo del código tal como quedó en <a href=\"../pwa-entre-la-web-y-las-apps-con-angular/\">PWA, Entre la web y las apps con Angular</a>. Al finalizar tendrás una aplicación que  ofrece lo que buscan tanto a personas como a robots.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Angular-Universal\"><a href=\"#1-Angular-Universal\" class=\"headerlink\" title=\"1 Angular Universal\"></a>1 Angular Universal</h1><h2 id=\"1-1-Vuelta-al-servidor\"><a href=\"#1-1-Vuelta-al-servidor\" class=\"headerlink\" title=\"1.1 Vuelta al servidor\"></a>1.1 Vuelta al servidor</h2><blockquote>\n<p>Tenemos: Angular nació para vivir en el navegador.</p>\n</blockquote>\n<ul>\n<li><p>Para <strong>quitarle carga al servidor</strong> generando el contenido dinámico en el navegador en base a plantillas.</p>\n</li>\n<li><p>Para enviar por la red primero la aplicación y después los datos, <strong>ahorrando transferencia</strong> durante un uso continuado.</p>\n</li>\n<li><p>Para mejorar la <strong>experiencia del usuario</strong> al no percibir recarga de página durante la navegación dentro de la aplicación.</p>\n</li>\n</ul>\n<p><strong>Ideal en entornos de intranet o aplicaciones de gestión de uso intensivo.</strong></p>\n<p><strong>Problemático para uso esporádico o indexable públicamente.</strong></p>\n<blockquote>\n<p>Queremos: Indexado SEO y velocidad en la primera visita y también en las sucesivas.</p>\n</blockquote>\n<h2 id=\"1-2-Para-mejorar-el-SEO\"><a href=\"#1-2-Para-mejorar-el-SEO\" class=\"headerlink\" title=\"1.2 Para mejorar el SEO\"></a>1.2 Para mejorar el SEO</h2><blockquote>\n<p>El contenido se genera durante la ejecución del JavaScript en el navegador.</p>\n</blockquote>\n<ul>\n<li><p>Los <strong>robots</strong> no tienen nada significativo que indexar.</p>\n</li>\n<li><p>Las <strong>redes sociales</strong> no encuentran cabeceras para mejorar la presentación de enlaces.</p>\n</li>\n</ul>\n<p><strong>Hay que enviar el contenido ya generado.</strong></p>\n<p><strong>Pero sin perder la experiencia de usuario durante la ejecución.</strong></p>\n<h2 id=\"1-3-Para-mejorar-la-experiencia-en-la-primera-visita\"><a href=\"#1-3-Para-mejorar-la-experiencia-en-la-primera-visita\" class=\"headerlink\" title=\"1.3 Para mejorar la experiencia en la primera visita\"></a>1.3 Para mejorar la experiencia en la primera visita</h2><blockquote>\n<p>Para mostrar contenido antes hay que descargar y ejecutar la aplicación.</p>\n</blockquote>\n<ul>\n<li><p>Los <strong>usuarios</strong> ven una página vacía demasiado tiempo.</p>\n</li>\n<li><p>El <strong>peso de la descarga inicial</strong> es desproporcionado a pesar de <em>lazy loading</em>.</p>\n</li>\n</ul>\n<p><strong>Hay que enviar el contenido ya generado.</strong></p>\n<p><strong>Descargar la aplicación en segundo plano.</strong></p>\n<h1 id=\"2-Despliegue-con-Node-Express\"><a href=\"#2-Despliegue-con-Node-Express\" class=\"headerlink\" title=\"2 Despliegue con Node Express\"></a>2 Despliegue con Node Express</h1><p>El reto está en mantener lo bueno de las aplicaciones <em>JavaScript</em> como es la transición fluida entre páginas, la interactividad o la descarga de datos bajo demanda, pero combinado con una mejor primera experiencia. Para ello la descarga del <code>index.html</code> tiene que venir con un documento html ya preparado con algo para mostrar y tardar lo menos posible en permitir la interacción.</p>\n<p>El <strong>tiempo para el primer pintado</strong> se ve penalizado por el tamaño del <em>bundle</em> principal de Angular, pues en él reside habitualmente el componente <em>app</em> que actúa de raíz. Por supuesto que utilizar la carga diferida de módulos es una manera obligada de reducir el peso del <em>main</em>. Todas las rutas, incluida la ruta base, deben ser <em>lazy</em> para retrasar la navegación y que la descarga se produzca más tarde. Sólo el componente raíz con la <em>shell</em> de navegación básica debería venir en el <em>bundle</em> principal.</p>\n<p>Pero ni con eso es suficiente. El usuario no verá nada hasta que Angular se descargue, reclame el <em>bundle main</em>, lo procese y renderice ese <em>shell</em>. Hay usar alguna estrategia extra para reducir el tiempo de espera y entretener al usuario.</p>\n<h2 id=\"2-1-Add-Express-Engine\"><a href=\"#2-1-Add-Express-Engine\" class=\"headerlink\" title=\"2.1 Add Express Engine\"></a>2.1 Add Express Engine</h2><p>Claro que esto es sólo un truco para que ese primer momento de espera se reduzca y no perdamos potenciales visitantes. Si queremos algo más, como por ejemplo que el contenido a descargar sea más fresco, entonces necesitaremos <strong>renderizar en el servidor</strong>. Y para ello necesitaremos un servidor de verdad. El propuesto y mejor documentado es <em>Express de NodeJS</em>.</p>\n<p>Para empezar tendrás que instalar y registrar las librarías necesarias. Además habrá que crear el pequeño servidor <em>Express</em>, y configurar al CLI para que haga el despliegue de ambos: cliente y servidor. Este laborioso trabajo se ha automatizado y ahora mismo se resuelve casi todo con una instrucción.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @nguniversal/express-engine --clientProject shop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Scripts-de-compilado-y-despliegue\"><a href=\"#2-2-Scripts-de-compilado-y-despliegue\" class=\"headerlink\" title=\"2.2 Scripts de compilado y despliegue\"></a>2.2 Scripts de compilado y despliegue</h2><p>Cuando termina la generación e instalación, comienza el compilado. En este caso es doble, porque además de la compilación habitual que llamaremos <em>client-bundle</em>, habrá que compilar el servidor con su propia versión de la aplicación cliente. Será el <em>server-bundle</em>.</p>\n<p>Además necesitamos una tercera compilación (aunque no es propiamente de Angular) para el servidor <em>node&#x2F;express</em> que ejecutará el <em>server-bundle</em>. Y por último ya sólo nos queda poner en marcha dicho servidor que se quedará a la espera de peticiones de páginas.</p>\n<p>Todo esto se resume en los siguientes scripts, casi todos auto generados por el CLI.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:ssr&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run build:ssr &amp;&amp; npm run serve:ssr&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:ssr&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run build:client-and-server-bundles &amp;&amp; npm run compile:server&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:client-and-server-bundles&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build --prod &amp;&amp; ng run shop:server:production --bundleDependencies all&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compile:server&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config webpack.server.config.js --progress --colors&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;serve:ssr&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node dist/server&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-Control-de-rutas\"><a href=\"#2-3-Control-de-rutas\" class=\"headerlink\" title=\"2.3 Control de rutas\"></a>2.3 Control de rutas</h2><p>El resultado es un servidor <em>Node</em> que a cada petición web responde enviando el <code>index.html</code>. Pero, y esta es la clave, resolverá la ruta ejecutando la aplicación Angular antes de responder al navegador. De esa forma el <code>index.html</code> irá recién generado con el contenido tal cual lo vería el usuario tras la ejecución de Angular en local. Así que <strong>la espera al primer pintado significativo se reduce</strong> y eso es bueno.</p>\n<p>Por si fuera poco, la principal ventaja al usar este método es que al traer información dinámica puede usarse para indexar el contenido real del sitio. Esto es doblemente bueno, porque ahora todos <strong>los robots indexadores podrán catalogar tu <em>site</em></strong> como si de una web clásica se tratase. Y los usuarios humanos podrán continuar la ejecución en local disfrutando de las ventajas de una SPA.</p>\n<p>El trabajo del servidor a partir de ese momento será mayúsculo. Recibe la petición, invoca a su versión de nuestra aplicación Angular y la ejecuta en memoria. El resultado es un documento HTML que devolverá al usuario. Dará lo mismo que ruta se le pida y si se resuelve por lazy-loading. Va totalmente preparado y configurado para cargar el JavaScript oportuno y ejecutarlo como lo haría un navegador.</p>\n<p>Compruébalo solicitando diversas rutas e inspeccionando la respuesta del servidor.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http<span class=\"punctuation\">:</span><span class=\"comment\">//localhost:4000</span></span><br><span class=\"line\">http<span class=\"punctuation\">:</span><span class=\"comment\">//localhost:4000/rates</span></span><br></pre></td></tr></table></figure>\n\n<p>De todas formas tengo que advertirte de que tomes todo esto con cautela por varios motivos:</p>\n<ul>\n<li>Tecnología compleja estable pero con carencias</li>\n<li>Herramientas de generación buenas pero incompletas</li>\n<li>Transferencia de estado manual para evitar llamadas repetidas al API</li>\n</ul>\n<p>Tampoco es sencilla la convivencia con librerías propias del <em>browser</em>, y menos si se trata de una PWA. Yo procuro usar un servicio que aisle al servidor de ciertas llamadas sólo disponibles en el navegador, como por ejemplo todo lo relativo al <em>localStorage</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isPlatformBrowser, isPlatformServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Inject</span>, <span class=\"title class_\">Injectable</span>, <span class=\"variable constant_\">PLATFORM_ID</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UniversalService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"meta\">@Inject</span>(PLATFORM_ID) <span class=\"keyword\">private</span> platformId: <span class=\"built_in\">string</span></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">isBrowser</span>() =&gt; <span class=\"title function_\">isPlatformBrowser</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">platformId</span>);</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">isServer</span>() =&gt; <span class=\"title function_\">isPlatformServer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">platformId</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">saveOnStorage</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isBrowser</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(key, value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">loadFromStorage</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isBrowser</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Variantes-shell-y-pre-rendering\"><a href=\"#3-Variantes-shell-y-pre-rendering\" class=\"headerlink\" title=\"3 Variantes: shell y pre-rendering\"></a>3 Variantes: shell y pre-rendering</h1><p>La técnica vista anteriormente resuelve los problemas de usuario y de robot SEO, pero a costa de cierta complejidad. Y, sobre todo, a costa de necesitar un servidor node en producción.</p>\n<p>En algunas situaciones queremos desplegar la aplicación en un sencillo servidor de ficheros. A veces ni siquiera tenemos la necesidad del indexado completo.</p>\n<p>Para esos caso tenemos alternativas más sencillas.</p>\n<h2 id=\"3-1-Shell-para-mejora-de-experiencia-inicial\"><a href=\"#3-1-Shell-para-mejora-de-experiencia-inicial\" class=\"headerlink\" title=\"3.1 Shell para mejora de experiencia inicial\"></a>3.1 Shell para mejora de experiencia inicial</h2><ul>\n<li><p>Muestra un contenido instantáneo mientras descarga la app.</p>\n</li>\n<li><p>Mejora la experiencia de usuario en la primera visita.</p>\n</li>\n<li><p>De cara al SEO, sólo indexa el contenido inicial.</p>\n</li>\n</ul>\n<blockquote>\n<p>Adecuado para aplicaciones de usuario registrado, pero con un portal de bienvenida indexable y rápido.</p>\n</blockquote>\n<p>La más sencilla es hacer que el <code>index.html</code>, habitualmente vacío, se rellene con un <strong>contenido visualizable mientras el proceso principal de Angular no arranca</strong>. En ocasiones basta con poner a mano algún mensaje o animación que indique que estamos cargando. Pero cuanto más se parezca esa primera visión al resultado final mejor para el usuario. Así que lo propio sería que el <code>index.html</code> ya bajase con el <em>shell</em> real de la aplicación.</p>\n<p>Montar eso a mano no es la mejor opción. La solución parte de <strong>renderizar el <em>html</em> durante el proceso de <em>deploy</em></strong>. Se trata de configurar el CLI para que ejecute la aplicación en la máquina del desarrollador sobre una ruta predefinida; y que copie el resultado sobre el <code>index.html</code> que enviará a distribución.</p>\n<p>Este trabajo se ha automatizado y se resuelve con un par de comandos del Angular CLI.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g app-shell --client-project shop --universal-project server-shop</span><br></pre></td></tr></table></figure>\n\n<p>El efecto de este comando se materializa especialmente con la aparición de nuevos <em>targets para los builders</em> del CLI en el fichero <code>angular.json</code>.</p>\n<p>Con el comando <code>ng run shop:app-shell</code> podrás generar una versión especial de distribución en al que el <code>index.html</code> ya va prerenderizado con el contenido del componente asociado a la ruta <em>shell</em>. Realmente lo que hace es ejecutar tu aplicación sobre una ruta predefinida, tomar el <em>html</em> resultado e inyectarlo en el <em>body</em> del <code>index.html</code> que irá a distribución.</p>\n<blockquote>\n<p>Por cierto, esta técnica no obliga a disponer de ningún servidor web especial. Sigue funcionando con un servidor estático de ficheros pues la prerenderización se produjo en la máquina del programador.</p>\n</blockquote>\n<h2 id=\"3-2-Pre-renderizado-de-toda-la-aplicacion\"><a href=\"#3-2-Pre-renderizado-de-toda-la-aplicacion\" class=\"headerlink\" title=\"3.2 Pre renderizado de toda la aplicación\"></a>3.2 Pre renderizado de toda la aplicación</h2><ul>\n<li><p>Se trata de volver no sólo al servidor web, si no al servidor de ficheros.</p>\n</li>\n<li><p>La idea es invocar repetidamente al SSR y almacenar el HTML resultante en ficheros físicos.</p>\n</li>\n<li><p>En producción, los robots y los usuarios recibirán ya esas copias pre generadas.</p>\n</li>\n<li><p>Para mantener el sistema actualizado se necesita regenerar frecuentemente los ficheros</p>\n</li>\n</ul>\n<blockquote>\n<p>Adecuado para blogs y sitios que no puedan o no quieran tener un servidor web corriendo.</p>\n</blockquote>\n<p>A falta de una solución oficial, podemos seguir la pista a iniciativas tipo <a href=\"https://github.com/chrisguttandin/angular-prerender\">Angular Prerender</a></p>\n<h1 id=\"4-SEO-en-la-pagina-en-el-navegador-y-en-el-servidor\"><a href=\"#4-SEO-en-la-pagina-en-el-navegador-y-en-el-servidor\" class=\"headerlink\" title=\"4 SEO en la página, en el navegador y en el servidor\"></a>4 SEO en la página, en el navegador y en el servidor</h1><p>Con lo visto hasta ahora tu aplicación estará más que cubierta en cuanto a ofrecer la mejor experiencia para usuarios al tiempo que envía contenido indexable para robots… Pero falta algo.</p>\n<p>Habitualmente las aplicaciones Angular manejan el contenido visible de una página web; es decir, el <em>body</em>. Para <strong>acceder y cambiar el contenido del <em>header</em></strong>, tan utilizado por los robots de redes sociales, hay que usar algo más.</p>\n<h2 id=\"4-1-Titulo-y-meta-etiquetas-de-pagina\"><a href=\"#4-1-Titulo-y-meta-etiquetas-de-pagina\" class=\"headerlink\" title=\"4.1 Titulo y meta etiquetas de página\"></a>4.1 Titulo y meta etiquetas de página</h2><p>Como parte del <em>framework</em> viene la librería <em>platform-browser</em> dónde tenemos un par de servicios para manipular el título y cualquier etiqueta de meta información de la página.</p>\n<p>Para ello suele usarse un código similar a este en el componente raíz de la aplicación. Es muy sencillo pero te dará una idea del potencial de estos servicios:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Meta</span>, <span class=\"title class_\">Title</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;app-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`&lt;p&gt;Aprende a usar el framework Angular&lt;/p&gt;`</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> title: Title, <span class=\"keyword\">private</span> meta: Meta</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">title</span>.<span class=\"title function_\">setTitle</span>(<span class=\"string\">&#x27;My title&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">meta</span>.<span class=\"title function_\">addTag</span>(&#123; <span class=\"attr\">property</span>: <span class=\"string\">&#x27;og:title&#x27;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&#x27;My title&#x27;</span> &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ahora ya tienes una aplicación que satisface a usuarios y robots por igual. Continúa tu formación avanzada para crear aplicaciones Angular para el mundo globalizado con técnicas de <a href=\"../internacionalizacion-y-puesta-en-produccion-con-Angular/\">Internacionalización y puesta en producción</a> y verás como aprendes a programar con Angular 8.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Internacionalización y puesta en producción","date":"2019-10-15T17:50:27.000Z","thumbnail":"/css/images/angular-18_i18n.png","_content":"\n![internacionalizacion-y-puesta-en-produccion-con-Angular](/images/tutorial-angular-18_i18n.png)\n\nLas aplicaciones web, son la expresión perfecta del mundo globalizado en el que vivimos. Preparar tu aplicación para ese mundo se conoce como _internationalization_, o recortadamente **i18n**. Pero globalizar no significa \"café con leche para todos\". Atender a las necesidades específicas de tus usuarios es el proceso de __localization__.\n\nPara empezar esto afecta las traducciones de los contenidos: sean datos o textos fijos. Pero también a las adaptaciones culturales para la presentación de fechas, números, iconos... En Angular tenemos herramientas y soluciones para poner en marcha proyectos globalizados.\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [Velocidad y SEO con el SSR de Angular Universal](../velocidad-y-seo-con-el-ssr-de-angular-universal/). Al finalizar tendrás una aplicación que adapta a la cultura del usuario.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n# 1 Traducciones y contenido\n\nTraducir una aplicación es el primer paso para que un usuario la acepte y comprenda mejor. Afecta a los datos que venga dese un API, y afecta a los textos fijos que acompañan a los datos.\n\nComo estamos viendo Angular en frontend, me centraré en el problema de los literales en las _templates_. Existen varias estrategias para tratarlo, aquí veremos la oficial. Se apuesta por dos principios:\n\n- El programador vea el texto en la plantilla en el idioma nativo escogido para el desarrollo. Así puede hacerse una idea del tamaño y apariencia inicial y facilita mucho la legibilidad del HTML.\n\n- El usuario descargue la aplicación específica para su idioma, de forma que no necesite llamadas extra ni resolución dinámica para los textos y menajes fijos.\n\n## 1.1 xi18n\n\nPara cumplir con esos criterios se necesita extraer del código los literales que se van traducir. Para ello se usa una herramienta y un convenio.\n\nLa herramienta es `xi18n` que viene con el CLI. El convenio es la directiva `i18n` que viene con Angular. El uso es muy sencillo, como puedes ver este ejemplo.\n\n`apps\\warehouse\\src\\app\\app.component.html`\n\n```html\n<header>\n  <h1 i18n>Welcome to the Angular Builders Warehouse</h1>\n</header>\n<img src=\"../assets/Warehouse-Building.jpg\"\n     alt=\"Warehouse building\"\n     i18n-alt>\n<router-outlet></router-outlet>\n<footer>\n  <a href=\"https://angular.builders\"\n     target=\"blank\">Angular.Builders: </a>\n  <span i18n>a store of resources for developers and software architects.</span>\n</footer>\n```\n\nPara la extracción se recomienda, como siempre, crear un script en el  `package.json`\n\n```json\n{\n  \"i18n:warehouse\": \"ng xi18n warehouse --output-path src/locale\",\n}\n```\n\n> Atención IVY: por el momento debemos desactivar el renderizador _Ivy_ para poder realizar la extracción.\n\n`apps\\warehouse\\tsconfig.app.json`\n\n```json\n{\n\"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}\n```\n\nAparecerá un fichero _xml_ un tanto feo: `/src/locale/messages.xlf`. Aunque es procesable automáticamente, por ahora vamos a usarlo de forma manual. Para empezar crea una copia y nómbrala incluyendo el idioma destino. Por ejemplo` messages.es.xlf`\n\nSólo tendrás que duplicar cada etiqueta `source` en su equivalente traducido `target`... y traducirlo, claro. Te pongo aquí un ejemplo de como quedaría.\n\n```xml\n<trans-unit id=\"5c08a98fac06c803712ab27dbb81d889af5ef5fb\" datatype=\"html\">\n  <source>Welcome to the Angular Builders Warehouse</source>\n  <target>Bienvenido al almacén de Angular Builders</target>\n  <context-group purpose=\"location\">\n    <context context-type=\"sourcefile\">src/app/app.component.html</context>\n    <context context-type=\"linenumber\">2</context>\n  </context-group>\n</trans-unit>\n```\n\nNecesitarás crear tantos ficheros como idiomas tengas que mantener. Si son muchos te recomiendo usar alguna herramienta. Tampoco debes olvidarte de realizar este proceso ante cada despliegue para incorporar los posibles cambios.\n\nY hablando de despliegue..\n\n## 1.2 Build configurations\n\nUna vez que tenemos las traducciones en los ficheros de idioma, ahora hay que compilarlos para generar una versión distribuible específica para cada idioma. De nuevo esto es un proceso un tanto tedioso la primera vez, y que desde luego merece ser automatizado.\n\nSe trata de crear una nueva entrada en la rama `architect/build/configurations` de tu aplicación en el fichero `angular.json`.\n\n```json\n\"production-es\": {\n  \"fileReplacements\": [\n    {\n      \"replace\": \"apps/warehouse/src/environments/environment.ts\",\n      \"with\": \"apps/warehouse/src/environments/environment.prod.es.ts\"\n    },\n  ],\n  \"outputPath\": \"dist/apps/warehouse/es/\",\n  \"i18nFile\": \"apps/warehouse/src/locale/messages.es.xlf\",\n  \"i18nFormat\": \"xlf\",\n  \"i18nLocale\": \"es\",\n  \"baseHref\": \"es\",\n}\n```\n\nEsencialmente se le dicen las rutas y los ficheros que debe utilizar durante el proceso de construcción. Para usarla definimos un par de scripts. Uno para la construcción en sí mediante `ng build` y el otro para poder ver el resultado con un servidor de ficheros estáticos.\n\n```json\n{\n  \"build:warehouse-es\": \"ng build warehouse --configuration=production-es\",\n  \"start:warehouse-es\": \"npm run build:warehouse-es && angular-http-server --path ./dist/apps/warehouse/es\",\n}\n```\n\n\n# 2 Adaptaciones culturales de tiempo y moneda\n\nPero no todo van a ser textos. También hay fechas, número, imágenes... Se necesitan hacer pequeñas adaptaciones en un montón de lugares. En Angular, algunas son casi gratis.\n\n## 2.1 Registro manual en app.module o Auto registro en angular.json\n\nHabrás usado _pipes_ como `date` o `number` desde el día que empezaste con Angular. Si no haces nada especial seguro que te chocó ver que las fechas y los números en formato norte americano. Es el que viene de fábrica, pero e fácil cambiarlo.\n\n### Manual\n\nPuedes asignar la cultura en tu aplicación de forma implícita registrándola al inicio del módulo raíz. La clave está en importar el fichero con las definiciones particulares de tu cultura.\n\nTodo está descargado en node-modules. Pero sólo se empaqueta y envía al navegador la cultura seleccionada.\n\n\n```typescript\nimport { registerLocaleData } from '@angular/common';\nimport localeEs from '@angular/common/locales/es';\n\nregisterLocaleData(localeEs);\n```\n\n### Automático\n\nOtra forma es usar el fichero `package.json` para configurarlo. Puedes establece la cultura deseada en la propiedad `i18nLocale`.\n\n```json\n\"i18nLocale\": \"es\"\n```\n\n## 2.2 Tiempo, moneda y contenido\n\nEn cualquier caso, todos los pipes deAngular empezarán a comportarse educadamente conforme a la cultura establecida.\n\n`apps\\warehouse\\src\\app\\app.component.html`\n\n```html\n<article class=\"card\">\n  <p>{{ building.date | date:'long' }}</p>\n  <p>${{ building.value | number }}<i> {{ building.status }}</i></p>\n</article>\n```\n\n`apps\\warehouse\\src\\app\\app.component.ts`\n\n```TypeScript\npublic building = {\n  date: Date.now(),\n  value: 2345.897,\n  status: 'buy'\n};\nconstructor() {\n  if (this.building.status === 'buy') {\n    this.building.status = environment.buy;\n  } else {\n    this.building.status = environment.sell;\n  }\n}\n```\n\nOtra cosa pueden ser pequeños textos, lógica , iconos o clases css. A veces todo esto varía de un país a otro. Esas variaciones puedes almacenarla en ficheros externos o dentro del código. Pero si optas por esto ultimo entonces es mejor que uses los _environments_ para almacenar configuraciones específicas.\n\n```TypeScript\n# Original environment.prod.ts\n{\n  buy: 'for buy',\n  sell: 'for sell'\n}\n# En español environment.prod.es.ts\n{\n  buy: 'para comprar',\n  sell: 'para vender'\n}\n```\n\nAhora ya tienes una aplicación que se puede desplegar adaptada a las preferencias culturales de tus usuarios. Continúa tu formación avanzada para crear aplicaciones más allá del framework con los [Elementos Angular para los Web Components](../elementos-Angular-para-los-Web-Components/) y verás como aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/ng-18-internacionalizacion-y-puesta-en-produccion-con-Angular.md","raw":"---\ntitle: Internacionalización y puesta en producción\npermalink: internacionalizacion-y-puesta-en-produccion-con-Angular\ndate: 2019-10-15 19:50:27\ntags:\n- Angular\n- Angular8\n- Angular2\n- i18n\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-18_i18n.png\n---\n\n![internacionalizacion-y-puesta-en-produccion-con-Angular](/images/tutorial-angular-18_i18n.png)\n\nLas aplicaciones web, son la expresión perfecta del mundo globalizado en el que vivimos. Preparar tu aplicación para ese mundo se conoce como _internationalization_, o recortadamente **i18n**. Pero globalizar no significa \"café con leche para todos\". Atender a las necesidades específicas de tus usuarios es el proceso de __localization__.\n\nPara empezar esto afecta las traducciones de los contenidos: sean datos o textos fijos. Pero también a las adaptaciones culturales para la presentación de fechas, números, iconos... En Angular tenemos herramientas y soluciones para poner en marcha proyectos globalizados.\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [Velocidad y SEO con el SSR de Angular Universal](../velocidad-y-seo-con-el-ssr-de-angular-universal/). Al finalizar tendrás una aplicación que adapta a la cultura del usuario.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n# 1 Traducciones y contenido\n\nTraducir una aplicación es el primer paso para que un usuario la acepte y comprenda mejor. Afecta a los datos que venga dese un API, y afecta a los textos fijos que acompañan a los datos.\n\nComo estamos viendo Angular en frontend, me centraré en el problema de los literales en las _templates_. Existen varias estrategias para tratarlo, aquí veremos la oficial. Se apuesta por dos principios:\n\n- El programador vea el texto en la plantilla en el idioma nativo escogido para el desarrollo. Así puede hacerse una idea del tamaño y apariencia inicial y facilita mucho la legibilidad del HTML.\n\n- El usuario descargue la aplicación específica para su idioma, de forma que no necesite llamadas extra ni resolución dinámica para los textos y menajes fijos.\n\n## 1.1 xi18n\n\nPara cumplir con esos criterios se necesita extraer del código los literales que se van traducir. Para ello se usa una herramienta y un convenio.\n\nLa herramienta es `xi18n` que viene con el CLI. El convenio es la directiva `i18n` que viene con Angular. El uso es muy sencillo, como puedes ver este ejemplo.\n\n`apps\\warehouse\\src\\app\\app.component.html`\n\n```html\n<header>\n  <h1 i18n>Welcome to the Angular Builders Warehouse</h1>\n</header>\n<img src=\"../assets/Warehouse-Building.jpg\"\n     alt=\"Warehouse building\"\n     i18n-alt>\n<router-outlet></router-outlet>\n<footer>\n  <a href=\"https://angular.builders\"\n     target=\"blank\">Angular.Builders: </a>\n  <span i18n>a store of resources for developers and software architects.</span>\n</footer>\n```\n\nPara la extracción se recomienda, como siempre, crear un script en el  `package.json`\n\n```json\n{\n  \"i18n:warehouse\": \"ng xi18n warehouse --output-path src/locale\",\n}\n```\n\n> Atención IVY: por el momento debemos desactivar el renderizador _Ivy_ para poder realizar la extracción.\n\n`apps\\warehouse\\tsconfig.app.json`\n\n```json\n{\n\"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}\n```\n\nAparecerá un fichero _xml_ un tanto feo: `/src/locale/messages.xlf`. Aunque es procesable automáticamente, por ahora vamos a usarlo de forma manual. Para empezar crea una copia y nómbrala incluyendo el idioma destino. Por ejemplo` messages.es.xlf`\n\nSólo tendrás que duplicar cada etiqueta `source` en su equivalente traducido `target`... y traducirlo, claro. Te pongo aquí un ejemplo de como quedaría.\n\n```xml\n<trans-unit id=\"5c08a98fac06c803712ab27dbb81d889af5ef5fb\" datatype=\"html\">\n  <source>Welcome to the Angular Builders Warehouse</source>\n  <target>Bienvenido al almacén de Angular Builders</target>\n  <context-group purpose=\"location\">\n    <context context-type=\"sourcefile\">src/app/app.component.html</context>\n    <context context-type=\"linenumber\">2</context>\n  </context-group>\n</trans-unit>\n```\n\nNecesitarás crear tantos ficheros como idiomas tengas que mantener. Si son muchos te recomiendo usar alguna herramienta. Tampoco debes olvidarte de realizar este proceso ante cada despliegue para incorporar los posibles cambios.\n\nY hablando de despliegue..\n\n## 1.2 Build configurations\n\nUna vez que tenemos las traducciones en los ficheros de idioma, ahora hay que compilarlos para generar una versión distribuible específica para cada idioma. De nuevo esto es un proceso un tanto tedioso la primera vez, y que desde luego merece ser automatizado.\n\nSe trata de crear una nueva entrada en la rama `architect/build/configurations` de tu aplicación en el fichero `angular.json`.\n\n```json\n\"production-es\": {\n  \"fileReplacements\": [\n    {\n      \"replace\": \"apps/warehouse/src/environments/environment.ts\",\n      \"with\": \"apps/warehouse/src/environments/environment.prod.es.ts\"\n    },\n  ],\n  \"outputPath\": \"dist/apps/warehouse/es/\",\n  \"i18nFile\": \"apps/warehouse/src/locale/messages.es.xlf\",\n  \"i18nFormat\": \"xlf\",\n  \"i18nLocale\": \"es\",\n  \"baseHref\": \"es\",\n}\n```\n\nEsencialmente se le dicen las rutas y los ficheros que debe utilizar durante el proceso de construcción. Para usarla definimos un par de scripts. Uno para la construcción en sí mediante `ng build` y el otro para poder ver el resultado con un servidor de ficheros estáticos.\n\n```json\n{\n  \"build:warehouse-es\": \"ng build warehouse --configuration=production-es\",\n  \"start:warehouse-es\": \"npm run build:warehouse-es && angular-http-server --path ./dist/apps/warehouse/es\",\n}\n```\n\n\n# 2 Adaptaciones culturales de tiempo y moneda\n\nPero no todo van a ser textos. También hay fechas, número, imágenes... Se necesitan hacer pequeñas adaptaciones en un montón de lugares. En Angular, algunas son casi gratis.\n\n## 2.1 Registro manual en app.module o Auto registro en angular.json\n\nHabrás usado _pipes_ como `date` o `number` desde el día que empezaste con Angular. Si no haces nada especial seguro que te chocó ver que las fechas y los números en formato norte americano. Es el que viene de fábrica, pero e fácil cambiarlo.\n\n### Manual\n\nPuedes asignar la cultura en tu aplicación de forma implícita registrándola al inicio del módulo raíz. La clave está en importar el fichero con las definiciones particulares de tu cultura.\n\nTodo está descargado en node-modules. Pero sólo se empaqueta y envía al navegador la cultura seleccionada.\n\n\n```typescript\nimport { registerLocaleData } from '@angular/common';\nimport localeEs from '@angular/common/locales/es';\n\nregisterLocaleData(localeEs);\n```\n\n### Automático\n\nOtra forma es usar el fichero `package.json` para configurarlo. Puedes establece la cultura deseada en la propiedad `i18nLocale`.\n\n```json\n\"i18nLocale\": \"es\"\n```\n\n## 2.2 Tiempo, moneda y contenido\n\nEn cualquier caso, todos los pipes deAngular empezarán a comportarse educadamente conforme a la cultura establecida.\n\n`apps\\warehouse\\src\\app\\app.component.html`\n\n```html\n<article class=\"card\">\n  <p>{{ building.date | date:'long' }}</p>\n  <p>${{ building.value | number }}<i> {{ building.status }}</i></p>\n</article>\n```\n\n`apps\\warehouse\\src\\app\\app.component.ts`\n\n```TypeScript\npublic building = {\n  date: Date.now(),\n  value: 2345.897,\n  status: 'buy'\n};\nconstructor() {\n  if (this.building.status === 'buy') {\n    this.building.status = environment.buy;\n  } else {\n    this.building.status = environment.sell;\n  }\n}\n```\n\nOtra cosa pueden ser pequeños textos, lógica , iconos o clases css. A veces todo esto varía de un país a otro. Esas variaciones puedes almacenarla en ficheros externos o dentro del código. Pero si optas por esto ultimo entonces es mejor que uses los _environments_ para almacenar configuraciones específicas.\n\n```TypeScript\n# Original environment.prod.ts\n{\n  buy: 'for buy',\n  sell: 'for sell'\n}\n# En español environment.prod.es.ts\n{\n  buy: 'para comprar',\n  sell: 'para vender'\n}\n```\n\nAhora ya tienes una aplicación que se puede desplegar adaptada a las preferencias culturales de tus usuarios. Continúa tu formación avanzada para crear aplicaciones más allá del framework con los [Elementos Angular para los Web Components](../elementos-Angular-para-los-Web-Components/) y verás como aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"ng-18-internacionalizacion-y-puesta-en-produccion-con-Angular","published":1,"updated":"2023-07-02T10:25:58.476Z","__permalink":"internacionalizacion-y-puesta-en-produccion-con-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fe0015e0963yvkaqy8","content":"<p><img src=\"/images/tutorial-angular-18_i18n.png\" alt=\"internacionalizacion-y-puesta-en-produccion-con-Angular\"></p>\n<p>Las aplicaciones web, son la expresión perfecta del mundo globalizado en el que vivimos. Preparar tu aplicación para ese mundo se conoce como <em>internationalization</em>, o recortadamente <strong>i18n</strong>. Pero globalizar no significa “café con leche para todos”. Atender a las necesidades específicas de tus usuarios es el proceso de <strong>localization</strong>.</p>\n<p>Para empezar esto afecta las traducciones de los contenidos: sean datos o textos fijos. Pero también a las adaptaciones culturales para la presentación de fechas, números, iconos… En Angular tenemos herramientas y soluciones para poner en marcha proyectos globalizados.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo del código tal como quedó en <a href=\"../velocidad-y-seo-con-el-ssr-de-angular-universal/\">Velocidad y SEO con el SSR de Angular Universal</a>. Al finalizar tendrás una aplicación que adapta a la cultura del usuario.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Traducciones-y-contenido\"><a href=\"#1-Traducciones-y-contenido\" class=\"headerlink\" title=\"1 Traducciones y contenido\"></a>1 Traducciones y contenido</h1><p>Traducir una aplicación es el primer paso para que un usuario la acepte y comprenda mejor. Afecta a los datos que venga dese un API, y afecta a los textos fijos que acompañan a los datos.</p>\n<p>Como estamos viendo Angular en frontend, me centraré en el problema de los literales en las <em>templates</em>. Existen varias estrategias para tratarlo, aquí veremos la oficial. Se apuesta por dos principios:</p>\n<ul>\n<li><p>El programador vea el texto en la plantilla en el idioma nativo escogido para el desarrollo. Así puede hacerse una idea del tamaño y apariencia inicial y facilita mucho la legibilidad del HTML.</p>\n</li>\n<li><p>El usuario descargue la aplicación específica para su idioma, de forma que no necesite llamadas extra ni resolución dinámica para los textos y menajes fijos.</p>\n</li>\n</ul>\n<h2 id=\"1-1-xi18n\"><a href=\"#1-1-xi18n\" class=\"headerlink\" title=\"1.1 xi18n\"></a>1.1 xi18n</h2><p>Para cumplir con esos criterios se necesita extraer del código los literales que se van traducir. Para ello se usa una herramienta y un convenio.</p>\n<p>La herramienta es <code>xi18n</code> que viene con el CLI. El convenio es la directiva <code>i18n</code> que viene con Angular. El uso es muy sencillo, como puedes ver este ejemplo.</p>\n<p><code>apps\\warehouse\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">i18n</span>&gt;</span>Welcome to the Angular Builders Warehouse<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../assets/Warehouse-Building.jpg&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Warehouse building&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">i18n-alt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://angular.builders&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">target</span>=<span class=\"string\">&quot;blank&quot;</span>&gt;</span>Angular.Builders: <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>a store of resources for developers and software architects.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Para la extracción se recomienda, como siempre, crear un script en el  <code>package.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;i18n:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng xi18n warehouse --output-path src/locale&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Atención IVY: por el momento debemos desactivar el renderizador <em>Ivy</em> para poder realizar la extracción.</p>\n</blockquote>\n<p><code>apps\\warehouse\\tsconfig.app.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;angularCompilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;enableIvy&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Aparecerá un fichero <em>xml</em> un tanto feo: <code>/src/locale/messages.xlf</code>. Aunque es procesable automáticamente, por ahora vamos a usarlo de forma manual. Para empezar crea una copia y nómbrala incluyendo el idioma destino. Por ejemplo<code> messages.es.xlf</code></p>\n<p>Sólo tendrás que duplicar cada etiqueta <code>source</code> en su equivalente traducido <code>target</code>… y traducirlo, claro. Te pongo aquí un ejemplo de como quedaría.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;5c08a98fac06c803712ab27dbb81d889af5ef5fb&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Welcome to the Angular Builders Warehouse<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>Bienvenido al almacén de Angular Builders<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/app.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Necesitarás crear tantos ficheros como idiomas tengas que mantener. Si son muchos te recomiendo usar alguna herramienta. Tampoco debes olvidarte de realizar este proceso ante cada despliegue para incorporar los posibles cambios.</p>\n<p>Y hablando de despliegue..</p>\n<h2 id=\"1-2-Build-configurations\"><a href=\"#1-2-Build-configurations\" class=\"headerlink\" title=\"1.2 Build configurations\"></a>1.2 Build configurations</h2><p>Una vez que tenemos las traducciones en los ficheros de idioma, ahora hay que compilarlos para generar una versión distribuible específica para cada idioma. De nuevo esto es un proceso un tanto tedioso la primera vez, y que desde luego merece ser automatizado.</p>\n<p>Se trata de crear una nueva entrada en la rama <code>architect/build/configurations</code> de tu aplicación en el fichero <code>angular.json</code>.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;production-es&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;fileReplacements&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;replace&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;apps/warehouse/src/environments/environment.ts&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;with&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;apps/warehouse/src/environments/environment.prod.es.ts&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;outputPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dist/apps/warehouse/es/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;i18nFile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;apps/warehouse/src/locale/messages.es.xlf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;i18nFormat&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xlf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;i18nLocale&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;baseHref&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Esencialmente se le dicen las rutas y los ficheros que debe utilizar durante el proceso de construcción. Para usarla definimos un par de scripts. Uno para la construcción en sí mediante <code>ng build</code> y el otro para poder ver el resultado con un servidor de ficheros estáticos.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:warehouse-es&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build warehouse --configuration=production-es&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:warehouse-es&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run build:warehouse-es &amp;&amp; angular-http-server --path ./dist/apps/warehouse/es&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"2-Adaptaciones-culturales-de-tiempo-y-moneda\"><a href=\"#2-Adaptaciones-culturales-de-tiempo-y-moneda\" class=\"headerlink\" title=\"2 Adaptaciones culturales de tiempo y moneda\"></a>2 Adaptaciones culturales de tiempo y moneda</h1><p>Pero no todo van a ser textos. También hay fechas, número, imágenes… Se necesitan hacer pequeñas adaptaciones en un montón de lugares. En Angular, algunas son casi gratis.</p>\n<h2 id=\"2-1-Registro-manual-en-app-module-o-Auto-registro-en-angular-json\"><a href=\"#2-1-Registro-manual-en-app-module-o-Auto-registro-en-angular-json\" class=\"headerlink\" title=\"2.1 Registro manual en app.module o Auto registro en angular.json\"></a>2.1 Registro manual en app.module o Auto registro en angular.json</h2><p>Habrás usado <em>pipes</em> como <code>date</code> o <code>number</code> desde el día que empezaste con Angular. Si no haces nada especial seguro que te chocó ver que las fechas y los números en formato norte americano. Es el que viene de fábrica, pero e fácil cambiarlo.</p>\n<h3 id=\"Manual\"><a href=\"#Manual\" class=\"headerlink\" title=\"Manual\"></a>Manual</h3><p>Puedes asignar la cultura en tu aplicación de forma implícita registrándola al inicio del módulo raíz. La clave está en importar el fichero con las definiciones particulares de tu cultura.</p>\n<p>Todo está descargado en node-modules. Pero sólo se empaqueta y envía al navegador la cultura seleccionada.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; registerLocaleData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> localeEs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/locales/es&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">registerLocaleData</span>(localeEs);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Automatico\"><a href=\"#Automatico\" class=\"headerlink\" title=\"Automático\"></a>Automático</h3><p>Otra forma es usar el fichero <code>package.json</code> para configurarlo. Puedes establece la cultura deseada en la propiedad <code>i18nLocale</code>.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;i18nLocale&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Tiempo-moneda-y-contenido\"><a href=\"#2-2-Tiempo-moneda-y-contenido\" class=\"headerlink\" title=\"2.2 Tiempo, moneda y contenido\"></a>2.2 Tiempo, moneda y contenido</h2><p>En cualquier caso, todos los pipes deAngular empezarán a comportarse educadamente conforme a la cultura establecida.</p>\n<p><code>apps\\warehouse\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; building.date | date:&#x27;long&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>$&#123;&#123; building.value | number &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span> &#123;&#123; building.status &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>apps\\warehouse\\src\\app\\app.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> building = &#123;</span><br><span class=\"line\">  <span class=\"attr\">date</span>: <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>(),</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">2345.897</span>,</span><br><span class=\"line\">  <span class=\"attr\">status</span>: <span class=\"string\">&#x27;buy&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">building</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;buy&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">building</span>.<span class=\"property\">status</span> = environment.<span class=\"property\">buy</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">building</span>.<span class=\"property\">status</span> = environment.<span class=\"property\">sell</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Otra cosa pueden ser pequeños textos, lógica , iconos o clases css. A veces todo esto varía de un país a otro. Esas variaciones puedes almacenarla en ficheros externos o dentro del código. Pero si optas por esto ultimo entonces es mejor que uses los <em>environments</em> para almacenar configuraciones específicas.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"title class_\">Original</span> environment.<span class=\"property\">prod</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">buy</span>: <span class=\"string\">&#x27;for buy&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sell</span>: <span class=\"string\">&#x27;for sell&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"title class_\">En</span> español environment.<span class=\"property\">prod</span>.<span class=\"property\">es</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">buy</span>: <span class=\"string\">&#x27;para comprar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sell</span>: <span class=\"string\">&#x27;para vender&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ahora ya tienes una aplicación que se puede desplegar adaptada a las preferencias culturales de tus usuarios. Continúa tu formación avanzada para crear aplicaciones más allá del framework con los <a href=\"../elementos-Angular-para-los-Web-Components/\">Elementos Angular para los Web Components</a> y verás como aprendes a programar con Angular 8.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-18_i18n.png\" alt=\"internacionalizacion-y-puesta-en-produccion-con-Angular\"></p>\n<p>Las aplicaciones web, son la expresión perfecta del mundo globalizado en el que vivimos. Preparar tu aplicación para ese mundo se conoce como <em>internationalization</em>, o recortadamente <strong>i18n</strong>. Pero globalizar no significa “café con leche para todos”. Atender a las necesidades específicas de tus usuarios es el proceso de <strong>localization</strong>.</p>\n<p>Para empezar esto afecta las traducciones de los contenidos: sean datos o textos fijos. Pero también a las adaptaciones culturales para la presentación de fechas, números, iconos… En Angular tenemos herramientas y soluciones para poner en marcha proyectos globalizados.</p>","more":"<p>Partiendo del código tal como quedó en <a href=\"../velocidad-y-seo-con-el-ssr-de-angular-universal/\">Velocidad y SEO con el SSR de Angular Universal</a>. Al finalizar tendrás una aplicación que adapta a la cultura del usuario.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Traducciones-y-contenido\"><a href=\"#1-Traducciones-y-contenido\" class=\"headerlink\" title=\"1 Traducciones y contenido\"></a>1 Traducciones y contenido</h1><p>Traducir una aplicación es el primer paso para que un usuario la acepte y comprenda mejor. Afecta a los datos que venga dese un API, y afecta a los textos fijos que acompañan a los datos.</p>\n<p>Como estamos viendo Angular en frontend, me centraré en el problema de los literales en las <em>templates</em>. Existen varias estrategias para tratarlo, aquí veremos la oficial. Se apuesta por dos principios:</p>\n<ul>\n<li><p>El programador vea el texto en la plantilla en el idioma nativo escogido para el desarrollo. Así puede hacerse una idea del tamaño y apariencia inicial y facilita mucho la legibilidad del HTML.</p>\n</li>\n<li><p>El usuario descargue la aplicación específica para su idioma, de forma que no necesite llamadas extra ni resolución dinámica para los textos y menajes fijos.</p>\n</li>\n</ul>\n<h2 id=\"1-1-xi18n\"><a href=\"#1-1-xi18n\" class=\"headerlink\" title=\"1.1 xi18n\"></a>1.1 xi18n</h2><p>Para cumplir con esos criterios se necesita extraer del código los literales que se van traducir. Para ello se usa una herramienta y un convenio.</p>\n<p>La herramienta es <code>xi18n</code> que viene con el CLI. El convenio es la directiva <code>i18n</code> que viene con Angular. El uso es muy sencillo, como puedes ver este ejemplo.</p>\n<p><code>apps\\warehouse\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">i18n</span>&gt;</span>Welcome to the Angular Builders Warehouse<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../assets/Warehouse-Building.jpg&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Warehouse building&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">i18n-alt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://angular.builders&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">target</span>=<span class=\"string\">&quot;blank&quot;</span>&gt;</span>Angular.Builders: <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>a store of resources for developers and software architects.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Para la extracción se recomienda, como siempre, crear un script en el  <code>package.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;i18n:warehouse&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng xi18n warehouse --output-path src/locale&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Atención IVY: por el momento debemos desactivar el renderizador <em>Ivy</em> para poder realizar la extracción.</p>\n</blockquote>\n<p><code>apps\\warehouse\\tsconfig.app.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;angularCompilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;enableIvy&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Aparecerá un fichero <em>xml</em> un tanto feo: <code>/src/locale/messages.xlf</code>. Aunque es procesable automáticamente, por ahora vamos a usarlo de forma manual. Para empezar crea una copia y nómbrala incluyendo el idioma destino. Por ejemplo<code> messages.es.xlf</code></p>\n<p>Sólo tendrás que duplicar cada etiqueta <code>source</code> en su equivalente traducido <code>target</code>… y traducirlo, claro. Te pongo aquí un ejemplo de como quedaría.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;5c08a98fac06c803712ab27dbb81d889af5ef5fb&quot;</span> <span class=\"attr\">datatype</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>Welcome to the Angular Builders Warehouse<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>Bienvenido al almacén de Angular Builders<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">&quot;location&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;sourcefile&quot;</span>&gt;</span>src/app/app.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">&quot;linenumber&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Necesitarás crear tantos ficheros como idiomas tengas que mantener. Si son muchos te recomiendo usar alguna herramienta. Tampoco debes olvidarte de realizar este proceso ante cada despliegue para incorporar los posibles cambios.</p>\n<p>Y hablando de despliegue..</p>\n<h2 id=\"1-2-Build-configurations\"><a href=\"#1-2-Build-configurations\" class=\"headerlink\" title=\"1.2 Build configurations\"></a>1.2 Build configurations</h2><p>Una vez que tenemos las traducciones en los ficheros de idioma, ahora hay que compilarlos para generar una versión distribuible específica para cada idioma. De nuevo esto es un proceso un tanto tedioso la primera vez, y que desde luego merece ser automatizado.</p>\n<p>Se trata de crear una nueva entrada en la rama <code>architect/build/configurations</code> de tu aplicación en el fichero <code>angular.json</code>.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;production-es&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;fileReplacements&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;replace&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;apps/warehouse/src/environments/environment.ts&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;with&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;apps/warehouse/src/environments/environment.prod.es.ts&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;outputPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dist/apps/warehouse/es/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;i18nFile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;apps/warehouse/src/locale/messages.es.xlf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;i18nFormat&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xlf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;i18nLocale&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;baseHref&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Esencialmente se le dicen las rutas y los ficheros que debe utilizar durante el proceso de construcción. Para usarla definimos un par de scripts. Uno para la construcción en sí mediante <code>ng build</code> y el otro para poder ver el resultado con un servidor de ficheros estáticos.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build:warehouse-es&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build warehouse --configuration=production-es&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start:warehouse-es&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run build:warehouse-es &amp;&amp; angular-http-server --path ./dist/apps/warehouse/es&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"2-Adaptaciones-culturales-de-tiempo-y-moneda\"><a href=\"#2-Adaptaciones-culturales-de-tiempo-y-moneda\" class=\"headerlink\" title=\"2 Adaptaciones culturales de tiempo y moneda\"></a>2 Adaptaciones culturales de tiempo y moneda</h1><p>Pero no todo van a ser textos. También hay fechas, número, imágenes… Se necesitan hacer pequeñas adaptaciones en un montón de lugares. En Angular, algunas son casi gratis.</p>\n<h2 id=\"2-1-Registro-manual-en-app-module-o-Auto-registro-en-angular-json\"><a href=\"#2-1-Registro-manual-en-app-module-o-Auto-registro-en-angular-json\" class=\"headerlink\" title=\"2.1 Registro manual en app.module o Auto registro en angular.json\"></a>2.1 Registro manual en app.module o Auto registro en angular.json</h2><p>Habrás usado <em>pipes</em> como <code>date</code> o <code>number</code> desde el día que empezaste con Angular. Si no haces nada especial seguro que te chocó ver que las fechas y los números en formato norte americano. Es el que viene de fábrica, pero e fácil cambiarlo.</p>\n<h3 id=\"Manual\"><a href=\"#Manual\" class=\"headerlink\" title=\"Manual\"></a>Manual</h3><p>Puedes asignar la cultura en tu aplicación de forma implícita registrándola al inicio del módulo raíz. La clave está en importar el fichero con las definiciones particulares de tu cultura.</p>\n<p>Todo está descargado en node-modules. Pero sólo se empaqueta y envía al navegador la cultura seleccionada.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; registerLocaleData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> localeEs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/locales/es&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">registerLocaleData</span>(localeEs);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Automatico\"><a href=\"#Automatico\" class=\"headerlink\" title=\"Automático\"></a>Automático</h3><p>Otra forma es usar el fichero <code>package.json</code> para configurarlo. Puedes establece la cultura deseada en la propiedad <code>i18nLocale</code>.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;i18nLocale&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;es&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Tiempo-moneda-y-contenido\"><a href=\"#2-2-Tiempo-moneda-y-contenido\" class=\"headerlink\" title=\"2.2 Tiempo, moneda y contenido\"></a>2.2 Tiempo, moneda y contenido</h2><p>En cualquier caso, todos los pipes deAngular empezarán a comportarse educadamente conforme a la cultura establecida.</p>\n<p><code>apps\\warehouse\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; building.date | date:&#x27;long&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>$&#123;&#123; building.value | number &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span> &#123;&#123; building.status &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>apps\\warehouse\\src\\app\\app.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> building = &#123;</span><br><span class=\"line\">  <span class=\"attr\">date</span>: <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>(),</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">2345.897</span>,</span><br><span class=\"line\">  <span class=\"attr\">status</span>: <span class=\"string\">&#x27;buy&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">building</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;buy&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">building</span>.<span class=\"property\">status</span> = environment.<span class=\"property\">buy</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">building</span>.<span class=\"property\">status</span> = environment.<span class=\"property\">sell</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Otra cosa pueden ser pequeños textos, lógica , iconos o clases css. A veces todo esto varía de un país a otro. Esas variaciones puedes almacenarla en ficheros externos o dentro del código. Pero si optas por esto ultimo entonces es mejor que uses los <em>environments</em> para almacenar configuraciones específicas.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"title class_\">Original</span> environment.<span class=\"property\">prod</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">buy</span>: <span class=\"string\">&#x27;for buy&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sell</span>: <span class=\"string\">&#x27;for sell&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"title class_\">En</span> español environment.<span class=\"property\">prod</span>.<span class=\"property\">es</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">buy</span>: <span class=\"string\">&#x27;para comprar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sell</span>: <span class=\"string\">&#x27;para vender&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ahora ya tienes una aplicación que se puede desplegar adaptada a las preferencias culturales de tus usuarios. Continúa tu formación avanzada para crear aplicaciones más allá del framework con los <a href=\"../elementos-Angular-para-los-Web-Components/\">Elementos Angular para los Web Components</a> y verás como aprendes a programar con Angular 8.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Formularios, tablas y modelos de datos en Angular","date":"2020-04-15T13:17:37.000Z","thumbnail":"/css/images/angular-3_data.png","_content":"\n![formularios-tablas-y-modelos-de-datos-en-angular](/images/tutorial-angular-3_data.png)\n\nLas **aplicaciones Angular 9 son excelentes para el tratamiento de datos** en el navegador. Su razón de ser fue la recogida de información mediante formularios y la presentación de páginas dinámicas de forma sencilla.\n\nVamos a ver cómo la librería `@angular/forms` enlaza **las vistas, los controladores y los modelos**; y cómo se hace la presentación de datos en **listas y tablas**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/), al finalizar tendrás una aplicación que recoge y presenta datos.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Binding\n\n## 1.0 Base\n\n**Los formularios son el punto de entrada** de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En _Angular_ han prestado una especial atención a ellos facilitando su desarrollo, **desde pantallas simples hasta complejos procesos**.\n\nVamos con simple ejemplo para recopilar información de contactos personales. Creamos una nueva ruta funcional para la gestión de contactos. Requiere ruta, enlace, módulo y componente.\n\n```bash\nng g m contacts --route contacts --module app-routing.module\n```\n\nComo ya sabemos, además de la creación del módulo y el componente, esto altera los ficheros de enrutado. Así tenemos lo siguiente en `app-routing` y en `contacts-routing`:\n\n```typescript\n  // app-routing\n  {\n    path: 'contacts',\n    loadChildren: () => import('./contacts/contacts.module').then(m => m.ContactsModule)\n  },\n  // contacts-routing\n  {\n    path: '',\n    component: ContactsComponent\n  }\n```\nHay que añadir una entrada en el `SideComponent` y ya tenemos listo el armazón para continuar.\n\n```html\n<li><a routerLink=\"contacts\">Forms</a></li>\n```\n\n## 1.1 Directivas\n\nAntes de pedir información, vamos a prepara el terreno. Necesitamos algunos textos para instruir al usuario y, sobre todo, un lugar en dónde recoger lo que nos escriba. Para ello atacaremos a la clase controladora del nuevo componente.\n\n> Para empezar agregamos algunas propiedades. En `contacts.component.ts`:\n\n```typescript\nheader = 'Contacts';\ndescription = 'Manage your contact list';\nnumberOfContacts = 0;\ncounterStyleColor = 'green';\ncounterClass = 'warning';\nformHidden = false;\n```\n\n### 1.1.1 Enlace del modelo hacia la vista\n\nEstas propiedades públicas son visibles desde la vista HTML. Así, en `contacts.component.html` mostramos cabeceras con estilo como este.\n\n```html\n<h3>\n  {{ header }}: {{ description | uppercase }}\n</h3>\n<p [style.color]=\"counterStyleColor\">You have <mark\n        class=\"{{ counterClass }}\">{{ numberOfContacts }}</mark>\n  contacts right now.</p>\n```\n\nEste código HTML es básicamente estándar, pero está reforzado con algunos símbolos que pueden resultar extraños. Son **las directivas de Angular**. Se trata de atributos fuente que una vez compilados generan funcionalidad extra.\n\nLa manera más directa de hacerlo es representar en la vista algún dato del modelo. Y eso se hace con las expresiones de interpolación entre llaves. `{{ expression }}` Suelen usarse para aportar contenido a elementos html, aunque también a cualquier atributo.\n\nA la hora de pintar datos, a veces querremos transformarlos antes. Para eso emplearemos **los pipes de Angular**. Son funciones que adjuntaremos a las expresiones usando el carácter especial `|` llamado _pipe_. La entrada de la función es lo que hay a la izquierda de la tubería. La salida de la función es lo que se muestra.\n\nEn Angular disponemos de suficientes pipes estándar para cubrir los casos básicos de presentación de textos, fechas, monedas y demás.\n\nTambién tenemos formas de asignar contenido dinámico a los atributos. Basta con envolvernos entre corchetes y su valor se calcula como una expresión. Como norma general sería algo así: `[atribute]=\"expresion\"`\n\n### 1.1.2 Enlace de la vista hacia el modelo\n\nToca ahora darle la opción al usuario de actuar sobre los datos desde la vista. Por ejemplo en `contacts.component.html` hemos creado un par de botones cuya intención es mostrar u ocultar un formulario sobre el que trabajaremos más adelante.\n\n```html\n<input\n  value=\"Show Form\"\n  class=\"primary\"\n  type=\"button\"\n  (click)=\"formHidden=false\"\n/>\n<input\n  value=\"Hide Form\"\n  class=\"inverse\"\n  type=\"button\"\n  (click)=\"formHidden=true\"\n/>\n<form [ngClass]=\"{'hidden':formHidden}\">\n  <fieldset>\n    <legend>Contact Form</legend>\n  </fieldset>\n</form>\n```\n\nPara ello usaremos los eventos estándar del HTML, como el _click_ de los _input_. Pero, de nuevo, usaremos símbolos propios de Angular como los paréntesis `(eventName)`. En esta ocasión lo que asignaremos será un instrucción, que será ejecutada cuando el evento se dispare.\n\nPara ver el efecto completo, echamos mano de otra directiva propia de Angular: la `ngClass`. Esta nos sirve para aplicar estilos CSS conducidos por los datos. Se aplican o no en función de que se cumplan ciertas condiciones dinámicamente. En este caso el estilo _hidden_.\n\n# 2. Doble Binding\n\nHemos visto lo fácil que es mostrar datos en una pantalla. Y tampoco resulta complejo responder a eventos del usuario. Digamos que tenemos mecanismos para realizar el enlace, _binding_ en el argot de Angular, entre la vista y el modelo.\n\nLa idea es juntar ambos mecanismos en algo que permita enlazar vista y modelo en ambos sentidos. De esta forma podremos mantener sincronizados lo que el usuario ve y lo que realmente se está procesando.\n\n## 2.1 NgModel\n\nLa directiva _ngModel_ viene en un módulo del framework llamado `FormsModule`. Hay que importarlo para poder usar su contenido, tal como hemos hecho en `contacts.module.ts`\n\n```typescript\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ContactsRoutingModule } from './contacts-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ContactsRoutingModule,\n    FormsModule\n  ]\n})\nexport class ContactsModule { }\n```\n\nA partir de ese momento podemos invocar sus directivas, yb vamos a empezar por la más utilizada y famosa: `ngModel`.\n\n\n### Banana in a box [()]\n\nPero ojo, esta potente directiva no se jea utilizar así como así. Hay que enjaularla convenientemente entre una doble barrera de corchetes y paréntesis `[()]`. Para recordarlo se puso de moda la frase _Banana in a box_ que hace referencia al _paréntesis dentro del corchete_\n\n```html\n<input [(ngModel)]=\"model.property\"/>\n```\n\nUsa la comunicación en ambos sentidos\n\n- **(banana)** : de la vista al modelo\n- **[box]** : del modelo a la vista\n\n#### Modelo\n\n> La directiva se asocia con una propiedad del controlador...\n> o mejor aún, con una **propiedad del modelo** del controlador\n\nPor ejemplo podemos crear un objeto literal para representar a un contacto y trabajar sobre él\n\n```typescript\npublic contact = { name: '' };\n```\n\n#### Directiva\n\nY enlazarlo con la vista para que siempre estén sincronizados.\n\n```html\n<section>\n  <label for=\"name\">Name</label>\n  <input\n    name=\"name\"\n    type=\"text\"\n    [(ngModel)]=\"contact.name\"\n    placeholder=\"Contact name\"\n  />\n</section>\n```\n\n#### Espía\n\nMientras desarrollas, es frecuente que quieras visualizar el valor de cualquier propiedad en tiempo de ejecución. Algo así como un `console.log()` en la pantalla.\n\n```html\n<pre>{{ contact | json }}</pre>\n```\n\nEl anterior elemento se un espía perfecto de la actividad del usuario sobre el formulario. Una cosa más, acuérdate de quitarlo antes de enviar a producción.\n\n## 2.2 Form\n\nLa técnica básica de enlazar _inputs_ con propiedades puedes extenderla cuanto quieras. Pero pronto echarás en falta los _check boxes, radio buttons_ y demás. Hay más usos de las directivas en los formularios.\n\nVamos a ver cómo usarlos para actuar sobre el siguiente modelo:\n\n```typescript\npublic contact = { name: '', isVIP: false, gender: '' };\n```\n\n### 2.2.1 CheckBox\n\nQuizá nos venga bien un _checkbox_ para saber si es o no un VIP.\n\n```html\n<section>\n  <label for=\"isVIP\">Is V.I.P.</label>\n  <input name=\"isVIP\" type=\"checkbox\" [(ngModel)]=\"contact.isVIP\" />\n</section>\n```\n\n### 2.2.2 Radio Buttons\n\nY un par de _radio buttons_ para el género.\n\n```html\n<section>\n  <label for=\"gender\">Gender</label>\n  <input name=\"gender\" value=\"m\" type=\"radio\" [(ngModel)]=\"contact.gender\" />\n  <i>Male</i>\n  <input name=\"gender\" value=\"f\" type=\"radio\" [(ngModel)]=\"contact.gender\" />\n  <i>Female</i>\n</section>\n```\n\n# 3. Estructuras\n\nMantén siempre en mete que el HTML que escribes es código fuente. No es, aún, el HTML que renderizará el navegador. Es casi casi un lenguaje de programación per se. Con sus expresiones, instrucciones y estructuras.\n\n## 3.1 \\*ngFor\n\nVamos a empezar por las **estructuras repetitivas** presentando la Directiva estructural `*ngFor`.\n\nAvanzamos con el modelo al que agregamos posibles estados laborales de nuestros contactos:\n\n```typescript\npublic workStatuses = [\n  { id: 0, description: 'unknow' },\n  { id: 1, description: 'student' },\n  { id: 2, description: 'unemployed' },\n  { id: 3, description: 'employed' }\n];\npublic contact = { name: '', isVIP: false, gender: '', workStatus: 0 };\n```\n\n> \\*ngFor\n\n```html\n<section>\n  <label for=\"workStatus\">Work Status</label>\n  <select name=\"workStatus\" [(ngModel)]=\"contact.workStatus\">\n    <option *ngFor=\"let status of workStatuses\" [value]=\"status.id\">\n      <span>{{ status.description }}</span>\n    </option>\n  </select>\n</section>\n```\n\nEs un bucle de toda la vida vamos. Pero en em medio del HTML. Lo que hace es dar vueltas sobre un array y agregar un nodo HTML para cada elemento del array.\n\n> let **iterador** of **iterable**\n\n## 3.2 \\*ngIf\n\nY ahora le toca a las **estructuras condicionales** y para ello tenemos la directiva estructural `*ngIf`\n\nVamos un paso más en el modelo y supongamos que queremos preguntar por la empresa actual si nuestro contacto está trabajando, y en caso contrario preguntarle por sus estudios.\n\n```typescript\npublic contact = {\n  name: '',\n  isVIP: false,\n  gender: '',\n  workStatus: '0',\n  company: '',\n  education: ''\n};\n```\n\n---\n\n> \\*ngIf\n\n```html\n<section *ngIf=\"contact.workStatus=='3'; else education\">\n  <label for=\"company\">Company Name</label>\n  <input name=\"company\" type=\"text\" [(ngModel)]=\"contact.company\" />\n</section>\n<ng-template #education>\n  <section>\n    <label for=\"education\">Education</label>\n    <input name=\"education\"\n            type=\"text\"\n            [(ngModel)]=\"contact.education\"\n            placeholder=\"Education\" />\n  </section>\n</ng-template>\n```\n\nVemos incrustado en HTML el típico _if else_ de la programación estructurada. Quizá llame la atención la manera de tratar el _else_. Por ahora digamos que aquellos nodos del árbol que no tienen garantizada su existencia deben recogerse dentro de un elemento propio del Angular, las `ng-template`.\n\nOtra directiva símbolo que merece la pena mencionar es el `#`. Actúa como un identificador que una vez aplicado a un elemento se puede usar para acceder a el desde cualquier parte del componente.\n\nEn resumen:\n\n> if **condition** else **template**\n\n> > también hay _\\*ngSwitch_\n\n---\n\n# 4. Modelo y controlador\n\nEste punto nu es de Angular propiamente, pero sí del lenguaje que han escogido para que desarrollemos nuestras apps: el **TypeScript**.\n\nEs como un cruce entre _JavaScript_ y _Java_ o _C#_. Digamos que le aporta tipos estáticos y mejoras en cuanto expresividad si queremos usar clases o una programación más orientada a objetos. Es un lenguaje de ayuda al programador. Realmente puedes usar sintaxis pura de JavaScript, porque el typeScript es JavaScript con anotaciones de opcionales de tipos.\n\nAngular viene ya con las herramientas y configuraciones necesarias para _transpilar_ el TypeScript a JavaScript.\n\n## 4.1 Interfaces y modelos\n\n> Mejor interface que clase\n\nSe aconseja por una buena razón. Las interfaces en JavaScript no existen. Así, mientras desarrollamos nos ayuda con _intellisense_ y noes protegen de asignaciones indebidas. Pero, en ejecución no pesan porque no tienen contrapartida.\n\n```typescript\nexport interface Option {\n  id: number;\n  description: string;\n}\n\nexport interface Contact {\n  name: string;\n  isVIP: boolean;\n  gender: string;\n  workStatus: number | string;\n  company: string;\n  education: string;\n}\n```\n\n> tipos compuestos `number | string`\n\nEste es un lenguaje que realmente sólo aplica mientras desarrollas. Así que permite hacer diabluras con los tipos.\n\nSe usan para tipificar las propiedades\n\n```typescript\npublic workStatuses: Option[] = [\n    { id: 0, description: 'unknow' },\n    { id: 1, description: 'student' },\n    { id: 2, description: 'unemployed' },\n    { id: 3, description: 'employed' }\n  ];\npublic contact: Contact = {\n    name: '',\n    isVIP: false,\n    gender: '',\n    workStatus: 0,\n    company: '',\n    education: ''\n  };\npublic contacts: Contact[] = [];\n```\n\n## 4.2 ViewModel en el controlador\n\nEl controlador del componente es una clase. Por tanto tiene no solo propiedades, sino también métodos.\n\n```typescript\nsaveContact() {\n  this.contacts.push({ ...this.contact });\n  this.updateCounter();\n}\n\nprivate updateCounter() {\n  this.numberOfContacts = this.contacts.length;\n  this.counterClass = this.numberOfContacts === 0 ? 'warning' : 'success';\n}\n```\n\nLos métodos públicos pueden, y deben, ser invocados desde las vistas. De forma que las expresiones asignadas a los eventos sean simples llamadas a métodos para que hagan el trabajo sucio.\n\n```html\n<input value=\"Save\" type=\"submit\" (click)=\"saveContact()\" />\n```\n\n### OnInit\n\nYa hemos visto que en TypeScript, las clases puede implementar interfaces. Angular nos facilita unos cuantos para usar como _hooks_ en determinados momentos dl ciclo de vida de una componente.\n\nEn particular hay uno que ya vienen pre implementado por el generador del CLI. Se llama `OnInit` y obliga a disponer de un método público llamado `ngOnInit()`. Lo que programes dentro será ejecutado durante la inicialización del componente.\n\nEs una práctica recomendable usar ese método en lugar del constructor para desplegar nuestra lógica de inicio. La razón es que el constructor se ejecuta antes de la existencia completa de la vista y eso puede generar inconsistencias.\n\n```typescript\npublic workStatuses: Option[];\npublic contact: Contact;\npublic contacts: Contact[];\nconstructor() {}\npublic ngOnInit() {\n  this.workStatuses = [\n    { id: 0, description: 'unknow' },\n    { id: 1, description: 'student' },\n    { id: 2, description: 'unemployed' },\n    { id: 3, description: 'employed' }\n  ];\n  this.contact = {\n    name: '',\n    isVIP: false,\n    gender: '',\n    workStatus: 0,\n    company: '',\n    education: ''\n  };\n  this.contacts = [];\n}\n```\n\n### Repasamos\n\nAgregamos una funcionalidad que nos obliga a repasar todo lo aprendido. Un listado en el que mostrar los contactos que se recogen del formulario.\n\n```html\n<ul *ngIf=\"contacts.length>0; else empty\">\n  <li *ngFor=\"let contact of contacts\">\n    <span>{{ contact.name }}</span>\n    <input value=\"Delete\" type=\"button\" (click)=\"deleteContact(contact)\" />\n  </li>\n</ul>\n<ng-template #empty> <i>No contacts yet</i> </ng-template>\n```\n\n```typescript\ndeleteContact(contact: Contact) {\n  this.contacts = this.contacts.filter(c => c.name !== contact.name);\n  this.updateCounter();\n}\n```\n\nMira el código completo de **la clase** `ContactsComponent`en el fichero `contacts.component.ts` para tener una visión completa del componente. Como ves, **las propiedades** `header, numberOfContacts, formHidden, contacts ...` se corresponden con las utilizadas en las directivas de enlace en la vista. Mientras que **los métodos** `saveContact(), deleteContact()` son invocados desde eventos de elementos del _html_.\n\nJuntos, **la vista y su clase controladora**, resuelven un problema de interacción con el usuario **creando un componente**. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.\n\n> Y esto es sólo el comienzo. La idea de componente será fundamental en la web del mañana para la creación de páginas mediante `web components`. Pero eso ya se verá más adelante...\n\nAhora tienes una aplicación en _Angular 9_ que recoge y muestra datos. Sigue esta serie para añadirle [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/) mientras aprendes a programar con Angular8. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-3-Formularios-tablas-y-modelos-de-datos-en-Angular.md","raw":"---\ntitle: Formularios, tablas y modelos de datos en Angular\npermalink: formularios-tablas-y-modelos-de-datos-en-angular\ndate: 2020-04-15 15:17:37\ntags:\n  - Angular\n  - Forms\n  - Tutorial\n  - Introducción\n  - Angular9\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-3_data.png\n---\n\n![formularios-tablas-y-modelos-de-datos-en-angular](/images/tutorial-angular-3_data.png)\n\nLas **aplicaciones Angular 9 son excelentes para el tratamiento de datos** en el navegador. Su razón de ser fue la recogida de información mediante formularios y la presentación de páginas dinámicas de forma sencilla.\n\nVamos a ver cómo la librería `@angular/forms` enlaza **las vistas, los controladores y los modelos**; y cómo se hace la presentación de datos en **listas y tablas**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/), al finalizar tendrás una aplicación que recoge y presenta datos.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Binding\n\n## 1.0 Base\n\n**Los formularios son el punto de entrada** de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En _Angular_ han prestado una especial atención a ellos facilitando su desarrollo, **desde pantallas simples hasta complejos procesos**.\n\nVamos con simple ejemplo para recopilar información de contactos personales. Creamos una nueva ruta funcional para la gestión de contactos. Requiere ruta, enlace, módulo y componente.\n\n```bash\nng g m contacts --route contacts --module app-routing.module\n```\n\nComo ya sabemos, además de la creación del módulo y el componente, esto altera los ficheros de enrutado. Así tenemos lo siguiente en `app-routing` y en `contacts-routing`:\n\n```typescript\n  // app-routing\n  {\n    path: 'contacts',\n    loadChildren: () => import('./contacts/contacts.module').then(m => m.ContactsModule)\n  },\n  // contacts-routing\n  {\n    path: '',\n    component: ContactsComponent\n  }\n```\nHay que añadir una entrada en el `SideComponent` y ya tenemos listo el armazón para continuar.\n\n```html\n<li><a routerLink=\"contacts\">Forms</a></li>\n```\n\n## 1.1 Directivas\n\nAntes de pedir información, vamos a prepara el terreno. Necesitamos algunos textos para instruir al usuario y, sobre todo, un lugar en dónde recoger lo que nos escriba. Para ello atacaremos a la clase controladora del nuevo componente.\n\n> Para empezar agregamos algunas propiedades. En `contacts.component.ts`:\n\n```typescript\nheader = 'Contacts';\ndescription = 'Manage your contact list';\nnumberOfContacts = 0;\ncounterStyleColor = 'green';\ncounterClass = 'warning';\nformHidden = false;\n```\n\n### 1.1.1 Enlace del modelo hacia la vista\n\nEstas propiedades públicas son visibles desde la vista HTML. Así, en `contacts.component.html` mostramos cabeceras con estilo como este.\n\n```html\n<h3>\n  {{ header }}: {{ description | uppercase }}\n</h3>\n<p [style.color]=\"counterStyleColor\">You have <mark\n        class=\"{{ counterClass }}\">{{ numberOfContacts }}</mark>\n  contacts right now.</p>\n```\n\nEste código HTML es básicamente estándar, pero está reforzado con algunos símbolos que pueden resultar extraños. Son **las directivas de Angular**. Se trata de atributos fuente que una vez compilados generan funcionalidad extra.\n\nLa manera más directa de hacerlo es representar en la vista algún dato del modelo. Y eso se hace con las expresiones de interpolación entre llaves. `{{ expression }}` Suelen usarse para aportar contenido a elementos html, aunque también a cualquier atributo.\n\nA la hora de pintar datos, a veces querremos transformarlos antes. Para eso emplearemos **los pipes de Angular**. Son funciones que adjuntaremos a las expresiones usando el carácter especial `|` llamado _pipe_. La entrada de la función es lo que hay a la izquierda de la tubería. La salida de la función es lo que se muestra.\n\nEn Angular disponemos de suficientes pipes estándar para cubrir los casos básicos de presentación de textos, fechas, monedas y demás.\n\nTambién tenemos formas de asignar contenido dinámico a los atributos. Basta con envolvernos entre corchetes y su valor se calcula como una expresión. Como norma general sería algo así: `[atribute]=\"expresion\"`\n\n### 1.1.2 Enlace de la vista hacia el modelo\n\nToca ahora darle la opción al usuario de actuar sobre los datos desde la vista. Por ejemplo en `contacts.component.html` hemos creado un par de botones cuya intención es mostrar u ocultar un formulario sobre el que trabajaremos más adelante.\n\n```html\n<input\n  value=\"Show Form\"\n  class=\"primary\"\n  type=\"button\"\n  (click)=\"formHidden=false\"\n/>\n<input\n  value=\"Hide Form\"\n  class=\"inverse\"\n  type=\"button\"\n  (click)=\"formHidden=true\"\n/>\n<form [ngClass]=\"{'hidden':formHidden}\">\n  <fieldset>\n    <legend>Contact Form</legend>\n  </fieldset>\n</form>\n```\n\nPara ello usaremos los eventos estándar del HTML, como el _click_ de los _input_. Pero, de nuevo, usaremos símbolos propios de Angular como los paréntesis `(eventName)`. En esta ocasión lo que asignaremos será un instrucción, que será ejecutada cuando el evento se dispare.\n\nPara ver el efecto completo, echamos mano de otra directiva propia de Angular: la `ngClass`. Esta nos sirve para aplicar estilos CSS conducidos por los datos. Se aplican o no en función de que se cumplan ciertas condiciones dinámicamente. En este caso el estilo _hidden_.\n\n# 2. Doble Binding\n\nHemos visto lo fácil que es mostrar datos en una pantalla. Y tampoco resulta complejo responder a eventos del usuario. Digamos que tenemos mecanismos para realizar el enlace, _binding_ en el argot de Angular, entre la vista y el modelo.\n\nLa idea es juntar ambos mecanismos en algo que permita enlazar vista y modelo en ambos sentidos. De esta forma podremos mantener sincronizados lo que el usuario ve y lo que realmente se está procesando.\n\n## 2.1 NgModel\n\nLa directiva _ngModel_ viene en un módulo del framework llamado `FormsModule`. Hay que importarlo para poder usar su contenido, tal como hemos hecho en `contacts.module.ts`\n\n```typescript\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ContactsRoutingModule } from './contacts-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ContactsRoutingModule,\n    FormsModule\n  ]\n})\nexport class ContactsModule { }\n```\n\nA partir de ese momento podemos invocar sus directivas, yb vamos a empezar por la más utilizada y famosa: `ngModel`.\n\n\n### Banana in a box [()]\n\nPero ojo, esta potente directiva no se jea utilizar así como así. Hay que enjaularla convenientemente entre una doble barrera de corchetes y paréntesis `[()]`. Para recordarlo se puso de moda la frase _Banana in a box_ que hace referencia al _paréntesis dentro del corchete_\n\n```html\n<input [(ngModel)]=\"model.property\"/>\n```\n\nUsa la comunicación en ambos sentidos\n\n- **(banana)** : de la vista al modelo\n- **[box]** : del modelo a la vista\n\n#### Modelo\n\n> La directiva se asocia con una propiedad del controlador...\n> o mejor aún, con una **propiedad del modelo** del controlador\n\nPor ejemplo podemos crear un objeto literal para representar a un contacto y trabajar sobre él\n\n```typescript\npublic contact = { name: '' };\n```\n\n#### Directiva\n\nY enlazarlo con la vista para que siempre estén sincronizados.\n\n```html\n<section>\n  <label for=\"name\">Name</label>\n  <input\n    name=\"name\"\n    type=\"text\"\n    [(ngModel)]=\"contact.name\"\n    placeholder=\"Contact name\"\n  />\n</section>\n```\n\n#### Espía\n\nMientras desarrollas, es frecuente que quieras visualizar el valor de cualquier propiedad en tiempo de ejecución. Algo así como un `console.log()` en la pantalla.\n\n```html\n<pre>{{ contact | json }}</pre>\n```\n\nEl anterior elemento se un espía perfecto de la actividad del usuario sobre el formulario. Una cosa más, acuérdate de quitarlo antes de enviar a producción.\n\n## 2.2 Form\n\nLa técnica básica de enlazar _inputs_ con propiedades puedes extenderla cuanto quieras. Pero pronto echarás en falta los _check boxes, radio buttons_ y demás. Hay más usos de las directivas en los formularios.\n\nVamos a ver cómo usarlos para actuar sobre el siguiente modelo:\n\n```typescript\npublic contact = { name: '', isVIP: false, gender: '' };\n```\n\n### 2.2.1 CheckBox\n\nQuizá nos venga bien un _checkbox_ para saber si es o no un VIP.\n\n```html\n<section>\n  <label for=\"isVIP\">Is V.I.P.</label>\n  <input name=\"isVIP\" type=\"checkbox\" [(ngModel)]=\"contact.isVIP\" />\n</section>\n```\n\n### 2.2.2 Radio Buttons\n\nY un par de _radio buttons_ para el género.\n\n```html\n<section>\n  <label for=\"gender\">Gender</label>\n  <input name=\"gender\" value=\"m\" type=\"radio\" [(ngModel)]=\"contact.gender\" />\n  <i>Male</i>\n  <input name=\"gender\" value=\"f\" type=\"radio\" [(ngModel)]=\"contact.gender\" />\n  <i>Female</i>\n</section>\n```\n\n# 3. Estructuras\n\nMantén siempre en mete que el HTML que escribes es código fuente. No es, aún, el HTML que renderizará el navegador. Es casi casi un lenguaje de programación per se. Con sus expresiones, instrucciones y estructuras.\n\n## 3.1 \\*ngFor\n\nVamos a empezar por las **estructuras repetitivas** presentando la Directiva estructural `*ngFor`.\n\nAvanzamos con el modelo al que agregamos posibles estados laborales de nuestros contactos:\n\n```typescript\npublic workStatuses = [\n  { id: 0, description: 'unknow' },\n  { id: 1, description: 'student' },\n  { id: 2, description: 'unemployed' },\n  { id: 3, description: 'employed' }\n];\npublic contact = { name: '', isVIP: false, gender: '', workStatus: 0 };\n```\n\n> \\*ngFor\n\n```html\n<section>\n  <label for=\"workStatus\">Work Status</label>\n  <select name=\"workStatus\" [(ngModel)]=\"contact.workStatus\">\n    <option *ngFor=\"let status of workStatuses\" [value]=\"status.id\">\n      <span>{{ status.description }}</span>\n    </option>\n  </select>\n</section>\n```\n\nEs un bucle de toda la vida vamos. Pero en em medio del HTML. Lo que hace es dar vueltas sobre un array y agregar un nodo HTML para cada elemento del array.\n\n> let **iterador** of **iterable**\n\n## 3.2 \\*ngIf\n\nY ahora le toca a las **estructuras condicionales** y para ello tenemos la directiva estructural `*ngIf`\n\nVamos un paso más en el modelo y supongamos que queremos preguntar por la empresa actual si nuestro contacto está trabajando, y en caso contrario preguntarle por sus estudios.\n\n```typescript\npublic contact = {\n  name: '',\n  isVIP: false,\n  gender: '',\n  workStatus: '0',\n  company: '',\n  education: ''\n};\n```\n\n---\n\n> \\*ngIf\n\n```html\n<section *ngIf=\"contact.workStatus=='3'; else education\">\n  <label for=\"company\">Company Name</label>\n  <input name=\"company\" type=\"text\" [(ngModel)]=\"contact.company\" />\n</section>\n<ng-template #education>\n  <section>\n    <label for=\"education\">Education</label>\n    <input name=\"education\"\n            type=\"text\"\n            [(ngModel)]=\"contact.education\"\n            placeholder=\"Education\" />\n  </section>\n</ng-template>\n```\n\nVemos incrustado en HTML el típico _if else_ de la programación estructurada. Quizá llame la atención la manera de tratar el _else_. Por ahora digamos que aquellos nodos del árbol que no tienen garantizada su existencia deben recogerse dentro de un elemento propio del Angular, las `ng-template`.\n\nOtra directiva símbolo que merece la pena mencionar es el `#`. Actúa como un identificador que una vez aplicado a un elemento se puede usar para acceder a el desde cualquier parte del componente.\n\nEn resumen:\n\n> if **condition** else **template**\n\n> > también hay _\\*ngSwitch_\n\n---\n\n# 4. Modelo y controlador\n\nEste punto nu es de Angular propiamente, pero sí del lenguaje que han escogido para que desarrollemos nuestras apps: el **TypeScript**.\n\nEs como un cruce entre _JavaScript_ y _Java_ o _C#_. Digamos que le aporta tipos estáticos y mejoras en cuanto expresividad si queremos usar clases o una programación más orientada a objetos. Es un lenguaje de ayuda al programador. Realmente puedes usar sintaxis pura de JavaScript, porque el typeScript es JavaScript con anotaciones de opcionales de tipos.\n\nAngular viene ya con las herramientas y configuraciones necesarias para _transpilar_ el TypeScript a JavaScript.\n\n## 4.1 Interfaces y modelos\n\n> Mejor interface que clase\n\nSe aconseja por una buena razón. Las interfaces en JavaScript no existen. Así, mientras desarrollamos nos ayuda con _intellisense_ y noes protegen de asignaciones indebidas. Pero, en ejecución no pesan porque no tienen contrapartida.\n\n```typescript\nexport interface Option {\n  id: number;\n  description: string;\n}\n\nexport interface Contact {\n  name: string;\n  isVIP: boolean;\n  gender: string;\n  workStatus: number | string;\n  company: string;\n  education: string;\n}\n```\n\n> tipos compuestos `number | string`\n\nEste es un lenguaje que realmente sólo aplica mientras desarrollas. Así que permite hacer diabluras con los tipos.\n\nSe usan para tipificar las propiedades\n\n```typescript\npublic workStatuses: Option[] = [\n    { id: 0, description: 'unknow' },\n    { id: 1, description: 'student' },\n    { id: 2, description: 'unemployed' },\n    { id: 3, description: 'employed' }\n  ];\npublic contact: Contact = {\n    name: '',\n    isVIP: false,\n    gender: '',\n    workStatus: 0,\n    company: '',\n    education: ''\n  };\npublic contacts: Contact[] = [];\n```\n\n## 4.2 ViewModel en el controlador\n\nEl controlador del componente es una clase. Por tanto tiene no solo propiedades, sino también métodos.\n\n```typescript\nsaveContact() {\n  this.contacts.push({ ...this.contact });\n  this.updateCounter();\n}\n\nprivate updateCounter() {\n  this.numberOfContacts = this.contacts.length;\n  this.counterClass = this.numberOfContacts === 0 ? 'warning' : 'success';\n}\n```\n\nLos métodos públicos pueden, y deben, ser invocados desde las vistas. De forma que las expresiones asignadas a los eventos sean simples llamadas a métodos para que hagan el trabajo sucio.\n\n```html\n<input value=\"Save\" type=\"submit\" (click)=\"saveContact()\" />\n```\n\n### OnInit\n\nYa hemos visto que en TypeScript, las clases puede implementar interfaces. Angular nos facilita unos cuantos para usar como _hooks_ en determinados momentos dl ciclo de vida de una componente.\n\nEn particular hay uno que ya vienen pre implementado por el generador del CLI. Se llama `OnInit` y obliga a disponer de un método público llamado `ngOnInit()`. Lo que programes dentro será ejecutado durante la inicialización del componente.\n\nEs una práctica recomendable usar ese método en lugar del constructor para desplegar nuestra lógica de inicio. La razón es que el constructor se ejecuta antes de la existencia completa de la vista y eso puede generar inconsistencias.\n\n```typescript\npublic workStatuses: Option[];\npublic contact: Contact;\npublic contacts: Contact[];\nconstructor() {}\npublic ngOnInit() {\n  this.workStatuses = [\n    { id: 0, description: 'unknow' },\n    { id: 1, description: 'student' },\n    { id: 2, description: 'unemployed' },\n    { id: 3, description: 'employed' }\n  ];\n  this.contact = {\n    name: '',\n    isVIP: false,\n    gender: '',\n    workStatus: 0,\n    company: '',\n    education: ''\n  };\n  this.contacts = [];\n}\n```\n\n### Repasamos\n\nAgregamos una funcionalidad que nos obliga a repasar todo lo aprendido. Un listado en el que mostrar los contactos que se recogen del formulario.\n\n```html\n<ul *ngIf=\"contacts.length>0; else empty\">\n  <li *ngFor=\"let contact of contacts\">\n    <span>{{ contact.name }}</span>\n    <input value=\"Delete\" type=\"button\" (click)=\"deleteContact(contact)\" />\n  </li>\n</ul>\n<ng-template #empty> <i>No contacts yet</i> </ng-template>\n```\n\n```typescript\ndeleteContact(contact: Contact) {\n  this.contacts = this.contacts.filter(c => c.name !== contact.name);\n  this.updateCounter();\n}\n```\n\nMira el código completo de **la clase** `ContactsComponent`en el fichero `contacts.component.ts` para tener una visión completa del componente. Como ves, **las propiedades** `header, numberOfContacts, formHidden, contacts ...` se corresponden con las utilizadas en las directivas de enlace en la vista. Mientras que **los métodos** `saveContact(), deleteContact()` son invocados desde eventos de elementos del _html_.\n\nJuntos, **la vista y su clase controladora**, resuelven un problema de interacción con el usuario **creando un componente**. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.\n\n> Y esto es sólo el comienzo. La idea de componente será fundamental en la web del mañana para la creación de páginas mediante `web components`. Pero eso ya se verá más adelante...\n\nAhora tienes una aplicación en _Angular 9_ que recoge y muestra datos. Sigue esta serie para añadirle [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/) mientras aprendes a programar con Angular8. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-3-Formularios-tablas-y-modelos-de-datos-en-Angular","published":1,"updated":"2023-07-02T10:25:58.477Z","__permalink":"formularios-tablas-y-modelos-de-datos-en-angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2ff0017e096c4gx9obe","content":"<p><img src=\"/images/tutorial-angular-3_data.png\" alt=\"formularios-tablas-y-modelos-de-datos-en-angular\"></p>\n<p>Las <strong>aplicaciones Angular 9 son excelentes para el tratamiento de datos</strong> en el navegador. Su razón de ser fue la recogida de información mediante formularios y la presentación de páginas dinámicas de forma sencilla.</p>\n<p>Vamos a ver cómo la librería <code>@angular/forms</code> enlaza <strong>las vistas, los controladores y los modelos</strong>; y cómo se hace la presentación de datos en <strong>listas y tablas</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a>, al finalizar tendrás una aplicación que recoge y presenta datos.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Binding\"><a href=\"#1-Binding\" class=\"headerlink\" title=\"1. Binding\"></a>1. Binding</h1><h2 id=\"1-0-Base\"><a href=\"#1-0-Base\" class=\"headerlink\" title=\"1.0 Base\"></a>1.0 Base</h2><p><strong>Los formularios son el punto de entrada</strong> de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En <em>Angular</em> han prestado una especial atención a ellos facilitando su desarrollo, <strong>desde pantallas simples hasta complejos procesos</strong>.</p>\n<p>Vamos con simple ejemplo para recopilar información de contactos personales. Creamos una nueva ruta funcional para la gestión de contactos. Requiere ruta, enlace, módulo y componente.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m contacts --route contacts --module app-routing.module</span><br></pre></td></tr></table></figure>\n\n<p>Como ya sabemos, además de la creación del módulo y el componente, esto altera los ficheros de enrutado. Así tenemos lo siguiente en <code>app-routing</code> y en <code>contacts-routing</code>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app-routing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;contacts&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./contacts/contacts.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">ContactsModule</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// contacts-routing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"title class_\">ContactsComponent</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Hay que añadir una entrada en el <code>SideComponent</code> y ya tenemos listo el armazón para continuar.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;contacts&quot;</span>&gt;</span>Forms<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-1-Directivas\"><a href=\"#1-1-Directivas\" class=\"headerlink\" title=\"1.1 Directivas\"></a>1.1 Directivas</h2><p>Antes de pedir información, vamos a prepara el terreno. Necesitamos algunos textos para instruir al usuario y, sobre todo, un lugar en dónde recoger lo que nos escriba. Para ello atacaremos a la clase controladora del nuevo componente.</p>\n<blockquote>\n<p>Para empezar agregamos algunas propiedades. En <code>contacts.component.ts</code>:</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header = <span class=\"string\">&#x27;Contacts&#x27;</span>;</span><br><span class=\"line\">description = <span class=\"string\">&#x27;Manage your contact list&#x27;</span>;</span><br><span class=\"line\">numberOfContacts = <span class=\"number\">0</span>;</span><br><span class=\"line\">counterStyleColor = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">counterClass = <span class=\"string\">&#x27;warning&#x27;</span>;</span><br><span class=\"line\">formHidden = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-1-Enlace-del-modelo-hacia-la-vista\"><a href=\"#1-1-1-Enlace-del-modelo-hacia-la-vista\" class=\"headerlink\" title=\"1.1.1 Enlace del modelo hacia la vista\"></a>1.1.1 Enlace del modelo hacia la vista</h3><p>Estas propiedades públicas son visibles desde la vista HTML. Así, en <code>contacts.component.html</code> mostramos cabeceras con estilo como este.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; header &#125;&#125;: &#123;&#123; description | uppercase &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">style.color</span>]=<span class=\"string\">&quot;counterStyleColor&quot;</span>&gt;</span>You have <span class=\"tag\">&lt;<span class=\"name\">mark</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">&quot;&#123;&#123; counterClass &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; numberOfContacts &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span></span><br><span class=\"line\">  contacts right now.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Este código HTML es básicamente estándar, pero está reforzado con algunos símbolos que pueden resultar extraños. Son <strong>las directivas de Angular</strong>. Se trata de atributos fuente que una vez compilados generan funcionalidad extra.</p>\n<p>La manera más directa de hacerlo es representar en la vista algún dato del modelo. Y eso se hace con las expresiones de interpolación entre llaves. <code>&#123;&#123; expression &#125;&#125;</code> Suelen usarse para aportar contenido a elementos html, aunque también a cualquier atributo.</p>\n<p>A la hora de pintar datos, a veces querremos transformarlos antes. Para eso emplearemos <strong>los pipes de Angular</strong>. Son funciones que adjuntaremos a las expresiones usando el carácter especial <code>|</code> llamado <em>pipe</em>. La entrada de la función es lo que hay a la izquierda de la tubería. La salida de la función es lo que se muestra.</p>\n<p>En Angular disponemos de suficientes pipes estándar para cubrir los casos básicos de presentación de textos, fechas, monedas y demás.</p>\n<p>También tenemos formas de asignar contenido dinámico a los atributos. Basta con envolvernos entre corchetes y su valor se calcula como una expresión. Como norma general sería algo así: <code>[atribute]=&quot;expresion&quot;</code></p>\n<h3 id=\"1-1-2-Enlace-de-la-vista-hacia-el-modelo\"><a href=\"#1-1-2-Enlace-de-la-vista-hacia-el-modelo\" class=\"headerlink\" title=\"1.1.2 Enlace de la vista hacia el modelo\"></a>1.1.2 Enlace de la vista hacia el modelo</h3><p>Toca ahora darle la opción al usuario de actuar sobre los datos desde la vista. Por ejemplo en <code>contacts.component.html</code> hemos creado un par de botones cuya intención es mostrar u ocultar un formulario sobre el que trabajaremos más adelante.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">value</span>=<span class=\"string\">&quot;Show Form&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;primary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;formHidden=false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">value</span>=<span class=\"string\">&quot;Hide Form&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;inverse&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;formHidden=true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;&#123;&#x27;hidden&#x27;:formHidden&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Contact Form<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Para ello usaremos los eventos estándar del HTML, como el <em>click</em> de los <em>input</em>. Pero, de nuevo, usaremos símbolos propios de Angular como los paréntesis <code>(eventName)</code>. En esta ocasión lo que asignaremos será un instrucción, que será ejecutada cuando el evento se dispare.</p>\n<p>Para ver el efecto completo, echamos mano de otra directiva propia de Angular: la <code>ngClass</code>. Esta nos sirve para aplicar estilos CSS conducidos por los datos. Se aplican o no en función de que se cumplan ciertas condiciones dinámicamente. En este caso el estilo <em>hidden</em>.</p>\n<h1 id=\"2-Doble-Binding\"><a href=\"#2-Doble-Binding\" class=\"headerlink\" title=\"2. Doble Binding\"></a>2. Doble Binding</h1><p>Hemos visto lo fácil que es mostrar datos en una pantalla. Y tampoco resulta complejo responder a eventos del usuario. Digamos que tenemos mecanismos para realizar el enlace, <em>binding</em> en el argot de Angular, entre la vista y el modelo.</p>\n<p>La idea es juntar ambos mecanismos en algo que permita enlazar vista y modelo en ambos sentidos. De esta forma podremos mantener sincronizados lo que el usuario ve y lo que realmente se está procesando.</p>\n<h2 id=\"2-1-NgModel\"><a href=\"#2-1-NgModel\" class=\"headerlink\" title=\"2.1 NgModel\"></a>2.1 NgModel</h2><p>La directiva <em>ngModel</em> viene en un módulo del framework llamado <code>FormsModule</code>. Hay que importarlo para poder usar su contenido, tal como hemos hecho en <code>contacts.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ContactsRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./contacts-routing.module&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ContactsRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ContactsModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>A partir de ese momento podemos invocar sus directivas, yb vamos a empezar por la más utilizada y famosa: <code>ngModel</code>.</p>\n<h3 id=\"Banana-in-a-box\"><a href=\"#Banana-in-a-box\" class=\"headerlink\" title=\"Banana in a box [()]\"></a>Banana in a box [()]</h3><p>Pero ojo, esta potente directiva no se jea utilizar así como así. Hay que enjaularla convenientemente entre una doble barrera de corchetes y paréntesis <code>[()]</code>. Para recordarlo se puso de moda la frase <em>Banana in a box</em> que hace referencia al <em>paréntesis dentro del corchete</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.property&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Usa la comunicación en ambos sentidos</p>\n<ul>\n<li><strong>(banana)</strong> : de la vista al modelo</li>\n<li><strong>[box]</strong> : del modelo a la vista</li>\n</ul>\n<h4 id=\"Modelo\"><a href=\"#Modelo\" class=\"headerlink\" title=\"Modelo\"></a>Modelo</h4><blockquote>\n<p>La directiva se asocia con una propiedad del controlador…<br>o mejor aún, con una <strong>propiedad del modelo</strong> del controlador</p>\n</blockquote>\n<p>Por ejemplo podemos crear un objeto literal para representar a un contacto y trabajar sobre él</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Directiva\"><a href=\"#Directiva\" class=\"headerlink\" title=\"Directiva\"></a>Directiva</h4><p>Y enlazarlo con la vista para que siempre estén sincronizados.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Contact name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Espia\"><a href=\"#Espia\" class=\"headerlink\" title=\"Espía\"></a>Espía</h4><p>Mientras desarrollas, es frecuente que quieras visualizar el valor de cualquier propiedad en tiempo de ejecución. Algo así como un <code>console.log()</code> en la pantalla.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; contact | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>El anterior elemento se un espía perfecto de la actividad del usuario sobre el formulario. Una cosa más, acuérdate de quitarlo antes de enviar a producción.</p>\n<h2 id=\"2-2-Form\"><a href=\"#2-2-Form\" class=\"headerlink\" title=\"2.2 Form\"></a>2.2 Form</h2><p>La técnica básica de enlazar <em>inputs</em> con propiedades puedes extenderla cuanto quieras. Pero pronto echarás en falta los <em>check boxes, radio buttons</em> y demás. Hay más usos de las directivas en los formularios.</p>\n<p>Vamos a ver cómo usarlos para actuar sobre el siguiente modelo:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-1-CheckBox\"><a href=\"#2-2-1-CheckBox\" class=\"headerlink\" title=\"2.2.1 CheckBox\"></a>2.2.1 CheckBox</h3><p>Quizá nos venga bien un <em>checkbox</em> para saber si es o no un VIP.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;isVIP&quot;</span>&gt;</span>Is V.I.P.<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;isVIP&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.isVIP&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-Radio-Buttons\"><a href=\"#2-2-2-Radio-Buttons\" class=\"headerlink\" title=\"2.2.2 Radio Buttons\"></a>2.2.2 Radio Buttons</h3><p>Y un par de <em>radio buttons</em> para el género.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;gender&quot;</span>&gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;m&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.gender&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Male<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;f&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.gender&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Female<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Estructuras\"><a href=\"#3-Estructuras\" class=\"headerlink\" title=\"3. Estructuras\"></a>3. Estructuras</h1><p>Mantén siempre en mete que el HTML que escribes es código fuente. No es, aún, el HTML que renderizará el navegador. Es casi casi un lenguaje de programación per se. Con sus expresiones, instrucciones y estructuras.</p>\n<h2 id=\"3-1-ngFor\"><a href=\"#3-1-ngFor\" class=\"headerlink\" title=\"3.1 *ngFor\"></a>3.1 *ngFor</h2><p>Vamos a empezar por las <strong>estructuras repetitivas</strong> presentando la Directiva estructural <code>*ngFor</code>.</p>\n<p>Avanzamos con el modelo al que agregamos posibles estados laborales de nuestros contactos:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> workStatuses = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unknow&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;student&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unemployed&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;employed&#x27;</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">workStatus</span>: <span class=\"number\">0</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>*ngFor</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;workStatus&quot;</span>&gt;</span>Work Status<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;workStatus&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.workStatus&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let status of workStatuses&quot;</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;status.id&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; status.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Es un bucle de toda la vida vamos. Pero en em medio del HTML. Lo que hace es dar vueltas sobre un array y agregar un nodo HTML para cada elemento del array.</p>\n<blockquote>\n<p>let <strong>iterador</strong> of <strong>iterable</strong></p>\n</blockquote>\n<h2 id=\"3-2-ngIf\"><a href=\"#3-2-ngIf\" class=\"headerlink\" title=\"3.2 *ngIf\"></a>3.2 *ngIf</h2><p>Y ahora le toca a las <strong>estructuras condicionales</strong> y para ello tenemos la directiva estructural <code>*ngIf</code></p>\n<p>Vamos un paso más en el modelo y supongamos que queremos preguntar por la empresa actual si nuestro contacto está trabajando, y en caso contrario preguntarle por sus estudios.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">workStatus</span>: <span class=\"string\">&#x27;0&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">company</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">education</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>*ngIf</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;contact.workStatus==&#x27;3&#x27;; else education&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;company&quot;</span>&gt;</span>Company Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;company&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.company&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">education</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;education&quot;</span>&gt;</span>Education<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;education&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.education&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Education&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Vemos incrustado en HTML el típico <em>if else</em> de la programación estructurada. Quizá llame la atención la manera de tratar el <em>else</em>. Por ahora digamos que aquellos nodos del árbol que no tienen garantizada su existencia deben recogerse dentro de un elemento propio del Angular, las <code>ng-template</code>.</p>\n<p>Otra directiva símbolo que merece la pena mencionar es el <code>#</code>. Actúa como un identificador que una vez aplicado a un elemento se puede usar para acceder a el desde cualquier parte del componente.</p>\n<p>En resumen:</p>\n<blockquote>\n<p>if <strong>condition</strong> else <strong>template</strong></p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>también hay <em>*ngSwitch</em></p>\n</blockquote>\n</blockquote>\n<hr>\n<h1 id=\"4-Modelo-y-controlador\"><a href=\"#4-Modelo-y-controlador\" class=\"headerlink\" title=\"4. Modelo y controlador\"></a>4. Modelo y controlador</h1><p>Este punto nu es de Angular propiamente, pero sí del lenguaje que han escogido para que desarrollemos nuestras apps: el <strong>TypeScript</strong>.</p>\n<p>Es como un cruce entre <em>JavaScript</em> y <em>Java</em> o <em>C#</em>. Digamos que le aporta tipos estáticos y mejoras en cuanto expresividad si queremos usar clases o una programación más orientada a objetos. Es un lenguaje de ayuda al programador. Realmente puedes usar sintaxis pura de JavaScript, porque el typeScript es JavaScript con anotaciones de opcionales de tipos.</p>\n<p>Angular viene ya con las herramientas y configuraciones necesarias para <em>transpilar</em> el TypeScript a JavaScript.</p>\n<h2 id=\"4-1-Interfaces-y-modelos\"><a href=\"#4-1-Interfaces-y-modelos\" class=\"headerlink\" title=\"4.1 Interfaces y modelos\"></a>4.1 Interfaces y modelos</h2><blockquote>\n<p>Mejor interface que clase</p>\n</blockquote>\n<p>Se aconseja por una buena razón. Las interfaces en JavaScript no existen. Así, mientras desarrollamos nos ayuda con <em>intellisense</em> y noes protegen de asignaciones indebidas. Pero, en ejecución no pesan porque no tienen contrapartida.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Option</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Contact</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">isVIP</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">workStatus</span>: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">company</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">education</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>tipos compuestos <code>number | string</code></p>\n</blockquote>\n<p>Este es un lenguaje que realmente sólo aplica mientras desarrollas. Así que permite hacer diabluras con los tipos.</p>\n<p>Se usan para tipificar las propiedades</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">workStatuses</span>: <span class=\"title class_\">Option</span>[] = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unknow&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;student&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unemployed&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;employed&#x27;</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">contact</span>: <span class=\"title class_\">Contact</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">workStatus</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">company</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">education</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">contacts</span>: <span class=\"title class_\">Contact</span>[] = [];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-ViewModel-en-el-controlador\"><a href=\"#4-2-ViewModel-en-el-controlador\" class=\"headerlink\" title=\"4.2 ViewModel en el controlador\"></a>4.2 ViewModel en el controlador</h2><p>El controlador del componente es una clase. Por tanto tiene no solo propiedades, sino también métodos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">saveContact</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span>.<span class=\"title function_\">push</span>(&#123; ...<span class=\"variable language_\">this</span>.<span class=\"property\">contact</span> &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateCounter</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">updateCounter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">numberOfContacts</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">counterClass</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">numberOfContacts</span> === <span class=\"number\">0</span> ? <span class=\"string\">&#x27;warning&#x27;</span> : <span class=\"string\">&#x27;success&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Los métodos públicos pueden, y deben, ser invocados desde las vistas. De forma que las expresiones asignadas a los eventos sean simples llamadas a métodos para que hagan el trabajo sucio.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Save&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;saveContact()&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OnInit\"><a href=\"#OnInit\" class=\"headerlink\" title=\"OnInit\"></a>OnInit</h3><p>Ya hemos visto que en TypeScript, las clases puede implementar interfaces. Angular nos facilita unos cuantos para usar como <em>hooks</em> en determinados momentos dl ciclo de vida de una componente.</p>\n<p>En particular hay uno que ya vienen pre implementado por el generador del CLI. Se llama <code>OnInit</code> y obliga a disponer de un método público llamado <code>ngOnInit()</code>. Lo que programes dentro será ejecutado durante la inicialización del componente.</p>\n<p>Es una práctica recomendable usar ese método en lugar del constructor para desplegar nuestra lógica de inicio. La razón es que el constructor se ejecuta antes de la existencia completa de la vista y eso puede generar inconsistencias.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">workStatuses</span>: <span class=\"title class_\">Option</span>[];</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">contact</span>: <span class=\"title class_\">Contact</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">contacts</span>: <span class=\"title class_\">Contact</span>[];</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">workStatuses</span> = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unknow&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;student&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unemployed&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;employed&#x27;</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">contact</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">workStatus</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">company</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">education</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span> = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Repasamos\"><a href=\"#Repasamos\" class=\"headerlink\" title=\"Repasamos\"></a>Repasamos</h3><p>Agregamos una funcionalidad que nos obliga a repasar todo lo aprendido. Un listado en el que mostrar los contactos que se recogen del formulario.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;contacts.length&gt;0; else empty&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let contact of contacts&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; contact.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Delete&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;deleteContact(contact)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">empty</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>No contacts yet<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">deleteContact</span>(<span class=\"params\">contact: Contact</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.<span class=\"property\">name</span> !== contact.<span class=\"property\">name</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateCounter</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Mira el código completo de <strong>la clase</strong> <code>ContactsComponent</code>en el fichero <code>contacts.component.ts</code> para tener una visión completa del componente. Como ves, <strong>las propiedades</strong> <code>header, numberOfContacts, formHidden, contacts ...</code> se corresponden con las utilizadas en las directivas de enlace en la vista. Mientras que <strong>los métodos</strong> <code>saveContact(), deleteContact()</code> son invocados desde eventos de elementos del <em>html</em>.</p>\n<p>Juntos, <strong>la vista y su clase controladora</strong>, resuelven un problema de interacción con el usuario <strong>creando un componente</strong>. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.</p>\n<blockquote>\n<p>Y esto es sólo el comienzo. La idea de componente será fundamental en la web del mañana para la creación de páginas mediante <code>web components</code>. Pero eso ya se verá más adelante…</p>\n</blockquote>\n<p>Ahora tienes una aplicación en <em>Angular 9</em> que recoge y muestra datos. Sigue esta serie para añadirle <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a> mientras aprendes a programar con Angular8. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-3_data.png\" alt=\"formularios-tablas-y-modelos-de-datos-en-angular\"></p>\n<p>Las <strong>aplicaciones Angular 9 son excelentes para el tratamiento de datos</strong> en el navegador. Su razón de ser fue la recogida de información mediante formularios y la presentación de páginas dinámicas de forma sencilla.</p>\n<p>Vamos a ver cómo la librería <code>@angular/forms</code> enlaza <strong>las vistas, los controladores y los modelos</strong>; y cómo se hace la presentación de datos en <strong>listas y tablas</strong>.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a>, al finalizar tendrás una aplicación que recoge y presenta datos.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Binding\"><a href=\"#1-Binding\" class=\"headerlink\" title=\"1. Binding\"></a>1. Binding</h1><h2 id=\"1-0-Base\"><a href=\"#1-0-Base\" class=\"headerlink\" title=\"1.0 Base\"></a>1.0 Base</h2><p><strong>Los formularios son el punto de entrada</strong> de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En <em>Angular</em> han prestado una especial atención a ellos facilitando su desarrollo, <strong>desde pantallas simples hasta complejos procesos</strong>.</p>\n<p>Vamos con simple ejemplo para recopilar información de contactos personales. Creamos una nueva ruta funcional para la gestión de contactos. Requiere ruta, enlace, módulo y componente.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m contacts --route contacts --module app-routing.module</span><br></pre></td></tr></table></figure>\n\n<p>Como ya sabemos, además de la creación del módulo y el componente, esto altera los ficheros de enrutado. Así tenemos lo siguiente en <code>app-routing</code> y en <code>contacts-routing</code>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app-routing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;contacts&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./contacts/contacts.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">ContactsModule</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// contacts-routing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"title class_\">ContactsComponent</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Hay que añadir una entrada en el <code>SideComponent</code> y ya tenemos listo el armazón para continuar.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;contacts&quot;</span>&gt;</span>Forms<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-1-Directivas\"><a href=\"#1-1-Directivas\" class=\"headerlink\" title=\"1.1 Directivas\"></a>1.1 Directivas</h2><p>Antes de pedir información, vamos a prepara el terreno. Necesitamos algunos textos para instruir al usuario y, sobre todo, un lugar en dónde recoger lo que nos escriba. Para ello atacaremos a la clase controladora del nuevo componente.</p>\n<blockquote>\n<p>Para empezar agregamos algunas propiedades. En <code>contacts.component.ts</code>:</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header = <span class=\"string\">&#x27;Contacts&#x27;</span>;</span><br><span class=\"line\">description = <span class=\"string\">&#x27;Manage your contact list&#x27;</span>;</span><br><span class=\"line\">numberOfContacts = <span class=\"number\">0</span>;</span><br><span class=\"line\">counterStyleColor = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">counterClass = <span class=\"string\">&#x27;warning&#x27;</span>;</span><br><span class=\"line\">formHidden = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-1-Enlace-del-modelo-hacia-la-vista\"><a href=\"#1-1-1-Enlace-del-modelo-hacia-la-vista\" class=\"headerlink\" title=\"1.1.1 Enlace del modelo hacia la vista\"></a>1.1.1 Enlace del modelo hacia la vista</h3><p>Estas propiedades públicas son visibles desde la vista HTML. Así, en <code>contacts.component.html</code> mostramos cabeceras con estilo como este.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; header &#125;&#125;: &#123;&#123; description | uppercase &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">style.color</span>]=<span class=\"string\">&quot;counterStyleColor&quot;</span>&gt;</span>You have <span class=\"tag\">&lt;<span class=\"name\">mark</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">&quot;&#123;&#123; counterClass &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; numberOfContacts &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span></span><br><span class=\"line\">  contacts right now.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Este código HTML es básicamente estándar, pero está reforzado con algunos símbolos que pueden resultar extraños. Son <strong>las directivas de Angular</strong>. Se trata de atributos fuente que una vez compilados generan funcionalidad extra.</p>\n<p>La manera más directa de hacerlo es representar en la vista algún dato del modelo. Y eso se hace con las expresiones de interpolación entre llaves. <code>&#123;&#123; expression &#125;&#125;</code> Suelen usarse para aportar contenido a elementos html, aunque también a cualquier atributo.</p>\n<p>A la hora de pintar datos, a veces querremos transformarlos antes. Para eso emplearemos <strong>los pipes de Angular</strong>. Son funciones que adjuntaremos a las expresiones usando el carácter especial <code>|</code> llamado <em>pipe</em>. La entrada de la función es lo que hay a la izquierda de la tubería. La salida de la función es lo que se muestra.</p>\n<p>En Angular disponemos de suficientes pipes estándar para cubrir los casos básicos de presentación de textos, fechas, monedas y demás.</p>\n<p>También tenemos formas de asignar contenido dinámico a los atributos. Basta con envolvernos entre corchetes y su valor se calcula como una expresión. Como norma general sería algo así: <code>[atribute]=&quot;expresion&quot;</code></p>\n<h3 id=\"1-1-2-Enlace-de-la-vista-hacia-el-modelo\"><a href=\"#1-1-2-Enlace-de-la-vista-hacia-el-modelo\" class=\"headerlink\" title=\"1.1.2 Enlace de la vista hacia el modelo\"></a>1.1.2 Enlace de la vista hacia el modelo</h3><p>Toca ahora darle la opción al usuario de actuar sobre los datos desde la vista. Por ejemplo en <code>contacts.component.html</code> hemos creado un par de botones cuya intención es mostrar u ocultar un formulario sobre el que trabajaremos más adelante.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">value</span>=<span class=\"string\">&quot;Show Form&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;primary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;formHidden=false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">value</span>=<span class=\"string\">&quot;Hide Form&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;inverse&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;formHidden=true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;&#123;&#x27;hidden&#x27;:formHidden&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Contact Form<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Para ello usaremos los eventos estándar del HTML, como el <em>click</em> de los <em>input</em>. Pero, de nuevo, usaremos símbolos propios de Angular como los paréntesis <code>(eventName)</code>. En esta ocasión lo que asignaremos será un instrucción, que será ejecutada cuando el evento se dispare.</p>\n<p>Para ver el efecto completo, echamos mano de otra directiva propia de Angular: la <code>ngClass</code>. Esta nos sirve para aplicar estilos CSS conducidos por los datos. Se aplican o no en función de que se cumplan ciertas condiciones dinámicamente. En este caso el estilo <em>hidden</em>.</p>\n<h1 id=\"2-Doble-Binding\"><a href=\"#2-Doble-Binding\" class=\"headerlink\" title=\"2. Doble Binding\"></a>2. Doble Binding</h1><p>Hemos visto lo fácil que es mostrar datos en una pantalla. Y tampoco resulta complejo responder a eventos del usuario. Digamos que tenemos mecanismos para realizar el enlace, <em>binding</em> en el argot de Angular, entre la vista y el modelo.</p>\n<p>La idea es juntar ambos mecanismos en algo que permita enlazar vista y modelo en ambos sentidos. De esta forma podremos mantener sincronizados lo que el usuario ve y lo que realmente se está procesando.</p>\n<h2 id=\"2-1-NgModel\"><a href=\"#2-1-NgModel\" class=\"headerlink\" title=\"2.1 NgModel\"></a>2.1 NgModel</h2><p>La directiva <em>ngModel</em> viene en un módulo del framework llamado <code>FormsModule</code>. Hay que importarlo para poder usar su contenido, tal como hemos hecho en <code>contacts.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">FormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ContactsRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./contacts-routing.module&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ContactsRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FormsModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ContactsModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>A partir de ese momento podemos invocar sus directivas, yb vamos a empezar por la más utilizada y famosa: <code>ngModel</code>.</p>\n<h3 id=\"Banana-in-a-box\"><a href=\"#Banana-in-a-box\" class=\"headerlink\" title=\"Banana in a box [()]\"></a>Banana in a box [()]</h3><p>Pero ojo, esta potente directiva no se jea utilizar así como así. Hay que enjaularla convenientemente entre una doble barrera de corchetes y paréntesis <code>[()]</code>. Para recordarlo se puso de moda la frase <em>Banana in a box</em> que hace referencia al <em>paréntesis dentro del corchete</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;model.property&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Usa la comunicación en ambos sentidos</p>\n<ul>\n<li><strong>(banana)</strong> : de la vista al modelo</li>\n<li><strong>[box]</strong> : del modelo a la vista</li>\n</ul>\n<h4 id=\"Modelo\"><a href=\"#Modelo\" class=\"headerlink\" title=\"Modelo\"></a>Modelo</h4><blockquote>\n<p>La directiva se asocia con una propiedad del controlador…<br>o mejor aún, con una <strong>propiedad del modelo</strong> del controlador</p>\n</blockquote>\n<p>Por ejemplo podemos crear un objeto literal para representar a un contacto y trabajar sobre él</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Directiva\"><a href=\"#Directiva\" class=\"headerlink\" title=\"Directiva\"></a>Directiva</h4><p>Y enlazarlo con la vista para que siempre estén sincronizados.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Contact name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Espia\"><a href=\"#Espia\" class=\"headerlink\" title=\"Espía\"></a>Espía</h4><p>Mientras desarrollas, es frecuente que quieras visualizar el valor de cualquier propiedad en tiempo de ejecución. Algo así como un <code>console.log()</code> en la pantalla.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; contact | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>El anterior elemento se un espía perfecto de la actividad del usuario sobre el formulario. Una cosa más, acuérdate de quitarlo antes de enviar a producción.</p>\n<h2 id=\"2-2-Form\"><a href=\"#2-2-Form\" class=\"headerlink\" title=\"2.2 Form\"></a>2.2 Form</h2><p>La técnica básica de enlazar <em>inputs</em> con propiedades puedes extenderla cuanto quieras. Pero pronto echarás en falta los <em>check boxes, radio buttons</em> y demás. Hay más usos de las directivas en los formularios.</p>\n<p>Vamos a ver cómo usarlos para actuar sobre el siguiente modelo:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-1-CheckBox\"><a href=\"#2-2-1-CheckBox\" class=\"headerlink\" title=\"2.2.1 CheckBox\"></a>2.2.1 CheckBox</h3><p>Quizá nos venga bien un <em>checkbox</em> para saber si es o no un VIP.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;isVIP&quot;</span>&gt;</span>Is V.I.P.<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;isVIP&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.isVIP&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-Radio-Buttons\"><a href=\"#2-2-2-Radio-Buttons\" class=\"headerlink\" title=\"2.2.2 Radio Buttons\"></a>2.2.2 Radio Buttons</h3><p>Y un par de <em>radio buttons</em> para el género.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;gender&quot;</span>&gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;m&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.gender&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Male<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;f&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.gender&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Female<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Estructuras\"><a href=\"#3-Estructuras\" class=\"headerlink\" title=\"3. Estructuras\"></a>3. Estructuras</h1><p>Mantén siempre en mete que el HTML que escribes es código fuente. No es, aún, el HTML que renderizará el navegador. Es casi casi un lenguaje de programación per se. Con sus expresiones, instrucciones y estructuras.</p>\n<h2 id=\"3-1-ngFor\"><a href=\"#3-1-ngFor\" class=\"headerlink\" title=\"3.1 *ngFor\"></a>3.1 *ngFor</h2><p>Vamos a empezar por las <strong>estructuras repetitivas</strong> presentando la Directiva estructural <code>*ngFor</code>.</p>\n<p>Avanzamos con el modelo al que agregamos posibles estados laborales de nuestros contactos:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> workStatuses = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unknow&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;student&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unemployed&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;employed&#x27;</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">workStatus</span>: <span class=\"number\">0</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>*ngFor</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;workStatus&quot;</span>&gt;</span>Work Status<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;workStatus&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.workStatus&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let status of workStatuses&quot;</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;status.id&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; status.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Es un bucle de toda la vida vamos. Pero en em medio del HTML. Lo que hace es dar vueltas sobre un array y agregar un nodo HTML para cada elemento del array.</p>\n<blockquote>\n<p>let <strong>iterador</strong> of <strong>iterable</strong></p>\n</blockquote>\n<h2 id=\"3-2-ngIf\"><a href=\"#3-2-ngIf\" class=\"headerlink\" title=\"3.2 *ngIf\"></a>3.2 *ngIf</h2><p>Y ahora le toca a las <strong>estructuras condicionales</strong> y para ello tenemos la directiva estructural <code>*ngIf</code></p>\n<p>Vamos un paso más en el modelo y supongamos que queremos preguntar por la empresa actual si nuestro contacto está trabajando, y en caso contrario preguntarle por sus estudios.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">workStatus</span>: <span class=\"string\">&#x27;0&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">company</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">education</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>*ngIf</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;contact.workStatus==&#x27;3&#x27;; else education&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;company&quot;</span>&gt;</span>Company Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;company&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.company&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">education</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;education&quot;</span>&gt;</span>Education<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;education&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;contact.education&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Education&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Vemos incrustado en HTML el típico <em>if else</em> de la programación estructurada. Quizá llame la atención la manera de tratar el <em>else</em>. Por ahora digamos que aquellos nodos del árbol que no tienen garantizada su existencia deben recogerse dentro de un elemento propio del Angular, las <code>ng-template</code>.</p>\n<p>Otra directiva símbolo que merece la pena mencionar es el <code>#</code>. Actúa como un identificador que una vez aplicado a un elemento se puede usar para acceder a el desde cualquier parte del componente.</p>\n<p>En resumen:</p>\n<blockquote>\n<p>if <strong>condition</strong> else <strong>template</strong></p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>también hay <em>*ngSwitch</em></p>\n</blockquote>\n</blockquote>\n<hr>\n<h1 id=\"4-Modelo-y-controlador\"><a href=\"#4-Modelo-y-controlador\" class=\"headerlink\" title=\"4. Modelo y controlador\"></a>4. Modelo y controlador</h1><p>Este punto nu es de Angular propiamente, pero sí del lenguaje que han escogido para que desarrollemos nuestras apps: el <strong>TypeScript</strong>.</p>\n<p>Es como un cruce entre <em>JavaScript</em> y <em>Java</em> o <em>C#</em>. Digamos que le aporta tipos estáticos y mejoras en cuanto expresividad si queremos usar clases o una programación más orientada a objetos. Es un lenguaje de ayuda al programador. Realmente puedes usar sintaxis pura de JavaScript, porque el typeScript es JavaScript con anotaciones de opcionales de tipos.</p>\n<p>Angular viene ya con las herramientas y configuraciones necesarias para <em>transpilar</em> el TypeScript a JavaScript.</p>\n<h2 id=\"4-1-Interfaces-y-modelos\"><a href=\"#4-1-Interfaces-y-modelos\" class=\"headerlink\" title=\"4.1 Interfaces y modelos\"></a>4.1 Interfaces y modelos</h2><blockquote>\n<p>Mejor interface que clase</p>\n</blockquote>\n<p>Se aconseja por una buena razón. Las interfaces en JavaScript no existen. Así, mientras desarrollamos nos ayuda con <em>intellisense</em> y noes protegen de asignaciones indebidas. Pero, en ejecución no pesan porque no tienen contrapartida.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Option</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Contact</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">isVIP</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">workStatus</span>: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">company</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">education</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>tipos compuestos <code>number | string</code></p>\n</blockquote>\n<p>Este es un lenguaje que realmente sólo aplica mientras desarrollas. Así que permite hacer diabluras con los tipos.</p>\n<p>Se usan para tipificar las propiedades</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">workStatuses</span>: <span class=\"title class_\">Option</span>[] = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unknow&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;student&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unemployed&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;employed&#x27;</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">contact</span>: <span class=\"title class_\">Contact</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">workStatus</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">company</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">education</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">contacts</span>: <span class=\"title class_\">Contact</span>[] = [];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-ViewModel-en-el-controlador\"><a href=\"#4-2-ViewModel-en-el-controlador\" class=\"headerlink\" title=\"4.2 ViewModel en el controlador\"></a>4.2 ViewModel en el controlador</h2><p>El controlador del componente es una clase. Por tanto tiene no solo propiedades, sino también métodos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">saveContact</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span>.<span class=\"title function_\">push</span>(&#123; ...<span class=\"variable language_\">this</span>.<span class=\"property\">contact</span> &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateCounter</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">updateCounter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">numberOfContacts</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">counterClass</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">numberOfContacts</span> === <span class=\"number\">0</span> ? <span class=\"string\">&#x27;warning&#x27;</span> : <span class=\"string\">&#x27;success&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Los métodos públicos pueden, y deben, ser invocados desde las vistas. De forma que las expresiones asignadas a los eventos sean simples llamadas a métodos para que hagan el trabajo sucio.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Save&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;saveContact()&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OnInit\"><a href=\"#OnInit\" class=\"headerlink\" title=\"OnInit\"></a>OnInit</h3><p>Ya hemos visto que en TypeScript, las clases puede implementar interfaces. Angular nos facilita unos cuantos para usar como <em>hooks</em> en determinados momentos dl ciclo de vida de una componente.</p>\n<p>En particular hay uno que ya vienen pre implementado por el generador del CLI. Se llama <code>OnInit</code> y obliga a disponer de un método público llamado <code>ngOnInit()</code>. Lo que programes dentro será ejecutado durante la inicialización del componente.</p>\n<p>Es una práctica recomendable usar ese método en lugar del constructor para desplegar nuestra lógica de inicio. La razón es que el constructor se ejecuta antes de la existencia completa de la vista y eso puede generar inconsistencias.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">workStatuses</span>: <span class=\"title class_\">Option</span>[];</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">contact</span>: <span class=\"title class_\">Contact</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">contacts</span>: <span class=\"title class_\">Contact</span>[];</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">workStatuses</span> = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unknow&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;student&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;unemployed&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">description</span>: <span class=\"string\">&#x27;employed&#x27;</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">contact</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isVIP</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">workStatus</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">company</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">education</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span> = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Repasamos\"><a href=\"#Repasamos\" class=\"headerlink\" title=\"Repasamos\"></a>Repasamos</h3><p>Agregamos una funcionalidad que nos obliga a repasar todo lo aprendido. Un listado en el que mostrar los contactos que se recogen del formulario.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;contacts.length&gt;0; else empty&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let contact of contacts&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; contact.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Delete&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;deleteContact(contact)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">empty</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>No contacts yet<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">deleteContact</span>(<span class=\"params\">contact: Contact</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">contacts</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.<span class=\"property\">name</span> !== contact.<span class=\"property\">name</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateCounter</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Mira el código completo de <strong>la clase</strong> <code>ContactsComponent</code>en el fichero <code>contacts.component.ts</code> para tener una visión completa del componente. Como ves, <strong>las propiedades</strong> <code>header, numberOfContacts, formHidden, contacts ...</code> se corresponden con las utilizadas en las directivas de enlace en la vista. Mientras que <strong>los métodos</strong> <code>saveContact(), deleteContact()</code> son invocados desde eventos de elementos del <em>html</em>.</p>\n<p>Juntos, <strong>la vista y su clase controladora</strong>, resuelven un problema de interacción con el usuario <strong>creando un componente</strong>. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.</p>\n<blockquote>\n<p>Y esto es sólo el comienzo. La idea de componente será fundamental en la web del mañana para la creación de páginas mediante <code>web components</code>. Pero eso ya se verá más adelante…</p>\n</blockquote>\n<p>Ahora tienes una aplicación en <em>Angular 9</em> que recoge y muestra datos. Sigue esta serie para añadirle <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a> mientras aprendes a programar con Angular8. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Elementos Angular para los Web Components","date":"2019-10-29T08:19:39.000Z","thumbnail":"/css/images/angular-19_elements.png","_content":"\n![elementos-Angular-para-los-Web-Components](/images/tutorial-angular-19_elements.png)\n\nLa industria web vive un momento de esplendor y le crecen los _frameworks_ como hierbas primaverales. Pero el estándar HTML no se queda atrás y evoluciona hacia tecnologías potentes y genéricas. **Angular Elements** promueve la reutilización de código en distintos frameworks para que puedas usar tus componentes Angular en otros entornos.\n\nSiendo como es Google una empresa _web first_, se esfuerzan en incorporar y adaptar de la mejor manera los estándares HTML a sus productos. Con el desarrollo de Angular siempre tuvieron la vista puesta en la tecnología de los **Web Components**. Buscando que los usos futuros del código se garantizasen más allá del framework de creación.\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [Internacionalización y puesta en producción](../internacionalizacion-y-puesta-en-produccion-con-Angular/). Al finalizar tendrás unos componentes que podrás utilizar fuera de Angular.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n# 1. Componentes independientes del framework\n\n> Hay lácteos que aguantan más que algunos frameworks.\n\nSeguramente este no sea el caso de Angular, ni de otros frameworks de adopción masiva como React, Vue o Svelte. Todos ellos tienen un presente brillante y un futuro garantizado al plazo que la tecnología pueda vislumbrar. Pero más temprano que tarde otra tecnología o paradigma disruptivo los desplazará. O al menos los obligará a cambiar tanto que sean irreconocibles.\n\nPara entonces, y también mientras tanto, nuestro código será cautivo del framework en el que nació. Pero eso cambiará con los **Web Components**.\n\n## 1.1 Origen y potencial\n\nLos **Web Components** son independientes de los _frameworks._ Esta es la idea clave; se pueden desarrollar con el estándar pelado de JavaScript o con cualquier framework moderno. Pero lo fundamental es que no exigen nada especial para ejecutarse. Esto permite la interoperabilidad y también extiende la vida útil de tus creaciones.\n\n### Usos posibles\n\nPartiendo de dichas premisas es fácil entrever todo el potencial y casos dónde aplicarlos. Por ejemplo:\n\n- Librerías de diseño _multiplataforma_.\n\n- Migración paulatina de aplicaciones _legacy_.\n\n- Integración dinámica en grandes soluciones _CMS_.\n\n- Mejoras funcionales en aplicaciones _server side_.\n\n## 1.2 Estándares y tecnología\n\nBajo el término Web Components se esconden diversas tecnologías. No todas ellas están al mismo nivel de aceptación, e incluso alguna no ha visto la luz, pero este es un esbozo de lo que tenemos:\n\n- **Shadow DOM:** Manipulación de un árbol en memoria antes de aplicar sus cambios al verdadero.\n- **HTML templates:** Fragmentos de HTML que no se utilizan en la carga de la página, pero que se pueden instanciar más adelante.\n- **ES Modules:** Inclusión de documentos JS en forma de módulos de manera estándar y ágil.\n- **Custom elements:** son etiquetas HTML con funciones encapsuladas, reutilizables y listas para usar en páginas y aplicaciones web.\n\nEl estándar:\n\n> Los **Custom Web Elements** sólo requieren _HTML y JavaScript_.\n\n\nLa tecnología:\n\n> _Angular Elements_ empaqueta tus componentes como **Custom Web Elements**.\n\n# 2. Desarrollo y despliegue con Angular\n\n### Un componente común de Angular\n\nPartimos de un componente Angular normal y corriente. Un conversor (sí, ya sé que es sólo un miserable multiplicador) de monedas.\n\n`libs\\currency\\src\\lib\\converter\\converter.component.html`\n\n```html\n<form>\n  <label>Amount to convert: </label>\n  <input name=\"amount\"\n         [(ngModel)]=\"amount\"\n         type=\"number\"\n         (change)=\"convert()\" />\n  <label>Converted amount: </label>\n  <input name=\"convertedAmount\"\n         [(ngModel)]=\"convertedAmount\"\n         type=\"number\"\n         readonly />\n</form>\n```\n\n`libs\\currency\\src\\lib\\converter\\converter.component.ts`\n\n```Typescript\n@Component({\n  selector: 'angular-boss-converter',\n  templateUrl: './converter.component.html',\n  styleUrls: ['./converter.component.css']\n})\nexport class ConverterComponent implements OnInit {\n  @Input() factor = 1.1;\n  @Input() amount = 0;\n  @Output() converted = new EventEmitter<number>();\n  convertedAmount = 0;\n  constructor() {}\n  ngOnInit() {\n    this.convert();\n  }\n  convert() {\n    this.convertedAmount = this.amount * this.factor;\n    this.converted.next(this.convertedAmount);\n  }\n}\n```\n\n\n### El componente sigue siendo Angular\n\nEs tan normal y corriente que puedo importar su módulo y usarlo en cualquier aplicación Angular.\n\n`apps\\warehouse\\src\\app\\app.module.ts`\n\n```typescript\nimport { CurrencyModule } from '@angular-boss/currency';\n\n@NgModule({\n  imports: [\n    CurrencyModule\n  ],\n})\nexport class AppModule {}\n```\n\n`apps\\warehouse\\src\\app\\app.component.html`\n\n```html\n<angular-boss-converter amount=\"100\"\n                        factor=\"1.5\"></angular-boss-converter>\n```\n\n## 2.1 Exponer los componentes\n\nPero ahora todo va a cambiar. Necesitamos un proyecto de exportación. Nada especial. Yo le pongo aquí el prefijo external para hacer hincapié en su función de exportación.\n\n`ng g @nrwl/angular:application external-currency`\n\nSi el componente a exportar ya ha sido probado, y debería, en este proyecto no necesitamos nada más que el módulo. Así que puedes borrar tranquilamente el `AppComponent`, e incluso el `index.html`.\n\nPongámonos con la exportación, para la cual hacen falta herramientas. Pues adelante con ellas. Incorporamos **Angular Elements**.\n\n`ng add @angular/elements`\n\nAhora ya importamos el componente en el _array_ `imports` y lo exportamos, pero no en `exports` ni tampoco en `bootstrap`. Vamos a incluirlo en `entryComponents`.\n\n`apps\\external-currency\\src\\app\\app.module.ts`\n\n```typescript\nimport { ConverterComponent, CurrencyModule } from '@angular-boss/currency';\nimport { Injector, NgModule } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { BrowserModule } from '@angular/platform-browser';\nimport 'zone.js';\n@NgModule({\n  imports: [BrowserModule, CurrencyModule],\n  entryComponents: [ConverterComponent]\n})\nexport class AppModule {\n  constructor(private injector: Injector) {}\n  ngDoBootstrap() {\n    const el = createCustomElement(ConverterComponent, {\n      injector: this.injector\n    });\n    customElements.define('external-currency-converter', el);\n  }\n}\n```\n\nLos `entryComponents` son cargados por Angular de forma imperativa, sin necesidad de incluirlos en un _html_. Menos mal porque este proyecto ni siquiera usa el `index.hml`\n\n### ngDoBootstrap\n\nJustamente la falta de componentes en el array `bootstrap` obliga a arrancar la aplicación mediante código. Esto lo hacemos programando en el _hook_ `ngDoBootstrap()`, un método que será invocado al inicio y en el meteremos la lógica necesaria para definir el **Web Component**.\n\nSon solamente dos instrucciones que usarás para cada componente que quieras transformar en un elemento.\n\n```typescript\n  const el = createCustomElement(ConverterComponent, {\n    injector: this.injector\n  });\n  customElements.define('external-currency-converter', el);\n```\n\nEn la primera se crea el elemento mediante una función constructora que ofrece `@angular/elements`. Para ello necesita un puntero al componente original y el sistema de inyección de dependencias de Angular. (El cual a su vez reclamamos en el constructor del módulo).\n\nLa segunda instrucción ya no es propia de Angular. Simplemente se le asigna al elemento recién creado el _selector tag_ por el que será conocido.\n\n> Atención a la importación de `zone.js`.\n\nEs necesaria para poder usar la detección de cambios en aplicaciones no Angular.\n\n## 2.2 Compilación y despliegue\n\nA partir de aquí se acabó el trabajo de programación. Y toca el más tedioso de operaciones de compilación y distribución.\n\nAfortunadamente podemos aplicar la magia de `@angular/elements` y utilidades como `ngx-build-plus` para compilarlo como un Web Component.\n\n### Agregar herramientas de ayuda\n\nLo primero es instalar una herramienta que mejora el proceso de compilación del CLI.\n\n`ng add ngx-build-plus --project external-currency`\n\nEsencialmente usa _webpack_ para empaquetar el resultado de la compilación `build` nativa del CLI. Pero no necesitas profundizar en su interior para usarla en el día día.\n\n### Polyfills\n\nCon el Internet Explorer hemos topado. Y otros navegadores antiguos, claro. El caso es que para que entiendan este nuevo estándar, tenemos que incluir una serie de arreglos llamados _polyfills_, que rellenan los huecos de incomprensión de los viejos exploradores. Así que para garantizar la compatibilidad en todos los navegadores instalamos todo lo necesario usando `ngx-build-plus`.\n\n`ng g ngx-build-plus:wc-polyfill --project external-currency`\n\nOjo que en algunas versiones se equivoca en la generación de los _assets_ y hay que moverlos a mano.\n\n---\n\n### Compilación\n\nYa solo falta lanzar el comando de compilación `ng build`. Pero para ajustar un poco más el resultado te propongo que deshabilites el nombrado con _hash_ y por supuesto que uses algunos parámetros que ha incluido `ngx-build-plus`.\n\nNombres legibles: `\"outputHashing\": \"none\",`\n\nGeneración: `ng build --prod --single-bundle --project external-currency`\n\n# 3. Consumo en HTML\n\nYa está, el resultado se podrá utilizar en cualquier aplicación HTML. Por ejemplo en una página prácticamente vacía y completamente estándar.\n\n`apps\\vanilla\\index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Vanilla Currency</title>\n    <base href=\"/apps/vanilla/\" />\n    <meta name=\"viewport\"\n          content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"icon\"\n          type=\"image/x-icon\"\n          href=\"favicon.ico\" />\n  </head>\n  <body>\n    <h2>Convert money:</h2>\n    <external-currency-converter amount=\"15\"></external-currency-converter>\n  </body>\n</html>\n```\n¿Que no funciona? Obvio, el navegador no entiende el _tag_ `external-currency-converter`. Necesitamos el JavaScript de la compilación anterior\n\n## 3.1 Copiar\n\nCopia los dos archivos generados en la carpeta de distribución\n\n`dist\\apps\\external-currency`\n\nY pégalos al lado del html que quieras. Por ejemplo:\n\n`apps\\vanilla\\`\n\n## 3.2 Importar\n\nSon dos porque hay versión clásica y modular. Importa la que necesites o ambas, y ya está.\n\n```html\n  <script src=\"main-es2015.js\"\n          type=\"module\"></script>\n  <script src=\"main-es5.js\"\n          nomodule\n          defer></script>\n```\n\n> Una web HTML pura, mostrando un componente creado en Angular\n\n\nAhora ya tienes código creado en Angular pero que puedes integrar en cualquier web. Todo este proceso aún puede resultar tedioso, pero es el futuro. Continúa tu formación avanzada para crear aplicaciones Angular fijándote en el  [Angular Blueprint](https://github.com/angularbuilders/angular-blueprint/) creado por la iniciativa [Angular.Builders](https://angular.builders/) y verás como aprendes a programar grandes aplicaciones con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/ng-19-Elementos Angular para los Web Components.md","raw":"---\ntitle: Elementos Angular para los Web Components\npermalink: elementos-Angular-para-los-Web-Components\ndate: 2019-10-29 09:19:39\ntags:\n- Angular\n- Angular8\n- Angular2\n- Elements\n- WebComponents\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-19_elements.png\n---\n\n![elementos-Angular-para-los-Web-Components](/images/tutorial-angular-19_elements.png)\n\nLa industria web vive un momento de esplendor y le crecen los _frameworks_ como hierbas primaverales. Pero el estándar HTML no se queda atrás y evoluciona hacia tecnologías potentes y genéricas. **Angular Elements** promueve la reutilización de código en distintos frameworks para que puedas usar tus componentes Angular en otros entornos.\n\nSiendo como es Google una empresa _web first_, se esfuerzan en incorporar y adaptar de la mejor manera los estándares HTML a sus productos. Con el desarrollo de Angular siempre tuvieron la vista puesta en la tecnología de los **Web Components**. Buscando que los usos futuros del código se garantizasen más allá del framework de creación.\n\n<!-- more -->\n\nPartiendo del código tal como quedó en [Internacionalización y puesta en producción](../internacionalizacion-y-puesta-en-produccion-con-Angular/). Al finalizar tendrás unos componentes que podrás utilizar fuera de Angular.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n# 1. Componentes independientes del framework\n\n> Hay lácteos que aguantan más que algunos frameworks.\n\nSeguramente este no sea el caso de Angular, ni de otros frameworks de adopción masiva como React, Vue o Svelte. Todos ellos tienen un presente brillante y un futuro garantizado al plazo que la tecnología pueda vislumbrar. Pero más temprano que tarde otra tecnología o paradigma disruptivo los desplazará. O al menos los obligará a cambiar tanto que sean irreconocibles.\n\nPara entonces, y también mientras tanto, nuestro código será cautivo del framework en el que nació. Pero eso cambiará con los **Web Components**.\n\n## 1.1 Origen y potencial\n\nLos **Web Components** son independientes de los _frameworks._ Esta es la idea clave; se pueden desarrollar con el estándar pelado de JavaScript o con cualquier framework moderno. Pero lo fundamental es que no exigen nada especial para ejecutarse. Esto permite la interoperabilidad y también extiende la vida útil de tus creaciones.\n\n### Usos posibles\n\nPartiendo de dichas premisas es fácil entrever todo el potencial y casos dónde aplicarlos. Por ejemplo:\n\n- Librerías de diseño _multiplataforma_.\n\n- Migración paulatina de aplicaciones _legacy_.\n\n- Integración dinámica en grandes soluciones _CMS_.\n\n- Mejoras funcionales en aplicaciones _server side_.\n\n## 1.2 Estándares y tecnología\n\nBajo el término Web Components se esconden diversas tecnologías. No todas ellas están al mismo nivel de aceptación, e incluso alguna no ha visto la luz, pero este es un esbozo de lo que tenemos:\n\n- **Shadow DOM:** Manipulación de un árbol en memoria antes de aplicar sus cambios al verdadero.\n- **HTML templates:** Fragmentos de HTML que no se utilizan en la carga de la página, pero que se pueden instanciar más adelante.\n- **ES Modules:** Inclusión de documentos JS en forma de módulos de manera estándar y ágil.\n- **Custom elements:** son etiquetas HTML con funciones encapsuladas, reutilizables y listas para usar en páginas y aplicaciones web.\n\nEl estándar:\n\n> Los **Custom Web Elements** sólo requieren _HTML y JavaScript_.\n\n\nLa tecnología:\n\n> _Angular Elements_ empaqueta tus componentes como **Custom Web Elements**.\n\n# 2. Desarrollo y despliegue con Angular\n\n### Un componente común de Angular\n\nPartimos de un componente Angular normal y corriente. Un conversor (sí, ya sé que es sólo un miserable multiplicador) de monedas.\n\n`libs\\currency\\src\\lib\\converter\\converter.component.html`\n\n```html\n<form>\n  <label>Amount to convert: </label>\n  <input name=\"amount\"\n         [(ngModel)]=\"amount\"\n         type=\"number\"\n         (change)=\"convert()\" />\n  <label>Converted amount: </label>\n  <input name=\"convertedAmount\"\n         [(ngModel)]=\"convertedAmount\"\n         type=\"number\"\n         readonly />\n</form>\n```\n\n`libs\\currency\\src\\lib\\converter\\converter.component.ts`\n\n```Typescript\n@Component({\n  selector: 'angular-boss-converter',\n  templateUrl: './converter.component.html',\n  styleUrls: ['./converter.component.css']\n})\nexport class ConverterComponent implements OnInit {\n  @Input() factor = 1.1;\n  @Input() amount = 0;\n  @Output() converted = new EventEmitter<number>();\n  convertedAmount = 0;\n  constructor() {}\n  ngOnInit() {\n    this.convert();\n  }\n  convert() {\n    this.convertedAmount = this.amount * this.factor;\n    this.converted.next(this.convertedAmount);\n  }\n}\n```\n\n\n### El componente sigue siendo Angular\n\nEs tan normal y corriente que puedo importar su módulo y usarlo en cualquier aplicación Angular.\n\n`apps\\warehouse\\src\\app\\app.module.ts`\n\n```typescript\nimport { CurrencyModule } from '@angular-boss/currency';\n\n@NgModule({\n  imports: [\n    CurrencyModule\n  ],\n})\nexport class AppModule {}\n```\n\n`apps\\warehouse\\src\\app\\app.component.html`\n\n```html\n<angular-boss-converter amount=\"100\"\n                        factor=\"1.5\"></angular-boss-converter>\n```\n\n## 2.1 Exponer los componentes\n\nPero ahora todo va a cambiar. Necesitamos un proyecto de exportación. Nada especial. Yo le pongo aquí el prefijo external para hacer hincapié en su función de exportación.\n\n`ng g @nrwl/angular:application external-currency`\n\nSi el componente a exportar ya ha sido probado, y debería, en este proyecto no necesitamos nada más que el módulo. Así que puedes borrar tranquilamente el `AppComponent`, e incluso el `index.html`.\n\nPongámonos con la exportación, para la cual hacen falta herramientas. Pues adelante con ellas. Incorporamos **Angular Elements**.\n\n`ng add @angular/elements`\n\nAhora ya importamos el componente en el _array_ `imports` y lo exportamos, pero no en `exports` ni tampoco en `bootstrap`. Vamos a incluirlo en `entryComponents`.\n\n`apps\\external-currency\\src\\app\\app.module.ts`\n\n```typescript\nimport { ConverterComponent, CurrencyModule } from '@angular-boss/currency';\nimport { Injector, NgModule } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { BrowserModule } from '@angular/platform-browser';\nimport 'zone.js';\n@NgModule({\n  imports: [BrowserModule, CurrencyModule],\n  entryComponents: [ConverterComponent]\n})\nexport class AppModule {\n  constructor(private injector: Injector) {}\n  ngDoBootstrap() {\n    const el = createCustomElement(ConverterComponent, {\n      injector: this.injector\n    });\n    customElements.define('external-currency-converter', el);\n  }\n}\n```\n\nLos `entryComponents` son cargados por Angular de forma imperativa, sin necesidad de incluirlos en un _html_. Menos mal porque este proyecto ni siquiera usa el `index.hml`\n\n### ngDoBootstrap\n\nJustamente la falta de componentes en el array `bootstrap` obliga a arrancar la aplicación mediante código. Esto lo hacemos programando en el _hook_ `ngDoBootstrap()`, un método que será invocado al inicio y en el meteremos la lógica necesaria para definir el **Web Component**.\n\nSon solamente dos instrucciones que usarás para cada componente que quieras transformar en un elemento.\n\n```typescript\n  const el = createCustomElement(ConverterComponent, {\n    injector: this.injector\n  });\n  customElements.define('external-currency-converter', el);\n```\n\nEn la primera se crea el elemento mediante una función constructora que ofrece `@angular/elements`. Para ello necesita un puntero al componente original y el sistema de inyección de dependencias de Angular. (El cual a su vez reclamamos en el constructor del módulo).\n\nLa segunda instrucción ya no es propia de Angular. Simplemente se le asigna al elemento recién creado el _selector tag_ por el que será conocido.\n\n> Atención a la importación de `zone.js`.\n\nEs necesaria para poder usar la detección de cambios en aplicaciones no Angular.\n\n## 2.2 Compilación y despliegue\n\nA partir de aquí se acabó el trabajo de programación. Y toca el más tedioso de operaciones de compilación y distribución.\n\nAfortunadamente podemos aplicar la magia de `@angular/elements` y utilidades como `ngx-build-plus` para compilarlo como un Web Component.\n\n### Agregar herramientas de ayuda\n\nLo primero es instalar una herramienta que mejora el proceso de compilación del CLI.\n\n`ng add ngx-build-plus --project external-currency`\n\nEsencialmente usa _webpack_ para empaquetar el resultado de la compilación `build` nativa del CLI. Pero no necesitas profundizar en su interior para usarla en el día día.\n\n### Polyfills\n\nCon el Internet Explorer hemos topado. Y otros navegadores antiguos, claro. El caso es que para que entiendan este nuevo estándar, tenemos que incluir una serie de arreglos llamados _polyfills_, que rellenan los huecos de incomprensión de los viejos exploradores. Así que para garantizar la compatibilidad en todos los navegadores instalamos todo lo necesario usando `ngx-build-plus`.\n\n`ng g ngx-build-plus:wc-polyfill --project external-currency`\n\nOjo que en algunas versiones se equivoca en la generación de los _assets_ y hay que moverlos a mano.\n\n---\n\n### Compilación\n\nYa solo falta lanzar el comando de compilación `ng build`. Pero para ajustar un poco más el resultado te propongo que deshabilites el nombrado con _hash_ y por supuesto que uses algunos parámetros que ha incluido `ngx-build-plus`.\n\nNombres legibles: `\"outputHashing\": \"none\",`\n\nGeneración: `ng build --prod --single-bundle --project external-currency`\n\n# 3. Consumo en HTML\n\nYa está, el resultado se podrá utilizar en cualquier aplicación HTML. Por ejemplo en una página prácticamente vacía y completamente estándar.\n\n`apps\\vanilla\\index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Vanilla Currency</title>\n    <base href=\"/apps/vanilla/\" />\n    <meta name=\"viewport\"\n          content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"icon\"\n          type=\"image/x-icon\"\n          href=\"favicon.ico\" />\n  </head>\n  <body>\n    <h2>Convert money:</h2>\n    <external-currency-converter amount=\"15\"></external-currency-converter>\n  </body>\n</html>\n```\n¿Que no funciona? Obvio, el navegador no entiende el _tag_ `external-currency-converter`. Necesitamos el JavaScript de la compilación anterior\n\n## 3.1 Copiar\n\nCopia los dos archivos generados en la carpeta de distribución\n\n`dist\\apps\\external-currency`\n\nY pégalos al lado del html que quieras. Por ejemplo:\n\n`apps\\vanilla\\`\n\n## 3.2 Importar\n\nSon dos porque hay versión clásica y modular. Importa la que necesites o ambas, y ya está.\n\n```html\n  <script src=\"main-es2015.js\"\n          type=\"module\"></script>\n  <script src=\"main-es5.js\"\n          nomodule\n          defer></script>\n```\n\n> Una web HTML pura, mostrando un componente creado en Angular\n\n\nAhora ya tienes código creado en Angular pero que puedes integrar en cualquier web. Todo este proceso aún puede resultar tedioso, pero es el futuro. Continúa tu formación avanzada para crear aplicaciones Angular fijándote en el  [Angular Blueprint](https://github.com/angularbuilders/angular-blueprint/) creado por la iniciativa [Angular.Builders](https://angular.builders/) y verás como aprendes a programar grandes aplicaciones con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"ng-19-Elementos Angular para los Web Components","published":1,"updated":"2023-07-02T10:25:58.476Z","__permalink":"elementos-Angular-para-los-Web-Components","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fg001ae096fpq15c65","content":"<p><img src=\"/images/tutorial-angular-19_elements.png\" alt=\"elementos-Angular-para-los-Web-Components\"></p>\n<p>La industria web vive un momento de esplendor y le crecen los <em>frameworks</em> como hierbas primaverales. Pero el estándar HTML no se queda atrás y evoluciona hacia tecnologías potentes y genéricas. <strong>Angular Elements</strong> promueve la reutilización de código en distintos frameworks para que puedas usar tus componentes Angular en otros entornos.</p>\n<p>Siendo como es Google una empresa <em>web first</em>, se esfuerzan en incorporar y adaptar de la mejor manera los estándares HTML a sus productos. Con el desarrollo de Angular siempre tuvieron la vista puesta en la tecnología de los <strong>Web Components</strong>. Buscando que los usos futuros del código se garantizasen más allá del framework de creación.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo del código tal como quedó en <a href=\"../internacionalizacion-y-puesta-en-produccion-con-Angular/\">Internacionalización y puesta en producción</a>. Al finalizar tendrás unos componentes que podrás utilizar fuera de Angular.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Componentes-independientes-del-framework\"><a href=\"#1-Componentes-independientes-del-framework\" class=\"headerlink\" title=\"1. Componentes independientes del framework\"></a>1. Componentes independientes del framework</h1><blockquote>\n<p>Hay lácteos que aguantan más que algunos frameworks.</p>\n</blockquote>\n<p>Seguramente este no sea el caso de Angular, ni de otros frameworks de adopción masiva como React, Vue o Svelte. Todos ellos tienen un presente brillante y un futuro garantizado al plazo que la tecnología pueda vislumbrar. Pero más temprano que tarde otra tecnología o paradigma disruptivo los desplazará. O al menos los obligará a cambiar tanto que sean irreconocibles.</p>\n<p>Para entonces, y también mientras tanto, nuestro código será cautivo del framework en el que nació. Pero eso cambiará con los <strong>Web Components</strong>.</p>\n<h2 id=\"1-1-Origen-y-potencial\"><a href=\"#1-1-Origen-y-potencial\" class=\"headerlink\" title=\"1.1 Origen y potencial\"></a>1.1 Origen y potencial</h2><p>Los <strong>Web Components</strong> son independientes de los <em>frameworks.</em> Esta es la idea clave; se pueden desarrollar con el estándar pelado de JavaScript o con cualquier framework moderno. Pero lo fundamental es que no exigen nada especial para ejecutarse. Esto permite la interoperabilidad y también extiende la vida útil de tus creaciones.</p>\n<h3 id=\"Usos-posibles\"><a href=\"#Usos-posibles\" class=\"headerlink\" title=\"Usos posibles\"></a>Usos posibles</h3><p>Partiendo de dichas premisas es fácil entrever todo el potencial y casos dónde aplicarlos. Por ejemplo:</p>\n<ul>\n<li><p>Librerías de diseño <em>multiplataforma</em>.</p>\n</li>\n<li><p>Migración paulatina de aplicaciones <em>legacy</em>.</p>\n</li>\n<li><p>Integración dinámica en grandes soluciones <em>CMS</em>.</p>\n</li>\n<li><p>Mejoras funcionales en aplicaciones <em>server side</em>.</p>\n</li>\n</ul>\n<h2 id=\"1-2-Estandares-y-tecnologia\"><a href=\"#1-2-Estandares-y-tecnologia\" class=\"headerlink\" title=\"1.2 Estándares y tecnología\"></a>1.2 Estándares y tecnología</h2><p>Bajo el término Web Components se esconden diversas tecnologías. No todas ellas están al mismo nivel de aceptación, e incluso alguna no ha visto la luz, pero este es un esbozo de lo que tenemos:</p>\n<ul>\n<li><strong>Shadow DOM:</strong> Manipulación de un árbol en memoria antes de aplicar sus cambios al verdadero.</li>\n<li><strong>HTML templates:</strong> Fragmentos de HTML que no se utilizan en la carga de la página, pero que se pueden instanciar más adelante.</li>\n<li><strong>ES Modules:</strong> Inclusión de documentos JS en forma de módulos de manera estándar y ágil.</li>\n<li><strong>Custom elements:</strong> son etiquetas HTML con funciones encapsuladas, reutilizables y listas para usar en páginas y aplicaciones web.</li>\n</ul>\n<p>El estándar:</p>\n<blockquote>\n<p>Los <strong>Custom Web Elements</strong> sólo requieren <em>HTML y JavaScript</em>.</p>\n</blockquote>\n<p>La tecnología:</p>\n<blockquote>\n<p><em>Angular Elements</em> empaqueta tus componentes como <strong>Custom Web Elements</strong>.</p>\n</blockquote>\n<h1 id=\"2-Desarrollo-y-despliegue-con-Angular\"><a href=\"#2-Desarrollo-y-despliegue-con-Angular\" class=\"headerlink\" title=\"2. Desarrollo y despliegue con Angular\"></a>2. Desarrollo y despliegue con Angular</h1><h3 id=\"Un-componente-comun-de-Angular\"><a href=\"#Un-componente-comun-de-Angular\" class=\"headerlink\" title=\"Un componente común de Angular\"></a>Un componente común de Angular</h3><p>Partimos de un componente Angular normal y corriente. Un conversor (sí, ya sé que es sólo un miserable multiplicador) de monedas.</p>\n<p><code>libs\\currency\\src\\lib\\converter\\converter.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Amount to convert: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;amount&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;amount&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;convert()&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Converted amount: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;convertedAmount&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;convertedAmount&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">readonly</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>libs\\currency\\src\\lib\\converter\\converter.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;angular-boss-converter&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./converter.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./converter.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConverterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() factor = <span class=\"number\">1.1</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() amount = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() converted = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  convertedAmount = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">convert</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">convert</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">convertedAmount</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">amount</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">factor</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">converted</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">convertedAmount</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"El-componente-sigue-siendo-Angular\"><a href=\"#El-componente-sigue-siendo-Angular\" class=\"headerlink\" title=\"El componente sigue siendo Angular\"></a>El componente sigue siendo Angular</h3><p>Es tan normal y corriente que puedo importar su módulo y usarlo en cualquier aplicación Angular.</p>\n<p><code>apps\\warehouse\\src\\app\\app.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CurrencyModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular-boss/currency&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CurrencyModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>apps\\warehouse\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">angular-boss-converter</span> <span class=\"attr\">amount</span>=<span class=\"string\">&quot;100&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">factor</span>=<span class=\"string\">&quot;1.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular-boss-converter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1-Exponer-los-componentes\"><a href=\"#2-1-Exponer-los-componentes\" class=\"headerlink\" title=\"2.1 Exponer los componentes\"></a>2.1 Exponer los componentes</h2><p>Pero ahora todo va a cambiar. Necesitamos un proyecto de exportación. Nada especial. Yo le pongo aquí el prefijo external para hacer hincapié en su función de exportación.</p>\n<p><code>ng g @nrwl/angular:application external-currency</code></p>\n<p>Si el componente a exportar ya ha sido probado, y debería, en este proyecto no necesitamos nada más que el módulo. Así que puedes borrar tranquilamente el <code>AppComponent</code>, e incluso el <code>index.html</code>.</p>\n<p>Pongámonos con la exportación, para la cual hacen falta herramientas. Pues adelante con ellas. Incorporamos <strong>Angular Elements</strong>.</p>\n<p><code>ng add @angular/elements</code></p>\n<p>Ahora ya importamos el componente en el <em>array</em> <code>imports</code> y lo exportamos, pero no en <code>exports</code> ni tampoco en <code>bootstrap</code>. Vamos a incluirlo en <code>entryComponents</code>.</p>\n<p><code>apps\\external-currency\\src\\app\\app.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ConverterComponent</span>, <span class=\"title class_\">CurrencyModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular-boss/currency&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injector</span>, <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createCustomElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/elements&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;zone.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">CurrencyModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">entryComponents</span>: [<span class=\"title class_\">ConverterComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> injector: Injector</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngDoBootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = <span class=\"title function_\">createCustomElement</span>(<span class=\"title class_\">ConverterComponent</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">injector</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">injector</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;external-currency-converter&#x27;</span>, el);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Los <code>entryComponents</code> son cargados por Angular de forma imperativa, sin necesidad de incluirlos en un <em>html</em>. Menos mal porque este proyecto ni siquiera usa el <code>index.hml</code></p>\n<h3 id=\"ngDoBootstrap\"><a href=\"#ngDoBootstrap\" class=\"headerlink\" title=\"ngDoBootstrap\"></a>ngDoBootstrap</h3><p>Justamente la falta de componentes en el array <code>bootstrap</code> obliga a arrancar la aplicación mediante código. Esto lo hacemos programando en el <em>hook</em> <code>ngDoBootstrap()</code>, un método que será invocado al inicio y en el meteremos la lógica necesaria para definir el <strong>Web Component</strong>.</p>\n<p>Son solamente dos instrucciones que usarás para cada componente que quieras transformar en un elemento.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"title function_\">createCustomElement</span>(<span class=\"title class_\">ConverterComponent</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">injector</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">injector</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;external-currency-converter&#x27;</span>, el);</span><br></pre></td></tr></table></figure>\n\n<p>En la primera se crea el elemento mediante una función constructora que ofrece <code>@angular/elements</code>. Para ello necesita un puntero al componente original y el sistema de inyección de dependencias de Angular. (El cual a su vez reclamamos en el constructor del módulo).</p>\n<p>La segunda instrucción ya no es propia de Angular. Simplemente se le asigna al elemento recién creado el <em>selector tag</em> por el que será conocido.</p>\n<blockquote>\n<p>Atención a la importación de <code>zone.js</code>.</p>\n</blockquote>\n<p>Es necesaria para poder usar la detección de cambios en aplicaciones no Angular.</p>\n<h2 id=\"2-2-Compilacion-y-despliegue\"><a href=\"#2-2-Compilacion-y-despliegue\" class=\"headerlink\" title=\"2.2 Compilación y despliegue\"></a>2.2 Compilación y despliegue</h2><p>A partir de aquí se acabó el trabajo de programación. Y toca el más tedioso de operaciones de compilación y distribución.</p>\n<p>Afortunadamente podemos aplicar la magia de <code>@angular/elements</code> y utilidades como <code>ngx-build-plus</code> para compilarlo como un Web Component.</p>\n<h3 id=\"Agregar-herramientas-de-ayuda\"><a href=\"#Agregar-herramientas-de-ayuda\" class=\"headerlink\" title=\"Agregar herramientas de ayuda\"></a>Agregar herramientas de ayuda</h3><p>Lo primero es instalar una herramienta que mejora el proceso de compilación del CLI.</p>\n<p><code>ng add ngx-build-plus --project external-currency</code></p>\n<p>Esencialmente usa <em>webpack</em> para empaquetar el resultado de la compilación <code>build</code> nativa del CLI. Pero no necesitas profundizar en su interior para usarla en el día día.</p>\n<h3 id=\"Polyfills\"><a href=\"#Polyfills\" class=\"headerlink\" title=\"Polyfills\"></a>Polyfills</h3><p>Con el Internet Explorer hemos topado. Y otros navegadores antiguos, claro. El caso es que para que entiendan este nuevo estándar, tenemos que incluir una serie de arreglos llamados <em>polyfills</em>, que rellenan los huecos de incomprensión de los viejos exploradores. Así que para garantizar la compatibilidad en todos los navegadores instalamos todo lo necesario usando <code>ngx-build-plus</code>.</p>\n<p><code>ng g ngx-build-plus:wc-polyfill --project external-currency</code></p>\n<p>Ojo que en algunas versiones se equivoca en la generación de los <em>assets</em> y hay que moverlos a mano.</p>\n<hr>\n<h3 id=\"Compilacion\"><a href=\"#Compilacion\" class=\"headerlink\" title=\"Compilación\"></a>Compilación</h3><p>Ya solo falta lanzar el comando de compilación <code>ng build</code>. Pero para ajustar un poco más el resultado te propongo que deshabilites el nombrado con <em>hash</em> y por supuesto que uses algunos parámetros que ha incluido <code>ngx-build-plus</code>.</p>\n<p>Nombres legibles: <code>&quot;outputHashing&quot;: &quot;none&quot;,</code></p>\n<p>Generación: <code>ng build --prod --single-bundle --project external-currency</code></p>\n<h1 id=\"3-Consumo-en-HTML\"><a href=\"#3-Consumo-en-HTML\" class=\"headerlink\" title=\"3. Consumo en HTML\"></a>3. Consumo en HTML</h1><p>Ya está, el resultado se podrá utilizar en cualquier aplicación HTML. Por ejemplo en una página prácticamente vacía y completamente estándar.</p>\n<p><code>apps\\vanilla\\index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vanilla Currency<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/apps/vanilla/&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;image/x-icon&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">href</span>=<span class=\"string\">&quot;favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Convert money:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-currency-converter</span> <span class=\"attr\">amount</span>=<span class=\"string\">&quot;15&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">external-currency-converter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>¿Que no funciona? Obvio, el navegador no entiende el <em>tag</em> <code>external-currency-converter</code>. Necesitamos el JavaScript de la compilación anterior</p>\n<h2 id=\"3-1-Copiar\"><a href=\"#3-1-Copiar\" class=\"headerlink\" title=\"3.1 Copiar\"></a>3.1 Copiar</h2><p>Copia los dos archivos generados en la carpeta de distribución</p>\n<p><code>dist\\apps\\external-currency</code></p>\n<p>Y pégalos al lado del html que quieras. Por ejemplo:</p>\n<p><code>apps\\vanilla\\</code></p>\n<h2 id=\"3-2-Importar\"><a href=\"#3-2-Importar\" class=\"headerlink\" title=\"3.2 Importar\"></a>3.2 Importar</h2><p>Son dos porque hay versión clásica y modular. Importa la que necesites o ambas, y ya está.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;main-es2015.js&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;main-es5.js&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">nomodule</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Una web HTML pura, mostrando un componente creado en Angular</p>\n</blockquote>\n<p>Ahora ya tienes código creado en Angular pero que puedes integrar en cualquier web. Todo este proceso aún puede resultar tedioso, pero es el futuro. Continúa tu formación avanzada para crear aplicaciones Angular fijándote en el  <a href=\"https://github.com/angularbuilders/angular-blueprint/\">Angular Blueprint</a> creado por la iniciativa <a href=\"https://angular.builders/\">Angular.Builders</a> y verás como aprendes a programar grandes aplicaciones con Angular.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-19_elements.png\" alt=\"elementos-Angular-para-los-Web-Components\"></p>\n<p>La industria web vive un momento de esplendor y le crecen los <em>frameworks</em> como hierbas primaverales. Pero el estándar HTML no se queda atrás y evoluciona hacia tecnologías potentes y genéricas. <strong>Angular Elements</strong> promueve la reutilización de código en distintos frameworks para que puedas usar tus componentes Angular en otros entornos.</p>\n<p>Siendo como es Google una empresa <em>web first</em>, se esfuerzan en incorporar y adaptar de la mejor manera los estándares HTML a sus productos. Con el desarrollo de Angular siempre tuvieron la vista puesta en la tecnología de los <strong>Web Components</strong>. Buscando que los usos futuros del código se garantizasen más allá del framework de creación.</p>","more":"<p>Partiendo del código tal como quedó en <a href=\"../internacionalizacion-y-puesta-en-produccion-con-Angular/\">Internacionalización y puesta en producción</a>. Al finalizar tendrás unos componentes que podrás utilizar fuera de Angular.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\">AcademiaBinaria&#x2F;angular-boss</a></p>\n</blockquote>\n<h1 id=\"1-Componentes-independientes-del-framework\"><a href=\"#1-Componentes-independientes-del-framework\" class=\"headerlink\" title=\"1. Componentes independientes del framework\"></a>1. Componentes independientes del framework</h1><blockquote>\n<p>Hay lácteos que aguantan más que algunos frameworks.</p>\n</blockquote>\n<p>Seguramente este no sea el caso de Angular, ni de otros frameworks de adopción masiva como React, Vue o Svelte. Todos ellos tienen un presente brillante y un futuro garantizado al plazo que la tecnología pueda vislumbrar. Pero más temprano que tarde otra tecnología o paradigma disruptivo los desplazará. O al menos los obligará a cambiar tanto que sean irreconocibles.</p>\n<p>Para entonces, y también mientras tanto, nuestro código será cautivo del framework en el que nació. Pero eso cambiará con los <strong>Web Components</strong>.</p>\n<h2 id=\"1-1-Origen-y-potencial\"><a href=\"#1-1-Origen-y-potencial\" class=\"headerlink\" title=\"1.1 Origen y potencial\"></a>1.1 Origen y potencial</h2><p>Los <strong>Web Components</strong> son independientes de los <em>frameworks.</em> Esta es la idea clave; se pueden desarrollar con el estándar pelado de JavaScript o con cualquier framework moderno. Pero lo fundamental es que no exigen nada especial para ejecutarse. Esto permite la interoperabilidad y también extiende la vida útil de tus creaciones.</p>\n<h3 id=\"Usos-posibles\"><a href=\"#Usos-posibles\" class=\"headerlink\" title=\"Usos posibles\"></a>Usos posibles</h3><p>Partiendo de dichas premisas es fácil entrever todo el potencial y casos dónde aplicarlos. Por ejemplo:</p>\n<ul>\n<li><p>Librerías de diseño <em>multiplataforma</em>.</p>\n</li>\n<li><p>Migración paulatina de aplicaciones <em>legacy</em>.</p>\n</li>\n<li><p>Integración dinámica en grandes soluciones <em>CMS</em>.</p>\n</li>\n<li><p>Mejoras funcionales en aplicaciones <em>server side</em>.</p>\n</li>\n</ul>\n<h2 id=\"1-2-Estandares-y-tecnologia\"><a href=\"#1-2-Estandares-y-tecnologia\" class=\"headerlink\" title=\"1.2 Estándares y tecnología\"></a>1.2 Estándares y tecnología</h2><p>Bajo el término Web Components se esconden diversas tecnologías. No todas ellas están al mismo nivel de aceptación, e incluso alguna no ha visto la luz, pero este es un esbozo de lo que tenemos:</p>\n<ul>\n<li><strong>Shadow DOM:</strong> Manipulación de un árbol en memoria antes de aplicar sus cambios al verdadero.</li>\n<li><strong>HTML templates:</strong> Fragmentos de HTML que no se utilizan en la carga de la página, pero que se pueden instanciar más adelante.</li>\n<li><strong>ES Modules:</strong> Inclusión de documentos JS en forma de módulos de manera estándar y ágil.</li>\n<li><strong>Custom elements:</strong> son etiquetas HTML con funciones encapsuladas, reutilizables y listas para usar en páginas y aplicaciones web.</li>\n</ul>\n<p>El estándar:</p>\n<blockquote>\n<p>Los <strong>Custom Web Elements</strong> sólo requieren <em>HTML y JavaScript</em>.</p>\n</blockquote>\n<p>La tecnología:</p>\n<blockquote>\n<p><em>Angular Elements</em> empaqueta tus componentes como <strong>Custom Web Elements</strong>.</p>\n</blockquote>\n<h1 id=\"2-Desarrollo-y-despliegue-con-Angular\"><a href=\"#2-Desarrollo-y-despliegue-con-Angular\" class=\"headerlink\" title=\"2. Desarrollo y despliegue con Angular\"></a>2. Desarrollo y despliegue con Angular</h1><h3 id=\"Un-componente-comun-de-Angular\"><a href=\"#Un-componente-comun-de-Angular\" class=\"headerlink\" title=\"Un componente común de Angular\"></a>Un componente común de Angular</h3><p>Partimos de un componente Angular normal y corriente. Un conversor (sí, ya sé que es sólo un miserable multiplicador) de monedas.</p>\n<p><code>libs\\currency\\src\\lib\\converter\\converter.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Amount to convert: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;amount&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;amount&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         (<span class=\"attr\">change</span>)=<span class=\"string\">&quot;convert()&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Converted amount: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;convertedAmount&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;convertedAmount&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">readonly</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>libs\\currency\\src\\lib\\converter\\converter.component.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;angular-boss-converter&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./converter.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleUrls</span>: [<span class=\"string\">&#x27;./converter.component.css&#x27;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConverterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() factor = <span class=\"number\">1.1</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() amount = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() converted = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  convertedAmount = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">convert</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">convert</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">convertedAmount</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">amount</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">factor</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">converted</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">convertedAmount</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"El-componente-sigue-siendo-Angular\"><a href=\"#El-componente-sigue-siendo-Angular\" class=\"headerlink\" title=\"El componente sigue siendo Angular\"></a>El componente sigue siendo Angular</h3><p>Es tan normal y corriente que puedo importar su módulo y usarlo en cualquier aplicación Angular.</p>\n<p><code>apps\\warehouse\\src\\app\\app.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CurrencyModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular-boss/currency&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CurrencyModule</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>apps\\warehouse\\src\\app\\app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">angular-boss-converter</span> <span class=\"attr\">amount</span>=<span class=\"string\">&quot;100&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">factor</span>=<span class=\"string\">&quot;1.5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular-boss-converter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1-Exponer-los-componentes\"><a href=\"#2-1-Exponer-los-componentes\" class=\"headerlink\" title=\"2.1 Exponer los componentes\"></a>2.1 Exponer los componentes</h2><p>Pero ahora todo va a cambiar. Necesitamos un proyecto de exportación. Nada especial. Yo le pongo aquí el prefijo external para hacer hincapié en su función de exportación.</p>\n<p><code>ng g @nrwl/angular:application external-currency</code></p>\n<p>Si el componente a exportar ya ha sido probado, y debería, en este proyecto no necesitamos nada más que el módulo. Así que puedes borrar tranquilamente el <code>AppComponent</code>, e incluso el <code>index.html</code>.</p>\n<p>Pongámonos con la exportación, para la cual hacen falta herramientas. Pues adelante con ellas. Incorporamos <strong>Angular Elements</strong>.</p>\n<p><code>ng add @angular/elements</code></p>\n<p>Ahora ya importamos el componente en el <em>array</em> <code>imports</code> y lo exportamos, pero no en <code>exports</code> ni tampoco en <code>bootstrap</code>. Vamos a incluirlo en <code>entryComponents</code>.</p>\n<p><code>apps\\external-currency\\src\\app\\app.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ConverterComponent</span>, <span class=\"title class_\">CurrencyModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular-boss/currency&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injector</span>, <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createCustomElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/elements&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;zone.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">CurrencyModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">entryComponents</span>: [<span class=\"title class_\">ConverterComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> injector: Injector</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngDoBootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = <span class=\"title function_\">createCustomElement</span>(<span class=\"title class_\">ConverterComponent</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">injector</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">injector</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;external-currency-converter&#x27;</span>, el);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Los <code>entryComponents</code> son cargados por Angular de forma imperativa, sin necesidad de incluirlos en un <em>html</em>. Menos mal porque este proyecto ni siquiera usa el <code>index.hml</code></p>\n<h3 id=\"ngDoBootstrap\"><a href=\"#ngDoBootstrap\" class=\"headerlink\" title=\"ngDoBootstrap\"></a>ngDoBootstrap</h3><p>Justamente la falta de componentes en el array <code>bootstrap</code> obliga a arrancar la aplicación mediante código. Esto lo hacemos programando en el <em>hook</em> <code>ngDoBootstrap()</code>, un método que será invocado al inicio y en el meteremos la lógica necesaria para definir el <strong>Web Component</strong>.</p>\n<p>Son solamente dos instrucciones que usarás para cada componente que quieras transformar en un elemento.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"title function_\">createCustomElement</span>(<span class=\"title class_\">ConverterComponent</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">injector</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">injector</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;external-currency-converter&#x27;</span>, el);</span><br></pre></td></tr></table></figure>\n\n<p>En la primera se crea el elemento mediante una función constructora que ofrece <code>@angular/elements</code>. Para ello necesita un puntero al componente original y el sistema de inyección de dependencias de Angular. (El cual a su vez reclamamos en el constructor del módulo).</p>\n<p>La segunda instrucción ya no es propia de Angular. Simplemente se le asigna al elemento recién creado el <em>selector tag</em> por el que será conocido.</p>\n<blockquote>\n<p>Atención a la importación de <code>zone.js</code>.</p>\n</blockquote>\n<p>Es necesaria para poder usar la detección de cambios en aplicaciones no Angular.</p>\n<h2 id=\"2-2-Compilacion-y-despliegue\"><a href=\"#2-2-Compilacion-y-despliegue\" class=\"headerlink\" title=\"2.2 Compilación y despliegue\"></a>2.2 Compilación y despliegue</h2><p>A partir de aquí se acabó el trabajo de programación. Y toca el más tedioso de operaciones de compilación y distribución.</p>\n<p>Afortunadamente podemos aplicar la magia de <code>@angular/elements</code> y utilidades como <code>ngx-build-plus</code> para compilarlo como un Web Component.</p>\n<h3 id=\"Agregar-herramientas-de-ayuda\"><a href=\"#Agregar-herramientas-de-ayuda\" class=\"headerlink\" title=\"Agregar herramientas de ayuda\"></a>Agregar herramientas de ayuda</h3><p>Lo primero es instalar una herramienta que mejora el proceso de compilación del CLI.</p>\n<p><code>ng add ngx-build-plus --project external-currency</code></p>\n<p>Esencialmente usa <em>webpack</em> para empaquetar el resultado de la compilación <code>build</code> nativa del CLI. Pero no necesitas profundizar en su interior para usarla en el día día.</p>\n<h3 id=\"Polyfills\"><a href=\"#Polyfills\" class=\"headerlink\" title=\"Polyfills\"></a>Polyfills</h3><p>Con el Internet Explorer hemos topado. Y otros navegadores antiguos, claro. El caso es que para que entiendan este nuevo estándar, tenemos que incluir una serie de arreglos llamados <em>polyfills</em>, que rellenan los huecos de incomprensión de los viejos exploradores. Así que para garantizar la compatibilidad en todos los navegadores instalamos todo lo necesario usando <code>ngx-build-plus</code>.</p>\n<p><code>ng g ngx-build-plus:wc-polyfill --project external-currency</code></p>\n<p>Ojo que en algunas versiones se equivoca en la generación de los <em>assets</em> y hay que moverlos a mano.</p>\n<hr>\n<h3 id=\"Compilacion\"><a href=\"#Compilacion\" class=\"headerlink\" title=\"Compilación\"></a>Compilación</h3><p>Ya solo falta lanzar el comando de compilación <code>ng build</code>. Pero para ajustar un poco más el resultado te propongo que deshabilites el nombrado con <em>hash</em> y por supuesto que uses algunos parámetros que ha incluido <code>ngx-build-plus</code>.</p>\n<p>Nombres legibles: <code>&quot;outputHashing&quot;: &quot;none&quot;,</code></p>\n<p>Generación: <code>ng build --prod --single-bundle --project external-currency</code></p>\n<h1 id=\"3-Consumo-en-HTML\"><a href=\"#3-Consumo-en-HTML\" class=\"headerlink\" title=\"3. Consumo en HTML\"></a>3. Consumo en HTML</h1><p>Ya está, el resultado se podrá utilizar en cualquier aplicación HTML. Por ejemplo en una página prácticamente vacía y completamente estándar.</p>\n<p><code>apps\\vanilla\\index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vanilla Currency<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/apps/vanilla/&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;image/x-icon&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">href</span>=<span class=\"string\">&quot;favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Convert money:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-currency-converter</span> <span class=\"attr\">amount</span>=<span class=\"string\">&quot;15&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">external-currency-converter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>¿Que no funciona? Obvio, el navegador no entiende el <em>tag</em> <code>external-currency-converter</code>. Necesitamos el JavaScript de la compilación anterior</p>\n<h2 id=\"3-1-Copiar\"><a href=\"#3-1-Copiar\" class=\"headerlink\" title=\"3.1 Copiar\"></a>3.1 Copiar</h2><p>Copia los dos archivos generados en la carpeta de distribución</p>\n<p><code>dist\\apps\\external-currency</code></p>\n<p>Y pégalos al lado del html que quieras. Por ejemplo:</p>\n<p><code>apps\\vanilla\\</code></p>\n<h2 id=\"3-2-Importar\"><a href=\"#3-2-Importar\" class=\"headerlink\" title=\"3.2 Importar\"></a>3.2 Importar</h2><p>Son dos porque hay versión clásica y modular. Importa la que necesites o ambas, y ya está.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;main-es2015.js&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;main-es5.js&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">nomodule</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Una web HTML pura, mostrando un componente creado en Angular</p>\n</blockquote>\n<p>Ahora ya tienes código creado en Angular pero que puedes integrar en cualquier web. Todo este proceso aún puede resultar tedioso, pero es el futuro. Continúa tu formación avanzada para crear aplicaciones Angular fijándote en el  <a href=\"https://github.com/angularbuilders/angular-blueprint/\">Angular Blueprint</a> creado por la iniciativa <a href=\"https://angular.builders/\">Angular.Builders</a> y verás como aprendes a programar grandes aplicaciones con Angular.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Flujo de datos entre componentes Angular","date":"2020-04-16T14:10:44.000Z","thumbnail":"/css/images/angular-4_flow.png","_content":"![flujo-de-datos-entre-componentes-angular](/images/tutorial-angular-4_flow.png)\n\nLos desarrollos profesionales son complicados pero **con Angular tenemos soluciones de comunicación simples para pantallas complejas**. Mediante el desarrollo de componentes atómicos y reutilizables Angular 9 favorece la implementación de buenas prácticas.\n\nCrear y comunicar muchos componentes puede llevarnos a código difícil de seguir. La librería `@angular/forms` ofrece *tuberías de comunicación* para **mantener el flujo de datos bajo control**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/). Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en componentes.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n\n# 1. Comunicación entre componentes\n\nLas aplicaciones web en las que destaca Angular suelen ser complejas y con mucha variedad funcional en diversas páginas. A menudo esas páginas están repletas de formularios, informes y botones. La solución viene de mano del viejo principio _divide y vencerás_: **La componentización**\n\n## 1.1. Necesidad de comunicación\n\nEl _framework_ permite y recomienda repartir el trabajo en múltiples componentes de responsabilidad única. También es práctica común el crear páginas específicas para situaciones concretas aunque relacionadas. Por supuesto que estructuras como el menú de navegación o secciones de estado general necesitan conocer datos provenientes de las páginas. Nada está completamente asilado. Esto nos enfrenta la problema de **comunicar componentes**.\n\n## 1.2. Escenarios\n\nLas situaciones que te encontrarás caerán en alguna de estas tres categorías para las que hay soluciones específicas.\n\n### Comunicar componentes acoplados\nSolemos empezar creando un componente por página. Pero es normal que esa página se complique y la solución a la complejidad es la **división en componentes y reparto de responsabilidades**. Dado que están en una misma página existe cierto acoplamiento entre ellos y eso nos facilitará la comunicación.\n\n### Comunicar componentes en páginas distintas\nCuando los componentes se cargan en rutas distintas ya no hay forma de comunicarlos directamente. Pero lo resolveremos fácilmente **usando las capacidades del router.**\n\n### Comunicar componentes entre estructuras dinámicas\nLa situación más compleja se da cuando queremos comunicar componentes o servicios desacoplados pero sin cambio de página. En este caso hará falta un **mediador observable**.\n\n\n# 2. El patrón Contendor / Presentadores\n\nEn **arquitectura de software** cuando encontramos una solución a un problema recurrente le ponemos un nombre y tratamos de utilizarlo siempre que podemos. Obviamente es una elección del programador y siempre tiene un coste que debe valorar. Aquí la ventaja buscada es claramente una: **el reparto de responsabilidades**.\n\n## 2.1 El patrón\n\nEn este caso **el patrón contenedor/presentadores** estipula que haya un único componente responsable de obtener, mutar y guardar el estado. Será el componente contenedor. Los presentadores serán responsables de.. ejem, presentar la información y los elementos de interacción con el usuario. Las ventajas derivadas son: mayor facilidad para el _testeo_ y mayores posibilidades de reutilización de presentadores.\n\n> A este patrón a veces se le conoce como _parent/children_ por la jerarquía HTML que genera.\n\nVeamos una implementación sencilla. Haremos una interfaz mínima para simular el manejo de un coche. Habrá pedales de aceleración y freno, y un cuadro dónde se refleje la velocidad. Para todo ello vamos a usa el _Angular CLI_ y crear un módulo y sus componentes base.\n\n```console\nng g m car --route car --module app-routing.module\nng g c car/car/display-presenter\nng g c car/car/pedals-presenter\n```\n\n## 2.2 El contenedor\n\nEn el componente contenedor tendremos **una vista muy sencilla y un controlador más complejo**. La vista solamente será la composición de los componentes presentadores, pero el controlador tendrá que obtener datos, aplicarles lógica de negocio y guardarlos cuando corresponda.\n\n> No es habitual asignarle un sufijo al nombre del componente para indicar que es el contenedor. Suele ser suficiente el verlo en la raíz de la jerarquía de carpetas.\n\n```html\n<ab-display-presenter [model]=\"car.name\"\n                      [currentSpeed]=\"car.currentSpeed\"\n                      [topSpeed]=\"car.maxSpeed\"\n                      [units]=\"'Km/h'\">\n</ab-display-presenter>\n<ab-pedals-presenter (brake)=\"onBrake($event)\"\n                     [brakeDisabled]=\"disableBrake\"\n                     (throttle)=\"onThrottle($event)\"\n                     [throttleDisabled]=\"disableThrottle\">\n</ab-pedals-presenter>\n```\n\nObviamente este HTML visto así aún no será funcional. Por supuesto, los componentes presentadores existen, pero... ¿Qué son esos atributos tan raros?\n\nVemos que usa los componentes presentadores `DisplayPresenter` y `PedalsPresenter` enviándoles información y suscribiéndose a sus eventos. Concretaremos esta funcionalidad más adelante.\n\nAhora sigamos en la parte lógica de nuestro componente contenedor. Es la clase controlador y se ocupa de obtener y manipular los datos.\n\n```typescript\nexport class CarComponent implements OnInit {\n  car: CarModel;\n  disableBrake: boolean;\n  disableThrottle: boolean;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.car = { name: 'Roadster', maxSpeed: 120, currentSpeed: 0 };\n    this.checkLimits();\n  }\n  onBrake(drive: number) {\n    this.car.currentSpeed -= this.getDelta(drive);\n    this.checkLimits();\n  }\n  onThrottle(drive: number) {\n    this.car.currentSpeed += this.getDelta(drive);\n    this.checkLimits();\n  }\n\n  private getDelta = (drive: number) => drive + (this.car.maxSpeed - this.car.currentSpeed) / 10;\n  private checkLimits() {\n    this.disableBrake = false;\n    this.disableThrottle = false;\n    if (this.car.currentSpeed <= 0) {\n      this.car.currentSpeed = 0;\n      this.disableBrake = true;\n    } else if (this.car.currentSpeed >= this.car.maxSpeed) {\n      this.car.currentSpeed = this.car.maxSpeed;\n      this.disableThrottle = true;\n    }\n  }\n}\n```\n\nLo dicho, _la clase controladora del componente contenedor retiene el grueso de la funcionalidad_. En este caso inicializar una instancia de un coche y mantener sus velocidad en los límites lógicos respondiendo a las acciones del usuario conductor.\n\n\n## 2.3 Envío hacia el presentador con @Input()\n\nEsta comunicación _hacia abajo_ envía la información **desde el contenedor hacia el presentador**. Es similar a como una plantilla recibe la información desde el controlador.\n\n\n### @Input()\n\nPara que una vista muestre datos tiene que usar directivas como `{{ model }}` asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede **recibirlo desde el exterior**. La novedad es hacer que lo reciba vía *html*.\n\n```html\n<h3> {{ model }} </h3>\n<h4> Top speed: {{ topSpeed | number:'1.0-0' }}</h4>\n<div>\n  <div [ngClass]=\"getSpeedClass()\">\n    {{ currentSpeed | number:'1.2-2' }} {{ units }}\n  </div>\n  <progress [value]=\"currentSpeed\"\n            [max]=\"topSpeed\">\n  </progress>\n</div>\n```\n\n\nEmpieza por decorar con `@Input()` la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo `display.component.ts`.\n\n```typescript\nexport class DisplayPresenterComponent implements OnInit {\n  @Input() model: string;\n  @Input() currentSpeed: number;\n  @Input() topSpeed: number;\n  @Input() units: string;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  getSpeedClass = () => (this.currentSpeed < this.getThreshold() ? 'good' : 'warning');\n\n  private getThreshold = () => this.topSpeed * 0.8;\n}\n```\n\nAhora puedes enviarle datos a este componente desde el *html* de su consumidor. Por ejemplo desde `car.component.html` le puedo enviar una variable o cualquier expresión evaluable. Recordemos como usa `[propiedad]=\"expresion\"` en el elemento presentador.\n\n```html\n<ab-display-presenter [model]=\"car.name\"\n                      [currentSpeed]=\"car.currentSpeed\"\n                      [topSpeed]=\"car.maxSpeed\"\n                      [units]=\"'Km/h'\">\n</ab-display-presenter>\n```\n\nEn la clase controladora del presentador quedan responsabilidades reducidas a temas específicos como determinar las clases _css_ apropiadas o transformar los datos para su presentación.\n\nEstoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. Este mismo patrón puede y debe repetirse hasta **descomponer las vistas en estructuras ridículamente simples** que nos eviten repeticiones absurdas en código.\n\nDe esta forma es fácil crear componentes reutilizables; y queda muy limpio el **envío de datos hacia abajo**. Pero, ¿y hacia arriba?.\n\n\n## 2.4. Respuesta del presentador con @Output()\n\nLos componentes de nivel inferior no sólo se dedican a presentar datos, también presentan controles. Con ellos el usuario podrá crear, modificar o eliminar los datos que quiera. Aunque no directamente; para hacerlo **comunican el cambio requerido al contenedor de nivel superior**.\n\n### @Output()\n\nPor ejemplo, el componente `PedalsComponent` permite acelerar y frenar. Bueno, realmente permite que el usuario diga que lo quiere hacer; los cambios se harán más arriba. Veamos lo básico del `pedals.component.html` antes de nada:\n\n```html\n<h4> Pedals: </h4>\n<form>\n  <input value=\"brake 🐌\"\n         class=\"secondary\"\n         type=\"button\"\n         [disabled]=\"brakeDisabled\"\n         (click)=\"brake.emit(1)\" />\n  <input value=\"throttle 🐰\"\n         class=\"tertiary\"\n         type=\"button\"\n         [disabled]=\"throttleDisabled\"\n         (click)=\"throttle.emit(1)\" />\n</form>\n```\n\nClaramente son un par de botones que con el evento `(click)` responden a acciones del usuario. En este caso se manifiesta una intención de acelerar o frenar el coche. Pero el método del controlador no actúa directamente sobre los datos.\n\n> Si lo hiciera sería más difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación que se verán más adelante...\n\nEn su lugar, lo que hace es **emitir un evento** confiando que alguien lo reciba y actúe en consecuencia. Por ejemplo la emisión de la instrucción de frenado se realiza mediante la propiedad `brake` decorada con `@Output() brake = new EventEmitter<number>();`. Dicha propiedad será una instancia de un emisor de eventos que mediante el método `.next()` va a emitir la señal de frenado hacia arriba.\n\n```typescript\nexport class PedalsPresenterComponent implements OnInit {\n  @Input() brakeDisabled: boolean;\n  @Input() throttleDisabled: boolean;\n  @Output() brake = new EventEmitter<number>();\n  @Output() throttle = new EventEmitter<number>();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n```\n\nMientras tanto, **en el contenedor la vista se subscribe al evento** `(brake)` como si este fuese un evento nativo y llama a los métodos que manipulan los datos de verdad.\n\n```html\n<ab-pedals-presenter (brake)=\"onBrake($event)\"\n                     [brakeDisabled]=\"disableBrake\"\n                     (throttle)=\"onThrottle($event)\"\n                     [throttleDisabled]=\"disableThrottle\">\n</ab-pedals-presenter>\n```\n\nLas propiedades *output* también pueden enviar argumentos que serán recibidos mediante el identificador `$event` propio del framework. Se declaran especificando el tipo del argumento en el genérico del constructor de `EventEmitter<any>`.\n\n\nEn el controlador ya podemos operar con los datos. El método `onBrake(drive: number)` accede y modifica el valor de la velocidad y lo notifica automáticamente hacia abajo.\n\nDe esta manera se cierra el círculo. Los componentes de bajo nivel pueden **recibir datos para ser presentados o emitir eventos para modificarlos**. El componente de nivel superior es el **único responsable de obtener y actuar** sobre los datos.\n\n\n# 3. Comunicaciones entre páginas o estructuras\n\n## 3.1 Comunicación entre distintas páginas\n\nEn las aplicaciones hay **comunicaciones de estado más allá de la página actual**. La comunicación entre páginas es responsabilidad del `@angular/router`. Una vez activada una ruta, el sistema carga un componente en el `<router-outlet>` correspondiente. No hay forma de comunicarse hacia _(arriba) o [abajo]_ con algo desconocido. De una página a otra tampoco es problema pues la comunicación va mediante los parámetros de la *url*.\n\nYa hemos usado esta comunicación anteriormente en el tema [2-spa](../paginas-y-rutas-angular-spa/) el componente `CoursesComponent` es capaz de recibir por parámetros una identificación de un autor. Esa información es el resultado de una acción del usuario en otra pantalla programada en el componente `HomeComponent`. Por tanto es una comunicación entre componentes que viven en páginas distintas, visto desde muy arriba es una situación en la que ambos son *controladores hermanos*.\n\n> Desde luego habrá que mejorar el acceso y control de los datos que por ahora es muy rudimentario. Lo haremos en próximos pasos. Primero mediante  [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) y después usando [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/)\n\n## 2.2 Comunicación entre estructuras desacopladas\n\nAún estando en la misma ruta, no siempre se podrán conocer los componentes, por ejemplo el `HeaderComponent` nunca podrá acceder al `PedalsPresenterComponent`; y por tanto no se podrán usar sus `[propiedades] y (eventos)`\n\n### 2.2.1 El layout principal y los componentes por rutas o páginas.\n\nEsta es una situación habitual, quieres **comunicar la vista de negocio activa con elementos generales** de la página. Por ejemplo podrías querer mostrar la velocidad máxima alcanzada en la barra del menú o un un mensaje emergente cada vez que se alcance la velocidad límite. En este caso, el `<router-outlet>` es una barrera que impide usar el patrón contenedor-presentador pues no se puede predecir el contenido dinámico que carga el `RouterOutlet`.\n\n### 2.2.2 Múltiples niveles de presentadores.\n\nCuando las pantallas se hacen realmente complejas empiezan a surgir **árboles de componentes** de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. Enviar hacia abajo las `[propiedades]` es tedioso, pero peor aún es hacer burbujear los `(eventos)` por varias capas de presentadores.\n\nLa solución en ambos casos pasa por permitir que *algunos componentes presentadores tengan su propio control de datos*. Este tipo de comunicaciones técnicamente se resuelve mediante *Observables* y merece un capítulo especial que se verá más adelante en esta serie. Incluso en situaciones complejas habrá que optar por patrones avanzados de gestión de estado como pueda ser *Redux*.\n\nPor ahora tienes una aplicación en *Angular* que comunica datos y cambios entre componentes de una misma página. Sigue el tutorial para añadirle [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) mientras aprendes a programar con Angular 8. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/ng-4-Flujo-de-datos-entre-componentes-Angular.md","raw":"---\ntitle: Flujo de datos entre componentes Angular\npermalink: flujo-de-datos-entre-componentes-angular\ndate: 2020-04-16 16:10:44\ntags:\n- Angular\n- Components\n- Tutorial\n- Introducción\n- Angular9\n- Angular2\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-4_flow.png\n---\n![flujo-de-datos-entre-componentes-angular](/images/tutorial-angular-4_flow.png)\n\nLos desarrollos profesionales son complicados pero **con Angular tenemos soluciones de comunicación simples para pantallas complejas**. Mediante el desarrollo de componentes atómicos y reutilizables Angular 9 favorece la implementación de buenas prácticas.\n\nCrear y comunicar muchos componentes puede llevarnos a código difícil de seguir. La librería `@angular/forms` ofrece *tuberías de comunicación* para **mantener el flujo de datos bajo control**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/). Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en componentes.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n\n# 1. Comunicación entre componentes\n\nLas aplicaciones web en las que destaca Angular suelen ser complejas y con mucha variedad funcional en diversas páginas. A menudo esas páginas están repletas de formularios, informes y botones. La solución viene de mano del viejo principio _divide y vencerás_: **La componentización**\n\n## 1.1. Necesidad de comunicación\n\nEl _framework_ permite y recomienda repartir el trabajo en múltiples componentes de responsabilidad única. También es práctica común el crear páginas específicas para situaciones concretas aunque relacionadas. Por supuesto que estructuras como el menú de navegación o secciones de estado general necesitan conocer datos provenientes de las páginas. Nada está completamente asilado. Esto nos enfrenta la problema de **comunicar componentes**.\n\n## 1.2. Escenarios\n\nLas situaciones que te encontrarás caerán en alguna de estas tres categorías para las que hay soluciones específicas.\n\n### Comunicar componentes acoplados\nSolemos empezar creando un componente por página. Pero es normal que esa página se complique y la solución a la complejidad es la **división en componentes y reparto de responsabilidades**. Dado que están en una misma página existe cierto acoplamiento entre ellos y eso nos facilitará la comunicación.\n\n### Comunicar componentes en páginas distintas\nCuando los componentes se cargan en rutas distintas ya no hay forma de comunicarlos directamente. Pero lo resolveremos fácilmente **usando las capacidades del router.**\n\n### Comunicar componentes entre estructuras dinámicas\nLa situación más compleja se da cuando queremos comunicar componentes o servicios desacoplados pero sin cambio de página. En este caso hará falta un **mediador observable**.\n\n\n# 2. El patrón Contendor / Presentadores\n\nEn **arquitectura de software** cuando encontramos una solución a un problema recurrente le ponemos un nombre y tratamos de utilizarlo siempre que podemos. Obviamente es una elección del programador y siempre tiene un coste que debe valorar. Aquí la ventaja buscada es claramente una: **el reparto de responsabilidades**.\n\n## 2.1 El patrón\n\nEn este caso **el patrón contenedor/presentadores** estipula que haya un único componente responsable de obtener, mutar y guardar el estado. Será el componente contenedor. Los presentadores serán responsables de.. ejem, presentar la información y los elementos de interacción con el usuario. Las ventajas derivadas son: mayor facilidad para el _testeo_ y mayores posibilidades de reutilización de presentadores.\n\n> A este patrón a veces se le conoce como _parent/children_ por la jerarquía HTML que genera.\n\nVeamos una implementación sencilla. Haremos una interfaz mínima para simular el manejo de un coche. Habrá pedales de aceleración y freno, y un cuadro dónde se refleje la velocidad. Para todo ello vamos a usa el _Angular CLI_ y crear un módulo y sus componentes base.\n\n```console\nng g m car --route car --module app-routing.module\nng g c car/car/display-presenter\nng g c car/car/pedals-presenter\n```\n\n## 2.2 El contenedor\n\nEn el componente contenedor tendremos **una vista muy sencilla y un controlador más complejo**. La vista solamente será la composición de los componentes presentadores, pero el controlador tendrá que obtener datos, aplicarles lógica de negocio y guardarlos cuando corresponda.\n\n> No es habitual asignarle un sufijo al nombre del componente para indicar que es el contenedor. Suele ser suficiente el verlo en la raíz de la jerarquía de carpetas.\n\n```html\n<ab-display-presenter [model]=\"car.name\"\n                      [currentSpeed]=\"car.currentSpeed\"\n                      [topSpeed]=\"car.maxSpeed\"\n                      [units]=\"'Km/h'\">\n</ab-display-presenter>\n<ab-pedals-presenter (brake)=\"onBrake($event)\"\n                     [brakeDisabled]=\"disableBrake\"\n                     (throttle)=\"onThrottle($event)\"\n                     [throttleDisabled]=\"disableThrottle\">\n</ab-pedals-presenter>\n```\n\nObviamente este HTML visto así aún no será funcional. Por supuesto, los componentes presentadores existen, pero... ¿Qué son esos atributos tan raros?\n\nVemos que usa los componentes presentadores `DisplayPresenter` y `PedalsPresenter` enviándoles información y suscribiéndose a sus eventos. Concretaremos esta funcionalidad más adelante.\n\nAhora sigamos en la parte lógica de nuestro componente contenedor. Es la clase controlador y se ocupa de obtener y manipular los datos.\n\n```typescript\nexport class CarComponent implements OnInit {\n  car: CarModel;\n  disableBrake: boolean;\n  disableThrottle: boolean;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.car = { name: 'Roadster', maxSpeed: 120, currentSpeed: 0 };\n    this.checkLimits();\n  }\n  onBrake(drive: number) {\n    this.car.currentSpeed -= this.getDelta(drive);\n    this.checkLimits();\n  }\n  onThrottle(drive: number) {\n    this.car.currentSpeed += this.getDelta(drive);\n    this.checkLimits();\n  }\n\n  private getDelta = (drive: number) => drive + (this.car.maxSpeed - this.car.currentSpeed) / 10;\n  private checkLimits() {\n    this.disableBrake = false;\n    this.disableThrottle = false;\n    if (this.car.currentSpeed <= 0) {\n      this.car.currentSpeed = 0;\n      this.disableBrake = true;\n    } else if (this.car.currentSpeed >= this.car.maxSpeed) {\n      this.car.currentSpeed = this.car.maxSpeed;\n      this.disableThrottle = true;\n    }\n  }\n}\n```\n\nLo dicho, _la clase controladora del componente contenedor retiene el grueso de la funcionalidad_. En este caso inicializar una instancia de un coche y mantener sus velocidad en los límites lógicos respondiendo a las acciones del usuario conductor.\n\n\n## 2.3 Envío hacia el presentador con @Input()\n\nEsta comunicación _hacia abajo_ envía la información **desde el contenedor hacia el presentador**. Es similar a como una plantilla recibe la información desde el controlador.\n\n\n### @Input()\n\nPara que una vista muestre datos tiene que usar directivas como `{{ model }}` asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede **recibirlo desde el exterior**. La novedad es hacer que lo reciba vía *html*.\n\n```html\n<h3> {{ model }} </h3>\n<h4> Top speed: {{ topSpeed | number:'1.0-0' }}</h4>\n<div>\n  <div [ngClass]=\"getSpeedClass()\">\n    {{ currentSpeed | number:'1.2-2' }} {{ units }}\n  </div>\n  <progress [value]=\"currentSpeed\"\n            [max]=\"topSpeed\">\n  </progress>\n</div>\n```\n\n\nEmpieza por decorar con `@Input()` la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo `display.component.ts`.\n\n```typescript\nexport class DisplayPresenterComponent implements OnInit {\n  @Input() model: string;\n  @Input() currentSpeed: number;\n  @Input() topSpeed: number;\n  @Input() units: string;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  getSpeedClass = () => (this.currentSpeed < this.getThreshold() ? 'good' : 'warning');\n\n  private getThreshold = () => this.topSpeed * 0.8;\n}\n```\n\nAhora puedes enviarle datos a este componente desde el *html* de su consumidor. Por ejemplo desde `car.component.html` le puedo enviar una variable o cualquier expresión evaluable. Recordemos como usa `[propiedad]=\"expresion\"` en el elemento presentador.\n\n```html\n<ab-display-presenter [model]=\"car.name\"\n                      [currentSpeed]=\"car.currentSpeed\"\n                      [topSpeed]=\"car.maxSpeed\"\n                      [units]=\"'Km/h'\">\n</ab-display-presenter>\n```\n\nEn la clase controladora del presentador quedan responsabilidades reducidas a temas específicos como determinar las clases _css_ apropiadas o transformar los datos para su presentación.\n\nEstoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. Este mismo patrón puede y debe repetirse hasta **descomponer las vistas en estructuras ridículamente simples** que nos eviten repeticiones absurdas en código.\n\nDe esta forma es fácil crear componentes reutilizables; y queda muy limpio el **envío de datos hacia abajo**. Pero, ¿y hacia arriba?.\n\n\n## 2.4. Respuesta del presentador con @Output()\n\nLos componentes de nivel inferior no sólo se dedican a presentar datos, también presentan controles. Con ellos el usuario podrá crear, modificar o eliminar los datos que quiera. Aunque no directamente; para hacerlo **comunican el cambio requerido al contenedor de nivel superior**.\n\n### @Output()\n\nPor ejemplo, el componente `PedalsComponent` permite acelerar y frenar. Bueno, realmente permite que el usuario diga que lo quiere hacer; los cambios se harán más arriba. Veamos lo básico del `pedals.component.html` antes de nada:\n\n```html\n<h4> Pedals: </h4>\n<form>\n  <input value=\"brake 🐌\"\n         class=\"secondary\"\n         type=\"button\"\n         [disabled]=\"brakeDisabled\"\n         (click)=\"brake.emit(1)\" />\n  <input value=\"throttle 🐰\"\n         class=\"tertiary\"\n         type=\"button\"\n         [disabled]=\"throttleDisabled\"\n         (click)=\"throttle.emit(1)\" />\n</form>\n```\n\nClaramente son un par de botones que con el evento `(click)` responden a acciones del usuario. En este caso se manifiesta una intención de acelerar o frenar el coche. Pero el método del controlador no actúa directamente sobre los datos.\n\n> Si lo hiciera sería más difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación que se verán más adelante...\n\nEn su lugar, lo que hace es **emitir un evento** confiando que alguien lo reciba y actúe en consecuencia. Por ejemplo la emisión de la instrucción de frenado se realiza mediante la propiedad `brake` decorada con `@Output() brake = new EventEmitter<number>();`. Dicha propiedad será una instancia de un emisor de eventos que mediante el método `.next()` va a emitir la señal de frenado hacia arriba.\n\n```typescript\nexport class PedalsPresenterComponent implements OnInit {\n  @Input() brakeDisabled: boolean;\n  @Input() throttleDisabled: boolean;\n  @Output() brake = new EventEmitter<number>();\n  @Output() throttle = new EventEmitter<number>();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n```\n\nMientras tanto, **en el contenedor la vista se subscribe al evento** `(brake)` como si este fuese un evento nativo y llama a los métodos que manipulan los datos de verdad.\n\n```html\n<ab-pedals-presenter (brake)=\"onBrake($event)\"\n                     [brakeDisabled]=\"disableBrake\"\n                     (throttle)=\"onThrottle($event)\"\n                     [throttleDisabled]=\"disableThrottle\">\n</ab-pedals-presenter>\n```\n\nLas propiedades *output* también pueden enviar argumentos que serán recibidos mediante el identificador `$event` propio del framework. Se declaran especificando el tipo del argumento en el genérico del constructor de `EventEmitter<any>`.\n\n\nEn el controlador ya podemos operar con los datos. El método `onBrake(drive: number)` accede y modifica el valor de la velocidad y lo notifica automáticamente hacia abajo.\n\nDe esta manera se cierra el círculo. Los componentes de bajo nivel pueden **recibir datos para ser presentados o emitir eventos para modificarlos**. El componente de nivel superior es el **único responsable de obtener y actuar** sobre los datos.\n\n\n# 3. Comunicaciones entre páginas o estructuras\n\n## 3.1 Comunicación entre distintas páginas\n\nEn las aplicaciones hay **comunicaciones de estado más allá de la página actual**. La comunicación entre páginas es responsabilidad del `@angular/router`. Una vez activada una ruta, el sistema carga un componente en el `<router-outlet>` correspondiente. No hay forma de comunicarse hacia _(arriba) o [abajo]_ con algo desconocido. De una página a otra tampoco es problema pues la comunicación va mediante los parámetros de la *url*.\n\nYa hemos usado esta comunicación anteriormente en el tema [2-spa](../paginas-y-rutas-angular-spa/) el componente `CoursesComponent` es capaz de recibir por parámetros una identificación de un autor. Esa información es el resultado de una acción del usuario en otra pantalla programada en el componente `HomeComponent`. Por tanto es una comunicación entre componentes que viven en páginas distintas, visto desde muy arriba es una situación en la que ambos son *controladores hermanos*.\n\n> Desde luego habrá que mejorar el acceso y control de los datos que por ahora es muy rudimentario. Lo haremos en próximos pasos. Primero mediante  [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) y después usando [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/)\n\n## 2.2 Comunicación entre estructuras desacopladas\n\nAún estando en la misma ruta, no siempre se podrán conocer los componentes, por ejemplo el `HeaderComponent` nunca podrá acceder al `PedalsPresenterComponent`; y por tanto no se podrán usar sus `[propiedades] y (eventos)`\n\n### 2.2.1 El layout principal y los componentes por rutas o páginas.\n\nEsta es una situación habitual, quieres **comunicar la vista de negocio activa con elementos generales** de la página. Por ejemplo podrías querer mostrar la velocidad máxima alcanzada en la barra del menú o un un mensaje emergente cada vez que se alcance la velocidad límite. En este caso, el `<router-outlet>` es una barrera que impide usar el patrón contenedor-presentador pues no se puede predecir el contenido dinámico que carga el `RouterOutlet`.\n\n### 2.2.2 Múltiples niveles de presentadores.\n\nCuando las pantallas se hacen realmente complejas empiezan a surgir **árboles de componentes** de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. Enviar hacia abajo las `[propiedades]` es tedioso, pero peor aún es hacer burbujear los `(eventos)` por varias capas de presentadores.\n\nLa solución en ambos casos pasa por permitir que *algunos componentes presentadores tengan su propio control de datos*. Este tipo de comunicaciones técnicamente se resuelve mediante *Observables* y merece un capítulo especial que se verá más adelante en esta serie. Incluso en situaciones complejas habrá que optar por patrones avanzados de gestión de estado como pueda ser *Redux*.\n\nPor ahora tienes una aplicación en *Angular* que comunica datos y cambios entre componentes de una misma página. Sigue el tutorial para añadirle [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) mientras aprendes a programar con Angular 8. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"ng-4-Flujo-de-datos-entre-componentes-Angular","published":1,"updated":"2023-07-02T10:25:58.477Z","__permalink":"flujo-de-datos-entre-componentes-angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fg001ce0964n7t7boi","content":"<p><img src=\"/images/tutorial-angular-4_flow.png\" alt=\"flujo-de-datos-entre-componentes-angular\"></p>\n<p>Los desarrollos profesionales son complicados pero <strong>con Angular tenemos soluciones de comunicación simples para pantallas complejas</strong>. Mediante el desarrollo de componentes atómicos y reutilizables Angular 9 favorece la implementación de buenas prácticas.</p>\n<p>Crear y comunicar muchos componentes puede llevarnos a código difícil de seguir. La librería <code>@angular/forms</code> ofrece <em>tuberías de comunicación</em> para <strong>mantener el flujo de datos bajo control</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a>. Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en componentes.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Comunicacion-entre-componentes\"><a href=\"#1-Comunicacion-entre-componentes\" class=\"headerlink\" title=\"1. Comunicación entre componentes\"></a>1. Comunicación entre componentes</h1><p>Las aplicaciones web en las que destaca Angular suelen ser complejas y con mucha variedad funcional en diversas páginas. A menudo esas páginas están repletas de formularios, informes y botones. La solución viene de mano del viejo principio <em>divide y vencerás</em>: <strong>La componentización</strong></p>\n<h2 id=\"1-1-Necesidad-de-comunicacion\"><a href=\"#1-1-Necesidad-de-comunicacion\" class=\"headerlink\" title=\"1.1. Necesidad de comunicación\"></a>1.1. Necesidad de comunicación</h2><p>El <em>framework</em> permite y recomienda repartir el trabajo en múltiples componentes de responsabilidad única. También es práctica común el crear páginas específicas para situaciones concretas aunque relacionadas. Por supuesto que estructuras como el menú de navegación o secciones de estado general necesitan conocer datos provenientes de las páginas. Nada está completamente asilado. Esto nos enfrenta la problema de <strong>comunicar componentes</strong>.</p>\n<h2 id=\"1-2-Escenarios\"><a href=\"#1-2-Escenarios\" class=\"headerlink\" title=\"1.2. Escenarios\"></a>1.2. Escenarios</h2><p>Las situaciones que te encontrarás caerán en alguna de estas tres categorías para las que hay soluciones específicas.</p>\n<h3 id=\"Comunicar-componentes-acoplados\"><a href=\"#Comunicar-componentes-acoplados\" class=\"headerlink\" title=\"Comunicar componentes acoplados\"></a>Comunicar componentes acoplados</h3><p>Solemos empezar creando un componente por página. Pero es normal que esa página se complique y la solución a la complejidad es la <strong>división en componentes y reparto de responsabilidades</strong>. Dado que están en una misma página existe cierto acoplamiento entre ellos y eso nos facilitará la comunicación.</p>\n<h3 id=\"Comunicar-componentes-en-paginas-distintas\"><a href=\"#Comunicar-componentes-en-paginas-distintas\" class=\"headerlink\" title=\"Comunicar componentes en páginas distintas\"></a>Comunicar componentes en páginas distintas</h3><p>Cuando los componentes se cargan en rutas distintas ya no hay forma de comunicarlos directamente. Pero lo resolveremos fácilmente <strong>usando las capacidades del router.</strong></p>\n<h3 id=\"Comunicar-componentes-entre-estructuras-dinamicas\"><a href=\"#Comunicar-componentes-entre-estructuras-dinamicas\" class=\"headerlink\" title=\"Comunicar componentes entre estructuras dinámicas\"></a>Comunicar componentes entre estructuras dinámicas</h3><p>La situación más compleja se da cuando queremos comunicar componentes o servicios desacoplados pero sin cambio de página. En este caso hará falta un <strong>mediador observable</strong>.</p>\n<h1 id=\"2-El-patron-Contendor-x2F-Presentadores\"><a href=\"#2-El-patron-Contendor-x2F-Presentadores\" class=\"headerlink\" title=\"2. El patrón Contendor &#x2F; Presentadores\"></a>2. El patrón Contendor &#x2F; Presentadores</h1><p>En <strong>arquitectura de software</strong> cuando encontramos una solución a un problema recurrente le ponemos un nombre y tratamos de utilizarlo siempre que podemos. Obviamente es una elección del programador y siempre tiene un coste que debe valorar. Aquí la ventaja buscada es claramente una: <strong>el reparto de responsabilidades</strong>.</p>\n<h2 id=\"2-1-El-patron\"><a href=\"#2-1-El-patron\" class=\"headerlink\" title=\"2.1 El patrón\"></a>2.1 El patrón</h2><p>En este caso <strong>el patrón contenedor&#x2F;presentadores</strong> estipula que haya un único componente responsable de obtener, mutar y guardar el estado. Será el componente contenedor. Los presentadores serán responsables de.. ejem, presentar la información y los elementos de interacción con el usuario. Las ventajas derivadas son: mayor facilidad para el <em>testeo</em> y mayores posibilidades de reutilización de presentadores.</p>\n<blockquote>\n<p>A este patrón a veces se le conoce como <em>parent&#x2F;children</em> por la jerarquía HTML que genera.</p>\n</blockquote>\n<p>Veamos una implementación sencilla. Haremos una interfaz mínima para simular el manejo de un coche. Habrá pedales de aceleración y freno, y un cuadro dónde se refleje la velocidad. Para todo ello vamos a usa el <em>Angular CLI</em> y crear un módulo y sus componentes base.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m car --route car --module app-routing.module</span><br><span class=\"line\">ng g c car/car/display-presenter</span><br><span class=\"line\">ng g c car/car/pedals-presenter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-El-contenedor\"><a href=\"#2-2-El-contenedor\" class=\"headerlink\" title=\"2.2 El contenedor\"></a>2.2 El contenedor</h2><p>En el componente contenedor tendremos <strong>una vista muy sencilla y un controlador más complejo</strong>. La vista solamente será la composición de los componentes presentadores, pero el controlador tendrá que obtener datos, aplicarles lógica de negocio y guardarlos cuando corresponda.</p>\n<blockquote>\n<p>No es habitual asignarle un sufijo al nombre del componente para indicar que es el contenedor. Suele ser suficiente el verlo en la raíz de la jerarquía de carpetas.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-display-presenter</span> [<span class=\"attr\">model</span>]=<span class=\"string\">&quot;car.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">currentSpeed</span>]=<span class=\"string\">&quot;car.currentSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">topSpeed</span>]=<span class=\"string\">&quot;car.maxSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">units</span>]=<span class=\"string\">&quot;&#x27;Km/h&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-display-presenter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-pedals-presenter</span> (<span class=\"attr\">brake</span>)=<span class=\"string\">&quot;onBrake($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     [<span class=\"attr\">brakeDisabled</span>]=<span class=\"string\">&quot;disableBrake&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     (<span class=\"attr\">throttle</span>)=<span class=\"string\">&quot;onThrottle($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     [<span class=\"attr\">throttleDisabled</span>]=<span class=\"string\">&quot;disableThrottle&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-pedals-presenter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Obviamente este HTML visto así aún no será funcional. Por supuesto, los componentes presentadores existen, pero… ¿Qué son esos atributos tan raros?</p>\n<p>Vemos que usa los componentes presentadores <code>DisplayPresenter</code> y <code>PedalsPresenter</code> enviándoles información y suscribiéndose a sus eventos. Concretaremos esta funcionalidad más adelante.</p>\n<p>Ahora sigamos en la parte lógica de nuestro componente contenedor. Es la clase controlador y se ocupa de obtener y manipular los datos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CarComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">car</span>: <span class=\"title class_\">CarModel</span>;</span><br><span class=\"line\">  <span class=\"attr\">disableBrake</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">disableThrottle</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">car</span> = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Roadster&#x27;</span>, <span class=\"attr\">maxSpeed</span>: <span class=\"number\">120</span>, <span class=\"attr\">currentSpeed</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">checkLimits</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onBrake</span>(<span class=\"params\">drive: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> -= <span class=\"variable language_\">this</span>.<span class=\"title function_\">getDelta</span>(drive);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">checkLimits</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onThrottle</span>(<span class=\"params\">drive: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> += <span class=\"variable language_\">this</span>.<span class=\"title function_\">getDelta</span>(drive);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">checkLimits</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getDelta = <span class=\"function\">(<span class=\"params\">drive: <span class=\"built_in\">number</span></span>) =&gt;</span> drive + (<span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">maxSpeed</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span>) / <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">checkLimits</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">disableBrake</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">disableThrottle</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">disableBrake</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">maxSpeed</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">maxSpeed</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">disableThrottle</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lo dicho, <em>la clase controladora del componente contenedor retiene el grueso de la funcionalidad</em>. En este caso inicializar una instancia de un coche y mantener sus velocidad en los límites lógicos respondiendo a las acciones del usuario conductor.</p>\n<h2 id=\"2-3-Envio-hacia-el-presentador-con-Input\"><a href=\"#2-3-Envio-hacia-el-presentador-con-Input\" class=\"headerlink\" title=\"2.3 Envío hacia el presentador con @Input()\"></a>2.3 Envío hacia el presentador con @Input()</h2><p>Esta comunicación <em>hacia abajo</em> envía la información <strong>desde el contenedor hacia el presentador</strong>. Es similar a como una plantilla recibe la información desde el controlador.</p>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input()\"></a>@Input()</h3><p>Para que una vista muestre datos tiene que usar directivas como <code>&#123;&#123; model &#125;&#125;</code> asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede <strong>recibirlo desde el exterior</strong>. La novedad es hacer que lo reciba vía <em>html</em>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> &#123;&#123; model &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span> Top speed: &#123;&#123; topSpeed | number:&#x27;1.0-0&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;getSpeedClass()&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; currentSpeed | number:&#x27;1.2-2&#x27; &#125;&#125; &#123;&#123; units &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">progress</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;currentSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">max</span>]=<span class=\"string\">&quot;topSpeed&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">progress</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>Empieza por decorar con <code>@Input()</code> la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo <code>display.component.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DisplayPresenterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">model</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">currentSpeed</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">topSpeed</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">units</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getSpeedClass = <span class=\"function\">() =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentSpeed</span> &lt; <span class=\"variable language_\">this</span>.<span class=\"title function_\">getThreshold</span>() ? <span class=\"string\">&#x27;good&#x27;</span> : <span class=\"string\">&#x27;warning&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getThreshold = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">topSpeed</span> * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ahora puedes enviarle datos a este componente desde el <em>html</em> de su consumidor. Por ejemplo desde <code>car.component.html</code> le puedo enviar una variable o cualquier expresión evaluable. Recordemos como usa <code>[propiedad]=&quot;expresion&quot;</code> en el elemento presentador.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-display-presenter</span> [<span class=\"attr\">model</span>]=<span class=\"string\">&quot;car.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">currentSpeed</span>]=<span class=\"string\">&quot;car.currentSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">topSpeed</span>]=<span class=\"string\">&quot;car.maxSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">units</span>]=<span class=\"string\">&quot;&#x27;Km/h&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-display-presenter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>En la clase controladora del presentador quedan responsabilidades reducidas a temas específicos como determinar las clases <em>css</em> apropiadas o transformar los datos para su presentación.</p>\n<p>Estoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. Este mismo patrón puede y debe repetirse hasta <strong>descomponer las vistas en estructuras ridículamente simples</strong> que nos eviten repeticiones absurdas en código.</p>\n<p>De esta forma es fácil crear componentes reutilizables; y queda muy limpio el <strong>envío de datos hacia abajo</strong>. Pero, ¿y hacia arriba?.</p>\n<h2 id=\"2-4-Respuesta-del-presentador-con-Output\"><a href=\"#2-4-Respuesta-del-presentador-con-Output\" class=\"headerlink\" title=\"2.4. Respuesta del presentador con @Output()\"></a>2.4. Respuesta del presentador con @Output()</h2><p>Los componentes de nivel inferior no sólo se dedican a presentar datos, también presentan controles. Con ellos el usuario podrá crear, modificar o eliminar los datos que quiera. Aunque no directamente; para hacerlo <strong>comunican el cambio requerido al contenedor de nivel superior</strong>.</p>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output()\"></a>@Output()</h3><p>Por ejemplo, el componente <code>PedalsComponent</code> permite acelerar y frenar. Bueno, realmente permite que el usuario diga que lo quiere hacer; los cambios se harán más arriba. Veamos lo básico del <code>pedals.component.html</code> antes de nada:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span> Pedals: <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;brake 🐌&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">class</span>=<span class=\"string\">&quot;secondary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;brakeDisabled&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;brake.emit(1)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;throttle 🐰&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">class</span>=<span class=\"string\">&quot;tertiary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;throttleDisabled&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;throttle.emit(1)&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Claramente son un par de botones que con el evento <code>(click)</code> responden a acciones del usuario. En este caso se manifiesta una intención de acelerar o frenar el coche. Pero el método del controlador no actúa directamente sobre los datos.</p>\n<blockquote>\n<p>Si lo hiciera sería más difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación que se verán más adelante…</p>\n</blockquote>\n<p>En su lugar, lo que hace es <strong>emitir un evento</strong> confiando que alguien lo reciba y actúe en consecuencia. Por ejemplo la emisión de la instrucción de frenado se realiza mediante la propiedad <code>brake</code> decorada con <code>@Output() brake = new EventEmitter&lt;number&gt;();</code>. Dicha propiedad será una instancia de un emisor de eventos que mediante el método <code>.next()</code> va a emitir la señal de frenado hacia arriba.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PedalsPresenterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">brakeDisabled</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">throttleDisabled</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() brake = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() throttle = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Mientras tanto, <strong>en el contenedor la vista se subscribe al evento</strong> <code>(brake)</code> como si este fuese un evento nativo y llama a los métodos que manipulan los datos de verdad.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-pedals-presenter</span> (<span class=\"attr\">brake</span>)=<span class=\"string\">&quot;onBrake($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     [<span class=\"attr\">brakeDisabled</span>]=<span class=\"string\">&quot;disableBrake&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     (<span class=\"attr\">throttle</span>)=<span class=\"string\">&quot;onThrottle($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     [<span class=\"attr\">throttleDisabled</span>]=<span class=\"string\">&quot;disableThrottle&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-pedals-presenter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Las propiedades <em>output</em> también pueden enviar argumentos que serán recibidos mediante el identificador <code>$event</code> propio del framework. Se declaran especificando el tipo del argumento en el genérico del constructor de <code>EventEmitter&lt;any&gt;</code>.</p>\n<p>En el controlador ya podemos operar con los datos. El método <code>onBrake(drive: number)</code> accede y modifica el valor de la velocidad y lo notifica automáticamente hacia abajo.</p>\n<p>De esta manera se cierra el círculo. Los componentes de bajo nivel pueden <strong>recibir datos para ser presentados o emitir eventos para modificarlos</strong>. El componente de nivel superior es el <strong>único responsable de obtener y actuar</strong> sobre los datos.</p>\n<h1 id=\"3-Comunicaciones-entre-paginas-o-estructuras\"><a href=\"#3-Comunicaciones-entre-paginas-o-estructuras\" class=\"headerlink\" title=\"3. Comunicaciones entre páginas o estructuras\"></a>3. Comunicaciones entre páginas o estructuras</h1><h2 id=\"3-1-Comunicacion-entre-distintas-paginas\"><a href=\"#3-1-Comunicacion-entre-distintas-paginas\" class=\"headerlink\" title=\"3.1 Comunicación entre distintas páginas\"></a>3.1 Comunicación entre distintas páginas</h2><p>En las aplicaciones hay <strong>comunicaciones de estado más allá de la página actual</strong>. La comunicación entre páginas es responsabilidad del <code>@angular/router</code>. Una vez activada una ruta, el sistema carga un componente en el <code>&lt;router-outlet&gt;</code> correspondiente. No hay forma de comunicarse hacia <em>(arriba) o [abajo]</em> con algo desconocido. De una página a otra tampoco es problema pues la comunicación va mediante los parámetros de la <em>url</em>.</p>\n<p>Ya hemos usado esta comunicación anteriormente en el tema <a href=\"../paginas-y-rutas-angular-spa/\">2-spa</a> el componente <code>CoursesComponent</code> es capaz de recibir por parámetros una identificación de un autor. Esa información es el resultado de una acción del usuario en otra pantalla programada en el componente <code>HomeComponent</code>. Por tanto es una comunicación entre componentes que viven en páginas distintas, visto desde muy arriba es una situación en la que ambos son <em>controladores hermanos</em>.</p>\n<blockquote>\n<p>Desde luego habrá que mejorar el acceso y control de los datos que por ahora es muy rudimentario. Lo haremos en próximos pasos. Primero mediante  <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> y después usando <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a></p>\n</blockquote>\n<h2 id=\"2-2-Comunicacion-entre-estructuras-desacopladas\"><a href=\"#2-2-Comunicacion-entre-estructuras-desacopladas\" class=\"headerlink\" title=\"2.2 Comunicación entre estructuras desacopladas\"></a>2.2 Comunicación entre estructuras desacopladas</h2><p>Aún estando en la misma ruta, no siempre se podrán conocer los componentes, por ejemplo el <code>HeaderComponent</code> nunca podrá acceder al <code>PedalsPresenterComponent</code>; y por tanto no se podrán usar sus <code>[propiedades] y (eventos)</code></p>\n<h3 id=\"2-2-1-El-layout-principal-y-los-componentes-por-rutas-o-paginas\"><a href=\"#2-2-1-El-layout-principal-y-los-componentes-por-rutas-o-paginas\" class=\"headerlink\" title=\"2.2.1 El layout principal y los componentes por rutas o páginas.\"></a>2.2.1 El layout principal y los componentes por rutas o páginas.</h3><p>Esta es una situación habitual, quieres <strong>comunicar la vista de negocio activa con elementos generales</strong> de la página. Por ejemplo podrías querer mostrar la velocidad máxima alcanzada en la barra del menú o un un mensaje emergente cada vez que se alcance la velocidad límite. En este caso, el <code>&lt;router-outlet&gt;</code> es una barrera que impide usar el patrón contenedor-presentador pues no se puede predecir el contenido dinámico que carga el <code>RouterOutlet</code>.</p>\n<h3 id=\"2-2-2-Multiples-niveles-de-presentadores\"><a href=\"#2-2-2-Multiples-niveles-de-presentadores\" class=\"headerlink\" title=\"2.2.2 Múltiples niveles de presentadores.\"></a>2.2.2 Múltiples niveles de presentadores.</h3><p>Cuando las pantallas se hacen realmente complejas empiezan a surgir <strong>árboles de componentes</strong> de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. Enviar hacia abajo las <code>[propiedades]</code> es tedioso, pero peor aún es hacer burbujear los <code>(eventos)</code> por varias capas de presentadores.</p>\n<p>La solución en ambos casos pasa por permitir que <em>algunos componentes presentadores tengan su propio control de datos</em>. Este tipo de comunicaciones técnicamente se resuelve mediante <em>Observables</em> y merece un capítulo especial que se verá más adelante en esta serie. Incluso en situaciones complejas habrá que optar por patrones avanzados de gestión de estado como pueda ser <em>Redux</em>.</p>\n<p>Por ahora tienes una aplicación en <em>Angular</em> que comunica datos y cambios entre componentes de una misma página. Sigue el tutorial para añadirle <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> mientras aprendes a programar con Angular 8. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-4_flow.png\" alt=\"flujo-de-datos-entre-componentes-angular\"></p>\n<p>Los desarrollos profesionales son complicados pero <strong>con Angular tenemos soluciones de comunicación simples para pantallas complejas</strong>. Mediante el desarrollo de componentes atómicos y reutilizables Angular 9 favorece la implementación de buenas prácticas.</p>\n<p>Crear y comunicar muchos componentes puede llevarnos a código difícil de seguir. La librería <code>@angular/forms</code> ofrece <em>tuberías de comunicación</em> para <strong>mantener el flujo de datos bajo control</strong>.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a>. Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en componentes.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Comunicacion-entre-componentes\"><a href=\"#1-Comunicacion-entre-componentes\" class=\"headerlink\" title=\"1. Comunicación entre componentes\"></a>1. Comunicación entre componentes</h1><p>Las aplicaciones web en las que destaca Angular suelen ser complejas y con mucha variedad funcional en diversas páginas. A menudo esas páginas están repletas de formularios, informes y botones. La solución viene de mano del viejo principio <em>divide y vencerás</em>: <strong>La componentización</strong></p>\n<h2 id=\"1-1-Necesidad-de-comunicacion\"><a href=\"#1-1-Necesidad-de-comunicacion\" class=\"headerlink\" title=\"1.1. Necesidad de comunicación\"></a>1.1. Necesidad de comunicación</h2><p>El <em>framework</em> permite y recomienda repartir el trabajo en múltiples componentes de responsabilidad única. También es práctica común el crear páginas específicas para situaciones concretas aunque relacionadas. Por supuesto que estructuras como el menú de navegación o secciones de estado general necesitan conocer datos provenientes de las páginas. Nada está completamente asilado. Esto nos enfrenta la problema de <strong>comunicar componentes</strong>.</p>\n<h2 id=\"1-2-Escenarios\"><a href=\"#1-2-Escenarios\" class=\"headerlink\" title=\"1.2. Escenarios\"></a>1.2. Escenarios</h2><p>Las situaciones que te encontrarás caerán en alguna de estas tres categorías para las que hay soluciones específicas.</p>\n<h3 id=\"Comunicar-componentes-acoplados\"><a href=\"#Comunicar-componentes-acoplados\" class=\"headerlink\" title=\"Comunicar componentes acoplados\"></a>Comunicar componentes acoplados</h3><p>Solemos empezar creando un componente por página. Pero es normal que esa página se complique y la solución a la complejidad es la <strong>división en componentes y reparto de responsabilidades</strong>. Dado que están en una misma página existe cierto acoplamiento entre ellos y eso nos facilitará la comunicación.</p>\n<h3 id=\"Comunicar-componentes-en-paginas-distintas\"><a href=\"#Comunicar-componentes-en-paginas-distintas\" class=\"headerlink\" title=\"Comunicar componentes en páginas distintas\"></a>Comunicar componentes en páginas distintas</h3><p>Cuando los componentes se cargan en rutas distintas ya no hay forma de comunicarlos directamente. Pero lo resolveremos fácilmente <strong>usando las capacidades del router.</strong></p>\n<h3 id=\"Comunicar-componentes-entre-estructuras-dinamicas\"><a href=\"#Comunicar-componentes-entre-estructuras-dinamicas\" class=\"headerlink\" title=\"Comunicar componentes entre estructuras dinámicas\"></a>Comunicar componentes entre estructuras dinámicas</h3><p>La situación más compleja se da cuando queremos comunicar componentes o servicios desacoplados pero sin cambio de página. En este caso hará falta un <strong>mediador observable</strong>.</p>\n<h1 id=\"2-El-patron-Contendor-x2F-Presentadores\"><a href=\"#2-El-patron-Contendor-x2F-Presentadores\" class=\"headerlink\" title=\"2. El patrón Contendor &#x2F; Presentadores\"></a>2. El patrón Contendor &#x2F; Presentadores</h1><p>En <strong>arquitectura de software</strong> cuando encontramos una solución a un problema recurrente le ponemos un nombre y tratamos de utilizarlo siempre que podemos. Obviamente es una elección del programador y siempre tiene un coste que debe valorar. Aquí la ventaja buscada es claramente una: <strong>el reparto de responsabilidades</strong>.</p>\n<h2 id=\"2-1-El-patron\"><a href=\"#2-1-El-patron\" class=\"headerlink\" title=\"2.1 El patrón\"></a>2.1 El patrón</h2><p>En este caso <strong>el patrón contenedor&#x2F;presentadores</strong> estipula que haya un único componente responsable de obtener, mutar y guardar el estado. Será el componente contenedor. Los presentadores serán responsables de.. ejem, presentar la información y los elementos de interacción con el usuario. Las ventajas derivadas son: mayor facilidad para el <em>testeo</em> y mayores posibilidades de reutilización de presentadores.</p>\n<blockquote>\n<p>A este patrón a veces se le conoce como <em>parent&#x2F;children</em> por la jerarquía HTML que genera.</p>\n</blockquote>\n<p>Veamos una implementación sencilla. Haremos una interfaz mínima para simular el manejo de un coche. Habrá pedales de aceleración y freno, y un cuadro dónde se refleje la velocidad. Para todo ello vamos a usa el <em>Angular CLI</em> y crear un módulo y sus componentes base.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m car --route car --module app-routing.module</span><br><span class=\"line\">ng g c car/car/display-presenter</span><br><span class=\"line\">ng g c car/car/pedals-presenter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-El-contenedor\"><a href=\"#2-2-El-contenedor\" class=\"headerlink\" title=\"2.2 El contenedor\"></a>2.2 El contenedor</h2><p>En el componente contenedor tendremos <strong>una vista muy sencilla y un controlador más complejo</strong>. La vista solamente será la composición de los componentes presentadores, pero el controlador tendrá que obtener datos, aplicarles lógica de negocio y guardarlos cuando corresponda.</p>\n<blockquote>\n<p>No es habitual asignarle un sufijo al nombre del componente para indicar que es el contenedor. Suele ser suficiente el verlo en la raíz de la jerarquía de carpetas.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-display-presenter</span> [<span class=\"attr\">model</span>]=<span class=\"string\">&quot;car.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">currentSpeed</span>]=<span class=\"string\">&quot;car.currentSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">topSpeed</span>]=<span class=\"string\">&quot;car.maxSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">units</span>]=<span class=\"string\">&quot;&#x27;Km/h&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-display-presenter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-pedals-presenter</span> (<span class=\"attr\">brake</span>)=<span class=\"string\">&quot;onBrake($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     [<span class=\"attr\">brakeDisabled</span>]=<span class=\"string\">&quot;disableBrake&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     (<span class=\"attr\">throttle</span>)=<span class=\"string\">&quot;onThrottle($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     [<span class=\"attr\">throttleDisabled</span>]=<span class=\"string\">&quot;disableThrottle&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-pedals-presenter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Obviamente este HTML visto así aún no será funcional. Por supuesto, los componentes presentadores existen, pero… ¿Qué son esos atributos tan raros?</p>\n<p>Vemos que usa los componentes presentadores <code>DisplayPresenter</code> y <code>PedalsPresenter</code> enviándoles información y suscribiéndose a sus eventos. Concretaremos esta funcionalidad más adelante.</p>\n<p>Ahora sigamos en la parte lógica de nuestro componente contenedor. Es la clase controlador y se ocupa de obtener y manipular los datos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CarComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">car</span>: <span class=\"title class_\">CarModel</span>;</span><br><span class=\"line\">  <span class=\"attr\">disableBrake</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">disableThrottle</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">car</span> = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Roadster&#x27;</span>, <span class=\"attr\">maxSpeed</span>: <span class=\"number\">120</span>, <span class=\"attr\">currentSpeed</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">checkLimits</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onBrake</span>(<span class=\"params\">drive: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> -= <span class=\"variable language_\">this</span>.<span class=\"title function_\">getDelta</span>(drive);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">checkLimits</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onThrottle</span>(<span class=\"params\">drive: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> += <span class=\"variable language_\">this</span>.<span class=\"title function_\">getDelta</span>(drive);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">checkLimits</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getDelta = <span class=\"function\">(<span class=\"params\">drive: <span class=\"built_in\">number</span></span>) =&gt;</span> drive + (<span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">maxSpeed</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span>) / <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">checkLimits</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">disableBrake</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">disableThrottle</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">disableBrake</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">maxSpeed</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">currentSpeed</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">car</span>.<span class=\"property\">maxSpeed</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">disableThrottle</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lo dicho, <em>la clase controladora del componente contenedor retiene el grueso de la funcionalidad</em>. En este caso inicializar una instancia de un coche y mantener sus velocidad en los límites lógicos respondiendo a las acciones del usuario conductor.</p>\n<h2 id=\"2-3-Envio-hacia-el-presentador-con-Input\"><a href=\"#2-3-Envio-hacia-el-presentador-con-Input\" class=\"headerlink\" title=\"2.3 Envío hacia el presentador con @Input()\"></a>2.3 Envío hacia el presentador con @Input()</h2><p>Esta comunicación <em>hacia abajo</em> envía la información <strong>desde el contenedor hacia el presentador</strong>. Es similar a como una plantilla recibe la información desde el controlador.</p>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input()\"></a>@Input()</h3><p>Para que una vista muestre datos tiene que usar directivas como <code>&#123;&#123; model &#125;&#125;</code> asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede <strong>recibirlo desde el exterior</strong>. La novedad es hacer que lo reciba vía <em>html</em>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> &#123;&#123; model &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span> Top speed: &#123;&#123; topSpeed | number:&#x27;1.0-0&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">&quot;getSpeedClass()&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; currentSpeed | number:&#x27;1.2-2&#x27; &#125;&#125; &#123;&#123; units &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">progress</span> [<span class=\"attr\">value</span>]=<span class=\"string\">&quot;currentSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">max</span>]=<span class=\"string\">&quot;topSpeed&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">progress</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>Empieza por decorar con <code>@Input()</code> la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo <code>display.component.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DisplayPresenterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">model</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">currentSpeed</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">topSpeed</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">units</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getSpeedClass = <span class=\"function\">() =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentSpeed</span> &lt; <span class=\"variable language_\">this</span>.<span class=\"title function_\">getThreshold</span>() ? <span class=\"string\">&#x27;good&#x27;</span> : <span class=\"string\">&#x27;warning&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getThreshold = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">topSpeed</span> * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ahora puedes enviarle datos a este componente desde el <em>html</em> de su consumidor. Por ejemplo desde <code>car.component.html</code> le puedo enviar una variable o cualquier expresión evaluable. Recordemos como usa <code>[propiedad]=&quot;expresion&quot;</code> en el elemento presentador.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-display-presenter</span> [<span class=\"attr\">model</span>]=<span class=\"string\">&quot;car.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">currentSpeed</span>]=<span class=\"string\">&quot;car.currentSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">topSpeed</span>]=<span class=\"string\">&quot;car.maxSpeed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                      [<span class=\"attr\">units</span>]=<span class=\"string\">&quot;&#x27;Km/h&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-display-presenter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>En la clase controladora del presentador quedan responsabilidades reducidas a temas específicos como determinar las clases <em>css</em> apropiadas o transformar los datos para su presentación.</p>\n<p>Estoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. Este mismo patrón puede y debe repetirse hasta <strong>descomponer las vistas en estructuras ridículamente simples</strong> que nos eviten repeticiones absurdas en código.</p>\n<p>De esta forma es fácil crear componentes reutilizables; y queda muy limpio el <strong>envío de datos hacia abajo</strong>. Pero, ¿y hacia arriba?.</p>\n<h2 id=\"2-4-Respuesta-del-presentador-con-Output\"><a href=\"#2-4-Respuesta-del-presentador-con-Output\" class=\"headerlink\" title=\"2.4. Respuesta del presentador con @Output()\"></a>2.4. Respuesta del presentador con @Output()</h2><p>Los componentes de nivel inferior no sólo se dedican a presentar datos, también presentan controles. Con ellos el usuario podrá crear, modificar o eliminar los datos que quiera. Aunque no directamente; para hacerlo <strong>comunican el cambio requerido al contenedor de nivel superior</strong>.</p>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output()\"></a>@Output()</h3><p>Por ejemplo, el componente <code>PedalsComponent</code> permite acelerar y frenar. Bueno, realmente permite que el usuario diga que lo quiere hacer; los cambios se harán más arriba. Veamos lo básico del <code>pedals.component.html</code> antes de nada:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span> Pedals: <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;brake 🐌&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">class</span>=<span class=\"string\">&quot;secondary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;brakeDisabled&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;brake.emit(1)&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;throttle 🐰&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">class</span>=<span class=\"string\">&quot;tertiary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;throttleDisabled&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;throttle.emit(1)&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Claramente son un par de botones que con el evento <code>(click)</code> responden a acciones del usuario. En este caso se manifiesta una intención de acelerar o frenar el coche. Pero el método del controlador no actúa directamente sobre los datos.</p>\n<blockquote>\n<p>Si lo hiciera sería más difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación que se verán más adelante…</p>\n</blockquote>\n<p>En su lugar, lo que hace es <strong>emitir un evento</strong> confiando que alguien lo reciba y actúe en consecuencia. Por ejemplo la emisión de la instrucción de frenado se realiza mediante la propiedad <code>brake</code> decorada con <code>@Output() brake = new EventEmitter&lt;number&gt;();</code>. Dicha propiedad será una instancia de un emisor de eventos que mediante el método <code>.next()</code> va a emitir la señal de frenado hacia arriba.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PedalsPresenterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">brakeDisabled</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"attr\">throttleDisabled</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() brake = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() throttle = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Mientras tanto, <strong>en el contenedor la vista se subscribe al evento</strong> <code>(brake)</code> como si este fuese un evento nativo y llama a los métodos que manipulan los datos de verdad.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-pedals-presenter</span> (<span class=\"attr\">brake</span>)=<span class=\"string\">&quot;onBrake($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     [<span class=\"attr\">brakeDisabled</span>]=<span class=\"string\">&quot;disableBrake&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     (<span class=\"attr\">throttle</span>)=<span class=\"string\">&quot;onThrottle($event)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     [<span class=\"attr\">throttleDisabled</span>]=<span class=\"string\">&quot;disableThrottle&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ab-pedals-presenter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Las propiedades <em>output</em> también pueden enviar argumentos que serán recibidos mediante el identificador <code>$event</code> propio del framework. Se declaran especificando el tipo del argumento en el genérico del constructor de <code>EventEmitter&lt;any&gt;</code>.</p>\n<p>En el controlador ya podemos operar con los datos. El método <code>onBrake(drive: number)</code> accede y modifica el valor de la velocidad y lo notifica automáticamente hacia abajo.</p>\n<p>De esta manera se cierra el círculo. Los componentes de bajo nivel pueden <strong>recibir datos para ser presentados o emitir eventos para modificarlos</strong>. El componente de nivel superior es el <strong>único responsable de obtener y actuar</strong> sobre los datos.</p>\n<h1 id=\"3-Comunicaciones-entre-paginas-o-estructuras\"><a href=\"#3-Comunicaciones-entre-paginas-o-estructuras\" class=\"headerlink\" title=\"3. Comunicaciones entre páginas o estructuras\"></a>3. Comunicaciones entre páginas o estructuras</h1><h2 id=\"3-1-Comunicacion-entre-distintas-paginas\"><a href=\"#3-1-Comunicacion-entre-distintas-paginas\" class=\"headerlink\" title=\"3.1 Comunicación entre distintas páginas\"></a>3.1 Comunicación entre distintas páginas</h2><p>En las aplicaciones hay <strong>comunicaciones de estado más allá de la página actual</strong>. La comunicación entre páginas es responsabilidad del <code>@angular/router</code>. Una vez activada una ruta, el sistema carga un componente en el <code>&lt;router-outlet&gt;</code> correspondiente. No hay forma de comunicarse hacia <em>(arriba) o [abajo]</em> con algo desconocido. De una página a otra tampoco es problema pues la comunicación va mediante los parámetros de la <em>url</em>.</p>\n<p>Ya hemos usado esta comunicación anteriormente en el tema <a href=\"../paginas-y-rutas-angular-spa/\">2-spa</a> el componente <code>CoursesComponent</code> es capaz de recibir por parámetros una identificación de un autor. Esa información es el resultado de una acción del usuario en otra pantalla programada en el componente <code>HomeComponent</code>. Por tanto es una comunicación entre componentes que viven en páginas distintas, visto desde muy arriba es una situación en la que ambos son <em>controladores hermanos</em>.</p>\n<blockquote>\n<p>Desde luego habrá que mejorar el acceso y control de los datos que por ahora es muy rudimentario. Lo haremos en próximos pasos. Primero mediante  <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> y después usando <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a></p>\n</blockquote>\n<h2 id=\"2-2-Comunicacion-entre-estructuras-desacopladas\"><a href=\"#2-2-Comunicacion-entre-estructuras-desacopladas\" class=\"headerlink\" title=\"2.2 Comunicación entre estructuras desacopladas\"></a>2.2 Comunicación entre estructuras desacopladas</h2><p>Aún estando en la misma ruta, no siempre se podrán conocer los componentes, por ejemplo el <code>HeaderComponent</code> nunca podrá acceder al <code>PedalsPresenterComponent</code>; y por tanto no se podrán usar sus <code>[propiedades] y (eventos)</code></p>\n<h3 id=\"2-2-1-El-layout-principal-y-los-componentes-por-rutas-o-paginas\"><a href=\"#2-2-1-El-layout-principal-y-los-componentes-por-rutas-o-paginas\" class=\"headerlink\" title=\"2.2.1 El layout principal y los componentes por rutas o páginas.\"></a>2.2.1 El layout principal y los componentes por rutas o páginas.</h3><p>Esta es una situación habitual, quieres <strong>comunicar la vista de negocio activa con elementos generales</strong> de la página. Por ejemplo podrías querer mostrar la velocidad máxima alcanzada en la barra del menú o un un mensaje emergente cada vez que se alcance la velocidad límite. En este caso, el <code>&lt;router-outlet&gt;</code> es una barrera que impide usar el patrón contenedor-presentador pues no se puede predecir el contenido dinámico que carga el <code>RouterOutlet</code>.</p>\n<h3 id=\"2-2-2-Multiples-niveles-de-presentadores\"><a href=\"#2-2-2-Multiples-niveles-de-presentadores\" class=\"headerlink\" title=\"2.2.2 Múltiples niveles de presentadores.\"></a>2.2.2 Múltiples niveles de presentadores.</h3><p>Cuando las pantallas se hacen realmente complejas empiezan a surgir <strong>árboles de componentes</strong> de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. Enviar hacia abajo las <code>[propiedades]</code> es tedioso, pero peor aún es hacer burbujear los <code>(eventos)</code> por varias capas de presentadores.</p>\n<p>La solución en ambos casos pasa por permitir que <em>algunos componentes presentadores tengan su propio control de datos</em>. Este tipo de comunicaciones técnicamente se resuelve mediante <em>Observables</em> y merece un capítulo especial que se verá más adelante en esta serie. Incluso en situaciones complejas habrá que optar por patrones avanzados de gestión de estado como pueda ser <em>Redux</em>.</p>\n<p>Por ahora tienes una aplicación en <em>Angular</em> que comunica datos y cambios entre componentes de una misma página. Sigue el tutorial para añadirle <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> mientras aprendes a programar con Angular 8. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Servicios inyectables en Angular","date":"2020-04-17T08:54:58.000Z","thumbnail":"/css/images/angular-5_inject.png","_content":"\n![servicios-inyectables-en-Angular](/images/tutorial-angular-5_inject.png)\n\nLa presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. **La lógica y los datos tienen su lugar en servicios compartidos**.\n\nPara que los componentes consuman los servicios de forma controlada tenemos proveedores _inyectables_ en la librería `@angular/core` con los que realizar **la inyección de dependencias**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/). Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Inyección de dependencias\n\nComo casi todo en Angular, **los servicios son clases TypeScript**. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.\n\nEste sistema se basa en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona la **[Dependency Injection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias) en Angular**.\n\nComo demostración vamos a trabajar con un par de utilidades para conversión de unidades. Crearé un módulo y un componente en el que visualizarlo.\n\n```shell\nng g m converter --route converter --module app-routing.module\n```\n\n## 1.1 Generación de servicios\n\nLa particularidad de las clases de servicios está en su decorador: `@Injectable()`. Esta función viene en el `@angular/core` e **indica que esta clase puede ser inyectada** dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios. Estos son ejemplos de instrucciones para crear un _service_.\n\n```shell\nng g s converter/calculator\n```\n\nEl resultado es el fichero `calculator.service.ts` con su decorador que toma una _class_ normal y produce algo _injectable_. Veamos una implementación mínima:\n\n```typescript\n@Injectable({\n  providedIn: 'root',\n})\nexport class CalculatorService {\n  private milesPerKilometer = 0.62137;\n  private kilometersPerMile = 1.609;\n\n  constructor() {}\n\n  fromKilometersToMiles = (kilometers: number): number => kilometers * this.milesPerKilometer;\n  fromMilesToKilometers = (miles: number): number => miles * this.kilometersPerMile;\n}\n```\n\nAhora tienes centralizado en este servicio la lógica de datos que tenemos hasta el momento. Los demás componentes la podrán utilizar.\n\n## 1.2 Consumo de dependencias\n\nDeclarar y decorar la clase no es suficiente para poder reclamarla. Necesitas **registrarla como un proveedor en algún módulo**. Desde Angular 6 los servicios se auto-proveen en el módulo raíz mediante la configuración `providedIn: 'root'` de su decorador.\n\n> Esto es útil y cómodo en una gran cantidad de casos. El módulo raíz es visible para toda la aplicación de forma que cualquier componente puede reclamar un servicio suyo sin problema. Excepto que el problema sea el tamaño. El módulo raíz se carga al arrancar y todas sus referencias van el _bundle_ principal. Si queremos repartir el peso debemos llevar ciertos servicios al módulo funcional que los necesite.\n\nVamos a consumir este servicio en el `converter.component.ts`. Al consumo de los servicios inyectables se le conoce como _dependencia_. Cada componente o servicio puede **declarar en su constructor sus dependencias** hacia servicios inyectables. El convenio exige que se especifique el tipo esperado\n\n```typescript\nexport class ConverterComponent implements OnInit {\n  public kilometers = 0;\n  public miles: number;\n\n  constructor(private calculatorService: CalculatorService) {}\n\n  ngOnInit() {\n    this.convert();\n  }\n  convert() {\n    this.miles = this.calculatorService.fromKilometersToMiles(this.kilometers);\n  }\n}\n```\n\n> Agregar el modificador de alcance `private` o `public` en la declaración de argumentos hace que _TypeScript_ genere una propiedad inicializada con el valor recibido. Es azúcar sintáctico para no tener que declarar la propiedad y asignarle el valor del argumento manualmente. En resumen, los [constructores en TypeScrip](https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords/) admiten argumentos que transforman en propiedades. Mantenemos privado el `converterService` para evitar su uso desde la vista.\n\n```html\n<h2>Distance Converter.</h2>\n<h3>From Europe to USA</h3>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"kilometers\">Kilometers</label>\n      <input name=\"kilometers\"\n             type=\"number\"\n             [(ngModel)]=\"kilometers\"\n             placeholder=\"0\" />\n    </section>\n  </fieldset>\n  <input value=\"Convert\"\n         type=\"button\"\n         (click)=\"convert()\" />\n</form>\n<section>\n  <h4>{{ miles | number:'1.2-2' }} miles</h4>\n</section>\n<a [routerLink]=\"['dynamic']\">Go to Abstract Culture Converter Sample</a>\n```\n\n# 2. Inversión del control\n\nUn concepto íntimamente relacionado con la inyección de dependencias es el de [**Inversion of Control**](https://en.wikipedia.org/wiki/Inversion_of_control). El componente dependiente expresa sus necesidades, pero es el _framework_ el que en última instancia decide lo que recibirá. Vemos entonces que **el invocado cede el control al invocador**.\n\nCuando proveemos un servicio en Angular, el comportamiento por defecto es el de proveer un _singleton_ pero hay más opciones. Si se usa el objeto `provider` con `useClass` , `useValue` y `useFactory` podemos controlar el proceso de inyección.\n\nSe crea un [_singleton_](https://es.wikipedia.org/wiki/Singleton) por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Si va a ser compartido gana la opción de auto proveerlo en el raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.\n\nEn un módulo cualquiera, siempre podríamos agregar un servicio a su array de _providers_.\n\n```typescript\n@NgModule({\n  declarations: [...],\n  imports: [...],\n  providers: [ CalculatorService ]\n})\n```\n\nPero siempre será **una instancia única por módulo**. Si un _singleton_ no es lo adecuado, entonces puedes proveer el mismo servicio en distintos módulos. De esa forma se creará una instancia distinta para cada uno. Si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.\n\n> Incluso es posible usar el array `providers:[]` en la decoración de un componente o de otro servicio. Haciendo así aún más granular la elección de instancia.\n\nVeamos un ejemplo extendiendo el problema del conversor de unidades de forma que se pueda escoger una **estrategia** de conversión en base a una cultura concreta. Para empezar necesitamos una interfaz, un servicio base que la implemente y un componente que lo consuma.\n\n```shell\nng g interface converter/dynamic-converter/culture-converter\nng g service converter/dynamic-converter/culture\nng g component converter/dynamic-converter/dynamic-converter\n```\n\n```typeScript\nexport interface CultureConverter {\n  sourceCulture: string;\n  targetCulture: string;\n  convertDistance: (source: number) => number;\n}\n```\n\n```typescript\nexport abstract class CultureService implements CultureConverter {\n  sourceCulture: string;\n  targetCulture: string;\n  convertDistance: (source: number) => number;\n\n  constructor() {}\n}\n```\n\n```typeScript\nexport class CultureConverterComponent implements OnInit {\n  public source: string;\n  public target: string;\n  public sourceUnits = 0;\n  public targetUnits: number;\n\n  constructor(private cultureService:CultureService){ }\n\n  public ngOnInit() {\n    this.source = this.cultureService.sourceCulture;\n    this.target = this.cultureService.targetCulture;\n    this.convert();\n  }\n  public convert() {\n    this.targetUnits = this.cultureService.convertDistance(this.sourceUnits);\n  }\n}\n```\n\n```html\n<h2>Culture Converter.</h2>\n<h3>From {{ source }} to {{ target }}</h3>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"sourceUnits\">Distance</label>\n      <input name=\"sourceUnits\" type=\"number\" [(ngModel)]=\"sourceUnits\" placeholder=\"0\" />\n    </section>\n  </fieldset>\n  <input value=\"Convert\" type=\"button\" (click)=\"convert()\" />\n</form>\n<section>\n  <h4>Distance {{ targetUnits | number:'1.2-2' }}</h4>\n</section>\n```\n\n## 2.2 Implementaciones\n\nEl `CultureConverterComponent` depende de `CultureService` el cual implementa de forma abstracta la interfaz `CultureConverter`. Pero eso no es para nada funcional. Vamos a crear dos implementaciones específicas para Europa y USA. Estas clases concretas se apoyarán en el anteriormente creado `CalculatorService` que necesita algo más de código para hacer conversiones de distancia en ambos sentidos.\n\n```typescript\nexport class CalculatorService {\n  private milesPerKilometer = 0.62137;\n  private kilometersPerMile = 1.609;\n\n  constructor() {}\n\n  fromKilometersToMiles = (kilometers: number): number => kilometers * this.milesPerKilometer;\n  fromMilesToKilometers = (miles: number): number => miles * this.kilometersPerMile;\n}\n```\n\n```console\nng g s converter/dynamic-converter/european\nng g s converter/dynamic-converter/american\n```\n\nY aquí está el primero de los dos servicios concretos. Implementando una conversión de millas a kilómetros\n\n```typescript\n@Injectable()\nexport class EuropeanService extends CultureService {\n  sourceCulture = 'USA';\n  targetCulture = 'Europe';\n  constructor(private calculatorService: CalculatorService) { super(); }\n  public convertDistance = this.calculatorService.fromMilesToKilometers;\n}\n```\n\nY aquí el segundo que extiende la clase abstracta pasando a millas\n\n```typescript\n@Injectable()\nexport class AmericanService extends CultureService {\n  sourceCulture = 'Europe';\n  targetCulture = 'USA';\n  constructor(private calculatorService: CalculatorService) { super(); }\n  public convertDistance = this.calculatorService.fromKilometersToMiles;\n}\n```\n\n## 2.3 Provisión manual\n\nPor ejemplo si queremos utilizar la implementación concreta de USA lo indicamos en el módulo que lo consuma.\n\n```typescript\n{\n providers: [\n    {\n      provide: CultureService,\n      useClass: AmericanService,\n    },\n  ],\n}\n```\n\nEl componente reclama una instancia de `CultureService` y le damos otra con la misma interfaz. De esta forma podríamos tener módulos distintos, cada uno con su propia estrategia de conversión.\n\n## 2.4 Factoría\n\nUna situación muy común es poder elegir dinámicamente la implementación concreta. Para ello necesitamos una función factoría que con alguna lógica escoja la estrategia concreta.\n\n```typescript\nconst cultureFactory = (calculatorService: CalculatorService) => {\n  if (environment.unitsCulture === 'metric') {\n    return new EuropeanService(calculatorService);\n  } else {\n    return new AmericanService(calculatorService);\n  }\n};\n{\n  providers: [\n    {\n      provide: CultureService,\n      useFactory: cultureFactory,\n      deps: [CalculatorService],\n    },\n  ];\n}\n```\n\nDe esta forma la aplicación se comportará distinto en función de una variable de entorno.\n\nYa tenemos la aplicación mucho mejor estructurada, pero el almacén de datos es mejorable. Se mantienen los datos _hard-coded_, muy incómodo para actualizar; y en memoria, poco fiable y volátil. Lo más habitual es guardar y recuperar la información en un servidor _http_. Sigue esta serie para añadir [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/) mientras aprendes a programar con Angular. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-5-Servicios-inyectables-en-Angular.md","raw":"---\ntitle: Servicios inyectables en Angular\npermalink: servicios-inyectables-en-Angular\ndate: 2020-04-17 10:54:58\ntags:\n  - Angular\n  - Servicios\n  - DI\n  - Tutorial\n  - Introducción\n  - Angular9\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-5_inject.png\n---\n\n![servicios-inyectables-en-Angular](/images/tutorial-angular-5_inject.png)\n\nLa presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. **La lógica y los datos tienen su lugar en servicios compartidos**.\n\nPara que los componentes consuman los servicios de forma controlada tenemos proveedores _inyectables_ en la librería `@angular/core` con los que realizar **la inyección de dependencias**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/). Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Inyección de dependencias\n\nComo casi todo en Angular, **los servicios son clases TypeScript**. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.\n\nEste sistema se basa en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona la **[Dependency Injection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias) en Angular**.\n\nComo demostración vamos a trabajar con un par de utilidades para conversión de unidades. Crearé un módulo y un componente en el que visualizarlo.\n\n```shell\nng g m converter --route converter --module app-routing.module\n```\n\n## 1.1 Generación de servicios\n\nLa particularidad de las clases de servicios está en su decorador: `@Injectable()`. Esta función viene en el `@angular/core` e **indica que esta clase puede ser inyectada** dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios. Estos son ejemplos de instrucciones para crear un _service_.\n\n```shell\nng g s converter/calculator\n```\n\nEl resultado es el fichero `calculator.service.ts` con su decorador que toma una _class_ normal y produce algo _injectable_. Veamos una implementación mínima:\n\n```typescript\n@Injectable({\n  providedIn: 'root',\n})\nexport class CalculatorService {\n  private milesPerKilometer = 0.62137;\n  private kilometersPerMile = 1.609;\n\n  constructor() {}\n\n  fromKilometersToMiles = (kilometers: number): number => kilometers * this.milesPerKilometer;\n  fromMilesToKilometers = (miles: number): number => miles * this.kilometersPerMile;\n}\n```\n\nAhora tienes centralizado en este servicio la lógica de datos que tenemos hasta el momento. Los demás componentes la podrán utilizar.\n\n## 1.2 Consumo de dependencias\n\nDeclarar y decorar la clase no es suficiente para poder reclamarla. Necesitas **registrarla como un proveedor en algún módulo**. Desde Angular 6 los servicios se auto-proveen en el módulo raíz mediante la configuración `providedIn: 'root'` de su decorador.\n\n> Esto es útil y cómodo en una gran cantidad de casos. El módulo raíz es visible para toda la aplicación de forma que cualquier componente puede reclamar un servicio suyo sin problema. Excepto que el problema sea el tamaño. El módulo raíz se carga al arrancar y todas sus referencias van el _bundle_ principal. Si queremos repartir el peso debemos llevar ciertos servicios al módulo funcional que los necesite.\n\nVamos a consumir este servicio en el `converter.component.ts`. Al consumo de los servicios inyectables se le conoce como _dependencia_. Cada componente o servicio puede **declarar en su constructor sus dependencias** hacia servicios inyectables. El convenio exige que se especifique el tipo esperado\n\n```typescript\nexport class ConverterComponent implements OnInit {\n  public kilometers = 0;\n  public miles: number;\n\n  constructor(private calculatorService: CalculatorService) {}\n\n  ngOnInit() {\n    this.convert();\n  }\n  convert() {\n    this.miles = this.calculatorService.fromKilometersToMiles(this.kilometers);\n  }\n}\n```\n\n> Agregar el modificador de alcance `private` o `public` en la declaración de argumentos hace que _TypeScript_ genere una propiedad inicializada con el valor recibido. Es azúcar sintáctico para no tener que declarar la propiedad y asignarle el valor del argumento manualmente. En resumen, los [constructores en TypeScrip](https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords/) admiten argumentos que transforman en propiedades. Mantenemos privado el `converterService` para evitar su uso desde la vista.\n\n```html\n<h2>Distance Converter.</h2>\n<h3>From Europe to USA</h3>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"kilometers\">Kilometers</label>\n      <input name=\"kilometers\"\n             type=\"number\"\n             [(ngModel)]=\"kilometers\"\n             placeholder=\"0\" />\n    </section>\n  </fieldset>\n  <input value=\"Convert\"\n         type=\"button\"\n         (click)=\"convert()\" />\n</form>\n<section>\n  <h4>{{ miles | number:'1.2-2' }} miles</h4>\n</section>\n<a [routerLink]=\"['dynamic']\">Go to Abstract Culture Converter Sample</a>\n```\n\n# 2. Inversión del control\n\nUn concepto íntimamente relacionado con la inyección de dependencias es el de [**Inversion of Control**](https://en.wikipedia.org/wiki/Inversion_of_control). El componente dependiente expresa sus necesidades, pero es el _framework_ el que en última instancia decide lo que recibirá. Vemos entonces que **el invocado cede el control al invocador**.\n\nCuando proveemos un servicio en Angular, el comportamiento por defecto es el de proveer un _singleton_ pero hay más opciones. Si se usa el objeto `provider` con `useClass` , `useValue` y `useFactory` podemos controlar el proceso de inyección.\n\nSe crea un [_singleton_](https://es.wikipedia.org/wiki/Singleton) por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Si va a ser compartido gana la opción de auto proveerlo en el raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.\n\nEn un módulo cualquiera, siempre podríamos agregar un servicio a su array de _providers_.\n\n```typescript\n@NgModule({\n  declarations: [...],\n  imports: [...],\n  providers: [ CalculatorService ]\n})\n```\n\nPero siempre será **una instancia única por módulo**. Si un _singleton_ no es lo adecuado, entonces puedes proveer el mismo servicio en distintos módulos. De esa forma se creará una instancia distinta para cada uno. Si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.\n\n> Incluso es posible usar el array `providers:[]` en la decoración de un componente o de otro servicio. Haciendo así aún más granular la elección de instancia.\n\nVeamos un ejemplo extendiendo el problema del conversor de unidades de forma que se pueda escoger una **estrategia** de conversión en base a una cultura concreta. Para empezar necesitamos una interfaz, un servicio base que la implemente y un componente que lo consuma.\n\n```shell\nng g interface converter/dynamic-converter/culture-converter\nng g service converter/dynamic-converter/culture\nng g component converter/dynamic-converter/dynamic-converter\n```\n\n```typeScript\nexport interface CultureConverter {\n  sourceCulture: string;\n  targetCulture: string;\n  convertDistance: (source: number) => number;\n}\n```\n\n```typescript\nexport abstract class CultureService implements CultureConverter {\n  sourceCulture: string;\n  targetCulture: string;\n  convertDistance: (source: number) => number;\n\n  constructor() {}\n}\n```\n\n```typeScript\nexport class CultureConverterComponent implements OnInit {\n  public source: string;\n  public target: string;\n  public sourceUnits = 0;\n  public targetUnits: number;\n\n  constructor(private cultureService:CultureService){ }\n\n  public ngOnInit() {\n    this.source = this.cultureService.sourceCulture;\n    this.target = this.cultureService.targetCulture;\n    this.convert();\n  }\n  public convert() {\n    this.targetUnits = this.cultureService.convertDistance(this.sourceUnits);\n  }\n}\n```\n\n```html\n<h2>Culture Converter.</h2>\n<h3>From {{ source }} to {{ target }}</h3>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"sourceUnits\">Distance</label>\n      <input name=\"sourceUnits\" type=\"number\" [(ngModel)]=\"sourceUnits\" placeholder=\"0\" />\n    </section>\n  </fieldset>\n  <input value=\"Convert\" type=\"button\" (click)=\"convert()\" />\n</form>\n<section>\n  <h4>Distance {{ targetUnits | number:'1.2-2' }}</h4>\n</section>\n```\n\n## 2.2 Implementaciones\n\nEl `CultureConverterComponent` depende de `CultureService` el cual implementa de forma abstracta la interfaz `CultureConverter`. Pero eso no es para nada funcional. Vamos a crear dos implementaciones específicas para Europa y USA. Estas clases concretas se apoyarán en el anteriormente creado `CalculatorService` que necesita algo más de código para hacer conversiones de distancia en ambos sentidos.\n\n```typescript\nexport class CalculatorService {\n  private milesPerKilometer = 0.62137;\n  private kilometersPerMile = 1.609;\n\n  constructor() {}\n\n  fromKilometersToMiles = (kilometers: number): number => kilometers * this.milesPerKilometer;\n  fromMilesToKilometers = (miles: number): number => miles * this.kilometersPerMile;\n}\n```\n\n```console\nng g s converter/dynamic-converter/european\nng g s converter/dynamic-converter/american\n```\n\nY aquí está el primero de los dos servicios concretos. Implementando una conversión de millas a kilómetros\n\n```typescript\n@Injectable()\nexport class EuropeanService extends CultureService {\n  sourceCulture = 'USA';\n  targetCulture = 'Europe';\n  constructor(private calculatorService: CalculatorService) { super(); }\n  public convertDistance = this.calculatorService.fromMilesToKilometers;\n}\n```\n\nY aquí el segundo que extiende la clase abstracta pasando a millas\n\n```typescript\n@Injectable()\nexport class AmericanService extends CultureService {\n  sourceCulture = 'Europe';\n  targetCulture = 'USA';\n  constructor(private calculatorService: CalculatorService) { super(); }\n  public convertDistance = this.calculatorService.fromKilometersToMiles;\n}\n```\n\n## 2.3 Provisión manual\n\nPor ejemplo si queremos utilizar la implementación concreta de USA lo indicamos en el módulo que lo consuma.\n\n```typescript\n{\n providers: [\n    {\n      provide: CultureService,\n      useClass: AmericanService,\n    },\n  ],\n}\n```\n\nEl componente reclama una instancia de `CultureService` y le damos otra con la misma interfaz. De esta forma podríamos tener módulos distintos, cada uno con su propia estrategia de conversión.\n\n## 2.4 Factoría\n\nUna situación muy común es poder elegir dinámicamente la implementación concreta. Para ello necesitamos una función factoría que con alguna lógica escoja la estrategia concreta.\n\n```typescript\nconst cultureFactory = (calculatorService: CalculatorService) => {\n  if (environment.unitsCulture === 'metric') {\n    return new EuropeanService(calculatorService);\n  } else {\n    return new AmericanService(calculatorService);\n  }\n};\n{\n  providers: [\n    {\n      provide: CultureService,\n      useFactory: cultureFactory,\n      deps: [CalculatorService],\n    },\n  ];\n}\n```\n\nDe esta forma la aplicación se comportará distinto en función de una variable de entorno.\n\nYa tenemos la aplicación mucho mejor estructurada, pero el almacén de datos es mejorable. Se mantienen los datos _hard-coded_, muy incómodo para actualizar; y en memoria, poco fiable y volátil. Lo más habitual es guardar y recuperar la información en un servidor _http_. Sigue esta serie para añadir [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/) mientras aprendes a programar con Angular. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-5-Servicios-inyectables-en-Angular","published":1,"updated":"2023-07-02T10:25:58.478Z","__permalink":"servicios-inyectables-en-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fh001fe096e3v7h8up","content":"<p><img src=\"/images/tutorial-angular-5_inject.png\" alt=\"servicios-inyectables-en-Angular\"></p>\n<p>La presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. <strong>La lógica y los datos tienen su lugar en servicios compartidos</strong>.</p>\n<p>Para que los componentes consuman los servicios de forma controlada tenemos proveedores <em>inyectables</em> en la librería <code>@angular/core</code> con los que realizar <strong>la inyección de dependencias</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a>. Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Inyeccion-de-dependencias\"><a href=\"#1-Inyeccion-de-dependencias\" class=\"headerlink\" title=\"1. Inyección de dependencias\"></a>1. Inyección de dependencias</h1><p>Como casi todo en Angular, <strong>los servicios son clases TypeScript</strong>. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.</p>\n<p>Este sistema se basa en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona la <strong><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\">Dependency Injection</a> en Angular</strong>.</p>\n<p>Como demostración vamos a trabajar con un par de utilidades para conversión de unidades. Crearé un módulo y un componente en el que visualizarlo.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m converter --route converter --module app-routing.module</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-1-Generacion-de-servicios\"><a href=\"#1-1-Generacion-de-servicios\" class=\"headerlink\" title=\"1.1 Generación de servicios\"></a>1.1 Generación de servicios</h2><p>La particularidad de las clases de servicios está en su decorador: <code>@Injectable()</code>. Esta función viene en el <code>@angular/core</code> e <strong>indica que esta clase puede ser inyectada</strong> dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios. Estos son ejemplos de instrucciones para crear un <em>service</em>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s converter/calculator</span><br></pre></td></tr></table></figure>\n\n<p>El resultado es el fichero <code>calculator.service.ts</code> con su decorador que toma una <em>class</em> normal y produce algo <em>injectable</em>. Veamos una implementación mínima:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalculatorService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> milesPerKilometer = <span class=\"number\">0.62137</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> kilometersPerMile = <span class=\"number\">1.609</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fromKilometersToMiles = (<span class=\"attr\">kilometers</span>: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> kilometers * <span class=\"variable language_\">this</span>.<span class=\"property\">milesPerKilometer</span>;</span><br><span class=\"line\">  fromMilesToKilometers = (<span class=\"attr\">miles</span>: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> miles * <span class=\"variable language_\">this</span>.<span class=\"property\">kilometersPerMile</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ahora tienes centralizado en este servicio la lógica de datos que tenemos hasta el momento. Los demás componentes la podrán utilizar.</p>\n<h2 id=\"1-2-Consumo-de-dependencias\"><a href=\"#1-2-Consumo-de-dependencias\" class=\"headerlink\" title=\"1.2 Consumo de dependencias\"></a>1.2 Consumo de dependencias</h2><p>Declarar y decorar la clase no es suficiente para poder reclamarla. Necesitas <strong>registrarla como un proveedor en algún módulo</strong>. Desde Angular 6 los servicios se auto-proveen en el módulo raíz mediante la configuración <code>providedIn: &#39;root&#39;</code> de su decorador.</p>\n<blockquote>\n<p>Esto es útil y cómodo en una gran cantidad de casos. El módulo raíz es visible para toda la aplicación de forma que cualquier componente puede reclamar un servicio suyo sin problema. Excepto que el problema sea el tamaño. El módulo raíz se carga al arrancar y todas sus referencias van el <em>bundle</em> principal. Si queremos repartir el peso debemos llevar ciertos servicios al módulo funcional que los necesite.</p>\n</blockquote>\n<p>Vamos a consumir este servicio en el <code>converter.component.ts</code>. Al consumo de los servicios inyectables se le conoce como <em>dependencia</em>. Cada componente o servicio puede <strong>declarar en su constructor sus dependencias</strong> hacia servicios inyectables. El convenio exige que se especifique el tipo esperado</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConverterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> kilometers = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">miles</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> calculatorService: CalculatorService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">convert</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">convert</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">miles</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">calculatorService</span>.<span class=\"title function_\">fromKilometersToMiles</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">kilometers</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Agregar el modificador de alcance <code>private</code> o <code>public</code> en la declaración de argumentos hace que <em>TypeScript</em> genere una propiedad inicializada con el valor recibido. Es azúcar sintáctico para no tener que declarar la propiedad y asignarle el valor del argumento manualmente. En resumen, los <a href=\"https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords/\">constructores en TypeScrip</a> admiten argumentos que transforman en propiedades. Mantenemos privado el <code>converterService</code> para evitar su uso desde la vista.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Distance Converter.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>From Europe to USA<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;kilometers&quot;</span>&gt;</span>Kilometers<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;kilometers&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;kilometers&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Convert&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;convert()&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>&#123;&#123; miles | number:&#x27;1.2-2&#x27; &#125;&#125; miles<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;dynamic&#x27;]&quot;</span>&gt;</span>Go to Abstract Culture Converter Sample<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Inversion-del-control\"><a href=\"#2-Inversion-del-control\" class=\"headerlink\" title=\"2. Inversión del control\"></a>2. Inversión del control</h1><p>Un concepto íntimamente relacionado con la inyección de dependencias es el de <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\"><strong>Inversion of Control</strong></a>. El componente dependiente expresa sus necesidades, pero es el <em>framework</em> el que en última instancia decide lo que recibirá. Vemos entonces que <strong>el invocado cede el control al invocador</strong>.</p>\n<p>Cuando proveemos un servicio en Angular, el comportamiento por defecto es el de proveer un <em>singleton</em> pero hay más opciones. Si se usa el objeto <code>provider</code> con <code>useClass</code> , <code>useValue</code> y <code>useFactory</code> podemos controlar el proceso de inyección.</p>\n<p>Se crea un <a href=\"https://es.wikipedia.org/wiki/Singleton\"><em>singleton</em></a> por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Si va a ser compartido gana la opción de auto proveerlo en el raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.</p>\n<p>En un módulo cualquiera, siempre podríamos agregar un servicio a su array de <em>providers</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [...],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [...],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [ <span class=\"title class_\">CalculatorService</span> ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Pero siempre será <strong>una instancia única por módulo</strong>. Si un <em>singleton</em> no es lo adecuado, entonces puedes proveer el mismo servicio en distintos módulos. De esa forma se creará una instancia distinta para cada uno. Si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.</p>\n<blockquote>\n<p>Incluso es posible usar el array <code>providers:[]</code> en la decoración de un componente o de otro servicio. Haciendo así aún más granular la elección de instancia.</p>\n</blockquote>\n<p>Veamos un ejemplo extendiendo el problema del conversor de unidades de forma que se pueda escoger una <strong>estrategia</strong> de conversión en base a una cultura concreta. Para empezar necesitamos una interfaz, un servicio base que la implemente y un componente que lo consuma.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g interface converter/dynamic-converter/culture-converter</span><br><span class=\"line\">ng g service converter/dynamic-converter/culture</span><br><span class=\"line\">ng g component converter/dynamic-converter/dynamic-converter</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CultureConverter</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sourceCulture</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">targetCulture</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">convertDistance</span>: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CultureService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CultureConverter</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sourceCulture</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">targetCulture</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">convertDistance</span>: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CultureConverterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">source</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">target</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> sourceUnits = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">targetUnits</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> cultureService:CultureService</span>)&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">source</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">cultureService</span>.<span class=\"property\">sourceCulture</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">target</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">cultureService</span>.<span class=\"property\">targetCulture</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">convert</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">convert</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">targetUnits</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">cultureService</span>.<span class=\"title function_\">convertDistance</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">sourceUnits</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Culture Converter.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>From &#123;&#123; source &#125;&#125; to &#123;&#123; target &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;sourceUnits&quot;</span>&gt;</span>Distance<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sourceUnits&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;sourceUnits&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Convert&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;convert()&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Distance &#123;&#123; targetUnits | number:&#x27;1.2-2&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Implementaciones\"><a href=\"#2-2-Implementaciones\" class=\"headerlink\" title=\"2.2 Implementaciones\"></a>2.2 Implementaciones</h2><p>El <code>CultureConverterComponent</code> depende de <code>CultureService</code> el cual implementa de forma abstracta la interfaz <code>CultureConverter</code>. Pero eso no es para nada funcional. Vamos a crear dos implementaciones específicas para Europa y USA. Estas clases concretas se apoyarán en el anteriormente creado <code>CalculatorService</code> que necesita algo más de código para hacer conversiones de distancia en ambos sentidos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalculatorService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> milesPerKilometer = <span class=\"number\">0.62137</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> kilometersPerMile = <span class=\"number\">1.609</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fromKilometersToMiles = (<span class=\"attr\">kilometers</span>: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> kilometers * <span class=\"variable language_\">this</span>.<span class=\"property\">milesPerKilometer</span>;</span><br><span class=\"line\">  fromMilesToKilometers = (<span class=\"attr\">miles</span>: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> miles * <span class=\"variable language_\">this</span>.<span class=\"property\">kilometersPerMile</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s converter/dynamic-converter/european</span><br><span class=\"line\">ng g s converter/dynamic-converter/american</span><br></pre></td></tr></table></figure>\n\n<p>Y aquí está el primero de los dos servicios concretos. Implementando una conversión de millas a kilómetros</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EuropeanService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">CultureService</span> &#123;</span><br><span class=\"line\">  sourceCulture = <span class=\"string\">&#x27;USA&#x27;</span>;</span><br><span class=\"line\">  targetCulture = <span class=\"string\">&#x27;Europe&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> calculatorService: CalculatorService</span>) &#123; <span class=\"variable language_\">super</span>(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertDistance = <span class=\"variable language_\">this</span>.<span class=\"property\">calculatorService</span>.<span class=\"property\">fromMilesToKilometers</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y aquí el segundo que extiende la clase abstracta pasando a millas</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AmericanService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">CultureService</span> &#123;</span><br><span class=\"line\">  sourceCulture = <span class=\"string\">&#x27;Europe&#x27;</span>;</span><br><span class=\"line\">  targetCulture = <span class=\"string\">&#x27;USA&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> calculatorService: CalculatorService</span>) &#123; <span class=\"variable language_\">super</span>(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertDistance = <span class=\"variable language_\">this</span>.<span class=\"property\">calculatorService</span>.<span class=\"property\">fromKilometersToMiles</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-Provision-manual\"><a href=\"#2-3-Provision-manual\" class=\"headerlink\" title=\"2.3 Provisión manual\"></a>2.3 Provisión manual</h2><p>Por ejemplo si queremos utilizar la implementación concreta de USA lo indicamos en el módulo que lo consuma.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"title class_\">CultureService</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">AmericanService</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>El componente reclama una instancia de <code>CultureService</code> y le damos otra con la misma interfaz. De esta forma podríamos tener módulos distintos, cada uno con su propia estrategia de conversión.</p>\n<h2 id=\"2-4-Factoria\"><a href=\"#2-4-Factoria\" class=\"headerlink\" title=\"2.4 Factoría\"></a>2.4 Factoría</h2><p>Una situación muy común es poder elegir dinámicamente la implementación concreta. Para ello necesitamos una función factoría que con alguna lógica escoja la estrategia concreta.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cultureFactory</span> = (<span class=\"params\">calculatorService: CalculatorService</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (environment.<span class=\"property\">unitsCulture</span> === <span class=\"string\">&#x27;metric&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EuropeanService</span>(calculatorService);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AmericanService</span>(calculatorService);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"title class_\">CultureService</span>,</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: cultureFactory,</span><br><span class=\"line\">      <span class=\"attr\">deps</span>: [<span class=\"title class_\">CalculatorService</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>De esta forma la aplicación se comportará distinto en función de una variable de entorno.</p>\n<p>Ya tenemos la aplicación mucho mejor estructurada, pero el almacén de datos es mejorable. Se mantienen los datos <em>hard-coded</em>, muy incómodo para actualizar; y en memoria, poco fiable y volátil. Lo más habitual es guardar y recuperar la información en un servidor <em>http</em>. Sigue esta serie para añadir <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a> mientras aprendes a programar con Angular. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-5_inject.png\" alt=\"servicios-inyectables-en-Angular\"></p>\n<p>La presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. <strong>La lógica y los datos tienen su lugar en servicios compartidos</strong>.</p>\n<p>Para que los componentes consuman los servicios de forma controlada tenemos proveedores <em>inyectables</em> en la librería <code>@angular/core</code> con los que realizar <strong>la inyección de dependencias</strong>.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a>. Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Inyeccion-de-dependencias\"><a href=\"#1-Inyeccion-de-dependencias\" class=\"headerlink\" title=\"1. Inyección de dependencias\"></a>1. Inyección de dependencias</h1><p>Como casi todo en Angular, <strong>los servicios son clases TypeScript</strong>. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.</p>\n<p>Este sistema se basa en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona la <strong><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\">Dependency Injection</a> en Angular</strong>.</p>\n<p>Como demostración vamos a trabajar con un par de utilidades para conversión de unidades. Crearé un módulo y un componente en el que visualizarlo.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m converter --route converter --module app-routing.module</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-1-Generacion-de-servicios\"><a href=\"#1-1-Generacion-de-servicios\" class=\"headerlink\" title=\"1.1 Generación de servicios\"></a>1.1 Generación de servicios</h2><p>La particularidad de las clases de servicios está en su decorador: <code>@Injectable()</code>. Esta función viene en el <code>@angular/core</code> e <strong>indica que esta clase puede ser inyectada</strong> dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios. Estos son ejemplos de instrucciones para crear un <em>service</em>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s converter/calculator</span><br></pre></td></tr></table></figure>\n\n<p>El resultado es el fichero <code>calculator.service.ts</code> con su decorador que toma una <em>class</em> normal y produce algo <em>injectable</em>. Veamos una implementación mínima:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalculatorService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> milesPerKilometer = <span class=\"number\">0.62137</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> kilometersPerMile = <span class=\"number\">1.609</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fromKilometersToMiles = (<span class=\"attr\">kilometers</span>: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> kilometers * <span class=\"variable language_\">this</span>.<span class=\"property\">milesPerKilometer</span>;</span><br><span class=\"line\">  fromMilesToKilometers = (<span class=\"attr\">miles</span>: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> miles * <span class=\"variable language_\">this</span>.<span class=\"property\">kilometersPerMile</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ahora tienes centralizado en este servicio la lógica de datos que tenemos hasta el momento. Los demás componentes la podrán utilizar.</p>\n<h2 id=\"1-2-Consumo-de-dependencias\"><a href=\"#1-2-Consumo-de-dependencias\" class=\"headerlink\" title=\"1.2 Consumo de dependencias\"></a>1.2 Consumo de dependencias</h2><p>Declarar y decorar la clase no es suficiente para poder reclamarla. Necesitas <strong>registrarla como un proveedor en algún módulo</strong>. Desde Angular 6 los servicios se auto-proveen en el módulo raíz mediante la configuración <code>providedIn: &#39;root&#39;</code> de su decorador.</p>\n<blockquote>\n<p>Esto es útil y cómodo en una gran cantidad de casos. El módulo raíz es visible para toda la aplicación de forma que cualquier componente puede reclamar un servicio suyo sin problema. Excepto que el problema sea el tamaño. El módulo raíz se carga al arrancar y todas sus referencias van el <em>bundle</em> principal. Si queremos repartir el peso debemos llevar ciertos servicios al módulo funcional que los necesite.</p>\n</blockquote>\n<p>Vamos a consumir este servicio en el <code>converter.component.ts</code>. Al consumo de los servicios inyectables se le conoce como <em>dependencia</em>. Cada componente o servicio puede <strong>declarar en su constructor sus dependencias</strong> hacia servicios inyectables. El convenio exige que se especifique el tipo esperado</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConverterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> kilometers = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">miles</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> calculatorService: CalculatorService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">convert</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">convert</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">miles</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">calculatorService</span>.<span class=\"title function_\">fromKilometersToMiles</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">kilometers</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Agregar el modificador de alcance <code>private</code> o <code>public</code> en la declaración de argumentos hace que <em>TypeScript</em> genere una propiedad inicializada con el valor recibido. Es azúcar sintáctico para no tener que declarar la propiedad y asignarle el valor del argumento manualmente. En resumen, los <a href=\"https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords/\">constructores en TypeScrip</a> admiten argumentos que transforman en propiedades. Mantenemos privado el <code>converterService</code> para evitar su uso desde la vista.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Distance Converter.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>From Europe to USA<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;kilometers&quot;</span>&gt;</span>Kilometers<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;kilometers&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;kilometers&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">             <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Convert&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;convert()&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>&#123;&#123; miles | number:&#x27;1.2-2&#x27; &#125;&#125; miles<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;dynamic&#x27;]&quot;</span>&gt;</span>Go to Abstract Culture Converter Sample<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Inversion-del-control\"><a href=\"#2-Inversion-del-control\" class=\"headerlink\" title=\"2. Inversión del control\"></a>2. Inversión del control</h1><p>Un concepto íntimamente relacionado con la inyección de dependencias es el de <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\"><strong>Inversion of Control</strong></a>. El componente dependiente expresa sus necesidades, pero es el <em>framework</em> el que en última instancia decide lo que recibirá. Vemos entonces que <strong>el invocado cede el control al invocador</strong>.</p>\n<p>Cuando proveemos un servicio en Angular, el comportamiento por defecto es el de proveer un <em>singleton</em> pero hay más opciones. Si se usa el objeto <code>provider</code> con <code>useClass</code> , <code>useValue</code> y <code>useFactory</code> podemos controlar el proceso de inyección.</p>\n<p>Se crea un <a href=\"https://es.wikipedia.org/wiki/Singleton\"><em>singleton</em></a> por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Si va a ser compartido gana la opción de auto proveerlo en el raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.</p>\n<p>En un módulo cualquiera, siempre podríamos agregar un servicio a su array de <em>providers</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [...],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [...],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [ <span class=\"title class_\">CalculatorService</span> ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Pero siempre será <strong>una instancia única por módulo</strong>. Si un <em>singleton</em> no es lo adecuado, entonces puedes proveer el mismo servicio en distintos módulos. De esa forma se creará una instancia distinta para cada uno. Si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.</p>\n<blockquote>\n<p>Incluso es posible usar el array <code>providers:[]</code> en la decoración de un componente o de otro servicio. Haciendo así aún más granular la elección de instancia.</p>\n</blockquote>\n<p>Veamos un ejemplo extendiendo el problema del conversor de unidades de forma que se pueda escoger una <strong>estrategia</strong> de conversión en base a una cultura concreta. Para empezar necesitamos una interfaz, un servicio base que la implemente y un componente que lo consuma.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g interface converter/dynamic-converter/culture-converter</span><br><span class=\"line\">ng g service converter/dynamic-converter/culture</span><br><span class=\"line\">ng g component converter/dynamic-converter/dynamic-converter</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CultureConverter</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sourceCulture</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">targetCulture</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">convertDistance</span>: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CultureService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CultureConverter</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sourceCulture</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">targetCulture</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">convertDistance</span>: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CultureConverterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">source</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">target</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> sourceUnits = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">targetUnits</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> cultureService:CultureService</span>)&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">source</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">cultureService</span>.<span class=\"property\">sourceCulture</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">target</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">cultureService</span>.<span class=\"property\">targetCulture</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">convert</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">convert</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">targetUnits</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">cultureService</span>.<span class=\"title function_\">convertDistance</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">sourceUnits</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Culture Converter.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>From &#123;&#123; source &#125;&#125; to &#123;&#123; target &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;sourceUnits&quot;</span>&gt;</span>Distance<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sourceUnits&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;sourceUnits&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Convert&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;convert()&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Distance &#123;&#123; targetUnits | number:&#x27;1.2-2&#x27; &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Implementaciones\"><a href=\"#2-2-Implementaciones\" class=\"headerlink\" title=\"2.2 Implementaciones\"></a>2.2 Implementaciones</h2><p>El <code>CultureConverterComponent</code> depende de <code>CultureService</code> el cual implementa de forma abstracta la interfaz <code>CultureConverter</code>. Pero eso no es para nada funcional. Vamos a crear dos implementaciones específicas para Europa y USA. Estas clases concretas se apoyarán en el anteriormente creado <code>CalculatorService</code> que necesita algo más de código para hacer conversiones de distancia en ambos sentidos.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalculatorService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> milesPerKilometer = <span class=\"number\">0.62137</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> kilometersPerMile = <span class=\"number\">1.609</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fromKilometersToMiles = (<span class=\"attr\">kilometers</span>: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> kilometers * <span class=\"variable language_\">this</span>.<span class=\"property\">milesPerKilometer</span>;</span><br><span class=\"line\">  fromMilesToKilometers = (<span class=\"attr\">miles</span>: <span class=\"built_in\">number</span>): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> miles * <span class=\"variable language_\">this</span>.<span class=\"property\">kilometersPerMile</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s converter/dynamic-converter/european</span><br><span class=\"line\">ng g s converter/dynamic-converter/american</span><br></pre></td></tr></table></figure>\n\n<p>Y aquí está el primero de los dos servicios concretos. Implementando una conversión de millas a kilómetros</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EuropeanService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">CultureService</span> &#123;</span><br><span class=\"line\">  sourceCulture = <span class=\"string\">&#x27;USA&#x27;</span>;</span><br><span class=\"line\">  targetCulture = <span class=\"string\">&#x27;Europe&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> calculatorService: CalculatorService</span>) &#123; <span class=\"variable language_\">super</span>(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertDistance = <span class=\"variable language_\">this</span>.<span class=\"property\">calculatorService</span>.<span class=\"property\">fromMilesToKilometers</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y aquí el segundo que extiende la clase abstracta pasando a millas</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AmericanService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">CultureService</span> &#123;</span><br><span class=\"line\">  sourceCulture = <span class=\"string\">&#x27;Europe&#x27;</span>;</span><br><span class=\"line\">  targetCulture = <span class=\"string\">&#x27;USA&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> calculatorService: CalculatorService</span>) &#123; <span class=\"variable language_\">super</span>(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertDistance = <span class=\"variable language_\">this</span>.<span class=\"property\">calculatorService</span>.<span class=\"property\">fromKilometersToMiles</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-Provision-manual\"><a href=\"#2-3-Provision-manual\" class=\"headerlink\" title=\"2.3 Provisión manual\"></a>2.3 Provisión manual</h2><p>Por ejemplo si queremos utilizar la implementación concreta de USA lo indicamos en el módulo que lo consuma.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"title class_\">CultureService</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">AmericanService</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>El componente reclama una instancia de <code>CultureService</code> y le damos otra con la misma interfaz. De esta forma podríamos tener módulos distintos, cada uno con su propia estrategia de conversión.</p>\n<h2 id=\"2-4-Factoria\"><a href=\"#2-4-Factoria\" class=\"headerlink\" title=\"2.4 Factoría\"></a>2.4 Factoría</h2><p>Una situación muy común es poder elegir dinámicamente la implementación concreta. Para ello necesitamos una función factoría que con alguna lógica escoja la estrategia concreta.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cultureFactory</span> = (<span class=\"params\">calculatorService: CalculatorService</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (environment.<span class=\"property\">unitsCulture</span> === <span class=\"string\">&#x27;metric&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EuropeanService</span>(calculatorService);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AmericanService</span>(calculatorService);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"title class_\">CultureService</span>,</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: cultureFactory,</span><br><span class=\"line\">      <span class=\"attr\">deps</span>: [<span class=\"title class_\">CalculatorService</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>De esta forma la aplicación se comportará distinto en función de una variable de entorno.</p>\n<p>Ya tenemos la aplicación mucho mejor estructurada, pero el almacén de datos es mejorable. Se mantienen los datos <em>hard-coded</em>, muy incómodo para actualizar; y en memoria, poco fiable y volátil. Lo más habitual es guardar y recuperar la información en un servidor <em>http</em>. Sigue esta serie para añadir <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a> mientras aprendes a programar con Angular. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Comunicaciones http en Angular","date":"2020-04-18T09:06:00.000Z","thumbnail":"/css/images/angular-6_http.png","_content":"\n![comunicaciones-http-en-Angular](/images/tutorial-angular-6_http.png)\n\nLas comunicaciones _http_ son una pieza fundamental del desarrollo web, y en **Angular** siempre han sido potentes y fáciles. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas... y además la librería *RxJS* y sus *streams* son intimidantes para los novatos.\n\nPero en la versión Angular 9 **consumir un servicio REST** puede ser cosa de niños si aprendes a jugar con los _observables_ y los servicios de la librería `@angular/common/http`. Conseguirás realizar **comunicaciones http asíncronas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/). Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST usando las tecnologías de Angular Http.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. El servicio HttpClient\n\nComo demostración vamos a consumir un API pública con datos de [cotización de monedas](https://exchangeratesapi.io/). Crearé un módulo y un componente en el que visualizar las divisas y después las transformaremos para guardarlas en un servicio propio.\n\n```shell\nng g m money --route money --module app-routing.module\n```\n\n## 1.1 Importación y declaración de servicios\n\nLa librería `@angular/common/http` trae el módulo `HttpClientModule` con el servicio inyectable `HttpClient`. Lo primero es importar dicho módulo.\n\n```typescript\nimport { HttpClientModule } from '@angular/common/http';\n@NgModule({\n  declarations: [MoneyComponent],\n  imports: [CommonModule, MoneyRoutingModule, HttpClientModule],\n})\nexport class MoneyModule {}\n```\n\nEn tu componente tienes que reclamar la dependencia al servicio para poder usarla. Atención a la importación pues hay más clases con el nombre `HttpClient`. Debe quedar algo así:\n\n```typescript\nimport { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-money',\n  templateUrl: './money.component.html',\n  styles: []\n})\nexport class MoneyComponent implements OnInit {\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {}\n}\n```\n\nA partir de este momento sólo queda invocar los métodos REST en la propiedad `this.http`.\n\n## 1.2 Obtención de datos\n\nPara cada verbo _http_ tenemos su método en el servicio `HttpClient`. Su primer parámetro será la *url* a la que invocar. Empecemos por el `get` que automáticamente solicita y devuelve objetos _JSON_ desde un API. Por ejemplo para obtener [las últimas cotizaciones de las principales divisas](https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CHF,JPY) lo haremos así:\n\n\n```typescript\nexport class RatesComponent implements OnInit {\n  private urlapi\n    = 'https://api.exchangeratesapi.io/latest';\n  public currentEuroRates: any = null;\n\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {\n    this.getCurrentEuroRates();\n  }\n\n  private getCurrentEuroRates() {\n    const currencies = 'USD,GBP,CHF,JPY';\n    const url = `${this.urlapi}?symbols=${currencies}`;\n    this.httpClient\n      .get(url)\n      .subscribe(apiData => (this.currentEuroRates = apiData));\n  }\n}\n```\n\n> El método _get_ retorna un objeto observable. Los observables _http_ han de consumirse mediante el método _subscribe_ para que realmente se lancen. Dicho método _subscribe_ admite hasta tres _callbacks_ para responder a tres sucesos posibles. Retorno de datos correcto, retorno de un error y señal de finalización. La sintaxis original ofrece tres argumentos opcionales para enviarles las funciones callback `susbcribe(data, err, end)`. En este ejemplo solo hemos usado el primero.\n\nOtra sintaxis más reciente sustituye los tres argumentos funcionales por un un único objeto. La ventaja es que puedes usar clases con lógica común, reutilizarlos en distintas suscripciones, o simplemente tener el código un poco más organizadito.\n\n```typescript\nobservable$.susbcribe({\n  next: function(data){},\n  error: function(err){},\n  complete: function(){}\n  })\n```\nLa presentación en la vista sólo tiene que acceder a la propiedad dónde se hayan cargado las respuestas tratadas en el _callback_ de la suscripción.\n\n```html\n<h2> Currency Rates. </h2>\n<h3> From Euro to the world </h3>\n<pre>{{ currentEuroRates | json }}</pre>\n```\n\n\n## 1.3 Envío de datos\n\nSupongamos que, una vez recibidas las cotizaciones, pretendemos transformarlas y almacenarlas en otro servicio. Por ejemplo un objeto para cada día y moneda. El envío en este caso será con el método _post_ al que se le pasará la ruta del _end point_ y el objeto _payload_ que se enviará al servidor.\n\nVamos a agregar una propiedad y un par de métodos al `rates-component.ts`. La idea es obtener un array de cotizaciones aa partir del objeto previo, y guardarla una por una.\n\n```typescript\nthis.httpClient\n      .post(url, payloadObject)\n      .subscribe();\n```\n> Atención a los métodos `subscribe()`. Aunque vayan vacíos son imprescindibles para que se ejecute la llamada. Esto puede resultar contra intuitivo, pero la verdad es que los observables Http de Angular sólo trabajan si hay alguien mirando.\n\n\n## 1.4 Actualización de datos\n\nUn par de seudo ejemplos más para acabar de entender la mecánica básica de `HttpClient`. Podemos fijar el tipo de datos esperado en cualquier llamada. De hecho es recomendable que tengas un interfaz para cada respuesta esperada.\n\n```typescript\npublic update() {\n  this.httpClient.delete(itemResourceUrl, newValue).subscribe();\n}\npublic delete() {\n  this.httpClient.delete(itemResourceUrl).subscribe();\n}\n```\n\nY hasta aquí lo básico de comunicaciones *http*. ¿Fácil verdad?. Pero la vida real raramente es tan sencilla. Si quieres enfrentarte a algo más duro debes prepararte y dominar los observables *RxJS*.\n\nLo que viene a partir de ahora requerirá tiempo y concentración. Si continúas adelante esto ya no será *your grandpa´s http anymore*.\n\n # 2 Observables\n\nLas **comunicaciones** entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.\n\nEsta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones _AJAX_ basadas en el paso de funciones _callback_. La aparición de las _promises_ mejoró la claridad del código, y ahora con los _Observables_ tenemos además una gran potencia para manipular la **información asíncrona**.\n\n> El patrón `Observable` fue implementado por Microsoft en la librería [_Reactive Extensions_](http://reactivex.io/intro.html) más conocida como `RxJs`. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.\n\nLo primero es importar el código, de forma similar a cualquier otra clase o función. Por ejemplo para empezar basta con `import { Observable } from \"rxjs/Observable\";`. Tendremos la clase usada por angular para observar el respuesta *http*.\n\nPero esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan el tipo esperado `: Observable<MyClass>`, o si no saben que tipo esperar se conforman con `: Observable<any>`.\n\nEn cualquier caso, **toda operación asíncrona retornará una instancia observable** a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine.\n\nAunque a veces no se verá el _subscribe_...\n\nYa tenemos el programa comunicado por _http_ con un servidor; aunque por ahora de forma anónima y sin ninguna seguridad. Necesitamos aumentar el conocimiento actual de los observables, del _httpClient_ con los interceptores y ya estaremos cerca de resolverlo. Sigue esta serie para añadirle [vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/) mientras aprendes a programar con Angular. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-6-comunicaciones-http-en-angular.md","raw":"---\ntitle: Comunicaciones http en Angular\npermalink: comunicaciones-http-en-Angular\ndate: 2020-04-18 11:06:00\ntags:\n- Angular\n- http\n- RxJS\n- Observables\n- Tutorial\n- Introducción\n- Angular9\n- Angular2\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-6_http.png\n---\n\n![comunicaciones-http-en-Angular](/images/tutorial-angular-6_http.png)\n\nLas comunicaciones _http_ son una pieza fundamental del desarrollo web, y en **Angular** siempre han sido potentes y fáciles. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas... y además la librería *RxJS* y sus *streams* son intimidantes para los novatos.\n\nPero en la versión Angular 9 **consumir un servicio REST** puede ser cosa de niños si aprendes a jugar con los _observables_ y los servicios de la librería `@angular/common/http`. Conseguirás realizar **comunicaciones http asíncronas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/). Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST usando las tecnologías de Angular Http.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. El servicio HttpClient\n\nComo demostración vamos a consumir un API pública con datos de [cotización de monedas](https://exchangeratesapi.io/). Crearé un módulo y un componente en el que visualizar las divisas y después las transformaremos para guardarlas en un servicio propio.\n\n```shell\nng g m money --route money --module app-routing.module\n```\n\n## 1.1 Importación y declaración de servicios\n\nLa librería `@angular/common/http` trae el módulo `HttpClientModule` con el servicio inyectable `HttpClient`. Lo primero es importar dicho módulo.\n\n```typescript\nimport { HttpClientModule } from '@angular/common/http';\n@NgModule({\n  declarations: [MoneyComponent],\n  imports: [CommonModule, MoneyRoutingModule, HttpClientModule],\n})\nexport class MoneyModule {}\n```\n\nEn tu componente tienes que reclamar la dependencia al servicio para poder usarla. Atención a la importación pues hay más clases con el nombre `HttpClient`. Debe quedar algo así:\n\n```typescript\nimport { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-money',\n  templateUrl: './money.component.html',\n  styles: []\n})\nexport class MoneyComponent implements OnInit {\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {}\n}\n```\n\nA partir de este momento sólo queda invocar los métodos REST en la propiedad `this.http`.\n\n## 1.2 Obtención de datos\n\nPara cada verbo _http_ tenemos su método en el servicio `HttpClient`. Su primer parámetro será la *url* a la que invocar. Empecemos por el `get` que automáticamente solicita y devuelve objetos _JSON_ desde un API. Por ejemplo para obtener [las últimas cotizaciones de las principales divisas](https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CHF,JPY) lo haremos así:\n\n\n```typescript\nexport class RatesComponent implements OnInit {\n  private urlapi\n    = 'https://api.exchangeratesapi.io/latest';\n  public currentEuroRates: any = null;\n\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {\n    this.getCurrentEuroRates();\n  }\n\n  private getCurrentEuroRates() {\n    const currencies = 'USD,GBP,CHF,JPY';\n    const url = `${this.urlapi}?symbols=${currencies}`;\n    this.httpClient\n      .get(url)\n      .subscribe(apiData => (this.currentEuroRates = apiData));\n  }\n}\n```\n\n> El método _get_ retorna un objeto observable. Los observables _http_ han de consumirse mediante el método _subscribe_ para que realmente se lancen. Dicho método _subscribe_ admite hasta tres _callbacks_ para responder a tres sucesos posibles. Retorno de datos correcto, retorno de un error y señal de finalización. La sintaxis original ofrece tres argumentos opcionales para enviarles las funciones callback `susbcribe(data, err, end)`. En este ejemplo solo hemos usado el primero.\n\nOtra sintaxis más reciente sustituye los tres argumentos funcionales por un un único objeto. La ventaja es que puedes usar clases con lógica común, reutilizarlos en distintas suscripciones, o simplemente tener el código un poco más organizadito.\n\n```typescript\nobservable$.susbcribe({\n  next: function(data){},\n  error: function(err){},\n  complete: function(){}\n  })\n```\nLa presentación en la vista sólo tiene que acceder a la propiedad dónde se hayan cargado las respuestas tratadas en el _callback_ de la suscripción.\n\n```html\n<h2> Currency Rates. </h2>\n<h3> From Euro to the world </h3>\n<pre>{{ currentEuroRates | json }}</pre>\n```\n\n\n## 1.3 Envío de datos\n\nSupongamos que, una vez recibidas las cotizaciones, pretendemos transformarlas y almacenarlas en otro servicio. Por ejemplo un objeto para cada día y moneda. El envío en este caso será con el método _post_ al que se le pasará la ruta del _end point_ y el objeto _payload_ que se enviará al servidor.\n\nVamos a agregar una propiedad y un par de métodos al `rates-component.ts`. La idea es obtener un array de cotizaciones aa partir del objeto previo, y guardarla una por una.\n\n```typescript\nthis.httpClient\n      .post(url, payloadObject)\n      .subscribe();\n```\n> Atención a los métodos `subscribe()`. Aunque vayan vacíos son imprescindibles para que se ejecute la llamada. Esto puede resultar contra intuitivo, pero la verdad es que los observables Http de Angular sólo trabajan si hay alguien mirando.\n\n\n## 1.4 Actualización de datos\n\nUn par de seudo ejemplos más para acabar de entender la mecánica básica de `HttpClient`. Podemos fijar el tipo de datos esperado en cualquier llamada. De hecho es recomendable que tengas un interfaz para cada respuesta esperada.\n\n```typescript\npublic update() {\n  this.httpClient.delete(itemResourceUrl, newValue).subscribe();\n}\npublic delete() {\n  this.httpClient.delete(itemResourceUrl).subscribe();\n}\n```\n\nY hasta aquí lo básico de comunicaciones *http*. ¿Fácil verdad?. Pero la vida real raramente es tan sencilla. Si quieres enfrentarte a algo más duro debes prepararte y dominar los observables *RxJS*.\n\nLo que viene a partir de ahora requerirá tiempo y concentración. Si continúas adelante esto ya no será *your grandpa´s http anymore*.\n\n # 2 Observables\n\nLas **comunicaciones** entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.\n\nEsta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones _AJAX_ basadas en el paso de funciones _callback_. La aparición de las _promises_ mejoró la claridad del código, y ahora con los _Observables_ tenemos además una gran potencia para manipular la **información asíncrona**.\n\n> El patrón `Observable` fue implementado por Microsoft en la librería [_Reactive Extensions_](http://reactivex.io/intro.html) más conocida como `RxJs`. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.\n\nLo primero es importar el código, de forma similar a cualquier otra clase o función. Por ejemplo para empezar basta con `import { Observable } from \"rxjs/Observable\";`. Tendremos la clase usada por angular para observar el respuesta *http*.\n\nPero esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan el tipo esperado `: Observable<MyClass>`, o si no saben que tipo esperar se conforman con `: Observable<any>`.\n\nEn cualquier caso, **toda operación asíncrona retornará una instancia observable** a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine.\n\nAunque a veces no se verá el _subscribe_...\n\nYa tenemos el programa comunicado por _http_ con un servidor; aunque por ahora de forma anónima y sin ninguna seguridad. Necesitamos aumentar el conocimiento actual de los observables, del _httpClient_ con los interceptores y ya estaremos cerca de resolverlo. Sigue esta serie para añadirle [vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/) mientras aprendes a programar con Angular. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-6-comunicaciones-http-en-angular","published":1,"updated":"2023-07-02T10:25:58.478Z","__permalink":"comunicaciones-http-en-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fh001ge0964wkf37d4","content":"<p><img src=\"/images/tutorial-angular-6_http.png\" alt=\"comunicaciones-http-en-Angular\"></p>\n<p>Las comunicaciones <em>http</em> son una pieza fundamental del desarrollo web, y en <strong>Angular</strong> siempre han sido potentes y fáciles. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas… y además la librería <em>RxJS</em> y sus <em>streams</em> son intimidantes para los novatos.</p>\n<p>Pero en la versión Angular 9 <strong>consumir un servicio REST</strong> puede ser cosa de niños si aprendes a jugar con los <em>observables</em> y los servicios de la librería <code>@angular/common/http</code>. Conseguirás realizar <strong>comunicaciones http asíncronas en Angular</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a>. Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST usando las tecnologías de Angular Http.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-El-servicio-HttpClient\"><a href=\"#1-El-servicio-HttpClient\" class=\"headerlink\" title=\"1. El servicio HttpClient\"></a>1. El servicio HttpClient</h1><p>Como demostración vamos a consumir un API pública con datos de <a href=\"https://exchangeratesapi.io/\">cotización de monedas</a>. Crearé un módulo y un componente en el que visualizar las divisas y después las transformaremos para guardarlas en un servicio propio.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m money --route money --module app-routing.module</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-1-Importacion-y-declaracion-de-servicios\"><a href=\"#1-1-Importacion-y-declaracion-de-servicios\" class=\"headerlink\" title=\"1.1 Importación y declaración de servicios\"></a>1.1 Importación y declaración de servicios</h2><p>La librería <code>@angular/common/http</code> trae el módulo <code>HttpClientModule</code> con el servicio inyectable <code>HttpClient</code>. Lo primero es importar dicho módulo.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClientModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">MoneyComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">CommonModule</span>, <span class=\"title class_\">MoneyRoutingModule</span>, <span class=\"title class_\">HttpClientModule</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MoneyModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>En tu componente tienes que reclamar la dependencia al servicio para poder usarla. Atención a la importación pues hay más clases con el nombre <code>HttpClient</code>. Debe quedar algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-money&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./money.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MoneyComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A partir de este momento sólo queda invocar los métodos REST en la propiedad <code>this.http</code>.</p>\n<h2 id=\"1-2-Obtencion-de-datos\"><a href=\"#1-2-Obtencion-de-datos\" class=\"headerlink\" title=\"1.2 Obtención de datos\"></a>1.2 Obtención de datos</h2><p>Para cada verbo <em>http</em> tenemos su método en el servicio <code>HttpClient</code>. Su primer parámetro será la <em>url</em> a la que invocar. Empecemos por el <code>get</code> que automáticamente solicita y devuelve objetos <em>JSON</em> desde un API. Por ejemplo para obtener <a href=\"https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CHF,JPY\">las últimas cotizaciones de las principales divisas</a> lo haremos así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RatesComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> urlapi</span><br><span class=\"line\">    = <span class=\"string\">&#x27;https://api.exchangeratesapi.io/latest&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">currentEuroRates</span>: <span class=\"built_in\">any</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getCurrentEuroRates</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">getCurrentEuroRates</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currencies = <span class=\"string\">&#x27;USD,GBP,CHF,JPY&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.urlapi&#125;</span>?symbols=<span class=\"subst\">$&#123;currencies&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span></span><br><span class=\"line\">      .<span class=\"title function_\">get</span>(url)</span><br><span class=\"line\">      .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">apiData</span> =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentEuroRates</span> = apiData));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>El método <em>get</em> retorna un objeto observable. Los observables <em>http</em> han de consumirse mediante el método <em>subscribe</em> para que realmente se lancen. Dicho método <em>subscribe</em> admite hasta tres <em>callbacks</em> para responder a tres sucesos posibles. Retorno de datos correcto, retorno de un error y señal de finalización. La sintaxis original ofrece tres argumentos opcionales para enviarles las funciones callback <code>susbcribe(data, err, end)</code>. En este ejemplo solo hemos usado el primero.</p>\n</blockquote>\n<p>Otra sintaxis más reciente sustituye los tres argumentos funcionales por un un único objeto. La ventaja es que puedes usar clases con lógica común, reutilizarlos en distintas suscripciones, o simplemente tener el código un poco más organizadito.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observable$.<span class=\"title function_\">susbcribe</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">error</span>: <span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>La presentación en la vista sólo tiene que acceder a la propiedad dónde se hayan cargado las respuestas tratadas en el <em>callback</em> de la suscripción.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Currency Rates. <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> From Euro to the world <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; currentEuroRates | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"1-3-Envio-de-datos\"><a href=\"#1-3-Envio-de-datos\" class=\"headerlink\" title=\"1.3 Envío de datos\"></a>1.3 Envío de datos</h2><p>Supongamos que, una vez recibidas las cotizaciones, pretendemos transformarlas y almacenarlas en otro servicio. Por ejemplo un objeto para cada día y moneda. El envío en este caso será con el método <em>post</em> al que se le pasará la ruta del <em>end point</em> y el objeto <em>payload</em> que se enviará al servidor.</p>\n<p>Vamos a agregar una propiedad y un par de métodos al <code>rates-component.ts</code>. La idea es obtener un array de cotizaciones aa partir del objeto previo, y guardarla una por una.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span></span><br><span class=\"line\">      .<span class=\"title function_\">post</span>(url, payloadObject)</span><br><span class=\"line\">      .<span class=\"title function_\">subscribe</span>();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Atención a los métodos <code>subscribe()</code>. Aunque vayan vacíos son imprescindibles para que se ejecute la llamada. Esto puede resultar contra intuitivo, pero la verdad es que los observables Http de Angular sólo trabajan si hay alguien mirando.</p>\n</blockquote>\n<h2 id=\"1-4-Actualizacion-de-datos\"><a href=\"#1-4-Actualizacion-de-datos\" class=\"headerlink\" title=\"1.4 Actualización de datos\"></a>1.4 Actualización de datos</h2><p>Un par de seudo ejemplos más para acabar de entender la mecánica básica de <code>HttpClient</code>. Podemos fijar el tipo de datos esperado en cualquier llamada. De hecho es recomendable que tengas un interfaz para cada respuesta esperada.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"title function_\">delete</span>(itemResourceUrl, newValue).<span class=\"title function_\">subscribe</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">delete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"title function_\">delete</span>(itemResourceUrl).<span class=\"title function_\">subscribe</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y hasta aquí lo básico de comunicaciones <em>http</em>. ¿Fácil verdad?. Pero la vida real raramente es tan sencilla. Si quieres enfrentarte a algo más duro debes prepararte y dominar los observables <em>RxJS</em>.</p>\n<p>Lo que viene a partir de ahora requerirá tiempo y concentración. Si continúas adelante esto ya no será <em>your grandpa´s http anymore</em>.</p>\n<h1 id=\"2-Observables\"><a href=\"#2-Observables\" class=\"headerlink\" title=\"2 Observables\"></a>2 Observables</h1><p>Las <strong>comunicaciones</strong> entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.</p>\n<p>Esta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones <em>AJAX</em> basadas en el paso de funciones <em>callback</em>. La aparición de las <em>promises</em> mejoró la claridad del código, y ahora con los <em>Observables</em> tenemos además una gran potencia para manipular la <strong>información asíncrona</strong>.</p>\n<blockquote>\n<p>El patrón <code>Observable</code> fue implementado por Microsoft en la librería <a href=\"http://reactivex.io/intro.html\"><em>Reactive Extensions</em></a> más conocida como <code>RxJs</code>. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.</p>\n</blockquote>\n<p>Lo primero es importar el código, de forma similar a cualquier otra clase o función. Por ejemplo para empezar basta con <code>import &#123; Observable &#125; from &quot;rxjs/Observable&quot;;</code>. Tendremos la clase usada por angular para observar el respuesta <em>http</em>.</p>\n<p>Pero esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan el tipo esperado <code>: Observable&lt;MyClass&gt;</code>, o si no saben que tipo esperar se conforman con <code>: Observable&lt;any&gt;</code>.</p>\n<p>En cualquier caso, <strong>toda operación asíncrona retornará una instancia observable</strong> a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine.</p>\n<p>Aunque a veces no se verá el <em>subscribe</em>…</p>\n<p>Ya tenemos el programa comunicado por <em>http</em> con un servidor; aunque por ahora de forma anónima y sin ninguna seguridad. Necesitamos aumentar el conocimiento actual de los observables, del <em>httpClient</em> con los interceptores y ya estaremos cerca de resolverlo. Sigue esta serie para añadirle <a href=\"../vigilancia-y-seguridad-en-Angular/\">vigilancia y seguridad en Angular</a> mientras aprendes a programar con Angular. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-6_http.png\" alt=\"comunicaciones-http-en-Angular\"></p>\n<p>Las comunicaciones <em>http</em> son una pieza fundamental del desarrollo web, y en <strong>Angular</strong> siempre han sido potentes y fáciles. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas… y además la librería <em>RxJS</em> y sus <em>streams</em> son intimidantes para los novatos.</p>\n<p>Pero en la versión Angular 9 <strong>consumir un servicio REST</strong> puede ser cosa de niños si aprendes a jugar con los <em>observables</em> y los servicios de la librería <code>@angular/common/http</code>. Conseguirás realizar <strong>comunicaciones http asíncronas en Angular</strong>.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a>. Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST usando las tecnologías de Angular Http.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-El-servicio-HttpClient\"><a href=\"#1-El-servicio-HttpClient\" class=\"headerlink\" title=\"1. El servicio HttpClient\"></a>1. El servicio HttpClient</h1><p>Como demostración vamos a consumir un API pública con datos de <a href=\"https://exchangeratesapi.io/\">cotización de monedas</a>. Crearé un módulo y un componente en el que visualizar las divisas y después las transformaremos para guardarlas en un servicio propio.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m money --route money --module app-routing.module</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-1-Importacion-y-declaracion-de-servicios\"><a href=\"#1-1-Importacion-y-declaracion-de-servicios\" class=\"headerlink\" title=\"1.1 Importación y declaración de servicios\"></a>1.1 Importación y declaración de servicios</h2><p>La librería <code>@angular/common/http</code> trae el módulo <code>HttpClientModule</code> con el servicio inyectable <code>HttpClient</code>. Lo primero es importar dicho módulo.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClientModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">MoneyComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">CommonModule</span>, <span class=\"title class_\">MoneyRoutingModule</span>, <span class=\"title class_\">HttpClientModule</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MoneyModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>En tu componente tienes que reclamar la dependencia al servicio para poder usarla. Atención a la importación pues hay más clases con el nombre <code>HttpClient</code>. Debe quedar algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpClient</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common/http&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-money&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./money.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MoneyComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A partir de este momento sólo queda invocar los métodos REST en la propiedad <code>this.http</code>.</p>\n<h2 id=\"1-2-Obtencion-de-datos\"><a href=\"#1-2-Obtencion-de-datos\" class=\"headerlink\" title=\"1.2 Obtención de datos\"></a>1.2 Obtención de datos</h2><p>Para cada verbo <em>http</em> tenemos su método en el servicio <code>HttpClient</code>. Su primer parámetro será la <em>url</em> a la que invocar. Empecemos por el <code>get</code> que automáticamente solicita y devuelve objetos <em>JSON</em> desde un API. Por ejemplo para obtener <a href=\"https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CHF,JPY\">las últimas cotizaciones de las principales divisas</a> lo haremos así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RatesComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> urlapi</span><br><span class=\"line\">    = <span class=\"string\">&#x27;https://api.exchangeratesapi.io/latest&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">currentEuroRates</span>: <span class=\"built_in\">any</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getCurrentEuroRates</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">getCurrentEuroRates</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currencies = <span class=\"string\">&#x27;USD,GBP,CHF,JPY&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.urlapi&#125;</span>?symbols=<span class=\"subst\">$&#123;currencies&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span></span><br><span class=\"line\">      .<span class=\"title function_\">get</span>(url)</span><br><span class=\"line\">      .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">apiData</span> =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentEuroRates</span> = apiData));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>El método <em>get</em> retorna un objeto observable. Los observables <em>http</em> han de consumirse mediante el método <em>subscribe</em> para que realmente se lancen. Dicho método <em>subscribe</em> admite hasta tres <em>callbacks</em> para responder a tres sucesos posibles. Retorno de datos correcto, retorno de un error y señal de finalización. La sintaxis original ofrece tres argumentos opcionales para enviarles las funciones callback <code>susbcribe(data, err, end)</code>. En este ejemplo solo hemos usado el primero.</p>\n</blockquote>\n<p>Otra sintaxis más reciente sustituye los tres argumentos funcionales por un un único objeto. La ventaja es que puedes usar clases con lógica común, reutilizarlos en distintas suscripciones, o simplemente tener el código un poco más organizadito.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observable$.<span class=\"title function_\">susbcribe</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">error</span>: <span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>La presentación en la vista sólo tiene que acceder a la propiedad dónde se hayan cargado las respuestas tratadas en el <em>callback</em> de la suscripción.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Currency Rates. <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> From Euro to the world <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; currentEuroRates | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"1-3-Envio-de-datos\"><a href=\"#1-3-Envio-de-datos\" class=\"headerlink\" title=\"1.3 Envío de datos\"></a>1.3 Envío de datos</h2><p>Supongamos que, una vez recibidas las cotizaciones, pretendemos transformarlas y almacenarlas en otro servicio. Por ejemplo un objeto para cada día y moneda. El envío en este caso será con el método <em>post</em> al que se le pasará la ruta del <em>end point</em> y el objeto <em>payload</em> que se enviará al servidor.</p>\n<p>Vamos a agregar una propiedad y un par de métodos al <code>rates-component.ts</code>. La idea es obtener un array de cotizaciones aa partir del objeto previo, y guardarla una por una.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span></span><br><span class=\"line\">      .<span class=\"title function_\">post</span>(url, payloadObject)</span><br><span class=\"line\">      .<span class=\"title function_\">subscribe</span>();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Atención a los métodos <code>subscribe()</code>. Aunque vayan vacíos son imprescindibles para que se ejecute la llamada. Esto puede resultar contra intuitivo, pero la verdad es que los observables Http de Angular sólo trabajan si hay alguien mirando.</p>\n</blockquote>\n<h2 id=\"1-4-Actualizacion-de-datos\"><a href=\"#1-4-Actualizacion-de-datos\" class=\"headerlink\" title=\"1.4 Actualización de datos\"></a>1.4 Actualización de datos</h2><p>Un par de seudo ejemplos más para acabar de entender la mecánica básica de <code>HttpClient</code>. Podemos fijar el tipo de datos esperado en cualquier llamada. De hecho es recomendable que tengas un interfaz para cada respuesta esperada.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"title function_\">delete</span>(itemResourceUrl, newValue).<span class=\"title function_\">subscribe</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">delete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"title function_\">delete</span>(itemResourceUrl).<span class=\"title function_\">subscribe</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y hasta aquí lo básico de comunicaciones <em>http</em>. ¿Fácil verdad?. Pero la vida real raramente es tan sencilla. Si quieres enfrentarte a algo más duro debes prepararte y dominar los observables <em>RxJS</em>.</p>\n<p>Lo que viene a partir de ahora requerirá tiempo y concentración. Si continúas adelante esto ya no será <em>your grandpa´s http anymore</em>.</p>\n<h1 id=\"2-Observables\"><a href=\"#2-Observables\" class=\"headerlink\" title=\"2 Observables\"></a>2 Observables</h1><p>Las <strong>comunicaciones</strong> entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.</p>\n<p>Esta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones <em>AJAX</em> basadas en el paso de funciones <em>callback</em>. La aparición de las <em>promises</em> mejoró la claridad del código, y ahora con los <em>Observables</em> tenemos además una gran potencia para manipular la <strong>información asíncrona</strong>.</p>\n<blockquote>\n<p>El patrón <code>Observable</code> fue implementado por Microsoft en la librería <a href=\"http://reactivex.io/intro.html\"><em>Reactive Extensions</em></a> más conocida como <code>RxJs</code>. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.</p>\n</blockquote>\n<p>Lo primero es importar el código, de forma similar a cualquier otra clase o función. Por ejemplo para empezar basta con <code>import &#123; Observable &#125; from &quot;rxjs/Observable&quot;;</code>. Tendremos la clase usada por angular para observar el respuesta <em>http</em>.</p>\n<p>Pero esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan el tipo esperado <code>: Observable&lt;MyClass&gt;</code>, o si no saben que tipo esperar se conforman con <code>: Observable&lt;any&gt;</code>.</p>\n<p>En cualquier caso, <strong>toda operación asíncrona retornará una instancia observable</strong> a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine.</p>\n<p>Aunque a veces no se verá el <em>subscribe</em>…</p>\n<p>Ya tenemos el programa comunicado por <em>http</em> con un servidor; aunque por ahora de forma anónima y sin ninguna seguridad. Necesitamos aumentar el conocimiento actual de los observables, del <em>httpClient</em> con los interceptores y ya estaremos cerca de resolverlo. Sigue esta serie para añadirle <a href=\"../vigilancia-y-seguridad-en-Angular/\">vigilancia y seguridad en Angular</a> mientras aprendes a programar con Angular. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Vigilancia y seguridad en Angular","date":"2020-04-19T09:49:27.000Z","thumbnail":"/css/images/angular-7_watch.png","_content":"\n![vigilancia-y-seguridad-en-Angular](/images/tutorial-angular-7_watch.png)\n\nLa **vigilancia** de los datos y la información en tiempo real al usuario son dos pilares del desarrollo con Angular en el lado del navegador. La **seguridad** de los datos realmente es una responsabilidad compartida entre el servidor y el cliente.\n\nVeremos ambos aspectos del desarrollo, pues están muy relacionados con la programación asíncrona y el dominio de los observables. Sentaremos las bases para unas **comunicaciones seguras y fluidas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Comunicaciones http en Angular](../comunicaciones-http-en-Angular/). Al finalizar tendrás una aplicación que comunica a los usuarios cualquier información relevante y que gestiona de forma centralizada las respuestas de un servicio REST.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Observables para monitorizar datos\n\nHemos visto varias técnicas para comunicar información dentro de una aplicación Angular. Empezamos por conocer el [flujo entre componentes](../flujo-de-datos-entre-componentes-angular/) de una misma rama del DOM. También enviamos datos en los [parámetros de una ruta](../paginas-y-rutas-angular-spa/). Y obviamente podemos usar [un servicio común](../servicios-inyectables-en-Angular/) para guardar información compartida. Pero en este caso, ¿Cuándo se actualiza? ¿Cómo saber si ha cambiado?. Lo resolveremos con `Observables`.\n\nPara ilustrar este tema vamos a crear una web que muestra los datos de los próximos 5 lanzamientos espaciales. Y después un sencillo sistema de notificaciones que simula las comunicaciones de la Nasa. Empezaremos creando un módulo para los propósitos de este laboratorio.\n\n```console\nng g m rockets --route rockets --module app-routing.module\n```\n\nY en el componente tendremos que usar llamadas http pero sin suscripciones manuales. En su lugar nos quedamos con el observable y lo consumimos desde la vista con una de mis pipes preferidas: ` | async`\n\n```typescript\n  private rocketsApi = 'https://launchlibrary.net/1.4/';\n  public nextLaunches$: Observable<any> = null;\n\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {\n    this.getNextLaunches();\n  }\n\n  private getNextLaunches() {\n    const url = this.rocketsApi + 'launch/next/5';\n    this.nextLaunches$ = this.httpClient.get<any>(url);\n  }\n```\n\nEn la plantilla accedemos al observable. La tubería se suscribe y retorna el resultado cuando se reciba. El _pipe_ `json` nos permite ver el resultado.\n\n```html\n<h3> Next 5 rocket launches </h3>\n<pre>{{ nextLaunches$ | async | json }}</pre>\n```\n\nY eso es todo. Casi nunca tendrás que suscribirte en código. Deja que ese trabajo sucio lo haga el _pipe async_.\nPero, siempre hay un pero, rara vez los datos te vendrán tal cual los necesitas. Casi seguro que en ocasiones habrá que filtrarlos, ordenarlos y sobre todo aplicarles alguna trasformación. Para ello, antes tienes que saber un poco más de observables.\n\n# 2 Observables\n\nLa librería [RxJS](https://www.learnrxjs.io/) es enorme y Angular hace un uso extenso de ella. En este tutorial [se ha visto desde el punto de vista del consumidor](../comunicaciones-http-en-Angular). Es decir, nos hemos suscrito a fuentes observables. Para avanzar tendremos que poder emitir, o mejor dicho producir, información.\n\n## 2.1 Productores simples of y from\n\nLos constructores más sencillos de la librería son **funciones que emiten valores estáticos** o secuencias a intervalos regulares. Para familiarizarte con ellos te propongo que juegues con código como este:\n\n```typescript\nvalue$ = of(new Date().getMilliseconds());\nvalue$.subscribe(r=> console.log(r));\nstream$ = from([1, 'two', '***']);\nstream$.subscribe(r=> console.log(r));\nlist$ = of(['N', 'S', 'E', 'W']);\nlist$.subscribe(r=> console.log(r));\n```\n\n## 2.2 Operadores simples map y tap\n\nTratamos a los observables como un flujo, un _stream_ de datos; algo similar a un riachuelo de gotas de agua. A cada dato recibido le podemos aplicar funciones; sería como aplicar algún tratamiento al agua del riachuelo. Vamos a empezar con dos categorías de acciones: las que transforma en contenido, y la que tienen efectos secundarios.\n\nPara ello disponemos de unas funciones de primer orden llamadas operadores. Estas funciones reciben como argumento a otras funciones en las que tú programas las acciones de transformación o efecto.\n\nEl operador de transformación se llama `map()` y el de efectos se llama `tap()`. Ambos se pueden usar cuantas veces se quiera y en cualquier orden. Sólo hay que meterlos dentro de una función superior. La función `pipe()`; que da nombre al proceso: entubar el stream.\n\n```typescript\nnumbers$ = from([1, 2, 3, 4]);\ndoubles$ = numbers$\n  .pipe(\n    map(x=> 2 * x ),\n    tap(x=Z console.log(x)) // 2 4 6 8\n    );\n```\n\n\nApliquemos esto a los cohetes. Por ejemplo editando y transformando los datos recibidos desde el api:\n\n```typescript\nprivate getNextLaunches() {\n  const url = this.rocketsApi + 'launch/next/5';\n  this.nextLaunches$ = this.httpClient.get<any>(url).pipe(\n    map(apiData => apiData.launches),\n    map(launchesArray =>\n      launchesArray.map(launch => ({\n        name: launch.name,\n        status: launch.status,\n        scheduled: launch.net,\n      }))\n    ),\n    map(customLaunches =>\n      customLaunches.map(launch => ({\n        ...launch,\n        statusColor: launch.status === 1 ? 'green' : 'red',\n      }))\n    ),\n    tap(rockets => console.log('num rockets:' + rockets.length)),\n    tap(() => console.log('ha pasado algo')),\n    map(()=>{\n      const a =2;\n    })\n  );\n}\n```\n\nDe esta forma la _template_ ya recibe los datos listos para presentar de una manera más vistosa y limpia.\n\n\n```html\n<ul *ngIf=\"nextLaunches$ | async as nextLaunches; else loading\">\n  <li *ngFor=\"let launch of nextLaunches\"\n      [style.color]=\"launch.statusColor\">\n    <b>{{ launch.name }}</b><i>{{ launch.scheduled }}</i>\n  </li>\n</ul>\n<ng-template #loading>\n  <i>Loading rocket data... </i>\n</ng-template>\n```\n\n# 3 Un store de notificaciones\n\n## 3.1 Subject y BehaviorSubject\n\nLos anteriores constructores se basan en datos estáticos. Resuelvan algunas situaciones, pero necesitamos algo que emita **cambios dinámicos**. Y eso se realiza con los _Subjects_, una especie de emisores temáticos a los que suscribirse.\n\nHay varios tipos pero para empezar nos vamos a fijar en dos: el `Subject()` y el `BehaviorSubject(initialData)`. La diferencia es que el primero sólo emite las cosas según ocurren. Si alguien se suscribe tarde no conocerá el pasado. Esto suele generar problemas de sincronización. El _Behavior_ en cambio notifica el último valor conocido a cualquiera que se suscriba. De esa forma no importa si te suscribes antes o después de la obtención de un dato.\n\nJuega con el siguiente ejemplo:\n\n```typescript\nconst data = {name:'', value:0};\n\nconst need_sync$ = new Subject<any>();\n// on time\nneed_sync.subscribe(r=> console.log(r));\nneed_sync.next(data);\n// too late\nneed_sync.subscribe(r=> console.log(r));\n\nconst no_hurry$ = new BehaviorSubject<any>(this.data);\n// its ok\nno_hurry.subscribe(r=> console.log(r));\nno_hurry.next(data);\n// its also ok\nno_hurry.subscribe(r=> console.log(r));\n```\n\n## 3.2 Un Store de notificaciones\n\nUsaremos el `BehaviorSubject` como notificador principal entre componentes de Angular. Por ejemplo podemos montar un sistema de notificaciones sencillo. Empecemos por crear un servicio:\n\n```bash\nng g m rockets/nasa --route nasa --module rockets/rockets-routing.module\nng g c rockets/nasa/houston\nng g c rockets/nasa/florida\n```\n\n  Este servicio es la implementación más sencilla posible de un gestor de estados. Cabe destacar que :\n\n```typescript\nexport class MissionsComunicationService {\n  private messages: object[] = [{ icon: '👩‍🚀', subject: 'Crew on board' }];\n  private messages$ = new BehaviorSubject<any[]>(this.messages);\n\n  constructor() {}\n\n  public getMessages$ = () => this.messages$.asObservable();\n\n  public sendMessage = (message: object) => {\n    this.messages.push(message);\n    this.messages$.next(this.messages);\n  };\n}\n```\n\n- Mantienen el estado privado para evitar manipulaciones\n- Recibe de forma controlada las acciones de cambio\n- Emite clones del estado\n- Expone observables para que se suscriban los interesados.\n\n> Podría adaptar a la nomenclatura usada por patrones de gestión de estado más avanzados como es **Redux**, y usar el siguiente convenio: _Store_ como almacén, _select$()_ como publicador de cambios observable y _dispatch_ como encargado de procesar una acción de cambio de estado.\n\n## 3.3 Desacoplados pero conectados\n\nUna vez que hemos centralizado el control de cambios de una parte de la aplicación, es hora de que lo usen los componentes o servicios involucrados. Solo necesitan recibir la instancia vía dependencia. **No hay más acoplamiento entre emisores y receptores.**\n\n### Emisión\n\nVeamos un ejemplo, un tanto forzado,  consistente en dos componentes que se comunican sin conocerse. Esta es la vista con un formulario para enviar mensajes\n\n```html\n<h4>Houston mission control</h4>\n<p><button> Start count down 🏁</button></p>\n<p><button> Ignition 🔥</button></p>\n<p><button> Abort 🛑</button></p>\n```\n\nLa parte interesante está en el controlador. Dependencia y uso del servicio del almacén de notificaciones\n\n```typescript\nexport class HoustonComponent implements OnInit {\n  constructor(private missionsComunicationService: MissionsComunicationService) {}\n\n  ngOnInit(): void {}\n\n  onStartClick() {\n    this.missionsComunicationService.sendMessage({ icon: '🏁', subject: 'Start count down' });\n  }\n  onIgnitionClick() {\n    this.missionsComunicationService.sendMessage({ icon: '🔥', subject: 'Ignition' });\n  }\n  onAbortClick() {\n    this.missionsComunicationService.sendMessage({ icon: '🛑', subject: 'Abort' });\n  }\n}\n```\n\n### Recepción\n\nLa recepción es igual de sencilla. En el controlador reclamamos la misma dependencia para el uso del servicio del almacén de notificaciones.\n\n```typescript\nexport class FloridaComponent implements OnInit {\n  messages$: Observable<any>;\n\n  constructor(private missionsComunicationService: MissionsComunicationService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.missionsComunicationService.getMessages$();\n  }\n}\n```\n\nEn la vista pondremos un listado de notificaciones que se alimenta de un array emitido por un observable.\n\n```html\n<h4>Florida launch pad</h4>\n<p>📋 Mission log</p>\n<ul>\n  <li *ngFor=\"let message of messages$ | async\">{{ message }}</li>\n</ul>\n```\n\nEs importante recalcar que **no importa el orden de suscripción**. Estos dos componentes podrían _vivir_ en módulos distintos, verse en la misma página o inicializarse en cualquier orden... El receptor se entera siempre de todos los cambios; y además recibe el último estado conocido nada más suscribirse.\n\n\n\nTenemos ahora a nuestro usuario puntualmente informado de todo lo que sucede. Hemos utilizado **patrones de arquitectura de software** como el observable y la inversión del control. El resultado es una serie de componentes y servicios poco acoplados que intercambian información en tiempo real.\n\nPero hay temas más avanzados con los que continuar. Sigue esta serie para introducir más temas de seguridad y crear tus [formularios reactivos con Angular](../formularios-reactivos-con-Angular/) mientras aprendes a programar con Angular. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-7-Vigilancia-y-seguridad-en-Angular.md","raw":"---\ntitle: Vigilancia y seguridad en Angular\npermalink: vigilancia-y-seguridad-en-Angular\ndate: 2020-04-19 11:49:27\ntags:\n- Angular\n- http\n- Observables\n- Tutorial\n- Introducción\n- Angular9\n- Angular2\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-7_watch.png\n---\n\n![vigilancia-y-seguridad-en-Angular](/images/tutorial-angular-7_watch.png)\n\nLa **vigilancia** de los datos y la información en tiempo real al usuario son dos pilares del desarrollo con Angular en el lado del navegador. La **seguridad** de los datos realmente es una responsabilidad compartida entre el servidor y el cliente.\n\nVeremos ambos aspectos del desarrollo, pues están muy relacionados con la programación asíncrona y el dominio de los observables. Sentaremos las bases para unas **comunicaciones seguras y fluidas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Comunicaciones http en Angular](../comunicaciones-http-en-Angular/). Al finalizar tendrás una aplicación que comunica a los usuarios cualquier información relevante y que gestiona de forma centralizada las respuestas de un servicio REST.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Observables para monitorizar datos\n\nHemos visto varias técnicas para comunicar información dentro de una aplicación Angular. Empezamos por conocer el [flujo entre componentes](../flujo-de-datos-entre-componentes-angular/) de una misma rama del DOM. También enviamos datos en los [parámetros de una ruta](../paginas-y-rutas-angular-spa/). Y obviamente podemos usar [un servicio común](../servicios-inyectables-en-Angular/) para guardar información compartida. Pero en este caso, ¿Cuándo se actualiza? ¿Cómo saber si ha cambiado?. Lo resolveremos con `Observables`.\n\nPara ilustrar este tema vamos a crear una web que muestra los datos de los próximos 5 lanzamientos espaciales. Y después un sencillo sistema de notificaciones que simula las comunicaciones de la Nasa. Empezaremos creando un módulo para los propósitos de este laboratorio.\n\n```console\nng g m rockets --route rockets --module app-routing.module\n```\n\nY en el componente tendremos que usar llamadas http pero sin suscripciones manuales. En su lugar nos quedamos con el observable y lo consumimos desde la vista con una de mis pipes preferidas: ` | async`\n\n```typescript\n  private rocketsApi = 'https://launchlibrary.net/1.4/';\n  public nextLaunches$: Observable<any> = null;\n\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {\n    this.getNextLaunches();\n  }\n\n  private getNextLaunches() {\n    const url = this.rocketsApi + 'launch/next/5';\n    this.nextLaunches$ = this.httpClient.get<any>(url);\n  }\n```\n\nEn la plantilla accedemos al observable. La tubería se suscribe y retorna el resultado cuando se reciba. El _pipe_ `json` nos permite ver el resultado.\n\n```html\n<h3> Next 5 rocket launches </h3>\n<pre>{{ nextLaunches$ | async | json }}</pre>\n```\n\nY eso es todo. Casi nunca tendrás que suscribirte en código. Deja que ese trabajo sucio lo haga el _pipe async_.\nPero, siempre hay un pero, rara vez los datos te vendrán tal cual los necesitas. Casi seguro que en ocasiones habrá que filtrarlos, ordenarlos y sobre todo aplicarles alguna trasformación. Para ello, antes tienes que saber un poco más de observables.\n\n# 2 Observables\n\nLa librería [RxJS](https://www.learnrxjs.io/) es enorme y Angular hace un uso extenso de ella. En este tutorial [se ha visto desde el punto de vista del consumidor](../comunicaciones-http-en-Angular). Es decir, nos hemos suscrito a fuentes observables. Para avanzar tendremos que poder emitir, o mejor dicho producir, información.\n\n## 2.1 Productores simples of y from\n\nLos constructores más sencillos de la librería son **funciones que emiten valores estáticos** o secuencias a intervalos regulares. Para familiarizarte con ellos te propongo que juegues con código como este:\n\n```typescript\nvalue$ = of(new Date().getMilliseconds());\nvalue$.subscribe(r=> console.log(r));\nstream$ = from([1, 'two', '***']);\nstream$.subscribe(r=> console.log(r));\nlist$ = of(['N', 'S', 'E', 'W']);\nlist$.subscribe(r=> console.log(r));\n```\n\n## 2.2 Operadores simples map y tap\n\nTratamos a los observables como un flujo, un _stream_ de datos; algo similar a un riachuelo de gotas de agua. A cada dato recibido le podemos aplicar funciones; sería como aplicar algún tratamiento al agua del riachuelo. Vamos a empezar con dos categorías de acciones: las que transforma en contenido, y la que tienen efectos secundarios.\n\nPara ello disponemos de unas funciones de primer orden llamadas operadores. Estas funciones reciben como argumento a otras funciones en las que tú programas las acciones de transformación o efecto.\n\nEl operador de transformación se llama `map()` y el de efectos se llama `tap()`. Ambos se pueden usar cuantas veces se quiera y en cualquier orden. Sólo hay que meterlos dentro de una función superior. La función `pipe()`; que da nombre al proceso: entubar el stream.\n\n```typescript\nnumbers$ = from([1, 2, 3, 4]);\ndoubles$ = numbers$\n  .pipe(\n    map(x=> 2 * x ),\n    tap(x=Z console.log(x)) // 2 4 6 8\n    );\n```\n\n\nApliquemos esto a los cohetes. Por ejemplo editando y transformando los datos recibidos desde el api:\n\n```typescript\nprivate getNextLaunches() {\n  const url = this.rocketsApi + 'launch/next/5';\n  this.nextLaunches$ = this.httpClient.get<any>(url).pipe(\n    map(apiData => apiData.launches),\n    map(launchesArray =>\n      launchesArray.map(launch => ({\n        name: launch.name,\n        status: launch.status,\n        scheduled: launch.net,\n      }))\n    ),\n    map(customLaunches =>\n      customLaunches.map(launch => ({\n        ...launch,\n        statusColor: launch.status === 1 ? 'green' : 'red',\n      }))\n    ),\n    tap(rockets => console.log('num rockets:' + rockets.length)),\n    tap(() => console.log('ha pasado algo')),\n    map(()=>{\n      const a =2;\n    })\n  );\n}\n```\n\nDe esta forma la _template_ ya recibe los datos listos para presentar de una manera más vistosa y limpia.\n\n\n```html\n<ul *ngIf=\"nextLaunches$ | async as nextLaunches; else loading\">\n  <li *ngFor=\"let launch of nextLaunches\"\n      [style.color]=\"launch.statusColor\">\n    <b>{{ launch.name }}</b><i>{{ launch.scheduled }}</i>\n  </li>\n</ul>\n<ng-template #loading>\n  <i>Loading rocket data... </i>\n</ng-template>\n```\n\n# 3 Un store de notificaciones\n\n## 3.1 Subject y BehaviorSubject\n\nLos anteriores constructores se basan en datos estáticos. Resuelvan algunas situaciones, pero necesitamos algo que emita **cambios dinámicos**. Y eso se realiza con los _Subjects_, una especie de emisores temáticos a los que suscribirse.\n\nHay varios tipos pero para empezar nos vamos a fijar en dos: el `Subject()` y el `BehaviorSubject(initialData)`. La diferencia es que el primero sólo emite las cosas según ocurren. Si alguien se suscribe tarde no conocerá el pasado. Esto suele generar problemas de sincronización. El _Behavior_ en cambio notifica el último valor conocido a cualquiera que se suscriba. De esa forma no importa si te suscribes antes o después de la obtención de un dato.\n\nJuega con el siguiente ejemplo:\n\n```typescript\nconst data = {name:'', value:0};\n\nconst need_sync$ = new Subject<any>();\n// on time\nneed_sync.subscribe(r=> console.log(r));\nneed_sync.next(data);\n// too late\nneed_sync.subscribe(r=> console.log(r));\n\nconst no_hurry$ = new BehaviorSubject<any>(this.data);\n// its ok\nno_hurry.subscribe(r=> console.log(r));\nno_hurry.next(data);\n// its also ok\nno_hurry.subscribe(r=> console.log(r));\n```\n\n## 3.2 Un Store de notificaciones\n\nUsaremos el `BehaviorSubject` como notificador principal entre componentes de Angular. Por ejemplo podemos montar un sistema de notificaciones sencillo. Empecemos por crear un servicio:\n\n```bash\nng g m rockets/nasa --route nasa --module rockets/rockets-routing.module\nng g c rockets/nasa/houston\nng g c rockets/nasa/florida\n```\n\n  Este servicio es la implementación más sencilla posible de un gestor de estados. Cabe destacar que :\n\n```typescript\nexport class MissionsComunicationService {\n  private messages: object[] = [{ icon: '👩‍🚀', subject: 'Crew on board' }];\n  private messages$ = new BehaviorSubject<any[]>(this.messages);\n\n  constructor() {}\n\n  public getMessages$ = () => this.messages$.asObservable();\n\n  public sendMessage = (message: object) => {\n    this.messages.push(message);\n    this.messages$.next(this.messages);\n  };\n}\n```\n\n- Mantienen el estado privado para evitar manipulaciones\n- Recibe de forma controlada las acciones de cambio\n- Emite clones del estado\n- Expone observables para que se suscriban los interesados.\n\n> Podría adaptar a la nomenclatura usada por patrones de gestión de estado más avanzados como es **Redux**, y usar el siguiente convenio: _Store_ como almacén, _select$()_ como publicador de cambios observable y _dispatch_ como encargado de procesar una acción de cambio de estado.\n\n## 3.3 Desacoplados pero conectados\n\nUna vez que hemos centralizado el control de cambios de una parte de la aplicación, es hora de que lo usen los componentes o servicios involucrados. Solo necesitan recibir la instancia vía dependencia. **No hay más acoplamiento entre emisores y receptores.**\n\n### Emisión\n\nVeamos un ejemplo, un tanto forzado,  consistente en dos componentes que se comunican sin conocerse. Esta es la vista con un formulario para enviar mensajes\n\n```html\n<h4>Houston mission control</h4>\n<p><button> Start count down 🏁</button></p>\n<p><button> Ignition 🔥</button></p>\n<p><button> Abort 🛑</button></p>\n```\n\nLa parte interesante está en el controlador. Dependencia y uso del servicio del almacén de notificaciones\n\n```typescript\nexport class HoustonComponent implements OnInit {\n  constructor(private missionsComunicationService: MissionsComunicationService) {}\n\n  ngOnInit(): void {}\n\n  onStartClick() {\n    this.missionsComunicationService.sendMessage({ icon: '🏁', subject: 'Start count down' });\n  }\n  onIgnitionClick() {\n    this.missionsComunicationService.sendMessage({ icon: '🔥', subject: 'Ignition' });\n  }\n  onAbortClick() {\n    this.missionsComunicationService.sendMessage({ icon: '🛑', subject: 'Abort' });\n  }\n}\n```\n\n### Recepción\n\nLa recepción es igual de sencilla. En el controlador reclamamos la misma dependencia para el uso del servicio del almacén de notificaciones.\n\n```typescript\nexport class FloridaComponent implements OnInit {\n  messages$: Observable<any>;\n\n  constructor(private missionsComunicationService: MissionsComunicationService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.missionsComunicationService.getMessages$();\n  }\n}\n```\n\nEn la vista pondremos un listado de notificaciones que se alimenta de un array emitido por un observable.\n\n```html\n<h4>Florida launch pad</h4>\n<p>📋 Mission log</p>\n<ul>\n  <li *ngFor=\"let message of messages$ | async\">{{ message }}</li>\n</ul>\n```\n\nEs importante recalcar que **no importa el orden de suscripción**. Estos dos componentes podrían _vivir_ en módulos distintos, verse en la misma página o inicializarse en cualquier orden... El receptor se entera siempre de todos los cambios; y además recibe el último estado conocido nada más suscribirse.\n\n\n\nTenemos ahora a nuestro usuario puntualmente informado de todo lo que sucede. Hemos utilizado **patrones de arquitectura de software** como el observable y la inversión del control. El resultado es una serie de componentes y servicios poco acoplados que intercambian información en tiempo real.\n\nPero hay temas más avanzados con los que continuar. Sigue esta serie para introducir más temas de seguridad y crear tus [formularios reactivos con Angular](../formularios-reactivos-con-Angular/) mientras aprendes a programar con Angular. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-7-Vigilancia-y-seguridad-en-Angular","published":1,"updated":"2023-07-02T10:25:58.479Z","__permalink":"vigilancia-y-seguridad-en-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fi001je096fflc1cel","content":"<p><img src=\"/images/tutorial-angular-7_watch.png\" alt=\"vigilancia-y-seguridad-en-Angular\"></p>\n<p>La <strong>vigilancia</strong> de los datos y la información en tiempo real al usuario son dos pilares del desarrollo con Angular en el lado del navegador. La <strong>seguridad</strong> de los datos realmente es una responsabilidad compartida entre el servidor y el cliente.</p>\n<p>Veremos ambos aspectos del desarrollo, pues están muy relacionados con la programación asíncrona y el dominio de los observables. Sentaremos las bases para unas <strong>comunicaciones seguras y fluidas en Angular</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones http en Angular</a>. Al finalizar tendrás una aplicación que comunica a los usuarios cualquier información relevante y que gestiona de forma centralizada las respuestas de un servicio REST.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Observables-para-monitorizar-datos\"><a href=\"#1-Observables-para-monitorizar-datos\" class=\"headerlink\" title=\"1. Observables para monitorizar datos\"></a>1. Observables para monitorizar datos</h1><p>Hemos visto varias técnicas para comunicar información dentro de una aplicación Angular. Empezamos por conocer el <a href=\"../flujo-de-datos-entre-componentes-angular/\">flujo entre componentes</a> de una misma rama del DOM. También enviamos datos en los <a href=\"../paginas-y-rutas-angular-spa/\">parámetros de una ruta</a>. Y obviamente podemos usar <a href=\"../servicios-inyectables-en-Angular/\">un servicio común</a> para guardar información compartida. Pero en este caso, ¿Cuándo se actualiza? ¿Cómo saber si ha cambiado?. Lo resolveremos con <code>Observables</code>.</p>\n<p>Para ilustrar este tema vamos a crear una web que muestra los datos de los próximos 5 lanzamientos espaciales. Y después un sencillo sistema de notificaciones que simula las comunicaciones de la Nasa. Empezaremos creando un módulo para los propósitos de este laboratorio.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m rockets --route rockets --module app-routing.module</span><br></pre></td></tr></table></figure>\n\n<p>Y en el componente tendremos que usar llamadas http pero sin suscripciones manuales. En su lugar nos quedamos con el observable y lo consumimos desde la vista con una de mis pipes preferidas: <code> | async</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> rocketsApi = <span class=\"string\">&#x27;https://launchlibrary.net/1.4/&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">nextLaunches$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getNextLaunches</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">getNextLaunches</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"variable language_\">this</span>.<span class=\"property\">rocketsApi</span> + <span class=\"string\">&#x27;launch/next/5&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">nextLaunches$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">any</span>&gt;(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>En la plantilla accedemos al observable. La tubería se suscribe y retorna el resultado cuando se reciba. El <em>pipe</em> <code>json</code> nos permite ver el resultado.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> Next 5 rocket launches <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; nextLaunches$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y eso es todo. Casi nunca tendrás que suscribirte en código. Deja que ese trabajo sucio lo haga el <em>pipe async</em>.<br>Pero, siempre hay un pero, rara vez los datos te vendrán tal cual los necesitas. Casi seguro que en ocasiones habrá que filtrarlos, ordenarlos y sobre todo aplicarles alguna trasformación. Para ello, antes tienes que saber un poco más de observables.</p>\n<h1 id=\"2-Observables\"><a href=\"#2-Observables\" class=\"headerlink\" title=\"2 Observables\"></a>2 Observables</h1><p>La librería <a href=\"https://www.learnrxjs.io/\">RxJS</a> es enorme y Angular hace un uso extenso de ella. En este tutorial <a href=\"../comunicaciones-http-en-Angular\">se ha visto desde el punto de vista del consumidor</a>. Es decir, nos hemos suscrito a fuentes observables. Para avanzar tendremos que poder emitir, o mejor dicho producir, información.</p>\n<h2 id=\"2-1-Productores-simples-of-y-from\"><a href=\"#2-1-Productores-simples-of-y-from\" class=\"headerlink\" title=\"2.1 Productores simples of y from\"></a>2.1 Productores simples of y from</h2><p>Los constructores más sencillos de la librería son <strong>funciones que emiten valores estáticos</strong> o secuencias a intervalos regulares. Para familiarizarte con ellos te propongo que juegues con código como este:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value$ = <span class=\"title function_\">of</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getMilliseconds</span>());</span><br><span class=\"line\">value$.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\">stream$ = <span class=\"title function_\">from</span>([<span class=\"number\">1</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;***&#x27;</span>]);</span><br><span class=\"line\">stream$.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\">list$ = <span class=\"title function_\">of</span>([<span class=\"string\">&#x27;N&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;W&#x27;</span>]);</span><br><span class=\"line\">list$.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Operadores-simples-map-y-tap\"><a href=\"#2-2-Operadores-simples-map-y-tap\" class=\"headerlink\" title=\"2.2 Operadores simples map y tap\"></a>2.2 Operadores simples map y tap</h2><p>Tratamos a los observables como un flujo, un <em>stream</em> de datos; algo similar a un riachuelo de gotas de agua. A cada dato recibido le podemos aplicar funciones; sería como aplicar algún tratamiento al agua del riachuelo. Vamos a empezar con dos categorías de acciones: las que transforma en contenido, y la que tienen efectos secundarios.</p>\n<p>Para ello disponemos de unas funciones de primer orden llamadas operadores. Estas funciones reciben como argumento a otras funciones en las que tú programas las acciones de transformación o efecto.</p>\n<p>El operador de transformación se llama <code>map()</code> y el de efectos se llama <code>tap()</code>. Ambos se pueden usar cuantas veces se quiera y en cualquier orden. Sólo hay que meterlos dentro de una función superior. La función <code>pipe()</code>; que da nombre al proceso: entubar el stream.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers$ = <span class=\"title function_\">from</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br><span class=\"line\">doubles$ = numbers$</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span> <span class=\"number\">2</span> * x ),</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(x=Z <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)) <span class=\"comment\">// 2 4 6 8</span></span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n\n<p>Apliquemos esto a los cohetes. Por ejemplo editando y transformando los datos recibidos desde el api:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">getNextLaunches</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"variable language_\">this</span>.<span class=\"property\">rocketsApi</span> + <span class=\"string\">&#x27;launch/next/5&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">nextLaunches$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">any</span>&gt;(url).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">apiData</span> =&gt;</span> apiData.<span class=\"property\">launches</span>),</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">launchesArray</span> =&gt;</span></span><br><span class=\"line\">      launchesArray.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">launch</span> =&gt;</span> (&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: launch.<span class=\"property\">name</span>,</span><br><span class=\"line\">        <span class=\"attr\">status</span>: launch.<span class=\"property\">status</span>,</span><br><span class=\"line\">        <span class=\"attr\">scheduled</span>: launch.<span class=\"property\">net</span>,</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">customLaunches</span> =&gt;</span></span><br><span class=\"line\">      customLaunches.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">launch</span> =&gt;</span> (&#123;</span><br><span class=\"line\">        ...launch,</span><br><span class=\"line\">        <span class=\"attr\">statusColor</span>: launch.<span class=\"property\">status</span> === <span class=\"number\">1</span> ? <span class=\"string\">&#x27;green&#x27;</span> : <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(<span class=\"function\"><span class=\"params\">rockets</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;num rockets:&#x27;</span> + rockets.<span class=\"property\">length</span>)),</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;ha pasado algo&#x27;</span>)),</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> a =<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>De esta forma la <em>template</em> ya recibe los datos listos para presentar de una manera más vistosa y limpia.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;nextLaunches$ | async as nextLaunches; else loading&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let launch of nextLaunches&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [<span class=\"attr\">style.color</span>]=<span class=\"string\">&quot;launch.statusColor&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>&#123;&#123; launch.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>&#123;&#123; launch.scheduled &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">loading</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Loading rocket data... <span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Un-store-de-notificaciones\"><a href=\"#3-Un-store-de-notificaciones\" class=\"headerlink\" title=\"3 Un store de notificaciones\"></a>3 Un store de notificaciones</h1><h2 id=\"3-1-Subject-y-BehaviorSubject\"><a href=\"#3-1-Subject-y-BehaviorSubject\" class=\"headerlink\" title=\"3.1 Subject y BehaviorSubject\"></a>3.1 Subject y BehaviorSubject</h2><p>Los anteriores constructores se basan en datos estáticos. Resuelvan algunas situaciones, pero necesitamos algo que emita <strong>cambios dinámicos</strong>. Y eso se realiza con los <em>Subjects</em>, una especie de emisores temáticos a los que suscribirse.</p>\n<p>Hay varios tipos pero para empezar nos vamos a fijar en dos: el <code>Subject()</code> y el <code>BehaviorSubject(initialData)</code>. La diferencia es que el primero sólo emite las cosas según ocurren. Si alguien se suscribe tarde no conocerá el pasado. Esto suele generar problemas de sincronización. El <em>Behavior</em> en cambio notifica el último valor conocido a cualquiera que se suscriba. De esa forma no importa si te suscribes antes o después de la obtención de un dato.</p>\n<p>Juega con el siguiente ejemplo:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">value</span>:<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> need_sync$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\"><span class=\"comment\">// on time</span></span><br><span class=\"line\">need_sync.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\">need_sync.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\"><span class=\"comment\">// too late</span></span><br><span class=\"line\">need_sync.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> no_hurry$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\"><span class=\"comment\">// its ok</span></span><br><span class=\"line\">no_hurry.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\">no_hurry.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\"><span class=\"comment\">// its also ok</span></span><br><span class=\"line\">no_hurry.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Un-Store-de-notificaciones\"><a href=\"#3-2-Un-Store-de-notificaciones\" class=\"headerlink\" title=\"3.2 Un Store de notificaciones\"></a>3.2 Un Store de notificaciones</h2><p>Usaremos el <code>BehaviorSubject</code> como notificador principal entre componentes de Angular. Por ejemplo podemos montar un sistema de notificaciones sencillo. Empecemos por crear un servicio:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m rockets/nasa --route nasa --module rockets/rockets-routing.module</span><br><span class=\"line\">ng g c rockets/nasa/houston</span><br><span class=\"line\">ng g c rockets/nasa/florida</span><br></pre></td></tr></table></figure>\n\n<p>  Este servicio es la implementación más sencilla posible de un gestor de estados. Cabe destacar que :</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MissionsComunicationService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">messages</span>: <span class=\"built_in\">object</span>[] = [&#123; <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;👩‍🚀&#x27;</span>, <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;Crew on board&#x27;</span> &#125;];</span><br><span class=\"line\">  <span class=\"keyword\">private</span> messages$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;<span class=\"built_in\">any</span>[]&gt;(<span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> getMessages$ = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">messages$</span>.<span class=\"title function_\">asObservable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> sendMessage = <span class=\"function\">(<span class=\"params\">message: <span class=\"built_in\">object</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">push</span>(message);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">messages$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Mantienen el estado privado para evitar manipulaciones</li>\n<li>Recibe de forma controlada las acciones de cambio</li>\n<li>Emite clones del estado</li>\n<li>Expone observables para que se suscriban los interesados.</li>\n</ul>\n<blockquote>\n<p>Podría adaptar a la nomenclatura usada por patrones de gestión de estado más avanzados como es <strong>Redux</strong>, y usar el siguiente convenio: <em>Store</em> como almacén, <em>select$()</em> como publicador de cambios observable y <em>dispatch</em> como encargado de procesar una acción de cambio de estado.</p>\n</blockquote>\n<h2 id=\"3-3-Desacoplados-pero-conectados\"><a href=\"#3-3-Desacoplados-pero-conectados\" class=\"headerlink\" title=\"3.3 Desacoplados pero conectados\"></a>3.3 Desacoplados pero conectados</h2><p>Una vez que hemos centralizado el control de cambios de una parte de la aplicación, es hora de que lo usen los componentes o servicios involucrados. Solo necesitan recibir la instancia vía dependencia. <strong>No hay más acoplamiento entre emisores y receptores.</strong></p>\n<h3 id=\"Emision\"><a href=\"#Emision\" class=\"headerlink\" title=\"Emisión\"></a>Emisión</h3><p>Veamos un ejemplo, un tanto forzado,  consistente en dos componentes que se comunican sin conocerse. Esta es la vista con un formulario para enviar mensajes</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Houston mission control<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> Start count down 🏁<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> Ignition 🔥<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> Abort 🛑<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>La parte interesante está en el controlador. Dependencia y uso del servicio del almacén de notificaciones</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HoustonComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> missionsComunicationService: MissionsComunicationService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onStartClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">missionsComunicationService</span>.<span class=\"title function_\">sendMessage</span>(&#123; <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;🏁&#x27;</span>, <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;Start count down&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onIgnitionClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">missionsComunicationService</span>.<span class=\"title function_\">sendMessage</span>(&#123; <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;🔥&#x27;</span>, <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;Ignition&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onAbortClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">missionsComunicationService</span>.<span class=\"title function_\">sendMessage</span>(&#123; <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;🛑&#x27;</span>, <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;Abort&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Recepcion\"><a href=\"#Recepcion\" class=\"headerlink\" title=\"Recepción\"></a>Recepción</h3><p>La recepción es igual de sencilla. En el controlador reclamamos la misma dependencia para el uso del servicio del almacén de notificaciones.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FloridaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">messages$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> missionsComunicationService: MissionsComunicationService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">messages$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">missionsComunicationService</span>.<span class=\"title function_\">getMessages$</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>En la vista pondremos un listado de notificaciones que se alimenta de un array emitido por un observable.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Florida launch pad<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>📋 Mission log<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let message of messages$ | async&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Es importante recalcar que <strong>no importa el orden de suscripción</strong>. Estos dos componentes podrían <em>vivir</em> en módulos distintos, verse en la misma página o inicializarse en cualquier orden… El receptor se entera siempre de todos los cambios; y además recibe el último estado conocido nada más suscribirse.</p>\n<p>Tenemos ahora a nuestro usuario puntualmente informado de todo lo que sucede. Hemos utilizado <strong>patrones de arquitectura de software</strong> como el observable y la inversión del control. El resultado es una serie de componentes y servicios poco acoplados que intercambian información en tiempo real.</p>\n<p>Pero hay temas más avanzados con los que continuar. Sigue esta serie para introducir más temas de seguridad y crear tus <a href=\"../formularios-reactivos-con-Angular/\">formularios reactivos con Angular</a> mientras aprendes a programar con Angular. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-7_watch.png\" alt=\"vigilancia-y-seguridad-en-Angular\"></p>\n<p>La <strong>vigilancia</strong> de los datos y la información en tiempo real al usuario son dos pilares del desarrollo con Angular en el lado del navegador. La <strong>seguridad</strong> de los datos realmente es una responsabilidad compartida entre el servidor y el cliente.</p>\n<p>Veremos ambos aspectos del desarrollo, pues están muy relacionados con la programación asíncrona y el dominio de los observables. Sentaremos las bases para unas <strong>comunicaciones seguras y fluidas en Angular</strong>.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones http en Angular</a>. Al finalizar tendrás una aplicación que comunica a los usuarios cualquier información relevante y que gestiona de forma centralizada las respuestas de un servicio REST.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Observables-para-monitorizar-datos\"><a href=\"#1-Observables-para-monitorizar-datos\" class=\"headerlink\" title=\"1. Observables para monitorizar datos\"></a>1. Observables para monitorizar datos</h1><p>Hemos visto varias técnicas para comunicar información dentro de una aplicación Angular. Empezamos por conocer el <a href=\"../flujo-de-datos-entre-componentes-angular/\">flujo entre componentes</a> de una misma rama del DOM. También enviamos datos en los <a href=\"../paginas-y-rutas-angular-spa/\">parámetros de una ruta</a>. Y obviamente podemos usar <a href=\"../servicios-inyectables-en-Angular/\">un servicio común</a> para guardar información compartida. Pero en este caso, ¿Cuándo se actualiza? ¿Cómo saber si ha cambiado?. Lo resolveremos con <code>Observables</code>.</p>\n<p>Para ilustrar este tema vamos a crear una web que muestra los datos de los próximos 5 lanzamientos espaciales. Y después un sencillo sistema de notificaciones que simula las comunicaciones de la Nasa. Empezaremos creando un módulo para los propósitos de este laboratorio.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m rockets --route rockets --module app-routing.module</span><br></pre></td></tr></table></figure>\n\n<p>Y en el componente tendremos que usar llamadas http pero sin suscripciones manuales. En su lugar nos quedamos con el observable y lo consumimos desde la vista con una de mis pipes preferidas: <code> | async</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> rocketsApi = <span class=\"string\">&#x27;https://launchlibrary.net/1.4/&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"attr\">nextLaunches$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getNextLaunches</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">getNextLaunches</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"variable language_\">this</span>.<span class=\"property\">rocketsApi</span> + <span class=\"string\">&#x27;launch/next/5&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">nextLaunches$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">any</span>&gt;(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>En la plantilla accedemos al observable. La tubería se suscribe y retorna el resultado cuando se reciba. El <em>pipe</em> <code>json</code> nos permite ver el resultado.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> Next 5 rocket launches <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; nextLaunches$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y eso es todo. Casi nunca tendrás que suscribirte en código. Deja que ese trabajo sucio lo haga el <em>pipe async</em>.<br>Pero, siempre hay un pero, rara vez los datos te vendrán tal cual los necesitas. Casi seguro que en ocasiones habrá que filtrarlos, ordenarlos y sobre todo aplicarles alguna trasformación. Para ello, antes tienes que saber un poco más de observables.</p>\n<h1 id=\"2-Observables\"><a href=\"#2-Observables\" class=\"headerlink\" title=\"2 Observables\"></a>2 Observables</h1><p>La librería <a href=\"https://www.learnrxjs.io/\">RxJS</a> es enorme y Angular hace un uso extenso de ella. En este tutorial <a href=\"../comunicaciones-http-en-Angular\">se ha visto desde el punto de vista del consumidor</a>. Es decir, nos hemos suscrito a fuentes observables. Para avanzar tendremos que poder emitir, o mejor dicho producir, información.</p>\n<h2 id=\"2-1-Productores-simples-of-y-from\"><a href=\"#2-1-Productores-simples-of-y-from\" class=\"headerlink\" title=\"2.1 Productores simples of y from\"></a>2.1 Productores simples of y from</h2><p>Los constructores más sencillos de la librería son <strong>funciones que emiten valores estáticos</strong> o secuencias a intervalos regulares. Para familiarizarte con ellos te propongo que juegues con código como este:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value$ = <span class=\"title function_\">of</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getMilliseconds</span>());</span><br><span class=\"line\">value$.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\">stream$ = <span class=\"title function_\">from</span>([<span class=\"number\">1</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;***&#x27;</span>]);</span><br><span class=\"line\">stream$.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\">list$ = <span class=\"title function_\">of</span>([<span class=\"string\">&#x27;N&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;W&#x27;</span>]);</span><br><span class=\"line\">list$.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Operadores-simples-map-y-tap\"><a href=\"#2-2-Operadores-simples-map-y-tap\" class=\"headerlink\" title=\"2.2 Operadores simples map y tap\"></a>2.2 Operadores simples map y tap</h2><p>Tratamos a los observables como un flujo, un <em>stream</em> de datos; algo similar a un riachuelo de gotas de agua. A cada dato recibido le podemos aplicar funciones; sería como aplicar algún tratamiento al agua del riachuelo. Vamos a empezar con dos categorías de acciones: las que transforma en contenido, y la que tienen efectos secundarios.</p>\n<p>Para ello disponemos de unas funciones de primer orden llamadas operadores. Estas funciones reciben como argumento a otras funciones en las que tú programas las acciones de transformación o efecto.</p>\n<p>El operador de transformación se llama <code>map()</code> y el de efectos se llama <code>tap()</code>. Ambos se pueden usar cuantas veces se quiera y en cualquier orden. Sólo hay que meterlos dentro de una función superior. La función <code>pipe()</code>; que da nombre al proceso: entubar el stream.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers$ = <span class=\"title function_\">from</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br><span class=\"line\">doubles$ = numbers$</span><br><span class=\"line\">  .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span> <span class=\"number\">2</span> * x ),</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(x=Z <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)) <span class=\"comment\">// 2 4 6 8</span></span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n\n<p>Apliquemos esto a los cohetes. Por ejemplo editando y transformando los datos recibidos desde el api:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">getNextLaunches</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"variable language_\">this</span>.<span class=\"property\">rocketsApi</span> + <span class=\"string\">&#x27;launch/next/5&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">nextLaunches$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">any</span>&gt;(url).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">apiData</span> =&gt;</span> apiData.<span class=\"property\">launches</span>),</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">launchesArray</span> =&gt;</span></span><br><span class=\"line\">      launchesArray.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">launch</span> =&gt;</span> (&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: launch.<span class=\"property\">name</span>,</span><br><span class=\"line\">        <span class=\"attr\">status</span>: launch.<span class=\"property\">status</span>,</span><br><span class=\"line\">        <span class=\"attr\">scheduled</span>: launch.<span class=\"property\">net</span>,</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">customLaunches</span> =&gt;</span></span><br><span class=\"line\">      customLaunches.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">launch</span> =&gt;</span> (&#123;</span><br><span class=\"line\">        ...launch,</span><br><span class=\"line\">        <span class=\"attr\">statusColor</span>: launch.<span class=\"property\">status</span> === <span class=\"number\">1</span> ? <span class=\"string\">&#x27;green&#x27;</span> : <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(<span class=\"function\"><span class=\"params\">rockets</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;num rockets:&#x27;</span> + rockets.<span class=\"property\">length</span>)),</span><br><span class=\"line\">    <span class=\"title function_\">tap</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;ha pasado algo&#x27;</span>)),</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> a =<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>De esta forma la <em>template</em> ya recibe los datos listos para presentar de una manera más vistosa y limpia.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;nextLaunches$ | async as nextLaunches; else loading&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let launch of nextLaunches&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      [<span class=\"attr\">style.color</span>]=<span class=\"string\">&quot;launch.statusColor&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>&#123;&#123; launch.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>&#123;&#123; launch.scheduled &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">loading</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Loading rocket data... <span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Un-store-de-notificaciones\"><a href=\"#3-Un-store-de-notificaciones\" class=\"headerlink\" title=\"3 Un store de notificaciones\"></a>3 Un store de notificaciones</h1><h2 id=\"3-1-Subject-y-BehaviorSubject\"><a href=\"#3-1-Subject-y-BehaviorSubject\" class=\"headerlink\" title=\"3.1 Subject y BehaviorSubject\"></a>3.1 Subject y BehaviorSubject</h2><p>Los anteriores constructores se basan en datos estáticos. Resuelvan algunas situaciones, pero necesitamos algo que emita <strong>cambios dinámicos</strong>. Y eso se realiza con los <em>Subjects</em>, una especie de emisores temáticos a los que suscribirse.</p>\n<p>Hay varios tipos pero para empezar nos vamos a fijar en dos: el <code>Subject()</code> y el <code>BehaviorSubject(initialData)</code>. La diferencia es que el primero sólo emite las cosas según ocurren. Si alguien se suscribe tarde no conocerá el pasado. Esto suele generar problemas de sincronización. El <em>Behavior</em> en cambio notifica el último valor conocido a cualquiera que se suscriba. De esa forma no importa si te suscribes antes o después de la obtención de un dato.</p>\n<p>Juega con el siguiente ejemplo:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">value</span>:<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> need_sync$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\"><span class=\"comment\">// on time</span></span><br><span class=\"line\">need_sync.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\">need_sync.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\"><span class=\"comment\">// too late</span></span><br><span class=\"line\">need_sync.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> no_hurry$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\"><span class=\"comment\">// its ok</span></span><br><span class=\"line\">no_hurry.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br><span class=\"line\">no_hurry.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\"><span class=\"comment\">// its also ok</span></span><br><span class=\"line\">no_hurry.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Un-Store-de-notificaciones\"><a href=\"#3-2-Un-Store-de-notificaciones\" class=\"headerlink\" title=\"3.2 Un Store de notificaciones\"></a>3.2 Un Store de notificaciones</h2><p>Usaremos el <code>BehaviorSubject</code> como notificador principal entre componentes de Angular. Por ejemplo podemos montar un sistema de notificaciones sencillo. Empecemos por crear un servicio:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m rockets/nasa --route nasa --module rockets/rockets-routing.module</span><br><span class=\"line\">ng g c rockets/nasa/houston</span><br><span class=\"line\">ng g c rockets/nasa/florida</span><br></pre></td></tr></table></figure>\n\n<p>  Este servicio es la implementación más sencilla posible de un gestor de estados. Cabe destacar que :</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MissionsComunicationService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">messages</span>: <span class=\"built_in\">object</span>[] = [&#123; <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;👩‍🚀&#x27;</span>, <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;Crew on board&#x27;</span> &#125;];</span><br><span class=\"line\">  <span class=\"keyword\">private</span> messages$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;<span class=\"built_in\">any</span>[]&gt;(<span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> getMessages$ = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">messages$</span>.<span class=\"title function_\">asObservable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> sendMessage = <span class=\"function\">(<span class=\"params\">message: <span class=\"built_in\">object</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">push</span>(message);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">messages$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Mantienen el estado privado para evitar manipulaciones</li>\n<li>Recibe de forma controlada las acciones de cambio</li>\n<li>Emite clones del estado</li>\n<li>Expone observables para que se suscriban los interesados.</li>\n</ul>\n<blockquote>\n<p>Podría adaptar a la nomenclatura usada por patrones de gestión de estado más avanzados como es <strong>Redux</strong>, y usar el siguiente convenio: <em>Store</em> como almacén, <em>select$()</em> como publicador de cambios observable y <em>dispatch</em> como encargado de procesar una acción de cambio de estado.</p>\n</blockquote>\n<h2 id=\"3-3-Desacoplados-pero-conectados\"><a href=\"#3-3-Desacoplados-pero-conectados\" class=\"headerlink\" title=\"3.3 Desacoplados pero conectados\"></a>3.3 Desacoplados pero conectados</h2><p>Una vez que hemos centralizado el control de cambios de una parte de la aplicación, es hora de que lo usen los componentes o servicios involucrados. Solo necesitan recibir la instancia vía dependencia. <strong>No hay más acoplamiento entre emisores y receptores.</strong></p>\n<h3 id=\"Emision\"><a href=\"#Emision\" class=\"headerlink\" title=\"Emisión\"></a>Emisión</h3><p>Veamos un ejemplo, un tanto forzado,  consistente en dos componentes que se comunican sin conocerse. Esta es la vista con un formulario para enviar mensajes</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Houston mission control<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> Start count down 🏁<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> Ignition 🔥<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> Abort 🛑<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>La parte interesante está en el controlador. Dependencia y uso del servicio del almacén de notificaciones</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HoustonComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> missionsComunicationService: MissionsComunicationService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onStartClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">missionsComunicationService</span>.<span class=\"title function_\">sendMessage</span>(&#123; <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;🏁&#x27;</span>, <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;Start count down&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onIgnitionClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">missionsComunicationService</span>.<span class=\"title function_\">sendMessage</span>(&#123; <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;🔥&#x27;</span>, <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;Ignition&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onAbortClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">missionsComunicationService</span>.<span class=\"title function_\">sendMessage</span>(&#123; <span class=\"attr\">icon</span>: <span class=\"string\">&#x27;🛑&#x27;</span>, <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;Abort&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Recepcion\"><a href=\"#Recepcion\" class=\"headerlink\" title=\"Recepción\"></a>Recepción</h3><p>La recepción es igual de sencilla. En el controlador reclamamos la misma dependencia para el uso del servicio del almacén de notificaciones.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FloridaComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">messages$</span>: <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> missionsComunicationService: MissionsComunicationService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">messages$</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">missionsComunicationService</span>.<span class=\"title function_\">getMessages$</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>En la vista pondremos un listado de notificaciones que se alimenta de un array emitido por un observable.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Florida launch pad<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>📋 Mission log<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let message of messages$ | async&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Es importante recalcar que <strong>no importa el orden de suscripción</strong>. Estos dos componentes podrían <em>vivir</em> en módulos distintos, verse en la misma página o inicializarse en cualquier orden… El receptor se entera siempre de todos los cambios; y además recibe el último estado conocido nada más suscribirse.</p>\n<p>Tenemos ahora a nuestro usuario puntualmente informado de todo lo que sucede. Hemos utilizado <strong>patrones de arquitectura de software</strong> como el observable y la inversión del control. El resultado es una serie de componentes y servicios poco acoplados que intercambian información en tiempo real.</p>\n<p>Pero hay temas más avanzados con los que continuar. Sigue esta serie para introducir más temas de seguridad y crear tus <a href=\"../formularios-reactivos-con-Angular/\">formularios reactivos con Angular</a> mientras aprendes a programar con Angular. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Formularios reactivos con Angular","date":"2019-03-12T09:59:27.000Z","thumbnail":"/css/images/angular-8_reactive.png","_content":"\n![formularios-reactivos-con-Angular](/images/tutorial-angular-8_reactive.png)\n\nEl **doble enlace automático** entre elementos *html* y propiedades de objetos fue el primer gran éxito de **Angular**. Ese _doble-binding_ facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.\n\nLa solución en Angular 8 pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo `ReactiveFormsModule` que viene en la librería `@angular/forms` permiten programar **formularios reactivos conducidos por el código**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/). Al finalizar tendrás una aplicación con formularios _model driven_ fáciles de mantener y validar.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/8-reactive](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/8-reactive/security)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n\n# 1 Desacople entre vista y modelo\n\nLa directiva `[(ngModel)]=\"model.property\"` con su popular _banana in a box_ establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.\n\nSe pueden establecer validaciones y configurar los eventos que disparan las actualizaciones; pero todo ello usando más y más atributos y directivas en la plantilla. Son los formularios _template driven_ que degeneran en un *html* farragoso y difícil de mantener.\n\n> Vamos a crear un formulario de registro de usuarios usando los formularios _model driven_. Para ello voy a crear el módulo _security_ con el componente _register_ y los engancharé a la ruta _security/register_.\n\nEl módulo de seguridad y su configuración lazy en el raíz:\n\n```console\nng g m security --routing true\nng g c security/register\n```\n\n```typescript\n{\n  path: 'security',\n  loadChildren: () => import('./8-reactive/security/security.module').then(m => m.SecurityModule)\n},\n```\nEl componente de registro y su ruta asignada:\n\n```typescript\nconst routes: Routes = [\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'register'\n  }\n];\n```\n\n```html\n<a routerLink=\"security/register\" class=\"button\">Register</a>\n```\n\n## 1.1 Form Builder\n\nEntra en acción el  `FormBuilder`, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un `FormGroup`, (un grupo de controles) que realiza un seguimiento del valor y estado de cambio y validez de los datos.\n\nPara poder usarlo tenemos que importar el módulo de Angular en el que viene declarado, el `ReactiveFormModule`.\n\n```typescript\nimport { ReactiveFormsModule } from '@angular/forms';\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    SecurityRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class SecurityModule { }\n```\n\nVeamos un ejemplo mínimo de su declaración en `register.component.ts`.\n\n```typescript\nexport class RegisterComponent implements OnInit {\n  public formGroup: FormGroup;\n\n  constructor( private formBuilder: FormBuilder ) { }\n\n  public ngOnInit() {\n    this.buildForm();\n  }\n  private buildForm(){\n    this.formGroup = this.formBuilder.group({});\n  }\n}\n```\n## 1.2 Form control\n\nEl formulario se define como un **grupo de controles**. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control.\n\n```typescript\nprivate buildForm() {\n  const dateLength = 10;\n  const today = new Date().toISOString().substring(0, dateLength);\n  const name = 'JOHN DOE';\n  this.formGroup = this.formBuilder.group({\n    registeredOn: today,\n    name: name.toLowerCase(),\n    email: 'john@angular.io',\n    password: ''\n  });\n}\n```\n\nComo ves, es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario; sin necesidad de cambiar los datos de base.\n\n## 1.3 Form view\n\nMientras tanto en la vista html... Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una **mayor limpieza en la vista**. Lo único necesario será asignar por nombre el elemento html con el control _typescript_ que lo gestionará.\n\n>Para ello usaremos dos directivas que vienen dentro del módulo _reactivo_ son `[formGroup]=\"objetoFormulario\"` para el formulario en su conjunto, y `formControlName=\"nombreDelControl\"` para cada control.\n\n```html\n<form [formGroup]=\"formGroup\">\n  <label for=\"registeredOn\">Registered On</label>\n  <input name=\"registeredOn\"\n        formControlName=\"registeredOn\"\n        type=\"date\" />\n  <label for=\"name\">Name</label>\n  <input name=\"name\"\n        formControlName=\"name\"\n        type=\"text\" />\n  <label for=\"email\">E-mail</label>\n  <input name=\"email\"\n        formControlName=\"email\"\n        type=\"email\" />\n  <label for=\"password\">Password</label>\n  <input name=\"password\"\n        formControlName=\"password\"\n        type=\"password\" />\n</form>\n```\n\n# 2 Validación y estados\n\nLa validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer **frente de defensa ante errores de usuarios**; ya sean involuntarios o deliberados.\n\nDichas validaciones se solían realizar agregando atributos html tales como el archiconocido `required`. Pero todo eso ahora se traslada a la configuración de cada control, donde podrás establecer una o varias reglas de validación sin mancharte con html.\n\n## 2.1 Validadores predefinidos y personalizados\n\nDe nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas que vienen predefinidas como funciones en el objeto `Validators` del _framework_.\n\n```typescript\nprivate buildForm() {\n  const dateLength = 10;\n  const today = new Date().toISOString().substring(0, dateLength);\n  const name = 'JOHN DOE';\n  const minPassLength = 4;\n  this.formGroup = this.formBuilder.group({\n    registeredOn: today,\n    name: [name.toLowerCase(), Validators.required],\n    email: ['john@angular.io', [\n      Validators.required, Validators.email\n    ]],\n    password: ['', [\n      Validators.required, Validators.minLength(minPassLength)\n    ]]\n  });\n}\n```\n\nA estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.\n\nPor ejemplo podemos agregar una validación específica a las contraseñas\n\n```typescript\npassword: ['', [\n  Validators.required,\n  Validators.minLength(minPassLength),\n  this.validatePassword\n]]\n```\nLo único que se necesita es una función que recibe como argumento el control a validar. El resultado debe ser un `null` si todo va bien. Y cualquier otra cosa en caso de fallo. Te muestro una propuesta para que puedas crear tus propios validadores.\n\n```typescript\nprivate validatePassword(control: AbstractControl) {\n  const password = control.value;\n  let error = null;\n  if (!password.includes('$')) {\n    error = { ...error, dollar: 'needs a dollar symbol' };\n  }\n  if (!parseFloat(password[0])) {\n    error = { ...error, number: 'must start with a number' };\n  }\n  return error;\n}\n```\n\n## 2.2 Estados de cambio y validación\n\nUna vez establecidas las reglas, es hora de aplicarlas y avisar al usuario en caso de que se incumplan. Los formularios y controles reactivos están gestionados por **máquinas de estados** que determinan en todo momento la situación de cada control y del formulario en si mismo.\n\n### 2.2.1 Estados de validación\n\nAl establecer una o más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.\n\nLa máquina de estados de validación contempla los siguientes estados mutuamente excluyentes:\n\n- **VALID**: el control ha pasado todos los chequeos\n- **INVALID**: el control ha fallado al menos en una regla.\n- **PENDING**: el control está en medio de un proceso de validación\n- **DISABLED**: el control está desactivado y exento de validación\n\nCuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad `errors` que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.\n\n### 2.2.2 Estados de modificación\n\nLos controles, y el formulario, se someten a otra máquina de estados que monitoriza el valor del control y sus cambios.\n\nLa máquina de estados de cambio contempla entre otros los siguientes:\n\n- **PRINSTINE**: el valor del control no ha sido cambiado por el usuario\n- **DIRTY**: el usuario ha modificado el valor del control.\n- **TOUCHED**: el usuario ha tocado el control lanzando un evento `blur` al salir.\n- **UNTOUCHED**: el usuario no ha tocado y salido del control lanzando ningún evento `blur`.\n\nComo en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.\n\nVeamos su aplicación primero en el caso general del formulario. Uno de los usos más inmediatos es deshabilitar el botón de envío cuando la validación de algún control falla.\n\n```html\n<button (click)=\"register()\"\n    [disabled]=\"formGroup.invalid\">Register me!</button>\n```\n\n> Por cierto, este sistema de gestión de los controles del formulario oculta la parte más valiosa (el valor que se pretende almacenar) en la propiedad `value` del formulario. Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.\n\n```typescript\npublic register() {\n  const user = this.formGroup.value;\n  console.log(user);\n}\n```\n\nLa validación particular para cada control permite informar al usuario del fallo concreto. Es una **buena práctica de usabilidad** el esperar a que edite un control antes de mostrarle el fallo. Y también es muy habitual usar la misma estrategia para cada control.\n\nLo que no queremos es llevar de vuelta la lógica a la vista; así que lo recomendado es crear una **función auxiliar para mostrar los errores** de validación.\n\n```typescript\npublic getError(controlName: string): string {\n  let error = '';\n  const control = this.formGroup.get(controlName);\n  if (control.touched && control.errors != null) {\n    error = JSON.stringify(control.errors);\n  }\n  return error;\n}\n```\nEn la vista colocaremos adecuadamente los mensajes para facilitarle la corrección al usuario.\n\n```html\n<span>{{ getError('name')}}</span>\n<span>{{ getError('email')}}</span>\n<span>{{ getError('password')}}</span>\n```\n\nYa tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. Como resumen podemos decir que vamos a programar más en TypeScript que en Html. La ventaja del desacople es que podremos controlar lo que enviamos y recibimos de la vista. Así se pueden aplicar formatos, validaciones y transformaciones entre lo que presentamos y lo que enviamos hacia los servicios.\n\n# 3. Un gestor de credenciales\n\nVamos a provechar el conocimiento sobre _Interceptores_ y _Observables_ para montar un pequeño sistema de gestión de credenciales. La idea es detectar respuestas a llamadas no autenticadas y redirigir al usuario a nuestra pantalla de registro.\n\nSi el usuario se registra correctamente recibiremos un _token_ que lo identifica. Lo que haremos será guardarlo y usarlo en el resto de las llamadas.\n\n## 3.1 Detección y redirección de intrusos\n\nEmpezaré por crea un servicio para el interceptor de fallos de seguridad y un componente que invocará deliberadamente a un API protegida.\n\n```console\nng g s security/auth-interceptor\nng g c security/secret\n```\n\nAl componente _secret_ le asignaremos la ruta _security/secret_\n\n```html\n  <a routerLink=\"security/register\" class=\"button\">Register</a>\n```\n\n```typescript\nconst routes: Routes = [\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: 'secret',\n    component: SecretComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'secret'\n  }\n];\n```\nEn cuanto al interceptor, haremos como ya hemos visto en el tema [7-watch](../vigilancia-y-seguridad-en-Angular/). Lo primero será proveerlo invirtiendo el control que nos cede el `HttpClient`.\n\n```typescript\n@NgModule({\n  declarations: [RegisterComponent, SecretComponent],\n  imports: [CommonModule, SecurityRoutingModule, ReactiveFormsModule, HttpClientModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptorService,\n      multi: true\n    }\n  ]\n})\nexport class SecurityModule {}\n```\n\nLuego codificaré la implementación de la interfaz `HttpInterceptor`. En este caso me interesan las respuestas con **error 401**. Emplearé el `Router` de Angular para obligar al usuario a visitar la página de registro cuando esto ocurra.\n\n```typescript\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(private router: Router) {}\n\n  public intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(catchError(this.handleError.bind(this)));\n  }\n  private handleError(err) {\n    const unauthorized_code = 401;\n    if (err instanceof HttpErrorResponse) {\n      if (err.status === unauthorized_code) {\n        this.router.navigate(['security/register']);\n      }\n    }\n    return throwError(err);\n  }\n}\n```\n\n## 3.2 Almacenamiento y uso del token\n\nAntes de nada volveremos al tema de los observables y su uso como **intermediarios entre objetos desacoplados**. Para ello crearé un servicio para almacenar y distribuir el _token_ de identificación de usuarios.\n\n```console\nng g s security/token_store\n```\n\n```typescript\nexport class TokenStoreService {\n  private token = '';\n  private token$ = new BehaviorSubject<string>('');\n\n  constructor() {}\n\n  public select$ = () => this.token$.asObservable();\n  public dispatch(token) {\n    this.token = token;\n    this.token$.next(this.token);\n  }\n}\n```\n\nDe vuelta en el componente `RegisterComponent`. Tenemos que enviar las credenciales al API para su aceptación. Si todo va bien, nos devolverán un _token_ que identifica al usuario. Es momento de usar al `TokenStore` para transmitir la noticia por toda la aplicación.\n\n```typescript\npublic register() {\n  const url = 'https://api-base.herokuapp.com/api/pub/credentials/registration';\n  const user = this.formGroup.value;\n  this.httpClient.post<any>(url, user)\n    .subscribe(res => this.tokenStore.dispatch(res.token));\n}\n```\n\n---\n\nPor último volvemos al `AuthInterceptorService` en el que nos suscribiremos a los cambios acerca del _token_.\n\n```typescript\nprivate token = '';\nconstructor(private router: Router, private tokenStore: TokenStoreService) {\n  this.tokenStore.select$()\n    .subscribe(token => (this.token = token));\n}\n```\n\nY lo usaremos en las cabeceras de todas las llamadas.\n\n\n```typescript\npublic intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n  const authHeader = { Authorization: 'bearer ' + this.token };\n  const authReq = req.clone({ setHeaders: authHeader });\n  return next.handle(authReq)\n    .pipe(catchError(this.handleError.bind(this)));\n}\n```\n\nYa sabes lo básico de Angular; pero puedes usar mucho más conociendo su ecosistema. Sigue esta serie para agregar librerías y usar los esquemas de  [Material Design y CLI de Angular](../Material-Design-y-CLI-de-Angular/) mientras aprendes a programar con Angular. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-8-Formularios-reactivos-con-Angular.md","raw":"---\ntitle: Formularios reactivos con Angular\npermalink: formularios-reactivos-con-Angular\ndate: 2019-03-12 10:59:27\ntags:\n- Angular\n- Angular8\n- Angular2\n- reactiveForms\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-8_reactive.png\n---\n\n![formularios-reactivos-con-Angular](/images/tutorial-angular-8_reactive.png)\n\nEl **doble enlace automático** entre elementos *html* y propiedades de objetos fue el primer gran éxito de **Angular**. Ese _doble-binding_ facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.\n\nLa solución en Angular 8 pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo `ReactiveFormsModule` que viene en la librería `@angular/forms` permiten programar **formularios reactivos conducidos por el código**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/). Al finalizar tendrás una aplicación con formularios _model driven_ fáciles de mantener y validar.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/8-reactive](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/8-reactive/security)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n\n# 1 Desacople entre vista y modelo\n\nLa directiva `[(ngModel)]=\"model.property\"` con su popular _banana in a box_ establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.\n\nSe pueden establecer validaciones y configurar los eventos que disparan las actualizaciones; pero todo ello usando más y más atributos y directivas en la plantilla. Son los formularios _template driven_ que degeneran en un *html* farragoso y difícil de mantener.\n\n> Vamos a crear un formulario de registro de usuarios usando los formularios _model driven_. Para ello voy a crear el módulo _security_ con el componente _register_ y los engancharé a la ruta _security/register_.\n\nEl módulo de seguridad y su configuración lazy en el raíz:\n\n```console\nng g m security --routing true\nng g c security/register\n```\n\n```typescript\n{\n  path: 'security',\n  loadChildren: () => import('./8-reactive/security/security.module').then(m => m.SecurityModule)\n},\n```\nEl componente de registro y su ruta asignada:\n\n```typescript\nconst routes: Routes = [\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'register'\n  }\n];\n```\n\n```html\n<a routerLink=\"security/register\" class=\"button\">Register</a>\n```\n\n## 1.1 Form Builder\n\nEntra en acción el  `FormBuilder`, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un `FormGroup`, (un grupo de controles) que realiza un seguimiento del valor y estado de cambio y validez de los datos.\n\nPara poder usarlo tenemos que importar el módulo de Angular en el que viene declarado, el `ReactiveFormModule`.\n\n```typescript\nimport { ReactiveFormsModule } from '@angular/forms';\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    SecurityRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class SecurityModule { }\n```\n\nVeamos un ejemplo mínimo de su declaración en `register.component.ts`.\n\n```typescript\nexport class RegisterComponent implements OnInit {\n  public formGroup: FormGroup;\n\n  constructor( private formBuilder: FormBuilder ) { }\n\n  public ngOnInit() {\n    this.buildForm();\n  }\n  private buildForm(){\n    this.formGroup = this.formBuilder.group({});\n  }\n}\n```\n## 1.2 Form control\n\nEl formulario se define como un **grupo de controles**. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control.\n\n```typescript\nprivate buildForm() {\n  const dateLength = 10;\n  const today = new Date().toISOString().substring(0, dateLength);\n  const name = 'JOHN DOE';\n  this.formGroup = this.formBuilder.group({\n    registeredOn: today,\n    name: name.toLowerCase(),\n    email: 'john@angular.io',\n    password: ''\n  });\n}\n```\n\nComo ves, es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario; sin necesidad de cambiar los datos de base.\n\n## 1.3 Form view\n\nMientras tanto en la vista html... Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una **mayor limpieza en la vista**. Lo único necesario será asignar por nombre el elemento html con el control _typescript_ que lo gestionará.\n\n>Para ello usaremos dos directivas que vienen dentro del módulo _reactivo_ son `[formGroup]=\"objetoFormulario\"` para el formulario en su conjunto, y `formControlName=\"nombreDelControl\"` para cada control.\n\n```html\n<form [formGroup]=\"formGroup\">\n  <label for=\"registeredOn\">Registered On</label>\n  <input name=\"registeredOn\"\n        formControlName=\"registeredOn\"\n        type=\"date\" />\n  <label for=\"name\">Name</label>\n  <input name=\"name\"\n        formControlName=\"name\"\n        type=\"text\" />\n  <label for=\"email\">E-mail</label>\n  <input name=\"email\"\n        formControlName=\"email\"\n        type=\"email\" />\n  <label for=\"password\">Password</label>\n  <input name=\"password\"\n        formControlName=\"password\"\n        type=\"password\" />\n</form>\n```\n\n# 2 Validación y estados\n\nLa validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer **frente de defensa ante errores de usuarios**; ya sean involuntarios o deliberados.\n\nDichas validaciones se solían realizar agregando atributos html tales como el archiconocido `required`. Pero todo eso ahora se traslada a la configuración de cada control, donde podrás establecer una o varias reglas de validación sin mancharte con html.\n\n## 2.1 Validadores predefinidos y personalizados\n\nDe nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas que vienen predefinidas como funciones en el objeto `Validators` del _framework_.\n\n```typescript\nprivate buildForm() {\n  const dateLength = 10;\n  const today = new Date().toISOString().substring(0, dateLength);\n  const name = 'JOHN DOE';\n  const minPassLength = 4;\n  this.formGroup = this.formBuilder.group({\n    registeredOn: today,\n    name: [name.toLowerCase(), Validators.required],\n    email: ['john@angular.io', [\n      Validators.required, Validators.email\n    ]],\n    password: ['', [\n      Validators.required, Validators.minLength(minPassLength)\n    ]]\n  });\n}\n```\n\nA estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.\n\nPor ejemplo podemos agregar una validación específica a las contraseñas\n\n```typescript\npassword: ['', [\n  Validators.required,\n  Validators.minLength(minPassLength),\n  this.validatePassword\n]]\n```\nLo único que se necesita es una función que recibe como argumento el control a validar. El resultado debe ser un `null` si todo va bien. Y cualquier otra cosa en caso de fallo. Te muestro una propuesta para que puedas crear tus propios validadores.\n\n```typescript\nprivate validatePassword(control: AbstractControl) {\n  const password = control.value;\n  let error = null;\n  if (!password.includes('$')) {\n    error = { ...error, dollar: 'needs a dollar symbol' };\n  }\n  if (!parseFloat(password[0])) {\n    error = { ...error, number: 'must start with a number' };\n  }\n  return error;\n}\n```\n\n## 2.2 Estados de cambio y validación\n\nUna vez establecidas las reglas, es hora de aplicarlas y avisar al usuario en caso de que se incumplan. Los formularios y controles reactivos están gestionados por **máquinas de estados** que determinan en todo momento la situación de cada control y del formulario en si mismo.\n\n### 2.2.1 Estados de validación\n\nAl establecer una o más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.\n\nLa máquina de estados de validación contempla los siguientes estados mutuamente excluyentes:\n\n- **VALID**: el control ha pasado todos los chequeos\n- **INVALID**: el control ha fallado al menos en una regla.\n- **PENDING**: el control está en medio de un proceso de validación\n- **DISABLED**: el control está desactivado y exento de validación\n\nCuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad `errors` que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.\n\n### 2.2.2 Estados de modificación\n\nLos controles, y el formulario, se someten a otra máquina de estados que monitoriza el valor del control y sus cambios.\n\nLa máquina de estados de cambio contempla entre otros los siguientes:\n\n- **PRINSTINE**: el valor del control no ha sido cambiado por el usuario\n- **DIRTY**: el usuario ha modificado el valor del control.\n- **TOUCHED**: el usuario ha tocado el control lanzando un evento `blur` al salir.\n- **UNTOUCHED**: el usuario no ha tocado y salido del control lanzando ningún evento `blur`.\n\nComo en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.\n\nVeamos su aplicación primero en el caso general del formulario. Uno de los usos más inmediatos es deshabilitar el botón de envío cuando la validación de algún control falla.\n\n```html\n<button (click)=\"register()\"\n    [disabled]=\"formGroup.invalid\">Register me!</button>\n```\n\n> Por cierto, este sistema de gestión de los controles del formulario oculta la parte más valiosa (el valor que se pretende almacenar) en la propiedad `value` del formulario. Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.\n\n```typescript\npublic register() {\n  const user = this.formGroup.value;\n  console.log(user);\n}\n```\n\nLa validación particular para cada control permite informar al usuario del fallo concreto. Es una **buena práctica de usabilidad** el esperar a que edite un control antes de mostrarle el fallo. Y también es muy habitual usar la misma estrategia para cada control.\n\nLo que no queremos es llevar de vuelta la lógica a la vista; así que lo recomendado es crear una **función auxiliar para mostrar los errores** de validación.\n\n```typescript\npublic getError(controlName: string): string {\n  let error = '';\n  const control = this.formGroup.get(controlName);\n  if (control.touched && control.errors != null) {\n    error = JSON.stringify(control.errors);\n  }\n  return error;\n}\n```\nEn la vista colocaremos adecuadamente los mensajes para facilitarle la corrección al usuario.\n\n```html\n<span>{{ getError('name')}}</span>\n<span>{{ getError('email')}}</span>\n<span>{{ getError('password')}}</span>\n```\n\nYa tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. Como resumen podemos decir que vamos a programar más en TypeScript que en Html. La ventaja del desacople es que podremos controlar lo que enviamos y recibimos de la vista. Así se pueden aplicar formatos, validaciones y transformaciones entre lo que presentamos y lo que enviamos hacia los servicios.\n\n# 3. Un gestor de credenciales\n\nVamos a provechar el conocimiento sobre _Interceptores_ y _Observables_ para montar un pequeño sistema de gestión de credenciales. La idea es detectar respuestas a llamadas no autenticadas y redirigir al usuario a nuestra pantalla de registro.\n\nSi el usuario se registra correctamente recibiremos un _token_ que lo identifica. Lo que haremos será guardarlo y usarlo en el resto de las llamadas.\n\n## 3.1 Detección y redirección de intrusos\n\nEmpezaré por crea un servicio para el interceptor de fallos de seguridad y un componente que invocará deliberadamente a un API protegida.\n\n```console\nng g s security/auth-interceptor\nng g c security/secret\n```\n\nAl componente _secret_ le asignaremos la ruta _security/secret_\n\n```html\n  <a routerLink=\"security/register\" class=\"button\">Register</a>\n```\n\n```typescript\nconst routes: Routes = [\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: 'secret',\n    component: SecretComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'secret'\n  }\n];\n```\nEn cuanto al interceptor, haremos como ya hemos visto en el tema [7-watch](../vigilancia-y-seguridad-en-Angular/). Lo primero será proveerlo invirtiendo el control que nos cede el `HttpClient`.\n\n```typescript\n@NgModule({\n  declarations: [RegisterComponent, SecretComponent],\n  imports: [CommonModule, SecurityRoutingModule, ReactiveFormsModule, HttpClientModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptorService,\n      multi: true\n    }\n  ]\n})\nexport class SecurityModule {}\n```\n\nLuego codificaré la implementación de la interfaz `HttpInterceptor`. En este caso me interesan las respuestas con **error 401**. Emplearé el `Router` de Angular para obligar al usuario a visitar la página de registro cuando esto ocurra.\n\n```typescript\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(private router: Router) {}\n\n  public intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(catchError(this.handleError.bind(this)));\n  }\n  private handleError(err) {\n    const unauthorized_code = 401;\n    if (err instanceof HttpErrorResponse) {\n      if (err.status === unauthorized_code) {\n        this.router.navigate(['security/register']);\n      }\n    }\n    return throwError(err);\n  }\n}\n```\n\n## 3.2 Almacenamiento y uso del token\n\nAntes de nada volveremos al tema de los observables y su uso como **intermediarios entre objetos desacoplados**. Para ello crearé un servicio para almacenar y distribuir el _token_ de identificación de usuarios.\n\n```console\nng g s security/token_store\n```\n\n```typescript\nexport class TokenStoreService {\n  private token = '';\n  private token$ = new BehaviorSubject<string>('');\n\n  constructor() {}\n\n  public select$ = () => this.token$.asObservable();\n  public dispatch(token) {\n    this.token = token;\n    this.token$.next(this.token);\n  }\n}\n```\n\nDe vuelta en el componente `RegisterComponent`. Tenemos que enviar las credenciales al API para su aceptación. Si todo va bien, nos devolverán un _token_ que identifica al usuario. Es momento de usar al `TokenStore` para transmitir la noticia por toda la aplicación.\n\n```typescript\npublic register() {\n  const url = 'https://api-base.herokuapp.com/api/pub/credentials/registration';\n  const user = this.formGroup.value;\n  this.httpClient.post<any>(url, user)\n    .subscribe(res => this.tokenStore.dispatch(res.token));\n}\n```\n\n---\n\nPor último volvemos al `AuthInterceptorService` en el que nos suscribiremos a los cambios acerca del _token_.\n\n```typescript\nprivate token = '';\nconstructor(private router: Router, private tokenStore: TokenStoreService) {\n  this.tokenStore.select$()\n    .subscribe(token => (this.token = token));\n}\n```\n\nY lo usaremos en las cabeceras de todas las llamadas.\n\n\n```typescript\npublic intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n  const authHeader = { Authorization: 'bearer ' + this.token };\n  const authReq = req.clone({ setHeaders: authHeader });\n  return next.handle(authReq)\n    .pipe(catchError(this.handleError.bind(this)));\n}\n```\n\nYa sabes lo básico de Angular; pero puedes usar mucho más conociendo su ecosistema. Sigue esta serie para agregar librerías y usar los esquemas de  [Material Design y CLI de Angular](../Material-Design-y-CLI-de-Angular/) mientras aprendes a programar con Angular. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-8-Formularios-reactivos-con-Angular","published":1,"updated":"2023-07-02T10:25:58.479Z","__permalink":"formularios-reactivos-con-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fi001ke096azdm02yk","content":"<p><img src=\"/images/tutorial-angular-8_reactive.png\" alt=\"formularios-reactivos-con-Angular\"></p>\n<p>El <strong>doble enlace automático</strong> entre elementos <em>html</em> y propiedades de objetos fue el primer gran éxito de <strong>Angular</strong>. Ese <em>doble-binding</em> facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.</p>\n<p>La solución en Angular 8 pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo <code>ReactiveFormsModule</code> que viene en la librería <code>@angular/forms</code> permiten programar <strong>formularios reactivos conducidos por el código</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../vigilancia-y-seguridad-en-Angular/\">Vigilancia y seguridad en Angular</a>. Al finalizar tendrás una aplicación con formularios <em>model driven</em> fáciles de mantener y validar.</p>\n<blockquote>\n<p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/8-reactive/security\">AcademiaBinaria&#x2F;angular-basic&#x2F;8-reactive</a></p>\n<blockquote>\n<p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\">Angular Basic</a></p>\n</blockquote>\n</blockquote>\n<h1 id=\"1-Desacople-entre-vista-y-modelo\"><a href=\"#1-Desacople-entre-vista-y-modelo\" class=\"headerlink\" title=\"1 Desacople entre vista y modelo\"></a>1 Desacople entre vista y modelo</h1><p>La directiva <code>[(ngModel)]=&quot;model.property&quot;</code> con su popular <em>banana in a box</em> establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.</p>\n<p>Se pueden establecer validaciones y configurar los eventos que disparan las actualizaciones; pero todo ello usando más y más atributos y directivas en la plantilla. Son los formularios <em>template driven</em> que degeneran en un <em>html</em> farragoso y difícil de mantener.</p>\n<blockquote>\n<p>Vamos a crear un formulario de registro de usuarios usando los formularios <em>model driven</em>. Para ello voy a crear el módulo <em>security</em> con el componente <em>register</em> y los engancharé a la ruta <em>security&#x2F;register</em>.</p>\n</blockquote>\n<p>El módulo de seguridad y su configuración lazy en el raíz:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m security --routing true</span><br><span class=\"line\">ng g c security/register</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;security&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./8-reactive/security/security.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">SecurityModule</span>)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>El componente de registro y su ruta asignada:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;register&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">RegisterComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirectTo</span>: <span class=\"string\">&#x27;register&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;security/register&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-1-Form-Builder\"><a href=\"#1-1-Form-Builder\" class=\"headerlink\" title=\"1.1 Form Builder\"></a>1.1 Form Builder</h2><p>Entra en acción el  <code>FormBuilder</code>, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un <code>FormGroup</code>, (un grupo de controles) que realiza un seguimiento del valor y estado de cambio y validez de los datos.</p>\n<p>Para poder usarlo tenemos que importar el módulo de Angular en el que viene declarado, el <code>ReactiveFormModule</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ReactiveFormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">RegisterComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">SecurityRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ReactiveFormsModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Veamos un ejemplo mínimo de su declaración en <code>register.component.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegisterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">formGroup</span>: <span class=\"title class_\">FormGroup</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> formBuilder: FormBuilder </span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildForm</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">buildForm</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">formBuilder</span>.<span class=\"title function_\">group</span>(&#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-Form-control\"><a href=\"#1-2-Form-control\" class=\"headerlink\" title=\"1.2 Form control\"></a>1.2 Form control</h2><p>El formulario se define como un <strong>grupo de controles</strong>. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">buildForm</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dateLength = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toISOString</span>().<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, dateLength);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;JOHN DOE&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">formBuilder</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">registeredOn</span>: today,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: name.<span class=\"title function_\">toLowerCase</span>(),</span><br><span class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">&#x27;john@angular.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Como ves, es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario; sin necesidad de cambiar los datos de base.</p>\n<h2 id=\"1-3-Form-view\"><a href=\"#1-3-Form-view\" class=\"headerlink\" title=\"1.3 Form view\"></a>1.3 Form view</h2><p>Mientras tanto en la vista html… Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una <strong>mayor limpieza en la vista</strong>. Lo único necesario será asignar por nombre el elemento html con el control <em>typescript</em> que lo gestionará.</p>\n<blockquote>\n<p>Para ello usaremos dos directivas que vienen dentro del módulo <em>reactivo</em> son <code>[formGroup]=&quot;objetoFormulario&quot;</code> para el formulario en su conjunto, y <code>formControlName=&quot;nombreDelControl&quot;</code> para cada control.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;formGroup&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;registeredOn&quot;</span>&gt;</span>Registered On<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;registeredOn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;registeredOn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;date&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span>E-mail<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;email&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Validacion-y-estados\"><a href=\"#2-Validacion-y-estados\" class=\"headerlink\" title=\"2 Validación y estados\"></a>2 Validación y estados</h1><p>La validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer <strong>frente de defensa ante errores de usuarios</strong>; ya sean involuntarios o deliberados.</p>\n<p>Dichas validaciones se solían realizar agregando atributos html tales como el archiconocido <code>required</code>. Pero todo eso ahora se traslada a la configuración de cada control, donde podrás establecer una o varias reglas de validación sin mancharte con html.</p>\n<h2 id=\"2-1-Validadores-predefinidos-y-personalizados\"><a href=\"#2-1-Validadores-predefinidos-y-personalizados\" class=\"headerlink\" title=\"2.1 Validadores predefinidos y personalizados\"></a>2.1 Validadores predefinidos y personalizados</h2><p>De nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas que vienen predefinidas como funciones en el objeto <code>Validators</code> del <em>framework</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">buildForm</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dateLength = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toISOString</span>().<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, dateLength);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;JOHN DOE&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> minPassLength = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">formBuilder</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">registeredOn</span>: today,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: [name.<span class=\"title function_\">toLowerCase</span>(), <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">email</span>: [<span class=\"string\">&#x27;john@angular.io&#x27;</span>, [</span><br><span class=\"line\">      <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">email</span></span><br><span class=\"line\">    ]],</span><br><span class=\"line\">    <span class=\"attr\">password</span>: [<span class=\"string\">&#x27;&#x27;</span>, [</span><br><span class=\"line\">      <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>, <span class=\"title class_\">Validators</span>.<span class=\"title function_\">minLength</span>(minPassLength)</span><br><span class=\"line\">    ]]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.</p>\n<p>Por ejemplo podemos agregar una validación específica a las contraseñas</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">password</span>: [<span class=\"string\">&#x27;&#x27;</span>, [</span><br><span class=\"line\">  <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Validators</span>.<span class=\"title function_\">minLength</span>(minPassLength),</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">validatePassword</span></span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>Lo único que se necesita es una función que recibe como argumento el control a validar. El resultado debe ser un <code>null</code> si todo va bien. Y cualquier otra cosa en caso de fallo. Te muestro una propuesta para que puedas crear tus propios validadores.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">validatePassword</span>(<span class=\"params\">control: AbstractControl</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> password = control.<span class=\"property\">value</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!password.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;$&#x27;</span>)) &#123;</span><br><span class=\"line\">    error = &#123; ...error, <span class=\"attr\">dollar</span>: <span class=\"string\">&#x27;needs a dollar symbol&#x27;</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">parseFloat</span>(password[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">    error = &#123; ...error, <span class=\"attr\">number</span>: <span class=\"string\">&#x27;must start with a number&#x27;</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Estados-de-cambio-y-validacion\"><a href=\"#2-2-Estados-de-cambio-y-validacion\" class=\"headerlink\" title=\"2.2 Estados de cambio y validación\"></a>2.2 Estados de cambio y validación</h2><p>Una vez establecidas las reglas, es hora de aplicarlas y avisar al usuario en caso de que se incumplan. Los formularios y controles reactivos están gestionados por <strong>máquinas de estados</strong> que determinan en todo momento la situación de cada control y del formulario en si mismo.</p>\n<h3 id=\"2-2-1-Estados-de-validacion\"><a href=\"#2-2-1-Estados-de-validacion\" class=\"headerlink\" title=\"2.2.1 Estados de validación\"></a>2.2.1 Estados de validación</h3><p>Al establecer una o más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.</p>\n<p>La máquina de estados de validación contempla los siguientes estados mutuamente excluyentes:</p>\n<ul>\n<li><strong>VALID</strong>: el control ha pasado todos los chequeos</li>\n<li><strong>INVALID</strong>: el control ha fallado al menos en una regla.</li>\n<li><strong>PENDING</strong>: el control está en medio de un proceso de validación</li>\n<li><strong>DISABLED</strong>: el control está desactivado y exento de validación</li>\n</ul>\n<p>Cuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad <code>errors</code> que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.</p>\n<h3 id=\"2-2-2-Estados-de-modificacion\"><a href=\"#2-2-2-Estados-de-modificacion\" class=\"headerlink\" title=\"2.2.2 Estados de modificación\"></a>2.2.2 Estados de modificación</h3><p>Los controles, y el formulario, se someten a otra máquina de estados que monitoriza el valor del control y sus cambios.</p>\n<p>La máquina de estados de cambio contempla entre otros los siguientes:</p>\n<ul>\n<li><strong>PRINSTINE</strong>: el valor del control no ha sido cambiado por el usuario</li>\n<li><strong>DIRTY</strong>: el usuario ha modificado el valor del control.</li>\n<li><strong>TOUCHED</strong>: el usuario ha tocado el control lanzando un evento <code>blur</code> al salir.</li>\n<li><strong>UNTOUCHED</strong>: el usuario no ha tocado y salido del control lanzando ningún evento <code>blur</code>.</li>\n</ul>\n<p>Como en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.</p>\n<p>Veamos su aplicación primero en el caso general del formulario. Uno de los usos más inmediatos es deshabilitar el botón de envío cuando la validación de algún control falla.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;register()&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;formGroup.invalid&quot;</span>&gt;</span>Register me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Por cierto, este sistema de gestión de los controles del formulario oculta la parte más valiosa (el valor que se pretende almacenar) en la propiedad <code>value</code> del formulario. Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">register</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>La validación particular para cada control permite informar al usuario del fallo concreto. Es una <strong>buena práctica de usabilidad</strong> el esperar a que edite un control antes de mostrarle el fallo. Y también es muy habitual usar la misma estrategia para cada control.</p>\n<p>Lo que no queremos es llevar de vuelta la lógica a la vista; así que lo recomendado es crear una <strong>función auxiliar para mostrar los errores</strong> de validación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">getError</span>(<span class=\"attr\">controlName</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> control = <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span>.<span class=\"title function_\">get</span>(controlName);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (control.<span class=\"property\">touched</span> &amp;&amp; control.<span class=\"property\">errors</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    error = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(control.<span class=\"property\">errors</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>En la vista colocaremos adecuadamente los mensajes para facilitarle la corrección al usuario.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError(&#x27;name&#x27;)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError(&#x27;email&#x27;)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError(&#x27;password&#x27;)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Ya tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. Como resumen podemos decir que vamos a programar más en TypeScript que en Html. La ventaja del desacople es que podremos controlar lo que enviamos y recibimos de la vista. Así se pueden aplicar formatos, validaciones y transformaciones entre lo que presentamos y lo que enviamos hacia los servicios.</p>\n<h1 id=\"3-Un-gestor-de-credenciales\"><a href=\"#3-Un-gestor-de-credenciales\" class=\"headerlink\" title=\"3. Un gestor de credenciales\"></a>3. Un gestor de credenciales</h1><p>Vamos a provechar el conocimiento sobre <em>Interceptores</em> y <em>Observables</em> para montar un pequeño sistema de gestión de credenciales. La idea es detectar respuestas a llamadas no autenticadas y redirigir al usuario a nuestra pantalla de registro.</p>\n<p>Si el usuario se registra correctamente recibiremos un <em>token</em> que lo identifica. Lo que haremos será guardarlo y usarlo en el resto de las llamadas.</p>\n<h2 id=\"3-1-Deteccion-y-redireccion-de-intrusos\"><a href=\"#3-1-Deteccion-y-redireccion-de-intrusos\" class=\"headerlink\" title=\"3.1 Detección y redirección de intrusos\"></a>3.1 Detección y redirección de intrusos</h2><p>Empezaré por crea un servicio para el interceptor de fallos de seguridad y un componente que invocará deliberadamente a un API protegida.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s security/auth-interceptor</span><br><span class=\"line\">ng g c security/secret</span><br></pre></td></tr></table></figure>\n\n<p>Al componente <em>secret</em> le asignaremos la ruta <em>security&#x2F;secret</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;security/register&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;register&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">RegisterComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;secret&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">SecretComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirectTo</span>: <span class=\"string\">&#x27;secret&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>En cuanto al interceptor, haremos como ya hemos visto en el tema <a href=\"../vigilancia-y-seguridad-en-Angular/\">7-watch</a>. Lo primero será proveerlo invirtiendo el control que nos cede el <code>HttpClient</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">RegisterComponent</span>, <span class=\"title class_\">SecretComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">CommonModule</span>, <span class=\"title class_\">SecurityRoutingModule</span>, <span class=\"title class_\">ReactiveFormsModule</span>, <span class=\"title class_\">HttpClientModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">HTTP_INTERCEPTORS</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">AuthInterceptorService</span>,</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Luego codificaré la implementación de la interfaz <code>HttpInterceptor</code>. En este caso me interesan las respuestas con <strong>error 401</strong>. Emplearé el <code>Router</code> de Angular para obligar al usuario a visitar la página de registro cuando esto ocurra.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthInterceptorService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpInterceptor</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">intercept</span>(<span class=\"attr\">req</span>: <span class=\"title class_\">HttpRequest</span>&lt;<span class=\"built_in\">any</span>&gt;, <span class=\"attr\">next</span>: <span class=\"title class_\">HttpHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">HttpEvent</span>&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>(req).<span class=\"title function_\">pipe</span>(<span class=\"title function_\">catchError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleError</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">handleError</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> unauthorized_code = <span class=\"number\">401</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HttpErrorResponse</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err.<span class=\"property\">status</span> === unauthorized_code) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">navigate</span>([<span class=\"string\">&#x27;security/register&#x27;</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">throwError</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Almacenamiento-y-uso-del-token\"><a href=\"#3-2-Almacenamiento-y-uso-del-token\" class=\"headerlink\" title=\"3.2 Almacenamiento y uso del token\"></a>3.2 Almacenamiento y uso del token</h2><p>Antes de nada volveremos al tema de los observables y su uso como <strong>intermediarios entre objetos desacoplados</strong>. Para ello crearé un servicio para almacenar y distribuir el <em>token</em> de identificación de usuarios.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s security/token_store</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TokenStoreService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> token = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> token$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> select$ = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">token$</span>.<span class=\"title function_\">asObservable</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">token</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">token</span> = token;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">token$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">token</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>De vuelta en el componente <code>RegisterComponent</code>. Tenemos que enviar las credenciales al API para su aceptación. Si todo va bien, nos devolverán un <em>token</em> que identifica al usuario. Es momento de usar al <code>TokenStore</code> para transmitir la noticia por toda la aplicación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">register</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;https://api-base.herokuapp.com/api/pub/credentials/registration&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">post</span>&lt;<span class=\"built_in\">any</span>&gt;(url, user)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">tokenStore</span>.<span class=\"title function_\">dispatch</span>(res.<span class=\"property\">token</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>Por último volvemos al <code>AuthInterceptorService</code> en el que nos suscribiremos a los cambios acerca del <em>token</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> token = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router, <span class=\"keyword\">private</span> tokenStore: TokenStoreService</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tokenStore</span>.<span class=\"title function_\">select$</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">token</span> =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">token</span> = token));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y lo usaremos en las cabeceras de todas las llamadas.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">intercept</span>(<span class=\"attr\">req</span>: <span class=\"title class_\">HttpRequest</span>&lt;<span class=\"built_in\">any</span>&gt;, <span class=\"attr\">next</span>: <span class=\"title class_\">HttpHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">HttpEvent</span>&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> authHeader = &#123; <span class=\"title class_\">Authorization</span>: <span class=\"string\">&#x27;bearer &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">token</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> authReq = req.<span class=\"title function_\">clone</span>(&#123; <span class=\"attr\">setHeaders</span>: authHeader &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>(authReq)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">catchError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleError</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ya sabes lo básico de Angular; pero puedes usar mucho más conociendo su ecosistema. Sigue esta serie para agregar librerías y usar los esquemas de  <a href=\"../Material-Design-y-CLI-de-Angular/\">Material Design y CLI de Angular</a> mientras aprendes a programar con Angular. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-8_reactive.png\" alt=\"formularios-reactivos-con-Angular\"></p>\n<p>El <strong>doble enlace automático</strong> entre elementos <em>html</em> y propiedades de objetos fue el primer gran éxito de <strong>Angular</strong>. Ese <em>doble-binding</em> facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.</p>\n<p>La solución en Angular 8 pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo <code>ReactiveFormsModule</code> que viene en la librería <code>@angular/forms</code> permiten programar <strong>formularios reactivos conducidos por el código</strong>.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../vigilancia-y-seguridad-en-Angular/\">Vigilancia y seguridad en Angular</a>. Al finalizar tendrás una aplicación con formularios <em>model driven</em> fáciles de mantener y validar.</p>\n<blockquote>\n<p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/8-reactive/security\">AcademiaBinaria&#x2F;angular-basic&#x2F;8-reactive</a></p>\n<blockquote>\n<p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\">Angular Basic</a></p>\n</blockquote>\n</blockquote>\n<h1 id=\"1-Desacople-entre-vista-y-modelo\"><a href=\"#1-Desacople-entre-vista-y-modelo\" class=\"headerlink\" title=\"1 Desacople entre vista y modelo\"></a>1 Desacople entre vista y modelo</h1><p>La directiva <code>[(ngModel)]=&quot;model.property&quot;</code> con su popular <em>banana in a box</em> establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.</p>\n<p>Se pueden establecer validaciones y configurar los eventos que disparan las actualizaciones; pero todo ello usando más y más atributos y directivas en la plantilla. Son los formularios <em>template driven</em> que degeneran en un <em>html</em> farragoso y difícil de mantener.</p>\n<blockquote>\n<p>Vamos a crear un formulario de registro de usuarios usando los formularios <em>model driven</em>. Para ello voy a crear el módulo <em>security</em> con el componente <em>register</em> y los engancharé a la ruta <em>security&#x2F;register</em>.</p>\n</blockquote>\n<p>El módulo de seguridad y su configuración lazy en el raíz:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m security --routing true</span><br><span class=\"line\">ng g c security/register</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;security&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./8-reactive/security/security.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">SecurityModule</span>)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>El componente de registro y su ruta asignada:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;register&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">RegisterComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirectTo</span>: <span class=\"string\">&#x27;register&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;security/register&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-1-Form-Builder\"><a href=\"#1-1-Form-Builder\" class=\"headerlink\" title=\"1.1 Form Builder\"></a>1.1 Form Builder</h2><p>Entra en acción el  <code>FormBuilder</code>, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un <code>FormGroup</code>, (un grupo de controles) que realiza un seguimiento del valor y estado de cambio y validez de los datos.</p>\n<p>Para poder usarlo tenemos que importar el módulo de Angular en el que viene declarado, el <code>ReactiveFormModule</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ReactiveFormsModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">RegisterComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">CommonModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">SecurityRoutingModule</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ReactiveFormsModule</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Veamos un ejemplo mínimo de su declaración en <code>register.component.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegisterComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">formGroup</span>: <span class=\"title class_\">FormGroup</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> formBuilder: FormBuilder </span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildForm</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">buildForm</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">formBuilder</span>.<span class=\"title function_\">group</span>(&#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-Form-control\"><a href=\"#1-2-Form-control\" class=\"headerlink\" title=\"1.2 Form control\"></a>1.2 Form control</h2><p>El formulario se define como un <strong>grupo de controles</strong>. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">buildForm</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dateLength = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toISOString</span>().<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, dateLength);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;JOHN DOE&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">formBuilder</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">registeredOn</span>: today,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: name.<span class=\"title function_\">toLowerCase</span>(),</span><br><span class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">&#x27;john@angular.io&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Como ves, es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario; sin necesidad de cambiar los datos de base.</p>\n<h2 id=\"1-3-Form-view\"><a href=\"#1-3-Form-view\" class=\"headerlink\" title=\"1.3 Form view\"></a>1.3 Form view</h2><p>Mientras tanto en la vista html… Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una <strong>mayor limpieza en la vista</strong>. Lo único necesario será asignar por nombre el elemento html con el control <em>typescript</em> que lo gestionará.</p>\n<blockquote>\n<p>Para ello usaremos dos directivas que vienen dentro del módulo <em>reactivo</em> son <code>[formGroup]=&quot;objetoFormulario&quot;</code> para el formulario en su conjunto, y <code>formControlName=&quot;nombreDelControl&quot;</code> para cada control.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;formGroup&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;registeredOn&quot;</span>&gt;</span>Registered On<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;registeredOn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;registeredOn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;date&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span>E-mail<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;email&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Validacion-y-estados\"><a href=\"#2-Validacion-y-estados\" class=\"headerlink\" title=\"2 Validación y estados\"></a>2 Validación y estados</h1><p>La validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer <strong>frente de defensa ante errores de usuarios</strong>; ya sean involuntarios o deliberados.</p>\n<p>Dichas validaciones se solían realizar agregando atributos html tales como el archiconocido <code>required</code>. Pero todo eso ahora se traslada a la configuración de cada control, donde podrás establecer una o varias reglas de validación sin mancharte con html.</p>\n<h2 id=\"2-1-Validadores-predefinidos-y-personalizados\"><a href=\"#2-1-Validadores-predefinidos-y-personalizados\" class=\"headerlink\" title=\"2.1 Validadores predefinidos y personalizados\"></a>2.1 Validadores predefinidos y personalizados</h2><p>De nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas que vienen predefinidas como funciones en el objeto <code>Validators</code> del <em>framework</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">buildForm</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dateLength = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toISOString</span>().<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, dateLength);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;JOHN DOE&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> minPassLength = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">formBuilder</span>.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">registeredOn</span>: today,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: [name.<span class=\"title function_\">toLowerCase</span>(), <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>],</span><br><span class=\"line\">    <span class=\"attr\">email</span>: [<span class=\"string\">&#x27;john@angular.io&#x27;</span>, [</span><br><span class=\"line\">      <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>, <span class=\"title class_\">Validators</span>.<span class=\"property\">email</span></span><br><span class=\"line\">    ]],</span><br><span class=\"line\">    <span class=\"attr\">password</span>: [<span class=\"string\">&#x27;&#x27;</span>, [</span><br><span class=\"line\">      <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>, <span class=\"title class_\">Validators</span>.<span class=\"title function_\">minLength</span>(minPassLength)</span><br><span class=\"line\">    ]]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.</p>\n<p>Por ejemplo podemos agregar una validación específica a las contraseñas</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">password</span>: [<span class=\"string\">&#x27;&#x27;</span>, [</span><br><span class=\"line\">  <span class=\"title class_\">Validators</span>.<span class=\"property\">required</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Validators</span>.<span class=\"title function_\">minLength</span>(minPassLength),</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">validatePassword</span></span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>Lo único que se necesita es una función que recibe como argumento el control a validar. El resultado debe ser un <code>null</code> si todo va bien. Y cualquier otra cosa en caso de fallo. Te muestro una propuesta para que puedas crear tus propios validadores.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">validatePassword</span>(<span class=\"params\">control: AbstractControl</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> password = control.<span class=\"property\">value</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!password.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;$&#x27;</span>)) &#123;</span><br><span class=\"line\">    error = &#123; ...error, <span class=\"attr\">dollar</span>: <span class=\"string\">&#x27;needs a dollar symbol&#x27;</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">parseFloat</span>(password[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">    error = &#123; ...error, <span class=\"attr\">number</span>: <span class=\"string\">&#x27;must start with a number&#x27;</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Estados-de-cambio-y-validacion\"><a href=\"#2-2-Estados-de-cambio-y-validacion\" class=\"headerlink\" title=\"2.2 Estados de cambio y validación\"></a>2.2 Estados de cambio y validación</h2><p>Una vez establecidas las reglas, es hora de aplicarlas y avisar al usuario en caso de que se incumplan. Los formularios y controles reactivos están gestionados por <strong>máquinas de estados</strong> que determinan en todo momento la situación de cada control y del formulario en si mismo.</p>\n<h3 id=\"2-2-1-Estados-de-validacion\"><a href=\"#2-2-1-Estados-de-validacion\" class=\"headerlink\" title=\"2.2.1 Estados de validación\"></a>2.2.1 Estados de validación</h3><p>Al establecer una o más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.</p>\n<p>La máquina de estados de validación contempla los siguientes estados mutuamente excluyentes:</p>\n<ul>\n<li><strong>VALID</strong>: el control ha pasado todos los chequeos</li>\n<li><strong>INVALID</strong>: el control ha fallado al menos en una regla.</li>\n<li><strong>PENDING</strong>: el control está en medio de un proceso de validación</li>\n<li><strong>DISABLED</strong>: el control está desactivado y exento de validación</li>\n</ul>\n<p>Cuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad <code>errors</code> que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.</p>\n<h3 id=\"2-2-2-Estados-de-modificacion\"><a href=\"#2-2-2-Estados-de-modificacion\" class=\"headerlink\" title=\"2.2.2 Estados de modificación\"></a>2.2.2 Estados de modificación</h3><p>Los controles, y el formulario, se someten a otra máquina de estados que monitoriza el valor del control y sus cambios.</p>\n<p>La máquina de estados de cambio contempla entre otros los siguientes:</p>\n<ul>\n<li><strong>PRINSTINE</strong>: el valor del control no ha sido cambiado por el usuario</li>\n<li><strong>DIRTY</strong>: el usuario ha modificado el valor del control.</li>\n<li><strong>TOUCHED</strong>: el usuario ha tocado el control lanzando un evento <code>blur</code> al salir.</li>\n<li><strong>UNTOUCHED</strong>: el usuario no ha tocado y salido del control lanzando ningún evento <code>blur</code>.</li>\n</ul>\n<p>Como en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.</p>\n<p>Veamos su aplicación primero en el caso general del formulario. Uno de los usos más inmediatos es deshabilitar el botón de envío cuando la validación de algún control falla.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;register()&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;formGroup.invalid&quot;</span>&gt;</span>Register me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Por cierto, este sistema de gestión de los controles del formulario oculta la parte más valiosa (el valor que se pretende almacenar) en la propiedad <code>value</code> del formulario. Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">register</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>La validación particular para cada control permite informar al usuario del fallo concreto. Es una <strong>buena práctica de usabilidad</strong> el esperar a que edite un control antes de mostrarle el fallo. Y también es muy habitual usar la misma estrategia para cada control.</p>\n<p>Lo que no queremos es llevar de vuelta la lógica a la vista; así que lo recomendado es crear una <strong>función auxiliar para mostrar los errores</strong> de validación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">getError</span>(<span class=\"attr\">controlName</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> control = <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span>.<span class=\"title function_\">get</span>(controlName);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (control.<span class=\"property\">touched</span> &amp;&amp; control.<span class=\"property\">errors</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    error = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(control.<span class=\"property\">errors</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>En la vista colocaremos adecuadamente los mensajes para facilitarle la corrección al usuario.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError(&#x27;name&#x27;)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError(&#x27;email&#x27;)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError(&#x27;password&#x27;)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Ya tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. Como resumen podemos decir que vamos a programar más en TypeScript que en Html. La ventaja del desacople es que podremos controlar lo que enviamos y recibimos de la vista. Así se pueden aplicar formatos, validaciones y transformaciones entre lo que presentamos y lo que enviamos hacia los servicios.</p>\n<h1 id=\"3-Un-gestor-de-credenciales\"><a href=\"#3-Un-gestor-de-credenciales\" class=\"headerlink\" title=\"3. Un gestor de credenciales\"></a>3. Un gestor de credenciales</h1><p>Vamos a provechar el conocimiento sobre <em>Interceptores</em> y <em>Observables</em> para montar un pequeño sistema de gestión de credenciales. La idea es detectar respuestas a llamadas no autenticadas y redirigir al usuario a nuestra pantalla de registro.</p>\n<p>Si el usuario se registra correctamente recibiremos un <em>token</em> que lo identifica. Lo que haremos será guardarlo y usarlo en el resto de las llamadas.</p>\n<h2 id=\"3-1-Deteccion-y-redireccion-de-intrusos\"><a href=\"#3-1-Deteccion-y-redireccion-de-intrusos\" class=\"headerlink\" title=\"3.1 Detección y redirección de intrusos\"></a>3.1 Detección y redirección de intrusos</h2><p>Empezaré por crea un servicio para el interceptor de fallos de seguridad y un componente que invocará deliberadamente a un API protegida.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s security/auth-interceptor</span><br><span class=\"line\">ng g c security/secret</span><br></pre></td></tr></table></figure>\n\n<p>Al componente <em>secret</em> le asignaremos la ruta <em>security&#x2F;secret</em></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;security/register&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;register&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">RegisterComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;secret&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">SecretComponent</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirectTo</span>: <span class=\"string\">&#x27;secret&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>En cuanto al interceptor, haremos como ya hemos visto en el tema <a href=\"../vigilancia-y-seguridad-en-Angular/\">7-watch</a>. Lo primero será proveerlo invirtiendo el control que nos cede el <code>HttpClient</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">RegisterComponent</span>, <span class=\"title class_\">SecretComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">CommonModule</span>, <span class=\"title class_\">SecurityRoutingModule</span>, <span class=\"title class_\">ReactiveFormsModule</span>, <span class=\"title class_\">HttpClientModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">HTTP_INTERCEPTORS</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">AuthInterceptorService</span>,</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Luego codificaré la implementación de la interfaz <code>HttpInterceptor</code>. En este caso me interesan las respuestas con <strong>error 401</strong>. Emplearé el <code>Router</code> de Angular para obligar al usuario a visitar la página de registro cuando esto ocurra.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthInterceptorService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpInterceptor</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">intercept</span>(<span class=\"attr\">req</span>: <span class=\"title class_\">HttpRequest</span>&lt;<span class=\"built_in\">any</span>&gt;, <span class=\"attr\">next</span>: <span class=\"title class_\">HttpHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">HttpEvent</span>&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>(req).<span class=\"title function_\">pipe</span>(<span class=\"title function_\">catchError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleError</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">handleError</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> unauthorized_code = <span class=\"number\">401</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HttpErrorResponse</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err.<span class=\"property\">status</span> === unauthorized_code) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">navigate</span>([<span class=\"string\">&#x27;security/register&#x27;</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">throwError</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Almacenamiento-y-uso-del-token\"><a href=\"#3-2-Almacenamiento-y-uso-del-token\" class=\"headerlink\" title=\"3.2 Almacenamiento y uso del token\"></a>3.2 Almacenamiento y uso del token</h2><p>Antes de nada volveremos al tema de los observables y su uso como <strong>intermediarios entre objetos desacoplados</strong>. Para ello crearé un servicio para almacenar y distribuir el <em>token</em> de identificación de usuarios.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s security/token_store</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TokenStoreService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> token = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> token$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> select$ = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">token$</span>.<span class=\"title function_\">asObservable</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">token</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">token</span> = token;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">token$</span>.<span class=\"title function_\">next</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">token</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>De vuelta en el componente <code>RegisterComponent</code>. Tenemos que enviar las credenciales al API para su aceptación. Si todo va bien, nos devolverán un <em>token</em> que identifica al usuario. Es momento de usar al <code>TokenStore</code> para transmitir la noticia por toda la aplicación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">register</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">&#x27;https://api-base.herokuapp.com/api/pub/credentials/registration&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"variable language_\">this</span>.<span class=\"property\">formGroup</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">post</span>&lt;<span class=\"built_in\">any</span>&gt;(url, user)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">tokenStore</span>.<span class=\"title function_\">dispatch</span>(res.<span class=\"property\">token</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>Por último volvemos al <code>AuthInterceptorService</code> en el que nos suscribiremos a los cambios acerca del <em>token</em>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> token = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router, <span class=\"keyword\">private</span> tokenStore: TokenStoreService</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tokenStore</span>.<span class=\"title function_\">select$</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">token</span> =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">token</span> = token));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y lo usaremos en las cabeceras de todas las llamadas.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">intercept</span>(<span class=\"attr\">req</span>: <span class=\"title class_\">HttpRequest</span>&lt;<span class=\"built_in\">any</span>&gt;, <span class=\"attr\">next</span>: <span class=\"title class_\">HttpHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">HttpEvent</span>&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> authHeader = &#123; <span class=\"title class_\">Authorization</span>: <span class=\"string\">&#x27;bearer &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">token</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> authReq = req.<span class=\"title function_\">clone</span>(&#123; <span class=\"attr\">setHeaders</span>: authHeader &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>(authReq)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">catchError</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleError</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ya sabes lo básico de Angular; pero puedes usar mucho más conociendo su ecosistema. Sigue esta serie para agregar librerías y usar los esquemas de  <a href=\"../Material-Design-y-CLI-de-Angular/\">Material Design y CLI de Angular</a> mientras aprendes a programar con Angular. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Hola Angular CLI","date":"2020-03-04T17:54:00.000Z","thumbnail":"/css/images/angular-0_cli.png","_content":"\n![hola-angular-cli](/images/tutorial-angular-0_cli.png)\n\n**Angular en su versión 9 es la plataforma perfecta para el desarrollo** profesional de aplicaciones modernas. **El Angular CLI es la herramienta** adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.\n\n<!-- more -->\n\nEl comúnmente conocido como **AngularCLI** o _angular cli_ o _angular-cli_ o _CLI a secas_ es la herramienta de línea de comandos estándar para **crear, depurar y publicar aplicaciones Angular**. En su actual **versión 9** es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Instalación de Angular CLI 9\n\nAngular es una plataforma de desarrollo dogmática y llave en mano. Para empezar, como en casi cualquier desarrollo **necesitarás [NodeJS](https://nodejs.org/en/) y su manejador de de paquetes _npm_**. Tenerlos actualizados es un mandamiento básico para un desarrollador web. Comprueba tu versión con el siguiente comando:\n\n```console\nnode -v\n```\n\nEmpieza con una **instalación global** que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.\n\nInstrucciones para instalar Angular CLI.\n\n```console\n$ npm i -g @angular/cli@latest\n$ ng version\n$ ng help\n$ ng new --help\n```\n\n# 2. Crear y ejecutar una aplicación Angular 9\n\nUna vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será `ng new` que te va a **generar toda una aplicación funcional** y las configuraciones necesarias para su depuración, pruebas y ejecución.\n\nComo novedad, en las últimas versiones, el CLI te preguntará por algunas opciones para crear tu aplicación. Eso es porque no todos los desarrollos son iguales. Se puede configurar el tipo, el estilo y muchas más cosas, tanto de forma interactiva como mediante opciones en línea de comandos.\n\nLo más habitual es usar la configuración que viene por defecto, pero también se pueden crear soluciones a medida. Te muestro unos ejemplos para que pruebes y te familiarices con la herramienta. Para más información mira la documentación del comando [ng new](https://angular.io/cli/new).\n\n## 2.1 Básica\n\n```console\nng new unaAppMuyCorriente\ncd unaAppMuyCorriente\nnpm start\n```\n\n## 2.2 Minimalista\n\n```console\nng new minimalista -s -S -t\ncd minimalista\nnpm start\n```\n\n## 2.3 Profesional\n\n```console\nng new profesional -p acme --routing true\ncd profesional\nnpm start\n```\n\n## 2.4 Empresarial\n\n```console\nng new empresarial --create-application false\ncd empresarial\nng generate application compras -p acme --routing true\nnpm start\n```\n\nUna vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de _npm_ para el arranque de cualquier aplicación: `npm start`. Si todo va bien, en unos segundo podrás visitar [http://localhost:4000](http://localhost:4000) para ver en marcha la aplicación. Lo veremos con más detalle en el apartado de configuración.\n\n> ejemplo: La aplicación que sirve de ejemplo a este tutorial fue creada con este comando:\n\n```console\nng new angular-basic -p ab --style css --routing\n```\n\n# 3. Estructura de una aplicación Angular\n\nUna vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay **una enorme cantidad de ficheros y carpetas**, las buenas son que como verás, casi todo es **configuración e infraestructura**.\n\n## 3.1 Visual Studio Code\n\nPara ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo [VSCode](https://code.visualstudio.com/). Es un **gran editor, gratuito y multiplataforma**. Viene con un terminal integrado y puedes mejorarlo instalando extensiones desde una galería del propio editor.\n\nTe recomiendo instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con _Angular_, se llama [Angular Essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials). Con eso y el [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) verás _Angular en colores_.\n\n## 3.2 Carpetas y Ficheros principales\n\nVolviendo a la **estructura de ficheros y carpetas** te encontrarás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones `.ts`. Son para ficheros [_TypeScript_](https://www.typescriptlang.org/), una evolución del _JavaScript_ con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:\n\n- **angular.json** _: configuración del propio CLI. La madre de todos los configuradores_\n- **package.json** _: dependencias de librerías y scripts_\n- **src/** _: la carpeta donde están los archivos fuentes_\n  - **index.html** _: un fichero HTML índice estándar_\n  - **main.ts** _: fichero TypeScript de arranque de la aplicación_\n  - **app/** _: la carpeta con el código específico de tu aplicación_\n    - **app.module.ts** _: la aplicación es un árbol de módulos, y este es su raíz_\n    - **app.component.ts** _: la página es un árbol de componentes, y este es su raíz_\n    - **app.component.html** _: tiene una parte visual, esta es su vista_\n\nEcha un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.\n\n# 4. Edición\n\nAngular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de **recargar la aplicación en caliente** en cuanto guardas tu trabajo como programador. En esta última versión, la 9, se ha mejorado el proceso y es realmente rápido.\n\nPara probarlo sólo tienes que dejar arrancada la aplicación con el comando `npm start`; **cambiar un fichero de código y comprobar el resultado** en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso _hola mundo_.\n\n## 4.1 Hola Mundo\n\nAbre el fichero `app.component.ts` y busca dentro de él una clase llamada `AppComponent`. Encontrarás que tiene una propiedad `title`. Asígnale el saludo de rigor: `title = 'angular - basic: hello world ;-)';`. Guarda y comprueba cómo tu navegador **se habrá actualizado automáticamente**.\n\nToda **esta magia depende de una cadena de comandos** que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a [_WebPack_](https://webpack.github.io/), un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.\n\n## 4.2 npm start\n\nEsta es una lista no exhaustiva de lo que sucede.\n\n1. npm start\n2. ng serve\n3. webpack server en http://localhost:4200\n   1. vigilancia de cambios sobre la carpeta src/\n   2. live reload\n   3. compilado de la aplicación\n   4. recarga del navegador\n\nCambia a tu antojo el `app.component.ts` o su hermano `app.component.html` y comprueba los cambios de manera inmediata en tu navegador.\n\n# 5. Configuración\n\nEl CLI 9 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el `package.json` y agregar librerías de terceros.\n\n## 5.1 Package.json\n\nEl `package.json` es el fichero estándar de _npm_ donde se almacenan las **dependencias de terceros**. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de _Angular 9_. Y también las herramientas que necesita el programador, por ejemplo el propio _AngularCLI_;\n\n```json\n{\n  \"dependencies\": {\n    \"@angular/core\": \"~9.1.1\"\n  },\n  \"devDependencies\": {\n    \"@angular/cli\": \"~9.1.1\"\n  }\n}\n```\n\nOtro uso del `package.json` es servir de **contenedor de scripts** para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar `npm start` ejecutará el contenido asignado en el fichero _json_, originalmente `ng serve`. Esto lanza el servidor de pruebas con sus opciones por defecto.\n\nPero el **comando [ng serve](https://angular.io/cli/serve)** admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.\n\nOtras configuraciones en producción\n\n```json\n{\n  \"start\": \"ng serve -o --port 4290\"\n}\n```\n\n## 5.2 Estilos y librerías de terceros\n\nLas librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos **algún que otro producto de terceros**. Ya sean utilidades como _[date-fns](https://date-fns.org/)_, librerías gráficas como _[chart.js](http://www.chartjs.org/)_ o la aplicación de estilos y componentes visuales de _frameworks como Bootstrap o MaterialDesign_. Pero todos se instalan de igual forma. Descargándolos con _npm_ y adjuntándolos en el `angular.json`.\n\nEstas colecciones de archivos los usa el _cli_ a través de _webpack_ para incluirlos **minificados y concatenados en un fichero _bundle_ sustituyendo a las clásicas etiquetas html**.Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. De esta forma el fichero `index.html` apenas tendrás que tocarlo, salvo para algunas etiquetas de meta información.\n\n```html\n<meta name=\"description\" content=\"A sample project for learning Angular ;-)\" />\n<meta name=\"keywords\" content=\"Angular Sample Tutorial Ejemplo\" />\n<meta name=\"author\" content=\"Alberto Basalo\" />\n```\n\n## 5.3 Environments\n\nLa carpeta `environments/` contiene dos ficheros, y puede contener más, para cada entorno de distribución necesario. En código siempre importaremos el fichero base, pero durante la compilación el CLI lo sustituirá por el adecuado.\n\n```typescript\ntitle = environment.appName + 'hello world ;-)';\n```\n\n## 5.4 Assets\n\nLos ficheros de la carpeta `assets/` se copian tal cual al despliegue. Es un buen lugar para logos, imágenes y ficheros de datos estáticos.\n\nPor ejemplo, en el `app.component.html` he sustituido la imagen incrustada del Angular con un logo propio.\n\n```html\n<img width=\"100\" src=\"./assets/logo.png\" />\n```\n\n# 6. Angular 9, el CLI 9 y su ecosistema\n\nAlgunos consejos y herramientas útiles que rodean al mundo Angular.\n\nPero si la línea de comandos te suena muy antigua y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto [Angular Console](https://angularconsole.com/) te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.\n\nUna mejora digna de mención es la capacidad de presupuestar tamaños de los ficheros generados. De esa forma podemos controlar el peso y tiempo de descarga de la aplicación.\n\nPara garantizar la limpieza del código conviene usar herramientas como [Prettier](https://prettier.io/) y configurarlas para su compatibilidad con Angular.\n\nLos últimos toques antes de publicar pueden incluir el _script de analytics_ en el `index.html` y ajustes de retro-compatibilidad en el fichero `polyfills.ts`.\n\nLuego un comando y listo para publicar en _github pages_. `ng add angular-cli-ghpages`.\n\n> Te recomiendo que te familiarices y uses mucho estos _scripts_ en el `package.json` para poder lanzarlos más tarde.\n\n```json\n{\n   \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve -o --port 4290\",\n    \"start:prod\": \"npm run build:prod && npm run http-server\",\n    \"build\": \"ng build\",\n    \"build:prod\": \"ng build --prod\",\n    \"deploy\": \"ng deploy --baseHref=/angular-basic/\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n}\n```\n\nComprueba las ejecuciones de los distintos _scripts_. Con `npm start` no se generan ficheros físicos. Todos es en memoria para mayor velocidad de re-compilación mientras desarrollas. En cambio `npm run build:prod` creará una carpeta `./dist/angular-basic` en la que dejará los archivos necesarios para ejecución. Por último `npm run deploy` los prepara para enviar compilados a un rama estándar de publicación listos para desplegarse en las [_github pages_](https://pages.github.com/).\n\nOtros enlaces de interés sobre el ecosistema Angular.\n\n- [Extensiones Esenciales](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials)\n- [Prettier](https://prettier.io/)\n- [TsLint-Prettier](https://github.com/prettier/tslint-config-prettier)\n- [Angular Console](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console)\n- [Angular Material](https://material.angular.io/)\n- [Bootstrap](https://ng-bootstrap.github.io/#/home)\n- [Augury](https://augury.rangle.io/)\n- [Apollo GraphQL](https://www.apollographql.com/docs/)\n- [Ionic](https://ionicframework.com/)\n- [Angular Console](https://angularconsole.com/)\n\nPara complementar tu conocimiento te recomiendo la [documentación de Angular/CLI](https://angular.io/cli) y este artículo avanzado que trata la configuración del CLI en profundidad [Angular CLI under the hood ](https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01)\n\nEsto es sólo el principio, _Angular CLI 9_ puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 9. En el próximo artículo crearemos una [Base para una aplicación Angular](../base-aplicacion-angular/). Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng_0-Hola-Angular-CLI.md","raw":"---\ntitle: Hola Angular CLI\npermalink: hola-angular-cli\ndate: 2020-03-04 18:54:00\ntags:\n  - Angular\n  - CLI\n  - Tutorial\n  - Introducción\n  - Angular9\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-0_cli.png\n---\n\n![hola-angular-cli](/images/tutorial-angular-0_cli.png)\n\n**Angular en su versión 9 es la plataforma perfecta para el desarrollo** profesional de aplicaciones modernas. **El Angular CLI es la herramienta** adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.\n\n<!-- more -->\n\nEl comúnmente conocido como **AngularCLI** o _angular cli_ o _angular-cli_ o _CLI a secas_ es la herramienta de línea de comandos estándar para **crear, depurar y publicar aplicaciones Angular**. En su actual **versión 9** es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Instalación de Angular CLI 9\n\nAngular es una plataforma de desarrollo dogmática y llave en mano. Para empezar, como en casi cualquier desarrollo **necesitarás [NodeJS](https://nodejs.org/en/) y su manejador de de paquetes _npm_**. Tenerlos actualizados es un mandamiento básico para un desarrollador web. Comprueba tu versión con el siguiente comando:\n\n```console\nnode -v\n```\n\nEmpieza con una **instalación global** que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.\n\nInstrucciones para instalar Angular CLI.\n\n```console\n$ npm i -g @angular/cli@latest\n$ ng version\n$ ng help\n$ ng new --help\n```\n\n# 2. Crear y ejecutar una aplicación Angular 9\n\nUna vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será `ng new` que te va a **generar toda una aplicación funcional** y las configuraciones necesarias para su depuración, pruebas y ejecución.\n\nComo novedad, en las últimas versiones, el CLI te preguntará por algunas opciones para crear tu aplicación. Eso es porque no todos los desarrollos son iguales. Se puede configurar el tipo, el estilo y muchas más cosas, tanto de forma interactiva como mediante opciones en línea de comandos.\n\nLo más habitual es usar la configuración que viene por defecto, pero también se pueden crear soluciones a medida. Te muestro unos ejemplos para que pruebes y te familiarices con la herramienta. Para más información mira la documentación del comando [ng new](https://angular.io/cli/new).\n\n## 2.1 Básica\n\n```console\nng new unaAppMuyCorriente\ncd unaAppMuyCorriente\nnpm start\n```\n\n## 2.2 Minimalista\n\n```console\nng new minimalista -s -S -t\ncd minimalista\nnpm start\n```\n\n## 2.3 Profesional\n\n```console\nng new profesional -p acme --routing true\ncd profesional\nnpm start\n```\n\n## 2.4 Empresarial\n\n```console\nng new empresarial --create-application false\ncd empresarial\nng generate application compras -p acme --routing true\nnpm start\n```\n\nUna vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de _npm_ para el arranque de cualquier aplicación: `npm start`. Si todo va bien, en unos segundo podrás visitar [http://localhost:4000](http://localhost:4000) para ver en marcha la aplicación. Lo veremos con más detalle en el apartado de configuración.\n\n> ejemplo: La aplicación que sirve de ejemplo a este tutorial fue creada con este comando:\n\n```console\nng new angular-basic -p ab --style css --routing\n```\n\n# 3. Estructura de una aplicación Angular\n\nUna vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay **una enorme cantidad de ficheros y carpetas**, las buenas son que como verás, casi todo es **configuración e infraestructura**.\n\n## 3.1 Visual Studio Code\n\nPara ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo [VSCode](https://code.visualstudio.com/). Es un **gran editor, gratuito y multiplataforma**. Viene con un terminal integrado y puedes mejorarlo instalando extensiones desde una galería del propio editor.\n\nTe recomiendo instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con _Angular_, se llama [Angular Essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials). Con eso y el [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) verás _Angular en colores_.\n\n## 3.2 Carpetas y Ficheros principales\n\nVolviendo a la **estructura de ficheros y carpetas** te encontrarás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones `.ts`. Son para ficheros [_TypeScript_](https://www.typescriptlang.org/), una evolución del _JavaScript_ con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:\n\n- **angular.json** _: configuración del propio CLI. La madre de todos los configuradores_\n- **package.json** _: dependencias de librerías y scripts_\n- **src/** _: la carpeta donde están los archivos fuentes_\n  - **index.html** _: un fichero HTML índice estándar_\n  - **main.ts** _: fichero TypeScript de arranque de la aplicación_\n  - **app/** _: la carpeta con el código específico de tu aplicación_\n    - **app.module.ts** _: la aplicación es un árbol de módulos, y este es su raíz_\n    - **app.component.ts** _: la página es un árbol de componentes, y este es su raíz_\n    - **app.component.html** _: tiene una parte visual, esta es su vista_\n\nEcha un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.\n\n# 4. Edición\n\nAngular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de **recargar la aplicación en caliente** en cuanto guardas tu trabajo como programador. En esta última versión, la 9, se ha mejorado el proceso y es realmente rápido.\n\nPara probarlo sólo tienes que dejar arrancada la aplicación con el comando `npm start`; **cambiar un fichero de código y comprobar el resultado** en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso _hola mundo_.\n\n## 4.1 Hola Mundo\n\nAbre el fichero `app.component.ts` y busca dentro de él una clase llamada `AppComponent`. Encontrarás que tiene una propiedad `title`. Asígnale el saludo de rigor: `title = 'angular - basic: hello world ;-)';`. Guarda y comprueba cómo tu navegador **se habrá actualizado automáticamente**.\n\nToda **esta magia depende de una cadena de comandos** que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a [_WebPack_](https://webpack.github.io/), un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.\n\n## 4.2 npm start\n\nEsta es una lista no exhaustiva de lo que sucede.\n\n1. npm start\n2. ng serve\n3. webpack server en http://localhost:4200\n   1. vigilancia de cambios sobre la carpeta src/\n   2. live reload\n   3. compilado de la aplicación\n   4. recarga del navegador\n\nCambia a tu antojo el `app.component.ts` o su hermano `app.component.html` y comprueba los cambios de manera inmediata en tu navegador.\n\n# 5. Configuración\n\nEl CLI 9 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el `package.json` y agregar librerías de terceros.\n\n## 5.1 Package.json\n\nEl `package.json` es el fichero estándar de _npm_ donde se almacenan las **dependencias de terceros**. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de _Angular 9_. Y también las herramientas que necesita el programador, por ejemplo el propio _AngularCLI_;\n\n```json\n{\n  \"dependencies\": {\n    \"@angular/core\": \"~9.1.1\"\n  },\n  \"devDependencies\": {\n    \"@angular/cli\": \"~9.1.1\"\n  }\n}\n```\n\nOtro uso del `package.json` es servir de **contenedor de scripts** para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar `npm start` ejecutará el contenido asignado en el fichero _json_, originalmente `ng serve`. Esto lanza el servidor de pruebas con sus opciones por defecto.\n\nPero el **comando [ng serve](https://angular.io/cli/serve)** admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.\n\nOtras configuraciones en producción\n\n```json\n{\n  \"start\": \"ng serve -o --port 4290\"\n}\n```\n\n## 5.2 Estilos y librerías de terceros\n\nLas librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos **algún que otro producto de terceros**. Ya sean utilidades como _[date-fns](https://date-fns.org/)_, librerías gráficas como _[chart.js](http://www.chartjs.org/)_ o la aplicación de estilos y componentes visuales de _frameworks como Bootstrap o MaterialDesign_. Pero todos se instalan de igual forma. Descargándolos con _npm_ y adjuntándolos en el `angular.json`.\n\nEstas colecciones de archivos los usa el _cli_ a través de _webpack_ para incluirlos **minificados y concatenados en un fichero _bundle_ sustituyendo a las clásicas etiquetas html**.Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. De esta forma el fichero `index.html` apenas tendrás que tocarlo, salvo para algunas etiquetas de meta información.\n\n```html\n<meta name=\"description\" content=\"A sample project for learning Angular ;-)\" />\n<meta name=\"keywords\" content=\"Angular Sample Tutorial Ejemplo\" />\n<meta name=\"author\" content=\"Alberto Basalo\" />\n```\n\n## 5.3 Environments\n\nLa carpeta `environments/` contiene dos ficheros, y puede contener más, para cada entorno de distribución necesario. En código siempre importaremos el fichero base, pero durante la compilación el CLI lo sustituirá por el adecuado.\n\n```typescript\ntitle = environment.appName + 'hello world ;-)';\n```\n\n## 5.4 Assets\n\nLos ficheros de la carpeta `assets/` se copian tal cual al despliegue. Es un buen lugar para logos, imágenes y ficheros de datos estáticos.\n\nPor ejemplo, en el `app.component.html` he sustituido la imagen incrustada del Angular con un logo propio.\n\n```html\n<img width=\"100\" src=\"./assets/logo.png\" />\n```\n\n# 6. Angular 9, el CLI 9 y su ecosistema\n\nAlgunos consejos y herramientas útiles que rodean al mundo Angular.\n\nPero si la línea de comandos te suena muy antigua y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto [Angular Console](https://angularconsole.com/) te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.\n\nUna mejora digna de mención es la capacidad de presupuestar tamaños de los ficheros generados. De esa forma podemos controlar el peso y tiempo de descarga de la aplicación.\n\nPara garantizar la limpieza del código conviene usar herramientas como [Prettier](https://prettier.io/) y configurarlas para su compatibilidad con Angular.\n\nLos últimos toques antes de publicar pueden incluir el _script de analytics_ en el `index.html` y ajustes de retro-compatibilidad en el fichero `polyfills.ts`.\n\nLuego un comando y listo para publicar en _github pages_. `ng add angular-cli-ghpages`.\n\n> Te recomiendo que te familiarices y uses mucho estos _scripts_ en el `package.json` para poder lanzarlos más tarde.\n\n```json\n{\n   \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve -o --port 4290\",\n    \"start:prod\": \"npm run build:prod && npm run http-server\",\n    \"build\": \"ng build\",\n    \"build:prod\": \"ng build --prod\",\n    \"deploy\": \"ng deploy --baseHref=/angular-basic/\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n}\n```\n\nComprueba las ejecuciones de los distintos _scripts_. Con `npm start` no se generan ficheros físicos. Todos es en memoria para mayor velocidad de re-compilación mientras desarrollas. En cambio `npm run build:prod` creará una carpeta `./dist/angular-basic` en la que dejará los archivos necesarios para ejecución. Por último `npm run deploy` los prepara para enviar compilados a un rama estándar de publicación listos para desplegarse en las [_github pages_](https://pages.github.com/).\n\nOtros enlaces de interés sobre el ecosistema Angular.\n\n- [Extensiones Esenciales](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials)\n- [Prettier](https://prettier.io/)\n- [TsLint-Prettier](https://github.com/prettier/tslint-config-prettier)\n- [Angular Console](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console)\n- [Angular Material](https://material.angular.io/)\n- [Bootstrap](https://ng-bootstrap.github.io/#/home)\n- [Augury](https://augury.rangle.io/)\n- [Apollo GraphQL](https://www.apollographql.com/docs/)\n- [Ionic](https://ionicframework.com/)\n- [Angular Console](https://angularconsole.com/)\n\nPara complementar tu conocimiento te recomiendo la [documentación de Angular/CLI](https://angular.io/cli) y este artículo avanzado que trata la configuración del CLI en profundidad [Angular CLI under the hood ](https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01)\n\nEsto es sólo el principio, _Angular CLI 9_ puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 9. En el próximo artículo crearemos una [Base para una aplicación Angular](../base-aplicacion-angular/). Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng_0-Hola-Angular-CLI","published":1,"updated":"2023-07-02T10:25:58.480Z","__permalink":"hola-angular-cli","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fj001ne0960ds609na","content":"<p><img src=\"/images/tutorial-angular-0_cli.png\" alt=\"hola-angular-cli\"></p>\n<p><strong>Angular en su versión 9 es la plataforma perfecta para el desarrollo</strong> profesional de aplicaciones modernas. <strong>El Angular CLI es la herramienta</strong> adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.</p>\n<span id=\"more\"></span>\n\n<p>El comúnmente conocido como <strong>AngularCLI</strong> o <em>angular cli</em> o <em>angular-cli</em> o <em>CLI a secas</em> es la herramienta de línea de comandos estándar para <strong>crear, depurar y publicar aplicaciones Angular</strong>. En su actual <strong>versión 9</strong> es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Instalacion-de-Angular-CLI-9\"><a href=\"#1-Instalacion-de-Angular-CLI-9\" class=\"headerlink\" title=\"1. Instalación de Angular CLI 9\"></a>1. Instalación de Angular CLI 9</h1><p>Angular es una plataforma de desarrollo dogmática y llave en mano. Para empezar, como en casi cualquier desarrollo <strong>necesitarás <a href=\"https://nodejs.org/en/\">NodeJS</a> y su manejador de de paquetes <em>npm</em></strong>. Tenerlos actualizados es un mandamiento básico para un desarrollador web. Comprueba tu versión con el siguiente comando:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<p>Empieza con una <strong>instalación global</strong> que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.</p>\n<p>Instrucciones para instalar Angular CLI.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm i -g @angular/cli@latest</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ng version</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ng <span class=\"built_in\">help</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ng new --<span class=\"built_in\">help</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Crear-y-ejecutar-una-aplicacion-Angular-9\"><a href=\"#2-Crear-y-ejecutar-una-aplicacion-Angular-9\" class=\"headerlink\" title=\"2. Crear y ejecutar una aplicación Angular 9\"></a>2. Crear y ejecutar una aplicación Angular 9</h1><p>Una vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será <code>ng new</code> que te va a <strong>generar toda una aplicación funcional</strong> y las configuraciones necesarias para su depuración, pruebas y ejecución.</p>\n<p>Como novedad, en las últimas versiones, el CLI te preguntará por algunas opciones para crear tu aplicación. Eso es porque no todos los desarrollos son iguales. Se puede configurar el tipo, el estilo y muchas más cosas, tanto de forma interactiva como mediante opciones en línea de comandos.</p>\n<p>Lo más habitual es usar la configuración que viene por defecto, pero también se pueden crear soluciones a medida. Te muestro unos ejemplos para que pruebes y te familiarices con la herramienta. Para más información mira la documentación del comando <a href=\"https://angular.io/cli/new\">ng new</a>.</p>\n<h2 id=\"2-1-Basica\"><a href=\"#2-1-Basica\" class=\"headerlink\" title=\"2.1 Básica\"></a>2.1 Básica</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new unaAppMuyCorriente</span><br><span class=\"line\">cd unaAppMuyCorriente</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Minimalista\"><a href=\"#2-2-Minimalista\" class=\"headerlink\" title=\"2.2 Minimalista\"></a>2.2 Minimalista</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new minimalista -s -S -t</span><br><span class=\"line\">cd minimalista</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-Profesional\"><a href=\"#2-3-Profesional\" class=\"headerlink\" title=\"2.3 Profesional\"></a>2.3 Profesional</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new profesional -p acme --routing true</span><br><span class=\"line\">cd profesional</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-Empresarial\"><a href=\"#2-4-Empresarial\" class=\"headerlink\" title=\"2.4 Empresarial\"></a>2.4 Empresarial</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new empresarial --create-application false</span><br><span class=\"line\">cd empresarial</span><br><span class=\"line\">ng generate application compras -p acme --routing true</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<p>Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de <em>npm</em> para el arranque de cualquier aplicación: <code>npm start</code>. Si todo va bien, en unos segundo podrás visitar <a href=\"http://localhost:4000/\">http://localhost:4000</a> para ver en marcha la aplicación. Lo veremos con más detalle en el apartado de configuración.</p>\n<blockquote>\n<p>ejemplo: La aplicación que sirve de ejemplo a este tutorial fue creada con este comando:</p>\n</blockquote>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new angular-basic -p ab --style css --routing</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Estructura-de-una-aplicacion-Angular\"><a href=\"#3-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"3. Estructura de una aplicación Angular\"></a>3. Estructura de una aplicación Angular</h1><p>Una vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay <strong>una enorme cantidad de ficheros y carpetas</strong>, las buenas son que como verás, casi todo es <strong>configuración e infraestructura</strong>.</p>\n<h2 id=\"3-1-Visual-Studio-Code\"><a href=\"#3-1-Visual-Studio-Code\" class=\"headerlink\" title=\"3.1 Visual Studio Code\"></a>3.1 Visual Studio Code</h2><p>Para ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo <a href=\"https://code.visualstudio.com/\">VSCode</a>. Es un <strong>gran editor, gratuito y multiplataforma</strong>. Viene con un terminal integrado y puedes mejorarlo instalando extensiones desde una galería del propio editor.</p>\n<p>Te recomiendo instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con <em>Angular</em>, se llama <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\">Angular Essentials</a>. Con eso y el <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\">Material Icon Theme</a> verás <em>Angular en colores</em>.</p>\n<h2 id=\"3-2-Carpetas-y-Ficheros-principales\"><a href=\"#3-2-Carpetas-y-Ficheros-principales\" class=\"headerlink\" title=\"3.2 Carpetas y Ficheros principales\"></a>3.2 Carpetas y Ficheros principales</h2><p>Volviendo a la <strong>estructura de ficheros y carpetas</strong> te encontrarás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones <code>.ts</code>. Son para ficheros <a href=\"https://www.typescriptlang.org/\"><em>TypeScript</em></a>, una evolución del <em>JavaScript</em> con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:</p>\n<ul>\n<li><strong>angular.json</strong> <em>: configuración del propio CLI. La madre de todos los configuradores</em></li>\n<li><strong>package.json</strong> <em>: dependencias de librerías y scripts</em></li>\n<li><strong>src&#x2F;</strong> <em>: la carpeta donde están los archivos fuentes</em><ul>\n<li><strong>index.html</strong> <em>: un fichero HTML índice estándar</em></li>\n<li><strong>main.ts</strong> <em>: fichero TypeScript de arranque de la aplicación</em></li>\n<li><strong>app&#x2F;</strong> <em>: la carpeta con el código específico de tu aplicación</em><ul>\n<li><strong>app.module.ts</strong> <em>: la aplicación es un árbol de módulos, y este es su raíz</em></li>\n<li><strong>app.component.ts</strong> <em>: la página es un árbol de componentes, y este es su raíz</em></li>\n<li><strong>app.component.html</strong> <em>: tiene una parte visual, esta es su vista</em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Echa un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.</p>\n<h1 id=\"4-Edicion\"><a href=\"#4-Edicion\" class=\"headerlink\" title=\"4. Edición\"></a>4. Edición</h1><p>Angular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de <strong>recargar la aplicación en caliente</strong> en cuanto guardas tu trabajo como programador. En esta última versión, la 9, se ha mejorado el proceso y es realmente rápido.</p>\n<p>Para probarlo sólo tienes que dejar arrancada la aplicación con el comando <code>npm start</code>; <strong>cambiar un fichero de código y comprobar el resultado</strong> en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso <em>hola mundo</em>.</p>\n<h2 id=\"4-1-Hola-Mundo\"><a href=\"#4-1-Hola-Mundo\" class=\"headerlink\" title=\"4.1 Hola Mundo\"></a>4.1 Hola Mundo</h2><p>Abre el fichero <code>app.component.ts</code> y busca dentro de él una clase llamada <code>AppComponent</code>. Encontrarás que tiene una propiedad <code>title</code>. Asígnale el saludo de rigor: <code>title = &#39;angular - basic: hello world ;-)&#39;;</code>. Guarda y comprueba cómo tu navegador <strong>se habrá actualizado automáticamente</strong>.</p>\n<p>Toda <strong>esta magia depende de una cadena de comandos</strong> que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a <a href=\"https://webpack.github.io/\"><em>WebPack</em></a>, un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.</p>\n<h2 id=\"4-2-npm-start\"><a href=\"#4-2-npm-start\" class=\"headerlink\" title=\"4.2 npm start\"></a>4.2 npm start</h2><p>Esta es una lista no exhaustiva de lo que sucede.</p>\n<ol>\n<li>npm start</li>\n<li>ng serve</li>\n<li>webpack server en <a href=\"http://localhost:4200/\">http://localhost:4200</a><ol>\n<li>vigilancia de cambios sobre la carpeta src&#x2F;</li>\n<li>live reload</li>\n<li>compilado de la aplicación</li>\n<li>recarga del navegador</li>\n</ol>\n</li>\n</ol>\n<p>Cambia a tu antojo el <code>app.component.ts</code> o su hermano <code>app.component.html</code> y comprueba los cambios de manera inmediata en tu navegador.</p>\n<h1 id=\"5-Configuracion\"><a href=\"#5-Configuracion\" class=\"headerlink\" title=\"5. Configuración\"></a>5. Configuración</h1><p>El CLI 9 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el <code>package.json</code> y agregar librerías de terceros.</p>\n<h2 id=\"5-1-Package-json\"><a href=\"#5-1-Package-json\" class=\"headerlink\" title=\"5.1 Package.json\"></a>5.1 Package.json</h2><p>El <code>package.json</code> es el fichero estándar de <em>npm</em> donde se almacenan las <strong>dependencias de terceros</strong>. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de <em>Angular 9</em>. Y también las herramientas que necesita el programador, por ejemplo el propio <em>AngularCLI</em>;</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@angular/core&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~9.1.1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@angular/cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~9.1.1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Otro uso del <code>package.json</code> es servir de <strong>contenedor de scripts</strong> para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar <code>npm start</code> ejecutará el contenido asignado en el fichero <em>json</em>, originalmente <code>ng serve</code>. Esto lanza el servidor de pruebas con sus opciones por defecto.</p>\n<p>Pero el <strong>comando <a href=\"https://angular.io/cli/serve\">ng serve</a></strong> admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.</p>\n<p>Otras configuraciones en producción</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve -o --port 4290&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-2-Estilos-y-librerias-de-terceros\"><a href=\"#5-2-Estilos-y-librerias-de-terceros\" class=\"headerlink\" title=\"5.2 Estilos y librerías de terceros\"></a>5.2 Estilos y librerías de terceros</h2><p>Las librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos <strong>algún que otro producto de terceros</strong>. Ya sean utilidades como <em><a href=\"https://date-fns.org/\">date-fns</a></em>, librerías gráficas como <em><a href=\"http://www.chartjs.org/\">chart.js</a></em> o la aplicación de estilos y componentes visuales de <em>frameworks como Bootstrap o MaterialDesign</em>. Pero todos se instalan de igual forma. Descargándolos con <em>npm</em> y adjuntándolos en el <code>angular.json</code>.</p>\n<p>Estas colecciones de archivos los usa el <em>cli</em> a través de <em>webpack</em> para incluirlos <strong>minificados y concatenados en un fichero <em>bundle</em> sustituyendo a las clásicas etiquetas html</strong>.Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. De esta forma el fichero <code>index.html</code> apenas tendrás que tocarlo, salvo para algunas etiquetas de meta información.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;A sample project for learning Angular ;-)&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Angular Sample Tutorial Ejemplo&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Alberto Basalo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-3-Environments\"><a href=\"#5-3-Environments\" class=\"headerlink\" title=\"5.3 Environments\"></a>5.3 Environments</h2><p>La carpeta <code>environments/</code> contiene dos ficheros, y puede contener más, para cada entorno de distribución necesario. En código siempre importaremos el fichero base, pero durante la compilación el CLI lo sustituirá por el adecuado.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title = environment.<span class=\"property\">appName</span> + <span class=\"string\">&#x27;hello world ;-)&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-4-Assets\"><a href=\"#5-4-Assets\" class=\"headerlink\" title=\"5.4 Assets\"></a>5.4 Assets</h2><p>Los ficheros de la carpeta <code>assets/</code> se copian tal cual al despliegue. Es un buen lugar para logos, imágenes y ficheros de datos estáticos.</p>\n<p>Por ejemplo, en el <code>app.component.html</code> he sustituido la imagen incrustada del Angular con un logo propio.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./assets/logo.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-Angular-9-el-CLI-9-y-su-ecosistema\"><a href=\"#6-Angular-9-el-CLI-9-y-su-ecosistema\" class=\"headerlink\" title=\"6. Angular 9, el CLI 9 y su ecosistema\"></a>6. Angular 9, el CLI 9 y su ecosistema</h1><p>Algunos consejos y herramientas útiles que rodean al mundo Angular.</p>\n<p>Pero si la línea de comandos te suena muy antigua y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto <a href=\"https://angularconsole.com/\">Angular Console</a> te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.</p>\n<p>Una mejora digna de mención es la capacidad de presupuestar tamaños de los ficheros generados. De esa forma podemos controlar el peso y tiempo de descarga de la aplicación.</p>\n<p>Para garantizar la limpieza del código conviene usar herramientas como <a href=\"https://prettier.io/\">Prettier</a> y configurarlas para su compatibilidad con Angular.</p>\n<p>Los últimos toques antes de publicar pueden incluir el <em>script de analytics</em> en el <code>index.html</code> y ajustes de retro-compatibilidad en el fichero <code>polyfills.ts</code>.</p>\n<p>Luego un comando y listo para publicar en <em>github pages</em>. <code>ng add angular-cli-ghpages</code>.</p>\n<blockquote>\n<p>Te recomiendo que te familiarices y uses mucho estos <em>scripts</em> en el <code>package.json</code> para poder lanzarlos más tarde.</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ng&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve -o --port 4290&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start:prod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run build:prod &amp;&amp; npm run http-server&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:prod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build --prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;deploy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng deploy --baseHref=/angular-basic/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng lint&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;e2e&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng e2e&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Comprueba las ejecuciones de los distintos <em>scripts</em>. Con <code>npm start</code> no se generan ficheros físicos. Todos es en memoria para mayor velocidad de re-compilación mientras desarrollas. En cambio <code>npm run build:prod</code> creará una carpeta <code>./dist/angular-basic</code> en la que dejará los archivos necesarios para ejecución. Por último <code>npm run deploy</code> los prepara para enviar compilados a un rama estándar de publicación listos para desplegarse en las <a href=\"https://pages.github.com/\"><em>github pages</em></a>.</p>\n<p>Otros enlaces de interés sobre el ecosistema Angular.</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\">Extensiones Esenciales</a></li>\n<li><a href=\"https://prettier.io/\">Prettier</a></li>\n<li><a href=\"https://github.com/prettier/tslint-config-prettier\">TsLint-Prettier</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\">Angular Console</a></li>\n<li><a href=\"https://material.angular.io/\">Angular Material</a></li>\n<li><a href=\"https://ng-bootstrap.github.io/#/home\">Bootstrap</a></li>\n<li><a href=\"https://augury.rangle.io/\">Augury</a></li>\n<li><a href=\"https://www.apollographql.com/docs/\">Apollo GraphQL</a></li>\n<li><a href=\"https://ionicframework.com/\">Ionic</a></li>\n<li><a href=\"https://angularconsole.com/\">Angular Console</a></li>\n</ul>\n<p>Para complementar tu conocimiento te recomiendo la <a href=\"https://angular.io/cli\">documentación de Angular&#x2F;CLI</a> y este artículo avanzado que trata la configuración del CLI en profundidad <a href=\"https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01\">Angular CLI under the hood </a></p>\n<p>Esto es sólo el principio, <em>Angular CLI 9</em> puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 9. En el próximo artículo crearemos una <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-0_cli.png\" alt=\"hola-angular-cli\"></p>\n<p><strong>Angular en su versión 9 es la plataforma perfecta para el desarrollo</strong> profesional de aplicaciones modernas. <strong>El Angular CLI es la herramienta</strong> adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.</p>","more":"<p>El comúnmente conocido como <strong>AngularCLI</strong> o <em>angular cli</em> o <em>angular-cli</em> o <em>CLI a secas</em> es la herramienta de línea de comandos estándar para <strong>crear, depurar y publicar aplicaciones Angular</strong>. En su actual <strong>versión 9</strong> es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Instalacion-de-Angular-CLI-9\"><a href=\"#1-Instalacion-de-Angular-CLI-9\" class=\"headerlink\" title=\"1. Instalación de Angular CLI 9\"></a>1. Instalación de Angular CLI 9</h1><p>Angular es una plataforma de desarrollo dogmática y llave en mano. Para empezar, como en casi cualquier desarrollo <strong>necesitarás <a href=\"https://nodejs.org/en/\">NodeJS</a> y su manejador de de paquetes <em>npm</em></strong>. Tenerlos actualizados es un mandamiento básico para un desarrollador web. Comprueba tu versión con el siguiente comando:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<p>Empieza con una <strong>instalación global</strong> que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.</p>\n<p>Instrucciones para instalar Angular CLI.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm i -g @angular/cli@latest</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ng version</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ng <span class=\"built_in\">help</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ng new --<span class=\"built_in\">help</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Crear-y-ejecutar-una-aplicacion-Angular-9\"><a href=\"#2-Crear-y-ejecutar-una-aplicacion-Angular-9\" class=\"headerlink\" title=\"2. Crear y ejecutar una aplicación Angular 9\"></a>2. Crear y ejecutar una aplicación Angular 9</h1><p>Una vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será <code>ng new</code> que te va a <strong>generar toda una aplicación funcional</strong> y las configuraciones necesarias para su depuración, pruebas y ejecución.</p>\n<p>Como novedad, en las últimas versiones, el CLI te preguntará por algunas opciones para crear tu aplicación. Eso es porque no todos los desarrollos son iguales. Se puede configurar el tipo, el estilo y muchas más cosas, tanto de forma interactiva como mediante opciones en línea de comandos.</p>\n<p>Lo más habitual es usar la configuración que viene por defecto, pero también se pueden crear soluciones a medida. Te muestro unos ejemplos para que pruebes y te familiarices con la herramienta. Para más información mira la documentación del comando <a href=\"https://angular.io/cli/new\">ng new</a>.</p>\n<h2 id=\"2-1-Basica\"><a href=\"#2-1-Basica\" class=\"headerlink\" title=\"2.1 Básica\"></a>2.1 Básica</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new unaAppMuyCorriente</span><br><span class=\"line\">cd unaAppMuyCorriente</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-Minimalista\"><a href=\"#2-2-Minimalista\" class=\"headerlink\" title=\"2.2 Minimalista\"></a>2.2 Minimalista</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new minimalista -s -S -t</span><br><span class=\"line\">cd minimalista</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-Profesional\"><a href=\"#2-3-Profesional\" class=\"headerlink\" title=\"2.3 Profesional\"></a>2.3 Profesional</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new profesional -p acme --routing true</span><br><span class=\"line\">cd profesional</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-Empresarial\"><a href=\"#2-4-Empresarial\" class=\"headerlink\" title=\"2.4 Empresarial\"></a>2.4 Empresarial</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new empresarial --create-application false</span><br><span class=\"line\">cd empresarial</span><br><span class=\"line\">ng generate application compras -p acme --routing true</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<p>Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de <em>npm</em> para el arranque de cualquier aplicación: <code>npm start</code>. Si todo va bien, en unos segundo podrás visitar <a href=\"http://localhost:4000/\">http://localhost:4000</a> para ver en marcha la aplicación. Lo veremos con más detalle en el apartado de configuración.</p>\n<blockquote>\n<p>ejemplo: La aplicación que sirve de ejemplo a este tutorial fue creada con este comando:</p>\n</blockquote>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new angular-basic -p ab --style css --routing</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Estructura-de-una-aplicacion-Angular\"><a href=\"#3-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"3. Estructura de una aplicación Angular\"></a>3. Estructura de una aplicación Angular</h1><p>Una vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay <strong>una enorme cantidad de ficheros y carpetas</strong>, las buenas son que como verás, casi todo es <strong>configuración e infraestructura</strong>.</p>\n<h2 id=\"3-1-Visual-Studio-Code\"><a href=\"#3-1-Visual-Studio-Code\" class=\"headerlink\" title=\"3.1 Visual Studio Code\"></a>3.1 Visual Studio Code</h2><p>Para ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo <a href=\"https://code.visualstudio.com/\">VSCode</a>. Es un <strong>gran editor, gratuito y multiplataforma</strong>. Viene con un terminal integrado y puedes mejorarlo instalando extensiones desde una galería del propio editor.</p>\n<p>Te recomiendo instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con <em>Angular</em>, se llama <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\">Angular Essentials</a>. Con eso y el <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\">Material Icon Theme</a> verás <em>Angular en colores</em>.</p>\n<h2 id=\"3-2-Carpetas-y-Ficheros-principales\"><a href=\"#3-2-Carpetas-y-Ficheros-principales\" class=\"headerlink\" title=\"3.2 Carpetas y Ficheros principales\"></a>3.2 Carpetas y Ficheros principales</h2><p>Volviendo a la <strong>estructura de ficheros y carpetas</strong> te encontrarás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones <code>.ts</code>. Son para ficheros <a href=\"https://www.typescriptlang.org/\"><em>TypeScript</em></a>, una evolución del <em>JavaScript</em> con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:</p>\n<ul>\n<li><strong>angular.json</strong> <em>: configuración del propio CLI. La madre de todos los configuradores</em></li>\n<li><strong>package.json</strong> <em>: dependencias de librerías y scripts</em></li>\n<li><strong>src&#x2F;</strong> <em>: la carpeta donde están los archivos fuentes</em><ul>\n<li><strong>index.html</strong> <em>: un fichero HTML índice estándar</em></li>\n<li><strong>main.ts</strong> <em>: fichero TypeScript de arranque de la aplicación</em></li>\n<li><strong>app&#x2F;</strong> <em>: la carpeta con el código específico de tu aplicación</em><ul>\n<li><strong>app.module.ts</strong> <em>: la aplicación es un árbol de módulos, y este es su raíz</em></li>\n<li><strong>app.component.ts</strong> <em>: la página es un árbol de componentes, y este es su raíz</em></li>\n<li><strong>app.component.html</strong> <em>: tiene una parte visual, esta es su vista</em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Echa un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.</p>\n<h1 id=\"4-Edicion\"><a href=\"#4-Edicion\" class=\"headerlink\" title=\"4. Edición\"></a>4. Edición</h1><p>Angular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de <strong>recargar la aplicación en caliente</strong> en cuanto guardas tu trabajo como programador. En esta última versión, la 9, se ha mejorado el proceso y es realmente rápido.</p>\n<p>Para probarlo sólo tienes que dejar arrancada la aplicación con el comando <code>npm start</code>; <strong>cambiar un fichero de código y comprobar el resultado</strong> en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso <em>hola mundo</em>.</p>\n<h2 id=\"4-1-Hola-Mundo\"><a href=\"#4-1-Hola-Mundo\" class=\"headerlink\" title=\"4.1 Hola Mundo\"></a>4.1 Hola Mundo</h2><p>Abre el fichero <code>app.component.ts</code> y busca dentro de él una clase llamada <code>AppComponent</code>. Encontrarás que tiene una propiedad <code>title</code>. Asígnale el saludo de rigor: <code>title = &#39;angular - basic: hello world ;-)&#39;;</code>. Guarda y comprueba cómo tu navegador <strong>se habrá actualizado automáticamente</strong>.</p>\n<p>Toda <strong>esta magia depende de una cadena de comandos</strong> que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a <a href=\"https://webpack.github.io/\"><em>WebPack</em></a>, un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.</p>\n<h2 id=\"4-2-npm-start\"><a href=\"#4-2-npm-start\" class=\"headerlink\" title=\"4.2 npm start\"></a>4.2 npm start</h2><p>Esta es una lista no exhaustiva de lo que sucede.</p>\n<ol>\n<li>npm start</li>\n<li>ng serve</li>\n<li>webpack server en <a href=\"http://localhost:4200/\">http://localhost:4200</a><ol>\n<li>vigilancia de cambios sobre la carpeta src&#x2F;</li>\n<li>live reload</li>\n<li>compilado de la aplicación</li>\n<li>recarga del navegador</li>\n</ol>\n</li>\n</ol>\n<p>Cambia a tu antojo el <code>app.component.ts</code> o su hermano <code>app.component.html</code> y comprueba los cambios de manera inmediata en tu navegador.</p>\n<h1 id=\"5-Configuracion\"><a href=\"#5-Configuracion\" class=\"headerlink\" title=\"5. Configuración\"></a>5. Configuración</h1><p>El CLI 9 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el <code>package.json</code> y agregar librerías de terceros.</p>\n<h2 id=\"5-1-Package-json\"><a href=\"#5-1-Package-json\" class=\"headerlink\" title=\"5.1 Package.json\"></a>5.1 Package.json</h2><p>El <code>package.json</code> es el fichero estándar de <em>npm</em> donde se almacenan las <strong>dependencias de terceros</strong>. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de <em>Angular 9</em>. Y también las herramientas que necesita el programador, por ejemplo el propio <em>AngularCLI</em>;</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@angular/core&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~9.1.1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@angular/cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;~9.1.1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Otro uso del <code>package.json</code> es servir de <strong>contenedor de scripts</strong> para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar <code>npm start</code> ejecutará el contenido asignado en el fichero <em>json</em>, originalmente <code>ng serve</code>. Esto lanza el servidor de pruebas con sus opciones por defecto.</p>\n<p>Pero el <strong>comando <a href=\"https://angular.io/cli/serve\">ng serve</a></strong> admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.</p>\n<p>Otras configuraciones en producción</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve -o --port 4290&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-2-Estilos-y-librerias-de-terceros\"><a href=\"#5-2-Estilos-y-librerias-de-terceros\" class=\"headerlink\" title=\"5.2 Estilos y librerías de terceros\"></a>5.2 Estilos y librerías de terceros</h2><p>Las librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos <strong>algún que otro producto de terceros</strong>. Ya sean utilidades como <em><a href=\"https://date-fns.org/\">date-fns</a></em>, librerías gráficas como <em><a href=\"http://www.chartjs.org/\">chart.js</a></em> o la aplicación de estilos y componentes visuales de <em>frameworks como Bootstrap o MaterialDesign</em>. Pero todos se instalan de igual forma. Descargándolos con <em>npm</em> y adjuntándolos en el <code>angular.json</code>.</p>\n<p>Estas colecciones de archivos los usa el <em>cli</em> a través de <em>webpack</em> para incluirlos <strong>minificados y concatenados en un fichero <em>bundle</em> sustituyendo a las clásicas etiquetas html</strong>.Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. De esta forma el fichero <code>index.html</code> apenas tendrás que tocarlo, salvo para algunas etiquetas de meta información.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;A sample project for learning Angular ;-)&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Angular Sample Tutorial Ejemplo&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Alberto Basalo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-3-Environments\"><a href=\"#5-3-Environments\" class=\"headerlink\" title=\"5.3 Environments\"></a>5.3 Environments</h2><p>La carpeta <code>environments/</code> contiene dos ficheros, y puede contener más, para cada entorno de distribución necesario. En código siempre importaremos el fichero base, pero durante la compilación el CLI lo sustituirá por el adecuado.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title = environment.<span class=\"property\">appName</span> + <span class=\"string\">&#x27;hello world ;-)&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-4-Assets\"><a href=\"#5-4-Assets\" class=\"headerlink\" title=\"5.4 Assets\"></a>5.4 Assets</h2><p>Los ficheros de la carpeta <code>assets/</code> se copian tal cual al despliegue. Es un buen lugar para logos, imágenes y ficheros de datos estáticos.</p>\n<p>Por ejemplo, en el <code>app.component.html</code> he sustituido la imagen incrustada del Angular con un logo propio.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./assets/logo.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-Angular-9-el-CLI-9-y-su-ecosistema\"><a href=\"#6-Angular-9-el-CLI-9-y-su-ecosistema\" class=\"headerlink\" title=\"6. Angular 9, el CLI 9 y su ecosistema\"></a>6. Angular 9, el CLI 9 y su ecosistema</h1><p>Algunos consejos y herramientas útiles que rodean al mundo Angular.</p>\n<p>Pero si la línea de comandos te suena muy antigua y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto <a href=\"https://angularconsole.com/\">Angular Console</a> te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.</p>\n<p>Una mejora digna de mención es la capacidad de presupuestar tamaños de los ficheros generados. De esa forma podemos controlar el peso y tiempo de descarga de la aplicación.</p>\n<p>Para garantizar la limpieza del código conviene usar herramientas como <a href=\"https://prettier.io/\">Prettier</a> y configurarlas para su compatibilidad con Angular.</p>\n<p>Los últimos toques antes de publicar pueden incluir el <em>script de analytics</em> en el <code>index.html</code> y ajustes de retro-compatibilidad en el fichero <code>polyfills.ts</code>.</p>\n<p>Luego un comando y listo para publicar en <em>github pages</em>. <code>ng add angular-cli-ghpages</code>.</p>\n<blockquote>\n<p>Te recomiendo que te familiarices y uses mucho estos <em>scripts</em> en el <code>package.json</code> para poder lanzarlos más tarde.</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ng&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng serve -o --port 4290&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start:prod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run build:prod &amp;&amp; npm run http-server&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:prod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng build --prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;deploy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng deploy --baseHref=/angular-basic/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng lint&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;e2e&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng e2e&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Comprueba las ejecuciones de los distintos <em>scripts</em>. Con <code>npm start</code> no se generan ficheros físicos. Todos es en memoria para mayor velocidad de re-compilación mientras desarrollas. En cambio <code>npm run build:prod</code> creará una carpeta <code>./dist/angular-basic</code> en la que dejará los archivos necesarios para ejecución. Por último <code>npm run deploy</code> los prepara para enviar compilados a un rama estándar de publicación listos para desplegarse en las <a href=\"https://pages.github.com/\"><em>github pages</em></a>.</p>\n<p>Otros enlaces de interés sobre el ecosistema Angular.</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\">Extensiones Esenciales</a></li>\n<li><a href=\"https://prettier.io/\">Prettier</a></li>\n<li><a href=\"https://github.com/prettier/tslint-config-prettier\">TsLint-Prettier</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\">Angular Console</a></li>\n<li><a href=\"https://material.angular.io/\">Angular Material</a></li>\n<li><a href=\"https://ng-bootstrap.github.io/#/home\">Bootstrap</a></li>\n<li><a href=\"https://augury.rangle.io/\">Augury</a></li>\n<li><a href=\"https://www.apollographql.com/docs/\">Apollo GraphQL</a></li>\n<li><a href=\"https://ionicframework.com/\">Ionic</a></li>\n<li><a href=\"https://angularconsole.com/\">Angular Console</a></li>\n</ul>\n<p>Para complementar tu conocimiento te recomiendo la <a href=\"https://angular.io/cli\">documentación de Angular&#x2F;CLI</a> y este artículo avanzado que trata la configuración del CLI en profundidad <a href=\"https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01\">Angular CLI under the hood </a></p>\n<p>Esto es sólo el principio, <em>Angular CLI 9</em> puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 9. En el próximo artículo crearemos una <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Material Design y CLI de Angular","date":"2019-03-14T17:59:27.000Z","thumbnail":"/css/images/angular-9_material.png","_content":"\n![Material-Design-y-CLI-de-Angular](/images/tutorial-angular-9_material.png)\n\nEl _ecosistema_ de Angular está repleto de librerías para desarrolladores profesionales. Algunas hacen uso de los **schematics**, y entre ellas destaca [Angular Material](https://material.angular.io/). Esta implementación de la casa de la guía de diseño _Material Design_ de Google usa las capacidades de estas plantillas del CLI que permiten agregar librerías y generar código.\n\nUn programador Angular debe **dominar el CLI** y debe conocer los beneficios que aporta un repositorio de multi-proyecto. Hay escenarios complejos muy adecuaos para estos _mono-repos_. Pero con el CLI es muy sencillo crear y usar nuevas aplicaciones dentro de un repositorio.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Formularios reactivos con Angular](../formularios-reactivos-con-Angular/). Al finalizar tendrás, en el mismo repositorio, una nueva aplicación con la apariencia y usabilidad de _Material design_.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/projects/schemat/](https://github.com/AcademiaBinaria/angular-basic/tree/master/projects/schemat)\n>\n> > Tienes una versión desplegada operativa para probar [Schemat](https://academiabinaria.github.io/angular-basic/schemat/)\n\n# 1. Repositorio multi-proyecto\n\nEl primer comando que se usa al empezar con angular es `ng new mi-aplicacion`. Desde ese momento tu mundo es la carpeta `/src` en la que se genera el código y en la que vas a desarrollar.\n\nPero con el tiempo, ciertos proyectos crecen y hay que dividirlos. O quizás surjan aplicaciones hermanas. Angular CLI permite disponer de más de un proyecto **compartiendo repositorio y configuración**.\n\n## 1.1 Carpetas src y projects\n\nDado un repositorio inicial, para agregar una nueva aplicación usaremos el viejo comando _generate_. Por ejemplo voy a crear una aplicación en la que usar las capacidades de los **schematics** y de **material**; la llamaré _schemat_\n\n```console\nng g application schemat --routing\n```\n\nEsta aplicación comparte la configuración básica de `angular.json` y las dependencias y scripts de `package.json`. Su código específico va en la carpeta `projects` destinada a los nuevos proyectos generados tras haber creado el repo inicial.\n\n\n## 1.2 Compilación multi - proyecto\n\nA partir de ahora cada comando del CLI debería ir asociado a un proyecto concreto. Digo debería porque an `angular.json` puedes establecer un proyecto por defecto, que si no dices lo contrario será el inicial.\n\nPero, es buena práctica crear scripts específicos en el `package.json` para iniciar y compilar cada proyecto.\n\n```\n\"start:schemat\": \"ng serve schemat --aot -o --port 4271\",\n\"build:prod:schemat\": \"ng build schemat --prod\",\n```\n\n# 2. Instalación y configuración de Material\n\nPor muchas funcionalidades que aporte un _framework_ como Angular, siempre necesitaremos echar mano de alguna **librería de terceros**. Normalmente eso implica instalarla con _npm_, importar sus módulos en Angular y en ocasiones alguna configuración extra.\n\nPero algunos proyectos ha adoptado la librería _schematics_ para facilitar la adopción de sus librerías. Es el caso de **Angular Material**.\n\n## 2.1 Agregar dependencias con schematics\n\nPara agregar _Material_ un proyecto basta con usar el comando `add` del CLI.\n\n```console\nng add @angular/material --project=schemat\n```\n\nEsto instalará y anotará la dependencia de `@angular/material` y otros paquetes necesarios. Pero además los registrará en `AppModule` y lo configurará.\n\n## 2.2 Estilos, iconos y temas básicos\n\nEn el `index.html` se insertarán los enlaces a las hojas de estilos con fuentes e iconos. En el `styles.css` podremos importar el tema de _Material_ que nos guste.\n\n```css\n@import '~@angular/material/prebuilt-themes/indigo-pink.css';\n```\n\n# 3. Componentes básicos\n\n**Angular Material** es mucho más que un _css_. El proyecto te ofrece más de una docena de componentes visuales para crear páginas web de aspecto y comportamiento profesional.\n\nPor si fuera poco, ofrece sus propias plantillas de _schematics_, de forma que podemos crear pantallas con el CLI y luego trabajar sobre ellas.\n\n## 3.1 Navegación y layout\n\nPara empezar vamos a crear el armazón de la aplicación, con su menú y su espacio para cargar contenido. Después pondremos la primera piedra con un dashboard en la raíz de la web.\n\n### 3.1.1 Navegación\n\nAl control que hará de _shell_ le llaman `nav` por sus capacidades de navegación. Lo usaremos para generar un componente. La novedad será que la plantilla a partir de la cual se crea no viene por defecto y tenemos que especificarla con más detalle.\n\n``` console\nng g @angular/material:nav shell --project=schemat\n```\nEL resultado es un componente normal, muy adecuado para sustituir todo lo pre-generado por el cli en`app.component.html`\n\n```html\n<app-shell></app-shell>\n```\n\n### 3.1.2 Dashboard\n\nPara la ruta raíz elegí un cuadro de mando. De nuevo es una generación a partir de una plantilla específica. En este caso le he llamado `Home`.\n\n``` console\nng g @angular/material:dashboard home --project=schemat\n```\n\nAsociamos el componente a la ruta en `app-routing`\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent\n  }\n];\n```\nY le buscamos un lugar tanto al enlace como al `RouterOutlet` en el previamente generado `shell.component.html`.\n\n```html\n<a mat-list-item [routerLink]=\"['/']\">Home</a>\n<!-- Add Content Here -->\n<router-outlet></router-outlet>\n```\n\n## 3.2 Componentes básicos\n\nPor supuesto que una librería de esta envergadura tienen soluciones para todo tipo de situaciones visuales. Para las más comunes incluso ofrecen una plantilla en sus _schematics_ que permite generar prototipos funcionales de formularios, tablas y hasta árboles.\n\n### 3.2.1 Formularios\n\nPuedes generar un **formulario** para crear contactos y después modificarlo o usarlo como guía para crear cualquier otro.\n\n``` console\nng g @angular/material:address-form contact --project=schemat\n```\n\n### 3.2.2 Tablas\n\nTambién nos muestran cómo hacer **listados**, con datos de ejemplo incluidos.\n\n``` console\nng g @angular/material:table elements --project=schemat\n```\nEl ejemplo permite además ver los datos en páginas y configurar su comportamiento.\n\n```html\n<mat-paginator #paginator\n    [length]=\"dataSource.data.length\"\n    [pageIndex]=\"0\"\n    [pageSize]=\"5\"\n    [pageSizeOptions]=\"[5, 10, 15, 20]\">\n</mat-paginator>\n```\n### 3.2.3 Árboles\n\nTermino con un ejemplo de algo reciente, **el árbol**. Este componente se resistió pero por petición popular acabaron integrándolo y ahora puedes mostrar datos jerárquicos como más les gusta a los usuarios: en forma de árboles.\n\n``` console\nng g @angular/material:tree source --project=schemat\n```\nPor supuesto que hay más opciones, todas bien explicadas en la [documentación de Angular Material](https://material.angular.io/components/categories). Es una solución muy recomendable para aplicaciones de gestión, o simplemente para que se vean muy bien en Android y recuerden al _look and feel_ de todo lo que hace Google.\n\nCon este conocimiento finalizas tu [introducción a Angular](../tag/Introduccion/).  En el tutorial avanzado aprenderás más cosas para programar con Angular 8.Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-9-Material-Design-y-CLI-de-Angular.md","raw":"---\ntitle: Material Design y CLI de Angular\npermalink: Material-Design-y-CLI-de-Angular\ndate: 2019-03-14 18:59:27\ntags:\n- Angular\n- Angular7\n- Angular2\n- material\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-9_material.png\n---\n\n![Material-Design-y-CLI-de-Angular](/images/tutorial-angular-9_material.png)\n\nEl _ecosistema_ de Angular está repleto de librerías para desarrolladores profesionales. Algunas hacen uso de los **schematics**, y entre ellas destaca [Angular Material](https://material.angular.io/). Esta implementación de la casa de la guía de diseño _Material Design_ de Google usa las capacidades de estas plantillas del CLI que permiten agregar librerías y generar código.\n\nUn programador Angular debe **dominar el CLI** y debe conocer los beneficios que aporta un repositorio de multi-proyecto. Hay escenarios complejos muy adecuaos para estos _mono-repos_. Pero con el CLI es muy sencillo crear y usar nuevas aplicaciones dentro de un repositorio.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Formularios reactivos con Angular](../formularios-reactivos-con-Angular/). Al finalizar tendrás, en el mismo repositorio, una nueva aplicación con la apariencia y usabilidad de _Material design_.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/projects/schemat/](https://github.com/AcademiaBinaria/angular-basic/tree/master/projects/schemat)\n>\n> > Tienes una versión desplegada operativa para probar [Schemat](https://academiabinaria.github.io/angular-basic/schemat/)\n\n# 1. Repositorio multi-proyecto\n\nEl primer comando que se usa al empezar con angular es `ng new mi-aplicacion`. Desde ese momento tu mundo es la carpeta `/src` en la que se genera el código y en la que vas a desarrollar.\n\nPero con el tiempo, ciertos proyectos crecen y hay que dividirlos. O quizás surjan aplicaciones hermanas. Angular CLI permite disponer de más de un proyecto **compartiendo repositorio y configuración**.\n\n## 1.1 Carpetas src y projects\n\nDado un repositorio inicial, para agregar una nueva aplicación usaremos el viejo comando _generate_. Por ejemplo voy a crear una aplicación en la que usar las capacidades de los **schematics** y de **material**; la llamaré _schemat_\n\n```console\nng g application schemat --routing\n```\n\nEsta aplicación comparte la configuración básica de `angular.json` y las dependencias y scripts de `package.json`. Su código específico va en la carpeta `projects` destinada a los nuevos proyectos generados tras haber creado el repo inicial.\n\n\n## 1.2 Compilación multi - proyecto\n\nA partir de ahora cada comando del CLI debería ir asociado a un proyecto concreto. Digo debería porque an `angular.json` puedes establecer un proyecto por defecto, que si no dices lo contrario será el inicial.\n\nPero, es buena práctica crear scripts específicos en el `package.json` para iniciar y compilar cada proyecto.\n\n```\n\"start:schemat\": \"ng serve schemat --aot -o --port 4271\",\n\"build:prod:schemat\": \"ng build schemat --prod\",\n```\n\n# 2. Instalación y configuración de Material\n\nPor muchas funcionalidades que aporte un _framework_ como Angular, siempre necesitaremos echar mano de alguna **librería de terceros**. Normalmente eso implica instalarla con _npm_, importar sus módulos en Angular y en ocasiones alguna configuración extra.\n\nPero algunos proyectos ha adoptado la librería _schematics_ para facilitar la adopción de sus librerías. Es el caso de **Angular Material**.\n\n## 2.1 Agregar dependencias con schematics\n\nPara agregar _Material_ un proyecto basta con usar el comando `add` del CLI.\n\n```console\nng add @angular/material --project=schemat\n```\n\nEsto instalará y anotará la dependencia de `@angular/material` y otros paquetes necesarios. Pero además los registrará en `AppModule` y lo configurará.\n\n## 2.2 Estilos, iconos y temas básicos\n\nEn el `index.html` se insertarán los enlaces a las hojas de estilos con fuentes e iconos. En el `styles.css` podremos importar el tema de _Material_ que nos guste.\n\n```css\n@import '~@angular/material/prebuilt-themes/indigo-pink.css';\n```\n\n# 3. Componentes básicos\n\n**Angular Material** es mucho más que un _css_. El proyecto te ofrece más de una docena de componentes visuales para crear páginas web de aspecto y comportamiento profesional.\n\nPor si fuera poco, ofrece sus propias plantillas de _schematics_, de forma que podemos crear pantallas con el CLI y luego trabajar sobre ellas.\n\n## 3.1 Navegación y layout\n\nPara empezar vamos a crear el armazón de la aplicación, con su menú y su espacio para cargar contenido. Después pondremos la primera piedra con un dashboard en la raíz de la web.\n\n### 3.1.1 Navegación\n\nAl control que hará de _shell_ le llaman `nav` por sus capacidades de navegación. Lo usaremos para generar un componente. La novedad será que la plantilla a partir de la cual se crea no viene por defecto y tenemos que especificarla con más detalle.\n\n``` console\nng g @angular/material:nav shell --project=schemat\n```\nEL resultado es un componente normal, muy adecuado para sustituir todo lo pre-generado por el cli en`app.component.html`\n\n```html\n<app-shell></app-shell>\n```\n\n### 3.1.2 Dashboard\n\nPara la ruta raíz elegí un cuadro de mando. De nuevo es una generación a partir de una plantilla específica. En este caso le he llamado `Home`.\n\n``` console\nng g @angular/material:dashboard home --project=schemat\n```\n\nAsociamos el componente a la ruta en `app-routing`\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent\n  }\n];\n```\nY le buscamos un lugar tanto al enlace como al `RouterOutlet` en el previamente generado `shell.component.html`.\n\n```html\n<a mat-list-item [routerLink]=\"['/']\">Home</a>\n<!-- Add Content Here -->\n<router-outlet></router-outlet>\n```\n\n## 3.2 Componentes básicos\n\nPor supuesto que una librería de esta envergadura tienen soluciones para todo tipo de situaciones visuales. Para las más comunes incluso ofrecen una plantilla en sus _schematics_ que permite generar prototipos funcionales de formularios, tablas y hasta árboles.\n\n### 3.2.1 Formularios\n\nPuedes generar un **formulario** para crear contactos y después modificarlo o usarlo como guía para crear cualquier otro.\n\n``` console\nng g @angular/material:address-form contact --project=schemat\n```\n\n### 3.2.2 Tablas\n\nTambién nos muestran cómo hacer **listados**, con datos de ejemplo incluidos.\n\n``` console\nng g @angular/material:table elements --project=schemat\n```\nEl ejemplo permite además ver los datos en páginas y configurar su comportamiento.\n\n```html\n<mat-paginator #paginator\n    [length]=\"dataSource.data.length\"\n    [pageIndex]=\"0\"\n    [pageSize]=\"5\"\n    [pageSizeOptions]=\"[5, 10, 15, 20]\">\n</mat-paginator>\n```\n### 3.2.3 Árboles\n\nTermino con un ejemplo de algo reciente, **el árbol**. Este componente se resistió pero por petición popular acabaron integrándolo y ahora puedes mostrar datos jerárquicos como más les gusta a los usuarios: en forma de árboles.\n\n``` console\nng g @angular/material:tree source --project=schemat\n```\nPor supuesto que hay más opciones, todas bien explicadas en la [documentación de Angular Material](https://material.angular.io/components/categories). Es una solución muy recomendable para aplicaciones de gestión, o simplemente para que se vean muy bien en Android y recuerden al _look and feel_ de todo lo que hace Google.\n\nCon este conocimiento finalizas tu [introducción a Angular](../tag/Introduccion/).  En el tutorial avanzado aprenderás más cosas para programar con Angular 8.Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng-9-Material-Design-y-CLI-de-Angular","published":1,"updated":"2023-07-02T10:25:58.479Z","__permalink":"Material-Design-y-CLI-de-Angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fj001qe096e98ranrb","content":"<p><img src=\"/images/tutorial-angular-9_material.png\" alt=\"Material-Design-y-CLI-de-Angular\"></p>\n<p>El <em>ecosistema</em> de Angular está repleto de librerías para desarrolladores profesionales. Algunas hacen uso de los <strong>schematics</strong>, y entre ellas destaca <a href=\"https://material.angular.io/\">Angular Material</a>. Esta implementación de la casa de la guía de diseño <em>Material Design</em> de Google usa las capacidades de estas plantillas del CLI que permiten agregar librerías y generar código.</p>\n<p>Un programador Angular debe <strong>dominar el CLI</strong> y debe conocer los beneficios que aporta un repositorio de multi-proyecto. Hay escenarios complejos muy adecuaos para estos <em>mono-repos</em>. Pero con el CLI es muy sencillo crear y usar nuevas aplicaciones dentro de un repositorio.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../formularios-reactivos-con-Angular/\">Formularios reactivos con Angular</a>. Al finalizar tendrás, en el mismo repositorio, una nueva aplicación con la apariencia y usabilidad de <em>Material design</em>.</p>\n<blockquote>\n<p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/projects/schemat\">AcademiaBinaria&#x2F;angular-basic&#x2F;projects&#x2F;schemat&#x2F;</a></p>\n<blockquote>\n<p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/schemat/\">Schemat</a></p>\n</blockquote>\n</blockquote>\n<h1 id=\"1-Repositorio-multi-proyecto\"><a href=\"#1-Repositorio-multi-proyecto\" class=\"headerlink\" title=\"1. Repositorio multi-proyecto\"></a>1. Repositorio multi-proyecto</h1><p>El primer comando que se usa al empezar con angular es <code>ng new mi-aplicacion</code>. Desde ese momento tu mundo es la carpeta <code>/src</code> en la que se genera el código y en la que vas a desarrollar.</p>\n<p>Pero con el tiempo, ciertos proyectos crecen y hay que dividirlos. O quizás surjan aplicaciones hermanas. Angular CLI permite disponer de más de un proyecto <strong>compartiendo repositorio y configuración</strong>.</p>\n<h2 id=\"1-1-Carpetas-src-y-projects\"><a href=\"#1-1-Carpetas-src-y-projects\" class=\"headerlink\" title=\"1.1 Carpetas src y projects\"></a>1.1 Carpetas src y projects</h2><p>Dado un repositorio inicial, para agregar una nueva aplicación usaremos el viejo comando <em>generate</em>. Por ejemplo voy a crear una aplicación en la que usar las capacidades de los <strong>schematics</strong> y de <strong>material</strong>; la llamaré <em>schemat</em></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g application schemat --routing</span><br></pre></td></tr></table></figure>\n\n<p>Esta aplicación comparte la configuración básica de <code>angular.json</code> y las dependencias y scripts de <code>package.json</code>. Su código específico va en la carpeta <code>projects</code> destinada a los nuevos proyectos generados tras haber creado el repo inicial.</p>\n<h2 id=\"1-2-Compilacion-multi-proyecto\"><a href=\"#1-2-Compilacion-multi-proyecto\" class=\"headerlink\" title=\"1.2 Compilación multi - proyecto\"></a>1.2 Compilación multi - proyecto</h2><p>A partir de ahora cada comando del CLI debería ir asociado a un proyecto concreto. Digo debería porque an <code>angular.json</code> puedes establecer un proyecto por defecto, que si no dices lo contrario será el inicial.</p>\n<p>Pero, es buena práctica crear scripts específicos en el <code>package.json</code> para iniciar y compilar cada proyecto.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start:schemat&quot;: &quot;ng serve schemat --aot -o --port 4271&quot;,</span><br><span class=\"line\">&quot;build:prod:schemat&quot;: &quot;ng build schemat --prod&quot;,</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Instalacion-y-configuracion-de-Material\"><a href=\"#2-Instalacion-y-configuracion-de-Material\" class=\"headerlink\" title=\"2. Instalación y configuración de Material\"></a>2. Instalación y configuración de Material</h1><p>Por muchas funcionalidades que aporte un <em>framework</em> como Angular, siempre necesitaremos echar mano de alguna <strong>librería de terceros</strong>. Normalmente eso implica instalarla con <em>npm</em>, importar sus módulos en Angular y en ocasiones alguna configuración extra.</p>\n<p>Pero algunos proyectos ha adoptado la librería <em>schematics</em> para facilitar la adopción de sus librerías. Es el caso de <strong>Angular Material</strong>.</p>\n<h2 id=\"2-1-Agregar-dependencias-con-schematics\"><a href=\"#2-1-Agregar-dependencias-con-schematics\" class=\"headerlink\" title=\"2.1 Agregar dependencias con schematics\"></a>2.1 Agregar dependencias con schematics</h2><p>Para agregar <em>Material</em> un proyecto basta con usar el comando <code>add</code> del CLI.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @angular/material --project=schemat</span><br></pre></td></tr></table></figure>\n\n<p>Esto instalará y anotará la dependencia de <code>@angular/material</code> y otros paquetes necesarios. Pero además los registrará en <code>AppModule</code> y lo configurará.</p>\n<h2 id=\"2-2-Estilos-iconos-y-temas-basicos\"><a href=\"#2-2-Estilos-iconos-y-temas-basicos\" class=\"headerlink\" title=\"2.2 Estilos, iconos y temas básicos\"></a>2.2 Estilos, iconos y temas básicos</h2><p>En el <code>index.html</code> se insertarán los enlaces a las hojas de estilos con fuentes e iconos. En el <code>styles.css</code> podremos importar el tema de <em>Material</em> que nos guste.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&#x27;~@angular/material/prebuilt-themes/indigo-pink.css&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Componentes-basicos\"><a href=\"#3-Componentes-basicos\" class=\"headerlink\" title=\"3. Componentes básicos\"></a>3. Componentes básicos</h1><p><strong>Angular Material</strong> es mucho más que un <em>css</em>. El proyecto te ofrece más de una docena de componentes visuales para crear páginas web de aspecto y comportamiento profesional.</p>\n<p>Por si fuera poco, ofrece sus propias plantillas de <em>schematics</em>, de forma que podemos crear pantallas con el CLI y luego trabajar sobre ellas.</p>\n<h2 id=\"3-1-Navegacion-y-layout\"><a href=\"#3-1-Navegacion-y-layout\" class=\"headerlink\" title=\"3.1 Navegación y layout\"></a>3.1 Navegación y layout</h2><p>Para empezar vamos a crear el armazón de la aplicación, con su menú y su espacio para cargar contenido. Después pondremos la primera piedra con un dashboard en la raíz de la web.</p>\n<h3 id=\"3-1-1-Navegacion\"><a href=\"#3-1-1-Navegacion\" class=\"headerlink\" title=\"3.1.1 Navegación\"></a>3.1.1 Navegación</h3><p>Al control que hará de <em>shell</em> le llaman <code>nav</code> por sus capacidades de navegación. Lo usaremos para generar un componente. La novedad será que la plantilla a partir de la cual se crea no viene por defecto y tenemos que especificarla con más detalle.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:nav shell --project=schemat</span><br></pre></td></tr></table></figure>\n<p>EL resultado es un componente normal, muy adecuado para sustituir todo lo pre-generado por el cli en<code>app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-shell</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-shell</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-1-2-Dashboard\"><a href=\"#3-1-2-Dashboard\" class=\"headerlink\" title=\"3.1.2 Dashboard\"></a>3.1.2 Dashboard</h3><p>Para la ruta raíz elegí un cuadro de mando. De nuevo es una generación a partir de una plantilla específica. En este caso le he llamado <code>Home</code>.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:dashboard home --project=schemat</span><br></pre></td></tr></table></figure>\n\n<p>Asociamos el componente a la ruta en <code>app-routing</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>Y le buscamos un lugar tanto al enlace como al <code>RouterOutlet</code> en el previamente generado <code>shell.component.html</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">mat-list-item</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/&#x27;]&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Add Content Here --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Componentes-basicos\"><a href=\"#3-2-Componentes-basicos\" class=\"headerlink\" title=\"3.2 Componentes básicos\"></a>3.2 Componentes básicos</h2><p>Por supuesto que una librería de esta envergadura tienen soluciones para todo tipo de situaciones visuales. Para las más comunes incluso ofrecen una plantilla en sus <em>schematics</em> que permite generar prototipos funcionales de formularios, tablas y hasta árboles.</p>\n<h3 id=\"3-2-1-Formularios\"><a href=\"#3-2-1-Formularios\" class=\"headerlink\" title=\"3.2.1 Formularios\"></a>3.2.1 Formularios</h3><p>Puedes generar un <strong>formulario</strong> para crear contactos y después modificarlo o usarlo como guía para crear cualquier otro.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:address-form contact --project=schemat</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-2-Tablas\"><a href=\"#3-2-2-Tablas\" class=\"headerlink\" title=\"3.2.2 Tablas\"></a>3.2.2 Tablas</h3><p>También nos muestran cómo hacer <strong>listados</strong>, con datos de ejemplo incluidos.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:table elements --project=schemat</span><br></pre></td></tr></table></figure>\n<p>El ejemplo permite además ver los datos en páginas y configurar su comportamiento.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mat-paginator</span> #<span class=\"attr\">paginator</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">length</span>]=<span class=\"string\">&quot;dataSource.data.length&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageIndex</span>]=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageSize</span>]=<span class=\"string\">&quot;5&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageSizeOptions</span>]=<span class=\"string\">&quot;[5, 10, 15, 20]&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mat-paginator</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-3-Arboles\"><a href=\"#3-2-3-Arboles\" class=\"headerlink\" title=\"3.2.3 Árboles\"></a>3.2.3 Árboles</h3><p>Termino con un ejemplo de algo reciente, <strong>el árbol</strong>. Este componente se resistió pero por petición popular acabaron integrándolo y ahora puedes mostrar datos jerárquicos como más les gusta a los usuarios: en forma de árboles.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:tree source --project=schemat</span><br></pre></td></tr></table></figure>\n<p>Por supuesto que hay más opciones, todas bien explicadas en la <a href=\"https://material.angular.io/components/categories\">documentación de Angular Material</a>. Es una solución muy recomendable para aplicaciones de gestión, o simplemente para que se vean muy bien en Android y recuerden al <em>look and feel</em> de todo lo que hace Google.</p>\n<p>Con este conocimiento finalizas tu <a href=\"../tag/Introduccion/\">introducción a Angular</a>.  En el tutorial avanzado aprenderás más cosas para programar con Angular 8.Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-9_material.png\" alt=\"Material-Design-y-CLI-de-Angular\"></p>\n<p>El <em>ecosistema</em> de Angular está repleto de librerías para desarrolladores profesionales. Algunas hacen uso de los <strong>schematics</strong>, y entre ellas destaca <a href=\"https://material.angular.io/\">Angular Material</a>. Esta implementación de la casa de la guía de diseño <em>Material Design</em> de Google usa las capacidades de estas plantillas del CLI que permiten agregar librerías y generar código.</p>\n<p>Un programador Angular debe <strong>dominar el CLI</strong> y debe conocer los beneficios que aporta un repositorio de multi-proyecto. Hay escenarios complejos muy adecuaos para estos <em>mono-repos</em>. Pero con el CLI es muy sencillo crear y usar nuevas aplicaciones dentro de un repositorio.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../formularios-reactivos-con-Angular/\">Formularios reactivos con Angular</a>. Al finalizar tendrás, en el mismo repositorio, una nueva aplicación con la apariencia y usabilidad de <em>Material design</em>.</p>\n<blockquote>\n<p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/projects/schemat\">AcademiaBinaria&#x2F;angular-basic&#x2F;projects&#x2F;schemat&#x2F;</a></p>\n<blockquote>\n<p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/schemat/\">Schemat</a></p>\n</blockquote>\n</blockquote>\n<h1 id=\"1-Repositorio-multi-proyecto\"><a href=\"#1-Repositorio-multi-proyecto\" class=\"headerlink\" title=\"1. Repositorio multi-proyecto\"></a>1. Repositorio multi-proyecto</h1><p>El primer comando que se usa al empezar con angular es <code>ng new mi-aplicacion</code>. Desde ese momento tu mundo es la carpeta <code>/src</code> en la que se genera el código y en la que vas a desarrollar.</p>\n<p>Pero con el tiempo, ciertos proyectos crecen y hay que dividirlos. O quizás surjan aplicaciones hermanas. Angular CLI permite disponer de más de un proyecto <strong>compartiendo repositorio y configuración</strong>.</p>\n<h2 id=\"1-1-Carpetas-src-y-projects\"><a href=\"#1-1-Carpetas-src-y-projects\" class=\"headerlink\" title=\"1.1 Carpetas src y projects\"></a>1.1 Carpetas src y projects</h2><p>Dado un repositorio inicial, para agregar una nueva aplicación usaremos el viejo comando <em>generate</em>. Por ejemplo voy a crear una aplicación en la que usar las capacidades de los <strong>schematics</strong> y de <strong>material</strong>; la llamaré <em>schemat</em></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g application schemat --routing</span><br></pre></td></tr></table></figure>\n\n<p>Esta aplicación comparte la configuración básica de <code>angular.json</code> y las dependencias y scripts de <code>package.json</code>. Su código específico va en la carpeta <code>projects</code> destinada a los nuevos proyectos generados tras haber creado el repo inicial.</p>\n<h2 id=\"1-2-Compilacion-multi-proyecto\"><a href=\"#1-2-Compilacion-multi-proyecto\" class=\"headerlink\" title=\"1.2 Compilación multi - proyecto\"></a>1.2 Compilación multi - proyecto</h2><p>A partir de ahora cada comando del CLI debería ir asociado a un proyecto concreto. Digo debería porque an <code>angular.json</code> puedes establecer un proyecto por defecto, que si no dices lo contrario será el inicial.</p>\n<p>Pero, es buena práctica crear scripts específicos en el <code>package.json</code> para iniciar y compilar cada proyecto.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start:schemat&quot;: &quot;ng serve schemat --aot -o --port 4271&quot;,</span><br><span class=\"line\">&quot;build:prod:schemat&quot;: &quot;ng build schemat --prod&quot;,</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Instalacion-y-configuracion-de-Material\"><a href=\"#2-Instalacion-y-configuracion-de-Material\" class=\"headerlink\" title=\"2. Instalación y configuración de Material\"></a>2. Instalación y configuración de Material</h1><p>Por muchas funcionalidades que aporte un <em>framework</em> como Angular, siempre necesitaremos echar mano de alguna <strong>librería de terceros</strong>. Normalmente eso implica instalarla con <em>npm</em>, importar sus módulos en Angular y en ocasiones alguna configuración extra.</p>\n<p>Pero algunos proyectos ha adoptado la librería <em>schematics</em> para facilitar la adopción de sus librerías. Es el caso de <strong>Angular Material</strong>.</p>\n<h2 id=\"2-1-Agregar-dependencias-con-schematics\"><a href=\"#2-1-Agregar-dependencias-con-schematics\" class=\"headerlink\" title=\"2.1 Agregar dependencias con schematics\"></a>2.1 Agregar dependencias con schematics</h2><p>Para agregar <em>Material</em> un proyecto basta con usar el comando <code>add</code> del CLI.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @angular/material --project=schemat</span><br></pre></td></tr></table></figure>\n\n<p>Esto instalará y anotará la dependencia de <code>@angular/material</code> y otros paquetes necesarios. Pero además los registrará en <code>AppModule</code> y lo configurará.</p>\n<h2 id=\"2-2-Estilos-iconos-y-temas-basicos\"><a href=\"#2-2-Estilos-iconos-y-temas-basicos\" class=\"headerlink\" title=\"2.2 Estilos, iconos y temas básicos\"></a>2.2 Estilos, iconos y temas básicos</h2><p>En el <code>index.html</code> se insertarán los enlaces a las hojas de estilos con fuentes e iconos. En el <code>styles.css</code> podremos importar el tema de <em>Material</em> que nos guste.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&#x27;~@angular/material/prebuilt-themes/indigo-pink.css&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Componentes-basicos\"><a href=\"#3-Componentes-basicos\" class=\"headerlink\" title=\"3. Componentes básicos\"></a>3. Componentes básicos</h1><p><strong>Angular Material</strong> es mucho más que un <em>css</em>. El proyecto te ofrece más de una docena de componentes visuales para crear páginas web de aspecto y comportamiento profesional.</p>\n<p>Por si fuera poco, ofrece sus propias plantillas de <em>schematics</em>, de forma que podemos crear pantallas con el CLI y luego trabajar sobre ellas.</p>\n<h2 id=\"3-1-Navegacion-y-layout\"><a href=\"#3-1-Navegacion-y-layout\" class=\"headerlink\" title=\"3.1 Navegación y layout\"></a>3.1 Navegación y layout</h2><p>Para empezar vamos a crear el armazón de la aplicación, con su menú y su espacio para cargar contenido. Después pondremos la primera piedra con un dashboard en la raíz de la web.</p>\n<h3 id=\"3-1-1-Navegacion\"><a href=\"#3-1-1-Navegacion\" class=\"headerlink\" title=\"3.1.1 Navegación\"></a>3.1.1 Navegación</h3><p>Al control que hará de <em>shell</em> le llaman <code>nav</code> por sus capacidades de navegación. Lo usaremos para generar un componente. La novedad será que la plantilla a partir de la cual se crea no viene por defecto y tenemos que especificarla con más detalle.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:nav shell --project=schemat</span><br></pre></td></tr></table></figure>\n<p>EL resultado es un componente normal, muy adecuado para sustituir todo lo pre-generado por el cli en<code>app.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-shell</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-shell</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-1-2-Dashboard\"><a href=\"#3-1-2-Dashboard\" class=\"headerlink\" title=\"3.1.2 Dashboard\"></a>3.1.2 Dashboard</h3><p>Para la ruta raíz elegí un cuadro de mando. De nuevo es una generación a partir de una plantilla específica. En este caso le he llamado <code>Home</code>.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:dashboard home --project=schemat</span><br></pre></td></tr></table></figure>\n\n<p>Asociamos el componente a la ruta en <code>app-routing</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>Y le buscamos un lugar tanto al enlace como al <code>RouterOutlet</code> en el previamente generado <code>shell.component.html</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">mat-list-item</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/&#x27;]&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Add Content Here --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Componentes-basicos\"><a href=\"#3-2-Componentes-basicos\" class=\"headerlink\" title=\"3.2 Componentes básicos\"></a>3.2 Componentes básicos</h2><p>Por supuesto que una librería de esta envergadura tienen soluciones para todo tipo de situaciones visuales. Para las más comunes incluso ofrecen una plantilla en sus <em>schematics</em> que permite generar prototipos funcionales de formularios, tablas y hasta árboles.</p>\n<h3 id=\"3-2-1-Formularios\"><a href=\"#3-2-1-Formularios\" class=\"headerlink\" title=\"3.2.1 Formularios\"></a>3.2.1 Formularios</h3><p>Puedes generar un <strong>formulario</strong> para crear contactos y después modificarlo o usarlo como guía para crear cualquier otro.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:address-form contact --project=schemat</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-2-Tablas\"><a href=\"#3-2-2-Tablas\" class=\"headerlink\" title=\"3.2.2 Tablas\"></a>3.2.2 Tablas</h3><p>También nos muestran cómo hacer <strong>listados</strong>, con datos de ejemplo incluidos.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:table elements --project=schemat</span><br></pre></td></tr></table></figure>\n<p>El ejemplo permite además ver los datos en páginas y configurar su comportamiento.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mat-paginator</span> #<span class=\"attr\">paginator</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">length</span>]=<span class=\"string\">&quot;dataSource.data.length&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageIndex</span>]=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageSize</span>]=<span class=\"string\">&quot;5&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageSizeOptions</span>]=<span class=\"string\">&quot;[5, 10, 15, 20]&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mat-paginator</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-3-Arboles\"><a href=\"#3-2-3-Arboles\" class=\"headerlink\" title=\"3.2.3 Árboles\"></a>3.2.3 Árboles</h3><p>Termino con un ejemplo de algo reciente, <strong>el árbol</strong>. Este componente se resistió pero por petición popular acabaron integrándolo y ahora puedes mostrar datos jerárquicos como más les gusta a los usuarios: en forma de árboles.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:tree source --project=schemat</span><br></pre></td></tr></table></figure>\n<p>Por supuesto que hay más opciones, todas bien explicadas en la <a href=\"https://material.angular.io/components/categories\">documentación de Angular Material</a>. Es una solución muy recomendable para aplicaciones de gestión, o simplemente para que se vean muy bien en Android y recuerden al <em>look and feel</em> de todo lo que hace Google.</p>\n<p>Con este conocimiento finalizas tu <a href=\"../tag/Introduccion/\">introducción a Angular</a>.  En el tutorial avanzado aprenderás más cosas para programar con Angular 8.Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"Base para una aplicación Angular","date":"2020-03-06T16:57:00.000Z","thumbnail":"/css/images/angular-1_base.png","_content":"\n![base-aplicacion-angular](/images/tutorial-angular-1_base.png)\n\nVamos a crear una **base sobre la que programar una aplicación Angular 9** profesional. Usaremos el _CLI_ para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.\nLa idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: **los módulos y los componentes**.\n\n<!-- more -->\n\nPartimos de la aplicación tal cómo la dejamos en el [Hola Mundo en Angular](../hola-angular-cli/). Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Módulos\n\nLos módulos son **contenedores para almacenar los componentes y servicios** de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.\n\n## 1.1 Anatomía de un módulo\n\nAntes de usar cualquier módulo hay que conocerlo. En Angular **los módulos de declaran como clases de TypeScript**. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función `@NgModule()` que recibe un objeto como único argumento. En las propiedades de ese objeto es donde se configura el módulo.\n\nMira el módulo `AppModule` original que genera el CLI en el fichero `app.module.ts`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n### 1.1.1 Importación de otros módulos\n\nEl módulo `App` también se conoce como **módulo raíz** porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad `imports:[]`, que es un array de punteros a otros módulos.\n\n> En la situación original el módulo principal depende un módulo _custom_ pre-generado (el `AppRoutingModule` que usarás más adelante) y de otro _del framework_ para la presentación en el navegador (el `BrowserModule`).\n\nVeremos esto con más profundidad en el punto 4.\n\n## 1.2 Generación de módulos\n\nHasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de **crear tu primer módulo**. Para eso usaremos otro comando del _cli_, el `ng generate module`. En una ventana del terminal escribe:\n\n```bash\nng g m layout\n```\n\nEsta es la sintaxis abreviada del comando [`ng generate`](https://angular.io/cli/generate) el cual dispone de varios planos de construcción o _schematics_. El que he usado aquí es el de [`module`](https://angular.io/cli/generate#module-command) para la construcción de módulos.\n\n> Si no te gusta teclear en la terminal, también puedes lanzar estos comandos desde [Nx Angular Console](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console)\n\nEl resultado es la creación del fichero `layout/layout.module.ts` con la declaración y decoración del módulo `LayoutModule`.\nEste módulo te servirá de **contenedor para guardar componentes** y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.\n\n```typescript\n@NgModule({\n  imports: [],\n  declarations: []\n})\nexport class LayoutModule {}\n```\n\nPor ahora hay que asegurar que **este módulo será importado por el raíz, el AppModule**. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, LayoutModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n> El módulo raíz, al igual que como verás más tarde con el componente raíz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.\n\n# 2. Componentes\n\nLos módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. **Los componentes son los bloques básicos de construcción de las páginas web en Angular**. Contienen una parte visual en `html` (la Vista) y una funcional en `Typescript` (el Controlador).\n\n> La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero `app.component.ts`. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero o hasta cuatro: (el controlador, con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).\n\n## 2.1 Anatomía de un componente\n\nLos componentes, como el resto de artefactos en Angular, serán **clases TypeScript decoradas** con funciones específicas. En este caso la función es `@Component()` que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'ab-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent {}\n```\n\n**Los componentes definen nuevas etiquetas HTML** para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página `index.html`. El nombre de la nueva etiqueta se conoce como _selector_. En este caso la propiedad `selector: \"ab-root\"` permite el uso de este componente dentro de otro con esta invocación `<ab-root></ab-root>`. En este caso el componente raíz.\n\n> Particularidades del componente raíz. Su nombre oficial es `AppComponent`, y su selector debería llamarse `ab-app`. Está formado a partir del prefijo de la aplicación `ab` y su nombre oficioso `root`. Si no se dice lo contrario el prefijo `app` se usará en todos los componentes propios, pue es asignado por defecto durante la generación de la aplicación. Yo prefiero personalizarlo usando el modificador `--prefix` o `-p` durante el inicio `ng new`.\n\nVolviendo al componente raíz; está destinado a ser usado en la página principal, en el `index.html`. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array `bootstrap: [AppComponent]`, es ahí donde se incluyen los componentes con la capacidad de lanzar _bootstrap_ la aplicación.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, LayoutModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nY en el `index.html`\n\n```html\n<body>\n  <ab-root></ab-root>\n</body>\n```\n\n**La plantilla representa la parte visual** del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad `template` del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero _html_ y referenciarlo como una ruta relativa en la propiedad `templateUrl`.\n\nLa propiedad **`styles` y su gemela `stylesUrl` permiten asignar estilos** _CSS, SASS o LESS_ al componente. Estos estilos se incrustan durante la compilación en los nodos del _DOM_ generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.\n\nLos estilos, ausentes en este ejemplo, podrían incluirse como un array de cadenas, o llevarse a un fichero propio como en el caso de la vista.\n\n```html\n<div style=\"text-align:center\">\n  <h1>Welcome to {{ title }}!</h1>\n  <img width=\"100\" src=\"./assets/logo.png\" />\n</div>\n...\n```\n\n**En la clase del componente nos encontraremos la implementación de su funcionalidad**. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.\n\nUna aplicación web en Angular se monta como un **árbol de componentes**. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.\n\n## 2.2 Generación de componentes\n\nPara **crear nuevos componentes** vamos a usar de nuevo el comando `generate` del _CLI_ . Pero ahora con los planos para construir un componente. La [sintaxis completa](https://angular.io/cli/generate#component-command) del comando `ng generate component` o abreviadamente `ng g c` permite crear componentes en diversas formas.\n\nCasi **todas las páginas tienen una estructura** similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.\n\nEjecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.\n\n```shell\nng g c layout/header --export\nng g c layout/nav --export\nng g c layout/aside --export\nng g c layout/footer --export\n```\n\nFíjate en un componente como el Header y en el fichero `header.component.ts`. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: `app-header` y `HeaderComponent`. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre `App` no coincide con su selector `root`.\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'ab-header',\n  templateUrl: './header.component.html',\n  styles: []\n})\nexport class HeaderComponent implements OnInit {\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\nY esta es su vista asociada. La cual es de nuevo una composición de otros selectores. Estamos creando un frondoso árbol de componentes.\n\n```html\n<header>\n  <strong> {{ title }} </strong>\n</header>\n```\n\n## 2.3 Estilos en los componentes\n\nLa aplicación de estilos y css en los componentes merecería un tema aparte. Para empezar quiero que seas consciente de que lo que programes es código fuente. Lo escribirás en TypeScript, algo muy parecido al Html y los estilos en Css, LASS, SCSS...\n\nPero todo ese código fuente no es lo que ejecuta el navegador. Ni mucho menos. Antes tiene que compilarse y generar JavaScript, que al ejecutarse en el navegador crea de nuevo Html, JS y estilos...\n\nEstos estilos van ya incrustados entre los elementos. Y Angular los aplica componente a componente, sin herencia ni transmisión a los descendientes. Este es el comportamiento por defecto. Por supuesto, todo es customizable. Pero en este curso lo dejaremos tal cual viene de fábrica.\n\nAsí que los estilos se definen en el fichero apropiado. Se puede usa los selectores de clase e identificador estándar de CSS. Pero también se puede usar el selector propio `:host` el cual apunta al elemento html que creará el componente cuando se ejecute.\n\nPor ejemplo en `app.component.css`\n\n```css\n:host {\n  min-height: 100vh;\n}\n:host > main {\n  display: flex;\n  flex: 1 1 auto;\n  flex-direction: column;\n}\n:host > main > article {\n  flex: 1 1 auto;\n}\n\n@media (min-width: 768px) {\n  :host > main {\n    flex-direction: row;\n  }\n}\n\n```\n\n# 3 Visibilidad entre componentes\n\nLa clave del código limpio es **exponer funcionalidad de manera expresiva pero ocultar la implementación**. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la **programación basada en componentes** podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.\n\n## 3.1 Componentes públicos y privados\n\nLos componentes no deciden por sí mismos su **visibilidad**. Cuando un componente es generado se declara en un módulo contenedor en su propiedad `declares:[]`. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero **si quieres usarlo desde fuera tendrás que exportarlo**. Eso se hace en la propiedad `exports:[]` del módulo en el que se crea.\n\nLa exportación debe hacerse a mano incluyendo el componente en el array, o indicarse con el _flag_ `--export` para que lo haga el _cli_. Esto es lo que se ha hecho en el módulo _Layout_ para poder exportar el componente `header`.\n\n```typescript\n@NgModule({\n  declarations: [HeaderComponent, FooterComponent, NavComponent, AsideComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [HeaderComponent, FooterComponent, NavComponent, AsideComponent],\n})\nexport class LayoutModule {}\n```\n\n> **Los componentes privados suelen ser sencillos**. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador `--flat` ni siquiera generan carpeta propia.\n\nPor supuesto que `HeaderComponent` necesitará la propiedad `title` y también la moveremos desde `app.component.ts`. Dejando de esa manera el componente raíz en los huesos.\n\n## 3.2 Importación y exportación entre módulos\n\nQue un componente sea público es la primera condición para que se consuma fuera de su módulo. Ahora falta que quién lo quiera usar, utilice el selector `<ab-header>` importe su módulo `LayoutModule`. Esto lo haremos en el `AppModule` para que lo use el `AppComponent`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, LayoutModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nComo regla general, **cuando en una plantilla se incruste otro componente**, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.\n\n### 3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript\n\nSi es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el `app.module.ts` son algo así:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n```\n\nEstas **sentencias de importación son propias del lenguaje** y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros _TypeScript_. La importación se realiza en base a convenios personalizables. Si empieza con `./` entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio `node_modules` y se trata como código de terceros.\n\n> En general no tendrás que preocuparte de estas importaciones físicas, pues el _VSCode_ y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código\n\n# 4. Transitividad y Organización\n\n## 4.1 Transitividad en una cadena de módulos\n\nUn problema que reforzará tu conocimiento sobre el sistema modular surgirá al mover la etiqueta `<router-outlet></router-outlet>` del `app.component.html` al componente _Main_. En su vista `main.component.html` tendrás algo así.\n\n```html\n<h2>Here are some links to help you start:</h2>\n<ul>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://angular.io/tutorial\">Tour of Heroes</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://angular.io/cli\">CLI Documentation</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.angular.io/\">Angular blog</a></h2>\n  </li>\n</ul>\n<router-outlet></router-outlet>\n```\n\nTodo son etiquetas _html_ estándar salvo la última `<router-outlet></router-outlet>`. El propósito de este componte lo veremos en la próxima lección dedicada a enrutado. Pero por ahora más que una ayuda es un dolor de cabeza. Resulta que el `RouterOutletComponent` está declarado en un módulo del _framework_ llamado `RouterModule`. Dicho módulo fue importado de manera automática durante la generación del código inicial, pero ¿Dónde?.\n\nComo digo el tema del enrutado es un [capítulo aparte](../paginas-y-rutas-angular-spa/), pero las relaciones de los módulos debes conocerlas cuanto antes. Durante la generación inicial se crearon dos módulos: el `AppModule`, ya estudiado, y su asistente para enrutado `AppRoutingModule`. Este último aún no lo hemos visitado. Su contenido es:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nconst routes: Routes = [];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nObviando la por ahora inútil instrucción `.forRoutes(routes)`, llama la atención que este módulo es dependiente del famoso `RouterModule`, es decir lo importa en su array `imports:[]`. Pero además va y lo exporta haciendo uso de la interesante **propiedad transitiva de los módulos**. Cada módulo puede exportar sus propios componentes o los de terceros. Incluso puede exportar todo un módulo al completo. Al hacerlo así, el `AppRoutingModule` está poniendo a disposición del `AppModule` todo el contenido de `RouterModule`, incluido el por ahora fastidioso `RouterOutletComponent`.\n\n## 4.2 Organización de la aplicación en módulos\n\nTodos los programas tiene partes repetitivas. Los principios de **organización y código limpio** nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.\n\nSon **componentes de infraestructura**. Conviene guardarlos en una carpeta especial. Aquí la he llamado _shared_, pero _tools_, _common_, o _lib_ suelen ser otros nombres habituales. Para reforzar tu práctica con el CLI escribe el siguiente comando que aprovecharemos en el futuro.\n\n```bash\nng g m shared\nng g c shared/go-home --export=true\n```\n\n```html\n<a href=\"\"> Go home 🏠</a>\n```\n\nY puedo usarlo por ejemplo en el Header\n\n```html\n<header>\n  <ab-go-home></ab-go-home><strong> {{ title }} </strong>\n</header>\n```\n\n> En esta aplicación hasta ahora no es nada funcional,!y ya tiene una docena de cosas entre módulos y componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes.\n\n### Un ejemplo práctico recopilatorio para la página _home_.\n\n```bash\nng g m home -m app.module.ts\nng g c home/home --export --flat\n```\n\n### home.component.html\n```html\n<h2> Welcome 🏡 !</h2>\n<nav>\n  <p>\n    <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">💻 Curso de Introducción</a>\n  </p>\n  <p>\n    <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">💻 Curso Avanzado</a>\n  </p>\n</nav>\n```\n\nY podemos incluir este componente en el contenido del layout del componente principal `AppComponent`.\n\n```html\n<ab-header></ab-header>\n<main>\n  <ab-nav></ab-nav>\n  <article>\n    <router-outlet></router-outlet>\n    <ab-home></ab-home>\n  </article>\n  <ab-aside></ab-aside>\n</main>\n<ab-footer></ab-footer>\n```\n\n### El bosque de módulos a vista de pájaro\n\n```\nAppModule\n|\n+--AppRoutingModule\n|  |\n|  +--RouterModule\n|\n+--BrowserModule\n|\n+--HomeModule\n|\n+--LayoutModule\n   |\n   +--CommonModule\n   |\n   +--RouterModule\n   |\n   +--SharedModule\n```\n\n### El bosque de componentes a vista de pájaro\n\n```\nAppComponent\n  |\n  +--HeaderComponent\n  |\n  +--NavComponent\n  |\n  +--RouterOutletComponent\n  |\n  +--HomeComponent\n  |\n  +--FooterComponent\n\n```\n\nCon esto tendrás una base para una aplicación _Angular 9_. Sigue esta serie para añadirle funcionalidad mediante [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/) mientras aprendes a programar con Angular9. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng_1-Base-aplicacion-Angular.md","raw":"---\ntitle: Base para una aplicación Angular\npermalink: base-aplicacion-angular\ndate: 2020-03-06 17:57:00\ntags:\n  - Angular\n  - CLI\n  - Tutorial\n  - Introducción\n  - Angular9\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-1_base.png\n---\n\n![base-aplicacion-angular](/images/tutorial-angular-1_base.png)\n\nVamos a crear una **base sobre la que programar una aplicación Angular 9** profesional. Usaremos el _CLI_ para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.\nLa idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: **los módulos y los componentes**.\n\n<!-- more -->\n\nPartimos de la aplicación tal cómo la dejamos en el [Hola Mundo en Angular](../hola-angular-cli/). Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Módulos\n\nLos módulos son **contenedores para almacenar los componentes y servicios** de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.\n\n## 1.1 Anatomía de un módulo\n\nAntes de usar cualquier módulo hay que conocerlo. En Angular **los módulos de declaran como clases de TypeScript**. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función `@NgModule()` que recibe un objeto como único argumento. En las propiedades de ese objeto es donde se configura el módulo.\n\nMira el módulo `AppModule` original que genera el CLI en el fichero `app.module.ts`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n### 1.1.1 Importación de otros módulos\n\nEl módulo `App` también se conoce como **módulo raíz** porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad `imports:[]`, que es un array de punteros a otros módulos.\n\n> En la situación original el módulo principal depende un módulo _custom_ pre-generado (el `AppRoutingModule` que usarás más adelante) y de otro _del framework_ para la presentación en el navegador (el `BrowserModule`).\n\nVeremos esto con más profundidad en el punto 4.\n\n## 1.2 Generación de módulos\n\nHasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de **crear tu primer módulo**. Para eso usaremos otro comando del _cli_, el `ng generate module`. En una ventana del terminal escribe:\n\n```bash\nng g m layout\n```\n\nEsta es la sintaxis abreviada del comando [`ng generate`](https://angular.io/cli/generate) el cual dispone de varios planos de construcción o _schematics_. El que he usado aquí es el de [`module`](https://angular.io/cli/generate#module-command) para la construcción de módulos.\n\n> Si no te gusta teclear en la terminal, también puedes lanzar estos comandos desde [Nx Angular Console](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console)\n\nEl resultado es la creación del fichero `layout/layout.module.ts` con la declaración y decoración del módulo `LayoutModule`.\nEste módulo te servirá de **contenedor para guardar componentes** y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.\n\n```typescript\n@NgModule({\n  imports: [],\n  declarations: []\n})\nexport class LayoutModule {}\n```\n\nPor ahora hay que asegurar que **este módulo será importado por el raíz, el AppModule**. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, LayoutModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n> El módulo raíz, al igual que como verás más tarde con el componente raíz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.\n\n# 2. Componentes\n\nLos módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. **Los componentes son los bloques básicos de construcción de las páginas web en Angular**. Contienen una parte visual en `html` (la Vista) y una funcional en `Typescript` (el Controlador).\n\n> La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero `app.component.ts`. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero o hasta cuatro: (el controlador, con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).\n\n## 2.1 Anatomía de un componente\n\nLos componentes, como el resto de artefactos en Angular, serán **clases TypeScript decoradas** con funciones específicas. En este caso la función es `@Component()` que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'ab-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent {}\n```\n\n**Los componentes definen nuevas etiquetas HTML** para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página `index.html`. El nombre de la nueva etiqueta se conoce como _selector_. En este caso la propiedad `selector: \"ab-root\"` permite el uso de este componente dentro de otro con esta invocación `<ab-root></ab-root>`. En este caso el componente raíz.\n\n> Particularidades del componente raíz. Su nombre oficial es `AppComponent`, y su selector debería llamarse `ab-app`. Está formado a partir del prefijo de la aplicación `ab` y su nombre oficioso `root`. Si no se dice lo contrario el prefijo `app` se usará en todos los componentes propios, pue es asignado por defecto durante la generación de la aplicación. Yo prefiero personalizarlo usando el modificador `--prefix` o `-p` durante el inicio `ng new`.\n\nVolviendo al componente raíz; está destinado a ser usado en la página principal, en el `index.html`. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array `bootstrap: [AppComponent]`, es ahí donde se incluyen los componentes con la capacidad de lanzar _bootstrap_ la aplicación.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, LayoutModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nY en el `index.html`\n\n```html\n<body>\n  <ab-root></ab-root>\n</body>\n```\n\n**La plantilla representa la parte visual** del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad `template` del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero _html_ y referenciarlo como una ruta relativa en la propiedad `templateUrl`.\n\nLa propiedad **`styles` y su gemela `stylesUrl` permiten asignar estilos** _CSS, SASS o LESS_ al componente. Estos estilos se incrustan durante la compilación en los nodos del _DOM_ generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.\n\nLos estilos, ausentes en este ejemplo, podrían incluirse como un array de cadenas, o llevarse a un fichero propio como en el caso de la vista.\n\n```html\n<div style=\"text-align:center\">\n  <h1>Welcome to {{ title }}!</h1>\n  <img width=\"100\" src=\"./assets/logo.png\" />\n</div>\n...\n```\n\n**En la clase del componente nos encontraremos la implementación de su funcionalidad**. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.\n\nUna aplicación web en Angular se monta como un **árbol de componentes**. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.\n\n## 2.2 Generación de componentes\n\nPara **crear nuevos componentes** vamos a usar de nuevo el comando `generate` del _CLI_ . Pero ahora con los planos para construir un componente. La [sintaxis completa](https://angular.io/cli/generate#component-command) del comando `ng generate component` o abreviadamente `ng g c` permite crear componentes en diversas formas.\n\nCasi **todas las páginas tienen una estructura** similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.\n\nEjecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.\n\n```shell\nng g c layout/header --export\nng g c layout/nav --export\nng g c layout/aside --export\nng g c layout/footer --export\n```\n\nFíjate en un componente como el Header y en el fichero `header.component.ts`. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: `app-header` y `HeaderComponent`. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre `App` no coincide con su selector `root`.\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'ab-header',\n  templateUrl: './header.component.html',\n  styles: []\n})\nexport class HeaderComponent implements OnInit {\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\nY esta es su vista asociada. La cual es de nuevo una composición de otros selectores. Estamos creando un frondoso árbol de componentes.\n\n```html\n<header>\n  <strong> {{ title }} </strong>\n</header>\n```\n\n## 2.3 Estilos en los componentes\n\nLa aplicación de estilos y css en los componentes merecería un tema aparte. Para empezar quiero que seas consciente de que lo que programes es código fuente. Lo escribirás en TypeScript, algo muy parecido al Html y los estilos en Css, LASS, SCSS...\n\nPero todo ese código fuente no es lo que ejecuta el navegador. Ni mucho menos. Antes tiene que compilarse y generar JavaScript, que al ejecutarse en el navegador crea de nuevo Html, JS y estilos...\n\nEstos estilos van ya incrustados entre los elementos. Y Angular los aplica componente a componente, sin herencia ni transmisión a los descendientes. Este es el comportamiento por defecto. Por supuesto, todo es customizable. Pero en este curso lo dejaremos tal cual viene de fábrica.\n\nAsí que los estilos se definen en el fichero apropiado. Se puede usa los selectores de clase e identificador estándar de CSS. Pero también se puede usar el selector propio `:host` el cual apunta al elemento html que creará el componente cuando se ejecute.\n\nPor ejemplo en `app.component.css`\n\n```css\n:host {\n  min-height: 100vh;\n}\n:host > main {\n  display: flex;\n  flex: 1 1 auto;\n  flex-direction: column;\n}\n:host > main > article {\n  flex: 1 1 auto;\n}\n\n@media (min-width: 768px) {\n  :host > main {\n    flex-direction: row;\n  }\n}\n\n```\n\n# 3 Visibilidad entre componentes\n\nLa clave del código limpio es **exponer funcionalidad de manera expresiva pero ocultar la implementación**. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la **programación basada en componentes** podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.\n\n## 3.1 Componentes públicos y privados\n\nLos componentes no deciden por sí mismos su **visibilidad**. Cuando un componente es generado se declara en un módulo contenedor en su propiedad `declares:[]`. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero **si quieres usarlo desde fuera tendrás que exportarlo**. Eso se hace en la propiedad `exports:[]` del módulo en el que se crea.\n\nLa exportación debe hacerse a mano incluyendo el componente en el array, o indicarse con el _flag_ `--export` para que lo haga el _cli_. Esto es lo que se ha hecho en el módulo _Layout_ para poder exportar el componente `header`.\n\n```typescript\n@NgModule({\n  declarations: [HeaderComponent, FooterComponent, NavComponent, AsideComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [HeaderComponent, FooterComponent, NavComponent, AsideComponent],\n})\nexport class LayoutModule {}\n```\n\n> **Los componentes privados suelen ser sencillos**. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador `--flat` ni siquiera generan carpeta propia.\n\nPor supuesto que `HeaderComponent` necesitará la propiedad `title` y también la moveremos desde `app.component.ts`. Dejando de esa manera el componente raíz en los huesos.\n\n## 3.2 Importación y exportación entre módulos\n\nQue un componente sea público es la primera condición para que se consuma fuera de su módulo. Ahora falta que quién lo quiera usar, utilice el selector `<ab-header>` importe su módulo `LayoutModule`. Esto lo haremos en el `AppModule` para que lo use el `AppComponent`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, LayoutModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nComo regla general, **cuando en una plantilla se incruste otro componente**, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.\n\n### 3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript\n\nSi es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el `app.module.ts` son algo así:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n```\n\nEstas **sentencias de importación son propias del lenguaje** y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros _TypeScript_. La importación se realiza en base a convenios personalizables. Si empieza con `./` entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio `node_modules` y se trata como código de terceros.\n\n> En general no tendrás que preocuparte de estas importaciones físicas, pues el _VSCode_ y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código\n\n# 4. Transitividad y Organización\n\n## 4.1 Transitividad en una cadena de módulos\n\nUn problema que reforzará tu conocimiento sobre el sistema modular surgirá al mover la etiqueta `<router-outlet></router-outlet>` del `app.component.html` al componente _Main_. En su vista `main.component.html` tendrás algo así.\n\n```html\n<h2>Here are some links to help you start:</h2>\n<ul>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://angular.io/tutorial\">Tour of Heroes</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://angular.io/cli\">CLI Documentation</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.angular.io/\">Angular blog</a></h2>\n  </li>\n</ul>\n<router-outlet></router-outlet>\n```\n\nTodo son etiquetas _html_ estándar salvo la última `<router-outlet></router-outlet>`. El propósito de este componte lo veremos en la próxima lección dedicada a enrutado. Pero por ahora más que una ayuda es un dolor de cabeza. Resulta que el `RouterOutletComponent` está declarado en un módulo del _framework_ llamado `RouterModule`. Dicho módulo fue importado de manera automática durante la generación del código inicial, pero ¿Dónde?.\n\nComo digo el tema del enrutado es un [capítulo aparte](../paginas-y-rutas-angular-spa/), pero las relaciones de los módulos debes conocerlas cuanto antes. Durante la generación inicial se crearon dos módulos: el `AppModule`, ya estudiado, y su asistente para enrutado `AppRoutingModule`. Este último aún no lo hemos visitado. Su contenido es:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nconst routes: Routes = [];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nObviando la por ahora inútil instrucción `.forRoutes(routes)`, llama la atención que este módulo es dependiente del famoso `RouterModule`, es decir lo importa en su array `imports:[]`. Pero además va y lo exporta haciendo uso de la interesante **propiedad transitiva de los módulos**. Cada módulo puede exportar sus propios componentes o los de terceros. Incluso puede exportar todo un módulo al completo. Al hacerlo así, el `AppRoutingModule` está poniendo a disposición del `AppModule` todo el contenido de `RouterModule`, incluido el por ahora fastidioso `RouterOutletComponent`.\n\n## 4.2 Organización de la aplicación en módulos\n\nTodos los programas tiene partes repetitivas. Los principios de **organización y código limpio** nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.\n\nSon **componentes de infraestructura**. Conviene guardarlos en una carpeta especial. Aquí la he llamado _shared_, pero _tools_, _common_, o _lib_ suelen ser otros nombres habituales. Para reforzar tu práctica con el CLI escribe el siguiente comando que aprovecharemos en el futuro.\n\n```bash\nng g m shared\nng g c shared/go-home --export=true\n```\n\n```html\n<a href=\"\"> Go home 🏠</a>\n```\n\nY puedo usarlo por ejemplo en el Header\n\n```html\n<header>\n  <ab-go-home></ab-go-home><strong> {{ title }} </strong>\n</header>\n```\n\n> En esta aplicación hasta ahora no es nada funcional,!y ya tiene una docena de cosas entre módulos y componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes.\n\n### Un ejemplo práctico recopilatorio para la página _home_.\n\n```bash\nng g m home -m app.module.ts\nng g c home/home --export --flat\n```\n\n### home.component.html\n```html\n<h2> Welcome 🏡 !</h2>\n<nav>\n  <p>\n    <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">💻 Curso de Introducción</a>\n  </p>\n  <p>\n    <a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders\">💻 Curso Avanzado</a>\n  </p>\n</nav>\n```\n\nY podemos incluir este componente en el contenido del layout del componente principal `AppComponent`.\n\n```html\n<ab-header></ab-header>\n<main>\n  <ab-nav></ab-nav>\n  <article>\n    <router-outlet></router-outlet>\n    <ab-home></ab-home>\n  </article>\n  <ab-aside></ab-aside>\n</main>\n<ab-footer></ab-footer>\n```\n\n### El bosque de módulos a vista de pájaro\n\n```\nAppModule\n|\n+--AppRoutingModule\n|  |\n|  +--RouterModule\n|\n+--BrowserModule\n|\n+--HomeModule\n|\n+--LayoutModule\n   |\n   +--CommonModule\n   |\n   +--RouterModule\n   |\n   +--SharedModule\n```\n\n### El bosque de componentes a vista de pájaro\n\n```\nAppComponent\n  |\n  +--HeaderComponent\n  |\n  +--NavComponent\n  |\n  +--RouterOutletComponent\n  |\n  +--HomeComponent\n  |\n  +--FooterComponent\n\n```\n\nCon esto tendrás una base para una aplicación _Angular 9_. Sigue esta serie para añadirle funcionalidad mediante [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/) mientras aprendes a programar con Angular9. Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng_1-Base-aplicacion-Angular","published":1,"updated":"2023-07-02T10:25:58.480Z","__permalink":"base-aplicacion-angular","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fk001ve09645teb74q","content":"<p><img src=\"/images/tutorial-angular-1_base.png\" alt=\"base-aplicacion-angular\"></p>\n<p>Vamos a crear una <strong>base sobre la que programar una aplicación Angular 9</strong> profesional. Usaremos el <em>CLI</em> para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.<br>La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: <strong>los módulos y los componentes</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partimos de la aplicación tal cómo la dejamos en el <a href=\"../hola-angular-cli/\">Hola Mundo en Angular</a>. Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Modulos\"><a href=\"#1-Modulos\" class=\"headerlink\" title=\"1. Módulos\"></a>1. Módulos</h1><p>Los módulos son <strong>contenedores para almacenar los componentes y servicios</strong> de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.</p>\n<h2 id=\"1-1-Anatomia-de-un-modulo\"><a href=\"#1-1-Anatomia-de-un-modulo\" class=\"headerlink\" title=\"1.1 Anatomía de un módulo\"></a>1.1 Anatomía de un módulo</h2><p>Antes de usar cualquier módulo hay que conocerlo. En Angular <strong>los módulos de declaran como clases de TypeScript</strong>. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función <code>@NgModule()</code> que recibe un objeto como único argumento. En las propiedades de ese objeto es donde se configura el módulo.</p>\n<p>Mira el módulo <code>AppModule</code> original que genera el CLI en el fichero <code>app.module.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">AppRoutingModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-1-Importacion-de-otros-modulos\"><a href=\"#1-1-1-Importacion-de-otros-modulos\" class=\"headerlink\" title=\"1.1.1 Importación de otros módulos\"></a>1.1.1 Importación de otros módulos</h3><p>El módulo <code>App</code> también se conoce como <strong>módulo raíz</strong> porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad <code>imports:[]</code>, que es un array de punteros a otros módulos.</p>\n<blockquote>\n<p>En la situación original el módulo principal depende un módulo <em>custom</em> pre-generado (el <code>AppRoutingModule</code> que usarás más adelante) y de otro <em>del framework</em> para la presentación en el navegador (el <code>BrowserModule</code>).</p>\n</blockquote>\n<p>Veremos esto con más profundidad en el punto 4.</p>\n<h2 id=\"1-2-Generacion-de-modulos\"><a href=\"#1-2-Generacion-de-modulos\" class=\"headerlink\" title=\"1.2 Generación de módulos\"></a>1.2 Generación de módulos</h2><p>Hasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de <strong>crear tu primer módulo</strong>. Para eso usaremos otro comando del <em>cli</em>, el <code>ng generate module</code>. En una ventana del terminal escribe:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m layout</span><br></pre></td></tr></table></figure>\n\n<p>Esta es la sintaxis abreviada del comando <a href=\"https://angular.io/cli/generate\"><code>ng generate</code></a> el cual dispone de varios planos de construcción o <em>schematics</em>. El que he usado aquí es el de <a href=\"https://angular.io/cli/generate#module-command\"><code>module</code></a> para la construcción de módulos.</p>\n<blockquote>\n<p>Si no te gusta teclear en la terminal, también puedes lanzar estos comandos desde <a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\">Nx Angular Console</a></p>\n</blockquote>\n<p>El resultado es la creación del fichero <code>layout/layout.module.ts</code> con la declaración y decoración del módulo <code>LayoutModule</code>.<br>Este módulo te servirá de <strong>contenedor para guardar componentes</strong> y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LayoutModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Por ahora hay que asegurar que <strong>este módulo será importado por el raíz, el AppModule</strong>. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">AppRoutingModule</span>, <span class=\"title class_\">LayoutModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>El módulo raíz, al igual que como verás más tarde con el componente raíz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.</p>\n</blockquote>\n<h1 id=\"2-Componentes\"><a href=\"#2-Componentes\" class=\"headerlink\" title=\"2. Componentes\"></a>2. Componentes</h1><p>Los módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. <strong>Los componentes son los bloques básicos de construcción de las páginas web en Angular</strong>. Contienen una parte visual en <code>html</code> (la Vista) y una funcional en <code>Typescript</code> (el Controlador).</p>\n<blockquote>\n<p>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero <code>app.component.ts</code>. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero o hasta cuatro: (el controlador, con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).</p>\n</blockquote>\n<h2 id=\"2-1-Anatomia-de-un-componente\"><a href=\"#2-1-Anatomia-de-un-componente\" class=\"headerlink\" title=\"2.1 Anatomía de un componente\"></a>2.1 Anatomía de un componente</h2><p>Los componentes, como el resto de artefactos en Angular, serán <strong>clases TypeScript decoradas</strong> con funciones específicas. En este caso la función es <code>@Component()</code> que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Los componentes definen nuevas etiquetas HTML</strong> para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página <code>index.html</code>. El nombre de la nueva etiqueta se conoce como <em>selector</em>. En este caso la propiedad <code>selector: &quot;ab-root&quot;</code> permite el uso de este componente dentro de otro con esta invocación <code>&lt;ab-root&gt;&lt;/ab-root&gt;</code>. En este caso el componente raíz.</p>\n<blockquote>\n<p>Particularidades del componente raíz. Su nombre oficial es <code>AppComponent</code>, y su selector debería llamarse <code>ab-app</code>. Está formado a partir del prefijo de la aplicación <code>ab</code> y su nombre oficioso <code>root</code>. Si no se dice lo contrario el prefijo <code>app</code> se usará en todos los componentes propios, pue es asignado por defecto durante la generación de la aplicación. Yo prefiero personalizarlo usando el modificador <code>--prefix</code> o <code>-p</code> durante el inicio <code>ng new</code>.</p>\n</blockquote>\n<p>Volviendo al componente raíz; está destinado a ser usado en la página principal, en el <code>index.html</code>. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array <code>bootstrap: [AppComponent]</code>, es ahí donde se incluyen los componentes con la capacidad de lanzar <em>bootstrap</em> la aplicación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">AppRoutingModule</span>, <span class=\"title class_\">LayoutModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y en el <code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>La plantilla representa la parte visual</strong> del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad <code>template</code> del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero <em>html</em> y referenciarlo como una ruta relativa en la propiedad <code>templateUrl</code>.</p>\n<p>La propiedad <strong><code>styles</code> y su gemela <code>stylesUrl</code> permiten asignar estilos</strong> <em>CSS, SASS o LESS</em> al componente. Estos estilos se incrustan durante la compilación en los nodos del <em>DOM</em> generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.</p>\n<p>Los estilos, ausentes en este ejemplo, podrían incluirse como un array de cadenas, o llevarse a un fichero propio como en el caso de la vista.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to &#123;&#123; title &#125;&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./assets/logo.png&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>En la clase del componente nos encontraremos la implementación de su funcionalidad</strong>. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.</p>\n<p>Una aplicación web en Angular se monta como un <strong>árbol de componentes</strong>. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.</p>\n<h2 id=\"2-2-Generacion-de-componentes\"><a href=\"#2-2-Generacion-de-componentes\" class=\"headerlink\" title=\"2.2 Generación de componentes\"></a>2.2 Generación de componentes</h2><p>Para <strong>crear nuevos componentes</strong> vamos a usar de nuevo el comando <code>generate</code> del <em>CLI</em> . Pero ahora con los planos para construir un componente. La <a href=\"https://angular.io/cli/generate#component-command\">sintaxis completa</a> del comando <code>ng generate component</code> o abreviadamente <code>ng g c</code> permite crear componentes en diversas formas.</p>\n<p>Casi <strong>todas las páginas tienen una estructura</strong> similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.</p>\n<p>Ejecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c layout/header --export</span><br><span class=\"line\">ng g c layout/nav --export</span><br><span class=\"line\">ng g c layout/aside --export</span><br><span class=\"line\">ng g c layout/footer --export</span><br></pre></td></tr></table></figure>\n\n<p>Fíjate en un componente como el Header y en el fichero <code>header.component.ts</code>. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: <code>app-header</code> y <code>HeaderComponent</code>. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre <code>App</code> no coincide con su selector <code>root</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-header&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./header.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeaderComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y esta es su vista asociada. La cual es de nuevo una composición de otros selectores. Estamos creando un frondoso árbol de componentes.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span> &#123;&#123; title &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-Estilos-en-los-componentes\"><a href=\"#2-3-Estilos-en-los-componentes\" class=\"headerlink\" title=\"2.3 Estilos en los componentes\"></a>2.3 Estilos en los componentes</h2><p>La aplicación de estilos y css en los componentes merecería un tema aparte. Para empezar quiero que seas consciente de que lo que programes es código fuente. Lo escribirás en TypeScript, algo muy parecido al Html y los estilos en Css, LASS, SCSS…</p>\n<p>Pero todo ese código fuente no es lo que ejecuta el navegador. Ni mucho menos. Antes tiene que compilarse y generar JavaScript, que al ejecutarse en el navegador crea de nuevo Html, JS y estilos…</p>\n<p>Estos estilos van ya incrustados entre los elementos. Y Angular los aplica componente a componente, sin herencia ni transmisión a los descendientes. Este es el comportamiento por defecto. Por supuesto, todo es customizable. Pero en este curso lo dejaremos tal cual viene de fábrica.</p>\n<p>Así que los estilos se definen en el fichero apropiado. Se puede usa los selectores de clase e identificador estándar de CSS. Pero también se puede usar el selector propio <code>:host</code> el cual apunta al elemento html que creará el componente cuando se ejecute.</p>\n<p>Por ejemplo en <code>app.component.css</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:host</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:host</span> &gt; <span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:host</span> &gt; <span class=\"selector-tag\">main</span> &gt; <span class=\"selector-tag\">article</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:host</span> &gt; <span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Visibilidad-entre-componentes\"><a href=\"#3-Visibilidad-entre-componentes\" class=\"headerlink\" title=\"3 Visibilidad entre componentes\"></a>3 Visibilidad entre componentes</h1><p>La clave del código limpio es <strong>exponer funcionalidad de manera expresiva pero ocultar la implementación</strong>. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la <strong>programación basada en componentes</strong> podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.</p>\n<h2 id=\"3-1-Componentes-publicos-y-privados\"><a href=\"#3-1-Componentes-publicos-y-privados\" class=\"headerlink\" title=\"3.1 Componentes públicos y privados\"></a>3.1 Componentes públicos y privados</h2><p>Los componentes no deciden por sí mismos su <strong>visibilidad</strong>. Cuando un componente es generado se declara en un módulo contenedor en su propiedad <code>declares:[]</code>. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero <strong>si quieres usarlo desde fuera tendrás que exportarlo</strong>. Eso se hace en la propiedad <code>exports:[]</code> del módulo en el que se crea.</p>\n<p>La exportación debe hacerse a mano incluyendo el componente en el array, o indicarse con el <em>flag</em> <code>--export</code> para que lo haga el <em>cli</em>. Esto es lo que se ha hecho en el módulo <em>Layout</em> para poder exportar el componente <code>header</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">HeaderComponent</span>, <span class=\"title class_\">FooterComponent</span>, <span class=\"title class_\">NavComponent</span>, <span class=\"title class_\">AsideComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">CommonModule</span>, <span class=\"title class_\">RouterModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">HeaderComponent</span>, <span class=\"title class_\">FooterComponent</span>, <span class=\"title class_\">NavComponent</span>, <span class=\"title class_\">AsideComponent</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LayoutModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>Los componentes privados suelen ser sencillos</strong>. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador <code>--flat</code> ni siquiera generan carpeta propia.</p>\n</blockquote>\n<p>Por supuesto que <code>HeaderComponent</code> necesitará la propiedad <code>title</code> y también la moveremos desde <code>app.component.ts</code>. Dejando de esa manera el componente raíz en los huesos.</p>\n<h2 id=\"3-2-Importacion-y-exportacion-entre-modulos\"><a href=\"#3-2-Importacion-y-exportacion-entre-modulos\" class=\"headerlink\" title=\"3.2 Importación y exportación entre módulos\"></a>3.2 Importación y exportación entre módulos</h2><p>Que un componente sea público es la primera condición para que se consuma fuera de su módulo. Ahora falta que quién lo quiera usar, utilice el selector <code>&lt;ab-header&gt;</code> importe su módulo <code>LayoutModule</code>. Esto lo haremos en el <code>AppModule</code> para que lo use el <code>AppComponent</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">AppRoutingModule</span>, <span class=\"title class_\">LayoutModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Como regla general, <strong>cuando en una plantilla se incruste otro componente</strong>, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.</p>\n<h3 id=\"3-2-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\"><a href=\"#3-2-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\" class=\"headerlink\" title=\"3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript\"></a>3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript</h3><p>Si es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el <code>app.module.ts</code> son algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Estas <strong>sentencias de importación son propias del lenguaje</strong> y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros <em>TypeScript</em>. La importación se realiza en base a convenios personalizables. Si empieza con <code>./</code> entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio <code>node_modules</code> y se trata como código de terceros.</p>\n<blockquote>\n<p>En general no tendrás que preocuparte de estas importaciones físicas, pues el <em>VSCode</em> y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código</p>\n</blockquote>\n<h1 id=\"4-Transitividad-y-Organizacion\"><a href=\"#4-Transitividad-y-Organizacion\" class=\"headerlink\" title=\"4. Transitividad y Organización\"></a>4. Transitividad y Organización</h1><h2 id=\"4-1-Transitividad-en-una-cadena-de-modulos\"><a href=\"#4-1-Transitividad-en-una-cadena-de-modulos\" class=\"headerlink\" title=\"4.1 Transitividad en una cadena de módulos\"></a>4.1 Transitividad en una cadena de módulos</h2><p>Un problema que reforzará tu conocimiento sobre el sistema modular surgirá al mover la etiqueta <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> del <code>app.component.html</code> al componente <em>Main</em>. En su vista <code>main.component.html</code> tendrás algo así.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Here are some links to help you start:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;noopener&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://angular.io/tutorial&quot;</span>&gt;</span>Tour of Heroes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;noopener&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://angular.io/cli&quot;</span>&gt;</span>CLI Documentation<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;noopener&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://blog.angular.io/&quot;</span>&gt;</span>Angular blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Todo son etiquetas <em>html</em> estándar salvo la última <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. El propósito de este componte lo veremos en la próxima lección dedicada a enrutado. Pero por ahora más que una ayuda es un dolor de cabeza. Resulta que el <code>RouterOutletComponent</code> está declarado en un módulo del <em>framework</em> llamado <code>RouterModule</code>. Dicho módulo fue importado de manera automática durante la generación del código inicial, pero ¿Dónde?.</p>\n<p>Como digo el tema del enrutado es un <a href=\"../paginas-y-rutas-angular-spa/\">capítulo aparte</a>, pero las relaciones de los módulos debes conocerlas cuanto antes. Durante la generación inicial se crearon dos módulos: el <code>AppModule</code>, ya estudiado, y su asistente para enrutado <code>AppRoutingModule</code>. Este último aún no lo hemos visitado. Su contenido es:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Obviando la por ahora inútil instrucción <code>.forRoutes(routes)</code>, llama la atención que este módulo es dependiente del famoso <code>RouterModule</code>, es decir lo importa en su array <code>imports:[]</code>. Pero además va y lo exporta haciendo uso de la interesante <strong>propiedad transitiva de los módulos</strong>. Cada módulo puede exportar sus propios componentes o los de terceros. Incluso puede exportar todo un módulo al completo. Al hacerlo así, el <code>AppRoutingModule</code> está poniendo a disposición del <code>AppModule</code> todo el contenido de <code>RouterModule</code>, incluido el por ahora fastidioso <code>RouterOutletComponent</code>.</p>\n<h2 id=\"4-2-Organizacion-de-la-aplicacion-en-modulos\"><a href=\"#4-2-Organizacion-de-la-aplicacion-en-modulos\" class=\"headerlink\" title=\"4.2 Organización de la aplicación en módulos\"></a>4.2 Organización de la aplicación en módulos</h2><p>Todos los programas tiene partes repetitivas. Los principios de <strong>organización y código limpio</strong> nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.</p>\n<p>Son <strong>componentes de infraestructura</strong>. Conviene guardarlos en una carpeta especial. Aquí la he llamado <em>shared</em>, pero <em>tools</em>, <em>common</em>, o <em>lib</em> suelen ser otros nombres habituales. Para reforzar tu práctica con el CLI escribe el siguiente comando que aprovecharemos en el futuro.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m shared</span><br><span class=\"line\">ng g c shared/go-home --<span class=\"built_in\">export</span>=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> Go home 🏠<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y puedo usarlo por ejemplo en el Header</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-go-home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-go-home</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span> &#123;&#123; title &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>En esta aplicación hasta ahora no es nada funcional,!y ya tiene una docena de cosas entre módulos y componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes.</p>\n</blockquote>\n<h3 id=\"Un-ejemplo-practico-recopilatorio-para-la-pagina-home\"><a href=\"#Un-ejemplo-practico-recopilatorio-para-la-pagina-home\" class=\"headerlink\" title=\"Un ejemplo práctico recopilatorio para la página home.\"></a>Un ejemplo práctico recopilatorio para la página <em>home</em>.</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m home -m app.module.ts</span><br><span class=\"line\">ng g c home/home --<span class=\"built_in\">export</span> --flat</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"home-component-html\"><a href=\"#home-component-html\" class=\"headerlink\" title=\"home.component.html\"></a>home.component.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Welcome 🏡 !<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.trainingit.es/curso-angular-basico/?promo=angular.builders&quot;</span>&gt;</span>💻 Curso de Introducción<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders&quot;</span>&gt;</span>💻 Curso Avanzado<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y podemos incluir este componente en el contenido del layout del componente principal <code>AppComponent</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-nav</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ab-home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-home</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-aside</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"El-bosque-de-modulos-a-vista-de-pajaro\"><a href=\"#El-bosque-de-modulos-a-vista-de-pajaro\" class=\"headerlink\" title=\"El bosque de módulos a vista de pájaro\"></a>El bosque de módulos a vista de pájaro</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--AppRoutingModule</span><br><span class=\"line\">|  |</span><br><span class=\"line\">|  +--RouterModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--BrowserModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--HomeModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--LayoutModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--CommonModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--RouterModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--SharedModule</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"El-bosque-de-componentes-a-vista-de-pajaro\"><a href=\"#El-bosque-de-componentes-a-vista-de-pajaro\" class=\"headerlink\" title=\"El bosque de componentes a vista de pájaro\"></a>El bosque de componentes a vista de pájaro</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--HeaderComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--NavComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--RouterOutletComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--HomeComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--FooterComponent</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Con esto tendrás una base para una aplicación <em>Angular 9</em>. Sigue esta serie para añadirle funcionalidad mediante <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a> mientras aprendes a programar con Angular9. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-1_base.png\" alt=\"base-aplicacion-angular\"></p>\n<p>Vamos a crear una <strong>base sobre la que programar una aplicación Angular 9</strong> profesional. Usaremos el <em>CLI</em> para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.<br>La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: <strong>los módulos y los componentes</strong>.</p>","more":"<p>Partimos de la aplicación tal cómo la dejamos en el <a href=\"../hola-angular-cli/\">Hola Mundo en Angular</a>. Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Modulos\"><a href=\"#1-Modulos\" class=\"headerlink\" title=\"1. Módulos\"></a>1. Módulos</h1><p>Los módulos son <strong>contenedores para almacenar los componentes y servicios</strong> de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.</p>\n<h2 id=\"1-1-Anatomia-de-un-modulo\"><a href=\"#1-1-Anatomia-de-un-modulo\" class=\"headerlink\" title=\"1.1 Anatomía de un módulo\"></a>1.1 Anatomía de un módulo</h2><p>Antes de usar cualquier módulo hay que conocerlo. En Angular <strong>los módulos de declaran como clases de TypeScript</strong>. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función <code>@NgModule()</code> que recibe un objeto como único argumento. En las propiedades de ese objeto es donde se configura el módulo.</p>\n<p>Mira el módulo <code>AppModule</code> original que genera el CLI en el fichero <code>app.module.ts</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">AppRoutingModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-1-Importacion-de-otros-modulos\"><a href=\"#1-1-1-Importacion-de-otros-modulos\" class=\"headerlink\" title=\"1.1.1 Importación de otros módulos\"></a>1.1.1 Importación de otros módulos</h3><p>El módulo <code>App</code> también se conoce como <strong>módulo raíz</strong> porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad <code>imports:[]</code>, que es un array de punteros a otros módulos.</p>\n<blockquote>\n<p>En la situación original el módulo principal depende un módulo <em>custom</em> pre-generado (el <code>AppRoutingModule</code> que usarás más adelante) y de otro <em>del framework</em> para la presentación en el navegador (el <code>BrowserModule</code>).</p>\n</blockquote>\n<p>Veremos esto con más profundidad en el punto 4.</p>\n<h2 id=\"1-2-Generacion-de-modulos\"><a href=\"#1-2-Generacion-de-modulos\" class=\"headerlink\" title=\"1.2 Generación de módulos\"></a>1.2 Generación de módulos</h2><p>Hasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de <strong>crear tu primer módulo</strong>. Para eso usaremos otro comando del <em>cli</em>, el <code>ng generate module</code>. En una ventana del terminal escribe:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m layout</span><br></pre></td></tr></table></figure>\n\n<p>Esta es la sintaxis abreviada del comando <a href=\"https://angular.io/cli/generate\"><code>ng generate</code></a> el cual dispone de varios planos de construcción o <em>schematics</em>. El que he usado aquí es el de <a href=\"https://angular.io/cli/generate#module-command\"><code>module</code></a> para la construcción de módulos.</p>\n<blockquote>\n<p>Si no te gusta teclear en la terminal, también puedes lanzar estos comandos desde <a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\">Nx Angular Console</a></p>\n</blockquote>\n<p>El resultado es la creación del fichero <code>layout/layout.module.ts</code> con la declaración y decoración del módulo <code>LayoutModule</code>.<br>Este módulo te servirá de <strong>contenedor para guardar componentes</strong> y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LayoutModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Por ahora hay que asegurar que <strong>este módulo será importado por el raíz, el AppModule</strong>. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">AppRoutingModule</span>, <span class=\"title class_\">LayoutModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>El módulo raíz, al igual que como verás más tarde con el componente raíz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.</p>\n</blockquote>\n<h1 id=\"2-Componentes\"><a href=\"#2-Componentes\" class=\"headerlink\" title=\"2. Componentes\"></a>2. Componentes</h1><p>Los módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. <strong>Los componentes son los bloques básicos de construcción de las páginas web en Angular</strong>. Contienen una parte visual en <code>html</code> (la Vista) y una funcional en <code>Typescript</code> (el Controlador).</p>\n<blockquote>\n<p>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero <code>app.component.ts</code>. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero o hasta cuatro: (el controlador, con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).</p>\n</blockquote>\n<h2 id=\"2-1-Anatomia-de-un-componente\"><a href=\"#2-1-Anatomia-de-un-componente\" class=\"headerlink\" title=\"2.1 Anatomía de un componente\"></a>2.1 Anatomía de un componente</h2><p>Los componentes, como el resto de artefactos en Angular, serán <strong>clases TypeScript decoradas</strong> con funciones específicas. En este caso la función es <code>@Component()</code> que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./app.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Los componentes definen nuevas etiquetas HTML</strong> para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página <code>index.html</code>. El nombre de la nueva etiqueta se conoce como <em>selector</em>. En este caso la propiedad <code>selector: &quot;ab-root&quot;</code> permite el uso de este componente dentro de otro con esta invocación <code>&lt;ab-root&gt;&lt;/ab-root&gt;</code>. En este caso el componente raíz.</p>\n<blockquote>\n<p>Particularidades del componente raíz. Su nombre oficial es <code>AppComponent</code>, y su selector debería llamarse <code>ab-app</code>. Está formado a partir del prefijo de la aplicación <code>ab</code> y su nombre oficioso <code>root</code>. Si no se dice lo contrario el prefijo <code>app</code> se usará en todos los componentes propios, pue es asignado por defecto durante la generación de la aplicación. Yo prefiero personalizarlo usando el modificador <code>--prefix</code> o <code>-p</code> durante el inicio <code>ng new</code>.</p>\n</blockquote>\n<p>Volviendo al componente raíz; está destinado a ser usado en la página principal, en el <code>index.html</code>. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array <code>bootstrap: [AppComponent]</code>, es ahí donde se incluyen los componentes con la capacidad de lanzar <em>bootstrap</em> la aplicación.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">AppRoutingModule</span>, <span class=\"title class_\">LayoutModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y en el <code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>La plantilla representa la parte visual</strong> del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad <code>template</code> del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero <em>html</em> y referenciarlo como una ruta relativa en la propiedad <code>templateUrl</code>.</p>\n<p>La propiedad <strong><code>styles</code> y su gemela <code>stylesUrl</code> permiten asignar estilos</strong> <em>CSS, SASS o LESS</em> al componente. Estos estilos se incrustan durante la compilación en los nodos del <em>DOM</em> generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.</p>\n<p>Los estilos, ausentes en este ejemplo, podrían incluirse como un array de cadenas, o llevarse a un fichero propio como en el caso de la vista.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to &#123;&#123; title &#125;&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./assets/logo.png&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>En la clase del componente nos encontraremos la implementación de su funcionalidad</strong>. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.</p>\n<p>Una aplicación web en Angular se monta como un <strong>árbol de componentes</strong>. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.</p>\n<h2 id=\"2-2-Generacion-de-componentes\"><a href=\"#2-2-Generacion-de-componentes\" class=\"headerlink\" title=\"2.2 Generación de componentes\"></a>2.2 Generación de componentes</h2><p>Para <strong>crear nuevos componentes</strong> vamos a usar de nuevo el comando <code>generate</code> del <em>CLI</em> . Pero ahora con los planos para construir un componente. La <a href=\"https://angular.io/cli/generate#component-command\">sintaxis completa</a> del comando <code>ng generate component</code> o abreviadamente <code>ng g c</code> permite crear componentes en diversas formas.</p>\n<p>Casi <strong>todas las páginas tienen una estructura</strong> similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.</p>\n<p>Ejecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c layout/header --export</span><br><span class=\"line\">ng g c layout/nav --export</span><br><span class=\"line\">ng g c layout/aside --export</span><br><span class=\"line\">ng g c layout/footer --export</span><br></pre></td></tr></table></figure>\n\n<p>Fíjate en un componente como el Header y en el fichero <code>header.component.ts</code>. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: <code>app-header</code> y <code>HeaderComponent</code>. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre <code>App</code> no coincide con su selector <code>root</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;ab-header&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">&#x27;./header.component.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeaderComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Y esta es su vista asociada. La cual es de nuevo una composición de otros selectores. Estamos creando un frondoso árbol de componentes.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span> &#123;&#123; title &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-Estilos-en-los-componentes\"><a href=\"#2-3-Estilos-en-los-componentes\" class=\"headerlink\" title=\"2.3 Estilos en los componentes\"></a>2.3 Estilos en los componentes</h2><p>La aplicación de estilos y css en los componentes merecería un tema aparte. Para empezar quiero que seas consciente de que lo que programes es código fuente. Lo escribirás en TypeScript, algo muy parecido al Html y los estilos en Css, LASS, SCSS…</p>\n<p>Pero todo ese código fuente no es lo que ejecuta el navegador. Ni mucho menos. Antes tiene que compilarse y generar JavaScript, que al ejecutarse en el navegador crea de nuevo Html, JS y estilos…</p>\n<p>Estos estilos van ya incrustados entre los elementos. Y Angular los aplica componente a componente, sin herencia ni transmisión a los descendientes. Este es el comportamiento por defecto. Por supuesto, todo es customizable. Pero en este curso lo dejaremos tal cual viene de fábrica.</p>\n<p>Así que los estilos se definen en el fichero apropiado. Se puede usa los selectores de clase e identificador estándar de CSS. Pero también se puede usar el selector propio <code>:host</code> el cual apunta al elemento html que creará el componente cuando se ejecute.</p>\n<p>Por ejemplo en <code>app.component.css</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:host</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:host</span> &gt; <span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:host</span> &gt; <span class=\"selector-tag\">main</span> &gt; <span class=\"selector-tag\">article</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:host</span> &gt; <span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Visibilidad-entre-componentes\"><a href=\"#3-Visibilidad-entre-componentes\" class=\"headerlink\" title=\"3 Visibilidad entre componentes\"></a>3 Visibilidad entre componentes</h1><p>La clave del código limpio es <strong>exponer funcionalidad de manera expresiva pero ocultar la implementación</strong>. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la <strong>programación basada en componentes</strong> podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.</p>\n<h2 id=\"3-1-Componentes-publicos-y-privados\"><a href=\"#3-1-Componentes-publicos-y-privados\" class=\"headerlink\" title=\"3.1 Componentes públicos y privados\"></a>3.1 Componentes públicos y privados</h2><p>Los componentes no deciden por sí mismos su <strong>visibilidad</strong>. Cuando un componente es generado se declara en un módulo contenedor en su propiedad <code>declares:[]</code>. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero <strong>si quieres usarlo desde fuera tendrás que exportarlo</strong>. Eso se hace en la propiedad <code>exports:[]</code> del módulo en el que se crea.</p>\n<p>La exportación debe hacerse a mano incluyendo el componente en el array, o indicarse con el <em>flag</em> <code>--export</code> para que lo haga el <em>cli</em>. Esto es lo que se ha hecho en el módulo <em>Layout</em> para poder exportar el componente <code>header</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">HeaderComponent</span>, <span class=\"title class_\">FooterComponent</span>, <span class=\"title class_\">NavComponent</span>, <span class=\"title class_\">AsideComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">CommonModule</span>, <span class=\"title class_\">RouterModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">HeaderComponent</span>, <span class=\"title class_\">FooterComponent</span>, <span class=\"title class_\">NavComponent</span>, <span class=\"title class_\">AsideComponent</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LayoutModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>Los componentes privados suelen ser sencillos</strong>. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador <code>--flat</code> ni siquiera generan carpeta propia.</p>\n</blockquote>\n<p>Por supuesto que <code>HeaderComponent</code> necesitará la propiedad <code>title</code> y también la moveremos desde <code>app.component.ts</code>. Dejando de esa manera el componente raíz en los huesos.</p>\n<h2 id=\"3-2-Importacion-y-exportacion-entre-modulos\"><a href=\"#3-2-Importacion-y-exportacion-entre-modulos\" class=\"headerlink\" title=\"3.2 Importación y exportación entre módulos\"></a>3.2 Importación y exportación entre módulos</h2><p>Que un componente sea público es la primera condición para que se consuma fuera de su módulo. Ahora falta que quién lo quiera usar, utilice el selector <code>&lt;ab-header&gt;</code> importe su módulo <code>LayoutModule</code>. Esto lo haremos en el <code>AppModule</code> para que lo use el <code>AppComponent</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [<span class=\"title class_\">AppComponent</span>],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">BrowserModule</span>, <span class=\"title class_\">AppRoutingModule</span>, <span class=\"title class_\">LayoutModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [<span class=\"title class_\">AppComponent</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Como regla general, <strong>cuando en una plantilla se incruste otro componente</strong>, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.</p>\n<h3 id=\"3-2-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\"><a href=\"#3-2-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\" class=\"headerlink\" title=\"3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript\"></a>3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript</h3><p>Si es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el <code>app.module.ts</code> son algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BrowserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppRoutingModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Estas <strong>sentencias de importación son propias del lenguaje</strong> y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros <em>TypeScript</em>. La importación se realiza en base a convenios personalizables. Si empieza con <code>./</code> entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio <code>node_modules</code> y se trata como código de terceros.</p>\n<blockquote>\n<p>En general no tendrás que preocuparte de estas importaciones físicas, pues el <em>VSCode</em> y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código</p>\n</blockquote>\n<h1 id=\"4-Transitividad-y-Organizacion\"><a href=\"#4-Transitividad-y-Organizacion\" class=\"headerlink\" title=\"4. Transitividad y Organización\"></a>4. Transitividad y Organización</h1><h2 id=\"4-1-Transitividad-en-una-cadena-de-modulos\"><a href=\"#4-1-Transitividad-en-una-cadena-de-modulos\" class=\"headerlink\" title=\"4.1 Transitividad en una cadena de módulos\"></a>4.1 Transitividad en una cadena de módulos</h2><p>Un problema que reforzará tu conocimiento sobre el sistema modular surgirá al mover la etiqueta <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> del <code>app.component.html</code> al componente <em>Main</em>. En su vista <code>main.component.html</code> tendrás algo así.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Here are some links to help you start:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;noopener&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://angular.io/tutorial&quot;</span>&gt;</span>Tour of Heroes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;noopener&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://angular.io/cli&quot;</span>&gt;</span>CLI Documentation<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;noopener&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://blog.angular.io/&quot;</span>&gt;</span>Angular blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Todo son etiquetas <em>html</em> estándar salvo la última <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. El propósito de este componte lo veremos en la próxima lección dedicada a enrutado. Pero por ahora más que una ayuda es un dolor de cabeza. Resulta que el <code>RouterOutletComponent</code> está declarado en un módulo del <em>framework</em> llamado <code>RouterModule</code>. Dicho módulo fue importado de manera automática durante la generación del código inicial, pero ¿Dónde?.</p>\n<p>Como digo el tema del enrutado es un <a href=\"../paginas-y-rutas-angular-spa/\">capítulo aparte</a>, pero las relaciones de los módulos debes conocerlas cuanto antes. Durante la generación inicial se crearon dos módulos: el <code>AppModule</code>, ya estudiado, y su asistente para enrutado <code>AppRoutingModule</code>. Este último aún no lo hemos visitado. Su contenido es:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NgModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Obviando la por ahora inútil instrucción <code>.forRoutes(routes)</code>, llama la atención que este módulo es dependiente del famoso <code>RouterModule</code>, es decir lo importa en su array <code>imports:[]</code>. Pero además va y lo exporta haciendo uso de la interesante <strong>propiedad transitiva de los módulos</strong>. Cada módulo puede exportar sus propios componentes o los de terceros. Incluso puede exportar todo un módulo al completo. Al hacerlo así, el <code>AppRoutingModule</code> está poniendo a disposición del <code>AppModule</code> todo el contenido de <code>RouterModule</code>, incluido el por ahora fastidioso <code>RouterOutletComponent</code>.</p>\n<h2 id=\"4-2-Organizacion-de-la-aplicacion-en-modulos\"><a href=\"#4-2-Organizacion-de-la-aplicacion-en-modulos\" class=\"headerlink\" title=\"4.2 Organización de la aplicación en módulos\"></a>4.2 Organización de la aplicación en módulos</h2><p>Todos los programas tiene partes repetitivas. Los principios de <strong>organización y código limpio</strong> nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.</p>\n<p>Son <strong>componentes de infraestructura</strong>. Conviene guardarlos en una carpeta especial. Aquí la he llamado <em>shared</em>, pero <em>tools</em>, <em>common</em>, o <em>lib</em> suelen ser otros nombres habituales. Para reforzar tu práctica con el CLI escribe el siguiente comando que aprovecharemos en el futuro.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m shared</span><br><span class=\"line\">ng g c shared/go-home --<span class=\"built_in\">export</span>=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> Go home 🏠<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y puedo usarlo por ejemplo en el Header</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-go-home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-go-home</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span> &#123;&#123; title &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>En esta aplicación hasta ahora no es nada funcional,!y ya tiene una docena de cosas entre módulos y componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes.</p>\n</blockquote>\n<h3 id=\"Un-ejemplo-practico-recopilatorio-para-la-pagina-home\"><a href=\"#Un-ejemplo-practico-recopilatorio-para-la-pagina-home\" class=\"headerlink\" title=\"Un ejemplo práctico recopilatorio para la página home.\"></a>Un ejemplo práctico recopilatorio para la página <em>home</em>.</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m home -m app.module.ts</span><br><span class=\"line\">ng g c home/home --<span class=\"built_in\">export</span> --flat</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"home-component-html\"><a href=\"#home-component-html\" class=\"headerlink\" title=\"home.component.html\"></a>home.component.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Welcome 🏡 !<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.trainingit.es/curso-angular-basico/?promo=angular.builders&quot;</span>&gt;</span>💻 Curso de Introducción<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.trainingit.es/curso-angular-avanzado/?promo=angular.builders&quot;</span>&gt;</span>💻 Curso Avanzado<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Y podemos incluir este componente en el contenido del layout del componente principal <code>AppComponent</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-nav</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ab-home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-home</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-aside</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"El-bosque-de-modulos-a-vista-de-pajaro\"><a href=\"#El-bosque-de-modulos-a-vista-de-pajaro\" class=\"headerlink\" title=\"El bosque de módulos a vista de pájaro\"></a>El bosque de módulos a vista de pájaro</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--AppRoutingModule</span><br><span class=\"line\">|  |</span><br><span class=\"line\">|  +--RouterModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--BrowserModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--HomeModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--LayoutModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--CommonModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--RouterModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--SharedModule</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"El-bosque-de-componentes-a-vista-de-pajaro\"><a href=\"#El-bosque-de-componentes-a-vista-de-pajaro\" class=\"headerlink\" title=\"El bosque de componentes a vista de pájaro\"></a>El bosque de componentes a vista de pájaro</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--HeaderComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--NavComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--RouterOutletComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--HomeComponent</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +--FooterComponent</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Con esto tendrás una base para una aplicación <em>Angular 9</em>. Sigue esta serie para añadirle funcionalidad mediante <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a> mientras aprendes a programar con Angular9. Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"},{"title":"npm: de instalador a publicador","id":"10","updated":"2016-04-19T05:01:25.000Z","date":"2016-04-18T14:07:46.000Z","_content":"\nSeguro que estás harto de repetir la mítica instrucción `npm install paquete-x` Pero, ¿has pensado en **publicar tus propios módulos**?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en [*npm*](https://www.npmjs.com/).\n\nSigue este proceso y te convertirás en un creador de paquetes para *npm* :\n\n## Programa\n\nTodo empieza por tener una necesidad y resolverla **encapsulando su código en un módulo.** Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.\n\nAntes de continuar vamos a fijar un par de conceptos:\n\n**- módulo:** Fichero *.js* que exporta un funcionalidad y oculta su implementación.\n\n**- paquete:** Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.\n\nConocidos los ingredientes, la receta es sencilla:\n\n1. Debes crear un proyecto para el paquete que vas a publicar.\n2. Has de subir el código a un repositorio público.\n3. Y debes rellenar convenientemente el `package.json` de tu proyecto.\n\nEste es un ejemplo que he creado y [publicado en github](https://github.com/AgoraBinaria/ab-ftp) que te puede servir de base.\n\nPresta especial atención al **nombrado** de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un *prefijo* con tus iniciales o las de tu empresa.\n\nNo te olvides de incluir un juego de **pruebas y documentación** necesaria para sus uso.\n\n## Publica\n\nPuedes descargar librerías y herramienta desde el repositorio de *npm* de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que **registrarte para poder publicar** contenido. El [proceso de registro](https://www.npmjs.com/signup) vía web es sencillo y grátis.\n\nUna vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: `npm login` te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:\n\n```\nnpm publish\n```\n\nPuedes encontrar [más información](https://docs.npmjs.com/cli/publish) acerca de este mega comando en la documentación de *npmjs*. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.\n\nLa clave está en que tu fichero de configuración `package.json` sea correcto y lo más completo posible. Escribe un completo `readme.md` que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo [el contenido subido a github](https://github.com/AgoraBinaria/ab-ftp) se transforma y se ve en la [página de información de npm.](https://www.npmjs.com/package/ab-ftp)\n\n\nComprueba en un directorio vacío que `npm install nombre-de-tu-paquete` descarga todo lo necesario... y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.\n\n\n## Actualiza\n\nCon el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de [nombrado de versiones semántico](http://semver.org/):\n\n**x.y.z = 1.2.3 = ruptura.mejora.parche**\n\nEs bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en *github*.\n\n```\ngit tag 0.1.2\ngit push --tags\n```\n\n\n## Disfruta\n\nFinalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso **siempre habrás ganado**. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.","source":"_posts/npm-de-instalador-a-publicador.md","raw":"---\ntitle: 'npm: de instalador a publicador'\ntags:\n- NodeJS\n- Avanzado\npermalink: npm-de-instalador-a-publicador\nid: 10\nupdated: '2016-04-19 07:01:25'\ndate: 2016-04-18 16:07:46\n---\n\nSeguro que estás harto de repetir la mítica instrucción `npm install paquete-x` Pero, ¿has pensado en **publicar tus propios módulos**?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en [*npm*](https://www.npmjs.com/).\n\nSigue este proceso y te convertirás en un creador de paquetes para *npm* :\n\n## Programa\n\nTodo empieza por tener una necesidad y resolverla **encapsulando su código en un módulo.** Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.\n\nAntes de continuar vamos a fijar un par de conceptos:\n\n**- módulo:** Fichero *.js* que exporta un funcionalidad y oculta su implementación.\n\n**- paquete:** Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.\n\nConocidos los ingredientes, la receta es sencilla:\n\n1. Debes crear un proyecto para el paquete que vas a publicar.\n2. Has de subir el código a un repositorio público.\n3. Y debes rellenar convenientemente el `package.json` de tu proyecto.\n\nEste es un ejemplo que he creado y [publicado en github](https://github.com/AgoraBinaria/ab-ftp) que te puede servir de base.\n\nPresta especial atención al **nombrado** de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un *prefijo* con tus iniciales o las de tu empresa.\n\nNo te olvides de incluir un juego de **pruebas y documentación** necesaria para sus uso.\n\n## Publica\n\nPuedes descargar librerías y herramienta desde el repositorio de *npm* de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que **registrarte para poder publicar** contenido. El [proceso de registro](https://www.npmjs.com/signup) vía web es sencillo y grátis.\n\nUna vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: `npm login` te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:\n\n```\nnpm publish\n```\n\nPuedes encontrar [más información](https://docs.npmjs.com/cli/publish) acerca de este mega comando en la documentación de *npmjs*. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.\n\nLa clave está en que tu fichero de configuración `package.json` sea correcto y lo más completo posible. Escribe un completo `readme.md` que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo [el contenido subido a github](https://github.com/AgoraBinaria/ab-ftp) se transforma y se ve en la [página de información de npm.](https://www.npmjs.com/package/ab-ftp)\n\n\nComprueba en un directorio vacío que `npm install nombre-de-tu-paquete` descarga todo lo necesario... y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.\n\n\n## Actualiza\n\nCon el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de [nombrado de versiones semántico](http://semver.org/):\n\n**x.y.z = 1.2.3 = ruptura.mejora.parche**\n\nEs bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en *github*.\n\n```\ngit tag 0.1.2\ngit push --tags\n```\n\n\n## Disfruta\n\nFinalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso **siempre habrás ganado**. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.","slug":"npm-de-instalador-a-publicador","published":1,"__permalink":"npm-de-instalador-a-publicador","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fl001ye09630zi015y","content":"<p>Seguro que estás harto de repetir la mítica instrucción <code>npm install paquete-x</code> Pero, ¿has pensado en <strong>publicar tus propios módulos</strong>?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en <a href=\"https://www.npmjs.com/\"><em>npm</em></a>.</p>\n<p>Sigue este proceso y te convertirás en un creador de paquetes para <em>npm</em> :</p>\n<h2 id=\"Programa\"><a href=\"#Programa\" class=\"headerlink\" title=\"Programa\"></a>Programa</h2><p>Todo empieza por tener una necesidad y resolverla <strong>encapsulando su código en un módulo.</strong> Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.</p>\n<p>Antes de continuar vamos a fijar un par de conceptos:</p>\n<p><strong>- módulo:</strong> Fichero <em>.js</em> que exporta un funcionalidad y oculta su implementación.</p>\n<p><strong>- paquete:</strong> Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.</p>\n<p>Conocidos los ingredientes, la receta es sencilla:</p>\n<ol>\n<li>Debes crear un proyecto para el paquete que vas a publicar.</li>\n<li>Has de subir el código a un repositorio público.</li>\n<li>Y debes rellenar convenientemente el <code>package.json</code> de tu proyecto.</li>\n</ol>\n<p>Este es un ejemplo que he creado y <a href=\"https://github.com/AgoraBinaria/ab-ftp\">publicado en github</a> que te puede servir de base.</p>\n<p>Presta especial atención al <strong>nombrado</strong> de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un <em>prefijo</em> con tus iniciales o las de tu empresa.</p>\n<p>No te olvides de incluir un juego de <strong>pruebas y documentación</strong> necesaria para sus uso.</p>\n<h2 id=\"Publica\"><a href=\"#Publica\" class=\"headerlink\" title=\"Publica\"></a>Publica</h2><p>Puedes descargar librerías y herramienta desde el repositorio de <em>npm</em> de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que <strong>registrarte para poder publicar</strong> contenido. El <a href=\"https://www.npmjs.com/signup\">proceso de registro</a> vía web es sencillo y grátis.</p>\n<p>Una vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: <code>npm login</code> te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>Puedes encontrar <a href=\"https://docs.npmjs.com/cli/publish\">más información</a> acerca de este mega comando en la documentación de <em>npmjs</em>. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.</p>\n<p>La clave está en que tu fichero de configuración <code>package.json</code> sea correcto y lo más completo posible. Escribe un completo <code>readme.md</code> que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo <a href=\"https://github.com/AgoraBinaria/ab-ftp\">el contenido subido a github</a> se transforma y se ve en la <a href=\"https://www.npmjs.com/package/ab-ftp\">página de información de npm.</a></p>\n<p>Comprueba en un directorio vacío que <code>npm install nombre-de-tu-paquete</code> descarga todo lo necesario… y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.</p>\n<h2 id=\"Actualiza\"><a href=\"#Actualiza\" class=\"headerlink\" title=\"Actualiza\"></a>Actualiza</h2><p>Con el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de <a href=\"http://semver.org/\">nombrado de versiones semántico</a>:</p>\n<p><strong>x.y.z &#x3D; 1.2.3 &#x3D; ruptura.mejora.parche</strong></p>\n<p>Es bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en <em>github</em>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag 0.1.2</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Disfruta\"><a href=\"#Disfruta\" class=\"headerlink\" title=\"Disfruta\"></a>Disfruta</h2><p>Finalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso <strong>siempre habrás ganado</strong>. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Seguro que estás harto de repetir la mítica instrucción <code>npm install paquete-x</code> Pero, ¿has pensado en <strong>publicar tus propios módulos</strong>?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en <a href=\"https://www.npmjs.com/\"><em>npm</em></a>.</p>\n<p>Sigue este proceso y te convertirás en un creador de paquetes para <em>npm</em> :</p>\n<h2 id=\"Programa\"><a href=\"#Programa\" class=\"headerlink\" title=\"Programa\"></a>Programa</h2><p>Todo empieza por tener una necesidad y resolverla <strong>encapsulando su código en un módulo.</strong> Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.</p>\n<p>Antes de continuar vamos a fijar un par de conceptos:</p>\n<p><strong>- módulo:</strong> Fichero <em>.js</em> que exporta un funcionalidad y oculta su implementación.</p>\n<p><strong>- paquete:</strong> Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.</p>\n<p>Conocidos los ingredientes, la receta es sencilla:</p>\n<ol>\n<li>Debes crear un proyecto para el paquete que vas a publicar.</li>\n<li>Has de subir el código a un repositorio público.</li>\n<li>Y debes rellenar convenientemente el <code>package.json</code> de tu proyecto.</li>\n</ol>\n<p>Este es un ejemplo que he creado y <a href=\"https://github.com/AgoraBinaria/ab-ftp\">publicado en github</a> que te puede servir de base.</p>\n<p>Presta especial atención al <strong>nombrado</strong> de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un <em>prefijo</em> con tus iniciales o las de tu empresa.</p>\n<p>No te olvides de incluir un juego de <strong>pruebas y documentación</strong> necesaria para sus uso.</p>\n<h2 id=\"Publica\"><a href=\"#Publica\" class=\"headerlink\" title=\"Publica\"></a>Publica</h2><p>Puedes descargar librerías y herramienta desde el repositorio de <em>npm</em> de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que <strong>registrarte para poder publicar</strong> contenido. El <a href=\"https://www.npmjs.com/signup\">proceso de registro</a> vía web es sencillo y grátis.</p>\n<p>Una vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: <code>npm login</code> te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>Puedes encontrar <a href=\"https://docs.npmjs.com/cli/publish\">más información</a> acerca de este mega comando en la documentación de <em>npmjs</em>. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.</p>\n<p>La clave está en que tu fichero de configuración <code>package.json</code> sea correcto y lo más completo posible. Escribe un completo <code>readme.md</code> que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo <a href=\"https://github.com/AgoraBinaria/ab-ftp\">el contenido subido a github</a> se transforma y se ve en la <a href=\"https://www.npmjs.com/package/ab-ftp\">página de información de npm.</a></p>\n<p>Comprueba en un directorio vacío que <code>npm install nombre-de-tu-paquete</code> descarga todo lo necesario… y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.</p>\n<h2 id=\"Actualiza\"><a href=\"#Actualiza\" class=\"headerlink\" title=\"Actualiza\"></a>Actualiza</h2><p>Con el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de <a href=\"http://semver.org/\">nombrado de versiones semántico</a>:</p>\n<p><strong>x.y.z &#x3D; 1.2.3 &#x3D; ruptura.mejora.parche</strong></p>\n<p>Es bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en <em>github</em>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag 0.1.2</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Disfruta\"><a href=\"#Disfruta\" class=\"headerlink\" title=\"Disfruta\"></a>Disfruta</h2><p>Finalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso <strong>siempre habrás ganado</strong>. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.</p>\n"},{"title":"Páginas y rutas Angular SPA","date":"2020-04-14T11:41:14.000Z","thumbnail":"/css/images/angular-2_spa.png","_content":"\n![paginas-y-rutas-angular-spa](/images/tutorial-angular-2_spa.png)\n\nLas **aplicaciones Angular 9 son conjuntos de páginas enrutadas** en el propio navegador. Son las conocidas _SPA, Single Page Applications_. Estas apps liberan al servidor de una parte del trabajo reduciendo la cantidad de llamadas y mejorando la percepción de velocidad del usuario.\n\nEn este tutorial aprenderás a crear una Angular SPA fácilmente usando `@angular/router`, **el enrutador de Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Base para una aplicación Angular](../base-aplicacion-angular/). Seguimos usando el concepto de árbol, ahora como analogía de **las rutas y las vistas** asociadas. Al finalizar tendrás una angular SPA con vistas asociadas a sus rutas.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Rutas\n\nEs raro que una aplicación web resuelva o exponga toda su funcionalidad e información e una única vista. Lo habitual es que **se desplieguen múltiples páginas en distintas direrecciones**. Hasta hace unos años la única opción era que el servidor procesase dicha ruta y remitiese el contenido listo para visualizar en el navegador.\n\nEsto significa mucho trabajo para el servidor, mucho contenido para la red y poca responsabilidad para los navegadores. Para las aplicaciones empresariales parece razonable distribuir esa carga, y **que sea el navegador el que prepare la vista** ejecutando instrucciones y solicitando datos.\n\nY una de las responsabilidades de las que se hará cargo es la de **procesar las rutas y determinar cual será la vista** que se deba mostrar en cada dirección. Veamos cómo lo resuelve Angular.\n\nAl crear la aplicación hice uso del flag `routing` en el comando de generación del _CLI_.\n\nRecordemos:\n\n```terminal\nng new angular-basic --routing\n```\n\nEsto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el `AppModule` verdadero módulo raíz, y ahora verás en profundidad a su gemelo: el\n**módulo de enrutado** `AppRoutingModule` y el uso que hace del `RouterModule`.\n\n## 1.1 RouterModule\n\nCon lo que hemos aprendido sobre módulos y sus dependencias podemos entender que\n`AppRoutingModule` importa, configura y exportar al `RouterModule`. Y que a su vez `AppModule` al importar a `AppRoutingModule` dispone de todo lo necesario para realizar el enrutado.\n\nLa ruta de dependencias de módulos queda tal que así:\n\n```\nRouterModule -> AppRoutingModule -> AppModule\n```\n\nHasta ahora los módulos habían sido meros contendores. Algo similar a los espacios de nombres. Pero al ser clases puede tener código y por tanto exponer funcionalidad. De hecho, el `RouterModule` expone un par de métodos de configuración. Se llaman `.forRoot(routes:Routes)` y `.forChild(routes:Routes)` y se usan a nivel raíz o todas las demás situaciones respectivamente.\n\nAmbos reciben una estructura que mantiene un array de rutas y las instrucciones a ejecutar cuando dichas rutas se activen. Las rutas pueden ser estáticas o usar comodines. Las acciones pueden ser de elección de componente para la vista, diferir el trabajo a otro módulo o redirigir al usuario a otra ruta.\n\n### Módulos componentes y rutas\n\nVemos un primer ejemplo para el enrutador a nivel raíz. Partimos del par módulo-componente para la página _Home_. Hasta ahora se veía en la aplicación porque estaba incrustado a mano en medio del _layout_ principal.\n\nLo que haremos a continuación es **asignar este componente a una ruta**, y que sólo se vea cuando le toque a dicha ruta. Claro que en este caso es la ruta vacía, y por ahora es la única así que no cambiará gran cosa. Pero, de este modo Angular sabrá que mostrar en cada ruta para cuando hay más.\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\n## 1.2 Router Outlet\n\nEl caso es que necesitamos mostrar un componente u otro en función de una ruta. Por tanto habrá que eliminar la referencia explícita a `<ab-home>` y confiar en algo que ya estaba presente pero que no habíamos estudiado, el `<router-outlet>`.\n\nEste es un componente que viene con el `RouterModule` y actúa como un **contenedor dinámico**, incrustando el componente adecuado apara cada ruta. El contenido de `main.component.ts`, ahora será dinámico\n\n```html\n<main>\n  <p>\n    Fork this <a href=\"https://github.com/AcademiaBinaria/angular-basic\">Repository</a>\n  </p>\n  <router-outlet></router-outlet>\n</main>\n```\n\n## 1.3 Router Link\n\nOtra novedad que podemos, y debemos, empezar a usar es la directiva `routerLink`. **Una directiva es una extensión del HTML propia de Angular.** Se emplea como si fuese un atributo de cualquier elemento y durante la compilación genera el código estándar necesario para que lo entiendan los navegadores.\n\nEn concreto esta directiva, que también viene en el módulo `routerModule`, se usa en sustitución del atributo estándar `href`. Inicialmente nos basta con saber que instruye al navegador para que no solicite la ruta al servidor, sino que el propio código local de javaScript se encargará de procesarla.\n\nAsí, por ejemplo en el único y sencillo componente compartido del que disponemos, decidimos usarla para que las idas y venidas entre nuestras rutas no requieran de recarga en el servidor.\n\nEn el `src\\app\\shared\\go-home\\go-home.component.html`\n```html\n<a routerLink=\"\"> Go home 🏠</a>\n```\n\n> Recuerda, `routerLink` es una _Directiva_\n>>Como un atributo, pero con superpoderes\n\nPor ahora, _simplemente_ mantiene la gestión de las rutas en el lado del navegador.\n\n# 2 Lazy Loading\n\nTal com hemos procedido para la ruta vacía, podríamos continuar con todas las demás. Por ejemplo una ruta muy común sería la típica _Acerca de_ o dicho en modo _url_: `/about`. Lo que haríamos sería generarle un módulo con un un componente y luego asignar dicho componente a la tabla de rutas con algo así:\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  },\n  {\n    path: 'about',\n    component: AboutUsComponent,\n  }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nPodríamos, pero no lo haremos. ¿Por qué? Pues por una **cuestión de pesos y velocidad**. Tal como se ve en el código, para poder asignar un componente a una ruta antes tenemos que haberlo importado. Y eso significa que parará a formar parte del código que se _transpile_, empaquete y envíe al navegador.\n\nEs decir, el sufrido usuario se va a **descargar la definición de los componentes antes de visitarlos**. Es más, se descargará componentes de rutas que quizá nunca visite. A esta técnica se la conoce como _eager loading_ y, en general y hablando así a la bruto, debemos evitarla en favor de otra conocida como _lazy loading_.\n\n\n## 2.1 Webpack y los bundles por ruta\n\nPara implementarla se necesitan un par de cooperantes. En particular y sobre todo el empaquetador _Webpack_.\n\nEl objetivo es **diferir la descarga de las rutas no visitadas** y para ello querremos empaquetar cada ruta en un _bundle_. Esto requiere al menos un módulo por ruta y adoptar un convenio especial para que  _webpack_ inicie nuevos empaquetados en múltiples puntos.\n\n### Crear los componentes en módulos con enrutado\n\nPor complejo que suene en la práctica es muy sencillo. Basta con usar el comando adecuado del CLI. Por ejemplo para el caso del _Acerca de_ emplearíamos una instrucción como esta:\n\n```bash\nng g m about --route=about -m app-routing.module.ts\n```\nNo es más que la generación de un nuevo módulo pero con el _flag_ `--route=` que le indica al CLI que debe tratarlo como una nueva ruta. Este súper comando genera dos módulos, un componente y además los registra automáticamente. Veamos el resultado:\n\nEn el módulo de enrutado raíz tenemos un nuevo camino, pero con una sintaxis distinta.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  },\n  {\n    path: 'about',\n    loadChildren: () => import('./about/about.module').then(m => m.AboutModule),\n  },\n];\n```\n\nLo que dice es que cuando se active la ruta `about` entonces se le transfiera el control a otro módulo mediante una instrucción asíncrona. De esta forma ase consiguen dos cosas: por un lado al no usar ningún componente explícito no hay que importarlo; por otro lado la descarga del módulo que resuelva el problema se ejecutará en segundo plano y sólo si el usuario visita la ruta.\n\n## 2.2 El enrutador delegado\n\nClaro que sólo hemos visto la mitad de la película. La instrucción `loadChildren` delega el enrutado en otro módulo; el `AboutModule` que fue creado por el cli. Dicho módulo depende a su vez de otro de enrutamiento local, el `AboutRoutingModule`.\n\nEste módulo de enrutamiento es similar al ya conocido `AppRoutingModule`, pero se activa y por tanto actúa, a partir de una ruta ya procesada por su padre. Su contenido es similar a esto:\n\n\n```typescript\nimport { AboutComponent } from './about.component';\n\nconst routes: Routes = [{ path: '', component: AboutComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AboutRoutingModule {}\n```\n\nTres cosas llaman la atención. Para empezar la ruta está vacía de nuevo. Pero eso es por que se concatena a la anteriormente evaluada. Es decir, el segmento `about` está ya descontado. Segundo, a este nivel volvemos a indicar un componente concreto y por tanto necesitamos importarlo. Por último y hablando de importaciones, el `RouterModule` se configura ahora como una rama hija del árbol de rutas principal. Lo hace con el método `.forChild(routes: Routes)`.\n\n> Comprueba en ejecución cómo se descargan los _bundles_ según navegas.\n\n### La navegación lazy permite la descarga diferida al navegar por las rutas.\n\n# 3. Rutas anidadas\n\nHay muchas situaciones que **por cuestiones de usabilidad anidamos navegaciones**. Por ejemplo una tienda online, te permite escoger categorías, y después vistas distintas de sus productos como listados o fichas. En las aplicaciones de gestión es frecuente encontrarse con estructuras tipo tab o menús de actuación parciales.\n\nEstas situaciones se resuelven la tecnología denominada _nested routes_ y requiere del conocimiento de una nueva propiedad de las rutas.\n\n## 3.1 Children\n\nAntes de nada supongamos que en la página about queremos mostrar dos categorías de información. Por un lado enlaces de interés sobre esta aplicación y por otro una información básica sobre la misma.\n\nCrearíamos por tanto un par de componentes como estos.\n\n```bash\nng g c about/about/links\nng g c about/about/info\n```\n\nPero, en lugar de asignarles ya un camino específico a cada uno, lo que haremos será incrustarlos como hijos del componente `AboutComponent`. Para ello escribimos algo así en `about-routing.module.ts`\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: AboutComponent,\n    children: [\n      {\n        path: 'links',\n        component: LinksComponent\n      },\n      {\n        path: 'info',\n        component: InfoComponent\n      }\n    ]\n  }\n];\n```\n\nEsto es sólo el primer paso.\n\n## 3.2 RouterOutlet anidado\n\nPara que los hijos acaben apareciendo dónde deben, hay que usar un segundo `<router-outlet>`. Esta vez dentro de la vista del componente padre. En `AboutComponent` :\n\n```html\n<h3>About us</h3>\n<header>\n  <p>\n    <a routerLink=\"links\"\n       class=\"button\"> Tutorial Links </ab-home>\n  </p>\n  <p>\n    <a routerLink=\"info\"\n       class=\"button\"> More Info </a>\n  </p>\n</header>\n<router-outlet></router-outlet>\n```\n\nAhora este componente actúa como una micro aplicación; con su menú y su espacio de carga dinámica.\n\n# 4 Rutas paramétricas\n\nSi hay algo que poco tardará en aparecer será la necesidad de presentar **información distinta pero con un formato similar**. De nuevo ejemplos archiconocidos serán una página para un producto, un artículo en un blog, una ficha de empleado o el seguimiento de un pedido.\n\nEn estas situaciones queremos que parte de la ruta identifique al elemento concreto que vamos a mostrar, y a ese identificador le llamaremos **parámetro**. Ojo, es similar pero no exactamente un `queryParameter`.\n\n## 4.1 Variables en la ruta\n\nPor ejemplo, supongamos una academia que quiere mostrar una lista de cursos y una página para cada uno. Para empezar creará un módulo enrutado como este:\n\n```bash\nng g m courses --route=courses -m app-routing.module.ts\n```\n\nEntre otras cosas modificará el `AppRoutingModule` incrustando una nueva entrada como esta:\n\n```typescript\n{\n  path: 'courses',\n  loadChildren: () => import('./courses/courses.module').then(m => m.CoursesModule)\n},\n```\n\nPero nosotros después vamos a realizar un cambio en la gestión local, incorporando un nuevo segmento al camino. Le asignamos el valor `:slug`.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: ':slug',\n    component: CoursesComponent\n    }\n];\n```\n\nEn este caso el `:` indica que lo que viene no es un texto literal, si no **una variable**. Un parámetro en nuestro argot. El nombre es cosa del programador, el usuario nunca lo verá. En este caso me he decidido por usar el término _slug_ muy empleado para introducir títulos dentro de las url.\n\nAhora ya resuelve rutas como: _/courses/introduccion_ o _/courses/avanzado_\n\nOtra cosa será qué hacer cuando esas rutas se activen.\n\n## 4.2 ActivatedRoute\n\nEntramos quizá en la parte más compleja, pero que como siempre es igual te la puedes tomar como una receta para todas tus aplicaciones.\n\nVeamos antes el contenido del fichero `courses.component.ts` relacionado con la obtención del parámetro de la ruta activa:\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { environment } from '../../environments/environment';\n\nexport class CoursesComponent implements OnInit {\n  course: any;\n  constructor(route: ActivatedRoute) {\n    route.params.subscribe(params => {\n      const courseSlug = params.slug;\n      this.course = environment.courses.find(c => c.slug === courseSlug);\n    });\n  }\n  ngOnInit() {}\n}\n```\n\nPor partes, que es la primera vez que vemos tanto código en este tutorial. Para empezar y ya que **los componentes son clases**, entonces podrán tener propiedades, métodos y constructores. Así que aparecen la propiedad `course:any` sin tipo concreto. Y el constructor que recibe una argumento de tipo `ActivatedRoute`\n\n**Angular adopta y promueve el uso de varios patones de arquitectura de software**. Uno de ellos es la inyección de dependencias, a la que dedicamos un tema en este tutorial. Por ahora nos basta con saber  que el framework nos inyectará una instancia de la clase `ActivatedRoute` en la variable argumento `route`.\n\nDespués viene un código intimidante pero que también es siempre del mismo tipo. La dificultad radica en usar programación asíncrona, a la que también dedicamos más de un tema. Simplificando, lo que nos dice es que si nos suscribimos a él, entonces nos notificará los cambios en los parámetros para que hagamos uso de ellos.\n\nEn este caso, buscamos el curso solicitado en un sencillo array. Y después se lo mostramos al usuario con técnicas de presentación dinámica propias de Angular que también se ven más adelante en este curso.\n\n```html\n<h3>👨‍🎓 {{ course.title }}</h3>\n<p>{{course.description}}</p>\n<p>\n  <a href=\"{{course.url}}\"\n     target=\"_blank\">{{course.url}}</a>\n</p>\n<p>\n  <ab-go-home></ab-go-home>\n</p>\n```\n\nEnlazamos todo cambiando los `href` del par de anclas del `HomeComponent`. Ahora usamos el enrutamiento local mediante `routerLink`.\n\n```html\n<h2> Welcome 🏡 !</h2>\n<nav>\n  <p>\n    <a routerLink=\"courses/introduccion\">💻 Introducción</a>\n  </p>\n  <p>\n    <a routerLink=\"courses/avanzado\">💻 Avanzado</a>\n  </p>\n</nav>\n```\n\n# 5 Redirecciones\n\nHay situaciones en las que dada una ruta, queremos **enviar al usuario a otra página**. A veces por una simple decisión de renombrado de rutas. Otras quizá respondiendo a problemas o acciones inesperadas del usuario.\n\nPor ejemplo, vamos ver un tratamiento genérico del caso _not found_. Para empezar crearemos una ruta específica para indicarle al usuario que la ruta que buscaba no existe.\n\n```terminal\nng g m not-found --route=not-found -m app-routing.module.ts\n```\n\nYa sabemos lo que ocurre. Un nuevo módulo y una ruta diferida a nivel raíz  `not-found`.\n\n```typescript\n{\n  path: 'not-found',\n  loadChildren: () => import('./not-found/not-found.module').then(m => m.NotFoundModule),\n},\n```\n\nQue localmente se asigna al componente `NotFoundComponent`.\n\n```typescript\n{\n  path: '',\n  component: NotFoundComponent,\n},\n```\n\n\n> Pero, nadie va voluntariamente a esa ruta\n\n>> Sólo los que se pierden\n\nAsí que hay que obligarles. Para eso usamos un nuevo comando de la configuración de rutas, el `redirectTo`. Y lo asignamos a todas aquellas rutas desconocidas usando un el comodín `**`\n\n```typescript\n{\n  path: '**',\n  redirectTo: 'not-found'\n}\n```\n\nEsta entrada especial debe situarse **al final del _array_ de las rutas conocidas**. Angular evalúa la ruta actual contra todas las disponibles de arriba a abajo. La primer que resuelva el _match_ gana.\n\nEl conjunto de rutas de nuestra aplicación a estas alturas queda como sigue:\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  },\n  {\n    path: 'about',\n    loadChildren: () => import('./about-us/about-us.module').then(m => m.AboutUsModule),\n  },\n  {\n    path: 'courses',\n    loadChildren: () => import('./courses/courses.module').then(m => m.CoursesModule)\n  },\n  {\n    path: 'not-found',\n    loadChildren: () => import('./not-found/not-found.module').then(m => m.NotFoundModule),\n  },\n  {\n    path: '**',\n    redirectTo: 'not-found',\n  },\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nLa parte vistosa es crear el contenido para el  `NotFoundComponent`.\n\n```html\n<h3>404</h3>\n<p> 🧭 not-found works!</p>\n<ab-go-home></ab-go-home>\n```\n\nCon esto tendrás una aplicación SPA en _Angular_. Sigue esta serie para añadirle [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/) mientras aprendes a programar con Angular9.Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng_2-Paginas-y-rutas-Angular-SPA.md","raw":"---\ntitle: Páginas y rutas Angular SPA\npermalink: paginas-y-rutas-angular-spa\ndate: 2020-04-14 13:41:14\ntags:\n  - Angular\n  - SPA\n  - Routing\n  - Tutorial\n  - Introducción\n  - Angular9\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-2_spa.png\n---\n\n![paginas-y-rutas-angular-spa](/images/tutorial-angular-2_spa.png)\n\nLas **aplicaciones Angular 9 son conjuntos de páginas enrutadas** en el propio navegador. Son las conocidas _SPA, Single Page Applications_. Estas apps liberan al servidor de una parte del trabajo reduciendo la cantidad de llamadas y mejorando la percepción de velocidad del usuario.\n\nEn este tutorial aprenderás a crear una Angular SPA fácilmente usando `@angular/router`, **el enrutador de Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal como quedó en [Base para una aplicación Angular](../base-aplicacion-angular/). Seguimos usando el concepto de árbol, ahora como analogía de **las rutas y las vistas** asociadas. Al finalizar tendrás una angular SPA con vistas asociadas a sus rutas.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-basic](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Rutas\n\nEs raro que una aplicación web resuelva o exponga toda su funcionalidad e información e una única vista. Lo habitual es que **se desplieguen múltiples páginas en distintas direrecciones**. Hasta hace unos años la única opción era que el servidor procesase dicha ruta y remitiese el contenido listo para visualizar en el navegador.\n\nEsto significa mucho trabajo para el servidor, mucho contenido para la red y poca responsabilidad para los navegadores. Para las aplicaciones empresariales parece razonable distribuir esa carga, y **que sea el navegador el que prepare la vista** ejecutando instrucciones y solicitando datos.\n\nY una de las responsabilidades de las que se hará cargo es la de **procesar las rutas y determinar cual será la vista** que se deba mostrar en cada dirección. Veamos cómo lo resuelve Angular.\n\nAl crear la aplicación hice uso del flag `routing` en el comando de generación del _CLI_.\n\nRecordemos:\n\n```terminal\nng new angular-basic --routing\n```\n\nEsto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el `AppModule` verdadero módulo raíz, y ahora verás en profundidad a su gemelo: el\n**módulo de enrutado** `AppRoutingModule` y el uso que hace del `RouterModule`.\n\n## 1.1 RouterModule\n\nCon lo que hemos aprendido sobre módulos y sus dependencias podemos entender que\n`AppRoutingModule` importa, configura y exportar al `RouterModule`. Y que a su vez `AppModule` al importar a `AppRoutingModule` dispone de todo lo necesario para realizar el enrutado.\n\nLa ruta de dependencias de módulos queda tal que así:\n\n```\nRouterModule -> AppRoutingModule -> AppModule\n```\n\nHasta ahora los módulos habían sido meros contendores. Algo similar a los espacios de nombres. Pero al ser clases puede tener código y por tanto exponer funcionalidad. De hecho, el `RouterModule` expone un par de métodos de configuración. Se llaman `.forRoot(routes:Routes)` y `.forChild(routes:Routes)` y se usan a nivel raíz o todas las demás situaciones respectivamente.\n\nAmbos reciben una estructura que mantiene un array de rutas y las instrucciones a ejecutar cuando dichas rutas se activen. Las rutas pueden ser estáticas o usar comodines. Las acciones pueden ser de elección de componente para la vista, diferir el trabajo a otro módulo o redirigir al usuario a otra ruta.\n\n### Módulos componentes y rutas\n\nVemos un primer ejemplo para el enrutador a nivel raíz. Partimos del par módulo-componente para la página _Home_. Hasta ahora se veía en la aplicación porque estaba incrustado a mano en medio del _layout_ principal.\n\nLo que haremos a continuación es **asignar este componente a una ruta**, y que sólo se vea cuando le toque a dicha ruta. Claro que en este caso es la ruta vacía, y por ahora es la única así que no cambiará gran cosa. Pero, de este modo Angular sabrá que mostrar en cada ruta para cuando hay más.\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\n## 1.2 Router Outlet\n\nEl caso es que necesitamos mostrar un componente u otro en función de una ruta. Por tanto habrá que eliminar la referencia explícita a `<ab-home>` y confiar en algo que ya estaba presente pero que no habíamos estudiado, el `<router-outlet>`.\n\nEste es un componente que viene con el `RouterModule` y actúa como un **contenedor dinámico**, incrustando el componente adecuado apara cada ruta. El contenido de `main.component.ts`, ahora será dinámico\n\n```html\n<main>\n  <p>\n    Fork this <a href=\"https://github.com/AcademiaBinaria/angular-basic\">Repository</a>\n  </p>\n  <router-outlet></router-outlet>\n</main>\n```\n\n## 1.3 Router Link\n\nOtra novedad que podemos, y debemos, empezar a usar es la directiva `routerLink`. **Una directiva es una extensión del HTML propia de Angular.** Se emplea como si fuese un atributo de cualquier elemento y durante la compilación genera el código estándar necesario para que lo entiendan los navegadores.\n\nEn concreto esta directiva, que también viene en el módulo `routerModule`, se usa en sustitución del atributo estándar `href`. Inicialmente nos basta con saber que instruye al navegador para que no solicite la ruta al servidor, sino que el propio código local de javaScript se encargará de procesarla.\n\nAsí, por ejemplo en el único y sencillo componente compartido del que disponemos, decidimos usarla para que las idas y venidas entre nuestras rutas no requieran de recarga en el servidor.\n\nEn el `src\\app\\shared\\go-home\\go-home.component.html`\n```html\n<a routerLink=\"\"> Go home 🏠</a>\n```\n\n> Recuerda, `routerLink` es una _Directiva_\n>>Como un atributo, pero con superpoderes\n\nPor ahora, _simplemente_ mantiene la gestión de las rutas en el lado del navegador.\n\n# 2 Lazy Loading\n\nTal com hemos procedido para la ruta vacía, podríamos continuar con todas las demás. Por ejemplo una ruta muy común sería la típica _Acerca de_ o dicho en modo _url_: `/about`. Lo que haríamos sería generarle un módulo con un un componente y luego asignar dicho componente a la tabla de rutas con algo así:\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  },\n  {\n    path: 'about',\n    component: AboutUsComponent,\n  }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nPodríamos, pero no lo haremos. ¿Por qué? Pues por una **cuestión de pesos y velocidad**. Tal como se ve en el código, para poder asignar un componente a una ruta antes tenemos que haberlo importado. Y eso significa que parará a formar parte del código que se _transpile_, empaquete y envíe al navegador.\n\nEs decir, el sufrido usuario se va a **descargar la definición de los componentes antes de visitarlos**. Es más, se descargará componentes de rutas que quizá nunca visite. A esta técnica se la conoce como _eager loading_ y, en general y hablando así a la bruto, debemos evitarla en favor de otra conocida como _lazy loading_.\n\n\n## 2.1 Webpack y los bundles por ruta\n\nPara implementarla se necesitan un par de cooperantes. En particular y sobre todo el empaquetador _Webpack_.\n\nEl objetivo es **diferir la descarga de las rutas no visitadas** y para ello querremos empaquetar cada ruta en un _bundle_. Esto requiere al menos un módulo por ruta y adoptar un convenio especial para que  _webpack_ inicie nuevos empaquetados en múltiples puntos.\n\n### Crear los componentes en módulos con enrutado\n\nPor complejo que suene en la práctica es muy sencillo. Basta con usar el comando adecuado del CLI. Por ejemplo para el caso del _Acerca de_ emplearíamos una instrucción como esta:\n\n```bash\nng g m about --route=about -m app-routing.module.ts\n```\nNo es más que la generación de un nuevo módulo pero con el _flag_ `--route=` que le indica al CLI que debe tratarlo como una nueva ruta. Este súper comando genera dos módulos, un componente y además los registra automáticamente. Veamos el resultado:\n\nEn el módulo de enrutado raíz tenemos un nuevo camino, pero con una sintaxis distinta.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  },\n  {\n    path: 'about',\n    loadChildren: () => import('./about/about.module').then(m => m.AboutModule),\n  },\n];\n```\n\nLo que dice es que cuando se active la ruta `about` entonces se le transfiera el control a otro módulo mediante una instrucción asíncrona. De esta forma ase consiguen dos cosas: por un lado al no usar ningún componente explícito no hay que importarlo; por otro lado la descarga del módulo que resuelva el problema se ejecutará en segundo plano y sólo si el usuario visita la ruta.\n\n## 2.2 El enrutador delegado\n\nClaro que sólo hemos visto la mitad de la película. La instrucción `loadChildren` delega el enrutado en otro módulo; el `AboutModule` que fue creado por el cli. Dicho módulo depende a su vez de otro de enrutamiento local, el `AboutRoutingModule`.\n\nEste módulo de enrutamiento es similar al ya conocido `AppRoutingModule`, pero se activa y por tanto actúa, a partir de una ruta ya procesada por su padre. Su contenido es similar a esto:\n\n\n```typescript\nimport { AboutComponent } from './about.component';\n\nconst routes: Routes = [{ path: '', component: AboutComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AboutRoutingModule {}\n```\n\nTres cosas llaman la atención. Para empezar la ruta está vacía de nuevo. Pero eso es por que se concatena a la anteriormente evaluada. Es decir, el segmento `about` está ya descontado. Segundo, a este nivel volvemos a indicar un componente concreto y por tanto necesitamos importarlo. Por último y hablando de importaciones, el `RouterModule` se configura ahora como una rama hija del árbol de rutas principal. Lo hace con el método `.forChild(routes: Routes)`.\n\n> Comprueba en ejecución cómo se descargan los _bundles_ según navegas.\n\n### La navegación lazy permite la descarga diferida al navegar por las rutas.\n\n# 3. Rutas anidadas\n\nHay muchas situaciones que **por cuestiones de usabilidad anidamos navegaciones**. Por ejemplo una tienda online, te permite escoger categorías, y después vistas distintas de sus productos como listados o fichas. En las aplicaciones de gestión es frecuente encontrarse con estructuras tipo tab o menús de actuación parciales.\n\nEstas situaciones se resuelven la tecnología denominada _nested routes_ y requiere del conocimiento de una nueva propiedad de las rutas.\n\n## 3.1 Children\n\nAntes de nada supongamos que en la página about queremos mostrar dos categorías de información. Por un lado enlaces de interés sobre esta aplicación y por otro una información básica sobre la misma.\n\nCrearíamos por tanto un par de componentes como estos.\n\n```bash\nng g c about/about/links\nng g c about/about/info\n```\n\nPero, en lugar de asignarles ya un camino específico a cada uno, lo que haremos será incrustarlos como hijos del componente `AboutComponent`. Para ello escribimos algo así en `about-routing.module.ts`\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: AboutComponent,\n    children: [\n      {\n        path: 'links',\n        component: LinksComponent\n      },\n      {\n        path: 'info',\n        component: InfoComponent\n      }\n    ]\n  }\n];\n```\n\nEsto es sólo el primer paso.\n\n## 3.2 RouterOutlet anidado\n\nPara que los hijos acaben apareciendo dónde deben, hay que usar un segundo `<router-outlet>`. Esta vez dentro de la vista del componente padre. En `AboutComponent` :\n\n```html\n<h3>About us</h3>\n<header>\n  <p>\n    <a routerLink=\"links\"\n       class=\"button\"> Tutorial Links </ab-home>\n  </p>\n  <p>\n    <a routerLink=\"info\"\n       class=\"button\"> More Info </a>\n  </p>\n</header>\n<router-outlet></router-outlet>\n```\n\nAhora este componente actúa como una micro aplicación; con su menú y su espacio de carga dinámica.\n\n# 4 Rutas paramétricas\n\nSi hay algo que poco tardará en aparecer será la necesidad de presentar **información distinta pero con un formato similar**. De nuevo ejemplos archiconocidos serán una página para un producto, un artículo en un blog, una ficha de empleado o el seguimiento de un pedido.\n\nEn estas situaciones queremos que parte de la ruta identifique al elemento concreto que vamos a mostrar, y a ese identificador le llamaremos **parámetro**. Ojo, es similar pero no exactamente un `queryParameter`.\n\n## 4.1 Variables en la ruta\n\nPor ejemplo, supongamos una academia que quiere mostrar una lista de cursos y una página para cada uno. Para empezar creará un módulo enrutado como este:\n\n```bash\nng g m courses --route=courses -m app-routing.module.ts\n```\n\nEntre otras cosas modificará el `AppRoutingModule` incrustando una nueva entrada como esta:\n\n```typescript\n{\n  path: 'courses',\n  loadChildren: () => import('./courses/courses.module').then(m => m.CoursesModule)\n},\n```\n\nPero nosotros después vamos a realizar un cambio en la gestión local, incorporando un nuevo segmento al camino. Le asignamos el valor `:slug`.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: ':slug',\n    component: CoursesComponent\n    }\n];\n```\n\nEn este caso el `:` indica que lo que viene no es un texto literal, si no **una variable**. Un parámetro en nuestro argot. El nombre es cosa del programador, el usuario nunca lo verá. En este caso me he decidido por usar el término _slug_ muy empleado para introducir títulos dentro de las url.\n\nAhora ya resuelve rutas como: _/courses/introduccion_ o _/courses/avanzado_\n\nOtra cosa será qué hacer cuando esas rutas se activen.\n\n## 4.2 ActivatedRoute\n\nEntramos quizá en la parte más compleja, pero que como siempre es igual te la puedes tomar como una receta para todas tus aplicaciones.\n\nVeamos antes el contenido del fichero `courses.component.ts` relacionado con la obtención del parámetro de la ruta activa:\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { environment } from '../../environments/environment';\n\nexport class CoursesComponent implements OnInit {\n  course: any;\n  constructor(route: ActivatedRoute) {\n    route.params.subscribe(params => {\n      const courseSlug = params.slug;\n      this.course = environment.courses.find(c => c.slug === courseSlug);\n    });\n  }\n  ngOnInit() {}\n}\n```\n\nPor partes, que es la primera vez que vemos tanto código en este tutorial. Para empezar y ya que **los componentes son clases**, entonces podrán tener propiedades, métodos y constructores. Así que aparecen la propiedad `course:any` sin tipo concreto. Y el constructor que recibe una argumento de tipo `ActivatedRoute`\n\n**Angular adopta y promueve el uso de varios patones de arquitectura de software**. Uno de ellos es la inyección de dependencias, a la que dedicamos un tema en este tutorial. Por ahora nos basta con saber  que el framework nos inyectará una instancia de la clase `ActivatedRoute` en la variable argumento `route`.\n\nDespués viene un código intimidante pero que también es siempre del mismo tipo. La dificultad radica en usar programación asíncrona, a la que también dedicamos más de un tema. Simplificando, lo que nos dice es que si nos suscribimos a él, entonces nos notificará los cambios en los parámetros para que hagamos uso de ellos.\n\nEn este caso, buscamos el curso solicitado en un sencillo array. Y después se lo mostramos al usuario con técnicas de presentación dinámica propias de Angular que también se ven más adelante en este curso.\n\n```html\n<h3>👨‍🎓 {{ course.title }}</h3>\n<p>{{course.description}}</p>\n<p>\n  <a href=\"{{course.url}}\"\n     target=\"_blank\">{{course.url}}</a>\n</p>\n<p>\n  <ab-go-home></ab-go-home>\n</p>\n```\n\nEnlazamos todo cambiando los `href` del par de anclas del `HomeComponent`. Ahora usamos el enrutamiento local mediante `routerLink`.\n\n```html\n<h2> Welcome 🏡 !</h2>\n<nav>\n  <p>\n    <a routerLink=\"courses/introduccion\">💻 Introducción</a>\n  </p>\n  <p>\n    <a routerLink=\"courses/avanzado\">💻 Avanzado</a>\n  </p>\n</nav>\n```\n\n# 5 Redirecciones\n\nHay situaciones en las que dada una ruta, queremos **enviar al usuario a otra página**. A veces por una simple decisión de renombrado de rutas. Otras quizá respondiendo a problemas o acciones inesperadas del usuario.\n\nPor ejemplo, vamos ver un tratamiento genérico del caso _not found_. Para empezar crearemos una ruta específica para indicarle al usuario que la ruta que buscaba no existe.\n\n```terminal\nng g m not-found --route=not-found -m app-routing.module.ts\n```\n\nYa sabemos lo que ocurre. Un nuevo módulo y una ruta diferida a nivel raíz  `not-found`.\n\n```typescript\n{\n  path: 'not-found',\n  loadChildren: () => import('./not-found/not-found.module').then(m => m.NotFoundModule),\n},\n```\n\nQue localmente se asigna al componente `NotFoundComponent`.\n\n```typescript\n{\n  path: '',\n  component: NotFoundComponent,\n},\n```\n\n\n> Pero, nadie va voluntariamente a esa ruta\n\n>> Sólo los que se pierden\n\nAsí que hay que obligarles. Para eso usamos un nuevo comando de la configuración de rutas, el `redirectTo`. Y lo asignamos a todas aquellas rutas desconocidas usando un el comodín `**`\n\n```typescript\n{\n  path: '**',\n  redirectTo: 'not-found'\n}\n```\n\nEsta entrada especial debe situarse **al final del _array_ de las rutas conocidas**. Angular evalúa la ruta actual contra todas las disponibles de arriba a abajo. La primer que resuelva el _match_ gana.\n\nEl conjunto de rutas de nuestra aplicación a estas alturas queda como sigue:\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  },\n  {\n    path: 'about',\n    loadChildren: () => import('./about-us/about-us.module').then(m => m.AboutUsModule),\n  },\n  {\n    path: 'courses',\n    loadChildren: () => import('./courses/courses.module').then(m => m.CoursesModule)\n  },\n  {\n    path: 'not-found',\n    loadChildren: () => import('./not-found/not-found.module').then(m => m.NotFoundModule),\n  },\n  {\n    path: '**',\n    redirectTo: 'not-found',\n  },\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nLa parte vistosa es crear el contenido para el  `NotFoundComponent`.\n\n```html\n<h3>404</h3>\n<p> 🧭 not-found works!</p>\n<ab-go-home></ab-go-home>\n```\n\nCon esto tendrás una aplicación SPA en _Angular_. Sigue esta serie para añadirle [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/) mientras aprendes a programar con Angular9.Todos esos detalles se tratan en el [curso básico online](https://www.trainingit.es/curso-angular-basico/?promo=angular.builders) que imparto con TrainingIT o a medida para tu empresa.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"ng_2-Paginas-y-rutas-Angular-SPA","published":1,"updated":"2023-07-02T10:25:58.481Z","__permalink":"paginas-y-rutas-angular-spa","comments":1,"layout":"post","photos":[],"link":"","_id":"cljlaq2fl0022e0964nx7d7se","content":"<p><img src=\"/images/tutorial-angular-2_spa.png\" alt=\"paginas-y-rutas-angular-spa\"></p>\n<p>Las <strong>aplicaciones Angular 9 son conjuntos de páginas enrutadas</strong> en el propio navegador. Son las conocidas <em>SPA, Single Page Applications</em>. Estas apps liberan al servidor de una parte del trabajo reduciendo la cantidad de llamadas y mejorando la percepción de velocidad del usuario.</p>\n<p>En este tutorial aprenderás a crear una Angular SPA fácilmente usando <code>@angular/router</code>, <strong>el enrutador de Angular</strong>.</p>\n<span id=\"more\"></span>\n\n<p>Partiendo de la aplicación tal como quedó en <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>. Seguimos usando el concepto de árbol, ahora como analogía de <strong>las rutas y las vistas</strong> asociadas. Al finalizar tendrás una angular SPA con vistas asociadas a sus rutas.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Rutas\"><a href=\"#1-Rutas\" class=\"headerlink\" title=\"1. Rutas\"></a>1. Rutas</h1><p>Es raro que una aplicación web resuelva o exponga toda su funcionalidad e información e una única vista. Lo habitual es que <strong>se desplieguen múltiples páginas en distintas direrecciones</strong>. Hasta hace unos años la única opción era que el servidor procesase dicha ruta y remitiese el contenido listo para visualizar en el navegador.</p>\n<p>Esto significa mucho trabajo para el servidor, mucho contenido para la red y poca responsabilidad para los navegadores. Para las aplicaciones empresariales parece razonable distribuir esa carga, y <strong>que sea el navegador el que prepare la vista</strong> ejecutando instrucciones y solicitando datos.</p>\n<p>Y una de las responsabilidades de las que se hará cargo es la de <strong>procesar las rutas y determinar cual será la vista</strong> que se deba mostrar en cada dirección. Veamos cómo lo resuelve Angular.</p>\n<p>Al crear la aplicación hice uso del flag <code>routing</code> en el comando de generación del <em>CLI</em>.</p>\n<p>Recordemos:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new angular-basic --routing</span><br></pre></td></tr></table></figure>\n\n<p>Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el <code>AppModule</code> verdadero módulo raíz, y ahora verás en profundidad a su gemelo: el<br><strong>módulo de enrutado</strong> <code>AppRoutingModule</code> y el uso que hace del <code>RouterModule</code>.</p>\n<h2 id=\"1-1-RouterModule\"><a href=\"#1-1-RouterModule\" class=\"headerlink\" title=\"1.1 RouterModule\"></a>1.1 RouterModule</h2><p>Con lo que hemos aprendido sobre módulos y sus dependencias podemos entender que<br><code>AppRoutingModule</code> importa, configura y exportar al <code>RouterModule</code>. Y que a su vez <code>AppModule</code> al importar a <code>AppRoutingModule</code> dispone de todo lo necesario para realizar el enrutado.</p>\n<p>La ruta de dependencias de módulos queda tal que así:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RouterModule -&gt; AppRoutingModule -&gt; AppModule</span><br></pre></td></tr></table></figure>\n\n<p>Hasta ahora los módulos habían sido meros contendores. Algo similar a los espacios de nombres. Pero al ser clases puede tener código y por tanto exponer funcionalidad. De hecho, el <code>RouterModule</code> expone un par de métodos de configuración. Se llaman <code>.forRoot(routes:Routes)</code> y <code>.forChild(routes:Routes)</code> y se usan a nivel raíz o todas las demás situaciones respectivamente.</p>\n<p>Ambos reciben una estructura que mantiene un array de rutas y las instrucciones a ejecutar cuando dichas rutas se activen. Las rutas pueden ser estáticas o usar comodines. Las acciones pueden ser de elección de componente para la vista, diferir el trabajo a otro módulo o redirigir al usuario a otra ruta.</p>\n<h3 id=\"Modulos-componentes-y-rutas\"><a href=\"#Modulos-componentes-y-rutas\" class=\"headerlink\" title=\"Módulos componentes y rutas\"></a>Módulos componentes y rutas</h3><p>Vemos un primer ejemplo para el enrutador a nivel raíz. Partimos del par módulo-componente para la página <em>Home</em>. Hasta ahora se veía en la aplicación porque estaba incrustado a mano en medio del <em>layout</em> principal.</p>\n<p>Lo que haremos a continuación es <strong>asignar este componente a una ruta</strong>, y que sólo se vea cuando le toque a dicha ruta. Claro que en este caso es la ruta vacía, y por ahora es la única así que no cambiará gran cosa. Pero, de este modo Angular sabrá que mostrar en cada ruta para cuando hay más.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HomeComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-Router-Outlet\"><a href=\"#1-2-Router-Outlet\" class=\"headerlink\" title=\"1.2 Router Outlet\"></a>1.2 Router Outlet</h2><p>El caso es que necesitamos mostrar un componente u otro en función de una ruta. Por tanto habrá que eliminar la referencia explícita a <code>&lt;ab-home&gt;</code> y confiar en algo que ya estaba presente pero que no habíamos estudiado, el <code>&lt;router-outlet&gt;</code>.</p>\n<p>Este es un componente que viene con el <code>RouterModule</code> y actúa como un <strong>contenedor dinámico</strong>, incrustando el componente adecuado apara cada ruta. El contenido de <code>main.component.ts</code>, ahora será dinámico</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Fork this <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://github.com/AcademiaBinaria/angular-basic&quot;</span>&gt;</span>Repository<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-Router-Link\"><a href=\"#1-3-Router-Link\" class=\"headerlink\" title=\"1.3 Router Link\"></a>1.3 Router Link</h2><p>Otra novedad que podemos, y debemos, empezar a usar es la directiva <code>routerLink</code>. <strong>Una directiva es una extensión del HTML propia de Angular.</strong> Se emplea como si fuese un atributo de cualquier elemento y durante la compilación genera el código estándar necesario para que lo entiendan los navegadores.</p>\n<p>En concreto esta directiva, que también viene en el módulo <code>routerModule</code>, se usa en sustitución del atributo estándar <code>href</code>. Inicialmente nos basta con saber que instruye al navegador para que no solicite la ruta al servidor, sino que el propio código local de javaScript se encargará de procesarla.</p>\n<p>Así, por ejemplo en el único y sencillo componente compartido del que disponemos, decidimos usarla para que las idas y venidas entre nuestras rutas no requieran de recarga en el servidor.</p>\n<p>En el <code>src\\app\\shared\\go-home\\go-home.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> Go home 🏠<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Recuerda, <code>routerLink</code> es una <em>Directiva</em></p>\n<blockquote>\n<p>Como un atributo, pero con superpoderes</p>\n</blockquote>\n</blockquote>\n<p>Por ahora, <em>simplemente</em> mantiene la gestión de las rutas en el lado del navegador.</p>\n<h1 id=\"2-Lazy-Loading\"><a href=\"#2-Lazy-Loading\" class=\"headerlink\" title=\"2 Lazy Loading\"></a>2 Lazy Loading</h1><p>Tal com hemos procedido para la ruta vacía, podríamos continuar con todas las demás. Por ejemplo una ruta muy común sería la típica <em>Acerca de</em> o dicho en modo <em>url</em>: <code>/about</code>. Lo que haríamos sería generarle un módulo con un un componente y luego asignar dicho componente a la tabla de rutas con algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HomeComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AboutComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./about/about.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;about&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">AboutUsComponent</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Podríamos, pero no lo haremos. ¿Por qué? Pues por una <strong>cuestión de pesos y velocidad</strong>. Tal como se ve en el código, para poder asignar un componente a una ruta antes tenemos que haberlo importado. Y eso significa que parará a formar parte del código que se <em>transpile</em>, empaquete y envíe al navegador.</p>\n<p>Es decir, el sufrido usuario se va a <strong>descargar la definición de los componentes antes de visitarlos</strong>. Es más, se descargará componentes de rutas que quizá nunca visite. A esta técnica se la conoce como <em>eager loading</em> y, en general y hablando así a la bruto, debemos evitarla en favor de otra conocida como <em>lazy loading</em>.</p>\n<h2 id=\"2-1-Webpack-y-los-bundles-por-ruta\"><a href=\"#2-1-Webpack-y-los-bundles-por-ruta\" class=\"headerlink\" title=\"2.1 Webpack y los bundles por ruta\"></a>2.1 Webpack y los bundles por ruta</h2><p>Para implementarla se necesitan un par de cooperantes. En particular y sobre todo el empaquetador <em>Webpack</em>.</p>\n<p>El objetivo es <strong>diferir la descarga de las rutas no visitadas</strong> y para ello querremos empaquetar cada ruta en un <em>bundle</em>. Esto requiere al menos un módulo por ruta y adoptar un convenio especial para que  <em>webpack</em> inicie nuevos empaquetados en múltiples puntos.</p>\n<h3 id=\"Crear-los-componentes-en-modulos-con-enrutado\"><a href=\"#Crear-los-componentes-en-modulos-con-enrutado\" class=\"headerlink\" title=\"Crear los componentes en módulos con enrutado\"></a>Crear los componentes en módulos con enrutado</h3><p>Por complejo que suene en la práctica es muy sencillo. Basta con usar el comando adecuado del CLI. Por ejemplo para el caso del <em>Acerca de</em> emplearíamos una instrucción como esta:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m about --route=about -m app-routing.module.ts</span><br></pre></td></tr></table></figure>\n<p>No es más que la generación de un nuevo módulo pero con el <em>flag</em> <code>--route=</code> que le indica al CLI que debe tratarlo como una nueva ruta. Este súper comando genera dos módulos, un componente y además los registra automáticamente. Veamos el resultado:</p>\n<p>En el módulo de enrutado raíz tenemos un nuevo camino, pero con una sintaxis distinta.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;about&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./about/about.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">AboutModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>Lo que dice es que cuando se active la ruta <code>about</code> entonces se le transfiera el control a otro módulo mediante una instrucción asíncrona. De esta forma ase consiguen dos cosas: por un lado al no usar ningún componente explícito no hay que importarlo; por otro lado la descarga del módulo que resuelva el problema se ejecutará en segundo plano y sólo si el usuario visita la ruta.</p>\n<h2 id=\"2-2-El-enrutador-delegado\"><a href=\"#2-2-El-enrutador-delegado\" class=\"headerlink\" title=\"2.2 El enrutador delegado\"></a>2.2 El enrutador delegado</h2><p>Claro que sólo hemos visto la mitad de la película. La instrucción <code>loadChildren</code> delega el enrutado en otro módulo; el <code>AboutModule</code> que fue creado por el cli. Dicho módulo depende a su vez de otro de enrutamiento local, el <code>AboutRoutingModule</code>.</p>\n<p>Este módulo de enrutamiento es similar al ya conocido <code>AppRoutingModule</code>, pero se activa y por tanto actúa, a partir de una ruta ya procesada por su padre. Su contenido es similar a esto:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AboutComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./about.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">AboutComponent</span> &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AboutRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Tres cosas llaman la atención. Para empezar la ruta está vacía de nuevo. Pero eso es por que se concatena a la anteriormente evaluada. Es decir, el segmento <code>about</code> está ya descontado. Segundo, a este nivel volvemos a indicar un componente concreto y por tanto necesitamos importarlo. Por último y hablando de importaciones, el <code>RouterModule</code> se configura ahora como una rama hija del árbol de rutas principal. Lo hace con el método <code>.forChild(routes: Routes)</code>.</p>\n<blockquote>\n<p>Comprueba en ejecución cómo se descargan los <em>bundles</em> según navegas.</p>\n</blockquote>\n<h3 id=\"La-navegacion-lazy-permite-la-descarga-diferida-al-navegar-por-las-rutas\"><a href=\"#La-navegacion-lazy-permite-la-descarga-diferida-al-navegar-por-las-rutas\" class=\"headerlink\" title=\"La navegación lazy permite la descarga diferida al navegar por las rutas.\"></a>La navegación lazy permite la descarga diferida al navegar por las rutas.</h3><h1 id=\"3-Rutas-anidadas\"><a href=\"#3-Rutas-anidadas\" class=\"headerlink\" title=\"3. Rutas anidadas\"></a>3. Rutas anidadas</h1><p>Hay muchas situaciones que <strong>por cuestiones de usabilidad anidamos navegaciones</strong>. Por ejemplo una tienda online, te permite escoger categorías, y después vistas distintas de sus productos como listados o fichas. En las aplicaciones de gestión es frecuente encontrarse con estructuras tipo tab o menús de actuación parciales.</p>\n<p>Estas situaciones se resuelven la tecnología denominada <em>nested routes</em> y requiere del conocimiento de una nueva propiedad de las rutas.</p>\n<h2 id=\"3-1-Children\"><a href=\"#3-1-Children\" class=\"headerlink\" title=\"3.1 Children\"></a>3.1 Children</h2><p>Antes de nada supongamos que en la página about queremos mostrar dos categorías de información. Por un lado enlaces de interés sobre esta aplicación y por otro una información básica sobre la misma.</p>\n<p>Crearíamos por tanto un par de componentes como estos.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c about/about/links</span><br><span class=\"line\">ng g c about/about/info</span><br></pre></td></tr></table></figure>\n\n<p>Pero, en lugar de asignarles ya un camino específico a cada uno, lo que haremos será incrustarlos como hijos del componente <code>AboutComponent</code>. Para ello escribimos algo así en <code>about-routing.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">AboutComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;links&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">LinksComponent</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;info&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">InfoComponent</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>Esto es sólo el primer paso.</p>\n<h2 id=\"3-2-RouterOutlet-anidado\"><a href=\"#3-2-RouterOutlet-anidado\" class=\"headerlink\" title=\"3.2 RouterOutlet anidado\"></a>3.2 RouterOutlet anidado</h2><p>Para que los hijos acaben apareciendo dónde deben, hay que usar un segundo <code>&lt;router-outlet&gt;</code>. Esta vez dentro de la vista del componente padre. En <code>AboutComponent</code> :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>About us<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;links&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span> Tutorial Links <span class=\"tag\">&lt;/<span class=\"name\">ab-home</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;info&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span> More Info <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Ahora este componente actúa como una micro aplicación; con su menú y su espacio de carga dinámica.</p>\n<h1 id=\"4-Rutas-parametricas\"><a href=\"#4-Rutas-parametricas\" class=\"headerlink\" title=\"4 Rutas paramétricas\"></a>4 Rutas paramétricas</h1><p>Si hay algo que poco tardará en aparecer será la necesidad de presentar <strong>información distinta pero con un formato similar</strong>. De nuevo ejemplos archiconocidos serán una página para un producto, un artículo en un blog, una ficha de empleado o el seguimiento de un pedido.</p>\n<p>En estas situaciones queremos que parte de la ruta identifique al elemento concreto que vamos a mostrar, y a ese identificador le llamaremos <strong>parámetro</strong>. Ojo, es similar pero no exactamente un <code>queryParameter</code>.</p>\n<h2 id=\"4-1-Variables-en-la-ruta\"><a href=\"#4-1-Variables-en-la-ruta\" class=\"headerlink\" title=\"4.1 Variables en la ruta\"></a>4.1 Variables en la ruta</h2><p>Por ejemplo, supongamos una academia que quiere mostrar una lista de cursos y una página para cada uno. Para empezar creará un módulo enrutado como este:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m courses --route=courses -m app-routing.module.ts</span><br></pre></td></tr></table></figure>\n\n<p>Entre otras cosas modificará el <code>AppRoutingModule</code> incrustando una nueva entrada como esta:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;courses&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./courses/courses.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">CoursesModule</span>)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>Pero nosotros después vamos a realizar un cambio en la gestión local, incorporando un nuevo segmento al camino. Le asignamos el valor <code>:slug</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;:slug&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">CoursesComponent</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>En este caso el <code>:</code> indica que lo que viene no es un texto literal, si no <strong>una variable</strong>. Un parámetro en nuestro argot. El nombre es cosa del programador, el usuario nunca lo verá. En este caso me he decidido por usar el término <em>slug</em> muy empleado para introducir títulos dentro de las url.</p>\n<p>Ahora ya resuelve rutas como: <em>&#x2F;courses&#x2F;introduccion</em> o <em>&#x2F;courses&#x2F;avanzado</em></p>\n<p>Otra cosa será qué hacer cuando esas rutas se activen.</p>\n<h2 id=\"4-2-ActivatedRoute\"><a href=\"#4-2-ActivatedRoute\" class=\"headerlink\" title=\"4.2 ActivatedRoute\"></a>4.2 ActivatedRoute</h2><p>Entramos quizá en la parte más compleja, pero que como siempre es igual te la puedes tomar como una receta para todas tus aplicaciones.</p>\n<p>Veamos antes el contenido del fichero <code>courses.component.ts</code> relacionado con la obtención del parámetro de la ruta activa:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ActivatedRoute</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../environments/environment&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CoursesComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">course</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">route: ActivatedRoute</span>) &#123;</span><br><span class=\"line\">    route.<span class=\"property\">params</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> courseSlug = params.<span class=\"property\">slug</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">course</span> = environment.<span class=\"property\">courses</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.<span class=\"property\">slug</span> === courseSlug);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Por partes, que es la primera vez que vemos tanto código en este tutorial. Para empezar y ya que <strong>los componentes son clases</strong>, entonces podrán tener propiedades, métodos y constructores. Así que aparecen la propiedad <code>course:any</code> sin tipo concreto. Y el constructor que recibe una argumento de tipo <code>ActivatedRoute</code></p>\n<p><strong>Angular adopta y promueve el uso de varios patones de arquitectura de software</strong>. Uno de ellos es la inyección de dependencias, a la que dedicamos un tema en este tutorial. Por ahora nos basta con saber  que el framework nos inyectará una instancia de la clase <code>ActivatedRoute</code> en la variable argumento <code>route</code>.</p>\n<p>Después viene un código intimidante pero que también es siempre del mismo tipo. La dificultad radica en usar programación asíncrona, a la que también dedicamos más de un tema. Simplificando, lo que nos dice es que si nos suscribimos a él, entonces nos notificará los cambios en los parámetros para que hagamos uso de ellos.</p>\n<p>En este caso, buscamos el curso solicitado en un sencillo array. Y después se lo mostramos al usuario con técnicas de presentación dinámica propias de Angular que también se ven más adelante en este curso.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>👨‍🎓 &#123;&#123; course.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;course.description&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;&#123;course.url&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>&#123;&#123;course.url&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-go-home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-go-home</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Enlazamos todo cambiando los <code>href</code> del par de anclas del <code>HomeComponent</code>. Ahora usamos el enrutamiento local mediante <code>routerLink</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Welcome 🏡 !<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;courses/introduccion&quot;</span>&gt;</span>💻 Introducción<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;courses/avanzado&quot;</span>&gt;</span>💻 Avanzado<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-Redirecciones\"><a href=\"#5-Redirecciones\" class=\"headerlink\" title=\"5 Redirecciones\"></a>5 Redirecciones</h1><p>Hay situaciones en las que dada una ruta, queremos <strong>enviar al usuario a otra página</strong>. A veces por una simple decisión de renombrado de rutas. Otras quizá respondiendo a problemas o acciones inesperadas del usuario.</p>\n<p>Por ejemplo, vamos ver un tratamiento genérico del caso <em>not found</em>. Para empezar crearemos una ruta específica para indicarle al usuario que la ruta que buscaba no existe.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m not-found --route=not-found -m app-routing.module.ts</span><br></pre></td></tr></table></figure>\n\n<p>Ya sabemos lo que ocurre. Un nuevo módulo y una ruta diferida a nivel raíz  <code>not-found</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;not-found&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./not-found/not-found.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">NotFoundModule</span>),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>Que localmente se asigna al componente <code>NotFoundComponent</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"title class_\">NotFoundComponent</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>Pero, nadie va voluntariamente a esa ruta</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Sólo los que se pierden</p>\n</blockquote>\n</blockquote>\n<p>Así que hay que obligarles. Para eso usamos un nuevo comando de la configuración de rutas, el <code>redirectTo</code>. Y lo asignamos a todas aquellas rutas desconocidas usando un el comodín <code>**</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">redirectTo</span>: <span class=\"string\">&#x27;not-found&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Esta entrada especial debe situarse <strong>al final del <em>array</em> de las rutas conocidas</strong>. Angular evalúa la ruta actual contra todas las disponibles de arriba a abajo. La primer que resuelva el <em>match</em> gana.</p>\n<p>El conjunto de rutas de nuestra aplicación a estas alturas queda como sigue:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HomeComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;about&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./about-us/about-us.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">AboutUsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;courses&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./courses/courses.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">CoursesModule</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;not-found&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./not-found/not-found.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">NotFoundModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirectTo</span>: <span class=\"string\">&#x27;not-found&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>La parte vistosa es crear el contenido para el  <code>NotFoundComponent</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>404<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 🧭 not-found works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-go-home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-go-home</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Con esto tendrás una aplicación SPA en <em>Angular</em>. Sigue esta serie para añadirle <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a> mientras aprendes a programar con Angular9.Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-2_spa.png\" alt=\"paginas-y-rutas-angular-spa\"></p>\n<p>Las <strong>aplicaciones Angular 9 son conjuntos de páginas enrutadas</strong> en el propio navegador. Son las conocidas <em>SPA, Single Page Applications</em>. Estas apps liberan al servidor de una parte del trabajo reduciendo la cantidad de llamadas y mejorando la percepción de velocidad del usuario.</p>\n<p>En este tutorial aprenderás a crear una Angular SPA fácilmente usando <code>@angular/router</code>, <strong>el enrutador de Angular</strong>.</p>","more":"<p>Partiendo de la aplicación tal como quedó en <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>. Seguimos usando el concepto de árbol, ahora como analogía de <strong>las rutas y las vistas</strong> asociadas. Al finalizar tendrás una angular SPA con vistas asociadas a sus rutas.</p>\n<blockquote>\n<p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\">AcademiaBinaria&#x2F;angular-basic</a></p>\n</blockquote>\n<h1 id=\"1-Rutas\"><a href=\"#1-Rutas\" class=\"headerlink\" title=\"1. Rutas\"></a>1. Rutas</h1><p>Es raro que una aplicación web resuelva o exponga toda su funcionalidad e información e una única vista. Lo habitual es que <strong>se desplieguen múltiples páginas en distintas direrecciones</strong>. Hasta hace unos años la única opción era que el servidor procesase dicha ruta y remitiese el contenido listo para visualizar en el navegador.</p>\n<p>Esto significa mucho trabajo para el servidor, mucho contenido para la red y poca responsabilidad para los navegadores. Para las aplicaciones empresariales parece razonable distribuir esa carga, y <strong>que sea el navegador el que prepare la vista</strong> ejecutando instrucciones y solicitando datos.</p>\n<p>Y una de las responsabilidades de las que se hará cargo es la de <strong>procesar las rutas y determinar cual será la vista</strong> que se deba mostrar en cada dirección. Veamos cómo lo resuelve Angular.</p>\n<p>Al crear la aplicación hice uso del flag <code>routing</code> en el comando de generación del <em>CLI</em>.</p>\n<p>Recordemos:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new angular-basic --routing</span><br></pre></td></tr></table></figure>\n\n<p>Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el <code>AppModule</code> verdadero módulo raíz, y ahora verás en profundidad a su gemelo: el<br><strong>módulo de enrutado</strong> <code>AppRoutingModule</code> y el uso que hace del <code>RouterModule</code>.</p>\n<h2 id=\"1-1-RouterModule\"><a href=\"#1-1-RouterModule\" class=\"headerlink\" title=\"1.1 RouterModule\"></a>1.1 RouterModule</h2><p>Con lo que hemos aprendido sobre módulos y sus dependencias podemos entender que<br><code>AppRoutingModule</code> importa, configura y exportar al <code>RouterModule</code>. Y que a su vez <code>AppModule</code> al importar a <code>AppRoutingModule</code> dispone de todo lo necesario para realizar el enrutado.</p>\n<p>La ruta de dependencias de módulos queda tal que así:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RouterModule -&gt; AppRoutingModule -&gt; AppModule</span><br></pre></td></tr></table></figure>\n\n<p>Hasta ahora los módulos habían sido meros contendores. Algo similar a los espacios de nombres. Pero al ser clases puede tener código y por tanto exponer funcionalidad. De hecho, el <code>RouterModule</code> expone un par de métodos de configuración. Se llaman <code>.forRoot(routes:Routes)</code> y <code>.forChild(routes:Routes)</code> y se usan a nivel raíz o todas las demás situaciones respectivamente.</p>\n<p>Ambos reciben una estructura que mantiene un array de rutas y las instrucciones a ejecutar cuando dichas rutas se activen. Las rutas pueden ser estáticas o usar comodines. Las acciones pueden ser de elección de componente para la vista, diferir el trabajo a otro módulo o redirigir al usuario a otra ruta.</p>\n<h3 id=\"Modulos-componentes-y-rutas\"><a href=\"#Modulos-componentes-y-rutas\" class=\"headerlink\" title=\"Módulos componentes y rutas\"></a>Módulos componentes y rutas</h3><p>Vemos un primer ejemplo para el enrutador a nivel raíz. Partimos del par módulo-componente para la página <em>Home</em>. Hasta ahora se veía en la aplicación porque estaba incrustado a mano en medio del <em>layout</em> principal.</p>\n<p>Lo que haremos a continuación es <strong>asignar este componente a una ruta</strong>, y que sólo se vea cuando le toque a dicha ruta. Claro que en este caso es la ruta vacía, y por ahora es la única así que no cambiará gran cosa. Pero, de este modo Angular sabrá que mostrar en cada ruta para cuando hay más.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HomeComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-Router-Outlet\"><a href=\"#1-2-Router-Outlet\" class=\"headerlink\" title=\"1.2 Router Outlet\"></a>1.2 Router Outlet</h2><p>El caso es que necesitamos mostrar un componente u otro en función de una ruta. Por tanto habrá que eliminar la referencia explícita a <code>&lt;ab-home&gt;</code> y confiar en algo que ya estaba presente pero que no habíamos estudiado, el <code>&lt;router-outlet&gt;</code>.</p>\n<p>Este es un componente que viene con el <code>RouterModule</code> y actúa como un <strong>contenedor dinámico</strong>, incrustando el componente adecuado apara cada ruta. El contenido de <code>main.component.ts</code>, ahora será dinámico</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Fork this <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://github.com/AcademiaBinaria/angular-basic&quot;</span>&gt;</span>Repository<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-Router-Link\"><a href=\"#1-3-Router-Link\" class=\"headerlink\" title=\"1.3 Router Link\"></a>1.3 Router Link</h2><p>Otra novedad que podemos, y debemos, empezar a usar es la directiva <code>routerLink</code>. <strong>Una directiva es una extensión del HTML propia de Angular.</strong> Se emplea como si fuese un atributo de cualquier elemento y durante la compilación genera el código estándar necesario para que lo entiendan los navegadores.</p>\n<p>En concreto esta directiva, que también viene en el módulo <code>routerModule</code>, se usa en sustitución del atributo estándar <code>href</code>. Inicialmente nos basta con saber que instruye al navegador para que no solicite la ruta al servidor, sino que el propio código local de javaScript se encargará de procesarla.</p>\n<p>Así, por ejemplo en el único y sencillo componente compartido del que disponemos, decidimos usarla para que las idas y venidas entre nuestras rutas no requieran de recarga en el servidor.</p>\n<p>En el <code>src\\app\\shared\\go-home\\go-home.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> Go home 🏠<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Recuerda, <code>routerLink</code> es una <em>Directiva</em></p>\n<blockquote>\n<p>Como un atributo, pero con superpoderes</p>\n</blockquote>\n</blockquote>\n<p>Por ahora, <em>simplemente</em> mantiene la gestión de las rutas en el lado del navegador.</p>\n<h1 id=\"2-Lazy-Loading\"><a href=\"#2-Lazy-Loading\" class=\"headerlink\" title=\"2 Lazy Loading\"></a>2 Lazy Loading</h1><p>Tal com hemos procedido para la ruta vacía, podríamos continuar con todas las demás. Por ejemplo una ruta muy común sería la típica <em>Acerca de</em> o dicho en modo <em>url</em>: <code>/about</code>. Lo que haríamos sería generarle un módulo con un un componente y luego asignar dicho componente a la tabla de rutas con algo así:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HomeComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AboutComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./about/about.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;about&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">AboutUsComponent</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Podríamos, pero no lo haremos. ¿Por qué? Pues por una <strong>cuestión de pesos y velocidad</strong>. Tal como se ve en el código, para poder asignar un componente a una ruta antes tenemos que haberlo importado. Y eso significa que parará a formar parte del código que se <em>transpile</em>, empaquete y envíe al navegador.</p>\n<p>Es decir, el sufrido usuario se va a <strong>descargar la definición de los componentes antes de visitarlos</strong>. Es más, se descargará componentes de rutas que quizá nunca visite. A esta técnica se la conoce como <em>eager loading</em> y, en general y hablando así a la bruto, debemos evitarla en favor de otra conocida como <em>lazy loading</em>.</p>\n<h2 id=\"2-1-Webpack-y-los-bundles-por-ruta\"><a href=\"#2-1-Webpack-y-los-bundles-por-ruta\" class=\"headerlink\" title=\"2.1 Webpack y los bundles por ruta\"></a>2.1 Webpack y los bundles por ruta</h2><p>Para implementarla se necesitan un par de cooperantes. En particular y sobre todo el empaquetador <em>Webpack</em>.</p>\n<p>El objetivo es <strong>diferir la descarga de las rutas no visitadas</strong> y para ello querremos empaquetar cada ruta en un <em>bundle</em>. Esto requiere al menos un módulo por ruta y adoptar un convenio especial para que  <em>webpack</em> inicie nuevos empaquetados en múltiples puntos.</p>\n<h3 id=\"Crear-los-componentes-en-modulos-con-enrutado\"><a href=\"#Crear-los-componentes-en-modulos-con-enrutado\" class=\"headerlink\" title=\"Crear los componentes en módulos con enrutado\"></a>Crear los componentes en módulos con enrutado</h3><p>Por complejo que suene en la práctica es muy sencillo. Basta con usar el comando adecuado del CLI. Por ejemplo para el caso del <em>Acerca de</em> emplearíamos una instrucción como esta:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m about --route=about -m app-routing.module.ts</span><br></pre></td></tr></table></figure>\n<p>No es más que la generación de un nuevo módulo pero con el <em>flag</em> <code>--route=</code> que le indica al CLI que debe tratarlo como una nueva ruta. Este súper comando genera dos módulos, un componente y además los registra automáticamente. Veamos el resultado:</p>\n<p>En el módulo de enrutado raíz tenemos un nuevo camino, pero con una sintaxis distinta.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;about&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./about/about.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">AboutModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>Lo que dice es que cuando se active la ruta <code>about</code> entonces se le transfiera el control a otro módulo mediante una instrucción asíncrona. De esta forma ase consiguen dos cosas: por un lado al no usar ningún componente explícito no hay que importarlo; por otro lado la descarga del módulo que resuelva el problema se ejecutará en segundo plano y sólo si el usuario visita la ruta.</p>\n<h2 id=\"2-2-El-enrutador-delegado\"><a href=\"#2-2-El-enrutador-delegado\" class=\"headerlink\" title=\"2.2 El enrutador delegado\"></a>2.2 El enrutador delegado</h2><p>Claro que sólo hemos visto la mitad de la película. La instrucción <code>loadChildren</code> delega el enrutado en otro módulo; el <code>AboutModule</code> que fue creado por el cli. Dicho módulo depende a su vez de otro de enrutamiento local, el <code>AboutRoutingModule</code>.</p>\n<p>Este módulo de enrutamiento es similar al ya conocido <code>AppRoutingModule</code>, pero se activa y por tanto actúa, a partir de una ruta ya procesada por su padre. Su contenido es similar a esto:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AboutComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./about.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">AboutComponent</span> &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forChild</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AboutRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Tres cosas llaman la atención. Para empezar la ruta está vacía de nuevo. Pero eso es por que se concatena a la anteriormente evaluada. Es decir, el segmento <code>about</code> está ya descontado. Segundo, a este nivel volvemos a indicar un componente concreto y por tanto necesitamos importarlo. Por último y hablando de importaciones, el <code>RouterModule</code> se configura ahora como una rama hija del árbol de rutas principal. Lo hace con el método <code>.forChild(routes: Routes)</code>.</p>\n<blockquote>\n<p>Comprueba en ejecución cómo se descargan los <em>bundles</em> según navegas.</p>\n</blockquote>\n<h3 id=\"La-navegacion-lazy-permite-la-descarga-diferida-al-navegar-por-las-rutas\"><a href=\"#La-navegacion-lazy-permite-la-descarga-diferida-al-navegar-por-las-rutas\" class=\"headerlink\" title=\"La navegación lazy permite la descarga diferida al navegar por las rutas.\"></a>La navegación lazy permite la descarga diferida al navegar por las rutas.</h3><h1 id=\"3-Rutas-anidadas\"><a href=\"#3-Rutas-anidadas\" class=\"headerlink\" title=\"3. Rutas anidadas\"></a>3. Rutas anidadas</h1><p>Hay muchas situaciones que <strong>por cuestiones de usabilidad anidamos navegaciones</strong>. Por ejemplo una tienda online, te permite escoger categorías, y después vistas distintas de sus productos como listados o fichas. En las aplicaciones de gestión es frecuente encontrarse con estructuras tipo tab o menús de actuación parciales.</p>\n<p>Estas situaciones se resuelven la tecnología denominada <em>nested routes</em> y requiere del conocimiento de una nueva propiedad de las rutas.</p>\n<h2 id=\"3-1-Children\"><a href=\"#3-1-Children\" class=\"headerlink\" title=\"3.1 Children\"></a>3.1 Children</h2><p>Antes de nada supongamos que en la página about queremos mostrar dos categorías de información. Por un lado enlaces de interés sobre esta aplicación y por otro una información básica sobre la misma.</p>\n<p>Crearíamos por tanto un par de componentes como estos.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c about/about/links</span><br><span class=\"line\">ng g c about/about/info</span><br></pre></td></tr></table></figure>\n\n<p>Pero, en lugar de asignarles ya un camino específico a cada uno, lo que haremos será incrustarlos como hijos del componente <code>AboutComponent</code>. Para ello escribimos algo así en <code>about-routing.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">AboutComponent</span>,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;links&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">LinksComponent</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;info&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">InfoComponent</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>Esto es sólo el primer paso.</p>\n<h2 id=\"3-2-RouterOutlet-anidado\"><a href=\"#3-2-RouterOutlet-anidado\" class=\"headerlink\" title=\"3.2 RouterOutlet anidado\"></a>3.2 RouterOutlet anidado</h2><p>Para que los hijos acaben apareciendo dónde deben, hay que usar un segundo <code>&lt;router-outlet&gt;</code>. Esta vez dentro de la vista del componente padre. En <code>AboutComponent</code> :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>About us<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;links&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span> Tutorial Links <span class=\"tag\">&lt;/<span class=\"name\">ab-home</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;info&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span> More Info <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Ahora este componente actúa como una micro aplicación; con su menú y su espacio de carga dinámica.</p>\n<h1 id=\"4-Rutas-parametricas\"><a href=\"#4-Rutas-parametricas\" class=\"headerlink\" title=\"4 Rutas paramétricas\"></a>4 Rutas paramétricas</h1><p>Si hay algo que poco tardará en aparecer será la necesidad de presentar <strong>información distinta pero con un formato similar</strong>. De nuevo ejemplos archiconocidos serán una página para un producto, un artículo en un blog, una ficha de empleado o el seguimiento de un pedido.</p>\n<p>En estas situaciones queremos que parte de la ruta identifique al elemento concreto que vamos a mostrar, y a ese identificador le llamaremos <strong>parámetro</strong>. Ojo, es similar pero no exactamente un <code>queryParameter</code>.</p>\n<h2 id=\"4-1-Variables-en-la-ruta\"><a href=\"#4-1-Variables-en-la-ruta\" class=\"headerlink\" title=\"4.1 Variables en la ruta\"></a>4.1 Variables en la ruta</h2><p>Por ejemplo, supongamos una academia que quiere mostrar una lista de cursos y una página para cada uno. Para empezar creará un módulo enrutado como este:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m courses --route=courses -m app-routing.module.ts</span><br></pre></td></tr></table></figure>\n\n<p>Entre otras cosas modificará el <code>AppRoutingModule</code> incrustando una nueva entrada como esta:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;courses&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./courses/courses.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">CoursesModule</span>)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>Pero nosotros después vamos a realizar un cambio en la gestión local, incorporando un nuevo segmento al camino. Le asignamos el valor <code>:slug</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;:slug&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">CoursesComponent</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>En este caso el <code>:</code> indica que lo que viene no es un texto literal, si no <strong>una variable</strong>. Un parámetro en nuestro argot. El nombre es cosa del programador, el usuario nunca lo verá. En este caso me he decidido por usar el término <em>slug</em> muy empleado para introducir títulos dentro de las url.</p>\n<p>Ahora ya resuelve rutas como: <em>&#x2F;courses&#x2F;introduccion</em> o <em>&#x2F;courses&#x2F;avanzado</em></p>\n<p>Otra cosa será qué hacer cuando esas rutas se activen.</p>\n<h2 id=\"4-2-ActivatedRoute\"><a href=\"#4-2-ActivatedRoute\" class=\"headerlink\" title=\"4.2 ActivatedRoute\"></a>4.2 ActivatedRoute</h2><p>Entramos quizá en la parte más compleja, pero que como siempre es igual te la puedes tomar como una receta para todas tus aplicaciones.</p>\n<p>Veamos antes el contenido del fichero <code>courses.component.ts</code> relacionado con la obtención del parámetro de la ruta activa:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">OnInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ActivatedRoute</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../environments/environment&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CoursesComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnInit</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">course</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">route: ActivatedRoute</span>) &#123;</span><br><span class=\"line\">    route.<span class=\"property\">params</span>.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> courseSlug = params.<span class=\"property\">slug</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">course</span> = environment.<span class=\"property\">courses</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.<span class=\"property\">slug</span> === courseSlug);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">ngOnInit</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Por partes, que es la primera vez que vemos tanto código en este tutorial. Para empezar y ya que <strong>los componentes son clases</strong>, entonces podrán tener propiedades, métodos y constructores. Así que aparecen la propiedad <code>course:any</code> sin tipo concreto. Y el constructor que recibe una argumento de tipo <code>ActivatedRoute</code></p>\n<p><strong>Angular adopta y promueve el uso de varios patones de arquitectura de software</strong>. Uno de ellos es la inyección de dependencias, a la que dedicamos un tema en este tutorial. Por ahora nos basta con saber  que el framework nos inyectará una instancia de la clase <code>ActivatedRoute</code> en la variable argumento <code>route</code>.</p>\n<p>Después viene un código intimidante pero que también es siempre del mismo tipo. La dificultad radica en usar programación asíncrona, a la que también dedicamos más de un tema. Simplificando, lo que nos dice es que si nos suscribimos a él, entonces nos notificará los cambios en los parámetros para que hagamos uso de ellos.</p>\n<p>En este caso, buscamos el curso solicitado en un sencillo array. Y después se lo mostramos al usuario con técnicas de presentación dinámica propias de Angular que también se ven más adelante en este curso.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>👨‍🎓 &#123;&#123; course.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;course.description&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;&#123;course.url&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>&#123;&#123;course.url&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ab-go-home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-go-home</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Enlazamos todo cambiando los <code>href</code> del par de anclas del <code>HomeComponent</code>. Ahora usamos el enrutamiento local mediante <code>routerLink</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Welcome 🏡 !<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;courses/introduccion&quot;</span>&gt;</span>💻 Introducción<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;courses/avanzado&quot;</span>&gt;</span>💻 Avanzado<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-Redirecciones\"><a href=\"#5-Redirecciones\" class=\"headerlink\" title=\"5 Redirecciones\"></a>5 Redirecciones</h1><p>Hay situaciones en las que dada una ruta, queremos <strong>enviar al usuario a otra página</strong>. A veces por una simple decisión de renombrado de rutas. Otras quizá respondiendo a problemas o acciones inesperadas del usuario.</p>\n<p>Por ejemplo, vamos ver un tratamiento genérico del caso <em>not found</em>. Para empezar crearemos una ruta específica para indicarle al usuario que la ruta que buscaba no existe.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m not-found --route=not-found -m app-routing.module.ts</span><br></pre></td></tr></table></figure>\n\n<p>Ya sabemos lo que ocurre. Un nuevo módulo y una ruta diferida a nivel raíz  <code>not-found</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;not-found&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./not-found/not-found.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">NotFoundModule</span>),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>Que localmente se asigna al componente <code>NotFoundComponent</code>.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"title class_\">NotFoundComponent</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>Pero, nadie va voluntariamente a esa ruta</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Sólo los que se pierden</p>\n</blockquote>\n</blockquote>\n<p>Así que hay que obligarles. Para eso usamos un nuevo comando de la configuración de rutas, el <code>redirectTo</code>. Y lo asignamos a todas aquellas rutas desconocidas usando un el comodín <code>**</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">redirectTo</span>: <span class=\"string\">&#x27;not-found&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Esta entrada especial debe situarse <strong>al final del <em>array</em> de las rutas conocidas</strong>. Angular evalúa la ruta actual contra todas las disponibles de arriba a abajo. La primer que resuelva el <em>match</em> gana.</p>\n<p>El conjunto de rutas de nuestra aplicación a estas alturas queda como sigue:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Routes</span>, <span class=\"title class_\">RouterModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HomeComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Routes</span> = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">HomeComponent</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;about&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./about-us/about-us.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">AboutUsModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;courses&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./courses/courses.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">CoursesModule</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;not-found&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./not-found/not-found.module&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">NotFoundModule</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;**&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirectTo</span>: <span class=\"string\">&#x27;not-found&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">RouterModule</span>.<span class=\"title function_\">forRoot</span>(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [<span class=\"title class_\">RouterModule</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>La parte vistosa es crear el contenido para el  <code>NotFoundComponent</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>404<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 🧭 not-found works!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-go-home</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-go-home</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Con esto tendrás una aplicación SPA en <em>Angular</em>. Sigue esta serie para añadirle <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a> mientras aprendes a programar con Angular9.Todos esos detalles se tratan en el <a href=\"https://www.trainingit.es/curso-angular-basico/?promo=angular.builders\">curso básico online</a> que imparto con TrainingIT o a medida para tu empresa.</p>\n<blockquote>\n<p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cljlaq2f6000de09655fq0c1c","category_id":"cljlaq2f9000je0960sskfoe5","_id":"cljlaq2fd0010e0969w6s0xik"},{"post_id":"cljlaq2fh001fe096e3v7h8up","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fj001pe096cuex3bkc"},{"post_id":"cljlaq2fh001fe096e3v7h8up","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fk001se0961zlhgvp9"},{"post_id":"cljlaq2fc000te096bafmefpa","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fl001xe096a7g3cznn"},{"post_id":"cljlaq2fc000te096bafmefpa","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fl001ze096hy8w6p9c"},{"post_id":"cljlaq2fh001ge0964wkf37d4","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fm0023e0962o6f9ye4"},{"post_id":"cljlaq2fh001ge0964wkf37d4","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fm0024e096are0hcr5"},{"post_id":"cljlaq2fi001je096fflc1cel","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fn0027e096dr0y6tc0"},{"post_id":"cljlaq2fi001je096fflc1cel","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fn0029e0966n0vguwe"},{"post_id":"cljlaq2f7000fe096enwh7vvr","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fo002de096c8tz452g"},{"post_id":"cljlaq2f7000fe096enwh7vvr","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fo002fe0962f24bf7p"},{"post_id":"cljlaq2fi001ke096azdm02yk","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fo002ie0966sg64g03"},{"post_id":"cljlaq2fi001ke096azdm02yk","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fo002ke096g5bg6vru"},{"post_id":"cljlaq2fj001ne0960ds609na","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fo002me0965id4bd9q"},{"post_id":"cljlaq2fj001ne0960ds609na","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fp002oe096do1s72jc"},{"post_id":"cljlaq2fd000we096hbc0h3wm","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fp002re096gvqo6i79"},{"post_id":"cljlaq2fd000we096hbc0h3wm","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fp002ue096c1ne2u8g"},{"post_id":"cljlaq2fj001qe096e98ranrb","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fq002xe0965mhvebl2"},{"post_id":"cljlaq2fj001qe096e98ranrb","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fq002ze096bne0c1s8"},{"post_id":"cljlaq2fk001ve09645teb74q","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fq0031e09611fp45g1"},{"post_id":"cljlaq2fk001ve09645teb74q","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fq0033e096fzx3c2re"},{"post_id":"cljlaq2fd000ze0969fd02tog","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fr0034e0963g2y3ycu"},{"post_id":"cljlaq2fd000ze0969fd02tog","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fr0035e0966ugcg6tz"},{"post_id":"cljlaq2fl0022e0964nx7d7se","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fr0037e096efm83clc"},{"post_id":"cljlaq2fl0022e0964nx7d7se","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fr0038e0964f8f8ebu"},{"post_id":"cljlaq2f9000ie096g0thfq0f","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fr003ae096fx3qgp8o"},{"post_id":"cljlaq2f9000ie096g0thfq0f","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fr003be096f3jvgkx3"},{"post_id":"cljlaq2fe0013e0966lhk6ldf","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fr003de0963grn8ey8"},{"post_id":"cljlaq2fe0013e0966lhk6ldf","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fr003fe096480ya6r8"},{"post_id":"cljlaq2fe0015e0963yvkaqy8","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fs003ie0968xdi1e1m"},{"post_id":"cljlaq2fe0015e0963yvkaqy8","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fs003ke09647q8g7t9"},{"post_id":"cljlaq2fa000me0965bj470jd","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2fs003ne096gkvp178g"},{"post_id":"cljlaq2fa000me0965bj470jd","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2fs003pe096bmu900ol"},{"post_id":"cljlaq2ff0017e096c4gx9obe","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2ft003se0969f5b3s57"},{"post_id":"cljlaq2ff0017e096c4gx9obe","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2ft003te0963btne95g"},{"post_id":"cljlaq2fg001ae096fpq15c65","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2ft003ve09671fr1vph"},{"post_id":"cljlaq2fg001ae096fpq15c65","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2ft003we0969t5b4fgx"},{"post_id":"cljlaq2fb000qe0968whx836v","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2ft003ye096bqbrb87h"},{"post_id":"cljlaq2fb000qe0968whx836v","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2ft0040e096g1t5154a"},{"post_id":"cljlaq2fg001ce0964n7t7boi","category_id":"cljlaq2fb000re096fctke7l0","_id":"cljlaq2ft0043e096eq5u2umg"},{"post_id":"cljlaq2fg001ce0964n7t7boi","category_id":"cljlaq2fg001ee0964s0v7ftf","_id":"cljlaq2ft0045e096ej5qgly9"}],"PostTag":[{"post_id":"cljlaq2es0001e096eur8d6il","tag_id":"cljlaq2ex0004e09652zl1hwd","_id":"cljlaq2f9000ke096213eb8cm"},{"post_id":"cljlaq2es0001e096eur8d6il","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2fa000ne0965fbr1i26"},{"post_id":"cljlaq2et0003e096hfhv2b60","tag_id":"cljlaq2ex0004e09652zl1hwd","_id":"cljlaq2fd000xe096dr0te3m4"},{"post_id":"cljlaq2et0003e096hfhv2b60","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2fd0011e096hgi3djnd"},{"post_id":"cljlaq2ez0006e096e9v9gwdh","tag_id":"cljlaq2fc000ue096b88g4g76","_id":"cljlaq2ff0019e096d6d4cdmq"},{"post_id":"cljlaq2ez0006e096e9v9gwdh","tag_id":"cljlaq2fe0012e09660su8l5w","_id":"cljlaq2fg001be0966wto6om0"},{"post_id":"cljlaq2f40008e0968xuy7jip","tag_id":"cljlaq2ff0016e096gyx60sbg","_id":"cljlaq2fj001oe096ghsycig8"},{"post_id":"cljlaq2f40008e0968xuy7jip","tag_id":"cljlaq2fg001de096aktodtco","_id":"cljlaq2fk001re0962vnl2660"},{"post_id":"cljlaq2f40008e0968xuy7jip","tag_id":"cljlaq2fe0012e09660su8l5w","_id":"cljlaq2fk001we0961wx3a2ag"},{"post_id":"cljlaq2f5000ae0966qy4et2p","tag_id":"cljlaq2fi001le0965axn1l93","_id":"cljlaq2fn0028e096cov85110"},{"post_id":"cljlaq2f5000ae0966qy4et2p","tag_id":"cljlaq2ex0004e09652zl1hwd","_id":"cljlaq2fn002ae09694zoe1es"},{"post_id":"cljlaq2f5000ae0966qy4et2p","tag_id":"cljlaq2fk001te0966g2z6iju","_id":"cljlaq2fo002ee0965pwrbdaa"},{"post_id":"cljlaq2f5000ae0966qy4et2p","tag_id":"cljlaq2fe0012e09660su8l5w","_id":"cljlaq2fo002ge096exgegtzu"},{"post_id":"cljlaq2f6000de09655fq0c1c","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2fp002pe096gv45hvx0"},{"post_id":"cljlaq2f6000de09655fq0c1c","tag_id":"cljlaq2fn002ce09669ujdcnh","_id":"cljlaq2fp002se096bddc5fqs"},{"post_id":"cljlaq2f6000de09655fq0c1c","tag_id":"cljlaq2fo002je096dx3dezzp","_id":"cljlaq2fp002ve096frcs11g4"},{"post_id":"cljlaq2f7000fe096enwh7vvr","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2fr003ee0965fjwbzrt"},{"post_id":"cljlaq2f7000fe096enwh7vvr","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2fs003ge0968k0qg8yp"},{"post_id":"cljlaq2f7000fe096enwh7vvr","tag_id":"cljlaq2fq002ye0963olr6h3q","_id":"cljlaq2fs003je0960w964fyi"},{"post_id":"cljlaq2f7000fe096enwh7vvr","tag_id":"cljlaq2fq0032e0961s1ufkh8","_id":"cljlaq2fs003le096d6mnakn9"},{"post_id":"cljlaq2f7000fe096enwh7vvr","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2fs003oe096d1qh135a"},{"post_id":"cljlaq2f7000fe096enwh7vvr","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2fs003qe096aalh6abg"},{"post_id":"cljlaq2f9000ie096g0thfq0f","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2ft003ze0965b5c08ff"},{"post_id":"cljlaq2f9000ie096g0thfq0f","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2ft0041e0960bk101at"},{"post_id":"cljlaq2f9000ie096g0thfq0f","tag_id":"cljlaq2fs003me096463ihndi","_id":"cljlaq2ft0044e09649xnacxt"},{"post_id":"cljlaq2f9000ie096g0thfq0f","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2fu0046e0969ex7g56k"},{"post_id":"cljlaq2f9000ie096g0thfq0f","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2fu0048e09678l0ai3x"},{"post_id":"cljlaq2fa000me0965bj470jd","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2fv004fe096fae22qkq"},{"post_id":"cljlaq2fa000me0965bj470jd","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2fv004ge096duw9byay"},{"post_id":"cljlaq2fa000me0965bj470jd","tag_id":"cljlaq2fs003me096463ihndi","_id":"cljlaq2fv004ie0962flzguq6"},{"post_id":"cljlaq2fa000me0965bj470jd","tag_id":"cljlaq2fu0049e096dbl31pfk","_id":"cljlaq2fw004je0960deidvc6"},{"post_id":"cljlaq2fa000me0965bj470jd","tag_id":"cljlaq2fu004ae0961l4h98ad","_id":"cljlaq2fw004le096ebk2fa8e"},{"post_id":"cljlaq2fa000me0965bj470jd","tag_id":"cljlaq2fu004be096cs764y3k","_id":"cljlaq2fw004me0964abv99c1"},{"post_id":"cljlaq2fa000me0965bj470jd","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2fw004oe0961bj13gfr"},{"post_id":"cljlaq2fa000me0965bj470jd","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2fw004pe096havfb7wr"},{"post_id":"cljlaq2fb000qe0968whx836v","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2fx004se09626dy4xry"},{"post_id":"cljlaq2fb000qe0968whx836v","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2fx004te0964qdsc1bh"},{"post_id":"cljlaq2fb000qe0968whx836v","tag_id":"cljlaq2fw004ke09661lf4ohu","_id":"cljlaq2fx004ve096fht2akv7"},{"post_id":"cljlaq2fb000qe0968whx836v","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2fx004we096d1zc4uoi"},{"post_id":"cljlaq2fb000qe0968whx836v","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2fx004ye0961gns41c6"},{"post_id":"cljlaq2fc000te096bafmefpa","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2fy0054e0966yaehg3b"},{"post_id":"cljlaq2fc000te096bafmefpa","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2fy0055e096e7qmc5e7"},{"post_id":"cljlaq2fc000te096bafmefpa","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2fz0057e096belwf0uo"},{"post_id":"cljlaq2fc000te096bafmefpa","tag_id":"cljlaq2fx004ze0969hn02j3t","_id":"cljlaq2fz0058e096aor1at8x"},{"post_id":"cljlaq2fc000te096bafmefpa","tag_id":"cljlaq2fx0050e0967oplbrsr","_id":"cljlaq2fz005ae096h3t12ksg"},{"post_id":"cljlaq2fc000te096bafmefpa","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2fz005be0968mer6k9w"},{"post_id":"cljlaq2fc000te096bafmefpa","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2fz005de096by1tb76v"},{"post_id":"cljlaq2fd000we096hbc0h3wm","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2g0005ie096bo7v3g8i"},{"post_id":"cljlaq2fd000we096hbc0h3wm","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2g0005je0969ihve84o"},{"post_id":"cljlaq2fd000we096hbc0h3wm","tag_id":"cljlaq2fx004ze0969hn02j3t","_id":"cljlaq2g0005le096fekibg1p"},{"post_id":"cljlaq2fd000we096hbc0h3wm","tag_id":"cljlaq2fz005ce0961ora0yji","_id":"cljlaq2g0005me096cil938i1"},{"post_id":"cljlaq2fd000we096hbc0h3wm","tag_id":"cljlaq2fq0032e0961s1ufkh8","_id":"cljlaq2g0005oe0962rx6131c"},{"post_id":"cljlaq2fd000we096hbc0h3wm","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2g0005pe0966cw85qjz"},{"post_id":"cljlaq2fd000we096hbc0h3wm","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2g1005re0966bk02dsk"},{"post_id":"cljlaq2fd000ze0969fd02tog","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2g1005ve0963xijebmu"},{"post_id":"cljlaq2fd000ze0969fd02tog","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2g1005we0969rnr0lvj"},{"post_id":"cljlaq2fd000ze0969fd02tog","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2g1005ye096cy0fandr"},{"post_id":"cljlaq2fd000ze0969fd02tog","tag_id":"cljlaq2g0005qe096fcoyg6ze","_id":"cljlaq2g1005ze096d8rl64we"},{"post_id":"cljlaq2fd000ze0969fd02tog","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2g20061e09625is62pj"},{"post_id":"cljlaq2fd000ze0969fd02tog","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2g20062e0961cli0dv3"},{"post_id":"cljlaq2fe0013e0966lhk6ldf","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2g20068e096535qbf1r"},{"post_id":"cljlaq2fe0013e0966lhk6ldf","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2g20069e0961mksb8n9"},{"post_id":"cljlaq2fe0013e0966lhk6ldf","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2g3006be096hds4cywc"},{"post_id":"cljlaq2fe0013e0966lhk6ldf","tag_id":"cljlaq2g20063e09689ydez16","_id":"cljlaq2g3006ce09610vzfjmi"},{"post_id":"cljlaq2fe0013e0966lhk6ldf","tag_id":"cljlaq2g20064e096957p00yp","_id":"cljlaq2g3006ee096csff03xr"},{"post_id":"cljlaq2fe0013e0966lhk6ldf","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2g3006fe0962h9r041j"},{"post_id":"cljlaq2fe0013e0966lhk6ldf","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2g3006he096dkf29vaw"},{"post_id":"cljlaq2fe0015e0963yvkaqy8","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2g4006le09625198v9u"},{"post_id":"cljlaq2fe0015e0963yvkaqy8","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2g4006me096fzqm8r3y"},{"post_id":"cljlaq2fe0015e0963yvkaqy8","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2g4006oe09684cp67br"},{"post_id":"cljlaq2fe0015e0963yvkaqy8","tag_id":"cljlaq2g3006ge0962fsl2mpo","_id":"cljlaq2g4006pe096cdzsg2kb"},{"post_id":"cljlaq2fe0015e0963yvkaqy8","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2g4006re0964rcc2kdi"},{"post_id":"cljlaq2fe0015e0963yvkaqy8","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2g4006se09674e0eyxr"},{"post_id":"cljlaq2ff0017e096c4gx9obe","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2g4006we0964czh175r"},{"post_id":"cljlaq2ff0017e096c4gx9obe","tag_id":"cljlaq2g4006ne09690kx44zm","_id":"cljlaq2g5006xe0963escdw2o"},{"post_id":"cljlaq2ff0017e096c4gx9obe","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2g5006ze0964usf8r70"},{"post_id":"cljlaq2ff0017e096c4gx9obe","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2g50070e09679tbgryq"},{"post_id":"cljlaq2ff0017e096c4gx9obe","tag_id":"cljlaq2fn002ce09669ujdcnh","_id":"cljlaq2g50072e0968ahj980d"},{"post_id":"cljlaq2ff0017e096c4gx9obe","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2g50073e096d1r0b4qk"},{"post_id":"cljlaq2fg001ae096fpq15c65","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2g60079e096ernuc9in"},{"post_id":"cljlaq2fg001ae096fpq15c65","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2g6007ae0966oc2hp62"},{"post_id":"cljlaq2fg001ae096fpq15c65","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2g6007ce096hjdf5fou"},{"post_id":"cljlaq2fg001ae096fpq15c65","tag_id":"cljlaq2g50074e09614qc6ka7","_id":"cljlaq2g6007de0962u852fk9"},{"post_id":"cljlaq2fg001ae096fpq15c65","tag_id":"cljlaq2g50075e0966uo1fb0s","_id":"cljlaq2g6007fe096dgqw5z8u"},{"post_id":"cljlaq2fg001ae096fpq15c65","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2g6007ge0967xdlbnmo"},{"post_id":"cljlaq2fg001ae096fpq15c65","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2g7007ie0961rahhvlz"},{"post_id":"cljlaq2fg001ce0964n7t7boi","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2g7007le0963xjt27vx"},{"post_id":"cljlaq2fg001ce0964n7t7boi","tag_id":"cljlaq2g6007be0967k4352jg","_id":"cljlaq2g7007me0962gjo60av"},{"post_id":"cljlaq2fg001ce0964n7t7boi","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2g8007oe0961ooscztz"},{"post_id":"cljlaq2fg001ce0964n7t7boi","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2g8007pe096fnvrbptk"},{"post_id":"cljlaq2fg001ce0964n7t7boi","tag_id":"cljlaq2fn002ce09669ujdcnh","_id":"cljlaq2g8007re0962rvhaleo"},{"post_id":"cljlaq2fg001ce0964n7t7boi","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2g8007se09622th6gm4"},{"post_id":"cljlaq2fh001fe096e3v7h8up","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2g9007xe0966e4b7w3j"},{"post_id":"cljlaq2fh001fe096e3v7h8up","tag_id":"cljlaq2g7007ne09625dn1i2s","_id":"cljlaq2g9007ye096d9b7dqw2"},{"post_id":"cljlaq2fh001fe096e3v7h8up","tag_id":"cljlaq2g8007qe096b1d8cz06","_id":"cljlaq2g90080e096cdebcbt2"},{"post_id":"cljlaq2fh001fe096e3v7h8up","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2g90081e0967j79f137"},{"post_id":"cljlaq2fh001fe096e3v7h8up","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2g90083e096gz0pgjgi"},{"post_id":"cljlaq2fh001fe096e3v7h8up","tag_id":"cljlaq2fn002ce09669ujdcnh","_id":"cljlaq2g90084e0969g969pvl"},{"post_id":"cljlaq2fh001fe096e3v7h8up","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2g90086e096hikchxzv"},{"post_id":"cljlaq2fh001ge0964wkf37d4","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2ga008be096ai47glr0"},{"post_id":"cljlaq2fh001ge0964wkf37d4","tag_id":"cljlaq2g9007ze096052o9b6w","_id":"cljlaq2ga008ce096h063cy92"},{"post_id":"cljlaq2fh001ge0964wkf37d4","tag_id":"cljlaq2g90082e09673t33ws8","_id":"cljlaq2gb008ee096848f3i78"},{"post_id":"cljlaq2fh001ge0964wkf37d4","tag_id":"cljlaq2fq0032e0961s1ufkh8","_id":"cljlaq2gb008fe0960o7u6tno"},{"post_id":"cljlaq2fh001ge0964wkf37d4","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2gb008he09606kn5jbx"},{"post_id":"cljlaq2fh001ge0964wkf37d4","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2gb008ie096cfse1g2p"},{"post_id":"cljlaq2fh001ge0964wkf37d4","tag_id":"cljlaq2fn002ce09669ujdcnh","_id":"cljlaq2gb008ke09619ot5gb1"},{"post_id":"cljlaq2fh001ge0964wkf37d4","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2gb008le0966jgbaw66"},{"post_id":"cljlaq2fi001je096fflc1cel","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2gc008pe0960jn727kl"},{"post_id":"cljlaq2fi001je096fflc1cel","tag_id":"cljlaq2g9007ze096052o9b6w","_id":"cljlaq2gc008qe0966nu9b0is"},{"post_id":"cljlaq2fi001je096fflc1cel","tag_id":"cljlaq2fq0032e0961s1ufkh8","_id":"cljlaq2gc008se096h2fn1fqi"},{"post_id":"cljlaq2fi001je096fflc1cel","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2gc008te096hxx1hu4d"},{"post_id":"cljlaq2fi001je096fflc1cel","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2gd008ve096c5803p83"},{"post_id":"cljlaq2fi001je096fflc1cel","tag_id":"cljlaq2fn002ce09669ujdcnh","_id":"cljlaq2gd008we096502c2v5b"},{"post_id":"cljlaq2fi001je096fflc1cel","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2gd008ye0965hk7f7d0"},{"post_id":"cljlaq2fi001ke096azdm02yk","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2ge0091e096a0xygwbm"},{"post_id":"cljlaq2fi001ke096azdm02yk","tag_id":"cljlaq2fp002te0965ralapco","_id":"cljlaq2ge0092e0964qtafh77"},{"post_id":"cljlaq2fi001ke096azdm02yk","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2ge0094e096bai4c6xv"},{"post_id":"cljlaq2fi001ke096azdm02yk","tag_id":"cljlaq2gd008xe09635ckcfrl","_id":"cljlaq2ge0095e0961orvdojn"},{"post_id":"cljlaq2fi001ke096azdm02yk","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2ge0097e09666fxbqtl"},{"post_id":"cljlaq2fi001ke096azdm02yk","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2ge0098e096almnae1j"},{"post_id":"cljlaq2fj001ne0960ds609na","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2gf009ce09674iu40vt"},{"post_id":"cljlaq2fj001ne0960ds609na","tag_id":"cljlaq2ge0093e0962zlx2nws","_id":"cljlaq2gf009de0965y6rbjxa"},{"post_id":"cljlaq2fj001ne0960ds609na","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2gf009fe0965hed162r"},{"post_id":"cljlaq2fj001ne0960ds609na","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2gf009ge096gfb891vk"},{"post_id":"cljlaq2fj001ne0960ds609na","tag_id":"cljlaq2fn002ce09669ujdcnh","_id":"cljlaq2gf009ie0967i3c4p1v"},{"post_id":"cljlaq2fj001ne0960ds609na","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2gf009je0967cnydtxv"},{"post_id":"cljlaq2fj001qe096e98ranrb","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2gg009ne096adlg1qer"},{"post_id":"cljlaq2fj001qe096e98ranrb","tag_id":"cljlaq2gf009ee096du1m883r","_id":"cljlaq2gg009oe09693uz4pex"},{"post_id":"cljlaq2fj001qe096e98ranrb","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2gg009qe096dyvb3v9k"},{"post_id":"cljlaq2fj001qe096e98ranrb","tag_id":"cljlaq2gf009ke096a54jd4kr","_id":"cljlaq2gg009re09621lq2wik"},{"post_id":"cljlaq2fj001qe096e98ranrb","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2gg009te096ey97am1b"},{"post_id":"cljlaq2fj001qe096e98ranrb","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2gg009ue0960wafgude"},{"post_id":"cljlaq2fk001ve09645teb74q","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2gh009ye096686k8of7"},{"post_id":"cljlaq2fk001ve09645teb74q","tag_id":"cljlaq2ge0093e0962zlx2nws","_id":"cljlaq2gh009ze0966po570ss"},{"post_id":"cljlaq2fk001ve09645teb74q","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2gh00a1e0969ps3exge"},{"post_id":"cljlaq2fk001ve09645teb74q","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2gh00a2e096df196h64"},{"post_id":"cljlaq2fk001ve09645teb74q","tag_id":"cljlaq2fn002ce09669ujdcnh","_id":"cljlaq2gh00a4e096clcrd0pq"},{"post_id":"cljlaq2fk001ve09645teb74q","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2gh00a5e096eib14fxc"},{"post_id":"cljlaq2fl001ye09630zi015y","tag_id":"cljlaq2ex0004e09652zl1hwd","_id":"cljlaq2gh00a7e0961roe7r2d"},{"post_id":"cljlaq2fl001ye09630zi015y","tag_id":"cljlaq2fr0039e096795i7lfd","_id":"cljlaq2gh00a8e096ez72bf59"},{"post_id":"cljlaq2fl0022e0964nx7d7se","tag_id":"cljlaq2fm0026e096aic61fgi","_id":"cljlaq2gi00ace096bn2jddaz"},{"post_id":"cljlaq2fl0022e0964nx7d7se","tag_id":"cljlaq2gh00a3e09678pj9qxt","_id":"cljlaq2gi00ade096fmjkbj57"},{"post_id":"cljlaq2fl0022e0964nx7d7se","tag_id":"cljlaq2gh00a6e0966y2j8xi5","_id":"cljlaq2gi00aee096ggv81s5v"},{"post_id":"cljlaq2fl0022e0964nx7d7se","tag_id":"cljlaq2fr0036e096ditgcozn","_id":"cljlaq2gi00afe096hqsp6qre"},{"post_id":"cljlaq2fl0022e0964nx7d7se","tag_id":"cljlaq2f6000be0960wjcbvby","_id":"cljlaq2gi00age0966f9315hk"},{"post_id":"cljlaq2fl0022e0964nx7d7se","tag_id":"cljlaq2fn002ce09669ujdcnh","_id":"cljlaq2gi00ahe096cle60fu3"},{"post_id":"cljlaq2fl0022e0964nx7d7se","tag_id":"cljlaq2fx004xe096h956aau2","_id":"cljlaq2gi00aie096ahj42749"}],"Tag":[{"name":"NodeJS","_id":"cljlaq2ex0004e09652zl1hwd"},{"name":"Introducción","_id":"cljlaq2f6000be0960wjcbvby"},{"name":"TypeScript","_id":"cljlaq2fc000ue096b88g4g76"},{"name":"Opinión","_id":"cljlaq2fe0012e09660su8l5w"},{"name":"FrontEnd","_id":"cljlaq2ff0016e096gyx60sbg"},{"name":"AngularJS","_id":"cljlaq2fg001de096aktodtco"},{"name":"BackEnd","_id":"cljlaq2fi001le0965axn1l93"},{"name":"MongoDB","_id":"cljlaq2fk001te0966g2z6iju"},{"name":"Angular","_id":"cljlaq2fm0026e096aic61fgi"},{"name":"Angular9","_id":"cljlaq2fn002ce09669ujdcnh"},{"name":"Ivy","_id":"cljlaq2fo002je096dx3dezzp"},{"name":"Angular8","_id":"cljlaq2fp002te0965ralapco"},{"name":"ChangeDetection","_id":"cljlaq2fq002ye0963olr6h3q"},{"name":"Observables","_id":"cljlaq2fq0032e0961s1ufkh8"},{"name":"Tutorial","_id":"cljlaq2fr0036e096ditgcozn"},{"name":"Avanzado","_id":"cljlaq2fr0039e096795i7lfd"},{"name":"Nx","_id":"cljlaq2fs003me096463ihndi"},{"name":"Test","_id":"cljlaq2fu0049e096dbl31pfk"},{"name":"Jest","_id":"cljlaq2fu004ae0961l4h98ad"},{"name":"Cypress","_id":"cljlaq2fu004be096cs764y3k"},{"name":"Template","_id":"cljlaq2fw004ke09661lf4ohu"},{"name":"Angular2","_id":"cljlaq2fx004xe096h956aau2"},{"name":"Redux","_id":"cljlaq2fx004ze0969hn02j3t"},{"name":"NgRx","_id":"cljlaq2fx0050e0967oplbrsr"},{"name":"RxJs","_id":"cljlaq2fz005ce0961ora0yji"},{"name":"PWA","_id":"cljlaq2g0005qe096fcoyg6ze"},{"name":"Universal","_id":"cljlaq2g20063e09689ydez16"},{"name":"SSR","_id":"cljlaq2g20064e096957p00yp"},{"name":"i18n","_id":"cljlaq2g3006ge0962fsl2mpo"},{"name":"Forms","_id":"cljlaq2g4006ne09690kx44zm"},{"name":"Elements","_id":"cljlaq2g50074e09614qc6ka7"},{"name":"WebComponents","_id":"cljlaq2g50075e0966uo1fb0s"},{"name":"Components","_id":"cljlaq2g6007be0967k4352jg"},{"name":"Servicios","_id":"cljlaq2g7007ne09625dn1i2s"},{"name":"DI","_id":"cljlaq2g8007qe096b1d8cz06"},{"name":"http","_id":"cljlaq2g9007ze096052o9b6w"},{"name":"RxJS","_id":"cljlaq2g90082e09673t33ws8"},{"name":"reactiveForms","_id":"cljlaq2gd008xe09635ckcfrl"},{"name":"CLI","_id":"cljlaq2ge0093e0962zlx2nws"},{"name":"Angular7","_id":"cljlaq2gf009ee096du1m883r"},{"name":"material","_id":"cljlaq2gf009ke096a54jd4kr"},{"name":"SPA","_id":"cljlaq2gh00a3e09678pj9qxt"},{"name":"Routing","_id":"cljlaq2gh00a6e0966y2j8xi5"}]}}