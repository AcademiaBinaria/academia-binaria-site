{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/ng2-Arbol-de-componentes.jpg","path":"images/ng2-Arbol-de-componentes.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Arbol-de-dependencias.jpg","path":"images/ng2-Arbol-de-dependencias.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Component-DataFlow.jpg","path":"images/ng2-Component-DataFlow.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-DI-component-directive.jpg","path":"images/ng2-DI-component-directive.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-DI-component-service.jpg","path":"images/ng2-DI-component-service.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Flujo-de-datos.jpg","path":"images/ng2-Flujo-de-datos.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2Component--1-.jpg","path":"images/ng2Component--1-.jpg","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_0_cli_1-5.jpg","path":"images/tutorial-angular-5_0_cli_1-5.jpg","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_1_base.jpg","path":"images/tutorial-angular-5_1_base.jpg","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_2_SPA.jpg","path":"images/tutorial-angular-5_2_SPA.jpg","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_5_inject.png","path":"images/tutorial-angular-5_5_inject.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_1_Base.jpg","path":"css/images/angular-5_1_Base.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_2_SPA.jpg","path":"css/images/angular-5_2_SPA.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_0_cli_1-5.jpg","path":"css/images/angular-5_0_cli_1-5.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_3_data.jpg","path":"css/images/angular-5_3_data.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular.jpg","path":"css/images/angular.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"source/images/tutorial-angular-5_7_watch.png","path":"images/tutorial-angular-5_7_watch.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_4_flow.png","path":"css/images/angular-5_4_flow.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_6_http.png","path":"css/images/angular-5_6_http.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_5_inject.png","path":"css/images/angular-5_5_inject.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_7_watch.png","path":"css/images/angular-5_7_watch.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/typescript.jpg","path":"css/images/typescript.jpg","modified":0,"renderable":1},{"_id":"source/images/tutorial-angular-5_6_http.png","path":"images/tutorial-angular-5_6_http.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/tutorial-angular-5_0_cli.png","path":"images/tutorial-angular-5_0_cli.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_2_SPA.png","path":"images/tutorial-angular-5_2_SPA.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_4_flow.png","path":"images/tutorial-angular-5_4_flow.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_3_data.png","path":"images/tutorial-angular-5_3_data.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/tutorial-angular-5_1_base.png","path":"images/tutorial-angular-5_1_base.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/angular_8_reactive.png","path":"css/images/angular_8_reactive.png","modified":0,"renderable":1},{"_id":"source/images/tutorial-angular_8_reactive.png","path":"images/tutorial-angular_8_reactive.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-0_cli.png","path":"images/tutorial-angular-0_cli.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/angular-0_cli.png","path":"css/images/angular-0_cli.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-1_base.png","path":"css/images/angular-1_base.png","modified":0,"renderable":1},{"_id":"source/images/tutorial-angular-1_base.png","path":"images/tutorial-angular-1_base.png","modified":0,"renderable":0},{"_id":"source/images/1-base_module_tree.png","path":"images/1-base_module_tree.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/angular-2_spa.png","path":"css/images/angular-2_spa.png","modified":1,"renderable":1},{"_id":"source/images/tutorial-angular-2_spa.png","path":"images/tutorial-angular-2_spa.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/icarus/icarus.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509447582883},{"_id":"source/404.md","hash":"ed869e21a6ac3f026e7f38aab1e2bbf374e19444","modified":1513761439801},{"_id":"themes/icarus/LICENSE","hash":"73ed09aa00f7bda6319fc7d5b722fb40e0c2017e","modified":1509446939324},{"_id":"themes/icarus/_config.yml","hash":"ad0e9702c317444621f075a8217741d654192185","modified":1534181802921},{"_id":"themes/icarus/README.md","hash":"c2407cbda23f087be719d6dc3f7207a8e01ffd73","modified":1509446939326},{"_id":"themes/icarus/_config.yml.example","hash":"73af4425442660d8cd491115a13d2a14c52f59cc","modified":1509446939328},{"_id":"themes/icarus/package.json","hash":"c156985c2689895a228188a29ceaae8f7d0bb34f","modified":1509446939521},{"_id":"source/.DS_Store","hash":"39d94912a63ec708e3af99df0204f2b60fb1105d","modified":1509446804339},{"_id":"source/Contacto/index.md","hash":"8d3f82ba692c2e9e02bbb6c7184ebe3772cd210d","modified":1509446804343},{"_id":"source/Cookies/index.md","hash":"910a9c77e0b6b83065878febc522fba888491234","modified":1509446804347},{"_id":"source/Cursos/index.md","hash":"6e08f944b7ed227418d8b2c85d96a364e2bc2667","modified":1509446804351},{"_id":"source/_posts/7-formas-de-incluir-Bootstrap-en-nuestro-proyecto.md","hash":"475a1769d081e180faf687fb57052027078df3dc","modified":1509446804360},{"_id":"source/Noticias-Junio-2016/index.md","hash":"1189d0847c6c149b8e4fb81516f4865ca2bf6fed","modified":1509446804354},{"_id":"source/Promociones/index.md","hash":"f632b70d1a3924a0335fdc734366a31c1d8bc1cd","modified":1509446804357},{"_id":"source/_posts/Angular2-DI-Inyeccion-de-dependencias.md","hash":"d803231fc537bbd6aeea2f105cf4e6111de9ef86","modified":1513761439810},{"_id":"source/_posts/Codigo-de-ejemplo-curso-de-Angular2.md","hash":"35f74474fd83585e9ff4f516258f45d42bcff047","modified":1509973309900},{"_id":"source/_posts/Angular2-la-evolucion-de-la-plataforma.md","hash":"cc903f49fccecc11015db808d5363acc5a80b78b","modified":1509973309892},{"_id":"source/_posts/Comunicaciones-http-observables-con-Angular2.md","hash":"4741ac1236e91becb76eb3917a72add979eca662","modified":1513761439842},{"_id":"source/_posts/DataBinding-el-flujo-de-datos-de-Angular2.md","hash":"06c66013fa9d4f654a3797da07cb79ad44e27d77","modified":1513761439856},{"_id":"source/_posts/Componentes-los-bloques-de-construccion-de-Angular2.md","hash":"a7ad6f85fde2dc470d3f34ff57cfadd285c7bd2b","modified":1513761439821},{"_id":"source/_posts/Formularios-de-datos-en-Angular2.md","hash":"df51f12c14bd0551f36cca5d45cfc26c82357e1a","modified":1513761439895},{"_id":"source/_posts/Enrutador-de-componentes-con-Angular2-el-nuevo-SPA.md","hash":"e6e7c91cad6598d94a8ba52f70bf06a7a4caf6f8","modified":1513761439870},{"_id":"source/_posts/Introduccion-a-Bootstrap.md","hash":"885b644e1ea783af298453ee08e03605befe20fc","modified":1509446804390},{"_id":"source/_posts/Introduccion-a-MongoDB.md","hash":"c233fe8f362b23c25da7b2db0ac0e8aeba835c3f","modified":1509446804393},{"_id":"source/_posts/Node-6-0-0-actualizacion-con-nvm.md","hash":"214889236dcd9ea5418b95326a3541338806548d","modified":1509446804395},{"_id":"source/_posts/Hola-Mundo-Angular-2.md","hash":"2576c3be7f9a3314d7c05a08e2dd063306f8006b","modified":1513761439912},{"_id":"source/_posts/Por-que-AngularJS.md","hash":"7a4a396557f649c18eb233497caf12a88aad322f","modified":1509446804399},{"_id":"source/_posts/Para-que-puedo-usar-NodeJS.md","hash":"3b65ae5f23d7b4bb7441c96228f57af8ddbbda02","modified":1509446804397},{"_id":"source/_posts/Soluciones-FrontEnd-2016.md","hash":"d262e5f1e180813201f588568a8d99ecc2a18a4d","modified":1509446804408},{"_id":"source/_posts/Soluciones-BackEnd-2016.md","hash":"97cf294fd0ace93ad1f8a120b14ac1e5f3a8b8c8","modified":1509446804405},{"_id":"source/_posts/TypeScript-programa-en-el-front-igual-que-en-el-back.md","hash":"dde3cee7247d90f639cb99aba69ce93ab82293b4","modified":1509973309946},{"_id":"source/_posts/ng-3-Formularios-tablas-y-modelos-de-datos-en-Angular.md","hash":"2e2cd64841231a8448bb9261bb8aef7a162d029e","modified":1513761439928},{"_id":"source/_posts/ng-5-Servicios-inyectables-en-Angular.md","hash":"0ee54f998709cde8926c7227258086f3c073c997","modified":1513761439946},{"_id":"source/_posts/ng-4-Flujo-de-datos-entre-componentes-Angular.md","hash":"1d44c4296ab498cc589f44975646942d4f4ba3d3","modified":1513761439938},{"_id":"source/_posts/ng-7-Vigilancia-y-seguridad-en-Angular.md","hash":"1f367e4f05b3d88982218442da0a3745d22d9933","modified":1525338435049},{"_id":"source/_posts/ng-6-comunicaciones-http-en-angular.md","hash":"e183a0da7b48fae6910a0e3c64caf0c840007f15","modified":1514546928102},{"_id":"source/_posts/ng-el-ecosistema-de-AngularJS.md","hash":"aaa6daef853f9bf6395824b6da726690a0d7eb0b","modified":1509446804414},{"_id":"source/_posts/ng_0-Hola-Angular-CLI.md","hash":"4f5ad2076a9c3d8f9e506c3fe257811222c8d352","modified":1534490481437},{"_id":"source/_posts/ng_2-Paginas-y-rutas-Angular-SPA.md","hash":"aae70367dfef46f2dfedfa161b70b1df595bda57","modified":1535106579875},{"_id":"source/_posts/ng_1-Base-aplicacion-Angular.md","hash":"a85d5ad5eec801591d99941a256ce02cae99acb6","modified":1534767166199},{"_id":"source/_posts/npm-de-instalador-a-publicador.md","hash":"a09fd152d81437ccf5529c0f86a543f7aca02c7a","modified":1509446804416},{"_id":"source/images/ng2-Arbol-de-componentes.jpg","hash":"ddf926766408af4ce8c65d3de3d5ff0270a0121b","modified":1509446804422},{"_id":"source/images/ng2-Arbol-de-dependencias.jpg","hash":"e474811bca4569fc209680fcb7f7fc432b60af99","modified":1509446804427},{"_id":"source/images/ng2-Component-DataFlow.jpg","hash":"0032c08ed4f67fc294781b6acb472f50f17ed0f2","modified":1509446804430},{"_id":"source/images/ng2-DI-component-directive.jpg","hash":"ed32320793c7b4c608bcb55d8bdc63ba40dde3fc","modified":1509446804434},{"_id":"source/images/ng2-DI-component-service.jpg","hash":"36febb9d7dbdc6fa87d03d7b5c0ad28adfbcf130","modified":1509446804437},{"_id":"source/images/ng2-Flujo-de-datos.jpg","hash":"e8a401ea27c0d850170a310ee8ce5db233cd3214","modified":1509446804441},{"_id":"source/images/ng2Component--1-.jpg","hash":"4f3a1732800a40410e7b34cb733633866d2dccaf","modified":1509446804445},{"_id":"source/images/tutorial-angular-5_0_cli_1-5.jpg","hash":"97fe16304b0d3405d4ed052ab33be43d27d5e981","modified":1510060448910},{"_id":"source/images/tutorial-angular-5_1_base.jpg","hash":"c0703d5e6a70c45c36e9c364cdd8337eae836c6e","modified":1510304484283},{"_id":"source/images/tutorial-angular-5_2_SPA.jpg","hash":"59e36a08cc7180cccee8b049f4c81df85ed21577","modified":1510651511819},{"_id":"source/scaffolds/draft.md","hash":"b14e9fa1e21c75482dd3f05d27705719a2cb47f1","modified":1509446804448},{"_id":"source/scaffolds/page.md","hash":"892cedeb7b62a73e72a3b369daf2bc63dfee47dc","modified":1509446804450},{"_id":"source/scaffolds/post.md","hash":"c569840f0ea232daf0865c3bc8f7ef63b235be62","modified":1509446804452},{"_id":"themes/icarus/languages/es.yml","hash":"aff832ad099fdeac148c643360df44d0a7f59874","modified":1510308289513},{"_id":"themes/icarus/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1509446939350},{"_id":"themes/icarus/languages/id.yml","hash":"83021037b6dad8dd48f48e3b4a822d07d56fc272","modified":1509446939352},{"_id":"themes/icarus/languages/en.yml","hash":"2b888a89957e07f440452a12ef338af979abb4c6","modified":1509446939345},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1509446939360},{"_id":"themes/icarus/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1509446939357},{"_id":"themes/icarus/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1509446939355},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"fdce6e6716768cfac9355c4e88a05260efeeae1c","modified":1509446939367},{"_id":"themes/icarus/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1509446939362},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"646a7ef3e85481b013ffb2f4d9f9a8900f092d73","modified":1509446939369},{"_id":"themes/icarus/languages/tr.yml","hash":"50d94b21e1838db1214f6874f4f81b47c8c521db","modified":1509446939364},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1509446939378},{"_id":"themes/icarus/layout/categories.ejs","hash":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1509446939375},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1509446939460},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1509446939472},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1509446939502},{"_id":"themes/icarus/layout/layout.ejs","hash":"b37ed400e1416964b45ff7d0fa64417d2172962a","modified":1509973309963},{"_id":"themes/icarus/layout/index.ejs","hash":"c329f4598a0af4d8678ba789fdc84fcdf10122de","modified":1509446939455},{"_id":"themes/icarus/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1509446939528},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1509446939530},{"_id":"themes/icarus/layout/archive.ejs","hash":"6a4adb703df447a754225fa665e679816e432ea2","modified":1509446939373},{"_id":"themes/icarus/layout/tags.ejs","hash":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1509446939505},{"_id":"source/images/tutorial-angular-5_5_inject.png","hash":"458734e566681aacd4a3d7f1fa43e2b1609db0d4","modified":1513589952031},{"_id":"themes/icarus/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1509446939338},{"_id":"themes/icarus/_source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1509446939335},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1509446939386},{"_id":"themes/icarus/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1509446939342},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1509446939388},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"67b9c24a2973bb208e183ce46201d3c209a1bd4a","modified":1509446939381},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"f744b41f3cc258e2a5a6df6abf6cf9ba9f05c19c","modified":1509446939384},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"6a53104fc01fd4a7a34b46c2828e76d02cacb0dd","modified":1509446939391},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"b3dd067a6099f0e088f3374d37b8a726bafe15e5","modified":1509446939399},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1509446939394},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1509446939408},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"d2d0d8113a5a7d2cddf1d8ce067e07d40874e56c","modified":1509446939401},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"7269156a9d99b238f6394b4e7e52d0439e774eb3","modified":1509446939396},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1509446939410},{"_id":"themes/icarus/layout/common/article.ejs","hash":"ebc18807a58c974ad824ff7800b4e801bdf94a39","modified":1509446939414},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"39970201c684e19eba4d3db6db192e78bb695d66","modified":1510563484415},{"_id":"themes/icarus/layout/common/header.ejs","hash":"c75d5c3e956f70b0b82552f1e3f5749f0229ddd7","modified":1509446939421},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"063f997bad70768fa3a7f954830b51893b2d48da","modified":1509446939405},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"7be8d835b664085758f0ea550e3180c05de6f2b7","modified":1513770864633},{"_id":"themes/icarus/layout/common/head.ejs","hash":"6b6063ff2f8f65cb4ce3fc6d197a81d30f813017","modified":1509446939419},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"ba03c02607a3330b03727a12ecbbafe9cc3ee450","modified":1509446939448},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"c8ddd6af41903f7853605794ce4188c96a52e70b","modified":1510563484418},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1509446939451},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1509446939467},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1509446939465},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"a2ba07bd70a82a80df71133dc0cea1248a1e3b3e","modified":1509446939453},{"_id":"themes/icarus/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1509446939480},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1509446939478},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1509446939486},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1509446939483},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1509446939490},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1509446939492},{"_id":"themes/icarus/layout/share/default.ejs","hash":"8532f15f400dbc7c1e89ab26972fc4e404001849","modified":1509446939495},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1509446939476},{"_id":"themes/icarus/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1509446939497},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1509446939500},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1509446939508},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1509446939511},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1509446939513},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1509446939517},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"2a41940ab86d3f7b095436b56ea304689c2b5121","modified":1509446939470},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"a4b28996e0e7df2e582387455c02f5c33f691bbd","modified":1509446939519},{"_id":"themes/icarus/source/css/_extend.styl","hash":"c18c58c67f49b8afe92fa8852ff7e203ce5958de","modified":1509446939535},{"_id":"themes/icarus/source/js/insight.js","hash":"691bc7ce086b55b360bb6ec517b2ad6e53ebadc7","modified":1509446939766},{"_id":"themes/icarus/source/js/main.js","hash":"c9a619b068778879ced1ae5b87771f069e3279a8","modified":1509446939769},{"_id":"themes/icarus/source/css/style.styl","hash":"4dc397810fe188ac58166754b667f1891c1518c0","modified":1510304484297},{"_id":"themes/icarus/source/css/_variables.styl","hash":"da60cf824c9e905aca1f002e417a3c61864b6883","modified":1510747314737},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1509446939426},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"fc90dbfc227563029ece7cff13585083b62935bc","modified":1509446939431},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"7767972b9d0cba456f0e0cff1b96b516936414ea","modified":1509446939515},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"79d15e00ead668bf44a48f4e870ac0cde9dbdee3","modified":1509446939437},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"4313097417e76162356ad68c4e136fc464e02e30","modified":1534176799719},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1509446939442},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"96f999573eb908f7129a1c09e486d46d630c0a7d","modified":1509446939429},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1509446939542},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1509446939539},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1509446939544},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1509446939439},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1509446939549},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1509446939556},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1509446939546},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1509446939554},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1509446939551},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1509446939561},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1509446939566},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1509446939563},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1509446939558},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1509446939574},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1509446939571},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1509446939569},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1509446939576},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1509446939579},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1509446939583},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1509446939586},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1509446939589},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1509446939595},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1509446939592},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1509446939597},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1509446939600},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1509446939602},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1509446939604},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1509446939616},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1509446939611},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1509446939620},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1509446939623},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1509446939607},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1509446939625},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1509446939612},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1509446939618},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1509446939629},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1509446939630},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1509446939632},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1509446939639},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1509446939643},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1509446939641},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1509446939646},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1509446939648},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1509446939650},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1509446939653},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1509446939655},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1509446939635},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1509446939658},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1509446939660},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1509446939666},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1509446939663},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1509446939670},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1509446939677},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1509446939673},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1509446939686},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1509446939675},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1509446939680},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1509446939683},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1509446939689},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1509446939691},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1509446939693},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1509446939696},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1509446939698},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1509446939701},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1509446939708},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1509446939703},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1509446939705},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1509446939668},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1509446939710},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1509446939715},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"4dd216a147dd65ddc37521fe8a1a01aa929aeea5","modified":1509446939719},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"acd8966e8f986baca6659ad7418dce13860898a8","modified":1509446939722},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1509446939713},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1509446939726},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1509446939723},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"d0109f33d279a3456317c342d84633ffe08a8b10","modified":1509969634631},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"7eed2cec34bd182c390bf042b56d41f7f2793a2c","modified":1509450250242},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"8a84868a13c7edb733347655b33dc169c682e8b8","modified":1509446939732},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"fb211c3c747565e6fa2304f436b42d14ef84d71a","modified":1509446939737},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"ba1ea8a87ca7c667f0d3cc40033b52bdf168fbdd","modified":1509446939740},{"_id":"themes/icarus/source/css/images/angular-5_1_Base.jpg","hash":"ea08145cbdba702d36cb7224ce69e07c67535c8a","modified":1510304484293},{"_id":"themes/icarus/source/css/images/angular-5_2_SPA.jpg","hash":"0f66402199156fd57f392651d4f6abd5e58427ac","modified":1510651511821},{"_id":"themes/icarus/source/css/images/angular-5_0_cli_1-5.jpg","hash":"7335e8443686636affbc0e181d56336cc6f3c412","modified":1510058134264},{"_id":"themes/icarus/source/css/images/angular-5_3_data.jpg","hash":"83af62c8c867a1cda51e4b7043974ddb23066549","modified":1510737703388},{"_id":"themes/icarus/source/css/images/avatar.jpg","hash":"6d461314157540948b0b35d63fe9dda8c2fa4665","modified":1509450250249},{"_id":"themes/icarus/source/css/images/angular.jpg","hash":"6bf224d00bb2f792e52fbe936ac5abf2aa1332c0","modified":1509451334605},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1509446939760},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1509446939837},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1509446939746},{"_id":"themes/icarus/source/css/images/favicon.ico","hash":"eaf485c235ca3d83faf3d38064a6e0f1df3d14fa","modified":1534174777336},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1509446939744},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1509446939840},{"_id":"source/images/tutorial-angular-5_7_watch.png","hash":"9a57c25a70a9b7df34158cf36981b576beb7aba4","modified":1514545729287},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1509446940007},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1509446940019},{"_id":"themes/icarus/source/css/images/angular-5_4_flow.png","hash":"ff98aa46c87f87ffc36dba1429a049a5affbb5f3","modified":1511261923220},{"_id":"themes/icarus/source/css/images/angular-5_6_http.png","hash":"df079e13b1675d8358835a29284222d174d934c1","modified":1513591888828},{"_id":"themes/icarus/source/css/images/angular-5_5_inject.png","hash":"1346c74f82cbd279e9ed29925cc0ee0cccf172f0","modified":1513589952036},{"_id":"themes/icarus/source/css/images/angular-5_7_watch.png","hash":"a514e6aa09e7b97f761e1c7aec2e63d5e0052c8f","modified":1514545282976},{"_id":"themes/icarus/source/css/images/logo.png","hash":"3ea04c5059266f2614f2fe37ebd81b6e8acb8a3c","modified":1509450250254},{"_id":"themes/icarus/source/css/images/typescript.jpg","hash":"f49a461df54b6d5eb9c14d921d7ee8689b10ec22","modified":1509451334613},{"_id":"source/images/tutorial-angular-5_6_http.png","hash":"9bf52095875d3ae1cd5901f2d4d7aee88d90029d","modified":1513591867464},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1509446939776},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1509446939779},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1509446939848},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1509446939846},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1509446939851},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1509446939860},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1509446939854},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1509446939857},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1509446939884},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1509446939863},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1509446939869},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1509446939866},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1509446939886},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1509446939878},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1509446939891},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1509446939888},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1509446939873},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1509446939875},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1509446939898},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1509446939900},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1509446939895},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1509446939903},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1509446939909},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1509446939911},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1509446939914},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1509446939906},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1509446939920},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1509446939917},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1509446939925},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1509446939928},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1509446939931},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1509446939936},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1509446939940},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1509446939922},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1509446939948},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1509446939943},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1509446939953},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1509446939934},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1509446939881},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1509446939956},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1509446939950},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1509446939959},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1509446939962},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1509446939965},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1509446939970},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1509446939967},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1509446939972},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1509446939975},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1509446939980},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1509446939978},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1509446939984},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1509446939989},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1509446939987},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1509446939992},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1509446940000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1509446939997},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1509446940003},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1509446940013},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1509446940017},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1509446939995},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1509446939788},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1509446939822},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1509446939826},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1509446939833},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1509446939792},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1509446939819},{"_id":"source/images/tutorial-angular-5_0_cli.png","hash":"04e1e7389ac0ca3df252f57ec6d71b65c2ebdde7","modified":1511261923163},{"_id":"source/images/tutorial-angular-5_2_SPA.png","hash":"e286e70682ca3c755cdb3384cb4ac1a0af8ec04a","modified":1511261923194},{"_id":"source/images/tutorial-angular-5_4_flow.png","hash":"110b6e20c4fce1ebd8780ae3bf941b578ffa5c07","modified":1511261923214},{"_id":"source/images/tutorial-angular-5_3_data.png","hash":"ff060c2ec61c8aef97706c1363626300b22a3309","modified":1510748733406},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1509446939808},{"_id":"source/images/tutorial-angular-5_1_base.png","hash":"cc4cc962622e78046f354d3886fe98e784d4527a","modified":1511261923178},{"_id":"public/images/ng2-Arbol-de-componentes.jpg","hash":"981461824a8b8c4be309e0f45b2f6e77b0ce3975","modified":1514551310594},{"_id":"public/images/ng2-Arbol-de-dependencias.jpg","hash":"4aa93110fbb2a84d15436432b103b369368411b9","modified":1514551310595},{"_id":"public/images/ng2-DI-component-directive.jpg","hash":"55f9382deef44c734bf892571df3127f88871939","modified":1514551323923},{"_id":"public/images/ng2-Component-DataFlow.jpg","hash":"b9a22cc89d665491b54e2d0e7a94bd6b19a11aa2","modified":1514551323923},{"_id":"public/images/ng2-DI-component-service.jpg","hash":"3e387e0e2b3b2bd40004b569f83cd2b74f3363e4","modified":1514551323962},{"_id":"public/images/ng2-Flujo-de-datos.jpg","hash":"b791adc0f1322b16145d23e2479fc0a1b95f5846","modified":1514551323963},{"_id":"public/images/ng2Component--1-.jpg","hash":"8e13a6985d532c4413ab8253d8e37edc3b2fcc7f","modified":1514551323963},{"_id":"public/images/tutorial-angular-5_0_cli_1-5.jpg","hash":"25a6c283ccc6760fe0020ff39d875f1e09fa3c7b","modified":1514551323963},{"_id":"public/images/tutorial-angular-5_1_base.jpg","hash":"1cc4e81d47676be5993af04b0e07ce156bdb6dce","modified":1514551323963},{"_id":"public/images/tutorial-angular-5_2_SPA.jpg","hash":"46cc0dd225af3dbb65d57d31cafda80fdc5d9287","modified":1514551323964},{"_id":"public/images/tutorial-angular-5_5_inject.png","hash":"2576dd9a16e3b16b8c42149a95a0e3b82a3075c2","modified":1514551323965},{"_id":"public/css/images/angular-5_1_Base.jpg","hash":"b57ecb7a368149dda83fa24a6c55e857c3d28ab1","modified":1514551323965},{"_id":"public/css/images/angular-5_2_SPA.jpg","hash":"2e5e5179cdcf6b7957cef149405406c89f28d747","modified":1514551323965},{"_id":"public/css/images/angular-5_0_cli_1-5.jpg","hash":"50a7152416bec64e5e26640f2e08b4ce1be39b48","modified":1514551323966},{"_id":"public/css/images/angular-5_3_data.jpg","hash":"40b280d77bf37149c32cffb615d8471c7291e254","modified":1514551323967},{"_id":"public/css/images/avatar.jpg","hash":"f5cce34d891789ed4982cd8ebc64ad8d4f402e38","modified":1514551323967},{"_id":"public/css/images/angular.jpg","hash":"6e341e706f0b6f27dc9ba93efe56621409e4304f","modified":1514551323968},{"_id":"public/css/images/angular-5_4_flow.png","hash":"a74e3213fabd7a1e655ae4dc0760adb7c1ed3328","modified":1514551323968},{"_id":"public/css/images/thumb-default-small.png","hash":"e63874a08229a3031c407915ca448ca9d3ab234f","modified":1514551323969},{"_id":"public/css/images/angular-5_6_http.png","hash":"be5f15dd3b70d5a0b4bff04b9c83bf61f63a6987","modified":1514551323970},{"_id":"public/css/images/angular-5_5_inject.png","hash":"b3b7244229b313b40b8a5dc8f95a979e038ced29","modified":1514551323970},{"_id":"public/images/tutorial-angular-5_6_http.png","hash":"7099b67a58c45c689dbe2508fb5df884d6738811","modified":1514551323970},{"_id":"public/css/images/typescript.jpg","hash":"eb636fe8bea5b21d8f92b430c6492166ff21e30f","modified":1514551323971},{"_id":"public/css/images/logo.png","hash":"ac0fa5cf38f9211089dce5486a3ae7d666dc5db1","modified":1514551323971},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"66532a70bf3f0b148846ea98ae20f0577a7cf99a","modified":1514551323972},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"0d20ced713d03f14fb4966e984c6ab4b12694591","modified":1534175950498},{"_id":"public/images/tutorial-angular-5_0_cli.png","hash":"8b775513832fea85fd79efe5bcbcad32a1c307f5","modified":1514551323973},{"_id":"public/images/tutorial-angular-5_2_SPA.png","hash":"6f5d583e5a01da22fb437250074731be80dd0468","modified":1514551323973},{"_id":"public/images/tutorial-angular-5_4_flow.png","hash":"37a2759729208622277c7dfeedeea827a0198007","modified":1514551323974},{"_id":"public/images/tutorial-angular-5_3_data.png","hash":"91b2130f628c7ace6e9f3c1c8d0b05c2a30d0b8f","modified":1514551323975},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"6aea5705bf22ea3815773da476d3f6e8fadb9c26","modified":1534175950499},{"_id":"public/images/tutorial-angular-5_1_base.png","hash":"9bbf735bccbc475dbe04b16f286c2d8584661e39","modified":1514551323977},{"_id":"public/post-sitemap.xml","hash":"9a2cc9d638be246cf437f2445b43b580a95f9d0f","modified":1535106622329},{"_id":"public/page-sitemap.xml","hash":"bf2eb369863734ad30dfe4a6bb096d242f13a70a","modified":1514551323978},{"_id":"public/category-sitemap.xml","hash":"08572182e9d4175408a9d2966dc57e45c8b4c4e7","modified":1535106627702},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1514551323978},{"_id":"public/tag-sitemap.xml","hash":"076b2bacd6d0f7c98eaf0862562ae0809dcda8dc","modified":1535106627698},{"_id":"public/sitemap.xml","hash":"d2c3a9550fba7e911d44e39d52efb2b275ad3c05","modified":1535106627698},{"_id":"public/images/tutorial-angular-5_7_watch.png","hash":"a09cc6326510fc42441ecc9dc2fcc15c2690b1da","modified":1514551336446},{"_id":"public/css/images/angular-5_7_watch.png","hash":"9cdd9356082368f17b7097b1dc449e9e659952ba","modified":1514551336447},{"_id":"public/404.html","hash":"1f4e7ece1fdbd4beae6bf01b1b519da2a3200b02","modified":1535106633731},{"_id":"public/cursos.html","hash":"80ade324292a5126630a592663e978f4d4613feb","modified":1535106633732},{"_id":"public/noticias-junio-16.html","hash":"40299c4877f9a01f40d693915bc21787140fe8ce","modified":1535106633732},{"_id":"public/promociones.html","hash":"343e536dc5fb4916877acba837a793ecfae91fe2","modified":1535106633732},{"_id":"public/scaffolds/draft.html","hash":"a2f080249aca86ca1d89dafeaf4fadcd8322d8ff","modified":1535106633733},{"_id":"public/scaffolds/page.html","hash":"17a2679d52ce275611eabd2557755586f9db1aef","modified":1535106633733},{"_id":"public/comunicaciones-http-en-Angular/index.html","hash":"c4b5c149ad9d5b1bb3d056fba327c6f0e2bdc118","modified":1535106633734},{"_id":"public/servicios-inyectables-en-Angular/index.html","hash":"9b133b6bd6b91fb9112d352d189e1d8b4989032a","modified":1535106633734},{"_id":"public/flujo-de-datos-entre-componentes-angular/index.html","hash":"a6e77a2e8ba0d3f416fd49620f21448af5ef7a9b","modified":1535106633734},{"_id":"public/formularios-tablas-y-modelos-de-datos-en-angular/index.html","hash":"34ddffd56c95c79b942f70856f8698a5d9304c36","modified":1535106633735},{"_id":"public/paginas-y-rutas-angular-spa/index.html","hash":"2ae37ced32a95473eb2bf1801c73e295f15fdfd5","modified":1535106633737},{"_id":"public/base-aplicacion-angular/index.html","hash":"2d82cbb8ab75166424487dcbe1f336f671580322","modified":1535106633733},{"_id":"public/hola-angular-cli/index.html","hash":"79030fd8bd66a7ea629946ac7800c27ae6c15e4c","modified":1535106633735},{"_id":"public/typescript-programa-en-el-front-igual-que-en-el-back/index.html","hash":"3b648687e7887d3f53c67a191f641c3e6a235c9e","modified":1535106633735},{"_id":"public/codigo-de-ejemplo-curso-de-angular2/index.html","hash":"72ac1f0a905ac2d149f8fc9aac5385c915bf8191","modified":1535106633735},{"_id":"public/formularios-de-datos-en-angular2/index.html","hash":"fd2d8f5e58f9738868026b1fbb3fd420e0c0bf12","modified":1535106633735},{"_id":"public/comunicaciones-http-observables-con-angular2/index.html","hash":"746079b2dadec4aa0e7acb106b4a8aa6eaea0c63","modified":1535106633735},{"_id":"public/scaffolds/post.html","hash":"66e21ac1d1a0e2cf3eaaf68d1ed2c388d7b30262","modified":1535106633733},{"_id":"public/enrutado-con-angular2-el-nuevo-spa/index.html","hash":"1cc641e9763725b711b8de60ebb9c936636ebb59","modified":1535106633735},{"_id":"public/databinding-el-flujo-de-datos-de-angular2/index.html","hash":"7bc15e3e34f9f8b311bfba31b4b82008dd35586e","modified":1535106633735},{"_id":"public/angular2-di-inyeccion-de-dependencias/index.html","hash":"5ce8bce64a35671242c72e3153c8335ce309fe76","modified":1535106633735},{"_id":"public/cookies.html","hash":"029bc5a0c16d6878292b1937931b4c3e399bb483","modified":1535106633730},{"_id":"public/contacto.html","hash":"32403af9682a796abb5c647756271a0768691452","modified":1535106633731},{"_id":"public/componentes-los-bloques-de-construccion-de-angular-2/index.html","hash":"1f1b776f4d4fd6a87f1070d7427d021b8425f83b","modified":1535106633736},{"_id":"public/hola-mundo-en-angular-2/index.html","hash":"ef17a6717d27b3ff8a9dd8618593f960b22fe69b","modified":1535106633736},{"_id":"public/angular2-primeras-impresiones/index.html","hash":"9faae082cc76435a8502d819b8f77c864f41c08a","modified":1535106633736},{"_id":"public/node-6-0-0-actualizacion-con-nvm/index.html","hash":"7f03c12ce74615d4543c7bd02d0c1f26570725e2","modified":1535106633736},{"_id":"public/soluciones-backend-2016/index.html","hash":"7211565fd86477429f29889956f7e2e20766c558","modified":1535106633736},{"_id":"public/soluciones-frontend-2016/index.html","hash":"adc13022c93493a50d8ed26a218563b61c0c4a30","modified":1535106633736},{"_id":"public/npm-de-instalador-a-publicador/index.html","hash":"d3b65f49c0e6618aeb3aff33ded78a131fbffa81","modified":1535106633736},{"_id":"public/formas/index.html","hash":"07c9bc102ff7aca72d8509f44f3a30001ac4335f","modified":1535106633737},{"_id":"public/introduccion-a-bootstrap/index.html","hash":"1497ce9254deda602e8c4c73983d8de8a68d8935","modified":1535106633737},{"_id":"public/para-que-puedo-usar-nodejs/index.html","hash":"4dd7471915364f72ed06f6a2a646c4778450ebb3","modified":1535106633737},{"_id":"public/introduccion-a-mongodb/index.html","hash":"06195b373fa11669628995b3145357d043ce9f74","modified":1535106633737},{"_id":"public/por-que-angularjs/index.html","hash":"28b01c1e1f08fc86143cbc78fc623865bd143d16","modified":1535106633737},{"_id":"public/ng-el-ecosistema-de-angularjs/index.html","hash":"73c2a93684b52568d76847cb0360d3db8441a122","modified":1535106633737},{"_id":"public/categories/Avanzado/index.html","hash":"eef0ca1b1dabc4ecef49c4e152b2df761cf6f50b","modified":1535106633767},{"_id":"public/archives/2015/11/index.html","hash":"e13b56ce62889872d2fec6c6fe96727920373f9a","modified":1535106630744},{"_id":"public/archives/2016/01/index.html","hash":"d6d1bd1a77102a82eccf96b89c0e0522626ee636","modified":1535106633722},{"_id":"public/archives/2016/03/index.html","hash":"4e3361bd1861777930df14a336a4193d96e1f1d4","modified":1535106630744},{"_id":"public/archives/2016/04/index.html","hash":"8c6a04f02cb0dd276b925048f425b76e8e87bce0","modified":1535106633722},{"_id":"public/archives/2016/09/index.html","hash":"e25b5c793c686f6198d88cf0478ac490c950e869","modified":1535106633730},{"_id":"public/archives/2017/03/index.html","hash":"61b3feeaa00c51a3d9a169268bd2760c166c4268","modified":1535106633729},{"_id":"public/tag/Bootstrap/index.html","hash":"0343e3a7476b14a0bc5be41947730a5874a59028","modified":1535106633767},{"_id":"public/tag/DI/index.html","hash":"3b8eeed7d32698ad8f496b364072352f3534ded2","modified":1535106633844},{"_id":"public/tag/MongoDB/index.html","hash":"4d29ab41ee82a4dd6647e309adb6efbc00b11d73","modified":1535106633843},{"_id":"public/tag/FrontEnd/index.html","hash":"49bd30f87d430259613294f38a3ac17f67f6cb09","modified":1535106633843},{"_id":"public/tag/TypeScript/index.html","hash":"a27e34c37ad9e9aa7c1ff5422b51a9e3adf2f6c0","modified":1535106633843},{"_id":"public/tag/BackEnd/index.html","hash":"86caef3f8b93ef63dd0a286a7084269cf28ba36d","modified":1535106633843},{"_id":"public/tag/SPA/index.html","hash":"b71fea72249cfaeb6a7c03e2b29cd0416f31d3c0","modified":1535106633845},{"_id":"public/vigilancia-y-seguridad-en-Angular/index.html","hash":"3f2b84bfe04f13226e22b5b9e317ae84c6aa7b74","modified":1535106633734},{"_id":"public/categories/Introduccion/index.html","hash":"c2345c932f626922095969203463bc680b4a5891","modified":1535106633739},{"_id":"public/categories/Opinion/index.html","hash":"11790f7e684758423fb450fdd03fb52c611f39ae","modified":1535106633844},{"_id":"public/categories/Introduccion/page/2/index.html","hash":"8bac6c78d236f13b35346c69a1695e0b95ec3a10","modified":1535106633739},{"_id":"public/archives/index.html","hash":"ac53e60809d43f02c13920992a3d33fa921f58fa","modified":1535106633737},{"_id":"public/archives/page/2/index.html","hash":"1d42f8606ffe5ec6e55e147bce870258fa3d2b7c","modified":1535106633737},{"_id":"public/archives/2015/index.html","hash":"6551001ffbebc2c821f4fd051aaaf4ff992ff55e","modified":1535106633845},{"_id":"public/categories/Tutorial/index.html","hash":"2ccc4b24aa686e698423799093d689de708deec8","modified":1535106633844},{"_id":"public/archives/page/3/index.html","hash":"ed09c4c62d1d5527bcea28fb2fb826b3168d2140","modified":1535106633737},{"_id":"public/archives/2016/index.html","hash":"4945ab643f02facdd85dd98111bdb4ce0b65f3fa","modified":1535106633738},{"_id":"public/archives/2015/08/index.html","hash":"0c9779421821c25d344c917c9a5782b51e94b7de","modified":1535106633737},{"_id":"public/archives/2016/page/2/index.html","hash":"7917c88bfeddd1239b6b4430b3b92d5495a22578","modified":1535106633738},{"_id":"public/archives/2016/06/index.html","hash":"468c27c4dc5f6c4c60e559dffae6dbe5c6021906","modified":1535106633738},{"_id":"public/archives/2016/05/index.html","hash":"1bdd58e2c1b4672b64c5149a4b33ef569556de9f","modified":1535106633738},{"_id":"public/archives/2017/index.html","hash":"e9ba474288ae8f0af43a7c6e05e40775f3d5c849","modified":1535106633738},{"_id":"public/archives/2017/11/index.html","hash":"c741f4e477d261b9da82e7479a0023d579b7aba2","modified":1535106633738},{"_id":"public/archives/2017/12/index.html","hash":"929c2e0fc5fb52f8b6fc39ce4b166fea2e2d2db8","modified":1535106633738},{"_id":"public/index.html","hash":"6826bb4a0d7d5ed423d8503b5e043d486006f7fe","modified":1535106633844},{"_id":"public/page/2/index.html","hash":"1a3bc52c43db8e3a7287ef5ab6335dfb22ef666a","modified":1535106633844},{"_id":"public/tag/Angular2/index.html","hash":"693cf731a4f2fb4e8b5228ab131cae5664760901","modified":1535106633844},{"_id":"public/page/3/index.html","hash":"dcfcc730f6db2f5594ce99a19b140069e268472d","modified":1535106633844},{"_id":"public/tag/Angular2/page/2/index.html","hash":"9fdd2c598bfa209d45e2efdd2511f992e99b182e","modified":1535106633844},{"_id":"public/tag/Tutorial/index.html","hash":"f9a34eeddf68635b161ae7fde4ddd58f76706f02","modified":1535106633844},{"_id":"public/tag/Tutorial/page/2/index.html","hash":"8c9117acfbca6aae7b7b560c05bf4954ea4d38a7","modified":1535106633845},{"_id":"public/tag/http/index.html","hash":"2ee7c639eec88d6c77d0fbefa39da31fb0cf04b4","modified":1535106633845},{"_id":"public/tag/Forms/index.html","hash":"b8133c2c694c646ab951d6231369c1138d4254d9","modified":1535106633845},{"_id":"public/tag/CLI/index.html","hash":"a9ab6f559214a8ddeb82c157acf66f92ec720fbc","modified":1535106633845},{"_id":"public/tag/AngularJS/index.html","hash":"9a89ad99781945f69b1f985322756ba47a425c32","modified":1535106633845},{"_id":"public/tag/NodeJS/index.html","hash":"d8b222c4119f7e6e7b3a3a01b555cfe0f8d5b65a","modified":1535106633845},{"_id":"public/tag/Angular/index.html","hash":"f89091af4d97118e70236eec5da12e38d6a0cc87","modified":1535106633845},{"_id":"public/tag/Angular5/index.html","hash":"527bcb23058884721ca1edd8bbb861749873e256","modified":1535106633845},{"_id":"public/tag/Introduccion/index.html","hash":"8f2e4e6346f5b9ebddddbbcd1c658fd89b228e20","modified":1535106633845},{"_id":"public/categories/Tutorial/Angular/index.html","hash":"28470722edee65901a649ea06cc2d6545bcdef6d","modified":1535106633844},{"_id":"public/tag/observables/index.html","hash":"f67a6a510da0b6d67d45fe391089e1a5b0f36d8f","modified":1535106633844},{"_id":"public/css/images/favicon.ico","hash":"eaf485c235ca3d83faf3d38064a6e0f1df3d14fa","modified":1534175958537},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1514551350246},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1514551350256},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1514551350256},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1514551350257},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1514551350257},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1514551350259},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1514551350262},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1514551350269},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1514551350273},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1514551350273},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1514551350273},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1514551350273},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1514551350275},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1514551350275},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1514551350276},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1514551350276},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1514551350277},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1514551350277},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1514551350277},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1514551350277},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1514551350277},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1514551350278},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1514551350278},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1514551350278},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1514551350280},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1514551350281},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1514551350281},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1514551350281},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1514551350282},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1514551350282},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1514551350282},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1514551350283},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1514551353962},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1514551358420},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1514551358436},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1514551358436},{"_id":"public/js/main.js","hash":"e4bd624060109cd7d23e638bd81326a518fe9966","modified":1514551358559},{"_id":"public/js/insight.js","hash":"48fde70e8f5e99f3bcec13ed693a3c2db9f83db9","modified":1514551358560},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1514551358561},{"_id":"public/libs/open-sans/styles.css","hash":"84cd5aaa2f93a70da5304b8cfef6c9892ecd40ec","modified":1514551358562},{"_id":"public/libs/source-code-pro/styles.css","hash":"0cddee03d83de49c9ec47c799b1136d08d3187ed","modified":1514551358563},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"81846a8175c096454286c6659b5acd530e610ec8","modified":1514551358564},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1514551358564},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1514551358566},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"a0ddfd0c8f7c54f2d7f904172c9505894b250a47","modified":1514551358567},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"27273ac9a343ff3f77916caaf93b0cd242b7e88d","modified":1514551358567},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1514551358568},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"4c45717974b8e9cc6ad62a0461e510d6ff94c29a","modified":1514551358568},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"09c80887da1c809bb00a1fd0ba17d646817b9a87","modified":1514551358568},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1514551358569},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1514551358570},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1514551358571},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1514551358571},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"f5737bbc2cba87e85783ca24513b900bb4e19294","modified":1514551358572},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"d3503b5c77ccb2d689706ed0fd97d8cb6e7b77f6","modified":1514551358574},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1514551358575},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1514551358575},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"101e49df42d6d6933f44c5561488a2778921da0a","modified":1514551358575},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"d4204dabf63148e779b0c4466b856b2dfe3a1a3d","modified":1514551358576},{"_id":"public/css/style.css","hash":"f79de7642d4cd04654fcc3cc11600f86cb51626f","modified":1514551358578},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1514551358578},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"f9ae1cab2f0ceeea9e8dd0df2e9792e4f08fb107","modified":1514551358579},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1514551358579},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1514551358580},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7e856f16b01b19a8bdb3bfbd7d2304d330ee0066","modified":1514551358581},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"18795fa809cc5371461f85ca3830fa4b9cfb7acd","modified":1514551358581},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1514551358581},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"4d53b6b7018a874c6caef8bac4a24e5e2b3da508","modified":1514551358582},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1514551358582},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514551358582},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1514551358582},{"_id":"source/_posts/ng-8-Formularios-reactivos-con-Angular.md","hash":"4b2277969f179d923c1df7cc0cbd2863abd9c182","modified":1525348426071},{"_id":"themes/icarus/source/css/images/angular_8_reactive.png","hash":"d962ef91adcd47c26d551d5cd9921555ede359ab","modified":1525339215081},{"_id":"source/images/tutorial-angular_8_reactive.png","hash":"7e875e6860d4af88dccf12f3a78ae9bfafca3a73","modified":1525339058270},{"_id":"public/content.json","hash":"e087d6d60a03ff297eba1f60f231f90e008152d8","modified":1535106622330},{"_id":"public/css/images/angular_8_reactive.png","hash":"26c82a97886e6046414f3052e4a21a7072ee268c","modified":1525339575186},{"_id":"public/images/tutorial-angular_8_reactive.png","hash":"a60b218d57fd6f4649384c652baae78961a98089","modified":1525339575186},{"_id":"public/archives/2018/index.html","hash":"37a3fe0d234b7b8575cc26516e293906cdfa16a6","modified":1535106633738},{"_id":"public/archives/2018/05/index.html","hash":"8b02769c200748b9da9206421d200cfe4d22d638","modified":1535106633730},{"_id":"public/tag/Angular6/index.html","hash":"87aaa57968209a59004db99f07bc3fd7f51d8020","modified":1535106633844},{"_id":"public/tag/reactiveForms/index.html","hash":"1b90485889e1efc27cff1059a82bd71b1cb815b9","modified":1535106633844},{"_id":"public/formularios-reactivos-con-Angular/index.html","hash":"fe324e3e8a8b0261258bcffe8727cecc7357d575","modified":1535106633734},{"_id":"themes/icarus/source/css/images/angular_0_cli.png","hash":"199d998dea02a8981a2ceaca3ccb0fa1abc3f230","modified":1534175735021},{"_id":"source/images/tutorial-angular-0_cli.png","hash":"152d44c9756cb40d4fa7f2f9bdc299107374efe6","modified":1534175483456},{"_id":"public/css/images/angular_0_cli.png","hash":"d4d7205d37d4ce286d60f7f2d1e14995513d7882","modified":1534175958506},{"_id":"public/images/tutorial-angular-0_cli.png","hash":"12ccac4182039809891355134c54c25414a7c5e8","modified":1534175958506},{"_id":"themes/icarus/source/css/images/angular-0_cli.png","hash":"199d998dea02a8981a2ceaca3ccb0fa1abc3f230","modified":1534175735021},{"_id":"public/css/images/angular-0_cli.png","hash":"d4d7205d37d4ce286d60f7f2d1e14995513d7882","modified":1534176417963},{"_id":"public/archives/2018/08/index.html","hash":"45b93ad22cae794135d1cddff6792ce313c4f54e","modified":1535106633738},{"_id":"themes/icarus/source/css/images/angular-1_base.png","hash":"79b96af1bc6e3e69f83c964c55b0a37a44902e34","modified":1534410515426},{"_id":"source/images/tutorial-angular-1_base.png","hash":"c2f02e7e32c454b53650d53947aae6a9f734cd53","modified":1534410648737},{"_id":"public/css/images/angular-1_base.png","hash":"58e38937d6213089d693c9a0850c1c2176596241","modified":1534411026988},{"_id":"public/images/tutorial-angular-1_base.png","hash":"681efda3bfda76599be1dcefb249371bcca5c797","modified":1534411026989},{"_id":"source/images/1-base_tree.PNG","hash":"8c4b7bffd61856563a4de13846909c08c44cb028","modified":1534495226249},{"_id":"public/images/1-base_tree.PNG","hash":"3127057fc9fb0077b297a177733a737a496073ef","modified":1534495354540},{"_id":"source/images/1-base_module_tree.png","hash":"8c4b7bffd61856563a4de13846909c08c44cb028","modified":1534496273093},{"_id":"public/images/1-base_module_tree.png","hash":"3127057fc9fb0077b297a177733a737a496073ef","modified":1534496340975},{"_id":"themes/icarus/source/css/images/angular-2_spa.png","hash":"6b1a87a388760b85b5576fef88426521f6864c9e","modified":1535106319234},{"_id":"source/images/tutorial-angular-2_spa.png","hash":"7c9920f2d7a828c7e409a6b36ad8075a445cda7c","modified":1535106261273},{"_id":"public/css/images/angular-2_spa.png","hash":"3588b8c7021d49726589b4398d261f3d41e9d47e","modified":1535106633730},{"_id":"public/images/tutorial-angular-2_spa.png","hash":"c152fe1d92e63db95eb9dfa16860d0bae70daad9","modified":1535106633730},{"_id":"public/tag/Routing/index.html","hash":"c4fed6cd3e6592051a0ebf5f8f8d56b65ecc4f98","modified":1535106633854}],"Category":[{"name":"Introducción","_id":"cjbrwpvel0005iwd3drbh7j0w"},{"name":"Opinión","_id":"cjbrwpvhc0018iwd35xk9dihj"},{"name":"Tutorial","_id":"cjbrwpvin001tiwd3d4s3d3xu"},{"name":"Angular","parent":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjbrwpvjy002diwd3equpwx2y"},{"name":"Avanzado","_id":"cjbrwpvke002riwd3gys3x6vg"}],"Data":[],"Page":[{"layout":"page","title":"404 No encontrado","comments":0,"_content":"\n> Lo sentimos, la ruta no se ha encontrado.\n> Por favor, dirígete al [inicio del blog](../)\n> -- <cite>El equipo de Academia Binaria</cite>\n\n---\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"404.md","raw":"---\npermalink: /404.html\nlayout: page\ntitle: 404 No encontrado\ncomments: false\n---\n\n> Lo sentimos, la ruta no se ha encontrado.\n> Por favor, dirígete al [inicio del blog](../)\n> -- <cite>El equipo de Academia Binaria</cite>\n\n---\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","date":"2017-12-20T09:17:19.801Z","updated":"2017-12-20T09:17:19.801Z","path":"/404.html","_id":"cjbrwpun40000iwd3t7pafpnt","content":"<blockquote><p>Lo sentimos, la ruta no se ha encontrado.<br>Por favor, dirígete al <a href=\"../\">inicio del blog</a><br>– <cite>El equipo de Academia Binaria</cite></p></blockquote><hr><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"","more":"<blockquote><p>Lo sentimos, la ruta no se ha encontrado.<br>Por favor, dirígete al <a href=\"../\">inicio del blog</a><br>– <cite>El equipo de Academia Binaria</cite></p></blockquote><hr><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Contacto","id":4,"updated":"2017-02-14T08:21:50.000Z","date":"2015-09-16T11:52:52.000Z","_content":"\n<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>","source":"Contacto/index.md","raw":"---\ntitle: Contacto\npermalink: contacto\nid: 4\nupdated: '2017-02-14 09:21:50'\ndate: 2015-09-16 13:52:52\n---\n\n<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>","path":"contacto.html","comments":1,"layout":"page","_id":"cjbrwpvd70001iwd38fjcrtou","content":"<div><br>Vivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b><br></div><br><p><br><div><br>Si quieres <b>visitarnos</b> ven a:<br></div><hr><div itemscope=\"\" itemtype=\"http://schema.org/LocalBusiness\"><br><h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4><br><span itemprop=\"description\">Factoría de software y academia de programadores.</span><br><p><br><div itemprop=\"address\" itemscope=\"\" itemtype=\"http://schema.org/PostalAddress\"><br><span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span><br>CP:<span itemprop=\"postalCode\">15190</span><br><p><br><span itemprop=\"addressLocality\">A Coruña</span>,<br><span itemprop=\"addressCountry\">España</span><br></p></div><br>Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\" target=\"_blank\" rel=\"external\">+34 609884782</a></span><br></p><p><br>Email: <span itemprop=\"email\">info(at)agorabinaria.com</span><br></p></div><hr></p><p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:</p><blockquote><br><p>Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span></p><br><p>Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\" target=\"_blank\" rel=\"external\">http://www.vitaedigital.com/</a></span></p><br><br></blockquote>","site":{"data":{}},"excerpt":"","more":"<div><br>Vivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b><br></div><br><p><br><div><br>Si quieres <b>visitarnos</b> ven a:<br></div><hr><div itemscope=\"\" itemtype=\"http://schema.org/LocalBusiness\"><br><h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4><br><span itemprop=\"description\">Factoría de software y academia de programadores.</span><br><p><br><div itemprop=\"address\" itemscope=\"\" itemtype=\"http://schema.org/PostalAddress\"><br><span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span><br>CP:<span itemprop=\"postalCode\">15190</span><br><p><br><span itemprop=\"addressLocality\">A Coruña</span>,<br><span itemprop=\"addressCountry\">España</span><br></p></div><br>Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\" target=\"_blank\" rel=\"external\">+34 609884782</a></span><br></p><p><br>Email: <span itemprop=\"email\">info(at)agorabinaria.com</span><br></p></div><hr></p><p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:</p><blockquote><br><p>Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span></p><br><p>Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\" target=\"_blank\" rel=\"external\">http://www.vitaedigital.com/</a></span></p><br><br></blockquote>"},{"title":"Cookies","id":9,"updated":"2016-04-18T13:48:28.000Z","date":"2016-04-14T12:29:58.000Z","_content":"\nUtilizamos cookies para facilitar el uso de nuestra página web. \n\nLas cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. \n\nLas utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con\nanterioridad, o si su visita es nueva o recurrente. \n\nLas cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. \n\nEn caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. ","source":"Cookies/index.md","raw":"---\ntitle: Cookies\npermalink: cookies\nid: 9\nupdated: '2016-04-18 15:48:28'\ndate: 2016-04-14 14:29:58\n---\n\nUtilizamos cookies para facilitar el uso de nuestra página web. \n\nLas cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. \n\nLas utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con\nanterioridad, o si su visita es nueva o recurrente. \n\nLas cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. \n\nEn caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. ","path":"cookies.html","comments":1,"layout":"page","_id":"cjbrwpvec0003iwd3x2t9a0sb","content":"<p>Utilizamos cookies para facilitar el uso de nuestra página web.</p><p>Las cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web.</p><p>Las utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con<br>anterioridad, o si su visita es nueva o recurrente.</p><p>Las cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle.</p><p>En caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas.</p>","site":{"data":{}},"excerpt":"","more":"<p>Utilizamos cookies para facilitar el uso de nuestra página web.</p><p>Las cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web.</p><p>Las utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con<br>anterioridad, o si su visita es nueva o recurrente.</p><p>Las cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle.</p><p>En caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas.</p>"},{"title":"Cursos","id":18,"updated":"2017-02-23T16:07:39.000Z","date":"2015-09-16T11:17:03.000Z","_content":"\nCalendario de **cursos** de formación impartidos y programados:\n\n^^^^\n\n# 2017\n\nvvv\n\n---\n\n> ##Angular 2\n\n>*del 8 al 12 de mayo* \n\n> para universidad de **A Coruña**\n\n---\n\n> ##Angular 2\n\n>*del 24 al 28 de abril* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ##Angular 1.5 Avanzado\n\n>*del 30 al 31 de marzo* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ##Angular 2\n\n>*del 22 de febrero al 6 de abril* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###[Angular 2](http://www.vitaedigital.com/proyectos-de-formacion/curso-en-abierto-de-angular2-con-typescript-y-observables-3-edicion)\n\n>*del 3 al 11 de febrero* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 16 al 24 de enero* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###Tecnología Web\n\n>*el 13 de enero* \n\n> para consultora informática en **A Coruña**\n\n---\n\n^^^\n\n# 2017\n\n---\n\n# 2016\n\nvvv\n\n---\n\n> ###[Angular2](http://www.vitaedigital.com/proyectos-de-formacion/vigo-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x-2-edicion)\n\n>*del 12 al 20 de diciembre* \n\n> abierto al público en **Vigo** \n\n---\n\n> ###Angular 2\n\n>*del 28 de noviembre al 15 de diciembre* \n\n> para consultora informática en **Burgos On Line**\n\n---\n\n> ###AngularJS\n\n>*del 21 al 24 de noviembre* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 11 al 19 de noviembre* \n\n> para consultora informática en **Santiago**\n\n---\n\n> ###[Angular2](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\n>*del 2 al 17 de noviembre* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 24 de octubre al 27 de octubre* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 13 de octubre al 21 de octubre* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ###AngularJS\n\n>*del 26 de septiembre al 29 de septiembre* \n\n> para entidad bancaria en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 26 de septiembre al 29 de septiembre* \n\n> para entidad bancaria en **A Coruña**\n\n---\n\n> ###Angular 2\n\n>*del 15 de septiembre al 23 de septiembre* \n\n> para empresa sector automóvil en **Vigo**\n\n---\n\n> ###Angular 2\n\n>*del 12 de septiembre al 14 de septiembre* \n\n> para empresa peritaje en **Pontedeume**\n\n---\n\n> ###AngularJS\n\n>*del 18 de agosto al 26 de agosto* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ###[Angular2](http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs)\n\n>*del 10 al 18 de junio* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###[Angular2](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\n>*del 9 al 22 de junio* \n\n> abierto al público **on line** \n\n---\n\n> ###MEANjs\n\n>*del 18 de mayo al 6 de julio* \n\n> para consultora informática en **A Coruña** \n\n\n---\n\n> ###[AngularJS](http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs)\n\n>*del 15 al 23 de abril* \n\n> abierto al público en **Vigo** \n\n---\n\n\n> ###[BackEdge](http://escuela.it/cursos/back-edge-desarrollo-web-al-limite-nodejs-es6-npm-mongodb/)\n\n>*del 31 de marzo al 11 de abril* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS, Material Design\n\n>*del 3 de marzo al 8 de marzo* \n\n> para consultora, multinacional del automóvil y entidad bancaria en **Vigo**  \n\n---\n\n> ###AngularJS, Material Design y WebAPI\n\n>*del 22 de febrero al 29 de febrero* \n\n> para entidad bancaria en **A Coruña**  \n\n---\n\n> ###[MEANjs](http://vitaedigital.com/download/NTk5/Curso_de_Programacion_MEAN_FullStack_con_MongoDB_Express_AngularJS_y_NodeJS%20(3).pdf)\n\n>*del 29 de enero al 27 de febrero* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###[FrontEdge](http://escuela.it/cursos/front-edge-desarrollo-web-al-limite/)\n\n>*del 14 de enero al 25 de enero* \n\n> abierto al público **on line** \n\n---\n\n^^^\n\n# 2016\n\n---\n\n# 2015\n\nvvv\n\n---\n---\n\n> ###FrontEdge \n\n>*del 14 de diciembre al 15 de diciembre* \n\n> en abierto en **A Coruña** \n\n\n---\n\n> ###AngularJS \n\n>*del 13 de noviembre al 27 de noviembre* \n\n> para consultora informática en **A Coruña** \n\n\n---\n\n> ###AngularJS\n\n>*el 10 de noviembre* \n\n> para consultora informática en **Santiago de Compostela** \n\n\n---\n\n\n> ###Web Workers\n\n>*el 5 de noviembre* \n\n> abierto al público **on line** \n\n---\n\n> ###Angular\n\n>*el 20 de octubre* \n\n> para consultora informática en **Santiago de Compostela** \n\n---\n\n> ###MEANjs\n\n>*del 14 de octubre al 2 de diciembre* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 5 de octubre al 7 de octubre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n> ###AngularJS y WebAPI\n\n>*del 28 de septiembre al 1 de octubre* \n\n> para entidad bancaria en **A Coruña** \n\n\n---\n\n> ###MEANjs\n\n>*del 25 de septiembre al 17 de octubre* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 21 de septiembre al 22 de septiembre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n\n> ###AngularJS \n\n>*del 7 de septiembre al 8 de septiembre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n---\n\n> ###AngularJS\n\n>*del 26 de junio al 4 de julio* \n\n> abierto al público en **A Coruña** \n\n\n---\n\n> ###AngularJS\n\n>*del 5 de junio al 13 de junio* \n\n> multinacional del automóvil en **Vigo** \n\n---\n\n> ###AngularJS\n\n>*del 8 de junio al 9 de junio* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n> ###NodeJS\n\n>*del 22 de mayo al 30 de mayo* \n\n> abierto al público en **Vigo** \n\n\n---\n\n> ###MEANjs\n\n>*del 18 de mayo al 28 de mayo* \n\n> para consultora informática en **Santiago de Compostela** \n\n---\n\n> ###MongoDB\n\n>*del 13 de abril al 23 de abril* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###MEANjs\n\n>*del 16 de marzo al 8 de abril* \n\n> abierto al público **on line** \n\n\n---\n\n> ###NodeJS\n\n>*del 6 de marzo al 14 de marzo* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 10 de febrero al 13 de febrero* \n\n> abierto al público **on line** \n\n\n---\n\n^^^^\n\n# 2015\n\n---\n\n# 2014\n\nvvvv\n\n---\n\n> ###AngularJS\n\n>*del 21 de noviembre al 29 de noviembre* \n\n> abierto al público en **Vigo**\n\n---\n\n> ###AngularJS\n\n>*el 18 de noviembre* \n\n> universidad de **Ourense** \n\n---\n\n> ###AngularJS\n\n>*del 25 de septiembre al 10 de octubre* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 19 de septiembre al 26 de octubre* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 5 de julio al 6 de julio* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 27 de junio al 5 de julio* \n\n> abierto al público en **A Coruña**\n\n\n---\n^^^\n## 2014\n\n---\n","source":"Cursos/index.md","raw":"---\ntitle: Cursos\npermalink: cursos\nid: 18\nupdated: '2017-02-23 17:07:39'\ndate: 2015-09-16 13:17:03\n---\n\nCalendario de **cursos** de formación impartidos y programados:\n\n^^^^\n\n# 2017\n\nvvv\n\n---\n\n> ##Angular 2\n\n>*del 8 al 12 de mayo* \n\n> para universidad de **A Coruña**\n\n---\n\n> ##Angular 2\n\n>*del 24 al 28 de abril* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ##Angular 1.5 Avanzado\n\n>*del 30 al 31 de marzo* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ##Angular 2\n\n>*del 22 de febrero al 6 de abril* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###[Angular 2](http://www.vitaedigital.com/proyectos-de-formacion/curso-en-abierto-de-angular2-con-typescript-y-observables-3-edicion)\n\n>*del 3 al 11 de febrero* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 16 al 24 de enero* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###Tecnología Web\n\n>*el 13 de enero* \n\n> para consultora informática en **A Coruña**\n\n---\n\n^^^\n\n# 2017\n\n---\n\n# 2016\n\nvvv\n\n---\n\n> ###[Angular2](http://www.vitaedigital.com/proyectos-de-formacion/vigo-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x-2-edicion)\n\n>*del 12 al 20 de diciembre* \n\n> abierto al público en **Vigo** \n\n---\n\n> ###Angular 2\n\n>*del 28 de noviembre al 15 de diciembre* \n\n> para consultora informática en **Burgos On Line**\n\n---\n\n> ###AngularJS\n\n>*del 21 al 24 de noviembre* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 11 al 19 de noviembre* \n\n> para consultora informática en **Santiago**\n\n---\n\n> ###[Angular2](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\n>*del 2 al 17 de noviembre* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 24 de octubre al 27 de octubre* \n\n> para consultora informática en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 13 de octubre al 21 de octubre* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ###AngularJS\n\n>*del 26 de septiembre al 29 de septiembre* \n\n> para entidad bancaria en **A Coruña**\n\n---\n\n> ###AngularJS\n\n>*del 26 de septiembre al 29 de septiembre* \n\n> para entidad bancaria en **A Coruña**\n\n---\n\n> ###Angular 2\n\n>*del 15 de septiembre al 23 de septiembre* \n\n> para empresa sector automóvil en **Vigo**\n\n---\n\n> ###Angular 2\n\n>*del 12 de septiembre al 14 de septiembre* \n\n> para empresa peritaje en **Pontedeume**\n\n---\n\n> ###AngularJS\n\n>*del 18 de agosto al 26 de agosto* \n\n> para consultora informática en **Madrid**\n\n---\n\n> ###[Angular2](http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs)\n\n>*del 10 al 18 de junio* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###[Angular2](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\n>*del 9 al 22 de junio* \n\n> abierto al público **on line** \n\n---\n\n> ###MEANjs\n\n>*del 18 de mayo al 6 de julio* \n\n> para consultora informática en **A Coruña** \n\n\n---\n\n> ###[AngularJS](http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs)\n\n>*del 15 al 23 de abril* \n\n> abierto al público en **Vigo** \n\n---\n\n\n> ###[BackEdge](http://escuela.it/cursos/back-edge-desarrollo-web-al-limite-nodejs-es6-npm-mongodb/)\n\n>*del 31 de marzo al 11 de abril* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS, Material Design\n\n>*del 3 de marzo al 8 de marzo* \n\n> para consultora, multinacional del automóvil y entidad bancaria en **Vigo**  \n\n---\n\n> ###AngularJS, Material Design y WebAPI\n\n>*del 22 de febrero al 29 de febrero* \n\n> para entidad bancaria en **A Coruña**  \n\n---\n\n> ###[MEANjs](http://vitaedigital.com/download/NTk5/Curso_de_Programacion_MEAN_FullStack_con_MongoDB_Express_AngularJS_y_NodeJS%20(3).pdf)\n\n>*del 29 de enero al 27 de febrero* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###[FrontEdge](http://escuela.it/cursos/front-edge-desarrollo-web-al-limite/)\n\n>*del 14 de enero al 25 de enero* \n\n> abierto al público **on line** \n\n---\n\n^^^\n\n# 2016\n\n---\n\n# 2015\n\nvvv\n\n---\n---\n\n> ###FrontEdge \n\n>*del 14 de diciembre al 15 de diciembre* \n\n> en abierto en **A Coruña** \n\n\n---\n\n> ###AngularJS \n\n>*del 13 de noviembre al 27 de noviembre* \n\n> para consultora informática en **A Coruña** \n\n\n---\n\n> ###AngularJS\n\n>*el 10 de noviembre* \n\n> para consultora informática en **Santiago de Compostela** \n\n\n---\n\n\n> ###Web Workers\n\n>*el 5 de noviembre* \n\n> abierto al público **on line** \n\n---\n\n> ###Angular\n\n>*el 20 de octubre* \n\n> para consultora informática en **Santiago de Compostela** \n\n---\n\n> ###MEANjs\n\n>*del 14 de octubre al 2 de diciembre* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 5 de octubre al 7 de octubre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n> ###AngularJS y WebAPI\n\n>*del 28 de septiembre al 1 de octubre* \n\n> para entidad bancaria en **A Coruña** \n\n\n---\n\n> ###MEANjs\n\n>*del 25 de septiembre al 17 de octubre* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 21 de septiembre al 22 de septiembre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n\n> ###AngularJS \n\n>*del 7 de septiembre al 8 de septiembre* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n---\n\n> ###AngularJS\n\n>*del 26 de junio al 4 de julio* \n\n> abierto al público en **A Coruña** \n\n\n---\n\n> ###AngularJS\n\n>*del 5 de junio al 13 de junio* \n\n> multinacional del automóvil en **Vigo** \n\n---\n\n> ###AngularJS\n\n>*del 8 de junio al 9 de junio* \n\n> para multinacional del turismo en **Palma de Mallorca** \n\n\n---\n\n> ###NodeJS\n\n>*del 22 de mayo al 30 de mayo* \n\n> abierto al público en **Vigo** \n\n\n---\n\n> ###MEANjs\n\n>*del 18 de mayo al 28 de mayo* \n\n> para consultora informática en **Santiago de Compostela** \n\n---\n\n> ###MongoDB\n\n>*del 13 de abril al 23 de abril* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###MEANjs\n\n>*del 16 de marzo al 8 de abril* \n\n> abierto al público **on line** \n\n\n---\n\n> ###NodeJS\n\n>*del 6 de marzo al 14 de marzo* \n\n> abierto al público en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 10 de febrero al 13 de febrero* \n\n> abierto al público **on line** \n\n\n---\n\n^^^^\n\n# 2015\n\n---\n\n# 2014\n\nvvvv\n\n---\n\n> ###AngularJS\n\n>*del 21 de noviembre al 29 de noviembre* \n\n> abierto al público en **Vigo**\n\n---\n\n> ###AngularJS\n\n>*el 18 de noviembre* \n\n> universidad de **Ourense** \n\n---\n\n> ###AngularJS\n\n>*del 25 de septiembre al 10 de octubre* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 19 de septiembre al 26 de octubre* \n\n> para consultora informática en **A Coruña** \n\n---\n\n> ###AngularJS\n\n>*del 5 de julio al 6 de julio* \n\n> abierto al público **on line** \n\n---\n\n> ###AngularJS\n\n>*del 27 de junio al 5 de julio* \n\n> abierto al público en **A Coruña**\n\n\n---\n^^^\n## 2014\n\n---\n","path":"cursos.html","comments":1,"layout":"page","_id":"cjbrwpveq0007iwd3a13fc6bf","content":"<p>Calendario de <strong>cursos</strong> de formación impartidos y programados:</p><p>^^^^</p><h1 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h1><p>vvv</p><hr><blockquote><p>##Angular 2</p><p><em>del 8 al 12 de mayo</em></p><p>para universidad de <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>##Angular 2</p><p><em>del 24 al 28 de abril</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>##Angular 1.5 Avanzado</p><p><em>del 30 al 31 de marzo</em></p><p>para consultora informática en <strong>Madrid</strong></p></blockquote><hr><blockquote><p>##Angular 2</p><p><em>del 22 de febrero al 6 de abril</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://www.vitaedigital.com/proyectos-de-formacion/curso-en-abierto-de-angular2-con-typescript-y-observables-3-edicion\" target=\"_blank\" rel=\"external\">Angular 2</a></p><p><em>del 3 al 11 de febrero</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 16 al 24 de enero</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###Tecnología Web</p><p><em>el 13 de enero</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><p>^^^</p><h1 id=\"2017-1\"><a href=\"#2017-1\" class=\"headerlink\" title=\"2017\"></a>2017</h1><hr><h1 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h1><p>vvv</p><hr><blockquote><p>###<a href=\"http://www.vitaedigital.com/proyectos-de-formacion/vigo-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x-2-edicion\" target=\"_blank\" rel=\"external\">Angular2</a></p><p><em>del 12 al 20 de diciembre</em></p><p>abierto al público en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###Angular 2</p><p><em>del 28 de noviembre al 15 de diciembre</em></p><p>para consultora informática en <strong>Burgos On Line</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 21 al 24 de noviembre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 11 al 19 de noviembre</em></p><p>para consultora informática en <strong>Santiago</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular2</a></p><p><em>del 2 al 17 de noviembre</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 24 de octubre al 27 de octubre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 13 de octubre al 21 de octubre</em></p><p>para consultora informática en <strong>Madrid</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 26 de septiembre al 29 de septiembre</em></p><p>para entidad bancaria en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 26 de septiembre al 29 de septiembre</em></p><p>para entidad bancaria en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###Angular 2</p><p><em>del 15 de septiembre al 23 de septiembre</em></p><p>para empresa sector automóvil en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###Angular 2</p><p><em>del 12 de septiembre al 14 de septiembre</em></p><p>para empresa peritaje en <strong>Pontedeume</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 18 de agosto al 26 de agosto</em></p><p>para consultora informática en <strong>Madrid</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs\" target=\"_blank\" rel=\"external\">Angular2</a></p><p><em>del 10 al 18 de junio</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular2</a></p><p><em>del 9 al 22 de junio</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 18 de mayo al 6 de julio</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs\" target=\"_blank\" rel=\"external\">AngularJS</a></p><p><em>del 15 al 23 de abril</em></p><p>abierto al público en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://escuela.it/cursos/back-edge-desarrollo-web-al-limite-nodejs-es6-npm-mongodb/\" target=\"_blank\" rel=\"external\">BackEdge</a></p><p><em>del 31 de marzo al 11 de abril</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###AngularJS, Material Design</p><p><em>del 3 de marzo al 8 de marzo</em></p><p>para consultora, multinacional del automóvil y entidad bancaria en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###AngularJS, Material Design y WebAPI</p><p><em>del 22 de febrero al 29 de febrero</em></p><p>para entidad bancaria en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://vitaedigital.com/download/NTk5/Curso_de_Programacion_MEAN_FullStack_con_MongoDB_Express_AngularJS_y_NodeJS%20(3\" target=\"_blank\" rel=\"external\">MEANjs</a>.pdf)</p><p><em>del 29 de enero al 27 de febrero</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://escuela.it/cursos/front-edge-desarrollo-web-al-limite/\" target=\"_blank\" rel=\"external\">FrontEdge</a></p><p><em>del 14 de enero al 25 de enero</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><p>^^^</p><h1 id=\"2016-1\"><a href=\"#2016-1\" class=\"headerlink\" title=\"2016\"></a>2016</h1><hr><h1 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h1><p>vvv</p><h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><blockquote><p>###FrontEdge</p><p><em>del 14 de diciembre al 15 de diciembre</em></p><p>en abierto en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 13 de noviembre al 27 de noviembre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>el 10 de noviembre</em></p><p>para consultora informática en <strong>Santiago de Compostela</strong></p></blockquote><hr><blockquote><p>###Web Workers</p><p><em>el 5 de noviembre</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###Angular</p><p><em>el 20 de octubre</em></p><p>para consultora informática en <strong>Santiago de Compostela</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 14 de octubre al 2 de diciembre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 5 de octubre al 7 de octubre</em></p><p>para multinacional del turismo en <strong>Palma de Mallorca</strong></p></blockquote><hr><blockquote><p>###AngularJS y WebAPI</p><p><em>del 28 de septiembre al 1 de octubre</em></p><p>para entidad bancaria en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 25 de septiembre al 17 de octubre</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 21 de septiembre al 22 de septiembre</em></p><p>para multinacional del turismo en <strong>Palma de Mallorca</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 7 de septiembre al 8 de septiembre</em></p><p>para multinacional del turismo en <strong>Palma de Mallorca</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 26 de junio al 4 de julio</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 5 de junio al 13 de junio</em></p><p>multinacional del automóvil en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 8 de junio al 9 de junio</em></p><p>para multinacional del turismo en <strong>Palma de Mallorca</strong></p></blockquote><hr><blockquote><p>###NodeJS</p><p><em>del 22 de mayo al 30 de mayo</em></p><p>abierto al público en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 18 de mayo al 28 de mayo</em></p><p>para consultora informática en <strong>Santiago de Compostela</strong></p></blockquote><hr><blockquote><p>###MongoDB</p><p><em>del 13 de abril al 23 de abril</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 16 de marzo al 8 de abril</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###NodeJS</p><p><em>del 6 de marzo al 14 de marzo</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 10 de febrero al 13 de febrero</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><p>^^^^</p><h1 id=\"2015-1\"><a href=\"#2015-1\" class=\"headerlink\" title=\"2015\"></a>2015</h1><hr><h1 id=\"2014\"><a href=\"#2014\" class=\"headerlink\" title=\"2014\"></a>2014</h1><p>vvvv</p><hr><blockquote><p>###AngularJS</p><p><em>del 21 de noviembre al 29 de noviembre</em></p><p>abierto al público en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>el 18 de noviembre</em></p><p>universidad de <strong>Ourense</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 25 de septiembre al 10 de octubre</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 19 de septiembre al 26 de octubre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 5 de julio al 6 de julio</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 27 de junio al 5 de julio</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><p>^^^</p><h2 id=\"2014-1\"><a href=\"#2014-1\" class=\"headerlink\" title=\"2014\"></a>2014</h2><hr>","site":{"data":{}},"excerpt":"","more":"<p>Calendario de <strong>cursos</strong> de formación impartidos y programados:</p><p>^^^^</p><h1 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h1><p>vvv</p><hr><blockquote><p>##Angular 2</p><p><em>del 8 al 12 de mayo</em></p><p>para universidad de <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>##Angular 2</p><p><em>del 24 al 28 de abril</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>##Angular 1.5 Avanzado</p><p><em>del 30 al 31 de marzo</em></p><p>para consultora informática en <strong>Madrid</strong></p></blockquote><hr><blockquote><p>##Angular 2</p><p><em>del 22 de febrero al 6 de abril</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://www.vitaedigital.com/proyectos-de-formacion/curso-en-abierto-de-angular2-con-typescript-y-observables-3-edicion\" target=\"_blank\" rel=\"external\">Angular 2</a></p><p><em>del 3 al 11 de febrero</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 16 al 24 de enero</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###Tecnología Web</p><p><em>el 13 de enero</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><p>^^^</p><h1 id=\"2017-1\"><a href=\"#2017-1\" class=\"headerlink\" title=\"2017\"></a>2017</h1><hr><h1 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h1><p>vvv</p><hr><blockquote><p>###<a href=\"http://www.vitaedigital.com/proyectos-de-formacion/vigo-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x-2-edicion\" target=\"_blank\" rel=\"external\">Angular2</a></p><p><em>del 12 al 20 de diciembre</em></p><p>abierto al público en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###Angular 2</p><p><em>del 28 de noviembre al 15 de diciembre</em></p><p>para consultora informática en <strong>Burgos On Line</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 21 al 24 de noviembre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 11 al 19 de noviembre</em></p><p>para consultora informática en <strong>Santiago</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular2</a></p><p><em>del 2 al 17 de noviembre</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 24 de octubre al 27 de octubre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 13 de octubre al 21 de octubre</em></p><p>para consultora informática en <strong>Madrid</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 26 de septiembre al 29 de septiembre</em></p><p>para entidad bancaria en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 26 de septiembre al 29 de septiembre</em></p><p>para entidad bancaria en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###Angular 2</p><p><em>del 15 de septiembre al 23 de septiembre</em></p><p>para empresa sector automóvil en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###Angular 2</p><p><em>del 12 de septiembre al 14 de septiembre</em></p><p>para empresa peritaje en <strong>Pontedeume</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 18 de agosto al 26 de agosto</em></p><p>para consultora informática en <strong>Madrid</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs\" target=\"_blank\" rel=\"external\">Angular2</a></p><p><em>del 10 al 18 de junio</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular2</a></p><p><em>del 9 al 22 de junio</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 18 de mayo al 6 de julio</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://vitaedigital.com/#vigo-curso-en-abierto-de-programacion-web-profesional-con-angularjs\" target=\"_blank\" rel=\"external\">AngularJS</a></p><p><em>del 15 al 23 de abril</em></p><p>abierto al público en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://escuela.it/cursos/back-edge-desarrollo-web-al-limite-nodejs-es6-npm-mongodb/\" target=\"_blank\" rel=\"external\">BackEdge</a></p><p><em>del 31 de marzo al 11 de abril</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###AngularJS, Material Design</p><p><em>del 3 de marzo al 8 de marzo</em></p><p>para consultora, multinacional del automóvil y entidad bancaria en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###AngularJS, Material Design y WebAPI</p><p><em>del 22 de febrero al 29 de febrero</em></p><p>para entidad bancaria en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://vitaedigital.com/download/NTk5/Curso_de_Programacion_MEAN_FullStack_con_MongoDB_Express_AngularJS_y_NodeJS%20(3\" target=\"_blank\" rel=\"external\">MEANjs</a>.pdf)</p><p><em>del 29 de enero al 27 de febrero</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###<a href=\"http://escuela.it/cursos/front-edge-desarrollo-web-al-limite/\" target=\"_blank\" rel=\"external\">FrontEdge</a></p><p><em>del 14 de enero al 25 de enero</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><p>^^^</p><h1 id=\"2016-1\"><a href=\"#2016-1\" class=\"headerlink\" title=\"2016\"></a>2016</h1><hr><h1 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h1><p>vvv</p><h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><blockquote><p>###FrontEdge</p><p><em>del 14 de diciembre al 15 de diciembre</em></p><p>en abierto en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 13 de noviembre al 27 de noviembre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>el 10 de noviembre</em></p><p>para consultora informática en <strong>Santiago de Compostela</strong></p></blockquote><hr><blockquote><p>###Web Workers</p><p><em>el 5 de noviembre</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###Angular</p><p><em>el 20 de octubre</em></p><p>para consultora informática en <strong>Santiago de Compostela</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 14 de octubre al 2 de diciembre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 5 de octubre al 7 de octubre</em></p><p>para multinacional del turismo en <strong>Palma de Mallorca</strong></p></blockquote><hr><blockquote><p>###AngularJS y WebAPI</p><p><em>del 28 de septiembre al 1 de octubre</em></p><p>para entidad bancaria en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 25 de septiembre al 17 de octubre</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 21 de septiembre al 22 de septiembre</em></p><p>para multinacional del turismo en <strong>Palma de Mallorca</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 7 de septiembre al 8 de septiembre</em></p><p>para multinacional del turismo en <strong>Palma de Mallorca</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 26 de junio al 4 de julio</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 5 de junio al 13 de junio</em></p><p>multinacional del automóvil en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 8 de junio al 9 de junio</em></p><p>para multinacional del turismo en <strong>Palma de Mallorca</strong></p></blockquote><hr><blockquote><p>###NodeJS</p><p><em>del 22 de mayo al 30 de mayo</em></p><p>abierto al público en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 18 de mayo al 28 de mayo</em></p><p>para consultora informática en <strong>Santiago de Compostela</strong></p></blockquote><hr><blockquote><p>###MongoDB</p><p><em>del 13 de abril al 23 de abril</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###MEANjs</p><p><em>del 16 de marzo al 8 de abril</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###NodeJS</p><p><em>del 6 de marzo al 14 de marzo</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 10 de febrero al 13 de febrero</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><p>^^^^</p><h1 id=\"2015-1\"><a href=\"#2015-1\" class=\"headerlink\" title=\"2015\"></a>2015</h1><hr><h1 id=\"2014\"><a href=\"#2014\" class=\"headerlink\" title=\"2014\"></a>2014</h1><p>vvvv</p><hr><blockquote><p>###AngularJS</p><p><em>del 21 de noviembre al 29 de noviembre</em></p><p>abierto al público en <strong>Vigo</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>el 18 de noviembre</em></p><p>universidad de <strong>Ourense</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 25 de septiembre al 10 de octubre</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 19 de septiembre al 26 de octubre</em></p><p>para consultora informática en <strong>A Coruña</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 5 de julio al 6 de julio</em></p><p>abierto al público <strong>on line</strong></p></blockquote><hr><blockquote><p>###AngularJS</p><p><em>del 27 de junio al 5 de julio</em></p><p>abierto al público en <strong>A Coruña</strong></p></blockquote><hr><p>^^^</p><h2 id=\"2014-1\"><a href=\"#2014-1\" class=\"headerlink\" title=\"2014\"></a>2014</h2><hr>"},{"title":"Noticias Junio 2016","id":16,"updated":"2016-06-06T12:28:19.000Z","date":"2016-06-03T08:44:51.000Z","_content":"\n##06-06-16\n\n\n###Angular 2 R.C.: La evolución de la plataforma.\nAngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo ...JS. Pero la esperada versión [Angular2](http://angular.io) lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.\n\nTodo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora [es una plataforma](/angular2-primeras-impresiones/) mucho más cercana al mundo empresarial. \n\nUsa esta [serie de artículos sobre Angular2](/tag/angular2/) como tutorial para adaptarte a esta evolución.\n \n###Enlaces para aprender\n####[AngularJS] : [Mejorar el Rendimiento en una línea.]()\nParece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.\n \n####[JavaScript] : [La fatiga de frameworks comparada.]()\nEmpiezo por la consabida broma de pedir una moratoria en el desarrollo de armas... digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.\n \n####[NodeJS] : [Monitorizar aplicaciones bien y fácil.]()\nSi no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(' ;-) ').\n \n####[MongoDB] : [Rendimiento y Monitorización de MongoDB.]()\nAhora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.\n \n####[CleanCode] : [Escribe código pensando en mantenerlo.]()\nEscribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.\n \n###Próximas actividades\nEste es el mes de Angular2. Su estreno como Release Candidate permite ofrecer [formación con garantías](/promociones). Nos vemos.\n\n \n>*Keep coding, keep learning.*","source":"Noticias-Junio-2016/index.md","raw":"---\ntitle: Noticias Junio 2016\npermalink: noticias-junio-16\nid: 16\nupdated: '2016-06-06 14:28:19'\ndate: 2016-06-03 10:44:51\n---\n\n##06-06-16\n\n\n###Angular 2 R.C.: La evolución de la plataforma.\nAngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo ...JS. Pero la esperada versión [Angular2](http://angular.io) lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.\n\nTodo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora [es una plataforma](/angular2-primeras-impresiones/) mucho más cercana al mundo empresarial. \n\nUsa esta [serie de artículos sobre Angular2](/tag/angular2/) como tutorial para adaptarte a esta evolución.\n \n###Enlaces para aprender\n####[AngularJS] : [Mejorar el Rendimiento en una línea.]()\nParece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.\n \n####[JavaScript] : [La fatiga de frameworks comparada.]()\nEmpiezo por la consabida broma de pedir una moratoria en el desarrollo de armas... digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.\n \n####[NodeJS] : [Monitorizar aplicaciones bien y fácil.]()\nSi no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(' ;-) ').\n \n####[MongoDB] : [Rendimiento y Monitorización de MongoDB.]()\nAhora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.\n \n####[CleanCode] : [Escribe código pensando en mantenerlo.]()\nEscribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.\n \n###Próximas actividades\nEste es el mes de Angular2. Su estreno como Release Candidate permite ofrecer [formación con garantías](/promociones). Nos vemos.\n\n \n>*Keep coding, keep learning.*","path":"noticias-junio-16.html","comments":1,"layout":"page","_id":"cjbrwpvf60009iwd34h234mq0","content":"<p>##06-06-16</p><p>###Angular 2 R.C.: La evolución de la plataforma.<br>AngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo …JS. Pero la esperada versión <a href=\"http://angular.io\" target=\"_blank\" rel=\"external\">Angular2</a> lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.</p><p>Todo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora <a href=\"/angular2-primeras-impresiones/\">es una plataforma</a> mucho más cercana al mundo empresarial.</p><p>Usa esta <a href=\"/tag/angular2/\">serie de artículos sobre Angular2</a> como tutorial para adaptarte a esta evolución.</p><p>###Enlaces para aprender</p><p>####[AngularJS] : <a href=\"\">Mejorar el Rendimiento en una línea.</a><br>Parece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.</p><p>####[JavaScript] : <a href=\"\">La fatiga de frameworks comparada.</a><br>Empiezo por la consabida broma de pedir una moratoria en el desarrollo de armas… digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.</p><p>####[NodeJS] : <a href=\"\">Monitorizar aplicaciones bien y fácil.</a><br>Si no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(‘ ;-) ‘).</p><p>####[MongoDB] : <a href=\"\">Rendimiento y Monitorización de MongoDB.</a><br>Ahora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar las instalciones.</p><p>####[CleanCode] : <a href=\"\">Escribe código pensando en mantenerlo.</a><br>Escribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.</p><p>###Próximas actividades<br>Este es el mes de Angular2. Su estreno como Release Candidate permite ofrecer <a href=\"/promociones\">formación con garantías</a>. Nos vemos.</p><blockquote><p><em>Keep coding, keep learning.</em></p></blockquote>","site":{"data":{}},"excerpt":"","more":"<p>##06-06-16</p><p>###Angular 2 R.C.: La evolución de la plataforma.<br>AngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo …JS. Pero la esperada versión <a href=\"http://angular.io\" target=\"_blank\" rel=\"external\">Angular2</a> lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.</p><p>Todo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora <a href=\"/angular2-primeras-impresiones/\">es una plataforma</a> mucho más cercana al mundo empresarial.</p><p>Usa esta <a href=\"/tag/angular2/\">serie de artículos sobre Angular2</a> como tutorial para adaptarte a esta evolución.</p><p>###Enlaces para aprender</p><p>####[AngularJS] : <a href=\"\">Mejorar el Rendimiento en una línea.</a><br>Parece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.</p><p>####[JavaScript] : <a href=\"\">La fatiga de frameworks comparada.</a><br>Empiezo por la consabida broma de pedir una moratoria en el desarrollo de armas… digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.</p><p>####[NodeJS] : <a href=\"\">Monitorizar aplicaciones bien y fácil.</a><br>Si no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(‘ ;-) ‘).</p><p>####[MongoDB] : <a href=\"\">Rendimiento y Monitorización de MongoDB.</a><br>Ahora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar las instalciones.</p><p>####[CleanCode] : <a href=\"\">Escribe código pensando en mantenerlo.</a><br>Escribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.</p><p>###Próximas actividades<br>Este es el mes de Angular2. Su estreno como Release Candidate permite ofrecer <a href=\"/promociones\">formación con garantías</a>. Nos vemos.</p><blockquote><p><em>Keep coding, keep learning.</em></p></blockquote>"},{"title":"Promociones","id":25,"updated":"2016-05-27T06:46:03.000Z","date":"2016-05-10T11:53:10.000Z","_content":"\n#Cursos de Angular2\n\n---\n\n####Online\n\nInicio 9 de junio de 2016\n\n###[Angular 2, desarrollo de aplicaciones empresariales con HTML](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\nCon EscuelaIT\n\n\n---\n\n####Presencial en Coruña\n\nInicio 10 de junio de 2016\n\n###[A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x](http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x)\n\nCon Vitae Digital","source":"Promociones/index.md","raw":"---\ntitle: Promociones\npermalink: promociones\nid: 25\nupdated: '2016-05-27 08:46:03'\ndate: 2016-05-10 13:53:10\n---\n\n#Cursos de Angular2\n\n---\n\n####Online\n\nInicio 9 de junio de 2016\n\n###[Angular 2, desarrollo de aplicaciones empresariales con HTML](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\nCon EscuelaIT\n\n\n---\n\n####Presencial en Coruña\n\nInicio 10 de junio de 2016\n\n###[A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x](http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x)\n\nCon Vitae Digital","path":"promociones.html","comments":1,"layout":"page","_id":"cjbrwpvf6000biwd347gmrtbz","content":"<p>#Cursos de Angular2</p><hr><p>####Online</p><p>Inicio 9 de junio de 2016</p><p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular 2, desarrollo de aplicaciones empresariales con HTML</a></p><p>Con EscuelaIT</p><hr><p>####Presencial en Coruña</p><p>Inicio 10 de junio de 2016</p><p>###<a href=\"http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x\" target=\"_blank\" rel=\"external\">A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x</a></p><p>Con Vitae Digital</p>","site":{"data":{}},"excerpt":"","more":"<p>#Cursos de Angular2</p><hr><p>####Online</p><p>Inicio 9 de junio de 2016</p><p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"external\">Angular 2, desarrollo de aplicaciones empresariales con HTML</a></p><p>Con EscuelaIT</p><hr><p>####Presencial en Coruña</p><p>Inicio 10 de junio de 2016</p><p>###<a href=\"http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x\" target=\"_blank\" rel=\"external\">A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x</a></p><p>Con Vitae Digital</p>"},{"title":"[object Object]","tags":null,"_content":"","source":"scaffolds/draft.md","raw":"---\ntitle: {{ title }}\ntags:\n---\n","date":"2017-10-31T10:46:44.448Z","updated":"2017-10-31T10:46:44.448Z","path":"scaffolds/draft.html","comments":1,"layout":"page","_id":"cjbrwpvfm000giwd3958tc4f1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[object Object]","date":"2017-10-31T10:46:44.450Z","_content":"","source":"scaffolds/page.md","raw":"---\ntitle: {{ title }}\ndate: {{ date }}\n---\n","updated":"2017-10-31T10:46:44.450Z","path":"scaffolds/page.html","comments":1,"layout":"page","_id":"cjbrwpvfm000iiwd32lu7qa1q","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[object Object]","date":"2017-10-31T10:46:44.452Z","tags":null,"_content":"","source":"scaffolds/post.md","raw":"---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n","updated":"2017-10-31T10:46:44.452Z","path":"scaffolds/post.html","comments":1,"layout":"page","_id":"cjbrwpvg1000niwd3jdr69x21","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"7 formas de incluir Bootstrap en nuestro proyecto","id":"6","updated":"2015-11-12T15:55:15.000Z","date":"2015-11-12T14:40:12.000Z","_content":"\n### 1- Descargando los archivos\n\nHaz clic en el botón **\"Download Bootstrap\"** y se descargará una carpeta comprimida, al descomprimirla te encontrarás las versiones compiladas y minificadas de Bootstrap así como los iconos que utiliza:\n\n```\nbootstrap/\n├── css/\n│   ├── bootstrap.css\n│   ├── bootstrap.css.map\n│   ├── bootstrap.min.css\n│   ├── bootstrap.min.css.map\n│   ├── bootstrap-theme.css\n│   ├── bootstrap-theme.css.map\n│   ├── bootstrap-theme.min.css\n│   └── bootstrap-theme.min.css.map\n├── js/\n│   ├── bootstrap.js\n│   └── bootstrap.min.js\n└── fonts/\n    ├── glyphicons-halflings-regular.eot\n    ├── glyphicons-halflings-regular.svg\n    ├── glyphicons-halflings-regular.ttf\n    ├── glyphicons-halflings-regular.woff\n    └── glyphicons-halflings-regular.woff2\n\n```\n\n\n\n### 2- Para usuarios de GitHub\n\nBootstrap es un proyecto en código abierto así que puedes **clonar** o hacer **fork** desde [GitHub](https://github.com/twbs/bootstrap)\n\n### 3- Código fuente original\n\nLo obtienes al hacer clic en el botón **\"Download source\"**. Lo que obtienes son los archivos **LESS** y **Javascript** originales. Esta opción requiere **Grunt** y **Node.js** y se estructura dentro de la siguiente manera:\n\n```\nbootstrap/\n├── less/\n├── js/\n├── fonts/\n├── dist/\n│   ├── css/\n│   ├── js/\n│   └── fonts/\n└── docs/\n    └── examples/\n```\n### 4- Fans de Bower\n\nSi tenemos **Git** y **Bower** instalado simplemente debes teclear en tu terminal:\n\n```\n$ bower install bootstrap\n```\n\nY el pajarito hará todo el trabajo.\n\n### 5- NPM Install\n\nTan fácil como con Bower solo que esta vez debes teclear en tu terminal:\n\n```\n$ npm install bootstrap\n```\n\n### 6- Versión en SASS\n\nA pesar de que **Bootstrap 3 fue escrito en LESS** (aspecto que cambiará en la versión 4, que será en SASS), existe una versión para SASS que puedes descargar en el botón **\"Download SASS\"** para facilitar su inclusión en proyectos en **Rails**, **Compass** o solo **SASS**.\n\n### 7- CDN\n\nPor último, si no quieres descargarte nada puedes utilizar los links del proveedor de **CDN** y referenciarlos en tu HTML:\n\n```html\n<!-- CSS -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" integrity=\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\" crossorigin=\"anonymous\">\n\n<!-- Tema opcional -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\" integrity=\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\" crossorigin=\"anonymous\">\n\n<!-- JavaScript -->\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\" integrity=\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\" crossorigin=\"anonymous\"></script>\n```\n\nEsta es la manera más fácil pero no podrás trabajar sin conexión a internet.\n\n\n\n\n","source":"_posts/7-formas-de-incluir-Bootstrap-en-nuestro-proyecto.md","raw":"---\ntitle: 7 formas de incluir Bootstrap en nuestro proyecto\ntags:  \n- Bootstrap\ncategories:\n- Introducción \npermalink: formas\nid: 6\nupdated: 2015/11/12 16:55:15\ndate: 2015/11/12 15:40:12\n---\n\n### 1- Descargando los archivos\n\nHaz clic en el botón **\"Download Bootstrap\"** y se descargará una carpeta comprimida, al descomprimirla te encontrarás las versiones compiladas y minificadas de Bootstrap así como los iconos que utiliza:\n\n```\nbootstrap/\n├── css/\n│   ├── bootstrap.css\n│   ├── bootstrap.css.map\n│   ├── bootstrap.min.css\n│   ├── bootstrap.min.css.map\n│   ├── bootstrap-theme.css\n│   ├── bootstrap-theme.css.map\n│   ├── bootstrap-theme.min.css\n│   └── bootstrap-theme.min.css.map\n├── js/\n│   ├── bootstrap.js\n│   └── bootstrap.min.js\n└── fonts/\n    ├── glyphicons-halflings-regular.eot\n    ├── glyphicons-halflings-regular.svg\n    ├── glyphicons-halflings-regular.ttf\n    ├── glyphicons-halflings-regular.woff\n    └── glyphicons-halflings-regular.woff2\n\n```\n\n\n\n### 2- Para usuarios de GitHub\n\nBootstrap es un proyecto en código abierto así que puedes **clonar** o hacer **fork** desde [GitHub](https://github.com/twbs/bootstrap)\n\n### 3- Código fuente original\n\nLo obtienes al hacer clic en el botón **\"Download source\"**. Lo que obtienes son los archivos **LESS** y **Javascript** originales. Esta opción requiere **Grunt** y **Node.js** y se estructura dentro de la siguiente manera:\n\n```\nbootstrap/\n├── less/\n├── js/\n├── fonts/\n├── dist/\n│   ├── css/\n│   ├── js/\n│   └── fonts/\n└── docs/\n    └── examples/\n```\n### 4- Fans de Bower\n\nSi tenemos **Git** y **Bower** instalado simplemente debes teclear en tu terminal:\n\n```\n$ bower install bootstrap\n```\n\nY el pajarito hará todo el trabajo.\n\n### 5- NPM Install\n\nTan fácil como con Bower solo que esta vez debes teclear en tu terminal:\n\n```\n$ npm install bootstrap\n```\n\n### 6- Versión en SASS\n\nA pesar de que **Bootstrap 3 fue escrito en LESS** (aspecto que cambiará en la versión 4, que será en SASS), existe una versión para SASS que puedes descargar en el botón **\"Download SASS\"** para facilitar su inclusión en proyectos en **Rails**, **Compass** o solo **SASS**.\n\n### 7- CDN\n\nPor último, si no quieres descargarte nada puedes utilizar los links del proveedor de **CDN** y referenciarlos en tu HTML:\n\n```html\n<!-- CSS -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" integrity=\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\" crossorigin=\"anonymous\">\n\n<!-- Tema opcional -->\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\" integrity=\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\" crossorigin=\"anonymous\">\n\n<!-- JavaScript -->\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\" integrity=\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\" crossorigin=\"anonymous\"></script>\n```\n\nEsta es la manera más fácil pero no podrás trabajar sin conexión a internet.\n\n\n\n\n","slug":"formas","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvdb0002iwd3s3hm2ey2","content":"<h3 id=\"1-Descargando-los-archivos\"><a href=\"#1-Descargando-los-archivos\" class=\"headerlink\" title=\"1- Descargando los archivos\"></a>1- Descargando los archivos</h3><p>Haz clic en el botón <strong>“Download Bootstrap”</strong> y se descargará una carpeta comprimida, al descomprimirla te encontrarás las versiones compiladas y minificadas de Bootstrap así como los iconos que utiliza:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">bootstrap/</div><div class=\"line\">├── css/</div><div class=\"line\">│   ├── bootstrap.css</div><div class=\"line\">│   ├── bootstrap.css.map</div><div class=\"line\">│   ├── bootstrap.min.css</div><div class=\"line\">│   ├── bootstrap.min.css.map</div><div class=\"line\">│   ├── bootstrap-theme.css</div><div class=\"line\">│   ├── bootstrap-theme.css.map</div><div class=\"line\">│   ├── bootstrap-theme.min.css</div><div class=\"line\">│   └── bootstrap-theme.min.css.map</div><div class=\"line\">├── js/</div><div class=\"line\">│   ├── bootstrap.js</div><div class=\"line\">│   └── bootstrap.min.js</div><div class=\"line\">└── fonts/</div><div class=\"line\">    ├── glyphicons-halflings-regular.eot</div><div class=\"line\">    ├── glyphicons-halflings-regular.svg</div><div class=\"line\">    ├── glyphicons-halflings-regular.ttf</div><div class=\"line\">    ├── glyphicons-halflings-regular.woff</div><div class=\"line\">    └── glyphicons-halflings-regular.woff2</div></pre></td></tr></table></figure><h3 id=\"2-Para-usuarios-de-GitHub\"><a href=\"#2-Para-usuarios-de-GitHub\" class=\"headerlink\" title=\"2- Para usuarios de GitHub\"></a>2- Para usuarios de GitHub</h3><p>Bootstrap es un proyecto en código abierto así que puedes <strong>clonar</strong> o hacer <strong>fork</strong> desde <a href=\"https://github.com/twbs/bootstrap\" target=\"_blank\" rel=\"external\">GitHub</a></p><h3 id=\"3-Codigo-fuente-original\"><a href=\"#3-Codigo-fuente-original\" class=\"headerlink\" title=\"3- Código fuente original\"></a>3- Código fuente original</h3><p>Lo obtienes al hacer clic en el botón <strong>“Download source”</strong>. Lo que obtienes son los archivos <strong>LESS</strong> y <strong>Javascript</strong> originales. Esta opción requiere <strong>Grunt</strong> y <strong>Node.js</strong> y se estructura dentro de la siguiente manera:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">bootstrap/</div><div class=\"line\">├── less/</div><div class=\"line\">├── js/</div><div class=\"line\">├── fonts/</div><div class=\"line\">├── dist/</div><div class=\"line\">│   ├── css/</div><div class=\"line\">│   ├── js/</div><div class=\"line\">│   └── fonts/</div><div class=\"line\">└── docs/</div><div class=\"line\">    └── examples/</div></pre></td></tr></table></figure><h3 id=\"4-Fans-de-Bower\"><a href=\"#4-Fans-de-Bower\" class=\"headerlink\" title=\"4- Fans de Bower\"></a>4- Fans de Bower</h3><p>Si tenemos <strong>Git</strong> y <strong>Bower</strong> instalado simplemente debes teclear en tu terminal:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ bower install bootstrap</div></pre></td></tr></table></figure><p>Y el pajarito hará todo el trabajo.</p><h3 id=\"5-NPM-Install\"><a href=\"#5-NPM-Install\" class=\"headerlink\" title=\"5- NPM Install\"></a>5- NPM Install</h3><p>Tan fácil como con Bower solo que esta vez debes teclear en tu terminal:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install bootstrap</div></pre></td></tr></table></figure><h3 id=\"6-Version-en-SASS\"><a href=\"#6-Version-en-SASS\" class=\"headerlink\" title=\"6- Versión en SASS\"></a>6- Versión en SASS</h3><p>A pesar de que <strong>Bootstrap 3 fue escrito en LESS</strong> (aspecto que cambiará en la versión 4, que será en SASS), existe una versión para SASS que puedes descargar en el botón <strong>“Download SASS”</strong> para facilitar su inclusión en proyectos en <strong>Rails</strong>, <strong>Compass</strong> o solo <strong>SASS</strong>.</p><h3 id=\"7-CDN\"><a href=\"#7-CDN\" class=\"headerlink\" title=\"7- CDN\"></a>7- CDN</h3><p>Por último, si no quieres descargarte nada puedes utilizar los links del proveedor de <strong>CDN</strong> y referenciarlos en tu HTML:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- CSS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Tema opcional --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- JavaScript --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><p>Esta es la manera más fácil pero no podrás trabajar sin conexión a internet.</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Descargando-los-archivos\"><a href=\"#1-Descargando-los-archivos\" class=\"headerlink\" title=\"1- Descargando los archivos\"></a>1- Descargando los archivos</h3><p>Haz clic en el botón <strong>“Download Bootstrap”</strong> y se descargará una carpeta comprimida, al descomprimirla te encontrarás las versiones compiladas y minificadas de Bootstrap así como los iconos que utiliza:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">bootstrap/</div><div class=\"line\">├── css/</div><div class=\"line\">│   ├── bootstrap.css</div><div class=\"line\">│   ├── bootstrap.css.map</div><div class=\"line\">│   ├── bootstrap.min.css</div><div class=\"line\">│   ├── bootstrap.min.css.map</div><div class=\"line\">│   ├── bootstrap-theme.css</div><div class=\"line\">│   ├── bootstrap-theme.css.map</div><div class=\"line\">│   ├── bootstrap-theme.min.css</div><div class=\"line\">│   └── bootstrap-theme.min.css.map</div><div class=\"line\">├── js/</div><div class=\"line\">│   ├── bootstrap.js</div><div class=\"line\">│   └── bootstrap.min.js</div><div class=\"line\">└── fonts/</div><div class=\"line\">    ├── glyphicons-halflings-regular.eot</div><div class=\"line\">    ├── glyphicons-halflings-regular.svg</div><div class=\"line\">    ├── glyphicons-halflings-regular.ttf</div><div class=\"line\">    ├── glyphicons-halflings-regular.woff</div><div class=\"line\">    └── glyphicons-halflings-regular.woff2</div></pre></td></tr></table></figure><h3 id=\"2-Para-usuarios-de-GitHub\"><a href=\"#2-Para-usuarios-de-GitHub\" class=\"headerlink\" title=\"2- Para usuarios de GitHub\"></a>2- Para usuarios de GitHub</h3><p>Bootstrap es un proyecto en código abierto así que puedes <strong>clonar</strong> o hacer <strong>fork</strong> desde <a href=\"https://github.com/twbs/bootstrap\" target=\"_blank\" rel=\"external\">GitHub</a></p><h3 id=\"3-Codigo-fuente-original\"><a href=\"#3-Codigo-fuente-original\" class=\"headerlink\" title=\"3- Código fuente original\"></a>3- Código fuente original</h3><p>Lo obtienes al hacer clic en el botón <strong>“Download source”</strong>. Lo que obtienes son los archivos <strong>LESS</strong> y <strong>Javascript</strong> originales. Esta opción requiere <strong>Grunt</strong> y <strong>Node.js</strong> y se estructura dentro de la siguiente manera:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">bootstrap/</div><div class=\"line\">├── less/</div><div class=\"line\">├── js/</div><div class=\"line\">├── fonts/</div><div class=\"line\">├── dist/</div><div class=\"line\">│   ├── css/</div><div class=\"line\">│   ├── js/</div><div class=\"line\">│   └── fonts/</div><div class=\"line\">└── docs/</div><div class=\"line\">    └── examples/</div></pre></td></tr></table></figure><h3 id=\"4-Fans-de-Bower\"><a href=\"#4-Fans-de-Bower\" class=\"headerlink\" title=\"4- Fans de Bower\"></a>4- Fans de Bower</h3><p>Si tenemos <strong>Git</strong> y <strong>Bower</strong> instalado simplemente debes teclear en tu terminal:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ bower install bootstrap</div></pre></td></tr></table></figure><p>Y el pajarito hará todo el trabajo.</p><h3 id=\"5-NPM-Install\"><a href=\"#5-NPM-Install\" class=\"headerlink\" title=\"5- NPM Install\"></a>5- NPM Install</h3><p>Tan fácil como con Bower solo que esta vez debes teclear en tu terminal:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install bootstrap</div></pre></td></tr></table></figure><h3 id=\"6-Version-en-SASS\"><a href=\"#6-Version-en-SASS\" class=\"headerlink\" title=\"6- Versión en SASS\"></a>6- Versión en SASS</h3><p>A pesar de que <strong>Bootstrap 3 fue escrito en LESS</strong> (aspecto que cambiará en la versión 4, que será en SASS), existe una versión para SASS que puedes descargar en el botón <strong>“Download SASS”</strong> para facilitar su inclusión en proyectos en <strong>Rails</strong>, <strong>Compass</strong> o solo <strong>SASS</strong>.</p><h3 id=\"7-CDN\"><a href=\"#7-CDN\" class=\"headerlink\" title=\"7- CDN\"></a>7- CDN</h3><p>Por último, si no quieres descargarte nada puedes utilizar los links del proveedor de <strong>CDN</strong> y referenciarlos en tu HTML:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- CSS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Tema opcional --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- JavaScript --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"</span> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><p>Esta es la manera más fácil pero no podrás trabajar sin conexión a internet.</p>"},{"title":"Código de ejemplo curso de Angular2","id":"22","updated":"2016-10-10T06:10:33.000Z","date":"2016-09-21T06:37:13.000Z","thumbnail":"/css/images/angular.jpg","_content":"\nEnlace a los repositorios con el código de ejemplo para los cursos de **Angular2** :\n\n<!-- more -->\n\n### 2.0 cli\n[AcademiaBinaria/angular2](https://github.com/AcademiaBinaria/angular2)\n\nEste proyecto es un *work in progress*.\n\nEstá basado en el generador [Angular-CLI](https://github.com/angular/angular-cli), el más adecuado para aplicaciones reales \n\n### RC6 Seed\n[AcademiaBinaria/angular2-RC6](https://github.com/AcademiaBinaria/angular2-RC6)\n\nAunque es para la `RC6` el código es perfectamente *compatible con la versión estable*.\n\nEstá basado en el proyecto [Angular2-Seed](https://github.com/angular/angular2-seed), que es más sencillo que el CLI para empezar. ","source":"_posts/Codigo-de-ejemplo-curso-de-Angular2.md","raw":"---\ntitle: Código de ejemplo curso de Angular2\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: codigo-de-ejemplo-curso-de-angular2\nid: 22\nupdated: '2016-10-10 08:10:33'\ndate: 2016-09-21 08:37:13\nthumbnail: /css/images/angular.jpg\n---\n\nEnlace a los repositorios con el código de ejemplo para los cursos de **Angular2** :\n\n<!-- more -->\n\n### 2.0 cli\n[AcademiaBinaria/angular2](https://github.com/AcademiaBinaria/angular2)\n\nEste proyecto es un *work in progress*.\n\nEstá basado en el generador [Angular-CLI](https://github.com/angular/angular-cli), el más adecuado para aplicaciones reales \n\n### RC6 Seed\n[AcademiaBinaria/angular2-RC6](https://github.com/AcademiaBinaria/angular2-RC6)\n\nAunque es para la `RC6` el código es perfectamente *compatible con la versión estable*.\n\nEstá basado en el proyecto [Angular2-Seed](https://github.com/angular/angular2-seed), que es más sencillo que el CLI para empezar. ","slug":"codigo-de-ejemplo-curso-de-angular2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvee0004iwd33m6qo4qf","content":"<p>Enlace a los repositorios con el código de ejemplo para los cursos de <strong>Angular2</strong> :</p><a id=\"more\"></a><h3 id=\"2-0-cli\"><a href=\"#2-0-cli\" class=\"headerlink\" title=\"2.0 cli\"></a>2.0 cli</h3><p><a href=\"https://github.com/AcademiaBinaria/angular2\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular2</a></p><p>Este proyecto es un <em>work in progress</em>.</p><p>Está basado en el generador <a href=\"https://github.com/angular/angular-cli\" target=\"_blank\" rel=\"external\">Angular-CLI</a>, el más adecuado para aplicaciones reales</p><h3 id=\"RC6-Seed\"><a href=\"#RC6-Seed\" class=\"headerlink\" title=\"RC6 Seed\"></a>RC6 Seed</h3><p><a href=\"https://github.com/AcademiaBinaria/angular2-RC6\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular2-RC6</a></p><p>Aunque es para la <code>RC6</code> el código es perfectamente <em>compatible con la versión estable</em>.</p><p>Está basado en el proyecto <a href=\"https://github.com/angular/angular2-seed\" target=\"_blank\" rel=\"external\">Angular2-Seed</a>, que es más sencillo que el CLI para empezar.</p>","site":{"data":{}},"excerpt":"<p>Enlace a los repositorios con el código de ejemplo para los cursos de <strong>Angular2</strong> :</p>","more":"<h3 id=\"2-0-cli\"><a href=\"#2-0-cli\" class=\"headerlink\" title=\"2.0 cli\"></a>2.0 cli</h3><p><a href=\"https://github.com/AcademiaBinaria/angular2\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular2</a></p><p>Este proyecto es un <em>work in progress</em>.</p><p>Está basado en el generador <a href=\"https://github.com/angular/angular-cli\" target=\"_blank\" rel=\"external\">Angular-CLI</a>, el más adecuado para aplicaciones reales</p><h3 id=\"RC6-Seed\"><a href=\"#RC6-Seed\" class=\"headerlink\" title=\"RC6 Seed\"></a>RC6 Seed</h3><p><a href=\"https://github.com/AcademiaBinaria/angular2-RC6\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular2-RC6</a></p><p>Aunque es para la <code>RC6</code> el código es perfectamente <em>compatible con la versión estable</em>.</p><p>Está basado en el proyecto <a href=\"https://github.com/angular/angular2-seed\" target=\"_blank\" rel=\"external\">Angular2-Seed</a>, que es más sencillo que el CLI para empezar.</p>"},{"title":"Angular2 DI: Inyección de dependencias","id":"14","updated":"2016-11-10T13:52:13.000Z","date":"2016-05-30T09:09:09.000Z","_content":"\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/)\n\n---\n\n>Código asociado en [angular2/4-injection/](https://github.com/AcademiaBinaria/angular2/tree/master/4-injection)\n\nAngularJS2 tiene vocación de *framework* para grandes aplicaciones de negocio. Los grandes desarrollos requieren **modularidad en el código**. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón *[Dependency Injection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias)*. \n\nLos cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer **aplicaciones de negocio con HTML y JavaScript** de manera controlable.\n\n<!-- more -->\n\n## Módulos, componentes y servicios\nEn AngularJS 1 teníamos muy presente el concepto de **módulo**. Rara era la aplicación que no comenzase con el mítico `angular.module('miAplicacion')`. Dada la carencia de un sistema modular nativo en *JavaScript*, AngularJS nos proveía de uno propio. \n\nHoy en día se nos sugiere que usemos las versiones avanzadas de *JS*, o mejor aún *TypeScript*. Estos lenguajes nos ofrecen las instrucciones `export` e `import` que permiten definir **módulos estancos en ficheros** independientes. Nunca más el engorroso envolvimiento *IIFE* `(function () { … }())`.\n\nA partir de ahí es el programador el que selectivamente **exporta funcionalidad que importará para ser consumida** mas tarde. De este modo, Angular se desentiende de la creación de módulos de código y se centra en la comunicación entre los objetos que componen la aplicación.\n\n\n### Componentes\nSon los bloques de construcción agrupables en compuestos que forman la interfaz visual de una aplicación. Encapsulan **la vista, los datos y la lógica** para interactuar con el usuario. \n\nNi la vista ni la lógica deben crecer y realizar tareas que no sean de su exclusiva capa de responsabilidad. Esas tareas debe ser delegadas en otros objetos. \n\n> Modelo de composición de componentes visuales para crear vistas complejas. La comunicación o [Data Flow](../databinding-el-flujo-de-datos-de-angular2/) se realiza de manera declarativa. Enviando datos a las propiedades de los hijos y esperando eventos con respuestas.\n\n![Composición mediante componentes](/images/ng2-Component-DataFlow.jpg)\n\n### Servicios\nLos servicios serán **objetos especializados y reutilizables** por otros servicios y componentes. En su definición debes aplicar los mismos principios de arquitectura de software que ya conoces y aplicas en *lenguajes clásicos tipo Java o C#.net*.\n\nLa sintaxis de la comunicación involucra varios bloques en ambos lados del canal: \n\n- la definición del servicio decorado como `@Injectable()` en el proveedor, \n- la exportación en el proveedor y la importación en el consumidor, \n- el registro en el array `providers:[]` del componente consumidor (o mejor del módulo) conumidor y \n- el consumo en el constructor del componente o servicio consumidor.\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\nimport { MovimientosService, Movimiento } from '../shared/';\n@Component({\n  selector: 'movimiento',\n  templateUrl: 'movimiento.component.html',\n  providers: [MovimientosService] \n})\nexport class MovimientoComponent {\n  movimiento: Movimiento\n  constructor(public movimientosService: MovimientosService) { }\n  guardarMovimiento() {\n    this.movimientosService.guardarMovimiento(this.movimiento)\n  }\n}\n```\n\n![Inyección de servicios en componentes ](/images/ng2-DI-component-service.jpg)\n\n### Directivas\nLas directivas eran el ADN de AngularJS1. Ahora han mutado en **componentes reutilizables** como elementos en las vistas de otros componentes de rango superior. Pero la idea es la misma, desglosar las plantillas de HTML en bloques con un propósito único. \n\nLa sintaxis de las directivas es similar: \n\n- la definición del servicio decorado como `@Injectable()` en el componente hijo, \n- la exportación del hijo y la importación en el padre, \n- el registro en el array `directives:[]` del componente padre (o del módulo padre) y \n- el consumo declarativo en la plantilla de la vista padre.\n\n```javascript\nimport { Component } from '@angular/core';\nimport { MovimientoComponent } from './movimiento';\n@Component({\n  selector: 'injection-app',\n  template: '<h1>\n              {{titulo}}\n            </h1>\n            <movimiento></movimiento>',\n  directives:[MovimientoComponent]\n})\nexport class InjectionAppComponent {\n  titulo = 'Inyectores listos!';\n}\n```\n![Inyección de directivas en componentes](/images/ng2-DI-component-directive.jpg)\n\n## Registro\n\nLa inyección de las dependencias **funciona de manera jerárquica** en AngularJS 2. Cuando un módulo registra una dependencia la pone a disposición de todos sus componentes hijos. Es más, si algún hijo la volviese a registrar se le proveería de otra instancia. \n\nEsta copia puede provocar efectos colaterales indeseados. Para **compartir datos** o ahorrar memoria se recomienda registrar las dependencias lo más arriba posible. Esto siempre sin sacrificar la modularidad o la escalabilidad de aplicaciones que requieran *lazy loading*.\n\n> Atención a la copia de *routeService* que se registra por segunda vez. No importa que ya la haya registrado su padre. Otro registro implica otra instancia.\n\n![Jerarquía de dependencias en AngularJS](/images/ng2-Arbol-de-dependencias.jpg)\n\nPara ciertos casos, AngularJS 2 permite modelos de inyección más avanzados. Mediante el uso de **factorías y el registro de cadenas** con los nombres de los servicios facilita la inyección a voluntad o la carga diferida.\n\n>Algunas de estas posibilidades están siendo retocadas durante la actual *Release Candidate*, y se esperan cambios de cara a las próxima versión estable.\n\nEl viejo principio de *divide y vencerás* se aplica rotundamente en las aplicaciones Angular 2. Si creas **módulos reutilizables** estarás sentando las bases para crear grandes aplicaciones de negocio con AngularJS.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/)","source":"_posts/Angular2-DI-Inyeccion-de-dependencias.md","raw":"---\ntitle: 'Angular2 DI: Inyección de dependencias'\ntags:  \n- Angular2\n- DI\n- Tutorial\ncategories:\n- Introducción \npermalink: angular2-di-inyeccion-de-dependencias\nid: 14\nupdated: 2016/11/10 14:52:13\ndate: 2016/05/30 11:09:09\n---\n\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/)\n\n---\n\n>Código asociado en [angular2/4-injection/](https://github.com/AcademiaBinaria/angular2/tree/master/4-injection)\n\nAngularJS2 tiene vocación de *framework* para grandes aplicaciones de negocio. Los grandes desarrollos requieren **modularidad en el código**. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón *[Dependency Injection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias)*. \n\nLos cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer **aplicaciones de negocio con HTML y JavaScript** de manera controlable.\n\n<!-- more -->\n\n## Módulos, componentes y servicios\nEn AngularJS 1 teníamos muy presente el concepto de **módulo**. Rara era la aplicación que no comenzase con el mítico `angular.module('miAplicacion')`. Dada la carencia de un sistema modular nativo en *JavaScript*, AngularJS nos proveía de uno propio. \n\nHoy en día se nos sugiere que usemos las versiones avanzadas de *JS*, o mejor aún *TypeScript*. Estos lenguajes nos ofrecen las instrucciones `export` e `import` que permiten definir **módulos estancos en ficheros** independientes. Nunca más el engorroso envolvimiento *IIFE* `(function () { … }())`.\n\nA partir de ahí es el programador el que selectivamente **exporta funcionalidad que importará para ser consumida** mas tarde. De este modo, Angular se desentiende de la creación de módulos de código y se centra en la comunicación entre los objetos que componen la aplicación.\n\n\n### Componentes\nSon los bloques de construcción agrupables en compuestos que forman la interfaz visual de una aplicación. Encapsulan **la vista, los datos y la lógica** para interactuar con el usuario. \n\nNi la vista ni la lógica deben crecer y realizar tareas que no sean de su exclusiva capa de responsabilidad. Esas tareas debe ser delegadas en otros objetos. \n\n> Modelo de composición de componentes visuales para crear vistas complejas. La comunicación o [Data Flow](../databinding-el-flujo-de-datos-de-angular2/) se realiza de manera declarativa. Enviando datos a las propiedades de los hijos y esperando eventos con respuestas.\n\n![Composición mediante componentes](/images/ng2-Component-DataFlow.jpg)\n\n### Servicios\nLos servicios serán **objetos especializados y reutilizables** por otros servicios y componentes. En su definición debes aplicar los mismos principios de arquitectura de software que ya conoces y aplicas en *lenguajes clásicos tipo Java o C#.net*.\n\nLa sintaxis de la comunicación involucra varios bloques en ambos lados del canal: \n\n- la definición del servicio decorado como `@Injectable()` en el proveedor, \n- la exportación en el proveedor y la importación en el consumidor, \n- el registro en el array `providers:[]` del componente consumidor (o mejor del módulo) conumidor y \n- el consumo en el constructor del componente o servicio consumidor.\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\nimport { MovimientosService, Movimiento } from '../shared/';\n@Component({\n  selector: 'movimiento',\n  templateUrl: 'movimiento.component.html',\n  providers: [MovimientosService] \n})\nexport class MovimientoComponent {\n  movimiento: Movimiento\n  constructor(public movimientosService: MovimientosService) { }\n  guardarMovimiento() {\n    this.movimientosService.guardarMovimiento(this.movimiento)\n  }\n}\n```\n\n![Inyección de servicios en componentes ](/images/ng2-DI-component-service.jpg)\n\n### Directivas\nLas directivas eran el ADN de AngularJS1. Ahora han mutado en **componentes reutilizables** como elementos en las vistas de otros componentes de rango superior. Pero la idea es la misma, desglosar las plantillas de HTML en bloques con un propósito único. \n\nLa sintaxis de las directivas es similar: \n\n- la definición del servicio decorado como `@Injectable()` en el componente hijo, \n- la exportación del hijo y la importación en el padre, \n- el registro en el array `directives:[]` del componente padre (o del módulo padre) y \n- el consumo declarativo en la plantilla de la vista padre.\n\n```javascript\nimport { Component } from '@angular/core';\nimport { MovimientoComponent } from './movimiento';\n@Component({\n  selector: 'injection-app',\n  template: '<h1>\n              {{titulo}}\n            </h1>\n            <movimiento></movimiento>',\n  directives:[MovimientoComponent]\n})\nexport class InjectionAppComponent {\n  titulo = 'Inyectores listos!';\n}\n```\n![Inyección de directivas en componentes](/images/ng2-DI-component-directive.jpg)\n\n## Registro\n\nLa inyección de las dependencias **funciona de manera jerárquica** en AngularJS 2. Cuando un módulo registra una dependencia la pone a disposición de todos sus componentes hijos. Es más, si algún hijo la volviese a registrar se le proveería de otra instancia. \n\nEsta copia puede provocar efectos colaterales indeseados. Para **compartir datos** o ahorrar memoria se recomienda registrar las dependencias lo más arriba posible. Esto siempre sin sacrificar la modularidad o la escalabilidad de aplicaciones que requieran *lazy loading*.\n\n> Atención a la copia de *routeService* que se registra por segunda vez. No importa que ya la haya registrado su padre. Otro registro implica otra instancia.\n\n![Jerarquía de dependencias en AngularJS](/images/ng2-Arbol-de-dependencias.jpg)\n\nPara ciertos casos, AngularJS 2 permite modelos de inyección más avanzados. Mediante el uso de **factorías y el registro de cadenas** con los nombres de los servicios facilita la inyección a voluntad o la carga diferida.\n\n>Algunas de estas posibilidades están siendo retocadas durante la actual *Release Candidate*, y se esperan cambios de cara a las próxima versión estable.\n\nEl viejo principio de *divide y vencerás* se aplica rotundamente en las aplicaciones Angular 2. Si creas **módulos reutilizables** estarás sentando las bases para crear grandes aplicaciones de negocio con AngularJS.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/)","slug":"angular2-di-inyeccion-de-dependencias","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpveq0008iwd321bv9dux","content":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a></p></blockquote><hr><blockquote><p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/4-injection\" target=\"_blank\" rel=\"external\">angular2/4-injection/</a></p></blockquote><p>AngularJS2 tiene vocación de <em>framework</em> para grandes aplicaciones de negocio. Los grandes desarrollos requieren <strong>modularidad en el código</strong>. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón <em><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\" target=\"_blank\" rel=\"external\">Dependency Injection</a></em>.</p><p>Los cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer <strong>aplicaciones de negocio con HTML y JavaScript</strong> de manera controlable.</p><a id=\"more\"></a><h2 id=\"Modulos-componentes-y-servicios\"><a href=\"#Modulos-componentes-y-servicios\" class=\"headerlink\" title=\"Módulos, componentes y servicios\"></a>Módulos, componentes y servicios</h2><p>En AngularJS 1 teníamos muy presente el concepto de <strong>módulo</strong>. Rara era la aplicación que no comenzase con el mítico <code>angular.module(&#39;miAplicacion&#39;)</code>. Dada la carencia de un sistema modular nativo en <em>JavaScript</em>, AngularJS nos proveía de uno propio.</p><p>Hoy en día se nos sugiere que usemos las versiones avanzadas de <em>JS</em>, o mejor aún <em>TypeScript</em>. Estos lenguajes nos ofrecen las instrucciones <code>export</code> e <code>import</code> que permiten definir <strong>módulos estancos en ficheros</strong> independientes. Nunca más el engorroso envolvimiento <em>IIFE</em> <code>(function () { … }())</code>.</p><p>A partir de ahí es el programador el que selectivamente <strong>exporta funcionalidad que importará para ser consumida</strong> mas tarde. De este modo, Angular se desentiende de la creación de módulos de código y se centra en la comunicación entre los objetos que componen la aplicación.</p><h3 id=\"Componentes\"><a href=\"#Componentes\" class=\"headerlink\" title=\"Componentes\"></a>Componentes</h3><p>Son los bloques de construcción agrupables en compuestos que forman la interfaz visual de una aplicación. Encapsulan <strong>la vista, los datos y la lógica</strong> para interactuar con el usuario.</p><p>Ni la vista ni la lógica deben crecer y realizar tareas que no sean de su exclusiva capa de responsabilidad. Esas tareas debe ser delegadas en otros objetos.</p><blockquote><p>Modelo de composición de componentes visuales para crear vistas complejas. La comunicación o <a href=\"../databinding-el-flujo-de-datos-de-angular2/\">Data Flow</a> se realiza de manera declarativa. Enviando datos a las propiedades de los hijos y esperando eventos con respuestas.</p></blockquote><p><img src=\"/images/ng2-Component-DataFlow.jpg\" alt=\"Composición mediante componentes\"></p><h3 id=\"Servicios\"><a href=\"#Servicios\" class=\"headerlink\" title=\"Servicios\"></a>Servicios</h3><p>Los servicios serán <strong>objetos especializados y reutilizables</strong> por otros servicios y componentes. En su definición debes aplicar los mismos principios de arquitectura de software que ya conoces y aplicas en <em>lenguajes clásicos tipo Java o C#.net</em>.</p><p>La sintaxis de la comunicación involucra varios bloques en ambos lados del canal:</p><ul><li>la definición del servicio decorado como <code>@Injectable()</code> en el proveedor,</li><li>la exportación en el proveedor y la importación en el consumidor,</li><li>el registro en el array <code>providers:[]</code> del componente consumidor (o mejor del módulo) conumidor y</li><li>el consumo en el constructor del componente o servicio consumidor.</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosService, Movimiento &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../shared/'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'movimiento'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'movimiento.component.html'</span>,</div><div class=\"line\">  providers: [MovimientosService] </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientoComponent</span> </span>&#123;</div><div class=\"line\">  movimiento: Movimiento</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(public movimientosService: MovimientosService) &#123; &#125;</div><div class=\"line\">  guardarMovimiento() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.movimientosService.guardarMovimiento(<span class=\"keyword\">this</span>.movimiento)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p><img src=\"/images/ng2-DI-component-service.jpg\" alt=\"Inyección de servicios en componentes \"></p><h3 id=\"Directivas\"><a href=\"#Directivas\" class=\"headerlink\" title=\"Directivas\"></a>Directivas</h3><p>Las directivas eran el ADN de AngularJS1. Ahora han mutado en <strong>componentes reutilizables</strong> como elementos en las vistas de otros componentes de rango superior. Pero la idea es la misma, desglosar las plantillas de HTML en bloques con un propósito único.</p><p>La sintaxis de las directivas es similar:</p><ul><li>la definición del servicio decorado como <code>@Injectable()</code> en el componente hijo,</li><li>la exportación del hijo y la importación en el padre,</li><li>el registro en el array <code>directives:[]</code> del componente padre (o del módulo padre) y</li><li>el consumo declarativo en la plantilla de la vista padre.</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimiento'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'injection-app'</span>,</div><div class=\"line\">  template: <span class=\"string\">'&lt;h1&gt;</span></div><div class=\"line\"><span class=\"string\">              &#123;&#123;titulo&#125;&#125;</span></div><div class=\"line\"><span class=\"string\">            &lt;/h1&gt;</span></div><div class=\"line\"><span class=\"string\">            &lt;movimiento&gt;&lt;/movimiento&gt;'</span>,</div><div class=\"line\">  directives:[MovimientoComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InjectionAppComponent</span> </span>&#123;</div><div class=\"line\">  titulo = <span class=\"string\">'Inyectores listos!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p><img src=\"/images/ng2-DI-component-directive.jpg\" alt=\"Inyección de directivas en componentes\"></p><h2 id=\"Registro\"><a href=\"#Registro\" class=\"headerlink\" title=\"Registro\"></a>Registro</h2><p>La inyección de las dependencias <strong>funciona de manera jerárquica</strong> en AngularJS 2. Cuando un módulo registra una dependencia la pone a disposición de todos sus componentes hijos. Es más, si algún hijo la volviese a registrar se le proveería de otra instancia.</p><p>Esta copia puede provocar efectos colaterales indeseados. Para <strong>compartir datos</strong> o ahorrar memoria se recomienda registrar las dependencias lo más arriba posible. Esto siempre sin sacrificar la modularidad o la escalabilidad de aplicaciones que requieran <em>lazy loading</em>.</p><blockquote><p>Atención a la copia de <em>routeService</em> que se registra por segunda vez. No importa que ya la haya registrado su padre. Otro registro implica otra instancia.</p></blockquote><p><img src=\"/images/ng2-Arbol-de-dependencias.jpg\" alt=\"Jerarquía de dependencias en AngularJS\"></p><p>Para ciertos casos, AngularJS 2 permite modelos de inyección más avanzados. Mediante el uso de <strong>factorías y el registro de cadenas</strong> con los nombres de los servicios facilita la inyección a voluntad o la carga diferida.</p><blockquote><p>Algunas de estas posibilidades están siendo retocadas durante la actual <em>Release Candidate</em>, y se esperan cambios de cara a las próxima versión estable.</p></blockquote><p>El viejo principio de <em>divide y vencerás</em> se aplica rotundamente en las aplicaciones Angular 2. Si creas <strong>módulos reutilizables</strong> estarás sentando las bases para crear grandes aplicaciones de negocio con AngularJS.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a></p>","site":{"data":{}},"excerpt":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a></p></blockquote><hr><blockquote><p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/4-injection\" target=\"_blank\" rel=\"external\">angular2/4-injection/</a></p></blockquote><p>AngularJS2 tiene vocación de <em>framework</em> para grandes aplicaciones de negocio. Los grandes desarrollos requieren <strong>modularidad en el código</strong>. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón <em><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\" target=\"_blank\" rel=\"external\">Dependency Injection</a></em>.</p><p>Los cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer <strong>aplicaciones de negocio con HTML y JavaScript</strong> de manera controlable.</p>","more":"<h2 id=\"Modulos-componentes-y-servicios\"><a href=\"#Modulos-componentes-y-servicios\" class=\"headerlink\" title=\"Módulos, componentes y servicios\"></a>Módulos, componentes y servicios</h2><p>En AngularJS 1 teníamos muy presente el concepto de <strong>módulo</strong>. Rara era la aplicación que no comenzase con el mítico <code>angular.module(&#39;miAplicacion&#39;)</code>. Dada la carencia de un sistema modular nativo en <em>JavaScript</em>, AngularJS nos proveía de uno propio.</p><p>Hoy en día se nos sugiere que usemos las versiones avanzadas de <em>JS</em>, o mejor aún <em>TypeScript</em>. Estos lenguajes nos ofrecen las instrucciones <code>export</code> e <code>import</code> que permiten definir <strong>módulos estancos en ficheros</strong> independientes. Nunca más el engorroso envolvimiento <em>IIFE</em> <code>(function () { … }())</code>.</p><p>A partir de ahí es el programador el que selectivamente <strong>exporta funcionalidad que importará para ser consumida</strong> mas tarde. De este modo, Angular se desentiende de la creación de módulos de código y se centra en la comunicación entre los objetos que componen la aplicación.</p><h3 id=\"Componentes\"><a href=\"#Componentes\" class=\"headerlink\" title=\"Componentes\"></a>Componentes</h3><p>Son los bloques de construcción agrupables en compuestos que forman la interfaz visual de una aplicación. Encapsulan <strong>la vista, los datos y la lógica</strong> para interactuar con el usuario.</p><p>Ni la vista ni la lógica deben crecer y realizar tareas que no sean de su exclusiva capa de responsabilidad. Esas tareas debe ser delegadas en otros objetos.</p><blockquote><p>Modelo de composición de componentes visuales para crear vistas complejas. La comunicación o <a href=\"../databinding-el-flujo-de-datos-de-angular2/\">Data Flow</a> se realiza de manera declarativa. Enviando datos a las propiedades de los hijos y esperando eventos con respuestas.</p></blockquote><p><img src=\"/images/ng2-Component-DataFlow.jpg\" alt=\"Composición mediante componentes\"></p><h3 id=\"Servicios\"><a href=\"#Servicios\" class=\"headerlink\" title=\"Servicios\"></a>Servicios</h3><p>Los servicios serán <strong>objetos especializados y reutilizables</strong> por otros servicios y componentes. En su definición debes aplicar los mismos principios de arquitectura de software que ya conoces y aplicas en <em>lenguajes clásicos tipo Java o C#.net</em>.</p><p>La sintaxis de la comunicación involucra varios bloques en ambos lados del canal:</p><ul><li>la definición del servicio decorado como <code>@Injectable()</code> en el proveedor,</li><li>la exportación en el proveedor y la importación en el consumidor,</li><li>el registro en el array <code>providers:[]</code> del componente consumidor (o mejor del módulo) conumidor y</li><li>el consumo en el constructor del componente o servicio consumidor.</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosService, Movimiento &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../shared/'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'movimiento'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'movimiento.component.html'</span>,</div><div class=\"line\">  providers: [MovimientosService] </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientoComponent</span> </span>&#123;</div><div class=\"line\">  movimiento: Movimiento</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(public movimientosService: MovimientosService) &#123; &#125;</div><div class=\"line\">  guardarMovimiento() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.movimientosService.guardarMovimiento(<span class=\"keyword\">this</span>.movimiento)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p><img src=\"/images/ng2-DI-component-service.jpg\" alt=\"Inyección de servicios en componentes \"></p><h3 id=\"Directivas\"><a href=\"#Directivas\" class=\"headerlink\" title=\"Directivas\"></a>Directivas</h3><p>Las directivas eran el ADN de AngularJS1. Ahora han mutado en <strong>componentes reutilizables</strong> como elementos en las vistas de otros componentes de rango superior. Pero la idea es la misma, desglosar las plantillas de HTML en bloques con un propósito único.</p><p>La sintaxis de las directivas es similar:</p><ul><li>la definición del servicio decorado como <code>@Injectable()</code> en el componente hijo,</li><li>la exportación del hijo y la importación en el padre,</li><li>el registro en el array <code>directives:[]</code> del componente padre (o del módulo padre) y</li><li>el consumo declarativo en la plantilla de la vista padre.</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimiento'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'injection-app'</span>,</div><div class=\"line\">  template: <span class=\"string\">'&lt;h1&gt;</span></div><div class=\"line\"><span class=\"string\">              &#123;&#123;titulo&#125;&#125;</span></div><div class=\"line\"><span class=\"string\">            &lt;/h1&gt;</span></div><div class=\"line\"><span class=\"string\">            &lt;movimiento&gt;&lt;/movimiento&gt;'</span>,</div><div class=\"line\">  directives:[MovimientoComponent]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InjectionAppComponent</span> </span>&#123;</div><div class=\"line\">  titulo = <span class=\"string\">'Inyectores listos!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p><img src=\"/images/ng2-DI-component-directive.jpg\" alt=\"Inyección de directivas en componentes\"></p><h2 id=\"Registro\"><a href=\"#Registro\" class=\"headerlink\" title=\"Registro\"></a>Registro</h2><p>La inyección de las dependencias <strong>funciona de manera jerárquica</strong> en AngularJS 2. Cuando un módulo registra una dependencia la pone a disposición de todos sus componentes hijos. Es más, si algún hijo la volviese a registrar se le proveería de otra instancia.</p><p>Esta copia puede provocar efectos colaterales indeseados. Para <strong>compartir datos</strong> o ahorrar memoria se recomienda registrar las dependencias lo más arriba posible. Esto siempre sin sacrificar la modularidad o la escalabilidad de aplicaciones que requieran <em>lazy loading</em>.</p><blockquote><p>Atención a la copia de <em>routeService</em> que se registra por segunda vez. No importa que ya la haya registrado su padre. Otro registro implica otra instancia.</p></blockquote><p><img src=\"/images/ng2-Arbol-de-dependencias.jpg\" alt=\"Jerarquía de dependencias en AngularJS\"></p><p>Para ciertos casos, AngularJS 2 permite modelos de inyección más avanzados. Mediante el uso de <strong>factorías y el registro de cadenas</strong> con los nombres de los servicios facilita la inyección a voluntad o la carga diferida.</p><blockquote><p>Algunas de estas posibilidades están siendo retocadas durante la actual <em>Release Candidate</em>, y se esperan cambios de cara a las próxima versión estable.</p></blockquote><p>El viejo principio de <em>divide y vencerás</em> se aplica rotundamente en las aplicaciones Angular 2. Si creas <strong>módulos reutilizables</strong> estarás sentando las bases para crear grandes aplicaciones de negocio con AngularJS.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a></p>"},{"title":"Angular2, la evolución de la plataforma","id":"24","updated":"2016-06-08T06:10:11.000Z","date":"2016-05-06T13:57:50.000Z","_content":"\nCoincidiendo con la **ngConf 2016** acaba de presentarse la esperada *Release Candidate* de **[Angular 2](https://angular.io/)**. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a **AngularJS 1**. Y ahora esa ruptura se ha materializado. \n\nLos programadores somos muy conscientes de que **lo único estable es el cambio**. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en **Angular2**, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.\n\n<!-- more -->\n\n## Un poco de historia\n\nEn septiembre de 2011 me tropecé con AngularJS buscando una alternativa a *Backbone* y *KnockOut*. Yo venía del mundo encorsetado del desarrollo para multinacionales basado en tecnologías *serias* como .Net y Java. Necesitaba un cambio, una apertura... pero con ciertas garantías. \n\nEn esos tiempos el desarrollo web vivía su eclosión de la mano del HTML5. Era un mundo de *startups* (ahí estaba yo), de *earlyadopters* y de picaflores tecnológicos. Buscábamos **tecnologías simples, universales y de bajo coste**. Muy en la línea con el método empresarial *lean*. Pero el riesgo de escoger el framework perdedor era enorme, y cada pocos meses aparecían o desaparecían candidatos. \n\nAngular superó a sus contendientes por dos razones: una fue (rellena aquí con el argumentario técnico que más te satisfaga) y la otra fue **Google**. Un padrino así abre muchas puertas y da el punto de valor suficiente para alejarte de Oracle o Microsoft sin temor.\n\nEn enero de 2013 abandoné mi sueño de convertirme en el nuevo Zuckerberg. Volví al viejo sector servicios fundando una empresa de consultoría. Aprovechando los conocimientos y métodos ágiles aprendidos por el camino *startup*, ofrecimos desarrollos *low cost* para pequeñas empresas. Para complementar los servicios empecé a impartir cursos sobre estas tecnologías a otros desarrolladores. Al principio sólo acudían *freelances* y pequeñas consultoras.\n\nEn marzo de 2015 tuve los primeros contactos con **grandes empresas** tanto a nivel docente como consultor. Volví a un mundo familiar pero con una tecnología distinta. AngularJS había crecido de manera exponencial en número de desarrolladores. Pero ahora estaba jugando en las grandes ligas.\n \nY de repente aparecieron los problemas.\n\n### Dos problemas\n\n#### El lenguaje\nJavaScript es dinámico, asíncrono y nada modular. Ideal para espíritus libres, pero una amenaza para equipos estrictos. Y necesitas control si vas a migrar grandes aplicaciones de negocio, ERPs , banca, servicios de administración pública. \n\nTampoco se emocionaban los arquitectos de software con las **herramientas**. Como siempre todo empezó de manera sencilla: ficheros y editores de texto. Luego llegó la minificación, la combinación, el pre y pos procesado, las anotaciones, la documentación, las pruebas... Cada mes era mayor el arsenal de micro herramientas que había que orquestar.\n\n#### La escalabilidad\nLas aplicaciones empresariales son pesadas en lógica y datos. La falta de un cargador dinámico decente hacía muy difícil reducir el tiempo antes del primer impacto. Una vez lanzadas las aplicaciones iban razonablemente bien. \nHasta que alguien creaba informes editables. Con miles de datos de los que preocuparse la técnica del **doble binding** saturaba los *watchers*. \n\nAngularJS moría de éxito. \n\n### Dos soluciones\n#### El lenguaje: TypeScript\nLa lenta evolución de JavaScript parece haber salido de su hibernación. En el último año disfrutamos ya de las mejoras de **ES6 (ES2015)** y empezamos a probar **ES7 (2016)**. Pero no es suficiente.\n\nPara grandes desarrollos, con miles de líneas de código, toda ayuda es poca. **TypeScript** asume todas las mejoras y propuestas del más avanzado JS estándar y además aporta **tipos**. Esa es la principal razón de su elección como lenguaje de cabecera en AngularJS2.\n\nAl rededor de esa piedra angular crece el ecosistema de **herramientas**. Principalmente [VSCode](https://code.visualstudio.com/) que lo aprovecha ofreciendo *intellisense* y *refactoring* a la altura de los grandes.\n\nLa oferta se completa con *Interfaces*, *Generics* y otras novedades que harán las delicias de los programadores orientados a objetos. \n\nCabe señalar que TypeScript no es ni mucho menos obligatorio. **Se puede desarrollar en ES5 y ES6** sin problemas. Pero la idea, los ejemplos, la documentación y los blogueros haremos que tu vida sea más fácil si escoges TypeScript.\n\n#### La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas...\nEl **doble binding** era el plato estrella de AngularJS, pero salía caro. Así que se replanteó una solución que no requiriese un *pull* constante preguntando el estado de un montón de variables. Las respuesta vino de la mano de otra colaboración con los de Redmond: [ReactiveX](http://reactivex.io/). Este cambio será el primero al que te enfrentes si vienes de las conocidas versiones 1.\n\nEl mismo **patrón observable** se aplicó también a las comunicaciones HTTP. Nuestra aplicación es ahora un conjunto de *streams* que emiten eventos. Solo tenemos que suscribirnos y observar el estado cambiante de nuestro modelo. Resultado, aplicaciones hasta **cinco veces más rápidas**.\n\nLos principios de encapsulación, modularidad y reutilización ya estaban en el ADN de AngularJS. Pero no era fácil implementarlos con las viejas directivas. Desde la versión 1.5 disponemos de **componentes**. Esta versión puente trae una simplificación y una guía sobre como estructurar aplicaciones. En AngularJS 2 van más allá, y tal como habían amenazado, matan al controlador y coronan al componente como nuevo rey del *front end*.\n\nLa **inyección de dependencias** fue uno de los grandes aciertos iniciales de AngularJS 1. Pero con el tiempo se convirtió en una rémora para crear grandes SPAs, pues requería disponer de toda la lógica, todo tu código, desde el primer segundo. Este problema se ha resuelto, aunque de forma demasiado tediosa. Hay margen de mejora en la actual implementación y espero que se vaya simplificando.\n\nUno de los pocos puntos débiles de AngularJS, y otros frameworks *client side*, era la dificultad para la indexación **SEO on site**. La solución normalmente pasaba por algún tipo de *prerenderizado* más o menos engorroso. Con la aparición de [Angular Universal](https://universal.angular.io/), podemos ejecutar **Angular en el servidor**. Esto abre las puertas al SEO y a la reducción de la espera en la primera visita.\n\nLas aplicaciones híbridas han sido la solución *low cost* para que cualquier empresa accediese a los elitistas mercados de aplicaciones para móviles. Pero la solución no era perfecta. Con el [Angular Mobile Tookit](https://mobile.angular.io/) se ofrecen **aplicaciones progresivas** que compiten en rendimiento y funcionalidad con las nativas.\n\nPoner en marcha y depurar una aplicación moderna de gran tamaño requiere herramientas a la altura. La oferta en este caso es total: \n\n- [Angular CLI](https://cli.angular.io/) una herramienta en línea de comandos para generar aplicaciones preconfiguradas\n- [Augury](https://augury.angular.io/) para depurar y visualizar en el navegador el estado del programa\n- [Protractor]() para los tests e2e\n- [Guías de estilo](https://angular.io/styleguide) y analizadores de código... \n\n#### Una alternativa\n[React](https://facebook.github.io/react/), la propuesta de Facebook para el desarrollo web, es una herramienta formidable. Rápido en ejecución, más cercano al estándar JS y mucho menos exigente en cuanto a herramientas. \n\nParte con la enorme desventaja numérica que supone el más de un millón de programadores que ya conocen AngularJS y el ecosistema de librerías, componentes y material docente que ha surgido a su alrededor.\n\nSerá por esto último que aún no ha enganchado en la gran empresa. Por tanto aún no tira de ofertas de trabajo ni genera el ruido de la apuesta de Google. Eso sí, merece mucho la pena conocerlo, e incluso incorporarlo en algún caso junto a Angular 2.   \n\n## Angular 2 no es plataforma para aficionados\nEl resumen es que AngularJS 1.x ha mutado **de framework a plataforma** en Angular 2. En este sentido estará cada vez más orientada a grandes desarrollos empresariales, y a salir definitivamente del navegador y ocupar servidores, escritorios y teléfonos. \n\nSeguro que requiere un gran esfuerzo de aprendizaje por su novedades radicales. Seguro que por el camino habrá giros por su bisoñez y amplitud. Pero seguro que estamos ante la **plataforma de desarrollo empresarial** con mejor futuro. De momento.\n\n> En [esta presentación](https://docs.google.com/presentation/d/1VyMGTwiM7HmNMdSCXrrYpHIej-Y8ZwZKCan7KMqvdCA/edit?usp=sharing) tienes un resumen rápido de mis impresiones acerca de Angular2, y de cómo empezar a programar aplicaciones universales.","source":"_posts/Angular2-la-evolucion-de-la-plataforma.md","raw":"---\ntitle: 'Angular2, la evolución de la plataforma'\ntags:  \n- Angular2\ncategories:\n- Introducción \npermalink: angular2-primeras-impresiones\nid: 24\nupdated: '2016-06-08 08:10:11'\ndate: 2016-05-06 15:57:50\n---\n\nCoincidiendo con la **ngConf 2016** acaba de presentarse la esperada *Release Candidate* de **[Angular 2](https://angular.io/)**. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a **AngularJS 1**. Y ahora esa ruptura se ha materializado. \n\nLos programadores somos muy conscientes de que **lo único estable es el cambio**. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en **Angular2**, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.\n\n<!-- more -->\n\n## Un poco de historia\n\nEn septiembre de 2011 me tropecé con AngularJS buscando una alternativa a *Backbone* y *KnockOut*. Yo venía del mundo encorsetado del desarrollo para multinacionales basado en tecnologías *serias* como .Net y Java. Necesitaba un cambio, una apertura... pero con ciertas garantías. \n\nEn esos tiempos el desarrollo web vivía su eclosión de la mano del HTML5. Era un mundo de *startups* (ahí estaba yo), de *earlyadopters* y de picaflores tecnológicos. Buscábamos **tecnologías simples, universales y de bajo coste**. Muy en la línea con el método empresarial *lean*. Pero el riesgo de escoger el framework perdedor era enorme, y cada pocos meses aparecían o desaparecían candidatos. \n\nAngular superó a sus contendientes por dos razones: una fue (rellena aquí con el argumentario técnico que más te satisfaga) y la otra fue **Google**. Un padrino así abre muchas puertas y da el punto de valor suficiente para alejarte de Oracle o Microsoft sin temor.\n\nEn enero de 2013 abandoné mi sueño de convertirme en el nuevo Zuckerberg. Volví al viejo sector servicios fundando una empresa de consultoría. Aprovechando los conocimientos y métodos ágiles aprendidos por el camino *startup*, ofrecimos desarrollos *low cost* para pequeñas empresas. Para complementar los servicios empecé a impartir cursos sobre estas tecnologías a otros desarrolladores. Al principio sólo acudían *freelances* y pequeñas consultoras.\n\nEn marzo de 2015 tuve los primeros contactos con **grandes empresas** tanto a nivel docente como consultor. Volví a un mundo familiar pero con una tecnología distinta. AngularJS había crecido de manera exponencial en número de desarrolladores. Pero ahora estaba jugando en las grandes ligas.\n \nY de repente aparecieron los problemas.\n\n### Dos problemas\n\n#### El lenguaje\nJavaScript es dinámico, asíncrono y nada modular. Ideal para espíritus libres, pero una amenaza para equipos estrictos. Y necesitas control si vas a migrar grandes aplicaciones de negocio, ERPs , banca, servicios de administración pública. \n\nTampoco se emocionaban los arquitectos de software con las **herramientas**. Como siempre todo empezó de manera sencilla: ficheros y editores de texto. Luego llegó la minificación, la combinación, el pre y pos procesado, las anotaciones, la documentación, las pruebas... Cada mes era mayor el arsenal de micro herramientas que había que orquestar.\n\n#### La escalabilidad\nLas aplicaciones empresariales son pesadas en lógica y datos. La falta de un cargador dinámico decente hacía muy difícil reducir el tiempo antes del primer impacto. Una vez lanzadas las aplicaciones iban razonablemente bien. \nHasta que alguien creaba informes editables. Con miles de datos de los que preocuparse la técnica del **doble binding** saturaba los *watchers*. \n\nAngularJS moría de éxito. \n\n### Dos soluciones\n#### El lenguaje: TypeScript\nLa lenta evolución de JavaScript parece haber salido de su hibernación. En el último año disfrutamos ya de las mejoras de **ES6 (ES2015)** y empezamos a probar **ES7 (2016)**. Pero no es suficiente.\n\nPara grandes desarrollos, con miles de líneas de código, toda ayuda es poca. **TypeScript** asume todas las mejoras y propuestas del más avanzado JS estándar y además aporta **tipos**. Esa es la principal razón de su elección como lenguaje de cabecera en AngularJS2.\n\nAl rededor de esa piedra angular crece el ecosistema de **herramientas**. Principalmente [VSCode](https://code.visualstudio.com/) que lo aprovecha ofreciendo *intellisense* y *refactoring* a la altura de los grandes.\n\nLa oferta se completa con *Interfaces*, *Generics* y otras novedades que harán las delicias de los programadores orientados a objetos. \n\nCabe señalar que TypeScript no es ni mucho menos obligatorio. **Se puede desarrollar en ES5 y ES6** sin problemas. Pero la idea, los ejemplos, la documentación y los blogueros haremos que tu vida sea más fácil si escoges TypeScript.\n\n#### La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas...\nEl **doble binding** era el plato estrella de AngularJS, pero salía caro. Así que se replanteó una solución que no requiriese un *pull* constante preguntando el estado de un montón de variables. Las respuesta vino de la mano de otra colaboración con los de Redmond: [ReactiveX](http://reactivex.io/). Este cambio será el primero al que te enfrentes si vienes de las conocidas versiones 1.\n\nEl mismo **patrón observable** se aplicó también a las comunicaciones HTTP. Nuestra aplicación es ahora un conjunto de *streams* que emiten eventos. Solo tenemos que suscribirnos y observar el estado cambiante de nuestro modelo. Resultado, aplicaciones hasta **cinco veces más rápidas**.\n\nLos principios de encapsulación, modularidad y reutilización ya estaban en el ADN de AngularJS. Pero no era fácil implementarlos con las viejas directivas. Desde la versión 1.5 disponemos de **componentes**. Esta versión puente trae una simplificación y una guía sobre como estructurar aplicaciones. En AngularJS 2 van más allá, y tal como habían amenazado, matan al controlador y coronan al componente como nuevo rey del *front end*.\n\nLa **inyección de dependencias** fue uno de los grandes aciertos iniciales de AngularJS 1. Pero con el tiempo se convirtió en una rémora para crear grandes SPAs, pues requería disponer de toda la lógica, todo tu código, desde el primer segundo. Este problema se ha resuelto, aunque de forma demasiado tediosa. Hay margen de mejora en la actual implementación y espero que se vaya simplificando.\n\nUno de los pocos puntos débiles de AngularJS, y otros frameworks *client side*, era la dificultad para la indexación **SEO on site**. La solución normalmente pasaba por algún tipo de *prerenderizado* más o menos engorroso. Con la aparición de [Angular Universal](https://universal.angular.io/), podemos ejecutar **Angular en el servidor**. Esto abre las puertas al SEO y a la reducción de la espera en la primera visita.\n\nLas aplicaciones híbridas han sido la solución *low cost* para que cualquier empresa accediese a los elitistas mercados de aplicaciones para móviles. Pero la solución no era perfecta. Con el [Angular Mobile Tookit](https://mobile.angular.io/) se ofrecen **aplicaciones progresivas** que compiten en rendimiento y funcionalidad con las nativas.\n\nPoner en marcha y depurar una aplicación moderna de gran tamaño requiere herramientas a la altura. La oferta en este caso es total: \n\n- [Angular CLI](https://cli.angular.io/) una herramienta en línea de comandos para generar aplicaciones preconfiguradas\n- [Augury](https://augury.angular.io/) para depurar y visualizar en el navegador el estado del programa\n- [Protractor]() para los tests e2e\n- [Guías de estilo](https://angular.io/styleguide) y analizadores de código... \n\n#### Una alternativa\n[React](https://facebook.github.io/react/), la propuesta de Facebook para el desarrollo web, es una herramienta formidable. Rápido en ejecución, más cercano al estándar JS y mucho menos exigente en cuanto a herramientas. \n\nParte con la enorme desventaja numérica que supone el más de un millón de programadores que ya conocen AngularJS y el ecosistema de librerías, componentes y material docente que ha surgido a su alrededor.\n\nSerá por esto último que aún no ha enganchado en la gran empresa. Por tanto aún no tira de ofertas de trabajo ni genera el ruido de la apuesta de Google. Eso sí, merece mucho la pena conocerlo, e incluso incorporarlo en algún caso junto a Angular 2.   \n\n## Angular 2 no es plataforma para aficionados\nEl resumen es que AngularJS 1.x ha mutado **de framework a plataforma** en Angular 2. En este sentido estará cada vez más orientada a grandes desarrollos empresariales, y a salir definitivamente del navegador y ocupar servidores, escritorios y teléfonos. \n\nSeguro que requiere un gran esfuerzo de aprendizaje por su novedades radicales. Seguro que por el camino habrá giros por su bisoñez y amplitud. Pero seguro que estamos ante la **plataforma de desarrollo empresarial** con mejor futuro. De momento.\n\n> En [esta presentación](https://docs.google.com/presentation/d/1VyMGTwiM7HmNMdSCXrrYpHIej-Y8ZwZKCan7KMqvdCA/edit?usp=sharing) tienes un resumen rápido de mis impresiones acerca de Angular2, y de cómo empezar a programar aplicaciones universales.","slug":"angular2-primeras-impresiones","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvf6000aiwd3funll6pp","content":"<p>Coincidiendo con la <strong>ngConf 2016</strong> acaba de presentarse la esperada <em>Release Candidate</em> de <strong><a href=\"https://angular.io/\" target=\"_blank\" rel=\"external\">Angular 2</a></strong>. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a <strong>AngularJS 1</strong>. Y ahora esa ruptura se ha materializado.</p><p>Los programadores somos muy conscientes de que <strong>lo único estable es el cambio</strong>. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en <strong>Angular2</strong>, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.</p><a id=\"more\"></a><h2 id=\"Un-poco-de-historia\"><a href=\"#Un-poco-de-historia\" class=\"headerlink\" title=\"Un poco de historia\"></a>Un poco de historia</h2><p>En septiembre de 2011 me tropecé con AngularJS buscando una alternativa a <em>Backbone</em> y <em>KnockOut</em>. Yo venía del mundo encorsetado del desarrollo para multinacionales basado en tecnologías <em>serias</em> como .Net y Java. Necesitaba un cambio, una apertura… pero con ciertas garantías.</p><p>En esos tiempos el desarrollo web vivía su eclosión de la mano del HTML5. Era un mundo de <em>startups</em> (ahí estaba yo), de <em>earlyadopters</em> y de picaflores tecnológicos. Buscábamos <strong>tecnologías simples, universales y de bajo coste</strong>. Muy en la línea con el método empresarial <em>lean</em>. Pero el riesgo de escoger el framework perdedor era enorme, y cada pocos meses aparecían o desaparecían candidatos.</p><p>Angular superó a sus contendientes por dos razones: una fue (rellena aquí con el argumentario técnico que más te satisfaga) y la otra fue <strong>Google</strong>. Un padrino así abre muchas puertas y da el punto de valor suficiente para alejarte de Oracle o Microsoft sin temor.</p><p>En enero de 2013 abandoné mi sueño de convertirme en el nuevo Zuckerberg. Volví al viejo sector servicios fundando una empresa de consultoría. Aprovechando los conocimientos y métodos ágiles aprendidos por el camino <em>startup</em>, ofrecimos desarrollos <em>low cost</em> para pequeñas empresas. Para complementar los servicios empecé a impartir cursos sobre estas tecnologías a otros desarrolladores. Al principio sólo acudían <em>freelances</em> y pequeñas consultoras.</p><p>En marzo de 2015 tuve los primeros contactos con <strong>grandes empresas</strong> tanto a nivel docente como consultor. Volví a un mundo familiar pero con una tecnología distinta. AngularJS había crecido de manera exponencial en número de desarrolladores. Pero ahora estaba jugando en las grandes ligas.</p><p>Y de repente aparecieron los problemas.</p><h3 id=\"Dos-problemas\"><a href=\"#Dos-problemas\" class=\"headerlink\" title=\"Dos problemas\"></a>Dos problemas</h3><h4 id=\"El-lenguaje\"><a href=\"#El-lenguaje\" class=\"headerlink\" title=\"El lenguaje\"></a>El lenguaje</h4><p>JavaScript es dinámico, asíncrono y nada modular. Ideal para espíritus libres, pero una amenaza para equipos estrictos. Y necesitas control si vas a migrar grandes aplicaciones de negocio, ERPs , banca, servicios de administración pública.</p><p>Tampoco se emocionaban los arquitectos de software con las <strong>herramientas</strong>. Como siempre todo empezó de manera sencilla: ficheros y editores de texto. Luego llegó la minificación, la combinación, el pre y pos procesado, las anotaciones, la documentación, las pruebas… Cada mes era mayor el arsenal de micro herramientas que había que orquestar.</p><h4 id=\"La-escalabilidad\"><a href=\"#La-escalabilidad\" class=\"headerlink\" title=\"La escalabilidad\"></a>La escalabilidad</h4><p>Las aplicaciones empresariales son pesadas en lógica y datos. La falta de un cargador dinámico decente hacía muy difícil reducir el tiempo antes del primer impacto. Una vez lanzadas las aplicaciones iban razonablemente bien.<br>Hasta que alguien creaba informes editables. Con miles de datos de los que preocuparse la técnica del <strong>doble binding</strong> saturaba los <em>watchers</em>.</p><p>AngularJS moría de éxito.</p><h3 id=\"Dos-soluciones\"><a href=\"#Dos-soluciones\" class=\"headerlink\" title=\"Dos soluciones\"></a>Dos soluciones</h3><h4 id=\"El-lenguaje-TypeScript\"><a href=\"#El-lenguaje-TypeScript\" class=\"headerlink\" title=\"El lenguaje: TypeScript\"></a>El lenguaje: TypeScript</h4><p>La lenta evolución de JavaScript parece haber salido de su hibernación. En el último año disfrutamos ya de las mejoras de <strong>ES6 (ES2015)</strong> y empezamos a probar <strong>ES7 (2016)</strong>. Pero no es suficiente.</p><p>Para grandes desarrollos, con miles de líneas de código, toda ayuda es poca. <strong>TypeScript</strong> asume todas las mejoras y propuestas del más avanzado JS estándar y además aporta <strong>tipos</strong>. Esa es la principal razón de su elección como lenguaje de cabecera en AngularJS2.</p><p>Al rededor de esa piedra angular crece el ecosistema de <strong>herramientas</strong>. Principalmente <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a> que lo aprovecha ofreciendo <em>intellisense</em> y <em>refactoring</em> a la altura de los grandes.</p><p>La oferta se completa con <em>Interfaces</em>, <em>Generics</em> y otras novedades que harán las delicias de los programadores orientados a objetos.</p><p>Cabe señalar que TypeScript no es ni mucho menos obligatorio. <strong>Se puede desarrollar en ES5 y ES6</strong> sin problemas. Pero la idea, los ejemplos, la documentación y los blogueros haremos que tu vida sea más fácil si escoges TypeScript.</p><h4 id=\"La-plataforma-renderizacion-observables-componentes-carga-dinamica-SEO-apps-herramientas…\"><a href=\"#La-plataforma-renderizacion-observables-componentes-carga-dinamica-SEO-apps-herramientas…\" class=\"headerlink\" title=\"La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas…\"></a>La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas…</h4><p>El <strong>doble binding</strong> era el plato estrella de AngularJS, pero salía caro. Así que se replanteó una solución que no requiriese un <em>pull</em> constante preguntando el estado de un montón de variables. Las respuesta vino de la mano de otra colaboración con los de Redmond: <a href=\"http://reactivex.io/\" target=\"_blank\" rel=\"external\">ReactiveX</a>. Este cambio será el primero al que te enfrentes si vienes de las conocidas versiones 1.</p><p>El mismo <strong>patrón observable</strong> se aplicó también a las comunicaciones HTTP. Nuestra aplicación es ahora un conjunto de <em>streams</em> que emiten eventos. Solo tenemos que suscribirnos y observar el estado cambiante de nuestro modelo. Resultado, aplicaciones hasta <strong>cinco veces más rápidas</strong>.</p><p>Los principios de encapsulación, modularidad y reutilización ya estaban en el ADN de AngularJS. Pero no era fácil implementarlos con las viejas directivas. Desde la versión 1.5 disponemos de <strong>componentes</strong>. Esta versión puente trae una simplificación y una guía sobre como estructurar aplicaciones. En AngularJS 2 van más allá, y tal como habían amenazado, matan al controlador y coronan al componente como nuevo rey del <em>front end</em>.</p><p>La <strong>inyección de dependencias</strong> fue uno de los grandes aciertos iniciales de AngularJS 1. Pero con el tiempo se convirtió en una rémora para crear grandes SPAs, pues requería disponer de toda la lógica, todo tu código, desde el primer segundo. Este problema se ha resuelto, aunque de forma demasiado tediosa. Hay margen de mejora en la actual implementación y espero que se vaya simplificando.</p><p>Uno de los pocos puntos débiles de AngularJS, y otros frameworks <em>client side</em>, era la dificultad para la indexación <strong>SEO on site</strong>. La solución normalmente pasaba por algún tipo de <em>prerenderizado</em> más o menos engorroso. Con la aparición de <a href=\"https://universal.angular.io/\" target=\"_blank\" rel=\"external\">Angular Universal</a>, podemos ejecutar <strong>Angular en el servidor</strong>. Esto abre las puertas al SEO y a la reducción de la espera en la primera visita.</p><p>Las aplicaciones híbridas han sido la solución <em>low cost</em> para que cualquier empresa accediese a los elitistas mercados de aplicaciones para móviles. Pero la solución no era perfecta. Con el <a href=\"https://mobile.angular.io/\" target=\"_blank\" rel=\"external\">Angular Mobile Tookit</a> se ofrecen <strong>aplicaciones progresivas</strong> que compiten en rendimiento y funcionalidad con las nativas.</p><p>Poner en marcha y depurar una aplicación moderna de gran tamaño requiere herramientas a la altura. La oferta en este caso es total:</p><ul><li><a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a> una herramienta en línea de comandos para generar aplicaciones preconfiguradas</li><li><a href=\"https://augury.angular.io/\" target=\"_blank\" rel=\"external\">Augury</a> para depurar y visualizar en el navegador el estado del programa</li><li><a href=\"\">Protractor</a> para los tests e2e</li><li><a href=\"https://angular.io/styleguide\" target=\"_blank\" rel=\"external\">Guías de estilo</a> y analizadores de código…</li></ul><h4 id=\"Una-alternativa\"><a href=\"#Una-alternativa\" class=\"headerlink\" title=\"Una alternativa\"></a>Una alternativa</h4><p><a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a>, la propuesta de Facebook para el desarrollo web, es una herramienta formidable. Rápido en ejecución, más cercano al estándar JS y mucho menos exigente en cuanto a herramientas.</p><p>Parte con la enorme desventaja numérica que supone el más de un millón de programadores que ya conocen AngularJS y el ecosistema de librerías, componentes y material docente que ha surgido a su alrededor.</p><p>Será por esto último que aún no ha enganchado en la gran empresa. Por tanto aún no tira de ofertas de trabajo ni genera el ruido de la apuesta de Google. Eso sí, merece mucho la pena conocerlo, e incluso incorporarlo en algún caso junto a Angular 2.</p><h2 id=\"Angular-2-no-es-plataforma-para-aficionados\"><a href=\"#Angular-2-no-es-plataforma-para-aficionados\" class=\"headerlink\" title=\"Angular 2 no es plataforma para aficionados\"></a>Angular 2 no es plataforma para aficionados</h2><p>El resumen es que AngularJS 1.x ha mutado <strong>de framework a plataforma</strong> en Angular 2. En este sentido estará cada vez más orientada a grandes desarrollos empresariales, y a salir definitivamente del navegador y ocupar servidores, escritorios y teléfonos.</p><p>Seguro que requiere un gran esfuerzo de aprendizaje por su novedades radicales. Seguro que por el camino habrá giros por su bisoñez y amplitud. Pero seguro que estamos ante la <strong>plataforma de desarrollo empresarial</strong> con mejor futuro. De momento.</p><blockquote><p>En <a href=\"https://docs.google.com/presentation/d/1VyMGTwiM7HmNMdSCXrrYpHIej-Y8ZwZKCan7KMqvdCA/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes un resumen rápido de mis impresiones acerca de Angular2, y de cómo empezar a programar aplicaciones universales.</p></blockquote>","site":{"data":{}},"excerpt":"<p>Coincidiendo con la <strong>ngConf 2016</strong> acaba de presentarse la esperada <em>Release Candidate</em> de <strong><a href=\"https://angular.io/\" target=\"_blank\" rel=\"external\">Angular 2</a></strong>. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a <strong>AngularJS 1</strong>. Y ahora esa ruptura se ha materializado.</p><p>Los programadores somos muy conscientes de que <strong>lo único estable es el cambio</strong>. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en <strong>Angular2</strong>, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.</p>","more":"<h2 id=\"Un-poco-de-historia\"><a href=\"#Un-poco-de-historia\" class=\"headerlink\" title=\"Un poco de historia\"></a>Un poco de historia</h2><p>En septiembre de 2011 me tropecé con AngularJS buscando una alternativa a <em>Backbone</em> y <em>KnockOut</em>. Yo venía del mundo encorsetado del desarrollo para multinacionales basado en tecnologías <em>serias</em> como .Net y Java. Necesitaba un cambio, una apertura… pero con ciertas garantías.</p><p>En esos tiempos el desarrollo web vivía su eclosión de la mano del HTML5. Era un mundo de <em>startups</em> (ahí estaba yo), de <em>earlyadopters</em> y de picaflores tecnológicos. Buscábamos <strong>tecnologías simples, universales y de bajo coste</strong>. Muy en la línea con el método empresarial <em>lean</em>. Pero el riesgo de escoger el framework perdedor era enorme, y cada pocos meses aparecían o desaparecían candidatos.</p><p>Angular superó a sus contendientes por dos razones: una fue (rellena aquí con el argumentario técnico que más te satisfaga) y la otra fue <strong>Google</strong>. Un padrino así abre muchas puertas y da el punto de valor suficiente para alejarte de Oracle o Microsoft sin temor.</p><p>En enero de 2013 abandoné mi sueño de convertirme en el nuevo Zuckerberg. Volví al viejo sector servicios fundando una empresa de consultoría. Aprovechando los conocimientos y métodos ágiles aprendidos por el camino <em>startup</em>, ofrecimos desarrollos <em>low cost</em> para pequeñas empresas. Para complementar los servicios empecé a impartir cursos sobre estas tecnologías a otros desarrolladores. Al principio sólo acudían <em>freelances</em> y pequeñas consultoras.</p><p>En marzo de 2015 tuve los primeros contactos con <strong>grandes empresas</strong> tanto a nivel docente como consultor. Volví a un mundo familiar pero con una tecnología distinta. AngularJS había crecido de manera exponencial en número de desarrolladores. Pero ahora estaba jugando en las grandes ligas.</p><p>Y de repente aparecieron los problemas.</p><h3 id=\"Dos-problemas\"><a href=\"#Dos-problemas\" class=\"headerlink\" title=\"Dos problemas\"></a>Dos problemas</h3><h4 id=\"El-lenguaje\"><a href=\"#El-lenguaje\" class=\"headerlink\" title=\"El lenguaje\"></a>El lenguaje</h4><p>JavaScript es dinámico, asíncrono y nada modular. Ideal para espíritus libres, pero una amenaza para equipos estrictos. Y necesitas control si vas a migrar grandes aplicaciones de negocio, ERPs , banca, servicios de administración pública.</p><p>Tampoco se emocionaban los arquitectos de software con las <strong>herramientas</strong>. Como siempre todo empezó de manera sencilla: ficheros y editores de texto. Luego llegó la minificación, la combinación, el pre y pos procesado, las anotaciones, la documentación, las pruebas… Cada mes era mayor el arsenal de micro herramientas que había que orquestar.</p><h4 id=\"La-escalabilidad\"><a href=\"#La-escalabilidad\" class=\"headerlink\" title=\"La escalabilidad\"></a>La escalabilidad</h4><p>Las aplicaciones empresariales son pesadas en lógica y datos. La falta de un cargador dinámico decente hacía muy difícil reducir el tiempo antes del primer impacto. Una vez lanzadas las aplicaciones iban razonablemente bien.<br>Hasta que alguien creaba informes editables. Con miles de datos de los que preocuparse la técnica del <strong>doble binding</strong> saturaba los <em>watchers</em>.</p><p>AngularJS moría de éxito.</p><h3 id=\"Dos-soluciones\"><a href=\"#Dos-soluciones\" class=\"headerlink\" title=\"Dos soluciones\"></a>Dos soluciones</h3><h4 id=\"El-lenguaje-TypeScript\"><a href=\"#El-lenguaje-TypeScript\" class=\"headerlink\" title=\"El lenguaje: TypeScript\"></a>El lenguaje: TypeScript</h4><p>La lenta evolución de JavaScript parece haber salido de su hibernación. En el último año disfrutamos ya de las mejoras de <strong>ES6 (ES2015)</strong> y empezamos a probar <strong>ES7 (2016)</strong>. Pero no es suficiente.</p><p>Para grandes desarrollos, con miles de líneas de código, toda ayuda es poca. <strong>TypeScript</strong> asume todas las mejoras y propuestas del más avanzado JS estándar y además aporta <strong>tipos</strong>. Esa es la principal razón de su elección como lenguaje de cabecera en AngularJS2.</p><p>Al rededor de esa piedra angular crece el ecosistema de <strong>herramientas</strong>. Principalmente <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a> que lo aprovecha ofreciendo <em>intellisense</em> y <em>refactoring</em> a la altura de los grandes.</p><p>La oferta se completa con <em>Interfaces</em>, <em>Generics</em> y otras novedades que harán las delicias de los programadores orientados a objetos.</p><p>Cabe señalar que TypeScript no es ni mucho menos obligatorio. <strong>Se puede desarrollar en ES5 y ES6</strong> sin problemas. Pero la idea, los ejemplos, la documentación y los blogueros haremos que tu vida sea más fácil si escoges TypeScript.</p><h4 id=\"La-plataforma-renderizacion-observables-componentes-carga-dinamica-SEO-apps-herramientas…\"><a href=\"#La-plataforma-renderizacion-observables-componentes-carga-dinamica-SEO-apps-herramientas…\" class=\"headerlink\" title=\"La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas…\"></a>La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas…</h4><p>El <strong>doble binding</strong> era el plato estrella de AngularJS, pero salía caro. Así que se replanteó una solución que no requiriese un <em>pull</em> constante preguntando el estado de un montón de variables. Las respuesta vino de la mano de otra colaboración con los de Redmond: <a href=\"http://reactivex.io/\" target=\"_blank\" rel=\"external\">ReactiveX</a>. Este cambio será el primero al que te enfrentes si vienes de las conocidas versiones 1.</p><p>El mismo <strong>patrón observable</strong> se aplicó también a las comunicaciones HTTP. Nuestra aplicación es ahora un conjunto de <em>streams</em> que emiten eventos. Solo tenemos que suscribirnos y observar el estado cambiante de nuestro modelo. Resultado, aplicaciones hasta <strong>cinco veces más rápidas</strong>.</p><p>Los principios de encapsulación, modularidad y reutilización ya estaban en el ADN de AngularJS. Pero no era fácil implementarlos con las viejas directivas. Desde la versión 1.5 disponemos de <strong>componentes</strong>. Esta versión puente trae una simplificación y una guía sobre como estructurar aplicaciones. En AngularJS 2 van más allá, y tal como habían amenazado, matan al controlador y coronan al componente como nuevo rey del <em>front end</em>.</p><p>La <strong>inyección de dependencias</strong> fue uno de los grandes aciertos iniciales de AngularJS 1. Pero con el tiempo se convirtió en una rémora para crear grandes SPAs, pues requería disponer de toda la lógica, todo tu código, desde el primer segundo. Este problema se ha resuelto, aunque de forma demasiado tediosa. Hay margen de mejora en la actual implementación y espero que se vaya simplificando.</p><p>Uno de los pocos puntos débiles de AngularJS, y otros frameworks <em>client side</em>, era la dificultad para la indexación <strong>SEO on site</strong>. La solución normalmente pasaba por algún tipo de <em>prerenderizado</em> más o menos engorroso. Con la aparición de <a href=\"https://universal.angular.io/\" target=\"_blank\" rel=\"external\">Angular Universal</a>, podemos ejecutar <strong>Angular en el servidor</strong>. Esto abre las puertas al SEO y a la reducción de la espera en la primera visita.</p><p>Las aplicaciones híbridas han sido la solución <em>low cost</em> para que cualquier empresa accediese a los elitistas mercados de aplicaciones para móviles. Pero la solución no era perfecta. Con el <a href=\"https://mobile.angular.io/\" target=\"_blank\" rel=\"external\">Angular Mobile Tookit</a> se ofrecen <strong>aplicaciones progresivas</strong> que compiten en rendimiento y funcionalidad con las nativas.</p><p>Poner en marcha y depurar una aplicación moderna de gran tamaño requiere herramientas a la altura. La oferta en este caso es total:</p><ul><li><a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a> una herramienta en línea de comandos para generar aplicaciones preconfiguradas</li><li><a href=\"https://augury.angular.io/\" target=\"_blank\" rel=\"external\">Augury</a> para depurar y visualizar en el navegador el estado del programa</li><li><a href=\"\">Protractor</a> para los tests e2e</li><li><a href=\"https://angular.io/styleguide\" target=\"_blank\" rel=\"external\">Guías de estilo</a> y analizadores de código…</li></ul><h4 id=\"Una-alternativa\"><a href=\"#Una-alternativa\" class=\"headerlink\" title=\"Una alternativa\"></a>Una alternativa</h4><p><a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a>, la propuesta de Facebook para el desarrollo web, es una herramienta formidable. Rápido en ejecución, más cercano al estándar JS y mucho menos exigente en cuanto a herramientas.</p><p>Parte con la enorme desventaja numérica que supone el más de un millón de programadores que ya conocen AngularJS y el ecosistema de librerías, componentes y material docente que ha surgido a su alrededor.</p><p>Será por esto último que aún no ha enganchado en la gran empresa. Por tanto aún no tira de ofertas de trabajo ni genera el ruido de la apuesta de Google. Eso sí, merece mucho la pena conocerlo, e incluso incorporarlo en algún caso junto a Angular 2.</p><h2 id=\"Angular-2-no-es-plataforma-para-aficionados\"><a href=\"#Angular-2-no-es-plataforma-para-aficionados\" class=\"headerlink\" title=\"Angular 2 no es plataforma para aficionados\"></a>Angular 2 no es plataforma para aficionados</h2><p>El resumen es que AngularJS 1.x ha mutado <strong>de framework a plataforma</strong> en Angular 2. En este sentido estará cada vez más orientada a grandes desarrollos empresariales, y a salir definitivamente del navegador y ocupar servidores, escritorios y teléfonos.</p><p>Seguro que requiere un gran esfuerzo de aprendizaje por su novedades radicales. Seguro que por el camino habrá giros por su bisoñez y amplitud. Pero seguro que estamos ante la <strong>plataforma de desarrollo empresarial</strong> con mejor futuro. De momento.</p><blockquote><p>En <a href=\"https://docs.google.com/presentation/d/1VyMGTwiM7HmNMdSCXrrYpHIej-Y8ZwZKCan7KMqvdCA/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes un resumen rápido de mis impresiones acerca de Angular2, y de cómo empezar a programar aplicaciones universales.</p></blockquote>"},{"title":"Comunicaciones http observables con Angular2","id":"17","updated":"2017-02-16T16:44:21.000Z","date":"2016-06-16T09:47:28.000Z","thumbnail":"/css/images/angular.jpg","_content":"\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/)\n\n---\nEn AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame **plantillas estáticas y datos dinámicos**. Las comunicaciones *http* son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.\n\n<!-- more -->\n\n### La librería http y otras...\nComo cabe esperar Angular 2 dispone de su propio módulo de comunicaciones. En la librería `@angular/http` encontramos el nuevo servicio `http` que es el cliente usado para enviar y recibir datos.\n\nLo realmente novedoso viene de parte del proyecto [Reactive Extensions o RxJS](http://reactivex.io/rxjs/). En su librería `rxjs/Observable` exporta la clase `Observable`. Esta clase implementa el **patrón observador aplicado a streams** de datos. El equipo de Angular ha decidido adoptarlo para procesar los *streams* de entrada y salida de datos *http*.\n\nUn servicio típico que necesite comunicaciones con el servidor importará al menos estos objetos.\n\n```typescript\n// Importar objetos de la librería http\nimport { Http, Response, RequestOptions, Headers } from '@angular/http';\n// Importar la clase Observable desde la librería rxjs\nimport { Observable }     from 'rxjs/Observable';\n```\n\nLos servicios importados han de ser **registrados como *providers* para poder ser inyectados como dependencias** antes de ser consumidos. Ya que se trata de servicios de amplio uso en cualquier aplicación, se recomienda registrarlos en módulos de alto nivel. De esa forma pueden ser reutilizados como *singletons*.\n\n```typescript\n// importar la constante con los proveedores de http\nimport { HttpModule, Http } from '@angular/http';\n\n@NgModule({\n  declarations: [ ],\n  imports: [\n    HttpModule, // El módulo con todo lo necesario\n  ],\n  providers:[\n    Http, // El servicio proveedor\n  ]\n});\n```\n\nA partir de ese momento cualquier componente o servicio puede reclamar su inyección en el constructor, y lo podrá usar en sus propios métodos.\n```typescript\n  /**\n  * Constructor que reclama dependencias inyectables\n  * Http se encuentra por haberse registrado en este módulo o en uno superior\n  **/\n  constructor(private http: Http) {\n     // en el constructor no debe contener lógica extra\n     // su función es únicamente recibir las dependencias\n  }\n```\n\n### Observables en lugar de promesas\nLa naturaleza asíncrona de las comunicaciones entre maquinas se implementó mediante *callbacks* en JavaScript. Esta forma de programar degenera en código difícil de mantener. Con el tiempo el **patrón promesa** se impuso, y en AngularJS 1.x es la manera recomendada de programar.\n\nPero las promesas también tiene sus limitaciones, y ahí aparecen los **observables**. Este patrón requerirá un artículo para el sólo, pero como adelanto se resume en lo siguiente:\n> Tratar todo tipo de información como un stream observable de entrada y de salida, al cual se le pueden agregar operaciones que procesan los flujos de datos.\n\nEsto encaja muy bien con las comunicaciones *http* asíncronas y es la razón de su adopción en Angular 2. Un método de servicio par **leer datos REST** se parecerá a este *snippet*:\n\n```typescript\n// las llamadas devuelven observables\nleerDatos(): Observable<Response> {\n  // Se declara cómo va a ser la llamada \n  // ocultando los pormenores a los consumidores   \n  return this.http\n    .get(`${this.urlBase}/recurso`);\n  // En este momento aún no se efectuó la llamada\n}\n```\n\nPara enviar información via *post* o *put* usaremos una estrategia similar, pero con unos requisitos específicos. En Angular 2 se requiere una configuración previa de las llamadas de escritura. Es engorroso pero fácilmente automatizable. Una típica operación de **escritura REST** sería algo así:\n\n```typescript\n  escribirDatos(unDato): Observable<Response> {\n    // Los envíos de información deben configurarse a mano\n    // esto es fácilmente generalizable y reutilizable\n    let body = JSON.stringify(unDato);\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n    // declarar la llamada y retornar el observable\n    // las variables de configuración y los datos, van como parámetros\n    if (unDato._id) {\n      return this.http\n        .put(`${this.urlBase}/recurso/${unDato._id}`, body, options);\n    } else {\n      return this.http\n        .post(`${this.urlBase}/recurso`, body, options);\n    }\n  }\n```\n\n\nPor supuesto esto es lo que se programa a bajo nivel, en los **servicios de comunicaciones**. En Angular2 se mantiene la recomendación de bajar a servicios la responsabilidad de las comunicaciones al tiempo que dejamos los componentes lo más ligeros posible. \n\nPor encima de los servicios de comunicaciones habrá otros servicios de lógica o directamente componentes. En cualquier caso, los consumidores llamarán a métodos que siempre les devolverán objetos observables. Las clases de alto nivel se **suscribirán a esos observables** y procesarán la respuesta recibida... cuando esta esté disponible.\n\n```typescript\n  // La carga de datos se hace al iniciarse el componente\n  // este es el lugar donde programar lógica de inicio\n  // nunca en el constructor\n  ngOnInit() {\n    // en el momento de la suscripción es cuando se dispara la llamada\n    this.datosService\n      .leerDatos()\n      .subscribe(res => {\n        this.datos = res.json();\n      });\n    // Sería similar en procesos de escritura\n  }\n```\n> La clase `http` no realiza la llamada hasta que algún consumidor se suscriba a la respuesta. Mientras tanto queda como una definición congelada.\n\nEl método `.subscribe()` recibe como argumento un puntero a la respuesta *http*. Los datos se encuentran en formato *JSON* y hay que reclamarlos mediante el método `.json()`\n\n### Extensiones en lugar de interceptores\nUna de las características destacables de los servicios `$http` de AngularJS 1.x era la posibilidad de usar *interceptores*. Estos eran **funciones que se incrustaban durante el envío o recepción** de las comunicaciones.\n\nUn uso habitual era emplearlos para agregar **cabeceras de seguridad o controlar errores** de comunicación de manera centralizada. Ahora la forma recomendable de hacer eso mismo en Angular2 es mejorar el servicio http extendiéndolo. El servicio derivado resultante implementará los interceptores en funciones llamadas durante la comunicación.\n\nEsta es una posible implementación con funcionalidad suficiente para facilitar los envíos, detectar errores y enviar cabeceras de seguridad.\n```typescript\n@Injectable()\n/**\n * Extensión personalizada de la clase HTTP\n * Permite la configuración de todas las peticiones\n * Captura los envíos y respuestas\n * */\nexport class HttpService extends Http {\n  /** Las direcciones base deberían venir de la configuración del environment*/\n  public apiProxyUrl = 'http://localhost:4030/api/';\n  private authorization = '';\n\n  constructor(\n    backend: XHRBackend,\n    defaultOptions: RequestOptions,\n    private router: Router,\n    private userStore: SessionStoreService\n  ) {\n    super(backend, defaultOptions);\n    this.subscribeToToken();\n  }\n\n  /**\n   * Reescribe el método de la clase base, ejecutando acciones para cada petición\n   * La peticiíón en curso puede llegar como una ruta o una clase request\n   * Si viene sólo la cadena, debería traer las opciones aparte\n   * */\n  request(request: string | Request, options: RequestOptionsArgs = { headers: new Headers() }): Observable<Response> {\n    this.configureRequest(request, options);\n    return this.interceptResponse(request, options);\n  }\n\n  private subscribeToToken() {\n    // suponemos un servicio que nos avisa de la recepción de tokens\n    this.userStore\n      .getDataObservable()\n      .subscribe((data: Session) => this.authorization = 'Bearer ' + data.token);\n  }\n\n  private configureRequest(request: string | Request, options: RequestOptionsArgs) {\n    // Adapta la ruta y asigna cabeceras\n    if (typeof request === 'string') {\n      request = this.getProxyUrl(request);\n      this.setHeaders(options);\n    } else {\n      request['url'] = this.getProxyUrl(request['url']);\n      this.setHeaders(request);\n    }\n  }\n\n  private interceptResponse(request: string | Request, options: RequestOptionsArgs) : Observable<Response> {\n    const observableRequest = super\n      .request(request, options)\n      .catch(this.onCatch())\n      .finally(this.onFinally());\n    return observableRequest;\n  }\n\n  /**\n   * Transforma la url para llamar a trave´s de un proxy \n   * Útil en caso de problemas con el CORS\n   */\n  private getProxyUrl(currentUrl) {\n    if (!currentUrl.includes('/assets/')) {\n      return this.apiProxyUrl + currentUrl;\n    } else {\n      return currentUrl;\n    }\n  }\n\n  /**\n   * Interceptor para componer las cabeceras en cada petición\n   * */\n  private setHeaders(objectToSetHeadersTo: Request | RequestOptionsArgs) {\n    const headers = objectToSetHeadersTo.headers;\n    headers.set('Content-Type', 'application/json');\n    headers.set('Authorization', this.authorization);\n  }\n\n  /**\n   * Interceptor para captura genérica de errores http\n   * */\n  private onCatch() {\n    return (res: Response) => {\n      // Security errors\n      if (res.status === 401 || res.status === 403) {\n        // redirigir al usuario para pedir credenciales\n        this.router.navigate(['user/login']);\n      }\n      // To Do: Gestión común de otros errores...\n      return Observable.throw(res);\n    };\n  }\n\n  private onFinally() {\n    return () => console.log('Fin');\n  }\n\n}\n```\n\n\nPodemos usarlo de manera transparente en el resto de la aplicación. Sólo se necesita ajustar el registro de proveedores para dirigir al inyector de dependencias hacia esta nueva clase.\n```typescript\n   providers: [\n    {\n      provide: Http, // reemplaza el servicio del framework\n      useClass: HttpService // con la clase personalizada que lo extiende\n    }\n  ]\n```\n\n>Este es uno de los usos más potentes de la inversión de control en Angular. Es el programador integrador el que decide el servicio a usar. El programador funcional declara la dependencia en los constructores de sus componentes y servicios, pero no decide la instancia concreta que recibirá.\n\n\nAngular 2 ha trastocado todo lo que hacíamos en las versiones 1.x, pero sólo en la forma. El fondo sigue siendo el mismo: **el navegador envía y recibe datos en formato JSON que mezcla con plantillas estáticas** para  crear HTML en la máquina local y relajar al servidor. \n\n\nPor cierto, por ahora ni rastro del viejo `$resource`. No tardará en aparecer una versión basada en *streams observables*. Sígueme en [mi cuenta de twitter](https://twitter.com/albertobasalo) o suscríbete a la [revista mensual de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339) y en cuanto me entere serás el primero en ser informado.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/)","source":"_posts/Comunicaciones-http-observables-con-Angular2.md","raw":"---\ntitle: Comunicaciones http observables con Angular2\ntags:  \n- Angular2\n- http\n- Tutorial\ncategories:\n- Introducción \npermalink: comunicaciones-http-observables-con-angular2\nid: 17\nupdated: '2017-02-16 17:44:21'\ndate: 2016-06-16 11:47:28\nthumbnail: /css/images/angular.jpg\n---\n\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/)\n\n---\nEn AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame **plantillas estáticas y datos dinámicos**. Las comunicaciones *http* son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.\n\n<!-- more -->\n\n### La librería http y otras...\nComo cabe esperar Angular 2 dispone de su propio módulo de comunicaciones. En la librería `@angular/http` encontramos el nuevo servicio `http` que es el cliente usado para enviar y recibir datos.\n\nLo realmente novedoso viene de parte del proyecto [Reactive Extensions o RxJS](http://reactivex.io/rxjs/). En su librería `rxjs/Observable` exporta la clase `Observable`. Esta clase implementa el **patrón observador aplicado a streams** de datos. El equipo de Angular ha decidido adoptarlo para procesar los *streams* de entrada y salida de datos *http*.\n\nUn servicio típico que necesite comunicaciones con el servidor importará al menos estos objetos.\n\n```typescript\n// Importar objetos de la librería http\nimport { Http, Response, RequestOptions, Headers } from '@angular/http';\n// Importar la clase Observable desde la librería rxjs\nimport { Observable }     from 'rxjs/Observable';\n```\n\nLos servicios importados han de ser **registrados como *providers* para poder ser inyectados como dependencias** antes de ser consumidos. Ya que se trata de servicios de amplio uso en cualquier aplicación, se recomienda registrarlos en módulos de alto nivel. De esa forma pueden ser reutilizados como *singletons*.\n\n```typescript\n// importar la constante con los proveedores de http\nimport { HttpModule, Http } from '@angular/http';\n\n@NgModule({\n  declarations: [ ],\n  imports: [\n    HttpModule, // El módulo con todo lo necesario\n  ],\n  providers:[\n    Http, // El servicio proveedor\n  ]\n});\n```\n\nA partir de ese momento cualquier componente o servicio puede reclamar su inyección en el constructor, y lo podrá usar en sus propios métodos.\n```typescript\n  /**\n  * Constructor que reclama dependencias inyectables\n  * Http se encuentra por haberse registrado en este módulo o en uno superior\n  **/\n  constructor(private http: Http) {\n     // en el constructor no debe contener lógica extra\n     // su función es únicamente recibir las dependencias\n  }\n```\n\n### Observables en lugar de promesas\nLa naturaleza asíncrona de las comunicaciones entre maquinas se implementó mediante *callbacks* en JavaScript. Esta forma de programar degenera en código difícil de mantener. Con el tiempo el **patrón promesa** se impuso, y en AngularJS 1.x es la manera recomendada de programar.\n\nPero las promesas también tiene sus limitaciones, y ahí aparecen los **observables**. Este patrón requerirá un artículo para el sólo, pero como adelanto se resume en lo siguiente:\n> Tratar todo tipo de información como un stream observable de entrada y de salida, al cual se le pueden agregar operaciones que procesan los flujos de datos.\n\nEsto encaja muy bien con las comunicaciones *http* asíncronas y es la razón de su adopción en Angular 2. Un método de servicio par **leer datos REST** se parecerá a este *snippet*:\n\n```typescript\n// las llamadas devuelven observables\nleerDatos(): Observable<Response> {\n  // Se declara cómo va a ser la llamada \n  // ocultando los pormenores a los consumidores   \n  return this.http\n    .get(`${this.urlBase}/recurso`);\n  // En este momento aún no se efectuó la llamada\n}\n```\n\nPara enviar información via *post* o *put* usaremos una estrategia similar, pero con unos requisitos específicos. En Angular 2 se requiere una configuración previa de las llamadas de escritura. Es engorroso pero fácilmente automatizable. Una típica operación de **escritura REST** sería algo así:\n\n```typescript\n  escribirDatos(unDato): Observable<Response> {\n    // Los envíos de información deben configurarse a mano\n    // esto es fácilmente generalizable y reutilizable\n    let body = JSON.stringify(unDato);\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n    // declarar la llamada y retornar el observable\n    // las variables de configuración y los datos, van como parámetros\n    if (unDato._id) {\n      return this.http\n        .put(`${this.urlBase}/recurso/${unDato._id}`, body, options);\n    } else {\n      return this.http\n        .post(`${this.urlBase}/recurso`, body, options);\n    }\n  }\n```\n\n\nPor supuesto esto es lo que se programa a bajo nivel, en los **servicios de comunicaciones**. En Angular2 se mantiene la recomendación de bajar a servicios la responsabilidad de las comunicaciones al tiempo que dejamos los componentes lo más ligeros posible. \n\nPor encima de los servicios de comunicaciones habrá otros servicios de lógica o directamente componentes. En cualquier caso, los consumidores llamarán a métodos que siempre les devolverán objetos observables. Las clases de alto nivel se **suscribirán a esos observables** y procesarán la respuesta recibida... cuando esta esté disponible.\n\n```typescript\n  // La carga de datos se hace al iniciarse el componente\n  // este es el lugar donde programar lógica de inicio\n  // nunca en el constructor\n  ngOnInit() {\n    // en el momento de la suscripción es cuando se dispara la llamada\n    this.datosService\n      .leerDatos()\n      .subscribe(res => {\n        this.datos = res.json();\n      });\n    // Sería similar en procesos de escritura\n  }\n```\n> La clase `http` no realiza la llamada hasta que algún consumidor se suscriba a la respuesta. Mientras tanto queda como una definición congelada.\n\nEl método `.subscribe()` recibe como argumento un puntero a la respuesta *http*. Los datos se encuentran en formato *JSON* y hay que reclamarlos mediante el método `.json()`\n\n### Extensiones en lugar de interceptores\nUna de las características destacables de los servicios `$http` de AngularJS 1.x era la posibilidad de usar *interceptores*. Estos eran **funciones que se incrustaban durante el envío o recepción** de las comunicaciones.\n\nUn uso habitual era emplearlos para agregar **cabeceras de seguridad o controlar errores** de comunicación de manera centralizada. Ahora la forma recomendable de hacer eso mismo en Angular2 es mejorar el servicio http extendiéndolo. El servicio derivado resultante implementará los interceptores en funciones llamadas durante la comunicación.\n\nEsta es una posible implementación con funcionalidad suficiente para facilitar los envíos, detectar errores y enviar cabeceras de seguridad.\n```typescript\n@Injectable()\n/**\n * Extensión personalizada de la clase HTTP\n * Permite la configuración de todas las peticiones\n * Captura los envíos y respuestas\n * */\nexport class HttpService extends Http {\n  /** Las direcciones base deberían venir de la configuración del environment*/\n  public apiProxyUrl = 'http://localhost:4030/api/';\n  private authorization = '';\n\n  constructor(\n    backend: XHRBackend,\n    defaultOptions: RequestOptions,\n    private router: Router,\n    private userStore: SessionStoreService\n  ) {\n    super(backend, defaultOptions);\n    this.subscribeToToken();\n  }\n\n  /**\n   * Reescribe el método de la clase base, ejecutando acciones para cada petición\n   * La peticiíón en curso puede llegar como una ruta o una clase request\n   * Si viene sólo la cadena, debería traer las opciones aparte\n   * */\n  request(request: string | Request, options: RequestOptionsArgs = { headers: new Headers() }): Observable<Response> {\n    this.configureRequest(request, options);\n    return this.interceptResponse(request, options);\n  }\n\n  private subscribeToToken() {\n    // suponemos un servicio que nos avisa de la recepción de tokens\n    this.userStore\n      .getDataObservable()\n      .subscribe((data: Session) => this.authorization = 'Bearer ' + data.token);\n  }\n\n  private configureRequest(request: string | Request, options: RequestOptionsArgs) {\n    // Adapta la ruta y asigna cabeceras\n    if (typeof request === 'string') {\n      request = this.getProxyUrl(request);\n      this.setHeaders(options);\n    } else {\n      request['url'] = this.getProxyUrl(request['url']);\n      this.setHeaders(request);\n    }\n  }\n\n  private interceptResponse(request: string | Request, options: RequestOptionsArgs) : Observable<Response> {\n    const observableRequest = super\n      .request(request, options)\n      .catch(this.onCatch())\n      .finally(this.onFinally());\n    return observableRequest;\n  }\n\n  /**\n   * Transforma la url para llamar a trave´s de un proxy \n   * Útil en caso de problemas con el CORS\n   */\n  private getProxyUrl(currentUrl) {\n    if (!currentUrl.includes('/assets/')) {\n      return this.apiProxyUrl + currentUrl;\n    } else {\n      return currentUrl;\n    }\n  }\n\n  /**\n   * Interceptor para componer las cabeceras en cada petición\n   * */\n  private setHeaders(objectToSetHeadersTo: Request | RequestOptionsArgs) {\n    const headers = objectToSetHeadersTo.headers;\n    headers.set('Content-Type', 'application/json');\n    headers.set('Authorization', this.authorization);\n  }\n\n  /**\n   * Interceptor para captura genérica de errores http\n   * */\n  private onCatch() {\n    return (res: Response) => {\n      // Security errors\n      if (res.status === 401 || res.status === 403) {\n        // redirigir al usuario para pedir credenciales\n        this.router.navigate(['user/login']);\n      }\n      // To Do: Gestión común de otros errores...\n      return Observable.throw(res);\n    };\n  }\n\n  private onFinally() {\n    return () => console.log('Fin');\n  }\n\n}\n```\n\n\nPodemos usarlo de manera transparente en el resto de la aplicación. Sólo se necesita ajustar el registro de proveedores para dirigir al inyector de dependencias hacia esta nueva clase.\n```typescript\n   providers: [\n    {\n      provide: Http, // reemplaza el servicio del framework\n      useClass: HttpService // con la clase personalizada que lo extiende\n    }\n  ]\n```\n\n>Este es uno de los usos más potentes de la inversión de control en Angular. Es el programador integrador el que decide el servicio a usar. El programador funcional declara la dependencia en los constructores de sus componentes y servicios, pero no decide la instancia concreta que recibirá.\n\n\nAngular 2 ha trastocado todo lo que hacíamos en las versiones 1.x, pero sólo en la forma. El fondo sigue siendo el mismo: **el navegador envía y recibe datos en formato JSON que mezcla con plantillas estáticas** para  crear HTML en la máquina local y relajar al servidor. \n\n\nPor cierto, por ahora ni rastro del viejo `$resource`. No tardará en aparecer una versión basada en *streams observables*. Sígueme en [mi cuenta de twitter](https://twitter.com/albertobasalo) o suscríbete a la [revista mensual de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339) y en cuanto me entere serás el primero en ser informado.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/)","slug":"comunicaciones-http-observables-con-angular2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvf6000ciwd3yh7x0xku","content":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a></p></blockquote><hr><p>En AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame <strong>plantillas estáticas y datos dinámicos</strong>. Las comunicaciones <em>http</em> son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.</p><a id=\"more\"></a><h3 id=\"La-libreria-http-y-otras…\"><a href=\"#La-libreria-http-y-otras…\" class=\"headerlink\" title=\"La librería http y otras…\"></a>La librería http y otras…</h3><p>Como cabe esperar Angular 2 dispone de su propio módulo de comunicaciones. En la librería <code>@angular/http</code> encontramos el nuevo servicio <code>http</code> que es el cliente usado para enviar y recibir datos.</p><p>Lo realmente novedoso viene de parte del proyecto <a href=\"http://reactivex.io/rxjs/\" target=\"_blank\" rel=\"external\">Reactive Extensions o RxJS</a>. En su librería <code>rxjs/Observable</code> exporta la clase <code>Observable</code>. Esta clase implementa el <strong>patrón observador aplicado a streams</strong> de datos. El equipo de Angular ha decidido adoptarlo para procesar los <em>streams</em> de entrada y salida de datos <em>http</em>.</p><p>Un servicio típico que necesite comunicaciones con el servidor importará al menos estos objetos.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Importar objetos de la librería http</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Http, Response, RequestOptions, Headers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// Importar la clase Observable desde la librería rxjs</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125;     <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span>;</div></pre></td></tr></table></figure><p>Los servicios importados han de ser <strong>registrados como <em>providers</em> para poder ser inyectados como dependencias</strong> antes de ser consumidos. Ya que se trata de servicios de amplio uso en cualquier aplicación, se recomienda registrarlos en módulos de alto nivel. De esa forma pueden ser reutilizados como <em>singletons</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importar la constante con los proveedores de http</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule, Http &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  declarations: [ ],</div><div class=\"line\">  imports: [</div><div class=\"line\">    HttpModule, <span class=\"comment\">// El módulo con todo lo necesario</span></div><div class=\"line\">  ],</div><div class=\"line\">  providers:[</div><div class=\"line\">    Http, <span class=\"comment\">// El servicio proveedor</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>A partir de ese momento cualquier componente o servicio puede reclamar su inyección en el constructor, y lo podrá usar en sus propios métodos.<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">* Constructor que reclama dependencias inyectables</span></div><div class=\"line\"><span class=\"comment\">* Http se encuentra por haberse registrado en este módulo o en uno superior</span></div><div class=\"line\"><span class=\"comment\">**/</span></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// en el constructor no debe contener lógica extra</span></div><div class=\"line\">   <span class=\"comment\">// su función es únicamente recibir las dependencias</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><h3 id=\"Observables-en-lugar-de-promesas\"><a href=\"#Observables-en-lugar-de-promesas\" class=\"headerlink\" title=\"Observables en lugar de promesas\"></a>Observables en lugar de promesas</h3><p>La naturaleza asíncrona de las comunicaciones entre maquinas se implementó mediante <em>callbacks</em> en JavaScript. Esta forma de programar degenera en código difícil de mantener. Con el tiempo el <strong>patrón promesa</strong> se impuso, y en AngularJS 1.x es la manera recomendada de programar.</p><p>Pero las promesas también tiene sus limitaciones, y ahí aparecen los <strong>observables</strong>. Este patrón requerirá un artículo para el sólo, pero como adelanto se resume en lo siguiente:</p><blockquote><p>Tratar todo tipo de información como un stream observable de entrada y de salida, al cual se le pueden agregar operaciones que procesan los flujos de datos.</p></blockquote><p>Esto encaja muy bien con las comunicaciones <em>http</em> asíncronas y es la razón de su adopción en Angular 2. Un método de servicio par <strong>leer datos REST</strong> se parecerá a este <em>snippet</em>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// las llamadas devuelven observables</span></div><div class=\"line\">leerDatos(): Observable&lt;Response&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Se declara cómo va a ser la llamada </span></div><div class=\"line\">  <span class=\"comment\">// ocultando los pormenores a los consumidores   </span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">    .get(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso`</span>);</div><div class=\"line\">  <span class=\"comment\">// En este momento aún no se efectuó la llamada</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Para enviar información via <em>post</em> o <em>put</em> usaremos una estrategia similar, pero con unos requisitos específicos. En Angular 2 se requiere una configuración previa de las llamadas de escritura. Es engorroso pero fácilmente automatizable. Una típica operación de <strong>escritura REST</strong> sería algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">escribirDatos(unDato): Observable&lt;Response&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Los envíos de información deben configurarse a mano</span></div><div class=\"line\">  <span class=\"comment\">// esto es fácilmente generalizable y reutilizable</span></div><div class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"built_in\">JSON</span>.stringify(unDato);</div><div class=\"line\">  <span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> Headers(&#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;);</div><div class=\"line\">  <span class=\"keyword\">let</span> options = <span class=\"keyword\">new</span> RequestOptions(&#123; headers: headers &#125;);</div><div class=\"line\">  <span class=\"comment\">// declarar la llamada y retornar el observable</span></div><div class=\"line\">  <span class=\"comment\">// las variables de configuración y los datos, van como parámetros</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (unDato._id) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">      .put(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso/<span class=\"subst\">$&#123;unDato._id&#125;</span>`</span>, body, options);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">      .post(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso`</span>, body, options);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Por supuesto esto es lo que se programa a bajo nivel, en los <strong>servicios de comunicaciones</strong>. En Angular2 se mantiene la recomendación de bajar a servicios la responsabilidad de las comunicaciones al tiempo que dejamos los componentes lo más ligeros posible.</p><p>Por encima de los servicios de comunicaciones habrá otros servicios de lógica o directamente componentes. En cualquier caso, los consumidores llamarán a métodos que siempre les devolverán objetos observables. Las clases de alto nivel se <strong>suscribirán a esos observables</strong> y procesarán la respuesta recibida… cuando esta esté disponible.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// La carga de datos se hace al iniciarse el componente</span></div><div class=\"line\"><span class=\"comment\">// este es el lugar donde programar lógica de inicio</span></div><div class=\"line\"><span class=\"comment\">// nunca en el constructor</span></div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"comment\">// en el momento de la suscripción es cuando se dispara la llamada</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.datosService</div><div class=\"line\">    .leerDatos()</div><div class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.datos = res.json();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"comment\">// Sería similar en procesos de escritura</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>La clase <code>http</code> no realiza la llamada hasta que algún consumidor se suscriba a la respuesta. Mientras tanto queda como una definición congelada.</p></blockquote><p>El método <code>.subscribe()</code> recibe como argumento un puntero a la respuesta <em>http</em>. Los datos se encuentran en formato <em>JSON</em> y hay que reclamarlos mediante el método <code>.json()</code></p><h3 id=\"Extensiones-en-lugar-de-interceptores\"><a href=\"#Extensiones-en-lugar-de-interceptores\" class=\"headerlink\" title=\"Extensiones en lugar de interceptores\"></a>Extensiones en lugar de interceptores</h3><p>Una de las características destacables de los servicios <code>$http</code> de AngularJS 1.x era la posibilidad de usar <em>interceptores</em>. Estos eran <strong>funciones que se incrustaban durante el envío o recepción</strong> de las comunicaciones.</p><p>Un uso habitual era emplearlos para agregar <strong>cabeceras de seguridad o controlar errores</strong> de comunicación de manera centralizada. Ahora la forma recomendable de hacer eso mismo en Angular2 es mejorar el servicio http extendiéndolo. El servicio derivado resultante implementará los interceptores en funciones llamadas durante la comunicación.</p><p>Esta es una posible implementación con funcionalidad suficiente para facilitar los envíos, detectar errores y enviar cabeceras de seguridad.<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Extensión personalizada de la clase HTTP</span></div><div class=\"line\"><span class=\"comment\"> * Permite la configuración de todas las peticiones</span></div><div class=\"line\"><span class=\"comment\"> * Captura los envíos y respuestas</span></div><div class=\"line\"><span class=\"comment\"> * */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpService <span class=\"keyword\">extends</span> Http &#123;</div><div class=\"line\">  <span class=\"comment\">/** Las direcciones base deberían venir de la configuración del environment*/</span></div><div class=\"line\">  <span class=\"keyword\">public</span> apiProxyUrl = <span class=\"string\">'http://localhost:4030/api/'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> authorization = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\"><span class=\"params\">    backend: XHRBackend,</span></div><div class=\"line\"><span class=\"params\">    defaultOptions: RequestOptions,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> router: Router,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> userStore: SessionStoreService</span></div><div class=\"line\"><span class=\"params\">  </span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(backend, defaultOptions);</div><div class=\"line\">    <span class=\"keyword\">this</span>.subscribeToToken();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Reescribe el método de la clase base, ejecutando acciones para cada petición</span></div><div class=\"line\"><span class=\"comment\">   * La peticiíón en curso puede llegar como una ruta o una clase request</span></div><div class=\"line\"><span class=\"comment\">   * Si viene sólo la cadena, debería traer las opciones aparte</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  request(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs = &#123; headers: <span class=\"keyword\">new</span> Headers() &#125;): Observable&lt;Response&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.configureRequest(request, options);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.interceptResponse(request, options);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> subscribeToToken() &#123;</div><div class=\"line\">    <span class=\"comment\">// suponemos un servicio que nos avisa de la recepción de tokens</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.userStore</div><div class=\"line\">      .getDataObservable()</div><div class=\"line\">      .subscribe(<span class=\"function\">(<span class=\"params\">data: Session</span>) =&gt;</span> <span class=\"keyword\">this</span>.authorization = <span class=\"string\">'Bearer '</span> + data.token);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> configureRequest(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs) &#123;</div><div class=\"line\">    <span class=\"comment\">// Adapta la ruta y asigna cabeceras</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> request === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">      request = <span class=\"keyword\">this</span>.getProxyUrl(request);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setHeaders(options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      request[<span class=\"string\">'url'</span>] = <span class=\"keyword\">this</span>.getProxyUrl(request[<span class=\"string\">'url'</span>]);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setHeaders(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> interceptResponse(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs) : Observable&lt;Response&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> observableRequest = <span class=\"keyword\">super</span></div><div class=\"line\">      .request(request, options)</div><div class=\"line\">      .catch(<span class=\"keyword\">this</span>.onCatch())</div><div class=\"line\">      .finally(<span class=\"keyword\">this</span>.onFinally());</div><div class=\"line\">    <span class=\"keyword\">return</span> observableRequest;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Transforma la url para llamar a trave´s de un proxy </span></div><div class=\"line\"><span class=\"comment\">   * Útil en caso de problemas con el CORS</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> getProxyUrl(currentUrl) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!currentUrl.includes(<span class=\"string\">'/assets/'</span>)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.apiProxyUrl + currentUrl;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> currentUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Interceptor para componer las cabeceras en cada petición</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> setHeaders(objectToSetHeadersTo: Request | RequestOptionsArgs) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> headers = objectToSetHeadersTo.headers;</div><div class=\"line\">    headers.set(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json'</span>);</div><div class=\"line\">    headers.set(<span class=\"string\">'Authorization'</span>, <span class=\"keyword\">this</span>.authorization);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Interceptor para captura genérica de errores http</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> onCatch() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">res: Response</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Security errors</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (res.status === <span class=\"number\">401</span> || res.status === <span class=\"number\">403</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// redirigir al usuario para pedir credenciales</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'user/login'</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// To Do: Gestión común de otros errores...</span></div><div class=\"line\">      <span class=\"keyword\">return</span> Observable.throw(res);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> onFinally() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Fin'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>Podemos usarlo de manera transparente en el resto de la aplicación. Sólo se necesita ajustar el registro de proveedores para dirigir al inyector de dependencias hacia esta nueva clase.<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> providers: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    provide: Http, <span class=\"comment\">// reemplaza el servicio del framework</span></div><div class=\"line\">    useClass: HttpService <span class=\"comment\">// con la clase personalizada que lo extiende</span></div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure><p></p><blockquote><p>Este es uno de los usos más potentes de la inversión de control en Angular. Es el programador integrador el que decide el servicio a usar. El programador funcional declara la dependencia en los constructores de sus componentes y servicios, pero no decide la instancia concreta que recibirá.</p></blockquote><p>Angular 2 ha trastocado todo lo que hacíamos en las versiones 1.x, pero sólo en la forma. El fondo sigue siendo el mismo: <strong>el navegador envía y recibe datos en formato JSON que mezcla con plantillas estáticas</strong> para crear HTML en la máquina local y relajar al servidor.</p><p>Por cierto, por ahora ni rastro del viejo <code>$resource</code>. No tardará en aparecer una versión basada en <em>streams observables</em>. Sígueme en <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">mi cuenta de twitter</a> o suscríbete a la <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">revista mensual de Academia Binaria</a> y en cuanto me entere serás el primero en ser informado.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a></p>","site":{"data":{}},"excerpt":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a></p></blockquote><hr><p>En AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame <strong>plantillas estáticas y datos dinámicos</strong>. Las comunicaciones <em>http</em> son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.</p>","more":"<h3 id=\"La-libreria-http-y-otras…\"><a href=\"#La-libreria-http-y-otras…\" class=\"headerlink\" title=\"La librería http y otras…\"></a>La librería http y otras…</h3><p>Como cabe esperar Angular 2 dispone de su propio módulo de comunicaciones. En la librería <code>@angular/http</code> encontramos el nuevo servicio <code>http</code> que es el cliente usado para enviar y recibir datos.</p><p>Lo realmente novedoso viene de parte del proyecto <a href=\"http://reactivex.io/rxjs/\" target=\"_blank\" rel=\"external\">Reactive Extensions o RxJS</a>. En su librería <code>rxjs/Observable</code> exporta la clase <code>Observable</code>. Esta clase implementa el <strong>patrón observador aplicado a streams</strong> de datos. El equipo de Angular ha decidido adoptarlo para procesar los <em>streams</em> de entrada y salida de datos <em>http</em>.</p><p>Un servicio típico que necesite comunicaciones con el servidor importará al menos estos objetos.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Importar objetos de la librería http</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Http, Response, RequestOptions, Headers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// Importar la clase Observable desde la librería rxjs</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125;     <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span>;</div></pre></td></tr></table></figure><p>Los servicios importados han de ser <strong>registrados como <em>providers</em> para poder ser inyectados como dependencias</strong> antes de ser consumidos. Ya que se trata de servicios de amplio uso en cualquier aplicación, se recomienda registrarlos en módulos de alto nivel. De esa forma pueden ser reutilizados como <em>singletons</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importar la constante con los proveedores de http</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule, Http &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  declarations: [ ],</div><div class=\"line\">  imports: [</div><div class=\"line\">    HttpModule, <span class=\"comment\">// El módulo con todo lo necesario</span></div><div class=\"line\">  ],</div><div class=\"line\">  providers:[</div><div class=\"line\">    Http, <span class=\"comment\">// El servicio proveedor</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>A partir de ese momento cualquier componente o servicio puede reclamar su inyección en el constructor, y lo podrá usar en sus propios métodos.<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">* Constructor que reclama dependencias inyectables</span></div><div class=\"line\"><span class=\"comment\">* Http se encuentra por haberse registrado en este módulo o en uno superior</span></div><div class=\"line\"><span class=\"comment\">**/</span></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: Http</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// en el constructor no debe contener lógica extra</span></div><div class=\"line\">   <span class=\"comment\">// su función es únicamente recibir las dependencias</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><h3 id=\"Observables-en-lugar-de-promesas\"><a href=\"#Observables-en-lugar-de-promesas\" class=\"headerlink\" title=\"Observables en lugar de promesas\"></a>Observables en lugar de promesas</h3><p>La naturaleza asíncrona de las comunicaciones entre maquinas se implementó mediante <em>callbacks</em> en JavaScript. Esta forma de programar degenera en código difícil de mantener. Con el tiempo el <strong>patrón promesa</strong> se impuso, y en AngularJS 1.x es la manera recomendada de programar.</p><p>Pero las promesas también tiene sus limitaciones, y ahí aparecen los <strong>observables</strong>. Este patrón requerirá un artículo para el sólo, pero como adelanto se resume en lo siguiente:</p><blockquote><p>Tratar todo tipo de información como un stream observable de entrada y de salida, al cual se le pueden agregar operaciones que procesan los flujos de datos.</p></blockquote><p>Esto encaja muy bien con las comunicaciones <em>http</em> asíncronas y es la razón de su adopción en Angular 2. Un método de servicio par <strong>leer datos REST</strong> se parecerá a este <em>snippet</em>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// las llamadas devuelven observables</span></div><div class=\"line\">leerDatos(): Observable&lt;Response&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Se declara cómo va a ser la llamada </span></div><div class=\"line\">  <span class=\"comment\">// ocultando los pormenores a los consumidores   </span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">    .get(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso`</span>);</div><div class=\"line\">  <span class=\"comment\">// En este momento aún no se efectuó la llamada</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Para enviar información via <em>post</em> o <em>put</em> usaremos una estrategia similar, pero con unos requisitos específicos. En Angular 2 se requiere una configuración previa de las llamadas de escritura. Es engorroso pero fácilmente automatizable. Una típica operación de <strong>escritura REST</strong> sería algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">escribirDatos(unDato): Observable&lt;Response&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Los envíos de información deben configurarse a mano</span></div><div class=\"line\">  <span class=\"comment\">// esto es fácilmente generalizable y reutilizable</span></div><div class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"built_in\">JSON</span>.stringify(unDato);</div><div class=\"line\">  <span class=\"keyword\">let</span> headers = <span class=\"keyword\">new</span> Headers(&#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;);</div><div class=\"line\">  <span class=\"keyword\">let</span> options = <span class=\"keyword\">new</span> RequestOptions(&#123; headers: headers &#125;);</div><div class=\"line\">  <span class=\"comment\">// declarar la llamada y retornar el observable</span></div><div class=\"line\">  <span class=\"comment\">// las variables de configuración y los datos, van como parámetros</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (unDato._id) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">      .put(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso/<span class=\"subst\">$&#123;unDato._id&#125;</span>`</span>, body, options);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http</div><div class=\"line\">      .post(<span class=\"string\">`<span class=\"subst\">$&#123;this.urlBase&#125;</span>/recurso`</span>, body, options);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Por supuesto esto es lo que se programa a bajo nivel, en los <strong>servicios de comunicaciones</strong>. En Angular2 se mantiene la recomendación de bajar a servicios la responsabilidad de las comunicaciones al tiempo que dejamos los componentes lo más ligeros posible.</p><p>Por encima de los servicios de comunicaciones habrá otros servicios de lógica o directamente componentes. En cualquier caso, los consumidores llamarán a métodos que siempre les devolverán objetos observables. Las clases de alto nivel se <strong>suscribirán a esos observables</strong> y procesarán la respuesta recibida… cuando esta esté disponible.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// La carga de datos se hace al iniciarse el componente</span></div><div class=\"line\"><span class=\"comment\">// este es el lugar donde programar lógica de inicio</span></div><div class=\"line\"><span class=\"comment\">// nunca en el constructor</span></div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"comment\">// en el momento de la suscripción es cuando se dispara la llamada</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.datosService</div><div class=\"line\">    .leerDatos()</div><div class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.datos = res.json();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"comment\">// Sería similar en procesos de escritura</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>La clase <code>http</code> no realiza la llamada hasta que algún consumidor se suscriba a la respuesta. Mientras tanto queda como una definición congelada.</p></blockquote><p>El método <code>.subscribe()</code> recibe como argumento un puntero a la respuesta <em>http</em>. Los datos se encuentran en formato <em>JSON</em> y hay que reclamarlos mediante el método <code>.json()</code></p><h3 id=\"Extensiones-en-lugar-de-interceptores\"><a href=\"#Extensiones-en-lugar-de-interceptores\" class=\"headerlink\" title=\"Extensiones en lugar de interceptores\"></a>Extensiones en lugar de interceptores</h3><p>Una de las características destacables de los servicios <code>$http</code> de AngularJS 1.x era la posibilidad de usar <em>interceptores</em>. Estos eran <strong>funciones que se incrustaban durante el envío o recepción</strong> de las comunicaciones.</p><p>Un uso habitual era emplearlos para agregar <strong>cabeceras de seguridad o controlar errores</strong> de comunicación de manera centralizada. Ahora la forma recomendable de hacer eso mismo en Angular2 es mejorar el servicio http extendiéndolo. El servicio derivado resultante implementará los interceptores en funciones llamadas durante la comunicación.</p><p>Esta es una posible implementación con funcionalidad suficiente para facilitar los envíos, detectar errores y enviar cabeceras de seguridad.<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Extensión personalizada de la clase HTTP</span></div><div class=\"line\"><span class=\"comment\"> * Permite la configuración de todas las peticiones</span></div><div class=\"line\"><span class=\"comment\"> * Captura los envíos y respuestas</span></div><div class=\"line\"><span class=\"comment\"> * */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpService <span class=\"keyword\">extends</span> Http &#123;</div><div class=\"line\">  <span class=\"comment\">/** Las direcciones base deberían venir de la configuración del environment*/</span></div><div class=\"line\">  <span class=\"keyword\">public</span> apiProxyUrl = <span class=\"string\">'http://localhost:4030/api/'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> authorization = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\"><span class=\"params\">    backend: XHRBackend,</span></div><div class=\"line\"><span class=\"params\">    defaultOptions: RequestOptions,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> router: Router,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> userStore: SessionStoreService</span></div><div class=\"line\"><span class=\"params\">  </span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(backend, defaultOptions);</div><div class=\"line\">    <span class=\"keyword\">this</span>.subscribeToToken();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Reescribe el método de la clase base, ejecutando acciones para cada petición</span></div><div class=\"line\"><span class=\"comment\">   * La peticiíón en curso puede llegar como una ruta o una clase request</span></div><div class=\"line\"><span class=\"comment\">   * Si viene sólo la cadena, debería traer las opciones aparte</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  request(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs = &#123; headers: <span class=\"keyword\">new</span> Headers() &#125;): Observable&lt;Response&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.configureRequest(request, options);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.interceptResponse(request, options);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> subscribeToToken() &#123;</div><div class=\"line\">    <span class=\"comment\">// suponemos un servicio que nos avisa de la recepción de tokens</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.userStore</div><div class=\"line\">      .getDataObservable()</div><div class=\"line\">      .subscribe(<span class=\"function\">(<span class=\"params\">data: Session</span>) =&gt;</span> <span class=\"keyword\">this</span>.authorization = <span class=\"string\">'Bearer '</span> + data.token);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> configureRequest(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs) &#123;</div><div class=\"line\">    <span class=\"comment\">// Adapta la ruta y asigna cabeceras</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> request === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">      request = <span class=\"keyword\">this</span>.getProxyUrl(request);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setHeaders(options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      request[<span class=\"string\">'url'</span>] = <span class=\"keyword\">this</span>.getProxyUrl(request[<span class=\"string\">'url'</span>]);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setHeaders(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> interceptResponse(request: <span class=\"built_in\">string</span> | Request, options: RequestOptionsArgs) : Observable&lt;Response&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> observableRequest = <span class=\"keyword\">super</span></div><div class=\"line\">      .request(request, options)</div><div class=\"line\">      .catch(<span class=\"keyword\">this</span>.onCatch())</div><div class=\"line\">      .finally(<span class=\"keyword\">this</span>.onFinally());</div><div class=\"line\">    <span class=\"keyword\">return</span> observableRequest;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Transforma la url para llamar a trave´s de un proxy </span></div><div class=\"line\"><span class=\"comment\">   * Útil en caso de problemas con el CORS</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> getProxyUrl(currentUrl) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!currentUrl.includes(<span class=\"string\">'/assets/'</span>)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.apiProxyUrl + currentUrl;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> currentUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Interceptor para componer las cabeceras en cada petición</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> setHeaders(objectToSetHeadersTo: Request | RequestOptionsArgs) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> headers = objectToSetHeadersTo.headers;</div><div class=\"line\">    headers.set(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json'</span>);</div><div class=\"line\">    headers.set(<span class=\"string\">'Authorization'</span>, <span class=\"keyword\">this</span>.authorization);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Interceptor para captura genérica de errores http</span></div><div class=\"line\"><span class=\"comment\">   * */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> onCatch() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">res: Response</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Security errors</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (res.status === <span class=\"number\">401</span> || res.status === <span class=\"number\">403</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// redirigir al usuario para pedir credenciales</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'user/login'</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// To Do: Gestión común de otros errores...</span></div><div class=\"line\">      <span class=\"keyword\">return</span> Observable.throw(res);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> onFinally() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Fin'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>Podemos usarlo de manera transparente en el resto de la aplicación. Sólo se necesita ajustar el registro de proveedores para dirigir al inyector de dependencias hacia esta nueva clase.<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> providers: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    provide: Http, <span class=\"comment\">// reemplaza el servicio del framework</span></div><div class=\"line\">    useClass: HttpService <span class=\"comment\">// con la clase personalizada que lo extiende</span></div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure><p></p><blockquote><p>Este es uno de los usos más potentes de la inversión de control en Angular. Es el programador integrador el que decide el servicio a usar. El programador funcional declara la dependencia en los constructores de sus componentes y servicios, pero no decide la instancia concreta que recibirá.</p></blockquote><p>Angular 2 ha trastocado todo lo que hacíamos en las versiones 1.x, pero sólo en la forma. El fondo sigue siendo el mismo: <strong>el navegador envía y recibe datos en formato JSON que mezcla con plantillas estáticas</strong> para crear HTML en la máquina local y relajar al servidor.</p><p>Por cierto, por ahora ni rastro del viejo <code>$resource</code>. No tardará en aparecer una versión basada en <em>streams observables</em>. Sígueme en <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">mi cuenta de twitter</a> o suscríbete a la <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">revista mensual de Academia Binaria</a> y en cuanto me entere serás el primero en ser informado.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a></p>"},{"title":"DataBinding el flujo de datos de Angular2","id":"13","updated":"2016-11-10T13:56:46.000Z","date":"2016-05-25T15:26:32.000Z","_content":"\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/)\n\n---\n\n> Código asociado en [angular2/3-databinding/](https://github.com/AcademiaBinaria/angular2/tree/master/3-databinding) \n\nEl *doble binding* o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva `ng-model` enganchamos **una propiedad del modelo con un control de la vista**. De manera *automágica* Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía. \n\nPero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del **flujo de datos** entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:\n\n![Flujo de datos](/images/ng2-Flujo-de-datos.jpg)\n\n<!-- more -->\n\n## Sólo lectura: modelo hacia la vista\n### 1- Interpolación\nEn este primer caso todo nos resultará muy familiar. En efecto la sintáxis de interpolación es la mismoa que en AngularJS 1.x. eso si, en este caso y por defecto, los datos son de sólo lectura y Angular no se preocupa de actualizar la variable.\n```html\n     <p>Hola {{nombreDelProgramador}} bienvenido a Angular2</p>\n     <p>Fecha de nacimiento: {{fechaDeNacimiento | date}}</p>\n```\n### 2- Enlace a propiedades\nEs la comunicación básica hacia la vista, hacia el usuario. En este caso cualquier atributo de un elemento HTML puede enlazarse al valor de una propiedad encerrándola entre corchetes y asignándole una expresión. `[propiedad]=\"expresion\"`\n```html\n     <p>Hola <input [value]=\"nombreDelProgramador\" readonly ></input> bienvenido a Angular2</p>\n     <a [href]=\"url-academia-binaria\">Academia Binaria</a>\n     <div [hidden]=\"usuarioAutenticado\">Identifícate</div>     \n     <div [hidden]=\"!usuarioAutenticado\">Hola {{nombreUsuario}}</div>\n```\n\n## Sólo escritura: de la vista hacia el modelo\n### 1- Eventos\nLa comunicación desde la vista hacia el modelo se realiza mediante eventos. Es una buena práctica llamar a funciones del componente de forma declarativa en la vista. \nLa sintaxis requiere que se nombre el evento entre paréntesis y se le asigne una expresión como valor. `(evento)=\"expresion\"`\n```html\n     <input (keyup)=\"onKey($event)\" />\n     <input #nombre\n      (keyup.enter)=\"propiedad=nombre.value\"\n      (blur)=\"propiedad=nombre.value\">\n     <button (click)=lanzarCohete()>Lanzar cohete</button>\n```\n## Lectura y escritura: bidireccional\n### 1- Enlace doble.\nEste es el caso más común en la edición de formularios. Y es el equivalente al viejo y glorioso *doble binding*. Es la combinación de los dos anteriores y eso se refleja en la sintaxis. Recordad `[]` para leer propiedades y `()` para enviar datos en respuesta a eventos: el resultado es la llamada *banana in a box* `[()]`. En este caso se completa con la directiva ngModel y la propiedad enlazada. `[(ngModel)]=\"propiedad\"`\n```html\n  <input type=\"text\"  [(ngModel)]=\"nombreDelProgramador\" >\n  Hola {{nombreDelProgramador}}\n```\n\n## Resumen\nEste es un ejemplo recopilatorio de las capacidades de Angular2 en cuanto a la sintaxis declarativa en las plantillas HTML de los componentes. Recordad este *mantra* que revisaremos durante la composición de componentes en aplicaciones complejas:\n> Los datos fluyen hacia las propiedades de los componentes hijos. Los eventos brotan desde los hijos hacia los padres. Sólo usamos enlace doble en los formularios que así lo requieran.\n\n```html\n<h1>\n  <!--Interpolación de variables definidas en el modelo del componente-->\n  {{title}}\n</h1>\n<form>\n  <label>¿Cómo te llamas?</label>\n  <!--Enlace doble (lectura y escritura) entre la vista y el modelo-->\n  <input type=\"text\" [(ngModel)]=\"aprendiz\" />\n  <p>Bienvenido a Angular 2 {{ aprendiz }} </p>\n  \n  <!--Expresiones-->\n  <p>Soy capaz de multiplicar por {{1 * 2}} tus habilidades </p>\n  <!--Eventos-->\n  <button (click)=\"visible=true\">Saludar</button>\n  <!--Propiedades-->\n  <p [hidden]=\"!visible\">Hola Mundo!!!</p>\n</form>\n```\n\nEn estos ejemplos se han visto propiedades y eventos estándar. Pero todo lo dicho es aplicable a las **propiedades y eventos** especialmente creados para tus componentes.\n\nEl objetivo, conseguido, es aumentar el **rendimiento**. Y un efecto colateral es la **simplificación del API** de AngularJS. Desaparecen casi todas las directivas estructurales. Especialmente las famosas `ng-click ng-blur` y demás directivas asociadas a eventos. Tampoco se necesitan más las directivas de `ng-show` y `ng-hide`.\n\nLas únicas directivas estructurales que permanecen son `*ngIf` `*ngSwitch` y `*ngFor`. Pero esas merecen tratamiento aparte.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/)","source":"_posts/DataBinding-el-flujo-de-datos-de-Angular2.md","raw":"---\ntitle: DataBinding el flujo de datos de Angular2\ntags:  \n- Angular2\n- Forms\n- Tutorial\ncategories:\n- Introducción \npermalink: databinding-el-flujo-de-datos-de-angular2\nid: 13\nupdated: 2016/11/10 14:56:46\ndate: 2016/05/25 17:26:32\n---\n\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/)\n\n---\n\n> Código asociado en [angular2/3-databinding/](https://github.com/AcademiaBinaria/angular2/tree/master/3-databinding) \n\nEl *doble binding* o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva `ng-model` enganchamos **una propiedad del modelo con un control de la vista**. De manera *automágica* Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía. \n\nPero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del **flujo de datos** entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:\n\n![Flujo de datos](/images/ng2-Flujo-de-datos.jpg)\n\n<!-- more -->\n\n## Sólo lectura: modelo hacia la vista\n### 1- Interpolación\nEn este primer caso todo nos resultará muy familiar. En efecto la sintáxis de interpolación es la mismoa que en AngularJS 1.x. eso si, en este caso y por defecto, los datos son de sólo lectura y Angular no se preocupa de actualizar la variable.\n```html\n     <p>Hola {{nombreDelProgramador}} bienvenido a Angular2</p>\n     <p>Fecha de nacimiento: {{fechaDeNacimiento | date}}</p>\n```\n### 2- Enlace a propiedades\nEs la comunicación básica hacia la vista, hacia el usuario. En este caso cualquier atributo de un elemento HTML puede enlazarse al valor de una propiedad encerrándola entre corchetes y asignándole una expresión. `[propiedad]=\"expresion\"`\n```html\n     <p>Hola <input [value]=\"nombreDelProgramador\" readonly ></input> bienvenido a Angular2</p>\n     <a [href]=\"url-academia-binaria\">Academia Binaria</a>\n     <div [hidden]=\"usuarioAutenticado\">Identifícate</div>     \n     <div [hidden]=\"!usuarioAutenticado\">Hola {{nombreUsuario}}</div>\n```\n\n## Sólo escritura: de la vista hacia el modelo\n### 1- Eventos\nLa comunicación desde la vista hacia el modelo se realiza mediante eventos. Es una buena práctica llamar a funciones del componente de forma declarativa en la vista. \nLa sintaxis requiere que se nombre el evento entre paréntesis y se le asigne una expresión como valor. `(evento)=\"expresion\"`\n```html\n     <input (keyup)=\"onKey($event)\" />\n     <input #nombre\n      (keyup.enter)=\"propiedad=nombre.value\"\n      (blur)=\"propiedad=nombre.value\">\n     <button (click)=lanzarCohete()>Lanzar cohete</button>\n```\n## Lectura y escritura: bidireccional\n### 1- Enlace doble.\nEste es el caso más común en la edición de formularios. Y es el equivalente al viejo y glorioso *doble binding*. Es la combinación de los dos anteriores y eso se refleja en la sintaxis. Recordad `[]` para leer propiedades y `()` para enviar datos en respuesta a eventos: el resultado es la llamada *banana in a box* `[()]`. En este caso se completa con la directiva ngModel y la propiedad enlazada. `[(ngModel)]=\"propiedad\"`\n```html\n  <input type=\"text\"  [(ngModel)]=\"nombreDelProgramador\" >\n  Hola {{nombreDelProgramador}}\n```\n\n## Resumen\nEste es un ejemplo recopilatorio de las capacidades de Angular2 en cuanto a la sintaxis declarativa en las plantillas HTML de los componentes. Recordad este *mantra* que revisaremos durante la composición de componentes en aplicaciones complejas:\n> Los datos fluyen hacia las propiedades de los componentes hijos. Los eventos brotan desde los hijos hacia los padres. Sólo usamos enlace doble en los formularios que así lo requieran.\n\n```html\n<h1>\n  <!--Interpolación de variables definidas en el modelo del componente-->\n  {{title}}\n</h1>\n<form>\n  <label>¿Cómo te llamas?</label>\n  <!--Enlace doble (lectura y escritura) entre la vista y el modelo-->\n  <input type=\"text\" [(ngModel)]=\"aprendiz\" />\n  <p>Bienvenido a Angular 2 {{ aprendiz }} </p>\n  \n  <!--Expresiones-->\n  <p>Soy capaz de multiplicar por {{1 * 2}} tus habilidades </p>\n  <!--Eventos-->\n  <button (click)=\"visible=true\">Saludar</button>\n  <!--Propiedades-->\n  <p [hidden]=\"!visible\">Hola Mundo!!!</p>\n</form>\n```\n\nEn estos ejemplos se han visto propiedades y eventos estándar. Pero todo lo dicho es aplicable a las **propiedades y eventos** especialmente creados para tus componentes.\n\nEl objetivo, conseguido, es aumentar el **rendimiento**. Y un efecto colateral es la **simplificación del API** de AngularJS. Desaparecen casi todas las directivas estructurales. Especialmente las famosas `ng-click ng-blur` y demás directivas asociadas a eventos. Tampoco se necesitan más las directivas de `ng-show` y `ng-hide`.\n\nLas únicas directivas estructurales que permanecen son `*ngIf` `*ngSwitch` y `*ngFor`. Pero esas merecen tratamiento aparte.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/)","slug":"databinding-el-flujo-de-datos-de-angular2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvfm000hiwd3kjqdf4ac","content":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a></p></blockquote><hr><blockquote><p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/3-databinding\" target=\"_blank\" rel=\"external\">angular2/3-databinding/</a></p></blockquote><p>El <em>doble binding</em> o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva <code>ng-model</code> enganchamos <strong>una propiedad del modelo con un control de la vista</strong>. De manera <em>automágica</em> Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía.</p><p>Pero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del <strong>flujo de datos</strong> entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:</p><p><img src=\"/images/ng2-Flujo-de-datos.jpg\" alt=\"Flujo de datos\"></p><a id=\"more\"></a><h2 id=\"Solo-lectura-modelo-hacia-la-vista\"><a href=\"#Solo-lectura-modelo-hacia-la-vista\" class=\"headerlink\" title=\"Sólo lectura: modelo hacia la vista\"></a>Sólo lectura: modelo hacia la vista</h2><h3 id=\"1-Interpolacion\"><a href=\"#1-Interpolacion\" class=\"headerlink\" title=\"1- Interpolación\"></a>1- Interpolación</h3><p>En este primer caso todo nos resultará muy familiar. En efecto la sintáxis de interpolación es la mismoa que en AngularJS 1.x. eso si, en este caso y por defecto, los datos son de sólo lectura y Angular no se preocupa de actualizar la variable.<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hola &#123;&#123;nombreDelProgramador&#125;&#125; bienvenido a Angular2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Fecha de nacimiento: &#123;&#123;fechaDeNacimiento | date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h3 id=\"2-Enlace-a-propiedades\"><a href=\"#2-Enlace-a-propiedades\" class=\"headerlink\" title=\"2- Enlace a propiedades\"></a>2- Enlace a propiedades</h3><p>Es la comunicación básica hacia la vista, hacia el usuario. En este caso cualquier atributo de un elemento HTML puede enlazarse al valor de una propiedad encerrándola entre corchetes y asignándole una expresión. <code>[propiedad]=&quot;expresion&quot;</code><br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hola <span class=\"tag\">&lt;<span class=\"name\">input</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"nombreDelProgramador\"</span> <span class=\"attr\">readonly</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span> bienvenido a Angular2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">href</span>]=<span class=\"string\">\"url-academia-binaria\"</span>&gt;</span>Academia Binaria<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"usuarioAutenticado\"</span>&gt;</span>Identifícate<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!usuarioAutenticado\"</span>&gt;</span>Hola &#123;&#123;nombreUsuario&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id=\"Solo-escritura-de-la-vista-hacia-el-modelo\"><a href=\"#Solo-escritura-de-la-vista-hacia-el-modelo\" class=\"headerlink\" title=\"Sólo escritura: de la vista hacia el modelo\"></a>Sólo escritura: de la vista hacia el modelo</h2><h3 id=\"1-Eventos\"><a href=\"#1-Eventos\" class=\"headerlink\" title=\"1- Eventos\"></a>1- Eventos</h3><p>La comunicación desde la vista hacia el modelo se realiza mediante eventos. Es una buena práctica llamar a funciones del componente de forma declarativa en la vista.<br>La sintaxis requiere que se nombre el evento entre paréntesis y se le asigne una expresión como valor. <code>(evento)=&quot;expresion&quot;</code><br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> (<span class=\"attr\">keyup</span>)=<span class=\"string\">\"onKey($event)\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">nombre</span></span></div><div class=\"line\"><span class=\"tag\"> (<span class=\"attr\">keyup.enter</span>)=<span class=\"string\">\"propiedad=nombre.value\"</span></span></div><div class=\"line\"><span class=\"tag\"> (<span class=\"attr\">blur</span>)=<span class=\"string\">\"propiedad=nombre.value\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">lanzarCohete()</span>&gt;</span>Lanzar cohete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id=\"Lectura-y-escritura-bidireccional\"><a href=\"#Lectura-y-escritura-bidireccional\" class=\"headerlink\" title=\"Lectura y escritura: bidireccional\"></a>Lectura y escritura: bidireccional</h2><h3 id=\"1-Enlace-doble\"><a href=\"#1-Enlace-doble\" class=\"headerlink\" title=\"1- Enlace doble.\"></a>1- Enlace doble.</h3><p>Este es el caso más común en la edición de formularios. Y es el equivalente al viejo y glorioso <em>doble binding</em>. Es la combinación de los dos anteriores y eso se refleja en la sintaxis. Recordad <code>[]</code> para leer propiedades y <code>()</code> para enviar datos en respuesta a eventos: el resultado es la llamada <em>banana in a box</em> <code>[()]</code>. En este caso se completa con la directiva ngModel y la propiedad enlazada. <code>[(ngModel)]=&quot;propiedad&quot;</code><br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>  [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"nombreDelProgramador\"</span> &gt;</span></div><div class=\"line\">Hola &#123;&#123;nombreDelProgramador&#125;&#125;</div></pre></td></tr></table></figure><p></p><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>Este es un ejemplo recopilatorio de las capacidades de Angular2 en cuanto a la sintaxis declarativa en las plantillas HTML de los componentes. Recordad este <em>mantra</em> que revisaremos durante la composición de componentes en aplicaciones complejas:</p><blockquote><p>Los datos fluyen hacia las propiedades de los componentes hijos. Los eventos brotan desde los hijos hacia los padres. Sólo usamos enlace doble en los formularios que así lo requieran.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Interpolación de variables definidas en el modelo del componente--&gt;</span></div><div class=\"line\">  &#123;&#123;title&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>¿Cómo te llamas?<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Enlace doble (lectura y escritura) entre la vista y el modelo--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"aprendiz\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Bienvenido a Angular 2 &#123;&#123; aprendiz &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">&lt;!--Expresiones--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soy capaz de multiplicar por &#123;&#123;1 * 2&#125;&#125; tus habilidades <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Eventos--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"visible=true\"</span>&gt;</span>Saludar<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Propiedades--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!visible\"</span>&gt;</span>Hola Mundo!!!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><p>En estos ejemplos se han visto propiedades y eventos estándar. Pero todo lo dicho es aplicable a las <strong>propiedades y eventos</strong> especialmente creados para tus componentes.</p><p>El objetivo, conseguido, es aumentar el <strong>rendimiento</strong>. Y un efecto colateral es la <strong>simplificación del API</strong> de AngularJS. Desaparecen casi todas las directivas estructurales. Especialmente las famosas <code>ng-click ng-blur</code> y demás directivas asociadas a eventos. Tampoco se necesitan más las directivas de <code>ng-show</code> y <code>ng-hide</code>.</p><p>Las únicas directivas estructurales que permanecen son <code>*ngIf</code> <code>*ngSwitch</code> y <code>*ngFor</code>. Pero esas merecen tratamiento aparte.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a></p>","site":{"data":{}},"excerpt":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a></p></blockquote><hr><blockquote><p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/3-databinding\" target=\"_blank\" rel=\"external\">angular2/3-databinding/</a></p></blockquote><p>El <em>doble binding</em> o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva <code>ng-model</code> enganchamos <strong>una propiedad del modelo con un control de la vista</strong>. De manera <em>automágica</em> Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía.</p><p>Pero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del <strong>flujo de datos</strong> entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:</p><p><img src=\"/images/ng2-Flujo-de-datos.jpg\" alt=\"Flujo de datos\"></p>","more":"<h2 id=\"Solo-lectura-modelo-hacia-la-vista\"><a href=\"#Solo-lectura-modelo-hacia-la-vista\" class=\"headerlink\" title=\"Sólo lectura: modelo hacia la vista\"></a>Sólo lectura: modelo hacia la vista</h2><h3 id=\"1-Interpolacion\"><a href=\"#1-Interpolacion\" class=\"headerlink\" title=\"1- Interpolación\"></a>1- Interpolación</h3><p>En este primer caso todo nos resultará muy familiar. En efecto la sintáxis de interpolación es la mismoa que en AngularJS 1.x. eso si, en este caso y por defecto, los datos son de sólo lectura y Angular no se preocupa de actualizar la variable.<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hola &#123;&#123;nombreDelProgramador&#125;&#125; bienvenido a Angular2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Fecha de nacimiento: &#123;&#123;fechaDeNacimiento | date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h3 id=\"2-Enlace-a-propiedades\"><a href=\"#2-Enlace-a-propiedades\" class=\"headerlink\" title=\"2- Enlace a propiedades\"></a>2- Enlace a propiedades</h3><p>Es la comunicación básica hacia la vista, hacia el usuario. En este caso cualquier atributo de un elemento HTML puede enlazarse al valor de una propiedad encerrándola entre corchetes y asignándole una expresión. <code>[propiedad]=&quot;expresion&quot;</code><br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hola <span class=\"tag\">&lt;<span class=\"name\">input</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"nombreDelProgramador\"</span> <span class=\"attr\">readonly</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span> bienvenido a Angular2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">href</span>]=<span class=\"string\">\"url-academia-binaria\"</span>&gt;</span>Academia Binaria<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"usuarioAutenticado\"</span>&gt;</span>Identifícate<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!usuarioAutenticado\"</span>&gt;</span>Hola &#123;&#123;nombreUsuario&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id=\"Solo-escritura-de-la-vista-hacia-el-modelo\"><a href=\"#Solo-escritura-de-la-vista-hacia-el-modelo\" class=\"headerlink\" title=\"Sólo escritura: de la vista hacia el modelo\"></a>Sólo escritura: de la vista hacia el modelo</h2><h3 id=\"1-Eventos\"><a href=\"#1-Eventos\" class=\"headerlink\" title=\"1- Eventos\"></a>1- Eventos</h3><p>La comunicación desde la vista hacia el modelo se realiza mediante eventos. Es una buena práctica llamar a funciones del componente de forma declarativa en la vista.<br>La sintaxis requiere que se nombre el evento entre paréntesis y se le asigne una expresión como valor. <code>(evento)=&quot;expresion&quot;</code><br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> (<span class=\"attr\">keyup</span>)=<span class=\"string\">\"onKey($event)\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">nombre</span></span></div><div class=\"line\"><span class=\"tag\"> (<span class=\"attr\">keyup.enter</span>)=<span class=\"string\">\"propiedad=nombre.value\"</span></span></div><div class=\"line\"><span class=\"tag\"> (<span class=\"attr\">blur</span>)=<span class=\"string\">\"propiedad=nombre.value\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">lanzarCohete()</span>&gt;</span>Lanzar cohete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id=\"Lectura-y-escritura-bidireccional\"><a href=\"#Lectura-y-escritura-bidireccional\" class=\"headerlink\" title=\"Lectura y escritura: bidireccional\"></a>Lectura y escritura: bidireccional</h2><h3 id=\"1-Enlace-doble\"><a href=\"#1-Enlace-doble\" class=\"headerlink\" title=\"1- Enlace doble.\"></a>1- Enlace doble.</h3><p>Este es el caso más común en la edición de formularios. Y es el equivalente al viejo y glorioso <em>doble binding</em>. Es la combinación de los dos anteriores y eso se refleja en la sintaxis. Recordad <code>[]</code> para leer propiedades y <code>()</code> para enviar datos en respuesta a eventos: el resultado es la llamada <em>banana in a box</em> <code>[()]</code>. En este caso se completa con la directiva ngModel y la propiedad enlazada. <code>[(ngModel)]=&quot;propiedad&quot;</code><br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>  [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"nombreDelProgramador\"</span> &gt;</span></div><div class=\"line\">Hola &#123;&#123;nombreDelProgramador&#125;&#125;</div></pre></td></tr></table></figure><p></p><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>Este es un ejemplo recopilatorio de las capacidades de Angular2 en cuanto a la sintaxis declarativa en las plantillas HTML de los componentes. Recordad este <em>mantra</em> que revisaremos durante la composición de componentes en aplicaciones complejas:</p><blockquote><p>Los datos fluyen hacia las propiedades de los componentes hijos. Los eventos brotan desde los hijos hacia los padres. Sólo usamos enlace doble en los formularios que así lo requieran.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Interpolación de variables definidas en el modelo del componente--&gt;</span></div><div class=\"line\">  &#123;&#123;title&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>¿Cómo te llamas?<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Enlace doble (lectura y escritura) entre la vista y el modelo--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"aprendiz\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Bienvenido a Angular 2 &#123;&#123; aprendiz &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">&lt;!--Expresiones--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soy capaz de multiplicar por &#123;&#123;1 * 2&#125;&#125; tus habilidades <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Eventos--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"visible=true\"</span>&gt;</span>Saludar<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Propiedades--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!visible\"</span>&gt;</span>Hola Mundo!!!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><p>En estos ejemplos se han visto propiedades y eventos estándar. Pero todo lo dicho es aplicable a las <strong>propiedades y eventos</strong> especialmente creados para tus componentes.</p><p>El objetivo, conseguido, es aumentar el <strong>rendimiento</strong>. Y un efecto colateral es la <strong>simplificación del API</strong> de AngularJS. Desaparecen casi todas las directivas estructurales. Especialmente las famosas <code>ng-click ng-blur</code> y demás directivas asociadas a eventos. Tampoco se necesitan más las directivas de <code>ng-show</code> y <code>ng-hide</code>.</p><p>Las únicas directivas estructurales que permanecen son <code>*ngIf</code> <code>*ngSwitch</code> y <code>*ngFor</code>. Pero esas merecen tratamiento aparte.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a></p>"},{"title":"Componentes, los bloques de construcción de Angular2","id":"26","updated":"2016-11-07T17:39:26.000Z","date":"2016-05-23T12:07:27.000Z","_content":"\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Base para una aplicación Angular](../base-aplicacion-angular/)\n\n---\n\n>Código asociado en GitHub: [angular2/2-modulos/](https://github.com/AcademiaBinaria/angular2/tree/master/2-modulos) \n\nLos componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora **el componente es el rey**.\n\nLas aplicaciones en Angular2 se desarrollan como **árboles de componentes**. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en **módulos** para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.\n\n* 1- Nivel **Raíz**:\nToda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo `App` o simplemente `App`. \n* 2- Nivel **Troncal**:\nGeneralmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón *Navegador-Contenedor*, con algún elemento auxiliar para ayudas, mensajes, menús complejos... \n* 3- Nivel de **Ramas**:\nEn este símil, las ramas equivalen a rutas o vistas de la aplicación. En un *SPA* cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor \n* 4- Nivel de **Hojas**:\nCada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas. \n\n![Árbol de componentes en una aplicación Angular 2](/images/ng2-Arbol-de-componentes.jpg)\n\n>Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.\n\n<!-- more -->\n\n## Módulos\n\nLos árboles de componentes pueden ocultarnos fácilmente el bosque de nuestra aplicación. **Los módulos son agrupaciones de componentes.** Nos ayudan a mantener un orden y a encapsular funcionalidad para crear aplicaciones desacopladas con bloques re-utilizables.\n\n> No confundir con los módulos de *JavaScript ES6* o de T*ypeScript*. En estos casos se les llama módulos a los ficheros de código que exportan funcionalidad. \n\nPodemos imaginar un módulo como una fábrica de funcionalidad.\n1. **Importa** componentes que otros módulos exportan.\n2. **Declara** los componentes que el mismo fabrica.  \n3. **Exporta** algunos de estos componentes, para que los consuman otros módulos.\n\n\n### Anatomía de un Componente\nEn el artículo de [bienvenida a Angular 2](http://academia-binaria.com/hola-mundo-en-angular-2/) teníamos una aplicación de un sólo módulo con un sólo componente. Y nos sirvió para ver su **estructura**: plantilla, decorador y clase.\n\n![Estructura interna de un componente Angular 2](/images/ng2Component--1-.jpg)\n\nLa **plantilla** en HTML y la **clase** en JS equivalen a las antiguas vistas y controladores. La **metadata** une ambos mundos y registra el componente para que interacciones con el resto del mundo Angular. \n\n>La comunicación de datos entre la plantilla y el componente se realiza siguiendo un remozado workflow de propiedades y eventos. El nuevo *data-binding* de Angular2 merece estudio en detalle pues su sintaxis ha cambiado para poder estar a la altura del rendimiento exigido. \n\n\n\n\n### Generación de módulos y componentes con angular-cli\n\nSobre la base de ese 'Hola Mundo' vamos construir una mini aplicación muy sencilla para guardar movimientos económicos. El *To Do List* de los ingresos y gastos. \n\nEmpezaré creando **otro módulo con su componente para ser integrado** en el componente raíz del módulo raíz. Por ahora será un componente de negocio vacío: el componente `movimientos`. Puedes escribir a mano cada nuevo módulo o componente, pero si usas [Angular CLI](https://cli.angular.io/) lo tendrás generado con un sólo comando:\n\n```bash \nng g m movimientos\n``` \n\nVerás que se ha creado una carpeta llamada `movimientos` con una estructura que pronto te será muy familiar. Para empezar un archivo para el nuevo módulo, el `movimientos-module.ts`. Después una serie de ficheros para crear su componente principal. Un fichero `movimientos-component.ts` para la clase controladora y el decorador con la *metadata*, y otro fichero `movimientos-component.html` para la plantilla.\n\nReproduzco ahora su contenido básico. Primero la plantilla HTML\n\n```html\n<p>\n  movimientos works!\n</p>\n```\nY ahora la definición del componente en *TypeScript*. El cual no sabe en qué módulo acabará.\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\n// decoración con metadata para el componente\n@Component({\n  selector: 'app-movimientos', // ojo al prefijo, por defecto app\n  templateUrl: './movimientos.component.html', // podrían ser inline\n  styleUrls: ['./movimientos.component.css'] // podrían ser inline\n})\nexport class MovimientosComponent implements OnInit {\n  constructor() { }\n  ngOnInit() {\n  }\n}\n```\n\nPara que este componente sea conocido ha de estar al menos declarado y exportado en algún módulo. En este caso aparece en el fichero `movimientos-module.ts`\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Importa un componente que declara y que luego exporta */\nimport { MovimientosComponent } from './movimientos.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],// dependencias de otros módulos\n  declarations: [\n    MovimientosComponent\n  ],// Componente que el módulo mismo declara\n  exports: [\n    MovimientosComponent\n  ] // exporta los componentes importables desde otros módulos\n})\nexport class MovimientosModule { }\n```\n\n### Consumo desde un componente padre\nEl componente `movimientos` está creado pero nadie lo usa. Para darle utilidad hay que consumirlo. Vamos tocar los ficheros 'app.module.ts' y 'app.component.html' Son siempre estos tres sencillos pasos:\n\n* 1- Importar el módulo que lo exporta\n```javascript\n// 1 importación del código del módulo funcional\nimport { MovimientosModule } from './movimientos/movimientos.module';\n```\n* 2- Registro en el array de importaciones del módulo raíz\n```javascript\n...\nimports:[..., MovimientosModule] // 2 registro del modulo importado con todo lo que exporta\n...\n```\n* 3- Uso del componente como un elemento html en la plantilla del padre\n```html\n<h1>\n  <!--enlace con propiedades del componente-->\n  {{title}}\n</h1>\n<!-- 3 los componentes personalizados se usan como elementos estándar en html-->\n<!--componente movimientos-->\n<app-movimientos></app-movimientos>\n```\n\n\nEsta manera de encapsular componentes unos dentro de otros permite crear **grandes aplicaciones de tamaño empresarial** sin sacrificar la limpieza del código. Cada componente debe diseñarse de forma que resuelva un problema de negocio concreto, por tanto manejable. Y si puede ser **reutilizable** mucho mejor.\n\nLa agrupación de componentes en módulos ayuda a mantener la aplicación organizada.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Base para una aplicación Angular](../base-aplicacion-angular/)","source":"_posts/Componentes-los-bloques-de-construccion-de-Angular2.md","raw":"---\ntitle: 'Componentes, los bloques de construcción de Angular2'\ntags:  \n- Angular2\n- CLI\n- Tutorial\ncategories:\n- Introducción \npermalink: componentes-los-bloques-de-construccion-de-angular-2\nid: 26\nupdated: 2016/11/07 18:39:26\ndate: 2016/05/23 14:07:27\n---\n\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Base para una aplicación Angular](../base-aplicacion-angular/)\n\n---\n\n>Código asociado en GitHub: [angular2/2-modulos/](https://github.com/AcademiaBinaria/angular2/tree/master/2-modulos) \n\nLos componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora **el componente es el rey**.\n\nLas aplicaciones en Angular2 se desarrollan como **árboles de componentes**. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en **módulos** para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.\n\n* 1- Nivel **Raíz**:\nToda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo `App` o simplemente `App`. \n* 2- Nivel **Troncal**:\nGeneralmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón *Navegador-Contenedor*, con algún elemento auxiliar para ayudas, mensajes, menús complejos... \n* 3- Nivel de **Ramas**:\nEn este símil, las ramas equivalen a rutas o vistas de la aplicación. En un *SPA* cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor \n* 4- Nivel de **Hojas**:\nCada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas. \n\n![Árbol de componentes en una aplicación Angular 2](/images/ng2-Arbol-de-componentes.jpg)\n\n>Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.\n\n<!-- more -->\n\n## Módulos\n\nLos árboles de componentes pueden ocultarnos fácilmente el bosque de nuestra aplicación. **Los módulos son agrupaciones de componentes.** Nos ayudan a mantener un orden y a encapsular funcionalidad para crear aplicaciones desacopladas con bloques re-utilizables.\n\n> No confundir con los módulos de *JavaScript ES6* o de T*ypeScript*. En estos casos se les llama módulos a los ficheros de código que exportan funcionalidad. \n\nPodemos imaginar un módulo como una fábrica de funcionalidad.\n1. **Importa** componentes que otros módulos exportan.\n2. **Declara** los componentes que el mismo fabrica.  \n3. **Exporta** algunos de estos componentes, para que los consuman otros módulos.\n\n\n### Anatomía de un Componente\nEn el artículo de [bienvenida a Angular 2](http://academia-binaria.com/hola-mundo-en-angular-2/) teníamos una aplicación de un sólo módulo con un sólo componente. Y nos sirvió para ver su **estructura**: plantilla, decorador y clase.\n\n![Estructura interna de un componente Angular 2](/images/ng2Component--1-.jpg)\n\nLa **plantilla** en HTML y la **clase** en JS equivalen a las antiguas vistas y controladores. La **metadata** une ambos mundos y registra el componente para que interacciones con el resto del mundo Angular. \n\n>La comunicación de datos entre la plantilla y el componente se realiza siguiendo un remozado workflow de propiedades y eventos. El nuevo *data-binding* de Angular2 merece estudio en detalle pues su sintaxis ha cambiado para poder estar a la altura del rendimiento exigido. \n\n\n\n\n### Generación de módulos y componentes con angular-cli\n\nSobre la base de ese 'Hola Mundo' vamos construir una mini aplicación muy sencilla para guardar movimientos económicos. El *To Do List* de los ingresos y gastos. \n\nEmpezaré creando **otro módulo con su componente para ser integrado** en el componente raíz del módulo raíz. Por ahora será un componente de negocio vacío: el componente `movimientos`. Puedes escribir a mano cada nuevo módulo o componente, pero si usas [Angular CLI](https://cli.angular.io/) lo tendrás generado con un sólo comando:\n\n```bash \nng g m movimientos\n``` \n\nVerás que se ha creado una carpeta llamada `movimientos` con una estructura que pronto te será muy familiar. Para empezar un archivo para el nuevo módulo, el `movimientos-module.ts`. Después una serie de ficheros para crear su componente principal. Un fichero `movimientos-component.ts` para la clase controladora y el decorador con la *metadata*, y otro fichero `movimientos-component.html` para la plantilla.\n\nReproduzco ahora su contenido básico. Primero la plantilla HTML\n\n```html\n<p>\n  movimientos works!\n</p>\n```\nY ahora la definición del componente en *TypeScript*. El cual no sabe en qué módulo acabará.\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\n// decoración con metadata para el componente\n@Component({\n  selector: 'app-movimientos', // ojo al prefijo, por defecto app\n  templateUrl: './movimientos.component.html', // podrían ser inline\n  styleUrls: ['./movimientos.component.css'] // podrían ser inline\n})\nexport class MovimientosComponent implements OnInit {\n  constructor() { }\n  ngOnInit() {\n  }\n}\n```\n\nPara que este componente sea conocido ha de estar al menos declarado y exportado en algún módulo. En este caso aparece en el fichero `movimientos-module.ts`\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Importa un componente que declara y que luego exporta */\nimport { MovimientosComponent } from './movimientos.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],// dependencias de otros módulos\n  declarations: [\n    MovimientosComponent\n  ],// Componente que el módulo mismo declara\n  exports: [\n    MovimientosComponent\n  ] // exporta los componentes importables desde otros módulos\n})\nexport class MovimientosModule { }\n```\n\n### Consumo desde un componente padre\nEl componente `movimientos` está creado pero nadie lo usa. Para darle utilidad hay que consumirlo. Vamos tocar los ficheros 'app.module.ts' y 'app.component.html' Son siempre estos tres sencillos pasos:\n\n* 1- Importar el módulo que lo exporta\n```javascript\n// 1 importación del código del módulo funcional\nimport { MovimientosModule } from './movimientos/movimientos.module';\n```\n* 2- Registro en el array de importaciones del módulo raíz\n```javascript\n...\nimports:[..., MovimientosModule] // 2 registro del modulo importado con todo lo que exporta\n...\n```\n* 3- Uso del componente como un elemento html en la plantilla del padre\n```html\n<h1>\n  <!--enlace con propiedades del componente-->\n  {{title}}\n</h1>\n<!-- 3 los componentes personalizados se usan como elementos estándar en html-->\n<!--componente movimientos-->\n<app-movimientos></app-movimientos>\n```\n\n\nEsta manera de encapsular componentes unos dentro de otros permite crear **grandes aplicaciones de tamaño empresarial** sin sacrificar la limpieza del código. Cada componente debe diseñarse de forma que resuelva un problema de negocio concreto, por tanto manejable. Y si puede ser **reutilizable** mucho mejor.\n\nLa agrupación de componentes en módulos ayuda a mantener la aplicación organizada.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Base para una aplicación Angular](../base-aplicacion-angular/)","slug":"componentes-los-bloques-de-construccion-de-angular-2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvg1000jiwd31vpe6o8t","content":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a></p></blockquote><hr><blockquote><p>Código asociado en GitHub: <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/2-modulos\" target=\"_blank\" rel=\"external\">angular2/2-modulos/</a></p></blockquote><p>Los componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora <strong>el componente es el rey</strong>.</p><p>Las aplicaciones en Angular2 se desarrollan como <strong>árboles de componentes</strong>. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en <strong>módulos</strong> para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.</p><ul><li>1- Nivel <strong>Raíz</strong>:<br>Toda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo <code>App</code> o simplemente <code>App</code>.</li><li>2- Nivel <strong>Troncal</strong>:<br>Generalmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón <em>Navegador-Contenedor</em>, con algún elemento auxiliar para ayudas, mensajes, menús complejos…</li><li>3- Nivel de <strong>Ramas</strong>:<br>En este símil, las ramas equivalen a rutas o vistas de la aplicación. En un <em>SPA</em> cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor</li><li>4- Nivel de <strong>Hojas</strong>:<br>Cada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas.</li></ul><p><img src=\"/images/ng2-Arbol-de-componentes.jpg\" alt=\"Árbol de componentes en una aplicación Angular 2\"></p><blockquote><p>Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.</p></blockquote><a id=\"more\"></a><h2 id=\"Modulos\"><a href=\"#Modulos\" class=\"headerlink\" title=\"Módulos\"></a>Módulos</h2><p>Los árboles de componentes pueden ocultarnos fácilmente el bosque de nuestra aplicación. <strong>Los módulos son agrupaciones de componentes.</strong> Nos ayudan a mantener un orden y a encapsular funcionalidad para crear aplicaciones desacopladas con bloques re-utilizables.</p><blockquote><p>No confundir con los módulos de <em>JavaScript ES6</em> o de T<em>ypeScript</em>. En estos casos se les llama módulos a los ficheros de código que exportan funcionalidad.</p></blockquote><p>Podemos imaginar un módulo como una fábrica de funcionalidad.</p><ol><li><strong>Importa</strong> componentes que otros módulos exportan.</li><li><strong>Declara</strong> los componentes que el mismo fabrica.</li><li><strong>Exporta</strong> algunos de estos componentes, para que los consuman otros módulos.</li></ol><h3 id=\"Anatomia-de-un-Componente\"><a href=\"#Anatomia-de-un-Componente\" class=\"headerlink\" title=\"Anatomía de un Componente\"></a>Anatomía de un Componente</h3><p>En el artículo de <a href=\"http://academia-binaria.com/hola-mundo-en-angular-2/\">bienvenida a Angular 2</a> teníamos una aplicación de un sólo módulo con un sólo componente. Y nos sirvió para ver su <strong>estructura</strong>: plantilla, decorador y clase.</p><p><img src=\"/images/ng2Component--1-.jpg\" alt=\"Estructura interna de un componente Angular 2\"></p><p>La <strong>plantilla</strong> en HTML y la <strong>clase</strong> en JS equivalen a las antiguas vistas y controladores. La <strong>metadata</strong> une ambos mundos y registra el componente para que interacciones con el resto del mundo Angular.</p><blockquote><p>La comunicación de datos entre la plantilla y el componente se realiza siguiendo un remozado workflow de propiedades y eventos. El nuevo <em>data-binding</em> de Angular2 merece estudio en detalle pues su sintaxis ha cambiado para poder estar a la altura del rendimiento exigido.</p></blockquote><h3 id=\"Generacion-de-modulos-y-componentes-con-angular-cli\"><a href=\"#Generacion-de-modulos-y-componentes-con-angular-cli\" class=\"headerlink\" title=\"Generación de módulos y componentes con angular-cli\"></a>Generación de módulos y componentes con angular-cli</h3><p>Sobre la base de ese ‘Hola Mundo’ vamos construir una mini aplicación muy sencilla para guardar movimientos económicos. El <em>To Do List</em> de los ingresos y gastos.</p><p>Empezaré creando <strong>otro módulo con su componente para ser integrado</strong> en el componente raíz del módulo raíz. Por ahora será un componente de negocio vacío: el componente <code>movimientos</code>. Puedes escribir a mano cada nuevo módulo o componente, pero si usas <a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a> lo tendrás generado con un sólo comando:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g m movimientos</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">Verás que se ha creado una carpeta llamada `movimientos` con una estructura que pronto te será muy familiar. Para empezar un archivo para el nuevo módulo, el `movimientos-module.ts`. Después una serie de ficheros para crear su componente principal. Un fichero `movimientos-component.ts` para la clase controladora y el decorador con la *metadata*, y otro fichero `movimientos-component.html` para la plantilla.</div><div class=\"line\"></div><div class=\"line\">Reproduzco ahora su contenido básico. Primero la plantilla HTML</div><div class=\"line\"></div><div class=\"line\">```html</div><div class=\"line\">&lt;p&gt;</div><div class=\"line\">  movimientos works!</div><div class=\"line\">&lt;/p&gt;</div></pre></td></tr></table></figure><p>Y ahora la definición del componente en <em>TypeScript</em>. El cual no sabe en qué módulo acabará.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// decoración con metadata para el componente</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-movimientos'</span>, <span class=\"comment\">// ojo al prefijo, por defecto app</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./movimientos.component.html'</span>, <span class=\"comment\">// podrían ser inline</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./movimientos.component.css'</span>] <span class=\"comment\">// podrían ser inline</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientosComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123; &#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Para que este componente sea conocido ha de estar al menos declarado y exportado en algún módulo. En este caso aparece en el fichero <code>movimientos-module.ts</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Importa un componente que declara y que luego exporta */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos.component'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule</div><div class=\"line\">  ],<span class=\"comment\">// dependencias de otros módulos</span></div><div class=\"line\">  declarations: [</div><div class=\"line\">    MovimientosComponent</div><div class=\"line\">  ],<span class=\"comment\">// Componente que el módulo mismo declara</span></div><div class=\"line\">  exports: [</div><div class=\"line\">    MovimientosComponent</div><div class=\"line\">  ] <span class=\"comment\">// exporta los componentes importables desde otros módulos</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientosModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><h3 id=\"Consumo-desde-un-componente-padre\"><a href=\"#Consumo-desde-un-componente-padre\" class=\"headerlink\" title=\"Consumo desde un componente padre\"></a>Consumo desde un componente padre</h3><p>El componente <code>movimientos</code> está creado pero nadie lo usa. Para darle utilidad hay que consumirlo. Vamos tocar los ficheros ‘app.module.ts’ y ‘app.component.html’ Son siempre estos tres sencillos pasos:</p><ul><li><p>1- Importar el módulo que lo exporta</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1 importación del código del módulo funcional</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos/movimientos.module'</span>;</div></pre></td></tr></table></figure></li><li><p>2- Registro en el array de importaciones del módulo raíz</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">imports:[..., MovimientosModule] <span class=\"comment\">// 2 registro del modulo importado con todo lo que exporta</span></div><div class=\"line\">...</div></pre></td></tr></table></figure></li><li><p>3- Uso del componente como un elemento html en la plantilla del padre</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--enlace con propiedades del componente--&gt;</span></div><div class=\"line\">  &#123;&#123;title&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 3 los componentes personalizados se usan como elementos estándar en html--&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--componente movimientos--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-movimientos</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-movimientos</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p>Esta manera de encapsular componentes unos dentro de otros permite crear <strong>grandes aplicaciones de tamaño empresarial</strong> sin sacrificar la limpieza del código. Cada componente debe diseñarse de forma que resuelva un problema de negocio concreto, por tanto manejable. Y si puede ser <strong>reutilizable</strong> mucho mejor.</p><p>La agrupación de componentes en módulos ayuda a mantener la aplicación organizada.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a></p>","site":{"data":{}},"excerpt":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a></p></blockquote><hr><blockquote><p>Código asociado en GitHub: <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/2-modulos\" target=\"_blank\" rel=\"external\">angular2/2-modulos/</a></p></blockquote><p>Los componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora <strong>el componente es el rey</strong>.</p><p>Las aplicaciones en Angular2 se desarrollan como <strong>árboles de componentes</strong>. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en <strong>módulos</strong> para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.</p><ul><li>1- Nivel <strong>Raíz</strong>:<br>Toda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo <code>App</code> o simplemente <code>App</code>.</li><li>2- Nivel <strong>Troncal</strong>:<br>Generalmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón <em>Navegador-Contenedor</em>, con algún elemento auxiliar para ayudas, mensajes, menús complejos…</li><li>3- Nivel de <strong>Ramas</strong>:<br>En este símil, las ramas equivalen a rutas o vistas de la aplicación. En un <em>SPA</em> cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor</li><li>4- Nivel de <strong>Hojas</strong>:<br>Cada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas.</li></ul><p><img src=\"/images/ng2-Arbol-de-componentes.jpg\" alt=\"Árbol de componentes en una aplicación Angular 2\"></p><blockquote><p>Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.</p></blockquote>","more":"<h2 id=\"Modulos\"><a href=\"#Modulos\" class=\"headerlink\" title=\"Módulos\"></a>Módulos</h2><p>Los árboles de componentes pueden ocultarnos fácilmente el bosque de nuestra aplicación. <strong>Los módulos son agrupaciones de componentes.</strong> Nos ayudan a mantener un orden y a encapsular funcionalidad para crear aplicaciones desacopladas con bloques re-utilizables.</p><blockquote><p>No confundir con los módulos de <em>JavaScript ES6</em> o de T<em>ypeScript</em>. En estos casos se les llama módulos a los ficheros de código que exportan funcionalidad.</p></blockquote><p>Podemos imaginar un módulo como una fábrica de funcionalidad.</p><ol><li><strong>Importa</strong> componentes que otros módulos exportan.</li><li><strong>Declara</strong> los componentes que el mismo fabrica.</li><li><strong>Exporta</strong> algunos de estos componentes, para que los consuman otros módulos.</li></ol><h3 id=\"Anatomia-de-un-Componente\"><a href=\"#Anatomia-de-un-Componente\" class=\"headerlink\" title=\"Anatomía de un Componente\"></a>Anatomía de un Componente</h3><p>En el artículo de <a href=\"http://academia-binaria.com/hola-mundo-en-angular-2/\">bienvenida a Angular 2</a> teníamos una aplicación de un sólo módulo con un sólo componente. Y nos sirvió para ver su <strong>estructura</strong>: plantilla, decorador y clase.</p><p><img src=\"/images/ng2Component--1-.jpg\" alt=\"Estructura interna de un componente Angular 2\"></p><p>La <strong>plantilla</strong> en HTML y la <strong>clase</strong> en JS equivalen a las antiguas vistas y controladores. La <strong>metadata</strong> une ambos mundos y registra el componente para que interacciones con el resto del mundo Angular.</p><blockquote><p>La comunicación de datos entre la plantilla y el componente se realiza siguiendo un remozado workflow de propiedades y eventos. El nuevo <em>data-binding</em> de Angular2 merece estudio en detalle pues su sintaxis ha cambiado para poder estar a la altura del rendimiento exigido.</p></blockquote><h3 id=\"Generacion-de-modulos-y-componentes-con-angular-cli\"><a href=\"#Generacion-de-modulos-y-componentes-con-angular-cli\" class=\"headerlink\" title=\"Generación de módulos y componentes con angular-cli\"></a>Generación de módulos y componentes con angular-cli</h3><p>Sobre la base de ese ‘Hola Mundo’ vamos construir una mini aplicación muy sencilla para guardar movimientos económicos. El <em>To Do List</em> de los ingresos y gastos.</p><p>Empezaré creando <strong>otro módulo con su componente para ser integrado</strong> en el componente raíz del módulo raíz. Por ahora será un componente de negocio vacío: el componente <code>movimientos</code>. Puedes escribir a mano cada nuevo módulo o componente, pero si usas <a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a> lo tendrás generado con un sólo comando:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g m movimientos</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">Verás que se ha creado una carpeta llamada `movimientos` con una estructura que pronto te será muy familiar. Para empezar un archivo para el nuevo módulo, el `movimientos-module.ts`. Después una serie de ficheros para crear su componente principal. Un fichero `movimientos-component.ts` para la clase controladora y el decorador con la *metadata*, y otro fichero `movimientos-component.html` para la plantilla.</div><div class=\"line\"></div><div class=\"line\">Reproduzco ahora su contenido básico. Primero la plantilla HTML</div><div class=\"line\"></div><div class=\"line\">```html</div><div class=\"line\">&lt;p&gt;</div><div class=\"line\">  movimientos works!</div><div class=\"line\">&lt;/p&gt;</div></pre></td></tr></table></figure><p>Y ahora la definición del componente en <em>TypeScript</em>. El cual no sabe en qué módulo acabará.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// decoración con metadata para el componente</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-movimientos'</span>, <span class=\"comment\">// ojo al prefijo, por defecto app</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./movimientos.component.html'</span>, <span class=\"comment\">// podrían ser inline</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./movimientos.component.css'</span>] <span class=\"comment\">// podrían ser inline</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientosComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123; &#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Para que este componente sea conocido ha de estar al menos declarado y exportado en algún módulo. En este caso aparece en el fichero <code>movimientos-module.ts</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Importa un componente que declara y que luego exporta */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos.component'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule</div><div class=\"line\">  ],<span class=\"comment\">// dependencias de otros módulos</span></div><div class=\"line\">  declarations: [</div><div class=\"line\">    MovimientosComponent</div><div class=\"line\">  ],<span class=\"comment\">// Componente que el módulo mismo declara</span></div><div class=\"line\">  exports: [</div><div class=\"line\">    MovimientosComponent</div><div class=\"line\">  ] <span class=\"comment\">// exporta los componentes importables desde otros módulos</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovimientosModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><h3 id=\"Consumo-desde-un-componente-padre\"><a href=\"#Consumo-desde-un-componente-padre\" class=\"headerlink\" title=\"Consumo desde un componente padre\"></a>Consumo desde un componente padre</h3><p>El componente <code>movimientos</code> está creado pero nadie lo usa. Para darle utilidad hay que consumirlo. Vamos tocar los ficheros ‘app.module.ts’ y ‘app.component.html’ Son siempre estos tres sencillos pasos:</p><ul><li><p>1- Importar el módulo que lo exporta</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1 importación del código del módulo funcional</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos/movimientos.module'</span>;</div></pre></td></tr></table></figure></li><li><p>2- Registro en el array de importaciones del módulo raíz</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">imports:[..., MovimientosModule] <span class=\"comment\">// 2 registro del modulo importado con todo lo que exporta</span></div><div class=\"line\">...</div></pre></td></tr></table></figure></li><li><p>3- Uso del componente como un elemento html en la plantilla del padre</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--enlace con propiedades del componente--&gt;</span></div><div class=\"line\">  &#123;&#123;title&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 3 los componentes personalizados se usan como elementos estándar en html--&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--componente movimientos--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-movimientos</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-movimientos</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p>Esta manera de encapsular componentes unos dentro de otros permite crear <strong>grandes aplicaciones de tamaño empresarial</strong> sin sacrificar la limpieza del código. Cada componente debe diseñarse de forma que resuelva un problema de negocio concreto, por tanto manejable. Y si puede ser <strong>reutilizable</strong> mucho mejor.</p><p>La agrupación de componentes en módulos ayuda a mantener la aplicación organizada.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a></p>"},{"title":"Formularios de datos en Angular2","id":"21","updated":"2016-06-22T16:05:58.000Z","date":"2016-06-22T14:32:34.000Z","thumbnail":"/css/images/angular.jpg","_content":"\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/)\n\n---\n\nLos formularios en AngularJS fueron un éxito inicial debido entre otras coas al *double binding*. Otra cosa que no fue nunca simple es la **validación de controles en los formularios**. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un *Work in progress.*\n  \n<!-- more -->\n\n### Dependencias\nCon el lío de versiones de los últimos días, conviene que os muestre con qué he hecho mi prueba.\n```json\n\"dependencies\": {\n    \"@angular/common\": \"2.0.0-rc.3\",\n    \"@angular/compiler\": \"2.0.0-rc.3\",\n    \"@angular/core\": \"2.0.0-rc.3\",\n    \"@angular/forms\": \"^0.1.1\",\n    \"@angular/http\": \"2.0.0-rc.3\",\n    \"@angular/platform-browser\": \"2.0.0-rc.3\",\n    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.3\",\n    \"@angular/router\": \"3.0.0-alpha.7\",\n    \"es6-shim\": \"^0.35.0\",\n    \"reflect-metadata\": \"0.1.3\",\n    \"rxjs\": \"5.0.0-beta.6\",\n    \"systemjs\": \"0.19.26\",\n    \"zone.js\": \"^0.6.12\"\n  }\n```\n\nComo veis están actualizadas a la `RC.3` y `forms 0.1.1`.\n> Si usas **SystemJS**, acuérdate de incluir `@angular/forms` en el fichero `system-config.json`\n\nEn el `main.ts` debemos registrar los *providers* que permiten la convivencia de la actual versión de *forms* y la anterior (de la semana pasada) ya obsoleta.\n\n```javascript\nimport { disableDeprecatedForms, provideForms } from '@angular/forms';\nbootstrap(CashFlowAppComponent,[\n  disableDeprecatedForms(),\n  provideForms()\n]);\n```\n\n### Plantillas html para hacer formularios\nVamos a tratar de mantener el **html limpio** hasta dónde sea posible. En un futuro espero que incluso sea prescindible y que se pueda generar de forma automática a partir de datos de configuración.\n```html\n<form [formGroup]=\"formularioMovimiento\">\n  <label>Tipo:</label>\n  <input type=\"text\" formControlName=\"tipo\">\n  <p>\n    <span *ngIf=\"formularioMovimiento.controls['tipo'].touched && !formularioMovimiento.controls['tipo'].valid\">\n      Necesitamos el tipo de movimiento\n    </span>\n  </p>\n  <label>Categoría:</label>\n  <input type=\"text\" formControlName=\"categoria\"><p></p>\n  <label>Fecha:</label>\n  <input type=\"date\" formControlName=\"fecha\"><p></p>\n  <label>Importe:</label>\n  <input type=\"number\" formControlName=\"importe\"> <p>\n    <span *ngIf=\"formularioMovimiento.controls['importe'].touched && !formularioMovimiento.controls['importe'].valid\">\n      Necesitamos el tipo de movimiento\n    </span>\n  </p>\n  <button \n    type=\"submit\" \n    [disabled]=\"!formularioMovimiento.valid\"\n    (click)=\"guardarMovimiento()\" >Guardar\n  </button>\n</form>\n```\n\nSe incluyen la lógica para mostrar mensajes de validación y activación del botón de guardado. He optado por no usar la definción de variables en la plantilla mediante `#`.\n\n### Lógica y datos en el componente\nTrataremos de llevar la **lógica de generación y validación de datos** al componente y programarlo en TypeScript. Puede ser por mi pasado *backender* pero me encuentro más cómodo cuanto más lejos de un lenguaje de marcas.\n \nPara empezar necesitamos registrar las herramientas. El proveedor `FormBuilder` nos ayuda a definir los controles asociados al formulario y sus validaciones.\n\n```javascript\nimport { REACTIVE_FORM_DIRECTIVES, FormBuilder, FormGroup, Validators  } from '@angular/forms';\n@Component({\n  directives: [REACTIVE_FORM_DIRECTIVES],\n  providers:[FormBuilder]\n})\n```\nEn el evento `OnInit` construimos la estructura de soporte al formulario. Se puede hacer mucho más compleja, mediante la inclusión de grupos de controles anidados.\n\n```javascript\nngOnInit() {\n    this.formularioMovimiento = this.formBuilder.group({\n      tipo: ['',Validators.required],\n      categoria: [],\n      fecha: [],\n      importe:['',Validators.required]\n    });\n  }\n```\n\nAntes de enviar datos a un serviciop se pueden hacer validaciones y ttransformacipnes previas. El acceso a los valores del formulario se hace través de su propiedad `.value`. Con esto ya realizaremos los envíos a los servicios...\n\n```javascript\nguardarMovimiento() {       \n this.miServicio.Guardar(this.formularioMovimiento.value);\n}\n```\n### Validación\nLa validación temprana es el objetivo fundamental de un desarrollo de formularios. Es buena para el usuario y buena para el sistema. Angular2 facilita la implementación de las validaciones estándar y permite la creación de las tuyas propias.\n\nLo veremos en próximas entregas. Sígueme en [mi cuenta de twitter](https://twitter.com/albertobasalo) o suscríbete a la [revista mensual de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339) y serás el primero en ser informado.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/)\n","source":"_posts/Formularios-de-datos-en-Angular2.md","raw":"---\ntitle: Formularios de datos en Angular2\ntags:  \n- Angular2\n- Forms\n- Tutorial\ncategories:\n- Introducción \npermalink: formularios-de-datos-en-angular2\nid: 21\nupdated: 2016-06-22 18:05:58\ndate: 2016-06-22 16:32:34\nthumbnail: /css/images/angular.jpg\n---\n\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/)\n\n---\n\nLos formularios en AngularJS fueron un éxito inicial debido entre otras coas al *double binding*. Otra cosa que no fue nunca simple es la **validación de controles en los formularios**. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un *Work in progress.*\n  \n<!-- more -->\n\n### Dependencias\nCon el lío de versiones de los últimos días, conviene que os muestre con qué he hecho mi prueba.\n```json\n\"dependencies\": {\n    \"@angular/common\": \"2.0.0-rc.3\",\n    \"@angular/compiler\": \"2.0.0-rc.3\",\n    \"@angular/core\": \"2.0.0-rc.3\",\n    \"@angular/forms\": \"^0.1.1\",\n    \"@angular/http\": \"2.0.0-rc.3\",\n    \"@angular/platform-browser\": \"2.0.0-rc.3\",\n    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.3\",\n    \"@angular/router\": \"3.0.0-alpha.7\",\n    \"es6-shim\": \"^0.35.0\",\n    \"reflect-metadata\": \"0.1.3\",\n    \"rxjs\": \"5.0.0-beta.6\",\n    \"systemjs\": \"0.19.26\",\n    \"zone.js\": \"^0.6.12\"\n  }\n```\n\nComo veis están actualizadas a la `RC.3` y `forms 0.1.1`.\n> Si usas **SystemJS**, acuérdate de incluir `@angular/forms` en el fichero `system-config.json`\n\nEn el `main.ts` debemos registrar los *providers* que permiten la convivencia de la actual versión de *forms* y la anterior (de la semana pasada) ya obsoleta.\n\n```javascript\nimport { disableDeprecatedForms, provideForms } from '@angular/forms';\nbootstrap(CashFlowAppComponent,[\n  disableDeprecatedForms(),\n  provideForms()\n]);\n```\n\n### Plantillas html para hacer formularios\nVamos a tratar de mantener el **html limpio** hasta dónde sea posible. En un futuro espero que incluso sea prescindible y que se pueda generar de forma automática a partir de datos de configuración.\n```html\n<form [formGroup]=\"formularioMovimiento\">\n  <label>Tipo:</label>\n  <input type=\"text\" formControlName=\"tipo\">\n  <p>\n    <span *ngIf=\"formularioMovimiento.controls['tipo'].touched && !formularioMovimiento.controls['tipo'].valid\">\n      Necesitamos el tipo de movimiento\n    </span>\n  </p>\n  <label>Categoría:</label>\n  <input type=\"text\" formControlName=\"categoria\"><p></p>\n  <label>Fecha:</label>\n  <input type=\"date\" formControlName=\"fecha\"><p></p>\n  <label>Importe:</label>\n  <input type=\"number\" formControlName=\"importe\"> <p>\n    <span *ngIf=\"formularioMovimiento.controls['importe'].touched && !formularioMovimiento.controls['importe'].valid\">\n      Necesitamos el tipo de movimiento\n    </span>\n  </p>\n  <button \n    type=\"submit\" \n    [disabled]=\"!formularioMovimiento.valid\"\n    (click)=\"guardarMovimiento()\" >Guardar\n  </button>\n</form>\n```\n\nSe incluyen la lógica para mostrar mensajes de validación y activación del botón de guardado. He optado por no usar la definción de variables en la plantilla mediante `#`.\n\n### Lógica y datos en el componente\nTrataremos de llevar la **lógica de generación y validación de datos** al componente y programarlo en TypeScript. Puede ser por mi pasado *backender* pero me encuentro más cómodo cuanto más lejos de un lenguaje de marcas.\n \nPara empezar necesitamos registrar las herramientas. El proveedor `FormBuilder` nos ayuda a definir los controles asociados al formulario y sus validaciones.\n\n```javascript\nimport { REACTIVE_FORM_DIRECTIVES, FormBuilder, FormGroup, Validators  } from '@angular/forms';\n@Component({\n  directives: [REACTIVE_FORM_DIRECTIVES],\n  providers:[FormBuilder]\n})\n```\nEn el evento `OnInit` construimos la estructura de soporte al formulario. Se puede hacer mucho más compleja, mediante la inclusión de grupos de controles anidados.\n\n```javascript\nngOnInit() {\n    this.formularioMovimiento = this.formBuilder.group({\n      tipo: ['',Validators.required],\n      categoria: [],\n      fecha: [],\n      importe:['',Validators.required]\n    });\n  }\n```\n\nAntes de enviar datos a un serviciop se pueden hacer validaciones y ttransformacipnes previas. El acceso a los valores del formulario se hace través de su propiedad `.value`. Con esto ya realizaremos los envíos a los servicios...\n\n```javascript\nguardarMovimiento() {       \n this.miServicio.Guardar(this.formularioMovimiento.value);\n}\n```\n### Validación\nLa validación temprana es el objetivo fundamental de un desarrollo de formularios. Es buena para el usuario y buena para el sistema. Angular2 facilita la implementación de las validaciones estándar y permite la creación de las tuyas propias.\n\nLo veremos en próximas entregas. Sígueme en [mi cuenta de twitter](https://twitter.com/albertobasalo) o suscríbete a la [revista mensual de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339) y serás el primero en ser informado.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/)\n","slug":"formularios-de-datos-en-angular2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvg1000oiwd3iw0obsh1","content":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a></p></blockquote><hr><p>Los formularios en AngularJS fueron un éxito inicial debido entre otras coas al <em>double binding</em>. Otra cosa que no fue nunca simple es la <strong>validación de controles en los formularios</strong>. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un <em>Work in progress.</em></p><a id=\"more\"></a><h3 id=\"Dependencias\"><a href=\"#Dependencias\" class=\"headerlink\" title=\"Dependencias\"></a>Dependencias</h3><p>Con el lío de versiones de los últimos días, conviene que os muestre con qué he hecho mi prueba.<br></p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"@angular/common\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/compiler\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/core\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/forms\": \"^0.1.1\",</div><div class=\"line\">    \"@angular/http\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/platform-browser\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/router\": \"3.0.0-alpha.7\",</div><div class=\"line\">    \"es6-shim\": \"^0.35.0\",</div><div class=\"line\">    \"reflect-metadata\": \"0.1.3\",</div><div class=\"line\">    \"rxjs\": \"5.0.0-beta.6\",</div><div class=\"line\">    \"systemjs\": \"0.19.26\",</div><div class=\"line\">    \"zone.js\": \"^0.6.12\"</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure><p></p><p>Como veis están actualizadas a la <code>RC.3</code> y <code>forms 0.1.1</code>.</p><blockquote><p>Si usas <strong>SystemJS</strong>, acuérdate de incluir <code>@angular/forms</code> en el fichero <code>system-config.json</code></p></blockquote><p>En el <code>main.ts</code> debemos registrar los <em>providers</em> que permiten la convivencia de la actual versión de <em>forms</em> y la anterior (de la semana pasada) ya obsoleta.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; disableDeprecatedForms, provideForms &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">bootstrap(CashFlowAppComponent,[</div><div class=\"line\">  disableDeprecatedForms(),</div><div class=\"line\">  provideForms()</div><div class=\"line\">]);</div></pre></td></tr></table></figure><h3 id=\"Plantillas-html-para-hacer-formularios\"><a href=\"#Plantillas-html-para-hacer-formularios\" class=\"headerlink\" title=\"Plantillas html para hacer formularios\"></a>Plantillas html para hacer formularios</h3><p>Vamos a tratar de mantener el <strong>html limpio</strong> hasta dónde sea posible. En un futuro espero que incluso sea prescindible y que se pueda generar de forma automática a partir de datos de configuración.<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"formularioMovimiento\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Tipo:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"tipo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"formularioMovimiento.controls['tipo'].touched &amp;&amp; !formularioMovimiento.controls['tipo'].valid\"</span>&gt;</span></div><div class=\"line\">      Necesitamos el tipo de movimiento</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Categoría:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"categoria\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Fecha:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"fecha\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Importe:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"importe\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"formularioMovimiento.controls['importe'].touched &amp;&amp; !formularioMovimiento.controls['importe'].valid\"</span>&gt;</span></div><div class=\"line\">      Necesitamos el tipo de movimiento</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> </span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"!formularioMovimiento.valid\"</span></span></div><div class=\"line\"><span class=\"tag\">    (<span class=\"attr\">click</span>)=<span class=\"string\">\"guardarMovimiento()\"</span> &gt;</span>Guardar</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>Se incluyen la lógica para mostrar mensajes de validación y activación del botón de guardado. He optado por no usar la definción de variables en la plantilla mediante <code>#</code>.</p><h3 id=\"Logica-y-datos-en-el-componente\"><a href=\"#Logica-y-datos-en-el-componente\" class=\"headerlink\" title=\"Lógica y datos en el componente\"></a>Lógica y datos en el componente</h3><p>Trataremos de llevar la <strong>lógica de generación y validación de datos</strong> al componente y programarlo en TypeScript. Puede ser por mi pasado <em>backender</em> pero me encuentro más cómodo cuanto más lejos de un lenguaje de marcas.</p><p>Para empezar necesitamos registrar las herramientas. El proveedor <code>FormBuilder</code> nos ayuda a definir los controles asociados al formulario y sus validaciones.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; REACTIVE_FORM_DIRECTIVES, FormBuilder, FormGroup, Validators  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  directives: [REACTIVE_FORM_DIRECTIVES],</div><div class=\"line\">  providers:[FormBuilder]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure><p>En el evento <code>OnInit</code> construimos la estructura de soporte al formulario. Se puede hacer mucho más compleja, mediante la inclusión de grupos de controles anidados.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formularioMovimiento = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</div><div class=\"line\">      tipo: [<span class=\"string\">''</span>,Validators.required],</div><div class=\"line\">      categoria: [],</div><div class=\"line\">      fecha: [],</div><div class=\"line\">      importe:[<span class=\"string\">''</span>,Validators.required]</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure><p>Antes de enviar datos a un serviciop se pueden hacer validaciones y ttransformacipnes previas. El acceso a los valores del formulario se hace través de su propiedad <code>.value</code>. Con esto ya realizaremos los envíos a los servicios…</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">guardarMovimiento() &#123;       </div><div class=\"line\"> <span class=\"keyword\">this</span>.miServicio.Guardar(<span class=\"keyword\">this</span>.formularioMovimiento.value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Validacion\"><a href=\"#Validacion\" class=\"headerlink\" title=\"Validación\"></a>Validación</h3><p>La validación temprana es el objetivo fundamental de un desarrollo de formularios. Es buena para el usuario y buena para el sistema. Angular2 facilita la implementación de las validaciones estándar y permite la creación de las tuyas propias.</p><p>Lo veremos en próximas entregas. Sígueme en <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">mi cuenta de twitter</a> o suscríbete a la <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">revista mensual de Academia Binaria</a> y serás el primero en ser informado.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a></p>","site":{"data":{}},"excerpt":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a></p></blockquote><hr><p>Los formularios en AngularJS fueron un éxito inicial debido entre otras coas al <em>double binding</em>. Otra cosa que no fue nunca simple es la <strong>validación de controles en los formularios</strong>. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un <em>Work in progress.</em></p>","more":"<h3 id=\"Dependencias\"><a href=\"#Dependencias\" class=\"headerlink\" title=\"Dependencias\"></a>Dependencias</h3><p>Con el lío de versiones de los últimos días, conviene que os muestre con qué he hecho mi prueba.<br></p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"@angular/common\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/compiler\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/core\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/forms\": \"^0.1.1\",</div><div class=\"line\">    \"@angular/http\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/platform-browser\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.3\",</div><div class=\"line\">    \"@angular/router\": \"3.0.0-alpha.7\",</div><div class=\"line\">    \"es6-shim\": \"^0.35.0\",</div><div class=\"line\">    \"reflect-metadata\": \"0.1.3\",</div><div class=\"line\">    \"rxjs\": \"5.0.0-beta.6\",</div><div class=\"line\">    \"systemjs\": \"0.19.26\",</div><div class=\"line\">    \"zone.js\": \"^0.6.12\"</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure><p></p><p>Como veis están actualizadas a la <code>RC.3</code> y <code>forms 0.1.1</code>.</p><blockquote><p>Si usas <strong>SystemJS</strong>, acuérdate de incluir <code>@angular/forms</code> en el fichero <code>system-config.json</code></p></blockquote><p>En el <code>main.ts</code> debemos registrar los <em>providers</em> que permiten la convivencia de la actual versión de <em>forms</em> y la anterior (de la semana pasada) ya obsoleta.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; disableDeprecatedForms, provideForms &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">bootstrap(CashFlowAppComponent,[</div><div class=\"line\">  disableDeprecatedForms(),</div><div class=\"line\">  provideForms()</div><div class=\"line\">]);</div></pre></td></tr></table></figure><h3 id=\"Plantillas-html-para-hacer-formularios\"><a href=\"#Plantillas-html-para-hacer-formularios\" class=\"headerlink\" title=\"Plantillas html para hacer formularios\"></a>Plantillas html para hacer formularios</h3><p>Vamos a tratar de mantener el <strong>html limpio</strong> hasta dónde sea posible. En un futuro espero que incluso sea prescindible y que se pueda generar de forma automática a partir de datos de configuración.<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"formularioMovimiento\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Tipo:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"tipo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"formularioMovimiento.controls['tipo'].touched &amp;&amp; !formularioMovimiento.controls['tipo'].valid\"</span>&gt;</span></div><div class=\"line\">      Necesitamos el tipo de movimiento</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Categoría:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"categoria\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Fecha:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"fecha\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Importe:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">\"importe\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"formularioMovimiento.controls['importe'].touched &amp;&amp; !formularioMovimiento.controls['importe'].valid\"</span>&gt;</span></div><div class=\"line\">      Necesitamos el tipo de movimiento</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> </span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"!formularioMovimiento.valid\"</span></span></div><div class=\"line\"><span class=\"tag\">    (<span class=\"attr\">click</span>)=<span class=\"string\">\"guardarMovimiento()\"</span> &gt;</span>Guardar</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>Se incluyen la lógica para mostrar mensajes de validación y activación del botón de guardado. He optado por no usar la definción de variables en la plantilla mediante <code>#</code>.</p><h3 id=\"Logica-y-datos-en-el-componente\"><a href=\"#Logica-y-datos-en-el-componente\" class=\"headerlink\" title=\"Lógica y datos en el componente\"></a>Lógica y datos en el componente</h3><p>Trataremos de llevar la <strong>lógica de generación y validación de datos</strong> al componente y programarlo en TypeScript. Puede ser por mi pasado <em>backender</em> pero me encuentro más cómodo cuanto más lejos de un lenguaje de marcas.</p><p>Para empezar necesitamos registrar las herramientas. El proveedor <code>FormBuilder</code> nos ayuda a definir los controles asociados al formulario y sus validaciones.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; REACTIVE_FORM_DIRECTIVES, FormBuilder, FormGroup, Validators  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  directives: [REACTIVE_FORM_DIRECTIVES],</div><div class=\"line\">  providers:[FormBuilder]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure><p>En el evento <code>OnInit</code> construimos la estructura de soporte al formulario. Se puede hacer mucho más compleja, mediante la inclusión de grupos de controles anidados.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formularioMovimiento = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</div><div class=\"line\">      tipo: [<span class=\"string\">''</span>,Validators.required],</div><div class=\"line\">      categoria: [],</div><div class=\"line\">      fecha: [],</div><div class=\"line\">      importe:[<span class=\"string\">''</span>,Validators.required]</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure><p>Antes de enviar datos a un serviciop se pueden hacer validaciones y ttransformacipnes previas. El acceso a los valores del formulario se hace través de su propiedad <code>.value</code>. Con esto ya realizaremos los envíos a los servicios…</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">guardarMovimiento() &#123;       </div><div class=\"line\"> <span class=\"keyword\">this</span>.miServicio.Guardar(<span class=\"keyword\">this</span>.formularioMovimiento.value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"Validacion\"><a href=\"#Validacion\" class=\"headerlink\" title=\"Validación\"></a>Validación</h3><p>La validación temprana es el objetivo fundamental de un desarrollo de formularios. Es buena para el usuario y buena para el sistema. Angular2 facilita la implementación de las validaciones estándar y permite la creación de las tuyas propias.</p><p>Lo veremos en próximas entregas. Sígueme en <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">mi cuenta de twitter</a> o suscríbete a la <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">revista mensual de Academia Binaria</a> y serás el primero en ser informado.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a></p>"},{"title":"Introducción a Bootstrap","id":"5","updated":"2015-11-12T14:56:16.000Z","date":"2015-11-05T16:44:55.000Z","_content":"\nBootstrap es un conjunto de archivos **HTML**, **CSS** y **Javascript** bien definidos y exhaustivamente testados que componen una sólida estructura sobre la cual construir tu proyecto web o aplicación.\n\n### ¿Por qué debo utilizar Bootstrap en mi proyecto?\n\nEmpezar un proyecto web desde cero puede ser laborioso y te puede llevar bastante tiempo mientras vas construyendo los diferentes componentes y testándolos en los diversos navegadores.\n\nBootstrap te provee de una **biblioteca de componentes reusables** que puedes usar en cada proyecto, desde un sistema de rejilla o “grid”, una barra de navegación, botones o estilos tipográficos, todos ellos preparados para funcionar en todos los navegadores y adaptarse a todos los tipos de pantalla, tanto de móvil, como tablet o escritorio.\n\nCon Bootstrap te ahorras todo el trabajo inicial y además tienes un código revisado y testado que además es **mantenible y escalable**, una sólida estructura sobre la cual construir tu proyecto.\n\n### Práctica común\n\nHoy en día su uso se encuentra **muy extendido**, y no es extraño encontrarse ofertas de trabajo en las cuales además de conocimientos de HTML y CSS y Javascript se exige el dominio de Bootstrap. La **suave curva de aprendizaje** hace que sea una herramienta sencilla de usar por todos los miembros de un equipo de desarrollo, lo que incrementa la productividad.\n\n### ¿Por dónde empezar?\n\nPara descargar la última versión debes acudir a la página http://getbootstrap.com/  y pulsar el botón **“Download Bootstrap”** una vez hecho esto te dirigirá a la sección **“Download”** de la página. Hay diferentes maneras de integrar Bootstrap en tu proyecto, en este artículo hablaremos de la primera de ellas que es descargarnos la carpeta comprimida.\n\nEn el apartado **“Bootstrap”** de la sección **“Download”**  te encontrarás otra vez el botón de **“Download Bootstrap”**, esta vez al clicarlo se descargará una carpeta comprimida que se compone de:\n\n-\tUna carpeta **”css”**: Incluye todos los estilos predefinidos por Bootstrap.\n-\tUna carpeta **“fonts”**: Incluye una fuente de iconos svg listos para usar.\n-\tUna carpeta **“js”**: Con todo el javascript necesario para que los componentes y efectos de Bootstrap funcionen.\n\nUna práctica común es empezar el proyecto con estas carpetas e incluir a través de tu HTML los archivos que vas a utilizar. Normalmente **bootstrap.min.css** y **bootstrap.min.js**. Además deberás **incluir JQuery** en tu proyecto para el correcto funcionamiento de los plugins.\n\nUna vez hecho esto te debería quedar un HTML inicial parecido a esto:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <!-- Los 3 metatags de arriba deben ir al principio del head -->\n    <title>Mi primer tema con Bootstrap</title>\n\n    <!-- Incluye el css de Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n    <!-- Incluye nuestro propio CSS -->\n    <link href=\"css/styles.css\" rel=\"stylesheet\">\n\n\n    <!-- Este código es necesario si queremos dar soporte a IE8 -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body>\n    <h1>Hola!</h1>\n\n    <!-- Incluye jQuery -->\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>\n    <!-- Incluye el JS de Bootstrap -->\n    <script src=\"js/bootstrap.min.js\"></script>\n  </body>\n</html>\n\n```\n\nCon esto ya estarías listo para empezar tu proyecto con Bootstrap y, con la ayuda de la documentación de Bootstrap, ir incluyendo los módulos y clases que necesites.\n\nCómo norma general **nunca modifiques los archivos originales de Bootstrap**, para añadir tus estilos propios o modificar los de bootstrap.css lo mejor es que crees una hoja de estilos independiente de bootstrap.css, lo mismo para el archivo bootstrap.js, así para actualizar tu versión de Bootstrap simplemente tendrás que descargarte la última versión y sustituir los archivos bootstrap.min.css y bootstrap.min.js por los de la nueva versión.\n\nEn siguientes artículos profundizaremos un poco mas sobre las diferentes opciones que tienes para incluir Bootstrap en tu proyecto.\n","source":"_posts/Introduccion-a-Bootstrap.md","raw":"---\ntitle: Introducción a Bootstrap\ntags: \n- Bootstrap\ncategories:\n- Introducción \npermalink: introduccion-a-bootstrap\nid: 5\nupdated: 2015/11/12 15:56:16\ndate: 2015/11/05 17:44:55\n---\n\nBootstrap es un conjunto de archivos **HTML**, **CSS** y **Javascript** bien definidos y exhaustivamente testados que componen una sólida estructura sobre la cual construir tu proyecto web o aplicación.\n\n### ¿Por qué debo utilizar Bootstrap en mi proyecto?\n\nEmpezar un proyecto web desde cero puede ser laborioso y te puede llevar bastante tiempo mientras vas construyendo los diferentes componentes y testándolos en los diversos navegadores.\n\nBootstrap te provee de una **biblioteca de componentes reusables** que puedes usar en cada proyecto, desde un sistema de rejilla o “grid”, una barra de navegación, botones o estilos tipográficos, todos ellos preparados para funcionar en todos los navegadores y adaptarse a todos los tipos de pantalla, tanto de móvil, como tablet o escritorio.\n\nCon Bootstrap te ahorras todo el trabajo inicial y además tienes un código revisado y testado que además es **mantenible y escalable**, una sólida estructura sobre la cual construir tu proyecto.\n\n### Práctica común\n\nHoy en día su uso se encuentra **muy extendido**, y no es extraño encontrarse ofertas de trabajo en las cuales además de conocimientos de HTML y CSS y Javascript se exige el dominio de Bootstrap. La **suave curva de aprendizaje** hace que sea una herramienta sencilla de usar por todos los miembros de un equipo de desarrollo, lo que incrementa la productividad.\n\n### ¿Por dónde empezar?\n\nPara descargar la última versión debes acudir a la página http://getbootstrap.com/  y pulsar el botón **“Download Bootstrap”** una vez hecho esto te dirigirá a la sección **“Download”** de la página. Hay diferentes maneras de integrar Bootstrap en tu proyecto, en este artículo hablaremos de la primera de ellas que es descargarnos la carpeta comprimida.\n\nEn el apartado **“Bootstrap”** de la sección **“Download”**  te encontrarás otra vez el botón de **“Download Bootstrap”**, esta vez al clicarlo se descargará una carpeta comprimida que se compone de:\n\n-\tUna carpeta **”css”**: Incluye todos los estilos predefinidos por Bootstrap.\n-\tUna carpeta **“fonts”**: Incluye una fuente de iconos svg listos para usar.\n-\tUna carpeta **“js”**: Con todo el javascript necesario para que los componentes y efectos de Bootstrap funcionen.\n\nUna práctica común es empezar el proyecto con estas carpetas e incluir a través de tu HTML los archivos que vas a utilizar. Normalmente **bootstrap.min.css** y **bootstrap.min.js**. Además deberás **incluir JQuery** en tu proyecto para el correcto funcionamiento de los plugins.\n\nUna vez hecho esto te debería quedar un HTML inicial parecido a esto:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <!-- Los 3 metatags de arriba deben ir al principio del head -->\n    <title>Mi primer tema con Bootstrap</title>\n\n    <!-- Incluye el css de Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n    <!-- Incluye nuestro propio CSS -->\n    <link href=\"css/styles.css\" rel=\"stylesheet\">\n\n\n    <!-- Este código es necesario si queremos dar soporte a IE8 -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n      <script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body>\n    <h1>Hola!</h1>\n\n    <!-- Incluye jQuery -->\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>\n    <!-- Incluye el JS de Bootstrap -->\n    <script src=\"js/bootstrap.min.js\"></script>\n  </body>\n</html>\n\n```\n\nCon esto ya estarías listo para empezar tu proyecto con Bootstrap y, con la ayuda de la documentación de Bootstrap, ir incluyendo los módulos y clases que necesites.\n\nCómo norma general **nunca modifiques los archivos originales de Bootstrap**, para añadir tus estilos propios o modificar los de bootstrap.css lo mejor es que crees una hoja de estilos independiente de bootstrap.css, lo mismo para el archivo bootstrap.js, así para actualizar tu versión de Bootstrap simplemente tendrás que descargarte la última versión y sustituir los archivos bootstrap.min.css y bootstrap.min.js por los de la nueva versión.\n\nEn siguientes artículos profundizaremos un poco mas sobre las diferentes opciones que tienes para incluir Bootstrap en tu proyecto.\n","slug":"introduccion-a-bootstrap","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvg1000riwd3xv00rnbm","content":"<p>Bootstrap es un conjunto de archivos <strong>HTML</strong>, <strong>CSS</strong> y <strong>Javascript</strong> bien definidos y exhaustivamente testados que componen una sólida estructura sobre la cual construir tu proyecto web o aplicación.</p><h3 id=\"¿Por-que-debo-utilizar-Bootstrap-en-mi-proyecto\"><a href=\"#¿Por-que-debo-utilizar-Bootstrap-en-mi-proyecto\" class=\"headerlink\" title=\"¿Por qué debo utilizar Bootstrap en mi proyecto?\"></a>¿Por qué debo utilizar Bootstrap en mi proyecto?</h3><p>Empezar un proyecto web desde cero puede ser laborioso y te puede llevar bastante tiempo mientras vas construyendo los diferentes componentes y testándolos en los diversos navegadores.</p><p>Bootstrap te provee de una <strong>biblioteca de componentes reusables</strong> que puedes usar en cada proyecto, desde un sistema de rejilla o “grid”, una barra de navegación, botones o estilos tipográficos, todos ellos preparados para funcionar en todos los navegadores y adaptarse a todos los tipos de pantalla, tanto de móvil, como tablet o escritorio.</p><p>Con Bootstrap te ahorras todo el trabajo inicial y además tienes un código revisado y testado que además es <strong>mantenible y escalable</strong>, una sólida estructura sobre la cual construir tu proyecto.</p><h3 id=\"Practica-comun\"><a href=\"#Practica-comun\" class=\"headerlink\" title=\"Práctica común\"></a>Práctica común</h3><p>Hoy en día su uso se encuentra <strong>muy extendido</strong>, y no es extraño encontrarse ofertas de trabajo en las cuales además de conocimientos de HTML y CSS y Javascript se exige el dominio de Bootstrap. La <strong>suave curva de aprendizaje</strong> hace que sea una herramienta sencilla de usar por todos los miembros de un equipo de desarrollo, lo que incrementa la productividad.</p><h3 id=\"¿Por-donde-empezar\"><a href=\"#¿Por-donde-empezar\" class=\"headerlink\" title=\"¿Por dónde empezar?\"></a>¿Por dónde empezar?</h3><p>Para descargar la última versión debes acudir a la página <a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"external\">http://getbootstrap.com/</a> y pulsar el botón <strong>“Download Bootstrap”</strong> una vez hecho esto te dirigirá a la sección <strong>“Download”</strong> de la página. Hay diferentes maneras de integrar Bootstrap en tu proyecto, en este artículo hablaremos de la primera de ellas que es descargarnos la carpeta comprimida.</p><p>En el apartado <strong>“Bootstrap”</strong> de la sección <strong>“Download”</strong> te encontrarás otra vez el botón de <strong>“Download Bootstrap”</strong>, esta vez al clicarlo se descargará una carpeta comprimida que se compone de:</p><ul><li>Una carpeta <strong>”css”</strong>: Incluye todos los estilos predefinidos por Bootstrap.</li><li>Una carpeta <strong>“fonts”</strong>: Incluye una fuente de iconos svg listos para usar.</li><li>Una carpeta <strong>“js”</strong>: Con todo el javascript necesario para que los componentes y efectos de Bootstrap funcionen.</li></ul><p>Una práctica común es empezar el proyecto con estas carpetas e incluir a través de tu HTML los archivos que vas a utilizar. Normalmente <strong>bootstrap.min.css</strong> y <strong>bootstrap.min.js</strong>. Además deberás <strong>incluir JQuery</strong> en tu proyecto para el correcto funcionamiento de los plugins.</p><p>Una vez hecho esto te debería quedar un HTML inicial parecido a esto:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Los 3 metatags de arriba deben ir al principio del head --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Mi primer tema con Bootstrap<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye el css de Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye nuestro propio CSS --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/styles.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Este código es necesario si queremos dar soporte a IE8 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></div><div class=\"line\"><span class=\"comment\">      &lt;script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"comment\">      &lt;script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hola!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye jQuery --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye el JS de Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure><p>Con esto ya estarías listo para empezar tu proyecto con Bootstrap y, con la ayuda de la documentación de Bootstrap, ir incluyendo los módulos y clases que necesites.</p><p>Cómo norma general <strong>nunca modifiques los archivos originales de Bootstrap</strong>, para añadir tus estilos propios o modificar los de bootstrap.css lo mejor es que crees una hoja de estilos independiente de bootstrap.css, lo mismo para el archivo bootstrap.js, así para actualizar tu versión de Bootstrap simplemente tendrás que descargarte la última versión y sustituir los archivos bootstrap.min.css y bootstrap.min.js por los de la nueva versión.</p><p>En siguientes artículos profundizaremos un poco mas sobre las diferentes opciones que tienes para incluir Bootstrap en tu proyecto.</p>","site":{"data":{}},"excerpt":"","more":"<p>Bootstrap es un conjunto de archivos <strong>HTML</strong>, <strong>CSS</strong> y <strong>Javascript</strong> bien definidos y exhaustivamente testados que componen una sólida estructura sobre la cual construir tu proyecto web o aplicación.</p><h3 id=\"¿Por-que-debo-utilizar-Bootstrap-en-mi-proyecto\"><a href=\"#¿Por-que-debo-utilizar-Bootstrap-en-mi-proyecto\" class=\"headerlink\" title=\"¿Por qué debo utilizar Bootstrap en mi proyecto?\"></a>¿Por qué debo utilizar Bootstrap en mi proyecto?</h3><p>Empezar un proyecto web desde cero puede ser laborioso y te puede llevar bastante tiempo mientras vas construyendo los diferentes componentes y testándolos en los diversos navegadores.</p><p>Bootstrap te provee de una <strong>biblioteca de componentes reusables</strong> que puedes usar en cada proyecto, desde un sistema de rejilla o “grid”, una barra de navegación, botones o estilos tipográficos, todos ellos preparados para funcionar en todos los navegadores y adaptarse a todos los tipos de pantalla, tanto de móvil, como tablet o escritorio.</p><p>Con Bootstrap te ahorras todo el trabajo inicial y además tienes un código revisado y testado que además es <strong>mantenible y escalable</strong>, una sólida estructura sobre la cual construir tu proyecto.</p><h3 id=\"Practica-comun\"><a href=\"#Practica-comun\" class=\"headerlink\" title=\"Práctica común\"></a>Práctica común</h3><p>Hoy en día su uso se encuentra <strong>muy extendido</strong>, y no es extraño encontrarse ofertas de trabajo en las cuales además de conocimientos de HTML y CSS y Javascript se exige el dominio de Bootstrap. La <strong>suave curva de aprendizaje</strong> hace que sea una herramienta sencilla de usar por todos los miembros de un equipo de desarrollo, lo que incrementa la productividad.</p><h3 id=\"¿Por-donde-empezar\"><a href=\"#¿Por-donde-empezar\" class=\"headerlink\" title=\"¿Por dónde empezar?\"></a>¿Por dónde empezar?</h3><p>Para descargar la última versión debes acudir a la página <a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"external\">http://getbootstrap.com/</a> y pulsar el botón <strong>“Download Bootstrap”</strong> una vez hecho esto te dirigirá a la sección <strong>“Download”</strong> de la página. Hay diferentes maneras de integrar Bootstrap en tu proyecto, en este artículo hablaremos de la primera de ellas que es descargarnos la carpeta comprimida.</p><p>En el apartado <strong>“Bootstrap”</strong> de la sección <strong>“Download”</strong> te encontrarás otra vez el botón de <strong>“Download Bootstrap”</strong>, esta vez al clicarlo se descargará una carpeta comprimida que se compone de:</p><ul><li>Una carpeta <strong>”css”</strong>: Incluye todos los estilos predefinidos por Bootstrap.</li><li>Una carpeta <strong>“fonts”</strong>: Incluye una fuente de iconos svg listos para usar.</li><li>Una carpeta <strong>“js”</strong>: Con todo el javascript necesario para que los componentes y efectos de Bootstrap funcionen.</li></ul><p>Una práctica común es empezar el proyecto con estas carpetas e incluir a través de tu HTML los archivos que vas a utilizar. Normalmente <strong>bootstrap.min.css</strong> y <strong>bootstrap.min.js</strong>. Además deberás <strong>incluir JQuery</strong> en tu proyecto para el correcto funcionamiento de los plugins.</p><p>Una vez hecho esto te debería quedar un HTML inicial parecido a esto:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Los 3 metatags de arriba deben ir al principio del head --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Mi primer tema con Bootstrap<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye el css de Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye nuestro propio CSS --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/styles.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Este código es necesario si queremos dar soporte a IE8 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></div><div class=\"line\"><span class=\"comment\">      &lt;script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"comment\">      &lt;script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hola!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye jQuery --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Incluye el JS de Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure><p>Con esto ya estarías listo para empezar tu proyecto con Bootstrap y, con la ayuda de la documentación de Bootstrap, ir incluyendo los módulos y clases que necesites.</p><p>Cómo norma general <strong>nunca modifiques los archivos originales de Bootstrap</strong>, para añadir tus estilos propios o modificar los de bootstrap.css lo mejor es que crees una hoja de estilos independiente de bootstrap.css, lo mismo para el archivo bootstrap.js, así para actualizar tu versión de Bootstrap simplemente tendrás que descargarte la última versión y sustituir los archivos bootstrap.min.css y bootstrap.min.js por los de la nueva versión.</p><p>En siguientes artículos profundizaremos un poco mas sobre las diferentes opciones que tienes para incluir Bootstrap en tu proyecto.</p>"},{"title":"Introducción a MongoDB","id":"3","updated":"2015-08-25T04:26:25.000Z","date":"2015-08-15T09:00:54.000Z","_content":"\n## ¿Qué es MongoDB?\n\n[MongoDB ](http://mongodb.org) es una base de datos orientada a **documentos** con esquema dinámico. Esto le permite ofrecer un alto **rendimiento** y facilita el desarrollo de aplicaciones. A cambio nos impide tener **Joins y Transacciones** algo muy habitual en bases de datos relacionales, pero sin lo que se puede vivir.\n\n### ¿De qué se compone?\n\nDespués de su instalación disponemos en un directorio de varios ejecutables que componen **la aplicación servidora y sus herramientas**. El ejecutable fundamental será `mongod` que es el servidor, es el motor de manejo de datos. Para acceder al servidor se nos ofrece una aplicación de consola llamada `mongo`. Este es un intérprete de JavaScript y con él, podemos comunicarnos con la base de datos.\n\n### ¿Cómo funciona?\n\nMongoDB almacena **documentos en formato JSON**. Bueno realmente lo hace en *BSON* que es un superconjunto de JSON. BSON es un formato binario que optimiza espacio, rendimiento y aporta funciones extra sobre JSON. Pero esencialmente para nosotros como usuarios toda la entrada salida es en JSON.\n\nComo los documentos se almacenan en JSON y la consola es un interprete JavaScript, la verdad es que **la consola ofrece una potencia enorme** para realizar operaciones de inserción, selección y manipulación de datos. Cabe destacar que la consola es un programa e intérprete *síncrono*. Con algunos drivers como el de NodeJS el trabajo es puramente *asíncrono*.\n\n### ¿Se parece a SQL?\n\nSi vienes del mundo relacional, cuando llegues a Mongo tendrás que ajustar tu punto de mira al definir tus estructuras de datos. Como una primera guía te diré que hay una ligera **equivalencia entre Mongo y los SQL**\n\n*SQL* -> **MongoDB**\n\n*DataBase* -> **DataBase**\n\n*Table* -> **Collection**\n\n*Row* -> **Document**\n\n*Field* -> **Property**\n\n*Join* -> **Embedded**\n\n*Index* -> **Index**\n\n\nLa enorme diferencia está en que **en una colección se pueden guardar documentos con esquemas distintos**, y que esos esquemas pueden incluir documentos complejos, como arrays y subdocumentos. A esta falta de rigor al definir el esquema se la conoce\nen inglés como *schemaless*. Estamos ante una base de datos que almacena documentos de **esquema dinámico**.\n\nLo anterior es sin duda un valor diferencial a favor de Mongo pues facilita mucho el desarrollo y evolución de las aplicaciones. Otra cosa es la ausencia de Joins y Transacciones entre colecciones que obliga a diseñar y codificar de manera metódica para garantizar **eficiencia e integridad** en las consultas. La sugerencia es aprovechar sus fortalezas para minimizar las debilidades.\n\n### ¿Y entonces?\n\n**MongoDB** tienes campos de aplicación en los que supera a los sistemas relacionales en potencia y facilidad de desarrollo. Pero, hay que saber **escoger la herramienta mas adecuada** para cada caso. Ahora que ya sabes un poco de que va esto de MongoDB puedes empezar a buscar aplicaciones dónde seguro que le sentará como un guante.","source":"_posts/Introduccion-a-MongoDB.md","raw":"---\ntitle: Introducción a MongoDB\ntags: \n- MongoDB\ncategories:\n- Introducción \npermalink: introduccion-a-mongodb\nid: 3\nupdated: 2015/08/25 06:26:25\ndate: 2015/08/15 11:00:54\n---\n\n## ¿Qué es MongoDB?\n\n[MongoDB ](http://mongodb.org) es una base de datos orientada a **documentos** con esquema dinámico. Esto le permite ofrecer un alto **rendimiento** y facilita el desarrollo de aplicaciones. A cambio nos impide tener **Joins y Transacciones** algo muy habitual en bases de datos relacionales, pero sin lo que se puede vivir.\n\n### ¿De qué se compone?\n\nDespués de su instalación disponemos en un directorio de varios ejecutables que componen **la aplicación servidora y sus herramientas**. El ejecutable fundamental será `mongod` que es el servidor, es el motor de manejo de datos. Para acceder al servidor se nos ofrece una aplicación de consola llamada `mongo`. Este es un intérprete de JavaScript y con él, podemos comunicarnos con la base de datos.\n\n### ¿Cómo funciona?\n\nMongoDB almacena **documentos en formato JSON**. Bueno realmente lo hace en *BSON* que es un superconjunto de JSON. BSON es un formato binario que optimiza espacio, rendimiento y aporta funciones extra sobre JSON. Pero esencialmente para nosotros como usuarios toda la entrada salida es en JSON.\n\nComo los documentos se almacenan en JSON y la consola es un interprete JavaScript, la verdad es que **la consola ofrece una potencia enorme** para realizar operaciones de inserción, selección y manipulación de datos. Cabe destacar que la consola es un programa e intérprete *síncrono*. Con algunos drivers como el de NodeJS el trabajo es puramente *asíncrono*.\n\n### ¿Se parece a SQL?\n\nSi vienes del mundo relacional, cuando llegues a Mongo tendrás que ajustar tu punto de mira al definir tus estructuras de datos. Como una primera guía te diré que hay una ligera **equivalencia entre Mongo y los SQL**\n\n*SQL* -> **MongoDB**\n\n*DataBase* -> **DataBase**\n\n*Table* -> **Collection**\n\n*Row* -> **Document**\n\n*Field* -> **Property**\n\n*Join* -> **Embedded**\n\n*Index* -> **Index**\n\n\nLa enorme diferencia está en que **en una colección se pueden guardar documentos con esquemas distintos**, y que esos esquemas pueden incluir documentos complejos, como arrays y subdocumentos. A esta falta de rigor al definir el esquema se la conoce\nen inglés como *schemaless*. Estamos ante una base de datos que almacena documentos de **esquema dinámico**.\n\nLo anterior es sin duda un valor diferencial a favor de Mongo pues facilita mucho el desarrollo y evolución de las aplicaciones. Otra cosa es la ausencia de Joins y Transacciones entre colecciones que obliga a diseñar y codificar de manera metódica para garantizar **eficiencia e integridad** en las consultas. La sugerencia es aprovechar sus fortalezas para minimizar las debilidades.\n\n### ¿Y entonces?\n\n**MongoDB** tienes campos de aplicación en los que supera a los sistemas relacionales en potencia y facilidad de desarrollo. Pero, hay que saber **escoger la herramienta mas adecuada** para cada caso. Ahora que ya sabes un poco de que va esto de MongoDB puedes empezar a buscar aplicaciones dónde seguro que le sentará como un guante.","slug":"introduccion-a-mongodb","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvgh000uiwd3oi8jqncw","content":"<h2 id=\"¿Que-es-MongoDB\"><a href=\"#¿Que-es-MongoDB\" class=\"headerlink\" title=\"¿Qué es MongoDB?\"></a>¿Qué es MongoDB?</h2><p><a href=\"http://mongodb.org\" target=\"_blank\" rel=\"external\">MongoDB </a>es una base de datos orientada a <strong>documentos</strong> con esquema dinámico. Esto le permite ofrecer un alto <strong>rendimiento</strong> y facilita el desarrollo de aplicaciones. A cambio nos impide tener <strong>Joins y Transacciones</strong> algo muy habitual en bases de datos relacionales, pero sin lo que se puede vivir.</p><h3 id=\"¿De-que-se-compone\"><a href=\"#¿De-que-se-compone\" class=\"headerlink\" title=\"¿De qué se compone?\"></a>¿De qué se compone?</h3><p>Después de su instalación disponemos en un directorio de varios ejecutables que componen <strong>la aplicación servidora y sus herramientas</strong>. El ejecutable fundamental será <code>mongod</code> que es el servidor, es el motor de manejo de datos. Para acceder al servidor se nos ofrece una aplicación de consola llamada <code>mongo</code>. Este es un intérprete de JavaScript y con él, podemos comunicarnos con la base de datos.</p><h3 id=\"¿Como-funciona\"><a href=\"#¿Como-funciona\" class=\"headerlink\" title=\"¿Cómo funciona?\"></a>¿Cómo funciona?</h3><p>MongoDB almacena <strong>documentos en formato JSON</strong>. Bueno realmente lo hace en <em>BSON</em> que es un superconjunto de JSON. BSON es un formato binario que optimiza espacio, rendimiento y aporta funciones extra sobre JSON. Pero esencialmente para nosotros como usuarios toda la entrada salida es en JSON.</p><p>Como los documentos se almacenan en JSON y la consola es un interprete JavaScript, la verdad es que <strong>la consola ofrece una potencia enorme</strong> para realizar operaciones de inserción, selección y manipulación de datos. Cabe destacar que la consola es un programa e intérprete <em>síncrono</em>. Con algunos drivers como el de NodeJS el trabajo es puramente <em>asíncrono</em>.</p><h3 id=\"¿Se-parece-a-SQL\"><a href=\"#¿Se-parece-a-SQL\" class=\"headerlink\" title=\"¿Se parece a SQL?\"></a>¿Se parece a SQL?</h3><p>Si vienes del mundo relacional, cuando llegues a Mongo tendrás que ajustar tu punto de mira al definir tus estructuras de datos. Como una primera guía te diré que hay una ligera <strong>equivalencia entre Mongo y los SQL</strong></p><p><em>SQL</em> -&gt; <strong>MongoDB</strong></p><p><em>DataBase</em> -&gt; <strong>DataBase</strong></p><p><em>Table</em> -&gt; <strong>Collection</strong></p><p><em>Row</em> -&gt; <strong>Document</strong></p><p><em>Field</em> -&gt; <strong>Property</strong></p><p><em>Join</em> -&gt; <strong>Embedded</strong></p><p><em>Index</em> -&gt; <strong>Index</strong></p><p>La enorme diferencia está en que <strong>en una colección se pueden guardar documentos con esquemas distintos</strong>, y que esos esquemas pueden incluir documentos complejos, como arrays y subdocumentos. A esta falta de rigor al definir el esquema se la conoce<br>en inglés como <em>schemaless</em>. Estamos ante una base de datos que almacena documentos de <strong>esquema dinámico</strong>.</p><p>Lo anterior es sin duda un valor diferencial a favor de Mongo pues facilita mucho el desarrollo y evolución de las aplicaciones. Otra cosa es la ausencia de Joins y Transacciones entre colecciones que obliga a diseñar y codificar de manera metódica para garantizar <strong>eficiencia e integridad</strong> en las consultas. La sugerencia es aprovechar sus fortalezas para minimizar las debilidades.</p><h3 id=\"¿Y-entonces\"><a href=\"#¿Y-entonces\" class=\"headerlink\" title=\"¿Y entonces?\"></a>¿Y entonces?</h3><p><strong>MongoDB</strong> tienes campos de aplicación en los que supera a los sistemas relacionales en potencia y facilidad de desarrollo. Pero, hay que saber <strong>escoger la herramienta mas adecuada</strong> para cada caso. Ahora que ya sabes un poco de que va esto de MongoDB puedes empezar a buscar aplicaciones dónde seguro que le sentará como un guante.</p>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"¿Que-es-MongoDB\"><a href=\"#¿Que-es-MongoDB\" class=\"headerlink\" title=\"¿Qué es MongoDB?\"></a>¿Qué es MongoDB?</h2><p><a href=\"http://mongodb.org\" target=\"_blank\" rel=\"external\">MongoDB </a>es una base de datos orientada a <strong>documentos</strong> con esquema dinámico. Esto le permite ofrecer un alto <strong>rendimiento</strong> y facilita el desarrollo de aplicaciones. A cambio nos impide tener <strong>Joins y Transacciones</strong> algo muy habitual en bases de datos relacionales, pero sin lo que se puede vivir.</p><h3 id=\"¿De-que-se-compone\"><a href=\"#¿De-que-se-compone\" class=\"headerlink\" title=\"¿De qué se compone?\"></a>¿De qué se compone?</h3><p>Después de su instalación disponemos en un directorio de varios ejecutables que componen <strong>la aplicación servidora y sus herramientas</strong>. El ejecutable fundamental será <code>mongod</code> que es el servidor, es el motor de manejo de datos. Para acceder al servidor se nos ofrece una aplicación de consola llamada <code>mongo</code>. Este es un intérprete de JavaScript y con él, podemos comunicarnos con la base de datos.</p><h3 id=\"¿Como-funciona\"><a href=\"#¿Como-funciona\" class=\"headerlink\" title=\"¿Cómo funciona?\"></a>¿Cómo funciona?</h3><p>MongoDB almacena <strong>documentos en formato JSON</strong>. Bueno realmente lo hace en <em>BSON</em> que es un superconjunto de JSON. BSON es un formato binario que optimiza espacio, rendimiento y aporta funciones extra sobre JSON. Pero esencialmente para nosotros como usuarios toda la entrada salida es en JSON.</p><p>Como los documentos se almacenan en JSON y la consola es un interprete JavaScript, la verdad es que <strong>la consola ofrece una potencia enorme</strong> para realizar operaciones de inserción, selección y manipulación de datos. Cabe destacar que la consola es un programa e intérprete <em>síncrono</em>. Con algunos drivers como el de NodeJS el trabajo es puramente <em>asíncrono</em>.</p><h3 id=\"¿Se-parece-a-SQL\"><a href=\"#¿Se-parece-a-SQL\" class=\"headerlink\" title=\"¿Se parece a SQL?\"></a>¿Se parece a SQL?</h3><p>Si vienes del mundo relacional, cuando llegues a Mongo tendrás que ajustar tu punto de mira al definir tus estructuras de datos. Como una primera guía te diré que hay una ligera <strong>equivalencia entre Mongo y los SQL</strong></p><p><em>SQL</em> -&gt; <strong>MongoDB</strong></p><p><em>DataBase</em> -&gt; <strong>DataBase</strong></p><p><em>Table</em> -&gt; <strong>Collection</strong></p><p><em>Row</em> -&gt; <strong>Document</strong></p><p><em>Field</em> -&gt; <strong>Property</strong></p><p><em>Join</em> -&gt; <strong>Embedded</strong></p><p><em>Index</em> -&gt; <strong>Index</strong></p><p>La enorme diferencia está en que <strong>en una colección se pueden guardar documentos con esquemas distintos</strong>, y que esos esquemas pueden incluir documentos complejos, como arrays y subdocumentos. A esta falta de rigor al definir el esquema se la conoce<br>en inglés como <em>schemaless</em>. Estamos ante una base de datos que almacena documentos de <strong>esquema dinámico</strong>.</p><p>Lo anterior es sin duda un valor diferencial a favor de Mongo pues facilita mucho el desarrollo y evolución de las aplicaciones. Otra cosa es la ausencia de Joins y Transacciones entre colecciones que obliga a diseñar y codificar de manera metódica para garantizar <strong>eficiencia e integridad</strong> en las consultas. La sugerencia es aprovechar sus fortalezas para minimizar las debilidades.</p><h3 id=\"¿Y-entonces\"><a href=\"#¿Y-entonces\" class=\"headerlink\" title=\"¿Y entonces?\"></a>¿Y entonces?</h3><p><strong>MongoDB</strong> tienes campos de aplicación en los que supera a los sistemas relacionales en potencia y facilidad de desarrollo. Pero, hay que saber <strong>escoger la herramienta mas adecuada</strong> para cada caso. Ahora que ya sabes un poco de que va esto de MongoDB puedes empezar a buscar aplicaciones dónde seguro que le sentará como un guante.</p>"},{"title":"Node 6.0.0 actualización con nvm","id":"11","updated":"2016-05-05T08:02:26.000Z","date":"2016-05-05T07:39:40.000Z","_content":"\nAcabamos de recibir la buena noticia de la versión 6 de **NodeJS**. En este caso con mejoras de rendimiento e incorporación de sintaxis de **ES6**. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama [nvm](https://github.com/creationix/nvm) \n\nEstos son los pasos que has de seguir para instalar la herramienta.\n\nSe recomienda desinstalar las versiones de **node** y **npm** instaladas previamente. No es obligatorio.\n\n#### LINUX & OS X\n\n1- Comprobamos que tenemos instaladas las dependencias\n1.1 - Dependencias **Linux**\n```\nsudo apt-get update\nsudo apt-get install build-essential\n```\n\n1.2 -Dependencias **OSX** (herramientas de linea de comandos para XCode)\n```\nxcode-select --install\n```\n\n\n2- Descargamos y ejecutamos el script de instalación\n\n```\t\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\n\n3- Comprobamos que está instalado **NVM**\n```\ncommand -v nvm \n```\n*debe devolver nvm*\n\n\n4- Instalamos la versión de Node que deseamos\n```\t\nnvm install 6.0.0\n```\n\n5- Elegimos la versión de Node instalada que deseamos usar\n\n```\t\nnvm use 6.0.0\n```\n\t\n#### WINDOWS\n\nPara **Windows** no existe una versión *nativa* de **nvm**, pero si hay dos opciones para gestionar las versiones de node instaladas.\n\n1- **nvm-windows**\n\thttps://github.com/coreybutler/nvm-windows\n\tEs un wrapper de npm para windows, el instalador se encuentra en la URL (https://github.com/coreybutler/nvm/releases).\n\t\nLos `comandos` para instalar y la versión de Node son los mismos que en Linux y OSX.\n\t\n2- **nodist**  \nEs un gestor de versiones parecido a NVM solo para Windows\n\tLa URL del instalador (https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe).\n\tLos comandos se encuentran en la documentación. (https://github.com/marcelklehr/nodist)","source":"_posts/Node-6-0-0-actualizacion-con-nvm.md","raw":"---\ntitle: Node 6.0.0 actualización con nvm\ntags:  \n- NodeJS\ncategories:\n- Introducción \npermalink: node-6-0-0-actualizacion-con-nvm\nid: 11\nupdated: '2016-05-05 10:02:26'\ndate: 2016-05-05 09:39:40\n---\n\nAcabamos de recibir la buena noticia de la versión 6 de **NodeJS**. En este caso con mejoras de rendimiento e incorporación de sintaxis de **ES6**. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama [nvm](https://github.com/creationix/nvm) \n\nEstos son los pasos que has de seguir para instalar la herramienta.\n\nSe recomienda desinstalar las versiones de **node** y **npm** instaladas previamente. No es obligatorio.\n\n#### LINUX & OS X\n\n1- Comprobamos que tenemos instaladas las dependencias\n1.1 - Dependencias **Linux**\n```\nsudo apt-get update\nsudo apt-get install build-essential\n```\n\n1.2 -Dependencias **OSX** (herramientas de linea de comandos para XCode)\n```\nxcode-select --install\n```\n\n\n2- Descargamos y ejecutamos el script de instalación\n\n```\t\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\n\n3- Comprobamos que está instalado **NVM**\n```\ncommand -v nvm \n```\n*debe devolver nvm*\n\n\n4- Instalamos la versión de Node que deseamos\n```\t\nnvm install 6.0.0\n```\n\n5- Elegimos la versión de Node instalada que deseamos usar\n\n```\t\nnvm use 6.0.0\n```\n\t\n#### WINDOWS\n\nPara **Windows** no existe una versión *nativa* de **nvm**, pero si hay dos opciones para gestionar las versiones de node instaladas.\n\n1- **nvm-windows**\n\thttps://github.com/coreybutler/nvm-windows\n\tEs un wrapper de npm para windows, el instalador se encuentra en la URL (https://github.com/coreybutler/nvm/releases).\n\t\nLos `comandos` para instalar y la versión de Node son los mismos que en Linux y OSX.\n\t\n2- **nodist**  \nEs un gestor de versiones parecido a NVM solo para Windows\n\tLa URL del instalador (https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe).\n\tLos comandos se encuentran en la documentación. (https://github.com/marcelklehr/nodist)","slug":"node-6-0-0-actualizacion-con-nvm","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvgh000xiwd30fgjttck","content":"<p>Acabamos de recibir la buena noticia de la versión 6 de <strong>NodeJS</strong>. En este caso con mejoras de rendimiento e incorporación de sintaxis de <strong>ES6</strong>. ¿Cómo obtener esta nueva versión?. Y sobretodo, ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a></p><p>Estos son los pasos que has de seguir para instalar la herramienta.</p><p>Se recomienda desinstalar las versiones de <strong>node</strong> y <strong>npm</strong> instaladas previamente. No es obligatorio.</p><h4 id=\"LINUX-amp-OS-X\"><a href=\"#LINUX-amp-OS-X\" class=\"headerlink\" title=\"LINUX &amp; OS X\"></a>LINUX &amp; OS X</h4><p>1- Comprobamos que tenemos instaladas las dependencias<br>1.1 - Dependencias <strong>Linux</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install build-essential</div></pre></td></tr></table></figure><p></p><p>1.2 -Dependencias <strong>OSX</strong> (herramientas de linea de comandos para XCode)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcode-select --install</div></pre></td></tr></table></figure><p></p><p>2- Descargamos y ejecutamos el script de instalación</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div></pre></td></tr></table></figure><p>3- Comprobamos que está instalado <strong>NVM</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command -v nvm</div></pre></td></tr></table></figure><p></p><p><em>debe devolver nvm</em></p><p>4- Instalamos la versión de Node que deseamos<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 6.0.0</div></pre></td></tr></table></figure><p></p><p>5- Elegimos la versión de Node instalada que deseamos usar</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm use 6.0.0</div></pre></td></tr></table></figure><h4 id=\"WINDOWS\"><a href=\"#WINDOWS\" class=\"headerlink\" title=\"WINDOWS\"></a>WINDOWS</h4><p>Para <strong>Windows</strong> no existe una versión <em>nativa</em> de <strong>nvm</strong>, pero si hay dos opciones para gestionar las versiones de node instaladas.</p><p>1- <strong>nvm-windows</strong><br><a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm-windows</a><br>Es un wrapper de npm para windows, el instalador se encuentra en la URL (<a href=\"https://github.com/coreybutler/nvm/releases\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm/releases</a>).</p><p>Los <code>comandos</code> para instalar y la versión de Node son los mismos que en Linux y OSX.</p><p>2- <strong>nodist</strong><br>Es un gestor de versiones parecido a NVM solo para Windows<br>La URL del instalador (<a href=\"https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe\" target=\"_blank\" rel=\"external\">https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe</a>).<br>Los comandos se encuentran en la documentación. (<a href=\"https://github.com/marcelklehr/nodist\" target=\"_blank\" rel=\"external\">https://github.com/marcelklehr/nodist</a>)</p>","site":{"data":{}},"excerpt":"","more":"<p>Acabamos de recibir la buena noticia de la versión 6 de <strong>NodeJS</strong>. En este caso con mejoras de rendimiento e incorporación de sintaxis de <strong>ES6</strong>. ¿Cómo obtener esta nueva versión?. Y sobretodo, ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a></p><p>Estos son los pasos que has de seguir para instalar la herramienta.</p><p>Se recomienda desinstalar las versiones de <strong>node</strong> y <strong>npm</strong> instaladas previamente. No es obligatorio.</p><h4 id=\"LINUX-amp-OS-X\"><a href=\"#LINUX-amp-OS-X\" class=\"headerlink\" title=\"LINUX &amp; OS X\"></a>LINUX &amp; OS X</h4><p>1- Comprobamos que tenemos instaladas las dependencias<br>1.1 - Dependencias <strong>Linux</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install build-essential</div></pre></td></tr></table></figure><p></p><p>1.2 -Dependencias <strong>OSX</strong> (herramientas de linea de comandos para XCode)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcode-select --install</div></pre></td></tr></table></figure><p></p><p>2- Descargamos y ejecutamos el script de instalación</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div></pre></td></tr></table></figure><p>3- Comprobamos que está instalado <strong>NVM</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command -v nvm</div></pre></td></tr></table></figure><p></p><p><em>debe devolver nvm</em></p><p>4- Instalamos la versión de Node que deseamos<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 6.0.0</div></pre></td></tr></table></figure><p></p><p>5- Elegimos la versión de Node instalada que deseamos usar</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm use 6.0.0</div></pre></td></tr></table></figure><h4 id=\"WINDOWS\"><a href=\"#WINDOWS\" class=\"headerlink\" title=\"WINDOWS\"></a>WINDOWS</h4><p>Para <strong>Windows</strong> no existe una versión <em>nativa</em> de <strong>nvm</strong>, pero si hay dos opciones para gestionar las versiones de node instaladas.</p><p>1- <strong>nvm-windows</strong><br><a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm-windows</a><br>Es un wrapper de npm para windows, el instalador se encuentra en la URL (<a href=\"https://github.com/coreybutler/nvm/releases\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm/releases</a>).</p><p>Los <code>comandos</code> para instalar y la versión de Node son los mismos que en Linux y OSX.</p><p>2- <strong>nodist</strong><br>Es un gestor de versiones parecido a NVM solo para Windows<br>La URL del instalador (<a href=\"https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe\" target=\"_blank\" rel=\"external\">https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe</a>).<br>Los comandos se encuentran en la documentación. (<a href=\"https://github.com/marcelklehr/nodist\" target=\"_blank\" rel=\"external\">https://github.com/marcelklehr/nodist</a>)</p>"},{"title":"Hola Mundo Angular 2","id":"12","updated":"2016-10-31T11:36:28.000Z","date":"2016-05-18T14:10:18.000Z","_content":"\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Hola Angular CLI](../hola-angular-cli/)\n\n---\n\n>Código asociado en GitHub: [angular2/1-HolaMundo/](https://github.com/AcademiaBinaria/angular2/tree/master/1-hola-mundo)\n\nQué lejanos aquellos tiempos dónde un [Hola Mundo en AngularJS](https://github.com/AcademiaBinaria/HolaAngularJS) se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear **aplicaciones de nivel empresarial con Angular 2.**\n\nYa he explicado que Angular ha pasado [de framework a plataforma](http://academia-binaria.com/angular2-primeras-impresiones/), y que ya no es para aficionados. Grandes desarrollos en equipo requieren **herramientas y procedimientos** a la altura. La primera opción que te recomiendo es [Angular CLI](https://cli.angular.io/), un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es *aún* más compleja que la que te muestro.\n\n<!-- more -->\n\n## Preparando el entorno\nLas herramientas que voy a usar requieren [NodeJS](nodejs.org). Te recomiendo que instales una de sus últimas versiones. Tras la instalación tendrás acceso a [npm](npmjs.com) para poder instalar librerías y utilidades como Angular CLI.\n\n```\nnpm install -g angular-cli\n```\n\nA partir de ahora en tu linea de comandos podrás usar el programa `ng` seguido de algún comando como `new generate serve lint test e2e build`. Usaremos algunos en esta demo.\n\n## Creando aplicaciones y componentes\nEscoge un directorio en un disco con espacio libre. No es broma, hasta 300 mb o más para empezar. Tranquilo, en distribución la cosa pinta mucho mejor y Angular es muy ligero. Ahora teclea:\n\n\n```\nng new hola-angular-2\n```\n\nUnos segundos o minutos más tarde... podrás abrir la recién creada carpeta, yo lo hago con [VSCode](https://code.visualstudio.com/), y explorar el contenido de sus 3 directorios y miles de ficheros!!!\n\nDespués del susto, tranquilidad de nuevo. La mayoría son dependencias de terceros productos, herramientas necesarias para ejecutar aplicación o para alguno de sus procesos de *test, lint o distribución*. Centrémonos en el directorio `src` dónde están los fuentes, el código que tendríamos que haber creado nosotros.\n\nDe un primer vistazo puede que sólo reconozcas al viejo `index.html`. No te agobies, por ahora es suficiente. Contendrá algo como esto:\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>HolaAngular2</title>\n  <base href=\"/\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <!--Componente raíz de la aplicación-->\n  <app-root>Loading...</app-root>\n</body>\n</html>\n```\n\nDe lo que es Angular 2 lo único interesante es el componente `<app-root>Loading...</app-root>`. Todo, incluida la aplicación principal, debe ser definido y declarado como un componente. De hecho definiremos las aplicaciones Angular2 como árboles de componentes. Y tdodo árbol debe tener una raíz. Mientras Angular no entre en fucionamiento, el susario verá el mensaje de *Loading...* después la magia de Angular2 lo sustituirá por el contenido del componente `app-root` predefinido por el generador. \n\n## TypeScript\nSin entrar en debates de [qué lenguaje usar para programar en Angular2](https://www.youtube.com/watch?v=OpS2R7rbpRg) te resumo mi posición: \n\n1.- TypeScript te permite anotar tu **JavaScript con tipos**. Esto tiene dos ventajas: *intellisense* mientras codificas y chequeo de tipos cuando compilas.\n2.- TypeScript es la **única opción automatizada a día de hoy** con Angular CLI.\n\nPor lo demás no hay porqué alarmarse. [TypeScript](https://www.typescriptlang.org/) es un *superset de JavaScript ES6* con unas mejoras evidentes que no tardarás en dominar. Eso si, tienes que aprender [JavaScript ES2015 o ES6](http://es6-features.org/).\n\nSabiendo esto, entra sin miedo en cualquier fichero de extensión `.ts` y verás que es muy parecido a cualquier `.js` de la nueva versión. Por ejemplo en el citado `main.ts` aparecerá algo así:\n\n```javascript\n// importaciones de dependencias TypeScript al estilo ES6\n// primero los básicos para compatibilidad con navegadores\nimport './polyfills.ts';\n// luego cosas de Angular\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\n// después nuestro código, empezando por la configuración\nimport { environment } from './environments/environment';\n// y por último la aplicación a leída desde el módulo raíz, llamado app por convenio.\nimport { AppModule } from './app/';\n\n// condiciones para ejecutar en modo desarrollo o producción\nif (environment.production) {\n  enableProdMode();\n}\n// arranque de la aplicación invocando al módulo raíz\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\nCentrándonos en el código que habremos de mantener fíjate en la línea `import { AppModule } from './app/';`. Le indica a *WebPack* que importe el contenido de la carpeta `./app/`. Para ello buscará en dicho directorio un archivo `index.ts`. Ese fichero sirve de índice y contiene las instrucciones para exportar el código interesante del resto de la carpeta. En nuestro caso son el módulo y el componente raíz. \n\n## El módulo raíz\nLas aplicaciones Angular2 están pensadas para crecer. Para ello es fundamental cierto grado de modularidad. EL viejo `angular.module` ha vuelto en la versión 2. Mira dentro del fichero `app.module.ts` y verás código similar a este:\n\n```javascript\n// objetos con utilidades comunes del framework\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n// importación del componente raíz, definido en esta misma carpeta\nimport { AppComponent } from './app.component';\n// decorador con metadata que define un módulo\n@NgModule({\n  declarations: [\n    AppComponent\n  ], // cosas declaradas en este módulo\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ], // otros módulos que necesitamos para que este funcione\n  providers: [] , // inyección de servicios comunes para la aplicación\n  bootstrap: [AppComponent] // componente raíz para el arranque\n})\n// los módulos son clases contendoras \n// habitualmente con poco o ningún código\nexport class AppModule { }\n```\n\nUn módulo no es más que una clase contenedora. Cada módulo puede incluir múltiples componentes y servicios. Normalmente un módulo dependerá de otros. El módulo raíz declara un componente especial para el arranque de la aplicación: *El componente raíz*\n\n## El componente raíz\nBuceando a mayor profundidad nos encontramos con el resto del contenido de la carpeta `./app/`. Son archivos con nombres tipo `app.component.*` y se usan para definir un componente.\n\nLos **componentes son los bloques de construcción de Angular 2** que representan regiones de la pantalla. Las aplicaciones se definen como árboles de componentes. Nuestra aplicación es un árbol que tiene una raíz, habitualmente llamado `app` y que es común a cualquier desarrollo.\n\nCada componente a su vez está formado por tres partes:\n1. **La vista**: es el código que se renderizará para los usuarios. Esta plantilla estará en un fichero de extensión `.html`.\n2. **La clase controladora**: En ES6 usaremos clases para declarar los controladores que exponen datos y funcionalidad a la vista.\n3. **Metadata**: Se declara como un decorador, una función especial de TypeScript, que recibe un objeto de configuración. Esto acompaña al controlador en un fichero de extensión `.ts`\n\nEmpecemos por este último fichero, el `app.component.ts`.\n```javascript\nimport { Component } from '@angular/core';\n// Función decoradora que registra un componente\n@Component({\n  selector: 'app-root', // elemento html consumidor\n  templateUrl: './app.component.html', // ruta relativa a la vista\n  styleUrls: ['./app.component.css'] // potencialmente múltiples hojas de estilo\n})\n// clase que representa un controlador \n// con su modelo de datos (title ) y métodos de acción (aún no tiene)\n// Esta clase es todo lo que se exporta en este fichero\n// y esto se importará en app.module.ts para ser incorporado el módulo raíz\nexport class AppComponent {\n  // las propiedades de la clase representan el modelo de datos\n  // son accesibles desde la vista\n  title = 'app works!';\n}\n```\n\nSeguro que la parte más novedosa es `@Component({...})`. Es el equivalente a los antiguos Objetos de Definición de Directivas. Lo que hace es asociar al controlador una plantilla HTML `app.component.html` y un selector para ser invocado desde otra vista `<app-root></app-root>`. El resto por ahora puedes obviarlo.\n\nY hablando de la plantilla, echemos un vistazo a `app.component.html`. Contendrá algo así:\n\n```html\n<h1>\n  <!--Interpolación de variables definidas en el modelo del componente-->\n  {{ title }}\n</h1>\n```\n\nEstas son cosas que te resultarán muy familiares como la interpolación `{{ title }}` que permite mostrar el famoso *app works!*, nueva versión del *hola mundo*. Ya está, el resto ya es sólo usar este componente en el `index.html`, \nRecuerda:\n```html\n  <!--Componente raíz de la aplicación-->\n  <app-root>Loading...</app-root>\n```\n## Angular2 en acción\nPara lanzar y probar tu aplicación necesitas otro comando de Angular-CLI. Este comando se ocupa entre otras cosas de todo el proceso necesario para **transformar el código TypeScript en JavaScript** reconocible por el navegador. También crea un mini servidor estático y además refresca el navegador a cada cambio los fuentes. Un salvavidas para un recién llegado a Angular 2. Teclea en tu terminal:\n\n```\nng serve\n```\n\nSi todo ha ido bien, no siempre ocurre con estas versiones tan verdes, podrás disfrutar de **tu primera aplicación con Angular 2** en [http://localhost:4200](http://localhost:4200)  \n\n\n>[Este vídeo](https://youtu.be/Y7izsxhPpQY) emitido con la colaboración de DesarrolloWeb.com contiene una explicación mas extensa del proceso de trabajo con Angular 2 CLI.\n\n\n\n<div class=\"flex-video\">  \n    <iframe src=\"https://www.youtube.com/embed/Y7izsxhPpQY\"></iframe>\n</div>\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/)","source":"_posts/Hola-Mundo-Angular-2.md","raw":"---\ntitle: Hola Mundo Angular 2\ntags:  \n- Angular2\n- CLI\n- Tutorial\ncategories:\n- Introducción \npermalink: hola-mundo-en-angular-2\nid: 12\nupdated: 2016/10/31 12:36:28\ndate: 2016/05/18 16:10:18\n---\n\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Hola Angular CLI](../hola-angular-cli/)\n\n---\n\n>Código asociado en GitHub: [angular2/1-HolaMundo/](https://github.com/AcademiaBinaria/angular2/tree/master/1-hola-mundo)\n\nQué lejanos aquellos tiempos dónde un [Hola Mundo en AngularJS](https://github.com/AcademiaBinaria/HolaAngularJS) se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear **aplicaciones de nivel empresarial con Angular 2.**\n\nYa he explicado que Angular ha pasado [de framework a plataforma](http://academia-binaria.com/angular2-primeras-impresiones/), y que ya no es para aficionados. Grandes desarrollos en equipo requieren **herramientas y procedimientos** a la altura. La primera opción que te recomiendo es [Angular CLI](https://cli.angular.io/), un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es *aún* más compleja que la que te muestro.\n\n<!-- more -->\n\n## Preparando el entorno\nLas herramientas que voy a usar requieren [NodeJS](nodejs.org). Te recomiendo que instales una de sus últimas versiones. Tras la instalación tendrás acceso a [npm](npmjs.com) para poder instalar librerías y utilidades como Angular CLI.\n\n```\nnpm install -g angular-cli\n```\n\nA partir de ahora en tu linea de comandos podrás usar el programa `ng` seguido de algún comando como `new generate serve lint test e2e build`. Usaremos algunos en esta demo.\n\n## Creando aplicaciones y componentes\nEscoge un directorio en un disco con espacio libre. No es broma, hasta 300 mb o más para empezar. Tranquilo, en distribución la cosa pinta mucho mejor y Angular es muy ligero. Ahora teclea:\n\n\n```\nng new hola-angular-2\n```\n\nUnos segundos o minutos más tarde... podrás abrir la recién creada carpeta, yo lo hago con [VSCode](https://code.visualstudio.com/), y explorar el contenido de sus 3 directorios y miles de ficheros!!!\n\nDespués del susto, tranquilidad de nuevo. La mayoría son dependencias de terceros productos, herramientas necesarias para ejecutar aplicación o para alguno de sus procesos de *test, lint o distribución*. Centrémonos en el directorio `src` dónde están los fuentes, el código que tendríamos que haber creado nosotros.\n\nDe un primer vistazo puede que sólo reconozcas al viejo `index.html`. No te agobies, por ahora es suficiente. Contendrá algo como esto:\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>HolaAngular2</title>\n  <base href=\"/\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <!--Componente raíz de la aplicación-->\n  <app-root>Loading...</app-root>\n</body>\n</html>\n```\n\nDe lo que es Angular 2 lo único interesante es el componente `<app-root>Loading...</app-root>`. Todo, incluida la aplicación principal, debe ser definido y declarado como un componente. De hecho definiremos las aplicaciones Angular2 como árboles de componentes. Y tdodo árbol debe tener una raíz. Mientras Angular no entre en fucionamiento, el susario verá el mensaje de *Loading...* después la magia de Angular2 lo sustituirá por el contenido del componente `app-root` predefinido por el generador. \n\n## TypeScript\nSin entrar en debates de [qué lenguaje usar para programar en Angular2](https://www.youtube.com/watch?v=OpS2R7rbpRg) te resumo mi posición: \n\n1.- TypeScript te permite anotar tu **JavaScript con tipos**. Esto tiene dos ventajas: *intellisense* mientras codificas y chequeo de tipos cuando compilas.\n2.- TypeScript es la **única opción automatizada a día de hoy** con Angular CLI.\n\nPor lo demás no hay porqué alarmarse. [TypeScript](https://www.typescriptlang.org/) es un *superset de JavaScript ES6* con unas mejoras evidentes que no tardarás en dominar. Eso si, tienes que aprender [JavaScript ES2015 o ES6](http://es6-features.org/).\n\nSabiendo esto, entra sin miedo en cualquier fichero de extensión `.ts` y verás que es muy parecido a cualquier `.js` de la nueva versión. Por ejemplo en el citado `main.ts` aparecerá algo así:\n\n```javascript\n// importaciones de dependencias TypeScript al estilo ES6\n// primero los básicos para compatibilidad con navegadores\nimport './polyfills.ts';\n// luego cosas de Angular\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\n// después nuestro código, empezando por la configuración\nimport { environment } from './environments/environment';\n// y por último la aplicación a leída desde el módulo raíz, llamado app por convenio.\nimport { AppModule } from './app/';\n\n// condiciones para ejecutar en modo desarrollo o producción\nif (environment.production) {\n  enableProdMode();\n}\n// arranque de la aplicación invocando al módulo raíz\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\nCentrándonos en el código que habremos de mantener fíjate en la línea `import { AppModule } from './app/';`. Le indica a *WebPack* que importe el contenido de la carpeta `./app/`. Para ello buscará en dicho directorio un archivo `index.ts`. Ese fichero sirve de índice y contiene las instrucciones para exportar el código interesante del resto de la carpeta. En nuestro caso son el módulo y el componente raíz. \n\n## El módulo raíz\nLas aplicaciones Angular2 están pensadas para crecer. Para ello es fundamental cierto grado de modularidad. EL viejo `angular.module` ha vuelto en la versión 2. Mira dentro del fichero `app.module.ts` y verás código similar a este:\n\n```javascript\n// objetos con utilidades comunes del framework\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n// importación del componente raíz, definido en esta misma carpeta\nimport { AppComponent } from './app.component';\n// decorador con metadata que define un módulo\n@NgModule({\n  declarations: [\n    AppComponent\n  ], // cosas declaradas en este módulo\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ], // otros módulos que necesitamos para que este funcione\n  providers: [] , // inyección de servicios comunes para la aplicación\n  bootstrap: [AppComponent] // componente raíz para el arranque\n})\n// los módulos son clases contendoras \n// habitualmente con poco o ningún código\nexport class AppModule { }\n```\n\nUn módulo no es más que una clase contenedora. Cada módulo puede incluir múltiples componentes y servicios. Normalmente un módulo dependerá de otros. El módulo raíz declara un componente especial para el arranque de la aplicación: *El componente raíz*\n\n## El componente raíz\nBuceando a mayor profundidad nos encontramos con el resto del contenido de la carpeta `./app/`. Son archivos con nombres tipo `app.component.*` y se usan para definir un componente.\n\nLos **componentes son los bloques de construcción de Angular 2** que representan regiones de la pantalla. Las aplicaciones se definen como árboles de componentes. Nuestra aplicación es un árbol que tiene una raíz, habitualmente llamado `app` y que es común a cualquier desarrollo.\n\nCada componente a su vez está formado por tres partes:\n1. **La vista**: es el código que se renderizará para los usuarios. Esta plantilla estará en un fichero de extensión `.html`.\n2. **La clase controladora**: En ES6 usaremos clases para declarar los controladores que exponen datos y funcionalidad a la vista.\n3. **Metadata**: Se declara como un decorador, una función especial de TypeScript, que recibe un objeto de configuración. Esto acompaña al controlador en un fichero de extensión `.ts`\n\nEmpecemos por este último fichero, el `app.component.ts`.\n```javascript\nimport { Component } from '@angular/core';\n// Función decoradora que registra un componente\n@Component({\n  selector: 'app-root', // elemento html consumidor\n  templateUrl: './app.component.html', // ruta relativa a la vista\n  styleUrls: ['./app.component.css'] // potencialmente múltiples hojas de estilo\n})\n// clase que representa un controlador \n// con su modelo de datos (title ) y métodos de acción (aún no tiene)\n// Esta clase es todo lo que se exporta en este fichero\n// y esto se importará en app.module.ts para ser incorporado el módulo raíz\nexport class AppComponent {\n  // las propiedades de la clase representan el modelo de datos\n  // son accesibles desde la vista\n  title = 'app works!';\n}\n```\n\nSeguro que la parte más novedosa es `@Component({...})`. Es el equivalente a los antiguos Objetos de Definición de Directivas. Lo que hace es asociar al controlador una plantilla HTML `app.component.html` y un selector para ser invocado desde otra vista `<app-root></app-root>`. El resto por ahora puedes obviarlo.\n\nY hablando de la plantilla, echemos un vistazo a `app.component.html`. Contendrá algo así:\n\n```html\n<h1>\n  <!--Interpolación de variables definidas en el modelo del componente-->\n  {{ title }}\n</h1>\n```\n\nEstas son cosas que te resultarán muy familiares como la interpolación `{{ title }}` que permite mostrar el famoso *app works!*, nueva versión del *hola mundo*. Ya está, el resto ya es sólo usar este componente en el `index.html`, \nRecuerda:\n```html\n  <!--Componente raíz de la aplicación-->\n  <app-root>Loading...</app-root>\n```\n## Angular2 en acción\nPara lanzar y probar tu aplicación necesitas otro comando de Angular-CLI. Este comando se ocupa entre otras cosas de todo el proceso necesario para **transformar el código TypeScript en JavaScript** reconocible por el navegador. También crea un mini servidor estático y además refresca el navegador a cada cambio los fuentes. Un salvavidas para un recién llegado a Angular 2. Teclea en tu terminal:\n\n```\nng serve\n```\n\nSi todo ha ido bien, no siempre ocurre con estas versiones tan verdes, podrás disfrutar de **tu primera aplicación con Angular 2** en [http://localhost:4200](http://localhost:4200)  \n\n\n>[Este vídeo](https://youtu.be/Y7izsxhPpQY) emitido con la colaboración de DesarrolloWeb.com contiene una explicación mas extensa del proceso de trabajo con Angular 2 CLI.\n\n\n\n<div class=\"flex-video\">  \n    <iframe src=\"https://www.youtube.com/embed/Y7izsxhPpQY\"></iframe>\n</div>\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/)","slug":"hola-mundo-en-angular-2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvgx0010iwd3wg1uhspm","content":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../hola-angular-cli/\">Hola Angular CLI</a></p></blockquote><hr><blockquote><p>Código asociado en GitHub: <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/1-hola-mundo\" target=\"_blank\" rel=\"external\">angular2/1-HolaMundo/</a></p></blockquote><p>Qué lejanos aquellos tiempos dónde un <a href=\"https://github.com/AcademiaBinaria/HolaAngularJS\" target=\"_blank\" rel=\"external\">Hola Mundo en AngularJS</a> se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear <strong>aplicaciones de nivel empresarial con Angular 2.</strong></p><p>Ya he explicado que Angular ha pasado <a href=\"http://academia-binaria.com/angular2-primeras-impresiones/\">de framework a plataforma</a>, y que ya no es para aficionados. Grandes desarrollos en equipo requieren <strong>herramientas y procedimientos</strong> a la altura. La primera opción que te recomiendo es <a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a>, un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es <em>aún</em> más compleja que la que te muestro.</p><a id=\"more\"></a><h2 id=\"Preparando-el-entorno\"><a href=\"#Preparando-el-entorno\" class=\"headerlink\" title=\"Preparando el entorno\"></a>Preparando el entorno</h2><p>Las herramientas que voy a usar requieren <a href=\"nodejs.org\">NodeJS</a>. Te recomiendo que instales una de sus últimas versiones. Tras la instalación tendrás acceso a <a href=\"npmjs.com\">npm</a> para poder instalar librerías y utilidades como Angular CLI.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g angular-cli</div></pre></td></tr></table></figure><p>A partir de ahora en tu linea de comandos podrás usar el programa <code>ng</code> seguido de algún comando como <code>new generate serve lint test e2e build</code>. Usaremos algunos en esta demo.</p><h2 id=\"Creando-aplicaciones-y-componentes\"><a href=\"#Creando-aplicaciones-y-componentes\" class=\"headerlink\" title=\"Creando aplicaciones y componentes\"></a>Creando aplicaciones y componentes</h2><p>Escoge un directorio en un disco con espacio libre. No es broma, hasta 300 mb o más para empezar. Tranquilo, en distribución la cosa pinta mucho mejor y Angular es muy ligero. Ahora teclea:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new hola-angular-2</div></pre></td></tr></table></figure><p>Unos segundos o minutos más tarde… podrás abrir la recién creada carpeta, yo lo hago con <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a>, y explorar el contenido de sus 3 directorios y miles de ficheros!!!</p><p>Después del susto, tranquilidad de nuevo. La mayoría son dependencias de terceros productos, herramientas necesarias para ejecutar aplicación o para alguno de sus procesos de <em>test, lint o distribución</em>. Centrémonos en el directorio <code>src</code> dónde están los fuentes, el código que tendríamos que haber creado nosotros.</p><p>De un primer vistazo puede que sólo reconozcas al viejo <code>index.html</code>. No te agobies, por ahora es suficiente. Contendrá algo como esto:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HolaAngular2<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Componente raíz de la aplicación--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure><p>De lo que es Angular 2 lo único interesante es el componente <code>&lt;app-root&gt;Loading...&lt;/app-root&gt;</code>. Todo, incluida la aplicación principal, debe ser definido y declarado como un componente. De hecho definiremos las aplicaciones Angular2 como árboles de componentes. Y tdodo árbol debe tener una raíz. Mientras Angular no entre en fucionamiento, el susario verá el mensaje de <em>Loading…</em> después la magia de Angular2 lo sustituirá por el contenido del componente <code>app-root</code> predefinido por el generador.</p><h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><p>Sin entrar en debates de <a href=\"https://www.youtube.com/watch?v=OpS2R7rbpRg\" target=\"_blank\" rel=\"external\">qué lenguaje usar para programar en Angular2</a> te resumo mi posición:</p><p>1.- TypeScript te permite anotar tu <strong>JavaScript con tipos</strong>. Esto tiene dos ventajas: <em>intellisense</em> mientras codificas y chequeo de tipos cuando compilas.<br>2.- TypeScript es la <strong>única opción automatizada a día de hoy</strong> con Angular CLI.</p><p>Por lo demás no hay porqué alarmarse. <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">TypeScript</a> es un <em>superset de JavaScript ES6</em> con unas mejoras evidentes que no tardarás en dominar. Eso si, tienes que aprender <a href=\"http://es6-features.org/\" target=\"_blank\" rel=\"external\">JavaScript ES2015 o ES6</a>.</p><p>Sabiendo esto, entra sin miedo en cualquier fichero de extensión <code>.ts</code> y verás que es muy parecido a cualquier <code>.js</code> de la nueva versión. Por ejemplo en el citado <code>main.ts</code> aparecerá algo así:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importaciones de dependencias TypeScript al estilo ES6</span></div><div class=\"line\"><span class=\"comment\">// primero los básicos para compatibilidad con navegadores</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./polyfills.ts'</span>;</div><div class=\"line\"><span class=\"comment\">// luego cosas de Angular</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser-dynamic'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// después nuestro código, empezando por la configuración</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./environments/environment'</span>;</div><div class=\"line\"><span class=\"comment\">// y por último la aplicación a leída desde el módulo raíz, llamado app por convenio.</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app/'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// condiciones para ejecutar en modo desarrollo o producción</span></div><div class=\"line\"><span class=\"keyword\">if</span> (environment.production) &#123;</div><div class=\"line\">  enableProdMode();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// arranque de la aplicación invocando al módulo raíz</span></div><div class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule);</div></pre></td></tr></table></figure><p>Centrándonos en el código que habremos de mantener fíjate en la línea <code>import { AppModule } from &#39;./app/&#39;;</code>. Le indica a <em>WebPack</em> que importe el contenido de la carpeta <code>./app/</code>. Para ello buscará en dicho directorio un archivo <code>index.ts</code>. Ese fichero sirve de índice y contiene las instrucciones para exportar el código interesante del resto de la carpeta. En nuestro caso son el módulo y el componente raíz.</p><h2 id=\"El-modulo-raiz\"><a href=\"#El-modulo-raiz\" class=\"headerlink\" title=\"El módulo raíz\"></a>El módulo raíz</h2><p>Las aplicaciones Angular2 están pensadas para crecer. Para ello es fundamental cierto grado de modularidad. EL viejo <code>angular.module</code> ha vuelto en la versión 2. Mira dentro del fichero <code>app.module.ts</code> y verás código similar a este:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// objetos con utilidades comunes del framework</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// importación del componente raíz, definido en esta misma carpeta</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</div><div class=\"line\"><span class=\"comment\">// decorador con metadata que define un módulo</span></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [</div><div class=\"line\">    AppComponent</div><div class=\"line\">  ], <span class=\"comment\">// cosas declaradas en este módulo</span></div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule</div><div class=\"line\">  ], <span class=\"comment\">// otros módulos que necesitamos para que este funcione</span></div><div class=\"line\">  providers: [] , <span class=\"comment\">// inyección de servicios comunes para la aplicación</span></div><div class=\"line\">  bootstrap: [AppComponent] <span class=\"comment\">// componente raíz para el arranque</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// los módulos son clases contendoras </span></div><div class=\"line\"><span class=\"comment\">// habitualmente con poco o ningún código</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><p>Un módulo no es más que una clase contenedora. Cada módulo puede incluir múltiples componentes y servicios. Normalmente un módulo dependerá de otros. El módulo raíz declara un componente especial para el arranque de la aplicación: <em>El componente raíz</em></p><h2 id=\"El-componente-raiz\"><a href=\"#El-componente-raiz\" class=\"headerlink\" title=\"El componente raíz\"></a>El componente raíz</h2><p>Buceando a mayor profundidad nos encontramos con el resto del contenido de la carpeta <code>./app/</code>. Son archivos con nombres tipo <code>app.component.*</code> y se usan para definir un componente.</p><p>Los <strong>componentes son los bloques de construcción de Angular 2</strong> que representan regiones de la pantalla. Las aplicaciones se definen como árboles de componentes. Nuestra aplicación es un árbol que tiene una raíz, habitualmente llamado <code>app</code> y que es común a cualquier desarrollo.</p><p>Cada componente a su vez está formado por tres partes:</p><ol><li><strong>La vista</strong>: es el código que se renderizará para los usuarios. Esta plantilla estará en un fichero de extensión <code>.html</code>.</li><li><strong>La clase controladora</strong>: En ES6 usaremos clases para declarar los controladores que exponen datos y funcionalidad a la vista.</li><li><strong>Metadata</strong>: Se declara como un decorador, una función especial de TypeScript, que recibe un objeto de configuración. Esto acompaña al controlador en un fichero de extensión <code>.ts</code></li></ol><p>Empecemos por este último fichero, el <code>app.component.ts</code>.<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// Función decoradora que registra un componente</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-root'</span>, <span class=\"comment\">// elemento html consumidor</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span>, <span class=\"comment\">// ruta relativa a la vista</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./app.component.css'</span>] <span class=\"comment\">// potencialmente múltiples hojas de estilo</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// clase que representa un controlador </span></div><div class=\"line\"><span class=\"comment\">// con su modelo de datos (title ) y métodos de acción (aún no tiene)</span></div><div class=\"line\"><span class=\"comment\">// Esta clase es todo lo que se exporta en este fichero</span></div><div class=\"line\"><span class=\"comment\">// y esto se importará en app.module.ts para ser incorporado el módulo raíz</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// las propiedades de la clase representan el modelo de datos</span></div><div class=\"line\">  <span class=\"comment\">// son accesibles desde la vista</span></div><div class=\"line\">  title = <span class=\"string\">'app works!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>Seguro que la parte más novedosa es <code>@Component({...})</code>. Es el equivalente a los antiguos Objetos de Definición de Directivas. Lo que hace es asociar al controlador una plantilla HTML <code>app.component.html</code> y un selector para ser invocado desde otra vista <code>&lt;app-root&gt;&lt;/app-root&gt;</code>. El resto por ahora puedes obviarlo.</p><p>Y hablando de la plantilla, echemos un vistazo a <code>app.component.html</code>. Contendrá algo así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Interpolación de variables definidas en el modelo del componente--&gt;</span></div><div class=\"line\">  &#123;&#123; title &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure><p>Estas son cosas que te resultarán muy familiares como la interpolación <code>Hola Mundo Angular 2</code> que permite mostrar el famoso <em>app works!</em>, nueva versión del <em>hola mundo</em>. Ya está, el resto ya es sólo usar este componente en el <code>index.html</code>,<br>Recuerda:<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--Componente raíz de la aplicación--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id=\"Angular2-en-accion\"><a href=\"#Angular2-en-accion\" class=\"headerlink\" title=\"Angular2 en acción\"></a>Angular2 en acción</h2><p>Para lanzar y probar tu aplicación necesitas otro comando de Angular-CLI. Este comando se ocupa entre otras cosas de todo el proceso necesario para <strong>transformar el código TypeScript en JavaScript</strong> reconocible por el navegador. También crea un mini servidor estático y además refresca el navegador a cada cambio los fuentes. Un salvavidas para un recién llegado a Angular 2. Teclea en tu terminal:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng serve</div></pre></td></tr></table></figure><p>Si todo ha ido bien, no siempre ocurre con estas versiones tan verdes, podrás disfrutar de <strong>tu primera aplicación con Angular 2</strong> en <a href=\"http://localhost:4200\" target=\"_blank\" rel=\"external\">http://localhost:4200</a></p><blockquote><p><a href=\"https://youtu.be/Y7izsxhPpQY\" target=\"_blank\" rel=\"external\">Este vídeo</a> emitido con la colaboración de DesarrolloWeb.com contiene una explicación mas extensa del proceso de trabajo con Angular 2 CLI.</p></blockquote><div class=\"flex-video\"><br><iframe src=\"https://www.youtube.com/embed/Y7izsxhPpQY\"></iframe><br></div><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a></p>","site":{"data":{}},"excerpt":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../hola-angular-cli/\">Hola Angular CLI</a></p></blockquote><hr><blockquote><p>Código asociado en GitHub: <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/1-hola-mundo\" target=\"_blank\" rel=\"external\">angular2/1-HolaMundo/</a></p></blockquote><p>Qué lejanos aquellos tiempos dónde un <a href=\"https://github.com/AcademiaBinaria/HolaAngularJS\" target=\"_blank\" rel=\"external\">Hola Mundo en AngularJS</a> se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear <strong>aplicaciones de nivel empresarial con Angular 2.</strong></p><p>Ya he explicado que Angular ha pasado <a href=\"http://academia-binaria.com/angular2-primeras-impresiones/\">de framework a plataforma</a>, y que ya no es para aficionados. Grandes desarrollos en equipo requieren <strong>herramientas y procedimientos</strong> a la altura. La primera opción que te recomiendo es <a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"external\">Angular CLI</a>, un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es <em>aún</em> más compleja que la que te muestro.</p>","more":"<h2 id=\"Preparando-el-entorno\"><a href=\"#Preparando-el-entorno\" class=\"headerlink\" title=\"Preparando el entorno\"></a>Preparando el entorno</h2><p>Las herramientas que voy a usar requieren <a href=\"nodejs.org\">NodeJS</a>. Te recomiendo que instales una de sus últimas versiones. Tras la instalación tendrás acceso a <a href=\"npmjs.com\">npm</a> para poder instalar librerías y utilidades como Angular CLI.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g angular-cli</div></pre></td></tr></table></figure><p>A partir de ahora en tu linea de comandos podrás usar el programa <code>ng</code> seguido de algún comando como <code>new generate serve lint test e2e build</code>. Usaremos algunos en esta demo.</p><h2 id=\"Creando-aplicaciones-y-componentes\"><a href=\"#Creando-aplicaciones-y-componentes\" class=\"headerlink\" title=\"Creando aplicaciones y componentes\"></a>Creando aplicaciones y componentes</h2><p>Escoge un directorio en un disco con espacio libre. No es broma, hasta 300 mb o más para empezar. Tranquilo, en distribución la cosa pinta mucho mejor y Angular es muy ligero. Ahora teclea:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new hola-angular-2</div></pre></td></tr></table></figure><p>Unos segundos o minutos más tarde… podrás abrir la recién creada carpeta, yo lo hago con <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">VSCode</a>, y explorar el contenido de sus 3 directorios y miles de ficheros!!!</p><p>Después del susto, tranquilidad de nuevo. La mayoría son dependencias de terceros productos, herramientas necesarias para ejecutar aplicación o para alguno de sus procesos de <em>test, lint o distribución</em>. Centrémonos en el directorio <code>src</code> dónde están los fuentes, el código que tendríamos que haber creado nosotros.</p><p>De un primer vistazo puede que sólo reconozcas al viejo <code>index.html</code>. No te agobies, por ahora es suficiente. Contendrá algo como esto:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>HolaAngular2<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Componente raíz de la aplicación--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure><p>De lo que es Angular 2 lo único interesante es el componente <code>&lt;app-root&gt;Loading...&lt;/app-root&gt;</code>. Todo, incluida la aplicación principal, debe ser definido y declarado como un componente. De hecho definiremos las aplicaciones Angular2 como árboles de componentes. Y tdodo árbol debe tener una raíz. Mientras Angular no entre en fucionamiento, el susario verá el mensaje de <em>Loading…</em> después la magia de Angular2 lo sustituirá por el contenido del componente <code>app-root</code> predefinido por el generador.</p><h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><p>Sin entrar en debates de <a href=\"https://www.youtube.com/watch?v=OpS2R7rbpRg\" target=\"_blank\" rel=\"external\">qué lenguaje usar para programar en Angular2</a> te resumo mi posición:</p><p>1.- TypeScript te permite anotar tu <strong>JavaScript con tipos</strong>. Esto tiene dos ventajas: <em>intellisense</em> mientras codificas y chequeo de tipos cuando compilas.<br>2.- TypeScript es la <strong>única opción automatizada a día de hoy</strong> con Angular CLI.</p><p>Por lo demás no hay porqué alarmarse. <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">TypeScript</a> es un <em>superset de JavaScript ES6</em> con unas mejoras evidentes que no tardarás en dominar. Eso si, tienes que aprender <a href=\"http://es6-features.org/\" target=\"_blank\" rel=\"external\">JavaScript ES2015 o ES6</a>.</p><p>Sabiendo esto, entra sin miedo en cualquier fichero de extensión <code>.ts</code> y verás que es muy parecido a cualquier <code>.js</code> de la nueva versión. Por ejemplo en el citado <code>main.ts</code> aparecerá algo así:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importaciones de dependencias TypeScript al estilo ES6</span></div><div class=\"line\"><span class=\"comment\">// primero los básicos para compatibilidad con navegadores</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./polyfills.ts'</span>;</div><div class=\"line\"><span class=\"comment\">// luego cosas de Angular</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser-dynamic'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// después nuestro código, empezando por la configuración</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./environments/environment'</span>;</div><div class=\"line\"><span class=\"comment\">// y por último la aplicación a leída desde el módulo raíz, llamado app por convenio.</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app/'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// condiciones para ejecutar en modo desarrollo o producción</span></div><div class=\"line\"><span class=\"keyword\">if</span> (environment.production) &#123;</div><div class=\"line\">  enableProdMode();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// arranque de la aplicación invocando al módulo raíz</span></div><div class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule);</div></pre></td></tr></table></figure><p>Centrándonos en el código que habremos de mantener fíjate en la línea <code>import { AppModule } from &#39;./app/&#39;;</code>. Le indica a <em>WebPack</em> que importe el contenido de la carpeta <code>./app/</code>. Para ello buscará en dicho directorio un archivo <code>index.ts</code>. Ese fichero sirve de índice y contiene las instrucciones para exportar el código interesante del resto de la carpeta. En nuestro caso son el módulo y el componente raíz.</p><h2 id=\"El-modulo-raiz\"><a href=\"#El-modulo-raiz\" class=\"headerlink\" title=\"El módulo raíz\"></a>El módulo raíz</h2><p>Las aplicaciones Angular2 están pensadas para crecer. Para ello es fundamental cierto grado de modularidad. EL viejo <code>angular.module</code> ha vuelto en la versión 2. Mira dentro del fichero <code>app.module.ts</code> y verás código similar a este:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// objetos con utilidades comunes del framework</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HttpModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// importación del componente raíz, definido en esta misma carpeta</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</div><div class=\"line\"><span class=\"comment\">// decorador con metadata que define un módulo</span></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [</div><div class=\"line\">    AppComponent</div><div class=\"line\">  ], <span class=\"comment\">// cosas declaradas en este módulo</span></div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule</div><div class=\"line\">  ], <span class=\"comment\">// otros módulos que necesitamos para que este funcione</span></div><div class=\"line\">  providers: [] , <span class=\"comment\">// inyección de servicios comunes para la aplicación</span></div><div class=\"line\">  bootstrap: [AppComponent] <span class=\"comment\">// componente raíz para el arranque</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// los módulos son clases contendoras </span></div><div class=\"line\"><span class=\"comment\">// habitualmente con poco o ningún código</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><p>Un módulo no es más que una clase contenedora. Cada módulo puede incluir múltiples componentes y servicios. Normalmente un módulo dependerá de otros. El módulo raíz declara un componente especial para el arranque de la aplicación: <em>El componente raíz</em></p><h2 id=\"El-componente-raiz\"><a href=\"#El-componente-raiz\" class=\"headerlink\" title=\"El componente raíz\"></a>El componente raíz</h2><p>Buceando a mayor profundidad nos encontramos con el resto del contenido de la carpeta <code>./app/</code>. Son archivos con nombres tipo <code>app.component.*</code> y se usan para definir un componente.</p><p>Los <strong>componentes son los bloques de construcción de Angular 2</strong> que representan regiones de la pantalla. Las aplicaciones se definen como árboles de componentes. Nuestra aplicación es un árbol que tiene una raíz, habitualmente llamado <code>app</code> y que es común a cualquier desarrollo.</p><p>Cada componente a su vez está formado por tres partes:</p><ol><li><strong>La vista</strong>: es el código que se renderizará para los usuarios. Esta plantilla estará en un fichero de extensión <code>.html</code>.</li><li><strong>La clase controladora</strong>: En ES6 usaremos clases para declarar los controladores que exponen datos y funcionalidad a la vista.</li><li><strong>Metadata</strong>: Se declara como un decorador, una función especial de TypeScript, que recibe un objeto de configuración. Esto acompaña al controlador en un fichero de extensión <code>.ts</code></li></ol><p>Empecemos por este último fichero, el <code>app.component.ts</code>.<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// Función decoradora que registra un componente</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-root'</span>, <span class=\"comment\">// elemento html consumidor</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span>, <span class=\"comment\">// ruta relativa a la vista</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./app.component.css'</span>] <span class=\"comment\">// potencialmente múltiples hojas de estilo</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// clase que representa un controlador </span></div><div class=\"line\"><span class=\"comment\">// con su modelo de datos (title ) y métodos de acción (aún no tiene)</span></div><div class=\"line\"><span class=\"comment\">// Esta clase es todo lo que se exporta en este fichero</span></div><div class=\"line\"><span class=\"comment\">// y esto se importará en app.module.ts para ser incorporado el módulo raíz</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// las propiedades de la clase representan el modelo de datos</span></div><div class=\"line\">  <span class=\"comment\">// son accesibles desde la vista</span></div><div class=\"line\">  title = <span class=\"string\">'app works!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p><p>Seguro que la parte más novedosa es <code>@Component({...})</code>. Es el equivalente a los antiguos Objetos de Definición de Directivas. Lo que hace es asociar al controlador una plantilla HTML <code>app.component.html</code> y un selector para ser invocado desde otra vista <code>&lt;app-root&gt;&lt;/app-root&gt;</code>. El resto por ahora puedes obviarlo.</p><p>Y hablando de la plantilla, echemos un vistazo a <code>app.component.html</code>. Contendrá algo así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--Interpolación de variables definidas en el modelo del componente--&gt;</span></div><div class=\"line\">  &#123;&#123; title &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure><p>Estas son cosas que te resultarán muy familiares como la interpolación <code>Hola Mundo Angular 2</code> que permite mostrar el famoso <em>app works!</em>, nueva versión del <em>hola mundo</em>. Ya está, el resto ya es sólo usar este componente en el <code>index.html</code>,<br>Recuerda:<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--Componente raíz de la aplicación--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id=\"Angular2-en-accion\"><a href=\"#Angular2-en-accion\" class=\"headerlink\" title=\"Angular2 en acción\"></a>Angular2 en acción</h2><p>Para lanzar y probar tu aplicación necesitas otro comando de Angular-CLI. Este comando se ocupa entre otras cosas de todo el proceso necesario para <strong>transformar el código TypeScript en JavaScript</strong> reconocible por el navegador. También crea un mini servidor estático y además refresca el navegador a cada cambio los fuentes. Un salvavidas para un recién llegado a Angular 2. Teclea en tu terminal:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng serve</div></pre></td></tr></table></figure><p>Si todo ha ido bien, no siempre ocurre con estas versiones tan verdes, podrás disfrutar de <strong>tu primera aplicación con Angular 2</strong> en <a href=\"http://localhost:4200\" target=\"_blank\" rel=\"external\">http://localhost:4200</a></p><blockquote><p><a href=\"https://youtu.be/Y7izsxhPpQY\" target=\"_blank\" rel=\"external\">Este vídeo</a> emitido con la colaboración de DesarrolloWeb.com contiene una explicación mas extensa del proceso de trabajo con Angular 2 CLI.</p></blockquote><div class=\"flex-video\"><br><iframe src=\"https://www.youtube.com/embed/Y7izsxhPpQY\"></iframe><br></div><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a></p>"},{"title":"Por qué AngularJS","id":"19","updated":"2015-08-20T12:45:22.000Z","date":"2015-08-18T06:31:24.000Z","_content":"\nEn este vídeo charlamos sobre AngularJS y el momento actual de desarrollo, y el porqué de su éxito.\n\n<div class=\"video-container\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MR1XchvsI1Q?showinfo=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\n[Video en YouTube](https://www.youtube.com/watch?list=PLIcuwIrm4rKdPA5DOzbjSKjJXECfzumZf&t=40&v=MR1XchvsI1Q)","source":"_posts/Por-que-AngularJS.md","raw":"---\ntitle: Por qué AngularJS\ntags: \n- AngularJS\ncategories:\n- Opinión\npermalink: por-que-angularjs\nid: 19\nupdated: '2015-08-20 14:45:22'\ndate: 2015-08-18 08:31:24\n---\n\nEn este vídeo charlamos sobre AngularJS y el momento actual de desarrollo, y el porqué de su éxito.\n\n<div class=\"video-container\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MR1XchvsI1Q?showinfo=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\n[Video en YouTube](https://www.youtube.com/watch?list=PLIcuwIrm4rKdPA5DOzbjSKjJXECfzumZf&t=40&v=MR1XchvsI1Q)","slug":"por-que-angularjs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvgx0012iwd36zjlkr34","content":"<p>En este vídeo charlamos sobre AngularJS y el momento actual de desarrollo, y el porqué de su éxito.</p><div class=\"video-container\"><br><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MR1XchvsI1Q?showinfo=0\" frameborder=\"0\" allowfullscreen></iframe><br></div><p><a href=\"https://www.youtube.com/watch?list=PLIcuwIrm4rKdPA5DOzbjSKjJXECfzumZf&amp;t=40&amp;v=MR1XchvsI1Q\" target=\"_blank\" rel=\"external\">Video en YouTube</a></p>","site":{"data":{}},"excerpt":"","more":"<p>En este vídeo charlamos sobre AngularJS y el momento actual de desarrollo, y el porqué de su éxito.</p><div class=\"video-container\"><br><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MR1XchvsI1Q?showinfo=0\" frameborder=\"0\" allowfullscreen></iframe><br></div><p><a href=\"https://www.youtube.com/watch?list=PLIcuwIrm4rKdPA5DOzbjSKjJXECfzumZf&amp;t=40&amp;v=MR1XchvsI1Q\" target=\"_blank\" rel=\"external\">Video en YouTube</a></p>"},{"title":"Para qué puedo usar NodeJS","id":"20","updated":"2015-08-20T12:53:50.000Z","date":"2015-08-20T12:28:01.000Z","_content":"\nNodeJS se ha hecho muy popular por dos razones relacionas: **potencia y escalabilidad.** Ambas derivadas de su modelo de *ejecución asíncrona no bloqueante*.\n\nSe basa en el lenguaje **JavaScript**: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.\n\nEl uso más inmediato de NodeJS está en la **programación de servicios web**. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el *JavaScript del lado del servidor.* \n\nPero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir **aplicaciones de escritorio** con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para **scripts de administración o monitorización** en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los *development workflows* de cada vez más empresas de programación en cualquier lenguaje. \n\nDada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en **tiempo real**. Y por su escasa demanda de *hardware* se usa también en proyectos de **Internet of Things**\n\nEn definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje **de propósito general.**\n\n\n","source":"_posts/Para-que-puedo-usar-NodeJS.md","raw":"---\ntitle: Para qué puedo usar NodeJS\ntags: \n- NodeJS\ncategories:\n- Introducción\npermalink: para-que-puedo-usar-nodejs\nid: 20\nupdated: '2015-08-20 14:53:50'\ndate: 2015-08-20 14:28:01\n---\n\nNodeJS se ha hecho muy popular por dos razones relacionas: **potencia y escalabilidad.** Ambas derivadas de su modelo de *ejecución asíncrona no bloqueante*.\n\nSe basa en el lenguaje **JavaScript**: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.\n\nEl uso más inmediato de NodeJS está en la **programación de servicios web**. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el *JavaScript del lado del servidor.* \n\nPero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir **aplicaciones de escritorio** con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para **scripts de administración o monitorización** en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los *development workflows* de cada vez más empresas de programación en cualquier lenguaje. \n\nDada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en **tiempo real**. Y por su escasa demanda de *hardware* se usa también en proyectos de **Internet of Things**\n\nEn definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje **de propósito general.**\n\n\n","slug":"para-que-puedo-usar-nodejs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvhc0015iwd3isv7fz8o","content":"<p>NodeJS se ha hecho muy popular por dos razones relacionas: <strong>potencia y escalabilidad.</strong> Ambas derivadas de su modelo de <em>ejecución asíncrona no bloqueante</em>.</p><p>Se basa en el lenguaje <strong>JavaScript</strong>: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.</p><p>El uso más inmediato de NodeJS está en la <strong>programación de servicios web</strong>. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el <em>JavaScript del lado del servidor.</em></p><p>Pero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir <strong>aplicaciones de escritorio</strong> con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para <strong>scripts de administración o monitorización</strong> en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los <em>development workflows</em> de cada vez más empresas de programación en cualquier lenguaje.</p><p>Dada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en <strong>tiempo real</strong>. Y por su escasa demanda de <em>hardware</em> se usa también en proyectos de <strong>Internet of Things</strong></p><p>En definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje <strong>de propósito general.</strong></p>","site":{"data":{}},"excerpt":"","more":"<p>NodeJS se ha hecho muy popular por dos razones relacionas: <strong>potencia y escalabilidad.</strong> Ambas derivadas de su modelo de <em>ejecución asíncrona no bloqueante</em>.</p><p>Se basa en el lenguaje <strong>JavaScript</strong>: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.</p><p>El uso más inmediato de NodeJS está en la <strong>programación de servicios web</strong>. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el <em>JavaScript del lado del servidor.</em></p><p>Pero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir <strong>aplicaciones de escritorio</strong> con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para <strong>scripts de administración o monitorización</strong> en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los <em>development workflows</em> de cada vez más empresas de programación en cualquier lenguaje.</p><p>Dada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en <strong>tiempo real</strong>. Y por su escasa demanda de <em>hardware</em> se usa también en proyectos de <strong>Internet of Things</strong></p><p>En definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje <strong>de propósito general.</strong></p>"},{"title":"Soluciones FrontEnd 2016","id":"7","updated":"2016-01-14T10:17:31.000Z","date":"2016-01-14T09:39:32.000Z","_content":"\nInicio el año proponiendo una selección de tecnologías que serán **tendencia en el desarrollo front end** durante este 2016.\n\n* Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.\n\n* Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo **[JSPM](http://jspm.io/)**, que se incorporará definitivamente a nuestro toolbox durante el 2016.\n\n* De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente **[AngularJS1.5](https://www.angularjs.org/)**\n\n* En la parte visual, el look & feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería **[AngularMaterial](https://material.angularjs.org/latest/)** es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.\n\nEn [esta presentación](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing) tienes más información acerca de lo que llamo **frontEdge** : tecnología utilizable, de última generación y con enorme potencial. \n\n[Presentación frontEdge](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing)\n\nSi tienes tiempo, mira [este vídeo](https://www.youtube.com/watch?v=vJZb_rs2vvU) con una charla en la que comentamos estas y otras tecnologías para programadores.\n\n[video frontEdge](https://www.youtube.com/watch?v=vJZb_rs2vvU)","source":"_posts/Soluciones-FrontEnd-2016.md","raw":"---\ntitle: Soluciones FrontEnd 2016\ntags: \n- FrontEnd\n- AngularJS\ncategories:\n- Opinión\npermalink: soluciones-frontend-2016\nid: 7\nupdated: '2016-01-14 11:17:31'\ndate: 2016-01-14 10:39:32\n---\n\nInicio el año proponiendo una selección de tecnologías que serán **tendencia en el desarrollo front end** durante este 2016.\n\n* Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.\n\n* Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo **[JSPM](http://jspm.io/)**, que se incorporará definitivamente a nuestro toolbox durante el 2016.\n\n* De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente **[AngularJS1.5](https://www.angularjs.org/)**\n\n* En la parte visual, el look & feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería **[AngularMaterial](https://material.angularjs.org/latest/)** es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.\n\nEn [esta presentación](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing) tienes más información acerca de lo que llamo **frontEdge** : tecnología utilizable, de última generación y con enorme potencial. \n\n[Presentación frontEdge](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing)\n\nSi tienes tiempo, mira [este vídeo](https://www.youtube.com/watch?v=vJZb_rs2vvU) con una charla en la que comentamos estas y otras tecnologías para programadores.\n\n[video frontEdge](https://www.youtube.com/watch?v=vJZb_rs2vvU)","slug":"soluciones-frontend-2016","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvhs0019iwd3xtobv2q2","content":"<p>Inicio el año proponiendo una selección de tecnologías que serán <strong>tendencia en el desarrollo front end</strong> durante este 2016.</p><ul><li><p>Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"external\">ES6</a></strong>. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.</p></li><li><p>Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo <strong><a href=\"http://jspm.io/\" target=\"_blank\" rel=\"external\">JSPM</a></strong>, que se incorporará definitivamente a nuestro toolbox durante el 2016.</p></li><li><p>De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente <strong><a href=\"https://www.angularjs.org/\" target=\"_blank\" rel=\"external\">AngularJS1.5</a></strong></p></li><li><p>En la parte visual, el look &amp; feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería <strong><a href=\"https://material.angularjs.org/latest/\" target=\"_blank\" rel=\"external\">AngularMaterial</a></strong> es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.</p></li></ul><p>En <a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes más información acerca de lo que llamo <strong>frontEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p><p><a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"external\">Presentación frontEdge</a></p><p>Si tienes tiempo, mira <a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"external\">este vídeo</a> con una charla en la que comentamos estas y otras tecnologías para programadores.</p><p><a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"external\">video frontEdge</a></p>","site":{"data":{}},"excerpt":"","more":"<p>Inicio el año proponiendo una selección de tecnologías que serán <strong>tendencia en el desarrollo front end</strong> durante este 2016.</p><ul><li><p>Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"external\">ES6</a></strong>. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.</p></li><li><p>Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo <strong><a href=\"http://jspm.io/\" target=\"_blank\" rel=\"external\">JSPM</a></strong>, que se incorporará definitivamente a nuestro toolbox durante el 2016.</p></li><li><p>De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente <strong><a href=\"https://www.angularjs.org/\" target=\"_blank\" rel=\"external\">AngularJS1.5</a></strong></p></li><li><p>En la parte visual, el look &amp; feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería <strong><a href=\"https://material.angularjs.org/latest/\" target=\"_blank\" rel=\"external\">AngularMaterial</a></strong> es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.</p></li></ul><p>En <a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes más información acerca de lo que llamo <strong>frontEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p><p><a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"external\">Presentación frontEdge</a></p><p>Si tienes tiempo, mira <a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"external\">este vídeo</a> con una charla en la que comentamos estas y otras tecnologías para programadores.</p><p><a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"external\">video frontEdge</a></p>"},{"title":"Soluciones BackEnd 2016","id":"8","updated":"2016-04-01T06:02:55.000Z","date":"2016-03-21T10:50:58.000Z","_content":"\nLas soluciones JavaScript para el servidor que marcan **tendencia en el desarrollo back end** durante este 2016. Continuación de la saga que iniciamos con **[FrontEdge](http://academia-binaria.com/soluciones-frontend-2016/)**.\n\n* Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. En el lado del servidor destaco la disponibilidad de [Promesas](http://es6-features.org/#PromiseUsage) de forma nativa..\n\n* Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que *hay que cumplir con el estándar REST y hay que documentar* todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses **[RAML](http://raml.org/)**. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura. \n\n* El ya viejo conocido **[NodeJS](https://nodejs.org/)** se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.\n\n* En la base de datos irrumpe con fuerza la nueva versión de **[MongoDB 3.2](https://docs.mongodb.org/manual/release-notes/3.2/)**, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado *join* entre colecciones .\n\nEn [esta presentación](https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing) tienes más información acerca de lo que llamo **backEdge** : tecnología utilizable, de última generación y con enorme potencial. \n\nEn [este video](https://youtu.be/cfmJQjBfM-s) tienes la charla que di con o que llamo **Desarrollo Web** presentando las tendencias tecnológicas del 2016. ","source":"_posts/Soluciones-BackEnd-2016.md","raw":"---\ntitle: Soluciones BackEnd 2016\ntags: \n- BackEnd\n- NodeJS\n- MongoDB\ncategories:\n- Opinión\npermalink: soluciones-backend-2016\nid: 8\nupdated: '2016-04-01 08:02:55'\ndate: 2016-03-21 11:50:58\n---\n\nLas soluciones JavaScript para el servidor que marcan **tendencia en el desarrollo back end** durante este 2016. Continuación de la saga que iniciamos con **[FrontEdge](http://academia-binaria.com/soluciones-frontend-2016/)**.\n\n* Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. En el lado del servidor destaco la disponibilidad de [Promesas](http://es6-features.org/#PromiseUsage) de forma nativa..\n\n* Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que *hay que cumplir con el estándar REST y hay que documentar* todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses **[RAML](http://raml.org/)**. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura. \n\n* El ya viejo conocido **[NodeJS](https://nodejs.org/)** se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.\n\n* En la base de datos irrumpe con fuerza la nueva versión de **[MongoDB 3.2](https://docs.mongodb.org/manual/release-notes/3.2/)**, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado *join* entre colecciones .\n\nEn [esta presentación](https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing) tienes más información acerca de lo que llamo **backEdge** : tecnología utilizable, de última generación y con enorme potencial. \n\nEn [este video](https://youtu.be/cfmJQjBfM-s) tienes la charla que di con o que llamo **Desarrollo Web** presentando las tendencias tecnológicas del 2016. ","slug":"soluciones-backend-2016","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvhs001diwd3sjrli39w","content":"<p>Las soluciones JavaScript para el servidor que marcan <strong>tendencia en el desarrollo back end</strong> durante este 2016. Continuación de la saga que iniciamos con <strong><a href=\"http://academia-binaria.com/soluciones-frontend-2016/\">FrontEdge</a></strong>.</p><ul><li><p>Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"external\">ES6</a></strong>. En el lado del servidor destaco la disponibilidad de <a href=\"http://es6-features.org/#PromiseUsage\" target=\"_blank\" rel=\"external\">Promesas</a> de forma nativa..</p></li><li><p>Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que <em>hay que cumplir con el estándar REST y hay que documentar</em> todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses <strong><a href=\"http://raml.org/\" target=\"_blank\" rel=\"external\">RAML</a></strong>. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.</p></li><li><p>El ya viejo conocido <strong><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">NodeJS</a></strong> se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.</p></li><li><p>En la base de datos irrumpe con fuerza la nueva versión de <strong><a href=\"https://docs.mongodb.org/manual/release-notes/3.2/\" target=\"_blank\" rel=\"external\">MongoDB 3.2</a></strong>, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado <em>join</em> entre colecciones .</p></li></ul><p>En <a href=\"https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes más información acerca de lo que llamo <strong>backEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p><p>En <a href=\"https://youtu.be/cfmJQjBfM-s\" target=\"_blank\" rel=\"external\">este video</a> tienes la charla que di con o que llamo <strong>Desarrollo Web</strong> presentando las tendencias tecnológicas del 2016.</p>","site":{"data":{}},"excerpt":"","more":"<p>Las soluciones JavaScript para el servidor que marcan <strong>tendencia en el desarrollo back end</strong> durante este 2016. Continuación de la saga que iniciamos con <strong><a href=\"http://academia-binaria.com/soluciones-frontend-2016/\">FrontEdge</a></strong>.</p><ul><li><p>Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"external\">ES6</a></strong>. En el lado del servidor destaco la disponibilidad de <a href=\"http://es6-features.org/#PromiseUsage\" target=\"_blank\" rel=\"external\">Promesas</a> de forma nativa..</p></li><li><p>Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que <em>hay que cumplir con el estándar REST y hay que documentar</em> todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses <strong><a href=\"http://raml.org/\" target=\"_blank\" rel=\"external\">RAML</a></strong>. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.</p></li><li><p>El ya viejo conocido <strong><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">NodeJS</a></strong> se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.</p></li><li><p>En la base de datos irrumpe con fuerza la nueva versión de <strong><a href=\"https://docs.mongodb.org/manual/release-notes/3.2/\" target=\"_blank\" rel=\"external\">MongoDB 3.2</a></strong>, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado <em>join</em> entre colecciones .</p></li></ul><p>En <a href=\"https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing\" target=\"_blank\" rel=\"external\">esta presentación</a> tienes más información acerca de lo que llamo <strong>backEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p><p>En <a href=\"https://youtu.be/cfmJQjBfM-s\" target=\"_blank\" rel=\"external\">este video</a> tienes la charla que di con o que llamo <strong>Desarrollo Web</strong> presentando las tendencias tecnológicas del 2016.</p>"},{"title":"TypeScript, programa en el front igual que en el back","id":"23","updated":"2017-03-14T18:10:13.000Z","date":"2017-03-14T18:02:11.000Z","thumbnail":"/css/images/typescript.jpg","_content":"\nHasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo *back end y el front end*. El primero era el de los programadores de verdad, con **lenguajes serios y patrones de diseño**. El último era el universo de los diseñadores, con lenguajes de segundo nivel y **micro scripts o código espagueti** descontrolado.\n\n<!-- more -->\n\nPero la llegada de los frameworks *MVC* en el cliente, llevó **grandes cantidades de código al navegador** y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre *back y front*.\n\nPero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo *Java* y *C#* las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo *JavaScript*.\n\nY entonces eclosionó *TypeScript*. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a *JavaScript* al siguiente nivel. Con **tipos estáticos** (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia **suaviza la rampa de entrada al *front* para los desarrolladores *back***.\n\nYa no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el *TypeScript* si dominas y te gusta la POO, serás un *full stack* cuestión de horas.","source":"_posts/TypeScript-programa-en-el-front-igual-que-en-el-back.md","raw":"---\ntitle: 'TypeScript, programa en el front igual que en el back'\ntags: \n- TypeScript\ncategories:\n- Opinión\npermalink: typescript-programa-en-el-front-igual-que-en-el-back\nid: 23\nupdated: '2017-03-14 19:10:13'\ndate: 2017-03-14 19:02:11\nthumbnail: /css/images/typescript.jpg\n---\n\nHasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo *back end y el front end*. El primero era el de los programadores de verdad, con **lenguajes serios y patrones de diseño**. El último era el universo de los diseñadores, con lenguajes de segundo nivel y **micro scripts o código espagueti** descontrolado.\n\n<!-- more -->\n\nPero la llegada de los frameworks *MVC* en el cliente, llevó **grandes cantidades de código al navegador** y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre *back y front*.\n\nPero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo *Java* y *C#* las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo *JavaScript*.\n\nY entonces eclosionó *TypeScript*. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a *JavaScript* al siguiente nivel. Con **tipos estáticos** (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia **suaviza la rampa de entrada al *front* para los desarrolladores *back***.\n\nYa no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el *TypeScript* si dominas y te gusta la POO, serás un *full stack* cuestión de horas.","slug":"typescript-programa-en-el-front-igual-que-en-el-back","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvhs001giwd3e9p6o803","content":"<p>Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo <em>back end y el front end</em>. El primero era el de los programadores de verdad, con <strong>lenguajes serios y patrones de diseño</strong>. El último era el universo de los diseñadores, con lenguajes de segundo nivel y <strong>micro scripts o código espagueti</strong> descontrolado.</p><a id=\"more\"></a><p>Pero la llegada de los frameworks <em>MVC</em> en el cliente, llevó <strong>grandes cantidades de código al navegador</strong> y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre <em>back y front</em>.</p><p>Pero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo <em>Java</em> y <em>C#</em> las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo <em>JavaScript</em>.</p><p>Y entonces eclosionó <em>TypeScript</em>. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a <em>JavaScript</em> al siguiente nivel. Con <strong>tipos estáticos</strong> (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia <strong>suaviza la rampa de entrada al <em>front</em> para los desarrolladores <em>back</em></strong>.</p><p>Ya no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el <em>TypeScript</em> si dominas y te gusta la POO, serás un <em>full stack</em> cuestión de horas.</p>","site":{"data":{}},"excerpt":"<p>Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo <em>back end y el front end</em>. El primero era el de los programadores de verdad, con <strong>lenguajes serios y patrones de diseño</strong>. El último era el universo de los diseñadores, con lenguajes de segundo nivel y <strong>micro scripts o código espagueti</strong> descontrolado.</p>","more":"<p>Pero la llegada de los frameworks <em>MVC</em> en el cliente, llevó <strong>grandes cantidades de código al navegador</strong> y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre <em>back y front</em>.</p><p>Pero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo <em>Java</em> y <em>C#</em> las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo <em>JavaScript</em>.</p><p>Y entonces eclosionó <em>TypeScript</em>. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a <em>JavaScript</em> al siguiente nivel. Con <strong>tipos estáticos</strong> (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia <strong>suaviza la rampa de entrada al <em>front</em> para los desarrolladores <em>back</em></strong>.</p><p>Ya no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el <em>TypeScript</em> si dominas y te gusta la POO, serás un <em>full stack</em> cuestión de horas.</p>"},{"title":"Enrutador de componentes con Angular2 el nuevo SPA","id":"15","updated":"2016-12-07T17:23:02.000Z","date":"2016-06-02T06:52:04.000Z","thumbnail":"/css/images/angular.jpg","_content":"\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/)\n\n---\n\n> Código asociado en [angular2/6-routing/](https://github.com/AcademiaBinaria/angular2/tree/master/6-routing)\n\nLa capacidad de gestionar las **rutas en el cliente** es una de las grandes ventajas de *AngularJS*. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa [ui-router](https://github.com/angular-ui/ui-router). Hemos esperado años la promesa de un nuevo *enrutador* compatible con las versiones 1 y 2. El resultado es **@angular/router**.\n\nDe todo *Angular2*, este es el componente que más ha cambiado durante la fase *Release Candidate*. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos **SPA**.\n\n<!-- more -->\n\n## Módulo de enrutado en base a componentes\n\nLas aplicaciones Angular2 son [árboles de módulos](http://academia-binaria.com/componentes-los-bloques-de-construccion-de-angular-2/). Al menos el módulo raíz `AppModule` y cuantos módulos funcionales nos hagan falta. Utilizando `angular-cli` podemos crear módulos con la capacidad de enrutado generada en... un módulo específico.  \n\nA ver si desbrozamos algo este bosque de módulos.\n\n```javascript\nng new mi-aplicacion --routing true\n```\n\nTanto para la raíz como para las ramas funcionales se creará un fichero. En la raíz será llamado `app-routing.module.ts` con un contenido como este: \n\n```javascript\n/** Módulos de enrutado de Angular2 */\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NgModule } from '@angular/core';\n\n// Array con las rutas de este módulo. Ninguna funcional.\nconst routes: Routes = [\n  { path: '', redirectTo: '' },\n  { path: 'inicio', redirectTo: '' },\n  { path: '**', redirectTo: '', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes) // configuración para el módulo raíz\n  ],\n  exports: [\n    RouterModule // se importará desde el módulo padre\n  ]\n})\nexport class AppRoutingModule { }\n```\n\nEste **módulo** de un único fichero sirve **para definir las rutas de otro módulo padre** asociado, `app.module.ts`, el cual quedará más o menos así:\n\n```javascript\n// importación de módulo de enrutado asociado\nimport { AppRoutingModule } from './app-routing.module';\n// importación de otros módulos de funcionalidad\nimport { HomeModule } from './home/home.module';\n// decorador que define un módulo\n@NgModule({\n  declarations: [ AppComponent ], \n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HomeModule, // el módulo funcional para la 'página home'\n    AppRoutingModule // el módulo de rutas ya configurado\n  ], \n  providers: [] \n  bootstrap: [ AppComponent ] \n})\nexport class AppModule { }\n```\n\n## Módulos funcionales\nEl módulo raíz es fundamental pero nada operativo. Toda el que sea de interés para los usuarios estará en módulos funcionales. En las aplicaciones SPA es una buena práctica crear **un módulo por cada ruta** principal. Incluida la página home. Por ejemplo usando el siguiente comando:\n\n```javascript\nng generate module home --routing true\n```\nAparece un fichero llamado `home-routing-module.ts`. Este módulo se debe configurar para que gestione sus propias rutas.\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n/** Componente enrutable */\nimport { HomeComponent } from './home.component';\n/** Rutas asociadas a componentes */\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n];\n/** array de componentes enrutables */\nexport const routableComponents = [\n  HomeComponent\n];\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes) // Para módulo funcional\n  ],\n  exports: [\n    RouterModule // listo para importarlo en HomeModule\n  ]\n})\nexport class HomeRoutingModule { }\n```\n\nSe crean dos arrays relacionados. EL principal, `routes`, contendrá las **rutas pareadas con sus componentes** respectivos. \nLos cuales también se exportan directamente en la variable `routableComponents`. Esto se hace por comodidad. Para no tener que volver a importarlos en la declaración del módulo padre, que quedará así:\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Importación de las rutas y sus componentes */\nimport { HomeRoutingModule, routableComponents } from './home-routing.module';\n@NgModule({\n  imports: [\n    CommonModule,\n    HomeRoutingModule // el módulo que sabe enrutar\n  ],\n  declarations: [\n    routableComponents // los componentes de enrutado\n  ]\n})\nexport class HomeModule { }\n```\n\n### Carga de componentes según la ruta\nTodo este trabajo de configuración se materializa en las **vistas**. Necesitaremos un lugar dónde inyectar el **componente de turno asociado a la ruta** actual. Presentamos el `router-outlet`. Y para que la aplicación pueda llevarnos de un lugar a otro usaremos  la directiva `routerLink`. \n\nDe forma que la plantilla raíz `app.component.html` quedará normalmente así:\n\n```html\n<!--menú de navegación, sin href-->\n<nav>\n  <a [routerLink]=\"['/']\">Inicio</a>\n  <a [routerLink]=\"['/login']\">Log In</a>\n  <a [routerLink]=\"['/contacto']\">Contacto</a>\n</nav>\n<!--Este componente nativo hace que el enrutador cargue una página dinámicamente-->\n<router-outlet></router-outlet>\n```\n\n\n## Rutas hijas y con parámetros\nDe poco vale un enrutador que sólo atienda a los casos sencillos. Las aplicaciones profesionales plantean mayores retos. \n### Rutas hijas\nUn ejemplo son las **rutas anidadas**, aquí llamadas rutas hijas. Son aquellas en las que una parte de la visualización es común y otra depende de la ruta concreta.\n\nVeamos un ejemplo dónde se pretende dar de alta y mostrar una lista de elementos. La base de cualquier *CRUD*. Así quedaría el fichero `movimientos-routing.module.ts`.\n \n```javascript\n/** Importación de los componentes enrutables */\nimport { MovimientosComponent } from './movimientos.component';\nimport { ListaComponent } from './lista/lista.component';\nimport { NuevoComponent } from './nuevo/nuevo.component';\n\nconst routes: Routes = [\n  {\n    path: 'movimientos',\n    component: MovimientosComponent,\n    children: [ // rutas hijas, se verán dentro del componente padre\n      {\n        path: 'nuevo', // la ruta real es movimientos/nuevo\n        component: NuevoComponent\n      },\n      {\n        path: 'lista',\n        component: ListaComponent\n      }\n    ]\n  }\n];\nexport const routableComponents = [\n  NuevoComponent,\n  ListaComponent,\n  MovimientosComponent\n]\n```\nEste mini-módulo es muy denso. Contrasta con la simplicidad del `movimientos.module.ts` que reduce su responsabilidad. Sólo tiene que importar los módulos adecuados.\n\n```javascript\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Módulo de enrutado y componentes */\nimport { MovimientosRoutingModule, routableComponents } from './movimientos-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MovimientosRoutingModule\n  ], // dependencias de otros módulos, especialmente el de enrutado\n  declarations: [\n    routableComponents\n  ], // Los componentes vienen del fichero movimientos-routing.module.ts\n  exports: [\n\n  ], // no necesita exportar nada\n})\n```\n\nVemos que la idea es que los ficheros de definición de módulos funcionales **deleguen toda la lógica** posible a su propio módulo de enrutado.\n\nMientras tanto en la vista... Habíamos dejado la *template* del componente raíz con un `router-outlet`. Será ahí dónde se cargue el `MovimientosComponent` cuando se active la ruta *'/movimientos'*. Pero, ¿y las rutas hijas?, ¿qué se carga y dónde se carga cuando se activa la ruta *'/movimientos/nuevo'* o la ruta *'/movimientos/lista'* ?.\n\nEchemos un vistazo a `movimientos.component.html` para comprobar que dispone de su propio `router-outlet`. \n\n```html\n<nav>\n   <a routerLink=\"/movimientos/nuevo\" >Nuevo Movimiento</a>\n   <a routerLink=\"/movimientos/lista\" >Lista de Movimientos</a>\n</nav>\n<router-outlet></router-outlet>\n```\n\nSerá en este elemento donde se inyecten los componentes asociados a las rutas hijas. Este *anidamiento* permite hacer aplicaciones modulares y acceder a vistas específicas con rutas específicas. \n\n\n### Rutas con parámetros \n\nHasta ahora usé rutas fijas para navegar. Lo más normal es que estas **plantillas contengan segmentos variables** llamados parámetros. Para incorporar parámetros a tu esquema de rutas tienes que actuar en tres fases:\n\n#### 1- Definir la parte paramétrica de la plantilla generadora de rutas\n\nEl *path* del objeto ruta se convierte en una plantilla que admite distintos valores. Así queda ahora el módulo enrutador de movimientos:\n\n```javascript\nconst routes: Routes = [\n  {\n    path: 'movimientos',\n    component: MovimientosComponent,\n    children: [ // rutas hijas, se verán dentro del componente padre\n      {\n        path: 'nuevo', // la ruta real es movimientos/nuevo\n        component: NuevoComponent\n      },\n      {\n        path: 'lista',\n        component: ListaComponent\n      }\n    ]\n  },\n  {\n    path: 'movimientos/:id', // parámetro variable id    \n    component: EditorComponent\n  }\n];\n```\n\nLos parámetros se prefijan con `:` y en cada ruta se pueden usar tantos como sea necesario. \n\n>Obsérvese que en este caso la ruta 'movimientos/:id' es hermana, no hija, de la primera. Por tanto se mostrará en el `router-outlet` del componente raíz. Se ha hecho así para mostrar distintas maneras de trabajar en el 'router'.\n\n \n\n#### 2- Montar los enlaces asignando valores a los parámetros\n\nEsto se puede hacer en las plantillas HTML o en por código. Siempre usando el **array de `routerLink`** sin necesidad de concatenar cadenas para para montar rutas. Este array en su segunda posición llevará un objeto que represente los valores de los parámetros. \n\nEn un caso de navegación por código sencillo tendrá esta pinta:\n```javascript\n  // para ir a la ruta /movimientos/42\n  this.router.navigate(['movimientos', 42])\n```\n\nUsando desde la vista en igual de sencillo con la directiva `routerLink`, como en este ejemplo HTML:\n\n```html\n<a [routerLink]=\"['/movimientos', 42 ]\">42</a>\n```\n\n#### 3- Recuperar los valores de los parámetros a partir de las rutas\nLa novedad más llamativa es la presencia de `OnInit`. Es un *hook*, o evento de la vida de un componente. Este evento se ejecuta al iniciarse el componente pero cuando ya la ruta se ha resuelto completamente. \nEn ese momento puedes usar `ActivatedRoute`, un servicio que entre otras cosas te dará acceso a un *observable* que emite los valores actuales de los parámetros.\nPor ejemplo, esto sería el código del componente `editor.component.ts` que se activa con rutas como *'/movimientos/42'*\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\n/** Servicio para acceder a la ruta activa */\nimport { ActivatedRoute } from '@angular/router';\nimport { DatosService } from './../datos.service';\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.css']\n})\nexport class EditorComponent implements OnInit {\n  public movimiento;\n  constructor(\n      private route: ActivatedRoute, \n      private datosService: DatosService) { \n      // constructor vacío. sólo se usa para reclamar dependencias         \n  }\n  ngOnInit() {\n    // subscripción al observable params\n    this.route.params\n      .subscribe(params => {\n        const _id = params['id'].toString();\n        this.movimiento = this.datosService.getMovimientoBy_Id(_id);\n      });\n  }\n}\n```\n> Hay una estrategia opcional que emplea `Observables` para mantener potenciales cambios de estado en los valores de los parámetros. Si te interesa busca información sobre `Router` .\n\n### Carga diferida\n\nEsta es la funcionalidad más esperada y que sigue siendo un *work in progress*. Cuando las aplicaciones AngularJS crecen en funcionalidad producen un **impacto negativo en la primera vista** de un usuario. Eso es debido a que *Angular* necesita disponer de todo tu código para montar el armazón de dependencias. Esto es así aunque el usuario no vaya a navegar mas que por un conjunto reducido de rutas.\n\nEn aplicaciones de *intranet* o de uso muy intensivo esto no suele ser un gran problema. Esa espera inicial de unos pocos segundos se recupera durante el uso continuado de la aplicación. Pero ciertos desarrollos realmente grandes o, sobre todo, **aplicaciones web públicas para usuarios ocasionales** necesitaban un tratamiento especial.\n\nLa solución es implementar un modelo de *lazy loading* o carga diferida. En este caso el navegador descarga el HTML y el código de la aplicación según el usuario navegue. \n\nEn *Angular2* se incluye esta funcionalidad, pero a día de hoy aún no está disponible con `angular-cli`. Se puede *tunear WebPack* a mano para conseguirlo, pero, si no hay urgencia en salir a producción, no te lo recomiendo. Es preferible esperar un poco y usar el la solución definitiva que implemente la herramienta.\n\nEn cuanto sea *usable* actualizaré este artículo y difundiré la buena nueva a los cuatro vientos. Como sabes aún estamos esperando la primera *Release Candidate* de `angular-cli` y habrá mejoras importantes. \n\nMantente a la última recibiendo el [boletín de noticias de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&id=b67e4d2339) o siguiéndome en las [redes sociales](https://twitter.com/albertobasalo). \n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/)","source":"_posts/Enrutador-de-componentes-con-Angular2-el-nuevo-SPA.md","raw":"---\ntitle: Enrutador de componentes con Angular2 el nuevo SPA\ntags:  \n- Angular2\n- SPA\n- Tutorial\ncategories:\n- Introducción \npermalink: enrutado-con-angular2-el-nuevo-spa\nid: 15\nupdated: 2016/12/07 18:23:02\ndate: 2016/06/02 08:52:04\nthumbnail: /css/images/angular.jpg\n---\n\n> ACTUALIZACIÓN: para una versión más reciente del contenido visita la página [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/)\n\n---\n\n> Código asociado en [angular2/6-routing/](https://github.com/AcademiaBinaria/angular2/tree/master/6-routing)\n\nLa capacidad de gestionar las **rutas en el cliente** es una de las grandes ventajas de *AngularJS*. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa [ui-router](https://github.com/angular-ui/ui-router). Hemos esperado años la promesa de un nuevo *enrutador* compatible con las versiones 1 y 2. El resultado es **@angular/router**.\n\nDe todo *Angular2*, este es el componente que más ha cambiado durante la fase *Release Candidate*. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos **SPA**.\n\n<!-- more -->\n\n## Módulo de enrutado en base a componentes\n\nLas aplicaciones Angular2 son [árboles de módulos](http://academia-binaria.com/componentes-los-bloques-de-construccion-de-angular-2/). Al menos el módulo raíz `AppModule` y cuantos módulos funcionales nos hagan falta. Utilizando `angular-cli` podemos crear módulos con la capacidad de enrutado generada en... un módulo específico.  \n\nA ver si desbrozamos algo este bosque de módulos.\n\n```javascript\nng new mi-aplicacion --routing true\n```\n\nTanto para la raíz como para las ramas funcionales se creará un fichero. En la raíz será llamado `app-routing.module.ts` con un contenido como este: \n\n```javascript\n/** Módulos de enrutado de Angular2 */\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NgModule } from '@angular/core';\n\n// Array con las rutas de este módulo. Ninguna funcional.\nconst routes: Routes = [\n  { path: '', redirectTo: '' },\n  { path: 'inicio', redirectTo: '' },\n  { path: '**', redirectTo: '', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes) // configuración para el módulo raíz\n  ],\n  exports: [\n    RouterModule // se importará desde el módulo padre\n  ]\n})\nexport class AppRoutingModule { }\n```\n\nEste **módulo** de un único fichero sirve **para definir las rutas de otro módulo padre** asociado, `app.module.ts`, el cual quedará más o menos así:\n\n```javascript\n// importación de módulo de enrutado asociado\nimport { AppRoutingModule } from './app-routing.module';\n// importación de otros módulos de funcionalidad\nimport { HomeModule } from './home/home.module';\n// decorador que define un módulo\n@NgModule({\n  declarations: [ AppComponent ], \n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HomeModule, // el módulo funcional para la 'página home'\n    AppRoutingModule // el módulo de rutas ya configurado\n  ], \n  providers: [] \n  bootstrap: [ AppComponent ] \n})\nexport class AppModule { }\n```\n\n## Módulos funcionales\nEl módulo raíz es fundamental pero nada operativo. Toda el que sea de interés para los usuarios estará en módulos funcionales. En las aplicaciones SPA es una buena práctica crear **un módulo por cada ruta** principal. Incluida la página home. Por ejemplo usando el siguiente comando:\n\n```javascript\nng generate module home --routing true\n```\nAparece un fichero llamado `home-routing-module.ts`. Este módulo se debe configurar para que gestione sus propias rutas.\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n/** Componente enrutable */\nimport { HomeComponent } from './home.component';\n/** Rutas asociadas a componentes */\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n];\n/** array de componentes enrutables */\nexport const routableComponents = [\n  HomeComponent\n];\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes) // Para módulo funcional\n  ],\n  exports: [\n    RouterModule // listo para importarlo en HomeModule\n  ]\n})\nexport class HomeRoutingModule { }\n```\n\nSe crean dos arrays relacionados. EL principal, `routes`, contendrá las **rutas pareadas con sus componentes** respectivos. \nLos cuales también se exportan directamente en la variable `routableComponents`. Esto se hace por comodidad. Para no tener que volver a importarlos en la declaración del módulo padre, que quedará así:\n\n```javascript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Importación de las rutas y sus componentes */\nimport { HomeRoutingModule, routableComponents } from './home-routing.module';\n@NgModule({\n  imports: [\n    CommonModule,\n    HomeRoutingModule // el módulo que sabe enrutar\n  ],\n  declarations: [\n    routableComponents // los componentes de enrutado\n  ]\n})\nexport class HomeModule { }\n```\n\n### Carga de componentes según la ruta\nTodo este trabajo de configuración se materializa en las **vistas**. Necesitaremos un lugar dónde inyectar el **componente de turno asociado a la ruta** actual. Presentamos el `router-outlet`. Y para que la aplicación pueda llevarnos de un lugar a otro usaremos  la directiva `routerLink`. \n\nDe forma que la plantilla raíz `app.component.html` quedará normalmente así:\n\n```html\n<!--menú de navegación, sin href-->\n<nav>\n  <a [routerLink]=\"['/']\">Inicio</a>\n  <a [routerLink]=\"['/login']\">Log In</a>\n  <a [routerLink]=\"['/contacto']\">Contacto</a>\n</nav>\n<!--Este componente nativo hace que el enrutador cargue una página dinámicamente-->\n<router-outlet></router-outlet>\n```\n\n\n## Rutas hijas y con parámetros\nDe poco vale un enrutador que sólo atienda a los casos sencillos. Las aplicaciones profesionales plantean mayores retos. \n### Rutas hijas\nUn ejemplo son las **rutas anidadas**, aquí llamadas rutas hijas. Son aquellas en las que una parte de la visualización es común y otra depende de la ruta concreta.\n\nVeamos un ejemplo dónde se pretende dar de alta y mostrar una lista de elementos. La base de cualquier *CRUD*. Así quedaría el fichero `movimientos-routing.module.ts`.\n \n```javascript\n/** Importación de los componentes enrutables */\nimport { MovimientosComponent } from './movimientos.component';\nimport { ListaComponent } from './lista/lista.component';\nimport { NuevoComponent } from './nuevo/nuevo.component';\n\nconst routes: Routes = [\n  {\n    path: 'movimientos',\n    component: MovimientosComponent,\n    children: [ // rutas hijas, se verán dentro del componente padre\n      {\n        path: 'nuevo', // la ruta real es movimientos/nuevo\n        component: NuevoComponent\n      },\n      {\n        path: 'lista',\n        component: ListaComponent\n      }\n    ]\n  }\n];\nexport const routableComponents = [\n  NuevoComponent,\n  ListaComponent,\n  MovimientosComponent\n]\n```\nEste mini-módulo es muy denso. Contrasta con la simplicidad del `movimientos.module.ts` que reduce su responsabilidad. Sólo tiene que importar los módulos adecuados.\n\n```javascript\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/** Módulo de enrutado y componentes */\nimport { MovimientosRoutingModule, routableComponents } from './movimientos-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MovimientosRoutingModule\n  ], // dependencias de otros módulos, especialmente el de enrutado\n  declarations: [\n    routableComponents\n  ], // Los componentes vienen del fichero movimientos-routing.module.ts\n  exports: [\n\n  ], // no necesita exportar nada\n})\n```\n\nVemos que la idea es que los ficheros de definición de módulos funcionales **deleguen toda la lógica** posible a su propio módulo de enrutado.\n\nMientras tanto en la vista... Habíamos dejado la *template* del componente raíz con un `router-outlet`. Será ahí dónde se cargue el `MovimientosComponent` cuando se active la ruta *'/movimientos'*. Pero, ¿y las rutas hijas?, ¿qué se carga y dónde se carga cuando se activa la ruta *'/movimientos/nuevo'* o la ruta *'/movimientos/lista'* ?.\n\nEchemos un vistazo a `movimientos.component.html` para comprobar que dispone de su propio `router-outlet`. \n\n```html\n<nav>\n   <a routerLink=\"/movimientos/nuevo\" >Nuevo Movimiento</a>\n   <a routerLink=\"/movimientos/lista\" >Lista de Movimientos</a>\n</nav>\n<router-outlet></router-outlet>\n```\n\nSerá en este elemento donde se inyecten los componentes asociados a las rutas hijas. Este *anidamiento* permite hacer aplicaciones modulares y acceder a vistas específicas con rutas específicas. \n\n\n### Rutas con parámetros \n\nHasta ahora usé rutas fijas para navegar. Lo más normal es que estas **plantillas contengan segmentos variables** llamados parámetros. Para incorporar parámetros a tu esquema de rutas tienes que actuar en tres fases:\n\n#### 1- Definir la parte paramétrica de la plantilla generadora de rutas\n\nEl *path* del objeto ruta se convierte en una plantilla que admite distintos valores. Así queda ahora el módulo enrutador de movimientos:\n\n```javascript\nconst routes: Routes = [\n  {\n    path: 'movimientos',\n    component: MovimientosComponent,\n    children: [ // rutas hijas, se verán dentro del componente padre\n      {\n        path: 'nuevo', // la ruta real es movimientos/nuevo\n        component: NuevoComponent\n      },\n      {\n        path: 'lista',\n        component: ListaComponent\n      }\n    ]\n  },\n  {\n    path: 'movimientos/:id', // parámetro variable id    \n    component: EditorComponent\n  }\n];\n```\n\nLos parámetros se prefijan con `:` y en cada ruta se pueden usar tantos como sea necesario. \n\n>Obsérvese que en este caso la ruta 'movimientos/:id' es hermana, no hija, de la primera. Por tanto se mostrará en el `router-outlet` del componente raíz. Se ha hecho así para mostrar distintas maneras de trabajar en el 'router'.\n\n \n\n#### 2- Montar los enlaces asignando valores a los parámetros\n\nEsto se puede hacer en las plantillas HTML o en por código. Siempre usando el **array de `routerLink`** sin necesidad de concatenar cadenas para para montar rutas. Este array en su segunda posición llevará un objeto que represente los valores de los parámetros. \n\nEn un caso de navegación por código sencillo tendrá esta pinta:\n```javascript\n  // para ir a la ruta /movimientos/42\n  this.router.navigate(['movimientos', 42])\n```\n\nUsando desde la vista en igual de sencillo con la directiva `routerLink`, como en este ejemplo HTML:\n\n```html\n<a [routerLink]=\"['/movimientos', 42 ]\">42</a>\n```\n\n#### 3- Recuperar los valores de los parámetros a partir de las rutas\nLa novedad más llamativa es la presencia de `OnInit`. Es un *hook*, o evento de la vida de un componente. Este evento se ejecuta al iniciarse el componente pero cuando ya la ruta se ha resuelto completamente. \nEn ese momento puedes usar `ActivatedRoute`, un servicio que entre otras cosas te dará acceso a un *observable* que emite los valores actuales de los parámetros.\nPor ejemplo, esto sería el código del componente `editor.component.ts` que se activa con rutas como *'/movimientos/42'*\n\n```javascript\nimport { Component, OnInit } from '@angular/core';\n/** Servicio para acceder a la ruta activa */\nimport { ActivatedRoute } from '@angular/router';\nimport { DatosService } from './../datos.service';\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.css']\n})\nexport class EditorComponent implements OnInit {\n  public movimiento;\n  constructor(\n      private route: ActivatedRoute, \n      private datosService: DatosService) { \n      // constructor vacío. sólo se usa para reclamar dependencias         \n  }\n  ngOnInit() {\n    // subscripción al observable params\n    this.route.params\n      .subscribe(params => {\n        const _id = params['id'].toString();\n        this.movimiento = this.datosService.getMovimientoBy_Id(_id);\n      });\n  }\n}\n```\n> Hay una estrategia opcional que emplea `Observables` para mantener potenciales cambios de estado en los valores de los parámetros. Si te interesa busca información sobre `Router` .\n\n### Carga diferida\n\nEsta es la funcionalidad más esperada y que sigue siendo un *work in progress*. Cuando las aplicaciones AngularJS crecen en funcionalidad producen un **impacto negativo en la primera vista** de un usuario. Eso es debido a que *Angular* necesita disponer de todo tu código para montar el armazón de dependencias. Esto es así aunque el usuario no vaya a navegar mas que por un conjunto reducido de rutas.\n\nEn aplicaciones de *intranet* o de uso muy intensivo esto no suele ser un gran problema. Esa espera inicial de unos pocos segundos se recupera durante el uso continuado de la aplicación. Pero ciertos desarrollos realmente grandes o, sobre todo, **aplicaciones web públicas para usuarios ocasionales** necesitaban un tratamiento especial.\n\nLa solución es implementar un modelo de *lazy loading* o carga diferida. En este caso el navegador descarga el HTML y el código de la aplicación según el usuario navegue. \n\nEn *Angular2* se incluye esta funcionalidad, pero a día de hoy aún no está disponible con `angular-cli`. Se puede *tunear WebPack* a mano para conseguirlo, pero, si no hay urgencia en salir a producción, no te lo recomiendo. Es preferible esperar un poco y usar el la solución definitiva que implemente la herramienta.\n\nEn cuanto sea *usable* actualizaré este artículo y difundiré la buena nueva a los cuatro vientos. Como sabes aún estamos esperando la primera *Release Candidate* de `angular-cli` y habrá mejoras importantes. \n\nMantente a la última recibiendo el [boletín de noticias de Academia Binaria](http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&id=b67e4d2339) o siguiéndome en las [redes sociales](https://twitter.com/albertobasalo). \n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n\n---\n\n### ACTUALIZACIÓN\n\nPara una versión más reciente del contenido visita la página [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/)","slug":"enrutado-con-angular2-el-nuevo-spa","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvi7001liwd3mxs167tt","content":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a></p></blockquote><hr><blockquote><p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/6-routing\" target=\"_blank\" rel=\"external\">angular2/6-routing/</a></p></blockquote><p>La capacidad de gestionar las <strong>rutas en el cliente</strong> es una de las grandes ventajas de <em>AngularJS</em>. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa <a href=\"https://github.com/angular-ui/ui-router\" target=\"_blank\" rel=\"external\">ui-router</a>. Hemos esperado años la promesa de un nuevo <em>enrutador</em> compatible con las versiones 1 y 2. El resultado es <strong>@angular/router</strong>.</p><p>De todo <em>Angular2</em>, este es el componente que más ha cambiado durante la fase <em>Release Candidate</em>. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos <strong>SPA</strong>.</p><a id=\"more\"></a><h2 id=\"Modulo-de-enrutado-en-base-a-componentes\"><a href=\"#Modulo-de-enrutado-en-base-a-componentes\" class=\"headerlink\" title=\"Módulo de enrutado en base a componentes\"></a>Módulo de enrutado en base a componentes</h2><p>Las aplicaciones Angular2 son <a href=\"http://academia-binaria.com/componentes-los-bloques-de-construccion-de-angular-2/\">árboles de módulos</a>. Al menos el módulo raíz <code>AppModule</code> y cuantos módulos funcionales nos hagan falta. Utilizando <code>angular-cli</code> podemos crear módulos con la capacidad de enrutado generada en… un módulo específico.</p><p>A ver si desbrozamos algo este bosque de módulos.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng <span class=\"keyword\">new</span> mi-aplicacion --routing <span class=\"literal\">true</span></div></pre></td></tr></table></figure><p>Tanto para la raíz como para las ramas funcionales se creará un fichero. En la raíz será llamado <code>app-routing.module.ts</code> con un contenido como este:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Módulos de enrutado de Angular2 */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array con las rutas de este módulo. Ninguna funcional.</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">''</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'inicio'</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'**'</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span>, <span class=\"attr\">pathMatch</span>: <span class=\"string\">'full'</span> &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forRoot(routes) <span class=\"comment\">// configuración para el módulo raíz</span></div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    RouterModule <span class=\"comment\">// se importará desde el módulo padre</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><p>Este <strong>módulo</strong> de un único fichero sirve <strong>para definir las rutas de otro módulo padre</strong> asociado, <code>app.module.ts</code>, el cual quedará más o menos así:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importación de módulo de enrutado asociado</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app-routing.module'</span>;</div><div class=\"line\"><span class=\"comment\">// importación de otros módulos de funcionalidad</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home/home.module'</span>;</div><div class=\"line\"><span class=\"comment\">// decorador que define un módulo</span></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [ AppComponent ], </div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule,</div><div class=\"line\">    HomeModule, <span class=\"comment\">// el módulo funcional para la 'página home'</span></div><div class=\"line\">    AppRoutingModule <span class=\"comment\">// el módulo de rutas ya configurado</span></div><div class=\"line\">  ], </div><div class=\"line\">  providers: [] </div><div class=\"line\">  bootstrap: [ AppComponent ] </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><h2 id=\"Modulos-funcionales\"><a href=\"#Modulos-funcionales\" class=\"headerlink\" title=\"Módulos funcionales\"></a>Módulos funcionales</h2><p>El módulo raíz es fundamental pero nada operativo. Toda el que sea de interés para los usuarios estará en módulos funcionales. En las aplicaciones SPA es una buena práctica crear <strong>un módulo por cada ruta</strong> principal. Incluida la página home. Por ejemplo usando el siguiente comando:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng generate <span class=\"built_in\">module</span> home --routing <span class=\"literal\">true</span></div></pre></td></tr></table></figure><p>Aparece un fichero llamado <code>home-routing-module.ts</code>. Este módulo se debe configurar para que gestione sus propias rutas.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"comment\">/** Componente enrutable */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home.component'</span>;</div><div class=\"line\"><span class=\"comment\">/** Rutas asociadas a componentes */</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">''</span>, <span class=\"attr\">component</span>: HomeComponent &#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"comment\">/** array de componentes enrutables */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routableComponents = [</div><div class=\"line\">  HomeComponent</div><div class=\"line\">];</div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forChild(routes) <span class=\"comment\">// Para módulo funcional</span></div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    RouterModule <span class=\"comment\">// listo para importarlo en HomeModule</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeRoutingModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><p>Se crean dos arrays relacionados. EL principal, <code>routes</code>, contendrá las <strong>rutas pareadas con sus componentes</strong> respectivos.<br>Los cuales también se exportan directamente en la variable <code>routableComponents</code>. Esto se hace por comodidad. Para no tener que volver a importarlos en la declaración del módulo padre, que quedará así:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Importación de las rutas y sus componentes */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeRoutingModule, routableComponents &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home-routing.module'</span>;</div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    HomeRoutingModule <span class=\"comment\">// el módulo que sabe enrutar</span></div><div class=\"line\">  ],</div><div class=\"line\">  declarations: [</div><div class=\"line\">    routableComponents <span class=\"comment\">// los componentes de enrutado</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><h3 id=\"Carga-de-componentes-segun-la-ruta\"><a href=\"#Carga-de-componentes-segun-la-ruta\" class=\"headerlink\" title=\"Carga de componentes según la ruta\"></a>Carga de componentes según la ruta</h3><p>Todo este trabajo de configuración se materializa en las <strong>vistas</strong>. Necesitaremos un lugar dónde inyectar el <strong>componente de turno asociado a la ruta</strong> actual. Presentamos el <code>router-outlet</code>. Y para que la aplicación pueda llevarnos de un lugar a otro usaremos la directiva <code>routerLink</code>.</p><p>De forma que la plantilla raíz <code>app.component.html</code> quedará normalmente así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--menú de navegación, sin href--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/']\"</span>&gt;</span>Inicio<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/login']\"</span>&gt;</span>Log In<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/contacto']\"</span>&gt;</span>Contacto<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--Este componente nativo hace que el enrutador cargue una página dinámicamente--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=\"Rutas-hijas-y-con-parametros\"><a href=\"#Rutas-hijas-y-con-parametros\" class=\"headerlink\" title=\"Rutas hijas y con parámetros\"></a>Rutas hijas y con parámetros</h2><p>De poco vale un enrutador que sólo atienda a los casos sencillos. Las aplicaciones profesionales plantean mayores retos.</p><h3 id=\"Rutas-hijas\"><a href=\"#Rutas-hijas\" class=\"headerlink\" title=\"Rutas hijas\"></a>Rutas hijas</h3><p>Un ejemplo son las <strong>rutas anidadas</strong>, aquí llamadas rutas hijas. Son aquellas en las que una parte de la visualización es común y otra depende de la ruta concreta.</p><p>Veamos un ejemplo dónde se pretende dar de alta y mostrar una lista de elementos. La base de cualquier <em>CRUD</em>. Así quedaría el fichero <code>movimientos-routing.module.ts</code>.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Importación de los componentes enrutables */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ListaComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lista/lista.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NuevoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./nuevo/nuevo.component'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos'</span>,</div><div class=\"line\">    component: MovimientosComponent,</div><div class=\"line\">    children: [ <span class=\"comment\">// rutas hijas, se verán dentro del componente padre</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'nuevo'</span>, <span class=\"comment\">// la ruta real es movimientos/nuevo</span></div><div class=\"line\">        component: NuevoComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'lista'</span>,</div><div class=\"line\">        component: ListaComponent</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routableComponents = [</div><div class=\"line\">  NuevoComponent,</div><div class=\"line\">  ListaComponent,</div><div class=\"line\">  MovimientosComponent</div><div class=\"line\">]</div></pre></td></tr></table></figure><p>Este mini-módulo es muy denso. Contrasta con la simplicidad del <code>movimientos.module.ts</code> que reduce su responsabilidad. Sólo tiene que importar los módulos adecuados.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Módulo de enrutado y componentes */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosRoutingModule, routableComponents &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos-routing.module'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    MovimientosRoutingModule</div><div class=\"line\">  ], <span class=\"comment\">// dependencias de otros módulos, especialmente el de enrutado</span></div><div class=\"line\">  declarations: [</div><div class=\"line\">    routableComponents</div><div class=\"line\">  ], <span class=\"comment\">// Los componentes vienen del fichero movimientos-routing.module.ts</span></div><div class=\"line\">  exports: [</div><div class=\"line\"></div><div class=\"line\">  ], <span class=\"comment\">// no necesita exportar nada</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure><p>Vemos que la idea es que los ficheros de definición de módulos funcionales <strong>deleguen toda la lógica</strong> posible a su propio módulo de enrutado.</p><p>Mientras tanto en la vista… Habíamos dejado la <em>template</em> del componente raíz con un <code>router-outlet</code>. Será ahí dónde se cargue el <code>MovimientosComponent</code> cuando se active la ruta <em>‘/movimientos’</em>. Pero, ¿y las rutas hijas?, ¿qué se carga y dónde se carga cuando se activa la ruta <em>‘/movimientos/nuevo’</em> o la ruta <em>‘/movimientos/lista’</em> ?.</p><p>Echemos un vistazo a <code>movimientos.component.html</code> para comprobar que dispone de su propio <code>router-outlet</code>.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/movimientos/nuevo\"</span> &gt;</span>Nuevo Movimiento<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/movimientos/lista\"</span> &gt;</span>Lista de Movimientos<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure><p>Será en este elemento donde se inyecten los componentes asociados a las rutas hijas. Este <em>anidamiento</em> permite hacer aplicaciones modulares y acceder a vistas específicas con rutas específicas.</p><h3 id=\"Rutas-con-parametros\"><a href=\"#Rutas-con-parametros\" class=\"headerlink\" title=\"Rutas con parámetros\"></a>Rutas con parámetros</h3><p>Hasta ahora usé rutas fijas para navegar. Lo más normal es que estas <strong>plantillas contengan segmentos variables</strong> llamados parámetros. Para incorporar parámetros a tu esquema de rutas tienes que actuar en tres fases:</p><h4 id=\"1-Definir-la-parte-parametrica-de-la-plantilla-generadora-de-rutas\"><a href=\"#1-Definir-la-parte-parametrica-de-la-plantilla-generadora-de-rutas\" class=\"headerlink\" title=\"1- Definir la parte paramétrica de la plantilla generadora de rutas\"></a>1- Definir la parte paramétrica de la plantilla generadora de rutas</h4><p>El <em>path</em> del objeto ruta se convierte en una plantilla que admite distintos valores. Así queda ahora el módulo enrutador de movimientos:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos'</span>,</div><div class=\"line\">    component: MovimientosComponent,</div><div class=\"line\">    children: [ <span class=\"comment\">// rutas hijas, se verán dentro del componente padre</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'nuevo'</span>, <span class=\"comment\">// la ruta real es movimientos/nuevo</span></div><div class=\"line\">        component: NuevoComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'lista'</span>,</div><div class=\"line\">        component: ListaComponent</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos/:id'</span>, <span class=\"comment\">// parámetro variable id    </span></div><div class=\"line\">    component: EditorComponent</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure><p>Los parámetros se prefijan con <code>:</code> y en cada ruta se pueden usar tantos como sea necesario.</p><blockquote><p>Obsérvese que en este caso la ruta ‘movimientos/:id’ es hermana, no hija, de la primera. Por tanto se mostrará en el <code>router-outlet</code> del componente raíz. Se ha hecho así para mostrar distintas maneras de trabajar en el ‘router’.</p></blockquote><h4 id=\"2-Montar-los-enlaces-asignando-valores-a-los-parametros\"><a href=\"#2-Montar-los-enlaces-asignando-valores-a-los-parametros\" class=\"headerlink\" title=\"2- Montar los enlaces asignando valores a los parámetros\"></a>2- Montar los enlaces asignando valores a los parámetros</h4><p>Esto se puede hacer en las plantillas HTML o en por código. Siempre usando el <strong>array de <code>routerLink</code></strong> sin necesidad de concatenar cadenas para para montar rutas. Este array en su segunda posición llevará un objeto que represente los valores de los parámetros.</p><p>En un caso de navegación por código sencillo tendrá esta pinta:<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// para ir a la ruta /movimientos/42</span></div><div class=\"line\"><span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'movimientos'</span>, <span class=\"number\">42</span>])</div></pre></td></tr></table></figure><p></p><p>Usando desde la vista en igual de sencillo con la directiva <code>routerLink</code>, como en este ejemplo HTML:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/movimientos', 42 ]\"</span>&gt;</span>42<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure><h4 id=\"3-Recuperar-los-valores-de-los-parametros-a-partir-de-las-rutas\"><a href=\"#3-Recuperar-los-valores-de-los-parametros-a-partir-de-las-rutas\" class=\"headerlink\" title=\"3- Recuperar los valores de los parámetros a partir de las rutas\"></a>3- Recuperar los valores de los parámetros a partir de las rutas</h4><p>La novedad más llamativa es la presencia de <code>OnInit</code>. Es un <em>hook</em>, o evento de la vida de un componente. Este evento se ejecuta al iniciarse el componente pero cuando ya la ruta se ha resuelto completamente.<br>En ese momento puedes usar <code>ActivatedRoute</code>, un servicio que entre otras cosas te dará acceso a un <em>observable</em> que emite los valores actuales de los parámetros.<br>Por ejemplo, esto sería el código del componente <code>editor.component.ts</code> que se activa con rutas como <em>‘/movimientos/42’</em></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">/** Servicio para acceder a la ruta activa */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; DatosService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../datos.service'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-editor'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'./editor.component.html'</span>,</div><div class=\"line\">  styleUrls: [<span class=\"string\">'./editor.component.css'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">  public movimiento;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(</div><div class=\"line\">      private route: ActivatedRoute, </div><div class=\"line\">      private datosService: DatosService) &#123; </div><div class=\"line\">      <span class=\"comment\">// constructor vacío. sólo se usa para reclamar dependencias         </span></div><div class=\"line\">  &#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"comment\">// subscripción al observable params</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.route.params</div><div class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> _id = params[<span class=\"string\">'id'</span>].toString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.movimiento = <span class=\"keyword\">this</span>.datosService.getMovimientoBy_Id(_id);</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>Hay una estrategia opcional que emplea <code>Observables</code> para mantener potenciales cambios de estado en los valores de los parámetros. Si te interesa busca información sobre <code>Router</code> .</p></blockquote><h3 id=\"Carga-diferida\"><a href=\"#Carga-diferida\" class=\"headerlink\" title=\"Carga diferida\"></a>Carga diferida</h3><p>Esta es la funcionalidad más esperada y que sigue siendo un <em>work in progress</em>. Cuando las aplicaciones AngularJS crecen en funcionalidad producen un <strong>impacto negativo en la primera vista</strong> de un usuario. Eso es debido a que <em>Angular</em> necesita disponer de todo tu código para montar el armazón de dependencias. Esto es así aunque el usuario no vaya a navegar mas que por un conjunto reducido de rutas.</p><p>En aplicaciones de <em>intranet</em> o de uso muy intensivo esto no suele ser un gran problema. Esa espera inicial de unos pocos segundos se recupera durante el uso continuado de la aplicación. Pero ciertos desarrollos realmente grandes o, sobre todo, <strong>aplicaciones web públicas para usuarios ocasionales</strong> necesitaban un tratamiento especial.</p><p>La solución es implementar un modelo de <em>lazy loading</em> o carga diferida. En este caso el navegador descarga el HTML y el código de la aplicación según el usuario navegue.</p><p>En <em>Angular2</em> se incluye esta funcionalidad, pero a día de hoy aún no está disponible con <code>angular-cli</code>. Se puede <em>tunear WebPack</em> a mano para conseguirlo, pero, si no hay urgencia en salir a producción, no te lo recomiendo. Es preferible esperar un poco y usar el la solución definitiva que implemente la herramienta.</p><p>En cuanto sea <em>usable</em> actualizaré este artículo y difundiré la buena nueva a los cuatro vientos. Como sabes aún estamos esperando la primera <em>Release Candidate</em> de <code>angular-cli</code> y habrá mejoras importantes.</p><p>Mantente a la última recibiendo el <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">boletín de noticias de Academia Binaria</a> o siguiéndome en las <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">redes sociales</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a></p>","site":{"data":{}},"excerpt":"<blockquote><p>ACTUALIZACIÓN: para una versión más reciente del contenido visita la página <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a></p></blockquote><hr><blockquote><p>Código asociado en <a href=\"https://github.com/AcademiaBinaria/angular2/tree/master/6-routing\" target=\"_blank\" rel=\"external\">angular2/6-routing/</a></p></blockquote><p>La capacidad de gestionar las <strong>rutas en el cliente</strong> es una de las grandes ventajas de <em>AngularJS</em>. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa <a href=\"https://github.com/angular-ui/ui-router\" target=\"_blank\" rel=\"external\">ui-router</a>. Hemos esperado años la promesa de un nuevo <em>enrutador</em> compatible con las versiones 1 y 2. El resultado es <strong>@angular/router</strong>.</p><p>De todo <em>Angular2</em>, este es el componente que más ha cambiado durante la fase <em>Release Candidate</em>. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos <strong>SPA</strong>.</p>","more":"<h2 id=\"Modulo-de-enrutado-en-base-a-componentes\"><a href=\"#Modulo-de-enrutado-en-base-a-componentes\" class=\"headerlink\" title=\"Módulo de enrutado en base a componentes\"></a>Módulo de enrutado en base a componentes</h2><p>Las aplicaciones Angular2 son <a href=\"http://academia-binaria.com/componentes-los-bloques-de-construccion-de-angular-2/\">árboles de módulos</a>. Al menos el módulo raíz <code>AppModule</code> y cuantos módulos funcionales nos hagan falta. Utilizando <code>angular-cli</code> podemos crear módulos con la capacidad de enrutado generada en… un módulo específico.</p><p>A ver si desbrozamos algo este bosque de módulos.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng <span class=\"keyword\">new</span> mi-aplicacion --routing <span class=\"literal\">true</span></div></pre></td></tr></table></figure><p>Tanto para la raíz como para las ramas funcionales se creará un fichero. En la raíz será llamado <code>app-routing.module.ts</code> con un contenido como este:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Módulos de enrutado de Angular2 */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array con las rutas de este módulo. Ninguna funcional.</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">''</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'inicio'</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">'**'</span>, <span class=\"attr\">redirectTo</span>: <span class=\"string\">''</span>, <span class=\"attr\">pathMatch</span>: <span class=\"string\">'full'</span> &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forRoot(routes) <span class=\"comment\">// configuración para el módulo raíz</span></div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    RouterModule <span class=\"comment\">// se importará desde el módulo padre</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><p>Este <strong>módulo</strong> de un único fichero sirve <strong>para definir las rutas de otro módulo padre</strong> asociado, <code>app.module.ts</code>, el cual quedará más o menos así:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// importación de módulo de enrutado asociado</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app-routing.module'</span>;</div><div class=\"line\"><span class=\"comment\">// importación de otros módulos de funcionalidad</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home/home.module'</span>;</div><div class=\"line\"><span class=\"comment\">// decorador que define un módulo</span></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [ AppComponent ], </div><div class=\"line\">  imports: [</div><div class=\"line\">    BrowserModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    HttpModule,</div><div class=\"line\">    HomeModule, <span class=\"comment\">// el módulo funcional para la 'página home'</span></div><div class=\"line\">    AppRoutingModule <span class=\"comment\">// el módulo de rutas ya configurado</span></div><div class=\"line\">  ], </div><div class=\"line\">  providers: [] </div><div class=\"line\">  bootstrap: [ AppComponent ] </div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><h2 id=\"Modulos-funcionales\"><a href=\"#Modulos-funcionales\" class=\"headerlink\" title=\"Módulos funcionales\"></a>Módulos funcionales</h2><p>El módulo raíz es fundamental pero nada operativo. Toda el que sea de interés para los usuarios estará en módulos funcionales. En las aplicaciones SPA es una buena práctica crear <strong>un módulo por cada ruta</strong> principal. Incluida la página home. Por ejemplo usando el siguiente comando:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng generate <span class=\"built_in\">module</span> home --routing <span class=\"literal\">true</span></div></pre></td></tr></table></figure><p>Aparece un fichero llamado <code>home-routing-module.ts</code>. Este módulo se debe configurar para que gestione sus propias rutas.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"comment\">/** Componente enrutable */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home.component'</span>;</div><div class=\"line\"><span class=\"comment\">/** Rutas asociadas a componentes */</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">''</span>, <span class=\"attr\">component</span>: HomeComponent &#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"comment\">/** array de componentes enrutables */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routableComponents = [</div><div class=\"line\">  HomeComponent</div><div class=\"line\">];</div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forChild(routes) <span class=\"comment\">// Para módulo funcional</span></div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    RouterModule <span class=\"comment\">// listo para importarlo en HomeModule</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeRoutingModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><p>Se crean dos arrays relacionados. EL principal, <code>routes</code>, contendrá las <strong>rutas pareadas con sus componentes</strong> respectivos.<br>Los cuales también se exportan directamente en la variable <code>routableComponents</code>. Esto se hace por comodidad. Para no tener que volver a importarlos en la declaración del módulo padre, que quedará así:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Importación de las rutas y sus componentes */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HomeRoutingModule, routableComponents &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home-routing.module'</span>;</div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    HomeRoutingModule <span class=\"comment\">// el módulo que sabe enrutar</span></div><div class=\"line\">  ],</div><div class=\"line\">  declarations: [</div><div class=\"line\">    routableComponents <span class=\"comment\">// los componentes de enrutado</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeModule</span> </span>&#123; &#125;</div></pre></td></tr></table></figure><h3 id=\"Carga-de-componentes-segun-la-ruta\"><a href=\"#Carga-de-componentes-segun-la-ruta\" class=\"headerlink\" title=\"Carga de componentes según la ruta\"></a>Carga de componentes según la ruta</h3><p>Todo este trabajo de configuración se materializa en las <strong>vistas</strong>. Necesitaremos un lugar dónde inyectar el <strong>componente de turno asociado a la ruta</strong> actual. Presentamos el <code>router-outlet</code>. Y para que la aplicación pueda llevarnos de un lugar a otro usaremos la directiva <code>routerLink</code>.</p><p>De forma que la plantilla raíz <code>app.component.html</code> quedará normalmente así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--menú de navegación, sin href--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/']\"</span>&gt;</span>Inicio<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/login']\"</span>&gt;</span>Log In<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/contacto']\"</span>&gt;</span>Contacto<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--Este componente nativo hace que el enrutador cargue una página dinámicamente--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=\"Rutas-hijas-y-con-parametros\"><a href=\"#Rutas-hijas-y-con-parametros\" class=\"headerlink\" title=\"Rutas hijas y con parámetros\"></a>Rutas hijas y con parámetros</h2><p>De poco vale un enrutador que sólo atienda a los casos sencillos. Las aplicaciones profesionales plantean mayores retos.</p><h3 id=\"Rutas-hijas\"><a href=\"#Rutas-hijas\" class=\"headerlink\" title=\"Rutas hijas\"></a>Rutas hijas</h3><p>Un ejemplo son las <strong>rutas anidadas</strong>, aquí llamadas rutas hijas. Son aquellas en las que una parte de la visualización es común y otra depende de la ruta concreta.</p><p>Veamos un ejemplo dónde se pretende dar de alta y mostrar una lista de elementos. La base de cualquier <em>CRUD</em>. Así quedaría el fichero <code>movimientos-routing.module.ts</code>.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Importación de los componentes enrutables */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ListaComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lista/lista.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NuevoComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./nuevo/nuevo.component'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos'</span>,</div><div class=\"line\">    component: MovimientosComponent,</div><div class=\"line\">    children: [ <span class=\"comment\">// rutas hijas, se verán dentro del componente padre</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'nuevo'</span>, <span class=\"comment\">// la ruta real es movimientos/nuevo</span></div><div class=\"line\">        component: NuevoComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'lista'</span>,</div><div class=\"line\">        component: ListaComponent</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routableComponents = [</div><div class=\"line\">  NuevoComponent,</div><div class=\"line\">  ListaComponent,</div><div class=\"line\">  MovimientosComponent</div><div class=\"line\">]</div></pre></td></tr></table></figure><p>Este mini-módulo es muy denso. Contrasta con la simplicidad del <code>movimientos.module.ts</code> que reduce su responsabilidad. Sólo tiene que importar los módulos adecuados.</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"comment\">/** Módulo de enrutado y componentes */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; MovimientosRoutingModule, routableComponents &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./movimientos-routing.module'</span>;</div><div class=\"line\"></div><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    CommonModule,</div><div class=\"line\">    FormsModule,</div><div class=\"line\">    MovimientosRoutingModule</div><div class=\"line\">  ], <span class=\"comment\">// dependencias de otros módulos, especialmente el de enrutado</span></div><div class=\"line\">  declarations: [</div><div class=\"line\">    routableComponents</div><div class=\"line\">  ], <span class=\"comment\">// Los componentes vienen del fichero movimientos-routing.module.ts</span></div><div class=\"line\">  exports: [</div><div class=\"line\"></div><div class=\"line\">  ], <span class=\"comment\">// no necesita exportar nada</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure><p>Vemos que la idea es que los ficheros de definición de módulos funcionales <strong>deleguen toda la lógica</strong> posible a su propio módulo de enrutado.</p><p>Mientras tanto en la vista… Habíamos dejado la <em>template</em> del componente raíz con un <code>router-outlet</code>. Será ahí dónde se cargue el <code>MovimientosComponent</code> cuando se active la ruta <em>‘/movimientos’</em>. Pero, ¿y las rutas hijas?, ¿qué se carga y dónde se carga cuando se activa la ruta <em>‘/movimientos/nuevo’</em> o la ruta <em>‘/movimientos/lista’</em> ?.</p><p>Echemos un vistazo a <code>movimientos.component.html</code> para comprobar que dispone de su propio <code>router-outlet</code>.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/movimientos/nuevo\"</span> &gt;</span>Nuevo Movimiento<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/movimientos/lista\"</span> &gt;</span>Lista de Movimientos<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure><p>Será en este elemento donde se inyecten los componentes asociados a las rutas hijas. Este <em>anidamiento</em> permite hacer aplicaciones modulares y acceder a vistas específicas con rutas específicas.</p><h3 id=\"Rutas-con-parametros\"><a href=\"#Rutas-con-parametros\" class=\"headerlink\" title=\"Rutas con parámetros\"></a>Rutas con parámetros</h3><p>Hasta ahora usé rutas fijas para navegar. Lo más normal es que estas <strong>plantillas contengan segmentos variables</strong> llamados parámetros. Para incorporar parámetros a tu esquema de rutas tienes que actuar en tres fases:</p><h4 id=\"1-Definir-la-parte-parametrica-de-la-plantilla-generadora-de-rutas\"><a href=\"#1-Definir-la-parte-parametrica-de-la-plantilla-generadora-de-rutas\" class=\"headerlink\" title=\"1- Definir la parte paramétrica de la plantilla generadora de rutas\"></a>1- Definir la parte paramétrica de la plantilla generadora de rutas</h4><p>El <em>path</em> del objeto ruta se convierte en una plantilla que admite distintos valores. Así queda ahora el módulo enrutador de movimientos:</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos'</span>,</div><div class=\"line\">    component: MovimientosComponent,</div><div class=\"line\">    children: [ <span class=\"comment\">// rutas hijas, se verán dentro del componente padre</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'nuevo'</span>, <span class=\"comment\">// la ruta real es movimientos/nuevo</span></div><div class=\"line\">        component: NuevoComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        path: <span class=\"string\">'lista'</span>,</div><div class=\"line\">        component: ListaComponent</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    path: <span class=\"string\">'movimientos/:id'</span>, <span class=\"comment\">// parámetro variable id    </span></div><div class=\"line\">    component: EditorComponent</div><div class=\"line\">  &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure><p>Los parámetros se prefijan con <code>:</code> y en cada ruta se pueden usar tantos como sea necesario.</p><blockquote><p>Obsérvese que en este caso la ruta ‘movimientos/:id’ es hermana, no hija, de la primera. Por tanto se mostrará en el <code>router-outlet</code> del componente raíz. Se ha hecho así para mostrar distintas maneras de trabajar en el ‘router’.</p></blockquote><h4 id=\"2-Montar-los-enlaces-asignando-valores-a-los-parametros\"><a href=\"#2-Montar-los-enlaces-asignando-valores-a-los-parametros\" class=\"headerlink\" title=\"2- Montar los enlaces asignando valores a los parámetros\"></a>2- Montar los enlaces asignando valores a los parámetros</h4><p>Esto se puede hacer en las plantillas HTML o en por código. Siempre usando el <strong>array de <code>routerLink</code></strong> sin necesidad de concatenar cadenas para para montar rutas. Este array en su segunda posición llevará un objeto que represente los valores de los parámetros.</p><p>En un caso de navegación por código sencillo tendrá esta pinta:<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// para ir a la ruta /movimientos/42</span></div><div class=\"line\"><span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'movimientos'</span>, <span class=\"number\">42</span>])</div></pre></td></tr></table></figure><p></p><p>Usando desde la vista en igual de sencillo con la directiva <code>routerLink</code>, como en este ejemplo HTML:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/movimientos', 42 ]\"</span>&gt;</span>42<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure><h4 id=\"3-Recuperar-los-valores-de-los-parametros-a-partir-de-las-rutas\"><a href=\"#3-Recuperar-los-valores-de-los-parametros-a-partir-de-las-rutas\" class=\"headerlink\" title=\"3- Recuperar los valores de los parámetros a partir de las rutas\"></a>3- Recuperar los valores de los parámetros a partir de las rutas</h4><p>La novedad más llamativa es la presencia de <code>OnInit</code>. Es un <em>hook</em>, o evento de la vida de un componente. Este evento se ejecuta al iniciarse el componente pero cuando ya la ruta se ha resuelto completamente.<br>En ese momento puedes usar <code>ActivatedRoute</code>, un servicio que entre otras cosas te dará acceso a un <em>observable</em> que emite los valores actuales de los parámetros.<br>Por ejemplo, esto sería el código del componente <code>editor.component.ts</code> que se activa con rutas como <em>‘/movimientos/42’</em></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">/** Servicio para acceder a la ruta activa */</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; DatosService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../datos.service'</span>;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'app-editor'</span>,</div><div class=\"line\">  templateUrl: <span class=\"string\">'./editor.component.html'</span>,</div><div class=\"line\">  styleUrls: [<span class=\"string\">'./editor.component.css'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">  public movimiento;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(</div><div class=\"line\">      private route: ActivatedRoute, </div><div class=\"line\">      private datosService: DatosService) &#123; </div><div class=\"line\">      <span class=\"comment\">// constructor vacío. sólo se usa para reclamar dependencias         </span></div><div class=\"line\">  &#125;</div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"comment\">// subscripción al observable params</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.route.params</div><div class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> _id = params[<span class=\"string\">'id'</span>].toString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.movimiento = <span class=\"keyword\">this</span>.datosService.getMovimientoBy_Id(_id);</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>Hay una estrategia opcional que emplea <code>Observables</code> para mantener potenciales cambios de estado en los valores de los parámetros. Si te interesa busca información sobre <code>Router</code> .</p></blockquote><h3 id=\"Carga-diferida\"><a href=\"#Carga-diferida\" class=\"headerlink\" title=\"Carga diferida\"></a>Carga diferida</h3><p>Esta es la funcionalidad más esperada y que sigue siendo un <em>work in progress</em>. Cuando las aplicaciones AngularJS crecen en funcionalidad producen un <strong>impacto negativo en la primera vista</strong> de un usuario. Eso es debido a que <em>Angular</em> necesita disponer de todo tu código para montar el armazón de dependencias. Esto es así aunque el usuario no vaya a navegar mas que por un conjunto reducido de rutas.</p><p>En aplicaciones de <em>intranet</em> o de uso muy intensivo esto no suele ser un gran problema. Esa espera inicial de unos pocos segundos se recupera durante el uso continuado de la aplicación. Pero ciertos desarrollos realmente grandes o, sobre todo, <strong>aplicaciones web públicas para usuarios ocasionales</strong> necesitaban un tratamiento especial.</p><p>La solución es implementar un modelo de <em>lazy loading</em> o carga diferida. En este caso el navegador descarga el HTML y el código de la aplicación según el usuario navegue.</p><p>En <em>Angular2</em> se incluye esta funcionalidad, pero a día de hoy aún no está disponible con <code>angular-cli</code>. Se puede <em>tunear WebPack</em> a mano para conseguirlo, pero, si no hay urgencia en salir a producción, no te lo recomiendo. Es preferible esperar un poco y usar el la solución definitiva que implemente la herramienta.</p><p>En cuanto sea <em>usable</em> actualizaré este artículo y difundiré la buena nueva a los cuatro vientos. Como sabes aún estamos esperando la primera <em>Release Candidate</em> de <code>angular-cli</code> y habrá mejoras importantes.</p><p>Mantente a la última recibiendo el <a href=\"http://academia-binaria.us4.list-manage.com/subscribe?u=c8ad2d2e7d02c26e32ce4cded&amp;id=b67e4d2339\" target=\"_blank\" rel=\"external\">boletín de noticias de Academia Binaria</a> o siguiéndome en las <a href=\"https://twitter.com/albertobasalo\" target=\"_blank\" rel=\"external\">redes sociales</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote><hr><h3 id=\"ACTUALIZACION\"><a href=\"#ACTUALIZACION\" class=\"headerlink\" title=\"ACTUALIZACIÓN\"></a>ACTUALIZACIÓN</h3><p>Para una versión más reciente del contenido visita la página <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a></p>"},{"title":"Formularios, tablas y modelos de datos en Angular","date":"2017-11-15T09:17:37.000Z","thumbnail":"/css/images/angular-5_3_data.jpg","_content":"![Tutorial Angular5 3-Data](/images/tutorial-angular-5_3_data.png)\n\nLas **aplicaciones Angular son excelentes para el tratamiento de datos** en el navegador. La recogida de información mediante formularios y la presentación de páginas dinámicas fue su razón de ser.\n\nVamos a ver cómo la librería `@angular/forms` enlaza **las vistas, los controladores y los modelos** y cómo se hace la presentación de datos en **listas y tablas**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/). Al finalizar tendrás una aplicación que recoge y presenta datos.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/angular5/3-data](https://github.com/AcademiaBinaria/angular5/tree/master/3-data/cash-flow) \n\n\n# 1. Formularios\n\n**Los formularios son el punto de entrada** de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En *Angular* han prestado una atención a ellos facilitando su desarrollo, **desde pantallas simples a complejos procesos**.\n\n## 1.1 El Binding\n\nLa clave para entender cómo funciona *Angular* está en el concepto de **enlace entre elementos html de las vistas y propiedades de modelos** de datos, el llamado `binding`.\n\n\n### 1.1.1 La interpolación entre  \\{ \\{ \\} \\}\n\nYa hemos visto [ejemplos de binding](https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/lib/components/nav/title.component.ts) sencillos en este tutorial. \nEn el fichero `new.component.ts` tienes en su vista html la directiva `{ { title | uppecarse } }`. Esas dobles llaves encierran expresiones que se evaluarán en tiempo de ejecución. La llamamos **directiva de interpolación** y es la manera más cómoda y usual de mostrar contenido dinámico en Angular.\n\n```typescript\n@Component({\n  template: `<h2>{{ title | uppercase }}</h2>`\n})\nexport class NewComponent implements OnInit {\n  title = \"Cash Flow\";\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\n>La expresión interna hace referencia a variables que se obtienen de las propiedades de la clase controladora del componente. En este caso `NewComponent` y `title`, con su valor *New Operation* en ejecución.  Este enlace mantiene la vista permanentemente actualizada a través de un potente sistema de detección del cambio. \n\n### 1.1.2 Las tuberías |\n\nSi queremos que la presentación del dato sea distinta a su valor real, podemos usar **funciones de transformación** especiales. Se llaman tuberías o *pipes* y se indican mediante el carácter `|`.\n\nEl *framework* nos provee de casos básicos como `uppercase, lowercase, date, number...`. También dispones de un mecanismo para crear tus propios *pipes*.\n\n>En el caso anterior verás en ejecución el texto *NEW OPERATION*\n\n## 1.2 Doble Binding\n\nLa comunicación del modelo hacia la vista es sólo el principio. En *Angular* también podrás **comunicar la vista hacia el modelo**, permitiéndole al usuario modificar los datos a través de formularios. En el fichero `new.component.ts` tienes un ejemplo; vamos a analizarlo:\n\n```html\n<form class=\"container\">\n  <label for=\"description\">Description</label>\n  <input name=\"description\"\n        #inputDescription\n        [value]=\"operation.description\"\n        (change)=\"operation.description=inputDescription.value\"\n        type=\"text\" />\n  <label for=\"amount\">Amount</label>\n  <input name=\"amount\"\n        [(ngModel)]=\"operation.amount\"\n        type=\"number\"/>\n  <label>Kind of Operation</label>\n  <select name=\"kind\" [(ngModel)]=\"operation.kind\">\n    <option [value]=\"\">Please select a kind</option>\n    <option *ngFor=\"let kind of kindsOfOperations\"\n          [value]=\"kind\">{{kind}}</option>\n  </select>\n  <button (click)=\"saveOperation()\">Save</button>\n</form>\n```\n\n### 1.2.1 Identificadores con #\n\nEn el código anterior apreciaras que junto a elementos del estándar del *html* aparecen signos extraños. Por ejemplo en la primera etiqueta `input` aparece un atributo llamado `#inputDescription`. A estos atributos proporcionados por Angular les llamaremos **directivas**. La directiva `#` genera un indentificador único para el elemento al que se le aplica y permite referirse a él en otros lugares del código.\n\n### 1.2.2 Propiedades entre []\n\nUn viejo conocido como el atributo `value` recibe habitualmente un valor concreto, una constante. Pero, si se encierra entre corchetes se convierte en un **evaluador de expresiones** y puede recibir una variable. En este caso `[value]=\"operation.description\"` asigna el valor de esa expresión del modelo al elemento html.\n\n### 1.2.2 Eventos entre ()\n\nLos eventos del html llevan años entre nosotros. En Angular se expresan de una manera distinta, encerrándolos entre paréntesis. **Los eventos reciben una instrucción a ejecutar** cuando el usuario dispare el detonante. Aquí `(change) = \"operation.description = inputDescription.value\"` se usa para guardar en el modelo el valor actual del elemento *input* ante cada cambio en este. Consiguiendo así el doble binding.\n\n### 1.2.3 Modelos entre [()]\n\nEl patrón anterior podrías replicarlo una y otra vez. Pero en *Angular* te ofrecen un atajo para estos casos; es la directiva `[(ngModel)]`. Esta directiva también es conocida como *banana in a box* porque su sintaxis requiere un `()` dentro de un `[]`. \nPor ejemplo `[(ngModel)]=\"operation.amount\"` enlaza doblemente el modelo `operation.amount` con la el elemento `input` de la vista. \n\n# 2 Las repeticiones\n\nUna situación que nos encontramos una y otra vez es la de las repeticiones. Listas de datos, tablas o grupos de opciones son ejemplos claros. Hay una directiva en *Angular* para esa situación, la `*ngFor=\"let iterador of array\"`. **La directiva `*ngFor` forma parte del grupo de directivas estructurales**, llamadas aís porque modifican la estructura del DOM, en este caso insertando múltiples nodos hijos a un elemento dado.\n\n>Puedes ver un ejemplo del uso la directiva `*ngFor` en el elemento `select`. Se emplea para recorrer un array y generar a partir de sus valores el grupo de potenciales opciones para el usuario. \n\nPero el caso uso *más repetido de las repeticiones* es el de mostrar tablas o listas de datos.\n\n## 2.1 Tablas\n\nLa aplicación del ejemplo tiene un formulario que, aún no te he explicado cómo, guarda el trabajo del usuario en un array. Ese mismo **array se muestra como una tabla** de datos valiéndose de `*ngFor`. Para montar una tabla sólo necesito un código como este:\n\n```html\n<table *ngIf=\"numberOfOperations>0;else emptyList\">\n  <thead>\n    <tr>\n      <th>Description</th>\n      <th>Kind</th>\n      <th>Amount</th>\n      <th>Delete</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let operation of operations\">\n      <td>{{ operation.description }}</td>\n      <td>{{ operation.kind }}</td>\n      <td>{{ operation.amount | number:'7.2-2' }}</td>\n      <td><button (click)=\"deleteOperation(operation)\">Delete</button> </td>\n    </tr>\n  </tbody>\n</table>\n<ng-template #emptyList>\n  <h3>No operations yet.</h3>\n</ng-template>\n```\n\n>Todo lo aquí presente son directivas ya conocidas. La famosa directiva estructural `*ngFor=\"let operation of operations\"`.  Las interpolaciones con tuberías como `operation.amount | number:'7.2-2'`. La subscripción a eventos de `(click)=\"deleteOperation(operation)\"`.\n\n## 2.2 Condicionales\n\nOtra directiva estructural muy utilizada es la `*ngIf`, la cual consigue que un elemento se incluya o se elimine en el *DOM* en función de los datos del modelo. \n\n>En el ejemplo puedes ver que la uso para mostrar la tabla sólo si tiene registrso. En otro aparecerá el mensaje de *No operations yet.* \n\nTodas estas directivas permiten crear interfaces de usuario dinámicas y conducidas por los datos. Es hora de que veas cómo manejar esos datos.\n\n# 3 Modelo y controlador\n\nLos componentes los hemos definido como **bloques de constucción de páginas. Mediante una vista y un controlador** resuelven un problema de interación o presentación de modelos. En los puntos anteriores te presenté la vista. Toca ahora estudiar el modelo y el controlador.\n\n## 3.1 El modelo\n\nSin ir muy lejos en las capacidades que tendría un modelo de datos clásico, vamos al menos a beneficiarnos del ***TypeScript* para definir la estructura de datos**. Esto facilitará la programación mediante el autocompletado del editor y reducirá los errores de tecleo mediante la comprobación estática de tipos.\n\nPara ello necesito una clase sencilla, que bien se podría crear a mano. Pero te recomiendo que sigas familiarizándote con las capacidades de generación de código del *CLI* y uses el siguiente comando:\n\n```shell\nng g class /views/operations/operation\n```\n\nEn el fichero resultado `operation.ts` he metido una definción de clase simple pero que muestra algunas de las capacidades del *TypeScript*.\n\n```typescript\nexport class Operation {\n  public _id: string;\n  public amount: number = 0;\n  public description: string = \"\";\n  public kind: string;\n}\n```\n\nComo te digo, este fichero sólo aporta estructura a los datos. Más adelante te contaré dónde codificar los métodos de manejo de datos.\n\n## 3.2 El controlador\n\nLa parte de **lógica del componente** va en la clase que se usa oara us definción. Como [ya has visto](https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/item.component.ts) podemos usar su constructor para reclamar dependencias y usar los interfaces para responder a eventos de su ciclo de vida. Ahora se trata de crear propiedades y métodos con los que comunicarse con la vista.\n\nPodemos decir que las propiedades públicas de la clase actuarán como *binding* de datos con la vista. Mientras que los métodos públicos serán invocados desde los eventos de la misma vista.\n\nMira el código de la clase `NewComponent`en el fichero `new.component.ts`:\n\n```typescript\nexport class NewComponent implements OnInit {\n  public kindsOfOperations = [\"Income\", \"Expense\"];\n  public numberOfOperations = 0;\n  public operation: Operation = new Operation();\n  public operations: Operation[] = [];\n\n  constructor() {}\n  ngOnInit() {}\n\n  public saveOperation() {\n    const clonedOperation = this.cloneOperation(this.operation);\n    clonedOperation._id = new Date().getTime().toString();\n    this.operations.push(clonedOperation);\n    this.numberOfOperations = this.operations.length;\n    this.operation = new Operation();\n  }\n  public deleteOperation(operation: Operation) {\n    const index = this.operations.indexOf(operation);\n    this.operations.splice(index, 1);\n    this.numberOfOperations = this.operations.length;\n  }\n  cloneOperation(originalOperation: Operation): Operation {\n    const targetOperation = Object.assign({}, originalOperation);\n    return targetOperation;\n  }\n}\n```\n\nComo ves, las propidades `kindsOfOperations, numberOfOperations, operation y operations` se corresponden con las utilizadas en las directivas de enlace en la vista.\n\nLos métodods `saveOperation() y deleteOperation(operation: Operation)` son invocados desde eventos de elementos del html.\n\nJuntos, **la vista y su clase controladora**, resuelven un problema de interacción con el usuario **creando un componente**. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes. \n\n\nYa tienes una aplicación en *Angular* que recoge y muestra datos. Sigue esta serie para añadirle [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/) mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite> ","source":"_posts/ng-3-Formularios-tablas-y-modelos-de-datos-en-Angular.md","raw":"---\ntitle: Formularios, tablas y modelos de datos en Angular\npermalink: formularios-tablas-y-modelos-de-datos-en-angular\ndate: 2017-11-15 10:17:37\ntags:  \n- Angular\n- Angular5\n- Angular2\n- Forms\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-5_3_data.jpg\n---\n![Tutorial Angular5 3-Data](/images/tutorial-angular-5_3_data.png)\n\nLas **aplicaciones Angular son excelentes para el tratamiento de datos** en el navegador. La recogida de información mediante formularios y la presentación de páginas dinámicas fue su razón de ser.\n\nVamos a ver cómo la librería `@angular/forms` enlaza **las vistas, los controladores y los modelos** y cómo se hace la presentación de datos en **listas y tablas**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/). Al finalizar tendrás una aplicación que recoge y presenta datos.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/angular5/3-data](https://github.com/AcademiaBinaria/angular5/tree/master/3-data/cash-flow) \n\n\n# 1. Formularios\n\n**Los formularios son el punto de entrada** de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En *Angular* han prestado una atención a ellos facilitando su desarrollo, **desde pantallas simples a complejos procesos**.\n\n## 1.1 El Binding\n\nLa clave para entender cómo funciona *Angular* está en el concepto de **enlace entre elementos html de las vistas y propiedades de modelos** de datos, el llamado `binding`.\n\n\n### 1.1.1 La interpolación entre  \\{ \\{ \\} \\}\n\nYa hemos visto [ejemplos de binding](https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/lib/components/nav/title.component.ts) sencillos en este tutorial. \nEn el fichero `new.component.ts` tienes en su vista html la directiva `{ { title | uppecarse } }`. Esas dobles llaves encierran expresiones que se evaluarán en tiempo de ejecución. La llamamos **directiva de interpolación** y es la manera más cómoda y usual de mostrar contenido dinámico en Angular.\n\n```typescript\n@Component({\n  template: `<h2>{{ title | uppercase }}</h2>`\n})\nexport class NewComponent implements OnInit {\n  title = \"Cash Flow\";\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\n>La expresión interna hace referencia a variables que se obtienen de las propiedades de la clase controladora del componente. En este caso `NewComponent` y `title`, con su valor *New Operation* en ejecución.  Este enlace mantiene la vista permanentemente actualizada a través de un potente sistema de detección del cambio. \n\n### 1.1.2 Las tuberías |\n\nSi queremos que la presentación del dato sea distinta a su valor real, podemos usar **funciones de transformación** especiales. Se llaman tuberías o *pipes* y se indican mediante el carácter `|`.\n\nEl *framework* nos provee de casos básicos como `uppercase, lowercase, date, number...`. También dispones de un mecanismo para crear tus propios *pipes*.\n\n>En el caso anterior verás en ejecución el texto *NEW OPERATION*\n\n## 1.2 Doble Binding\n\nLa comunicación del modelo hacia la vista es sólo el principio. En *Angular* también podrás **comunicar la vista hacia el modelo**, permitiéndole al usuario modificar los datos a través de formularios. En el fichero `new.component.ts` tienes un ejemplo; vamos a analizarlo:\n\n```html\n<form class=\"container\">\n  <label for=\"description\">Description</label>\n  <input name=\"description\"\n        #inputDescription\n        [value]=\"operation.description\"\n        (change)=\"operation.description=inputDescription.value\"\n        type=\"text\" />\n  <label for=\"amount\">Amount</label>\n  <input name=\"amount\"\n        [(ngModel)]=\"operation.amount\"\n        type=\"number\"/>\n  <label>Kind of Operation</label>\n  <select name=\"kind\" [(ngModel)]=\"operation.kind\">\n    <option [value]=\"\">Please select a kind</option>\n    <option *ngFor=\"let kind of kindsOfOperations\"\n          [value]=\"kind\">{{kind}}</option>\n  </select>\n  <button (click)=\"saveOperation()\">Save</button>\n</form>\n```\n\n### 1.2.1 Identificadores con #\n\nEn el código anterior apreciaras que junto a elementos del estándar del *html* aparecen signos extraños. Por ejemplo en la primera etiqueta `input` aparece un atributo llamado `#inputDescription`. A estos atributos proporcionados por Angular les llamaremos **directivas**. La directiva `#` genera un indentificador único para el elemento al que se le aplica y permite referirse a él en otros lugares del código.\n\n### 1.2.2 Propiedades entre []\n\nUn viejo conocido como el atributo `value` recibe habitualmente un valor concreto, una constante. Pero, si se encierra entre corchetes se convierte en un **evaluador de expresiones** y puede recibir una variable. En este caso `[value]=\"operation.description\"` asigna el valor de esa expresión del modelo al elemento html.\n\n### 1.2.2 Eventos entre ()\n\nLos eventos del html llevan años entre nosotros. En Angular se expresan de una manera distinta, encerrándolos entre paréntesis. **Los eventos reciben una instrucción a ejecutar** cuando el usuario dispare el detonante. Aquí `(change) = \"operation.description = inputDescription.value\"` se usa para guardar en el modelo el valor actual del elemento *input* ante cada cambio en este. Consiguiendo así el doble binding.\n\n### 1.2.3 Modelos entre [()]\n\nEl patrón anterior podrías replicarlo una y otra vez. Pero en *Angular* te ofrecen un atajo para estos casos; es la directiva `[(ngModel)]`. Esta directiva también es conocida como *banana in a box* porque su sintaxis requiere un `()` dentro de un `[]`. \nPor ejemplo `[(ngModel)]=\"operation.amount\"` enlaza doblemente el modelo `operation.amount` con la el elemento `input` de la vista. \n\n# 2 Las repeticiones\n\nUna situación que nos encontramos una y otra vez es la de las repeticiones. Listas de datos, tablas o grupos de opciones son ejemplos claros. Hay una directiva en *Angular* para esa situación, la `*ngFor=\"let iterador of array\"`. **La directiva `*ngFor` forma parte del grupo de directivas estructurales**, llamadas aís porque modifican la estructura del DOM, en este caso insertando múltiples nodos hijos a un elemento dado.\n\n>Puedes ver un ejemplo del uso la directiva `*ngFor` en el elemento `select`. Se emplea para recorrer un array y generar a partir de sus valores el grupo de potenciales opciones para el usuario. \n\nPero el caso uso *más repetido de las repeticiones* es el de mostrar tablas o listas de datos.\n\n## 2.1 Tablas\n\nLa aplicación del ejemplo tiene un formulario que, aún no te he explicado cómo, guarda el trabajo del usuario en un array. Ese mismo **array se muestra como una tabla** de datos valiéndose de `*ngFor`. Para montar una tabla sólo necesito un código como este:\n\n```html\n<table *ngIf=\"numberOfOperations>0;else emptyList\">\n  <thead>\n    <tr>\n      <th>Description</th>\n      <th>Kind</th>\n      <th>Amount</th>\n      <th>Delete</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let operation of operations\">\n      <td>{{ operation.description }}</td>\n      <td>{{ operation.kind }}</td>\n      <td>{{ operation.amount | number:'7.2-2' }}</td>\n      <td><button (click)=\"deleteOperation(operation)\">Delete</button> </td>\n    </tr>\n  </tbody>\n</table>\n<ng-template #emptyList>\n  <h3>No operations yet.</h3>\n</ng-template>\n```\n\n>Todo lo aquí presente son directivas ya conocidas. La famosa directiva estructural `*ngFor=\"let operation of operations\"`.  Las interpolaciones con tuberías como `operation.amount | number:'7.2-2'`. La subscripción a eventos de `(click)=\"deleteOperation(operation)\"`.\n\n## 2.2 Condicionales\n\nOtra directiva estructural muy utilizada es la `*ngIf`, la cual consigue que un elemento se incluya o se elimine en el *DOM* en función de los datos del modelo. \n\n>En el ejemplo puedes ver que la uso para mostrar la tabla sólo si tiene registrso. En otro aparecerá el mensaje de *No operations yet.* \n\nTodas estas directivas permiten crear interfaces de usuario dinámicas y conducidas por los datos. Es hora de que veas cómo manejar esos datos.\n\n# 3 Modelo y controlador\n\nLos componentes los hemos definido como **bloques de constucción de páginas. Mediante una vista y un controlador** resuelven un problema de interación o presentación de modelos. En los puntos anteriores te presenté la vista. Toca ahora estudiar el modelo y el controlador.\n\n## 3.1 El modelo\n\nSin ir muy lejos en las capacidades que tendría un modelo de datos clásico, vamos al menos a beneficiarnos del ***TypeScript* para definir la estructura de datos**. Esto facilitará la programación mediante el autocompletado del editor y reducirá los errores de tecleo mediante la comprobación estática de tipos.\n\nPara ello necesito una clase sencilla, que bien se podría crear a mano. Pero te recomiendo que sigas familiarizándote con las capacidades de generación de código del *CLI* y uses el siguiente comando:\n\n```shell\nng g class /views/operations/operation\n```\n\nEn el fichero resultado `operation.ts` he metido una definción de clase simple pero que muestra algunas de las capacidades del *TypeScript*.\n\n```typescript\nexport class Operation {\n  public _id: string;\n  public amount: number = 0;\n  public description: string = \"\";\n  public kind: string;\n}\n```\n\nComo te digo, este fichero sólo aporta estructura a los datos. Más adelante te contaré dónde codificar los métodos de manejo de datos.\n\n## 3.2 El controlador\n\nLa parte de **lógica del componente** va en la clase que se usa oara us definción. Como [ya has visto](https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/item.component.ts) podemos usar su constructor para reclamar dependencias y usar los interfaces para responder a eventos de su ciclo de vida. Ahora se trata de crear propiedades y métodos con los que comunicarse con la vista.\n\nPodemos decir que las propiedades públicas de la clase actuarán como *binding* de datos con la vista. Mientras que los métodos públicos serán invocados desde los eventos de la misma vista.\n\nMira el código de la clase `NewComponent`en el fichero `new.component.ts`:\n\n```typescript\nexport class NewComponent implements OnInit {\n  public kindsOfOperations = [\"Income\", \"Expense\"];\n  public numberOfOperations = 0;\n  public operation: Operation = new Operation();\n  public operations: Operation[] = [];\n\n  constructor() {}\n  ngOnInit() {}\n\n  public saveOperation() {\n    const clonedOperation = this.cloneOperation(this.operation);\n    clonedOperation._id = new Date().getTime().toString();\n    this.operations.push(clonedOperation);\n    this.numberOfOperations = this.operations.length;\n    this.operation = new Operation();\n  }\n  public deleteOperation(operation: Operation) {\n    const index = this.operations.indexOf(operation);\n    this.operations.splice(index, 1);\n    this.numberOfOperations = this.operations.length;\n  }\n  cloneOperation(originalOperation: Operation): Operation {\n    const targetOperation = Object.assign({}, originalOperation);\n    return targetOperation;\n  }\n}\n```\n\nComo ves, las propidades `kindsOfOperations, numberOfOperations, operation y operations` se corresponden con las utilizadas en las directivas de enlace en la vista.\n\nLos métodods `saveOperation() y deleteOperation(operation: Operation)` son invocados desde eventos de elementos del html.\n\nJuntos, **la vista y su clase controladora**, resuelven un problema de interacción con el usuario **creando un componente**. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes. \n\n\nYa tienes una aplicación en *Angular* que recoge y muestra datos. Sigue esta serie para añadirle [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/) mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite> ","slug":"formularios-tablas-y-modelos-de-datos-en-angular","published":1,"updated":"2017-12-20T09:17:19.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvi7001niwd3srhzdu8j","content":"<p><img src=\"/images/tutorial-angular-5_3_data.png\" alt=\"Tutorial Angular5 3-Data\"></p><p>Las <strong>aplicaciones Angular son excelentes para el tratamiento de datos</strong> en el navegador. La recogida de información mediante formularios y la presentación de páginas dinámicas fue su razón de ser.</p><p>Vamos a ver cómo la librería <code>@angular/forms</code> enlaza <strong>las vistas, los controladores y los modelos</strong> y cómo se hace la presentación de datos en <strong>listas y tablas</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a>. Al finalizar tendrás una aplicación que recoge y presenta datos.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/3-data/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/3-data</a></p></blockquote><h1 id=\"1-Formularios\"><a href=\"#1-Formularios\" class=\"headerlink\" title=\"1. Formularios\"></a>1. Formularios</h1><p><strong>Los formularios son el punto de entrada</strong> de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En <em>Angular</em> han prestado una atención a ellos facilitando su desarrollo, <strong>desde pantallas simples a complejos procesos</strong>.</p><h2 id=\"1-1-El-Binding\"><a href=\"#1-1-El-Binding\" class=\"headerlink\" title=\"1.1 El Binding\"></a>1.1 El Binding</h2><p>La clave para entender cómo funciona <em>Angular</em> está en el concepto de <strong>enlace entre elementos html de las vistas y propiedades de modelos</strong> de datos, el llamado <code>binding</code>.</p><h3 id=\"1-1-1-La-interpolacion-entre\"><a href=\"#1-1-1-La-interpolacion-entre\" class=\"headerlink\" title=\"1.1.1 La interpolación entre  { { } }\"></a>1.1.1 La interpolación entre { { } }</h3><p>Ya hemos visto <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/lib/components/nav/title.component.ts\" target=\"_blank\" rel=\"external\">ejemplos de binding</a> sencillos en este tutorial.<br>En el fichero <code>new.component.ts</code> tienes en su vista html la directiva <code>{ { title | uppecarse } }</code>. Esas dobles llaves encierran expresiones que se evaluarán en tiempo de ejecución. La llamamos <strong>directiva de interpolación</strong> y es la manera más cómoda y usual de mostrar contenido dinámico en Angular.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  template: <span class=\"string\">`&lt;h2&gt;&#123;&#123; title | uppercase &#125;&#125;&lt;/h2&gt;`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NewComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  title = <span class=\"string\">\"Cash Flow\"</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\">  ngOnInit() &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>La expresión interna hace referencia a variables que se obtienen de las propiedades de la clase controladora del componente. En este caso <code>NewComponent</code> y <code>title</code>, con su valor <em>New Operation</em> en ejecución. Este enlace mantiene la vista permanentemente actualizada a través de un potente sistema de detección del cambio.</p></blockquote><h3 id=\"1-1-2-Las-tuberias\"><a href=\"#1-1-2-Las-tuberias\" class=\"headerlink\" title=\"1.1.2 Las tuberías |\"></a>1.1.2 Las tuberías |</h3><p>Si queremos que la presentación del dato sea distinta a su valor real, podemos usar <strong>funciones de transformación</strong> especiales. Se llaman tuberías o <em>pipes</em> y se indican mediante el carácter <code>|</code>.</p><p>El <em>framework</em> nos provee de casos básicos como <code>uppercase, lowercase, date, number...</code>. También dispones de un mecanismo para crear tus propios <em>pipes</em>.</p><blockquote><p>En el caso anterior verás en ejecución el texto <em>NEW OPERATION</em></p></blockquote><h2 id=\"1-2-Doble-Binding\"><a href=\"#1-2-Doble-Binding\" class=\"headerlink\" title=\"1.2 Doble Binding\"></a>1.2 Doble Binding</h2><p>La comunicación del modelo hacia la vista es sólo el principio. En <em>Angular</em> también podrás <strong>comunicar la vista hacia el modelo</strong>, permitiéndole al usuario modificar los datos a través de formularios. En el fichero <code>new.component.ts</code> tienes un ejemplo; vamos a analizarlo:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"description\"</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">inputDescription</span></span></div><div class=\"line\"><span class=\"tag\">        [<span class=\"attr\">value</span>]=<span class=\"string\">\"operation.description\"</span></span></div><div class=\"line\"><span class=\"tag\">        (<span class=\"attr\">change</span>)=<span class=\"string\">\"operation.description=inputDescription.value\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"amount\"</span>&gt;</span>Amount<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"amount\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"operation.amount\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Kind of Operation<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"kind\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"operation.kind\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"\"</span>&gt;</span>Please select a kind<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let kind of kindsOfOperations\"</span></span></div><div class=\"line\"><span class=\"tag\">          [<span class=\"attr\">value</span>]=<span class=\"string\">\"kind\"</span>&gt;</span>&#123;&#123;kind&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"saveOperation()\"</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><h3 id=\"1-2-1-Identificadores-con\"><a href=\"#1-2-1-Identificadores-con\" class=\"headerlink\" title=\"1.2.1 Identificadores con\"></a>1.2.1 Identificadores con</h3><p>En el código anterior apreciaras que junto a elementos del estándar del <em>html</em> aparecen signos extraños. Por ejemplo en la primera etiqueta <code>input</code> aparece un atributo llamado <code>#inputDescription</code>. A estos atributos proporcionados por Angular les llamaremos <strong>directivas</strong>. La directiva <code>#</code> genera un indentificador único para el elemento al que se le aplica y permite referirse a él en otros lugares del código.</p><h3 id=\"1-2-2-Propiedades-entre\"><a href=\"#1-2-2-Propiedades-entre\" class=\"headerlink\" title=\"1.2.2 Propiedades entre []\"></a>1.2.2 Propiedades entre []</h3><p>Un viejo conocido como el atributo <code>value</code> recibe habitualmente un valor concreto, una constante. Pero, si se encierra entre corchetes se convierte en un <strong>evaluador de expresiones</strong> y puede recibir una variable. En este caso <code>[value]=&quot;operation.description&quot;</code> asigna el valor de esa expresión del modelo al elemento html.</p><h3 id=\"1-2-2-Eventos-entre\"><a href=\"#1-2-2-Eventos-entre\" class=\"headerlink\" title=\"1.2.2 Eventos entre ()\"></a>1.2.2 Eventos entre ()</h3><p>Los eventos del html llevan años entre nosotros. En Angular se expresan de una manera distinta, encerrándolos entre paréntesis. <strong>Los eventos reciben una instrucción a ejecutar</strong> cuando el usuario dispare el detonante. Aquí <code>(change) = &quot;operation.description = inputDescription.value&quot;</code> se usa para guardar en el modelo el valor actual del elemento <em>input</em> ante cada cambio en este. Consiguiendo así el doble binding.</p><h3 id=\"1-2-3-Modelos-entre\"><a href=\"#1-2-3-Modelos-entre\" class=\"headerlink\" title=\"1.2.3 Modelos entre [()]\"></a>1.2.3 Modelos entre [()]</h3><p>El patrón anterior podrías replicarlo una y otra vez. Pero en <em>Angular</em> te ofrecen un atajo para estos casos; es la directiva <code>[(ngModel)]</code>. Esta directiva también es conocida como <em>banana in a box</em> porque su sintaxis requiere un <code>()</code> dentro de un <code>[]</code>.<br>Por ejemplo <code>[(ngModel)]=&quot;operation.amount&quot;</code> enlaza doblemente el modelo <code>operation.amount</code> con la el elemento <code>input</code> de la vista.</p><h1 id=\"2-Las-repeticiones\"><a href=\"#2-Las-repeticiones\" class=\"headerlink\" title=\"2 Las repeticiones\"></a>2 Las repeticiones</h1><p>Una situación que nos encontramos una y otra vez es la de las repeticiones. Listas de datos, tablas o grupos de opciones son ejemplos claros. Hay una directiva en <em>Angular</em> para esa situación, la <code>*ngFor=&quot;let iterador of array&quot;</code>. <strong>La directiva <code>*ngFor</code> forma parte del grupo de directivas estructurales</strong>, llamadas aís porque modifican la estructura del DOM, en este caso insertando múltiples nodos hijos a un elemento dado.</p><blockquote><p>Puedes ver un ejemplo del uso la directiva <code>*ngFor</code> en el elemento <code>select</code>. Se emplea para recorrer un array y generar a partir de sus valores el grupo de potenciales opciones para el usuario.</p></blockquote><p>Pero el caso uso <em>más repetido de las repeticiones</em> es el de mostrar tablas o listas de datos.</p><h2 id=\"2-1-Tablas\"><a href=\"#2-1-Tablas\" class=\"headerlink\" title=\"2.1 Tablas\"></a>2.1 Tablas</h2><p>La aplicación del ejemplo tiene un formulario que, aún no te he explicado cómo, guarda el trabajo del usuario en un array. Ese mismo <strong>array se muestra como una tabla</strong> de datos valiéndose de <code>*ngFor</code>. Para montar una tabla sólo necesito un código como este:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"numberOfOperations&gt;0;else emptyList\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Kind<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Amount<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let operation of operations\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.kind &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.amount | number:'7.2-2' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteOperation(operation)\"</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">emptyList</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>No operations yet.<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>Todo lo aquí presente son directivas ya conocidas. La famosa directiva estructural <code>*ngFor=&quot;let operation of operations&quot;</code>. Las interpolaciones con tuberías como <code>operation.amount | number:&#39;7.2-2&#39;</code>. La subscripción a eventos de <code>(click)=&quot;deleteOperation(operation)&quot;</code>.</p></blockquote><h2 id=\"2-2-Condicionales\"><a href=\"#2-2-Condicionales\" class=\"headerlink\" title=\"2.2 Condicionales\"></a>2.2 Condicionales</h2><p>Otra directiva estructural muy utilizada es la <code>*ngIf</code>, la cual consigue que un elemento se incluya o se elimine en el <em>DOM</em> en función de los datos del modelo.</p><blockquote><p>En el ejemplo puedes ver que la uso para mostrar la tabla sólo si tiene registrso. En otro aparecerá el mensaje de <em>No operations yet.</em></p></blockquote><p>Todas estas directivas permiten crear interfaces de usuario dinámicas y conducidas por los datos. Es hora de que veas cómo manejar esos datos.</p><h1 id=\"3-Modelo-y-controlador\"><a href=\"#3-Modelo-y-controlador\" class=\"headerlink\" title=\"3 Modelo y controlador\"></a>3 Modelo y controlador</h1><p>Los componentes los hemos definido como <strong>bloques de constucción de páginas. Mediante una vista y un controlador</strong> resuelven un problema de interación o presentación de modelos. En los puntos anteriores te presenté la vista. Toca ahora estudiar el modelo y el controlador.</p><h2 id=\"3-1-El-modelo\"><a href=\"#3-1-El-modelo\" class=\"headerlink\" title=\"3.1 El modelo\"></a>3.1 El modelo</h2><p>Sin ir muy lejos en las capacidades que tendría un modelo de datos clásico, vamos al menos a beneficiarnos del <strong><em>TypeScript</em> para definir la estructura de datos</strong>. Esto facilitará la programación mediante el autocompletado del editor y reducirá los errores de tecleo mediante la comprobación estática de tipos.</p><p>Para ello necesito una clase sencilla, que bien se podría crear a mano. Pero te recomiendo que sigas familiarizándote con las capacidades de generación de código del <em>CLI</em> y uses el siguiente comando:</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g class /views/operations/operation</div></pre></td></tr></table></figure><p>En el fichero resultado <code>operation.ts</code> he metido una definción de clase simple pero que muestra algunas de las capacidades del <em>TypeScript</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Operation &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> _id: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> amount: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> description: <span class=\"built_in\">string</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> kind: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Como te digo, este fichero sólo aporta estructura a los datos. Más adelante te contaré dónde codificar los métodos de manejo de datos.</p><h2 id=\"3-2-El-controlador\"><a href=\"#3-2-El-controlador\" class=\"headerlink\" title=\"3.2 El controlador\"></a>3.2 El controlador</h2><p>La parte de <strong>lógica del componente</strong> va en la clase que se usa oara us definción. Como <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/item.component.ts\" target=\"_blank\" rel=\"external\">ya has visto</a> podemos usar su constructor para reclamar dependencias y usar los interfaces para responder a eventos de su ciclo de vida. Ahora se trata de crear propiedades y métodos con los que comunicarse con la vista.</p><p>Podemos decir que las propiedades públicas de la clase actuarán como <em>binding</em> de datos con la vista. Mientras que los métodos públicos serán invocados desde los eventos de la misma vista.</p><p>Mira el código de la clase <code>NewComponent</code>en el fichero <code>new.component.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NewComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> kindsOfOperations = [<span class=\"string\">\"Income\"</span>, <span class=\"string\">\"Expense\"</span>];</div><div class=\"line\">  <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> operation: Operation = <span class=\"keyword\">new</span> Operation();</div><div class=\"line\">  <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\">  ngOnInit() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> saveOperation() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> clonedOperation = <span class=\"keyword\">this</span>.cloneOperation(<span class=\"keyword\">this</span>.operation);</div><div class=\"line\">    clonedOperation._id = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime().toString();</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.push(clonedOperation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.numberOfOperations = <span class=\"keyword\">this</span>.operations.length;</div><div class=\"line\">    <span class=\"keyword\">this</span>.operation = <span class=\"keyword\">new</span> Operation();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.operations.indexOf(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.numberOfOperations = <span class=\"keyword\">this</span>.operations.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">  cloneOperation(originalOperation: Operation): Operation &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> targetOperation = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, originalOperation);</div><div class=\"line\">    <span class=\"keyword\">return</span> targetOperation;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Como ves, las propidades <code>kindsOfOperations, numberOfOperations, operation y operations</code> se corresponden con las utilizadas en las directivas de enlace en la vista.</p><p>Los métodods <code>saveOperation() y deleteOperation(operation: Operation)</code> son invocados desde eventos de elementos del html.</p><p>Juntos, <strong>la vista y su clase controladora</strong>, resuelven un problema de interacción con el usuario <strong>creando un componente</strong>. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.</p><p>Ya tienes una aplicación en <em>Angular</em> que recoge y muestra datos. Sigue esta serie para añadirle <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a> mientras aprendes a programar con Angular5.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-5_3_data.png\" alt=\"Tutorial Angular5 3-Data\"></p><p>Las <strong>aplicaciones Angular son excelentes para el tratamiento de datos</strong> en el navegador. La recogida de información mediante formularios y la presentación de páginas dinámicas fue su razón de ser.</p><p>Vamos a ver cómo la librería <code>@angular/forms</code> enlaza <strong>las vistas, los controladores y los modelos</strong> y cómo se hace la presentación de datos en <strong>listas y tablas</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a>. Al finalizar tendrás una aplicación que recoge y presenta datos.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/3-data/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/3-data</a></p></blockquote><h1 id=\"1-Formularios\"><a href=\"#1-Formularios\" class=\"headerlink\" title=\"1. Formularios\"></a>1. Formularios</h1><p><strong>Los formularios son el punto de entrada</strong> de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En <em>Angular</em> han prestado una atención a ellos facilitando su desarrollo, <strong>desde pantallas simples a complejos procesos</strong>.</p><h2 id=\"1-1-El-Binding\"><a href=\"#1-1-El-Binding\" class=\"headerlink\" title=\"1.1 El Binding\"></a>1.1 El Binding</h2><p>La clave para entender cómo funciona <em>Angular</em> está en el concepto de <strong>enlace entre elementos html de las vistas y propiedades de modelos</strong> de datos, el llamado <code>binding</code>.</p><h3 id=\"1-1-1-La-interpolacion-entre\"><a href=\"#1-1-1-La-interpolacion-entre\" class=\"headerlink\" title=\"1.1.1 La interpolación entre  { { } }\"></a>1.1.1 La interpolación entre { { } }</h3><p>Ya hemos visto <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/lib/components/nav/title.component.ts\" target=\"_blank\" rel=\"external\">ejemplos de binding</a> sencillos en este tutorial.<br>En el fichero <code>new.component.ts</code> tienes en su vista html la directiva <code>{ { title | uppecarse } }</code>. Esas dobles llaves encierran expresiones que se evaluarán en tiempo de ejecución. La llamamos <strong>directiva de interpolación</strong> y es la manera más cómoda y usual de mostrar contenido dinámico en Angular.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  template: <span class=\"string\">`&lt;h2&gt;&#123;&#123; title | uppercase &#125;&#125;&lt;/h2&gt;`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NewComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  title = <span class=\"string\">\"Cash Flow\"</span>;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\">  ngOnInit() &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>La expresión interna hace referencia a variables que se obtienen de las propiedades de la clase controladora del componente. En este caso <code>NewComponent</code> y <code>title</code>, con su valor <em>New Operation</em> en ejecución. Este enlace mantiene la vista permanentemente actualizada a través de un potente sistema de detección del cambio.</p></blockquote><h3 id=\"1-1-2-Las-tuberias\"><a href=\"#1-1-2-Las-tuberias\" class=\"headerlink\" title=\"1.1.2 Las tuberías |\"></a>1.1.2 Las tuberías |</h3><p>Si queremos que la presentación del dato sea distinta a su valor real, podemos usar <strong>funciones de transformación</strong> especiales. Se llaman tuberías o <em>pipes</em> y se indican mediante el carácter <code>|</code>.</p><p>El <em>framework</em> nos provee de casos básicos como <code>uppercase, lowercase, date, number...</code>. También dispones de un mecanismo para crear tus propios <em>pipes</em>.</p><blockquote><p>En el caso anterior verás en ejecución el texto <em>NEW OPERATION</em></p></blockquote><h2 id=\"1-2-Doble-Binding\"><a href=\"#1-2-Doble-Binding\" class=\"headerlink\" title=\"1.2 Doble Binding\"></a>1.2 Doble Binding</h2><p>La comunicación del modelo hacia la vista es sólo el principio. En <em>Angular</em> también podrás <strong>comunicar la vista hacia el modelo</strong>, permitiéndole al usuario modificar los datos a través de formularios. En el fichero <code>new.component.ts</code> tienes un ejemplo; vamos a analizarlo:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"description\"</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span></span></div><div class=\"line\"><span class=\"tag\">        #<span class=\"attr\">inputDescription</span></span></div><div class=\"line\"><span class=\"tag\">        [<span class=\"attr\">value</span>]=<span class=\"string\">\"operation.description\"</span></span></div><div class=\"line\"><span class=\"tag\">        (<span class=\"attr\">change</span>)=<span class=\"string\">\"operation.description=inputDescription.value\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"amount\"</span>&gt;</span>Amount<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"amount\"</span></span></div><div class=\"line\"><span class=\"tag\">        [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"operation.amount\"</span></span></div><div class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Kind of Operation<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"kind\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"operation.kind\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"\"</span>&gt;</span>Please select a kind<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let kind of kindsOfOperations\"</span></span></div><div class=\"line\"><span class=\"tag\">          [<span class=\"attr\">value</span>]=<span class=\"string\">\"kind\"</span>&gt;</span>&#123;&#123;kind&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"saveOperation()\"</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><h3 id=\"1-2-1-Identificadores-con\"><a href=\"#1-2-1-Identificadores-con\" class=\"headerlink\" title=\"1.2.1 Identificadores con\"></a>1.2.1 Identificadores con</h3><p>En el código anterior apreciaras que junto a elementos del estándar del <em>html</em> aparecen signos extraños. Por ejemplo en la primera etiqueta <code>input</code> aparece un atributo llamado <code>#inputDescription</code>. A estos atributos proporcionados por Angular les llamaremos <strong>directivas</strong>. La directiva <code>#</code> genera un indentificador único para el elemento al que se le aplica y permite referirse a él en otros lugares del código.</p><h3 id=\"1-2-2-Propiedades-entre\"><a href=\"#1-2-2-Propiedades-entre\" class=\"headerlink\" title=\"1.2.2 Propiedades entre []\"></a>1.2.2 Propiedades entre []</h3><p>Un viejo conocido como el atributo <code>value</code> recibe habitualmente un valor concreto, una constante. Pero, si se encierra entre corchetes se convierte en un <strong>evaluador de expresiones</strong> y puede recibir una variable. En este caso <code>[value]=&quot;operation.description&quot;</code> asigna el valor de esa expresión del modelo al elemento html.</p><h3 id=\"1-2-2-Eventos-entre\"><a href=\"#1-2-2-Eventos-entre\" class=\"headerlink\" title=\"1.2.2 Eventos entre ()\"></a>1.2.2 Eventos entre ()</h3><p>Los eventos del html llevan años entre nosotros. En Angular se expresan de una manera distinta, encerrándolos entre paréntesis. <strong>Los eventos reciben una instrucción a ejecutar</strong> cuando el usuario dispare el detonante. Aquí <code>(change) = &quot;operation.description = inputDescription.value&quot;</code> se usa para guardar en el modelo el valor actual del elemento <em>input</em> ante cada cambio en este. Consiguiendo así el doble binding.</p><h3 id=\"1-2-3-Modelos-entre\"><a href=\"#1-2-3-Modelos-entre\" class=\"headerlink\" title=\"1.2.3 Modelos entre [()]\"></a>1.2.3 Modelos entre [()]</h3><p>El patrón anterior podrías replicarlo una y otra vez. Pero en <em>Angular</em> te ofrecen un atajo para estos casos; es la directiva <code>[(ngModel)]</code>. Esta directiva también es conocida como <em>banana in a box</em> porque su sintaxis requiere un <code>()</code> dentro de un <code>[]</code>.<br>Por ejemplo <code>[(ngModel)]=&quot;operation.amount&quot;</code> enlaza doblemente el modelo <code>operation.amount</code> con la el elemento <code>input</code> de la vista.</p><h1 id=\"2-Las-repeticiones\"><a href=\"#2-Las-repeticiones\" class=\"headerlink\" title=\"2 Las repeticiones\"></a>2 Las repeticiones</h1><p>Una situación que nos encontramos una y otra vez es la de las repeticiones. Listas de datos, tablas o grupos de opciones son ejemplos claros. Hay una directiva en <em>Angular</em> para esa situación, la <code>*ngFor=&quot;let iterador of array&quot;</code>. <strong>La directiva <code>*ngFor</code> forma parte del grupo de directivas estructurales</strong>, llamadas aís porque modifican la estructura del DOM, en este caso insertando múltiples nodos hijos a un elemento dado.</p><blockquote><p>Puedes ver un ejemplo del uso la directiva <code>*ngFor</code> en el elemento <code>select</code>. Se emplea para recorrer un array y generar a partir de sus valores el grupo de potenciales opciones para el usuario.</p></blockquote><p>Pero el caso uso <em>más repetido de las repeticiones</em> es el de mostrar tablas o listas de datos.</p><h2 id=\"2-1-Tablas\"><a href=\"#2-1-Tablas\" class=\"headerlink\" title=\"2.1 Tablas\"></a>2.1 Tablas</h2><p>La aplicación del ejemplo tiene un formulario que, aún no te he explicado cómo, guarda el trabajo del usuario en un array. Ese mismo <strong>array se muestra como una tabla</strong> de datos valiéndose de <code>*ngFor</code>. Para montar una tabla sólo necesito un código como este:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"numberOfOperations&gt;0;else emptyList\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Kind<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Amount<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let operation of operations\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.kind &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.amount | number:'7.2-2' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteOperation(operation)\"</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">emptyList</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>No operations yet.<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>Todo lo aquí presente son directivas ya conocidas. La famosa directiva estructural <code>*ngFor=&quot;let operation of operations&quot;</code>. Las interpolaciones con tuberías como <code>operation.amount | number:&#39;7.2-2&#39;</code>. La subscripción a eventos de <code>(click)=&quot;deleteOperation(operation)&quot;</code>.</p></blockquote><h2 id=\"2-2-Condicionales\"><a href=\"#2-2-Condicionales\" class=\"headerlink\" title=\"2.2 Condicionales\"></a>2.2 Condicionales</h2><p>Otra directiva estructural muy utilizada es la <code>*ngIf</code>, la cual consigue que un elemento se incluya o se elimine en el <em>DOM</em> en función de los datos del modelo.</p><blockquote><p>En el ejemplo puedes ver que la uso para mostrar la tabla sólo si tiene registrso. En otro aparecerá el mensaje de <em>No operations yet.</em></p></blockquote><p>Todas estas directivas permiten crear interfaces de usuario dinámicas y conducidas por los datos. Es hora de que veas cómo manejar esos datos.</p><h1 id=\"3-Modelo-y-controlador\"><a href=\"#3-Modelo-y-controlador\" class=\"headerlink\" title=\"3 Modelo y controlador\"></a>3 Modelo y controlador</h1><p>Los componentes los hemos definido como <strong>bloques de constucción de páginas. Mediante una vista y un controlador</strong> resuelven un problema de interación o presentación de modelos. En los puntos anteriores te presenté la vista. Toca ahora estudiar el modelo y el controlador.</p><h2 id=\"3-1-El-modelo\"><a href=\"#3-1-El-modelo\" class=\"headerlink\" title=\"3.1 El modelo\"></a>3.1 El modelo</h2><p>Sin ir muy lejos en las capacidades que tendría un modelo de datos clásico, vamos al menos a beneficiarnos del <strong><em>TypeScript</em> para definir la estructura de datos</strong>. Esto facilitará la programación mediante el autocompletado del editor y reducirá los errores de tecleo mediante la comprobación estática de tipos.</p><p>Para ello necesito una clase sencilla, que bien se podría crear a mano. Pero te recomiendo que sigas familiarizándote con las capacidades de generación de código del <em>CLI</em> y uses el siguiente comando:</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g class /views/operations/operation</div></pre></td></tr></table></figure><p>En el fichero resultado <code>operation.ts</code> he metido una definción de clase simple pero que muestra algunas de las capacidades del <em>TypeScript</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Operation &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> _id: <span class=\"built_in\">string</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> amount: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> description: <span class=\"built_in\">string</span> = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> kind: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Como te digo, este fichero sólo aporta estructura a los datos. Más adelante te contaré dónde codificar los métodos de manejo de datos.</p><h2 id=\"3-2-El-controlador\"><a href=\"#3-2-El-controlador\" class=\"headerlink\" title=\"3.2 El controlador\"></a>3.2 El controlador</h2><p>La parte de <strong>lógica del componente</strong> va en la clase que se usa oara us definción. Como <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/item.component.ts\" target=\"_blank\" rel=\"external\">ya has visto</a> podemos usar su constructor para reclamar dependencias y usar los interfaces para responder a eventos de su ciclo de vida. Ahora se trata de crear propiedades y métodos con los que comunicarse con la vista.</p><p>Podemos decir que las propiedades públicas de la clase actuarán como <em>binding</em> de datos con la vista. Mientras que los métodos públicos serán invocados desde los eventos de la misma vista.</p><p>Mira el código de la clase <code>NewComponent</code>en el fichero <code>new.component.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NewComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> kindsOfOperations = [<span class=\"string\">\"Income\"</span>, <span class=\"string\">\"Expense\"</span>];</div><div class=\"line\">  <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> operation: Operation = <span class=\"keyword\">new</span> Operation();</div><div class=\"line\">  <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\">  ngOnInit() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> saveOperation() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> clonedOperation = <span class=\"keyword\">this</span>.cloneOperation(<span class=\"keyword\">this</span>.operation);</div><div class=\"line\">    clonedOperation._id = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime().toString();</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.push(clonedOperation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.numberOfOperations = <span class=\"keyword\">this</span>.operations.length;</div><div class=\"line\">    <span class=\"keyword\">this</span>.operation = <span class=\"keyword\">new</span> Operation();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.operations.indexOf(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.numberOfOperations = <span class=\"keyword\">this</span>.operations.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">  cloneOperation(originalOperation: Operation): Operation &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> targetOperation = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, originalOperation);</div><div class=\"line\">    <span class=\"keyword\">return</span> targetOperation;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Como ves, las propidades <code>kindsOfOperations, numberOfOperations, operation y operations</code> se corresponden con las utilizadas en las directivas de enlace en la vista.</p><p>Los métodods <code>saveOperation() y deleteOperation(operation: Operation)</code> son invocados desde eventos de elementos del html.</p><p>Juntos, <strong>la vista y su clase controladora</strong>, resuelven un problema de interacción con el usuario <strong>creando un componente</strong>. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.</p><p>Ya tienes una aplicación en <em>Angular</em> que recoge y muestra datos. Sigue esta serie para añadirle <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a> mientras aprendes a programar con Angular5.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Servicios inyectables en Angular","date":"2017-11-23T09:44:58.000Z","thumbnail":"/css/images/angular-5_5_inject.png","_content":"\n![Tutorial Angular5 5-Inject](/images/tutorial-angular-5_5_inject.png)\n\nLa presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. **La lógica y los datos tienen su lugar en servicios compartidos**.\n\nPara que los componentes consuman los servicios de forma controlada tenemos _inyectables_ en la librería `@angular/core` con los que realizar **la inyección de dependencias**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/). Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular5/5-inject](https://github.com/AcademiaBinaria/angular5/tree/master/5-inject/cash-flow)\n\n# 1. Servicios\n\nComo casi todo en Angular, **los servicios son clases TypeScript**. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero, Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.\n\nEste sistema se base en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona **[la Dependency Inyection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias) en Angular**.\n\n## 1.1 Inyectables\n\nLa particularidad de las clases de servicios está en su decorador: `@Injectable()`. Esta función viene en el `@angular/core` e **indica que esta clase puede ser inyectada** dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios:\n\n```shell\nng g s views/operations/operations\n```\n\nEl resultado es el fichero `operations.service.ts` que he rellenado con un contenido como este:\n\n```typescript\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class OperationsService {\n  private operations: Operation[] = [];\n\n  constructor() {}\n\n  public getNumberOfOperations(): number {\n    return this.operations.length;\n  }\n  public getOperationsList(): Operation[] {\n    return this.operations;\n  }\n  public getOperationById(id: string): Operation {\n    return this.operations.find(o => o._id === id);\n  }\n  public saveOperation(operation: Operation) {\n    operation._id = new Date().getTime().toString();\n    this.operations.push(operation);\n  }\n  public deleteOperation(operation: Operation) {\n    const index = this.operations.indexOf(operation);\n    this.operations.splice(index, 1);\n  }\n}\n```\n\nAhora tienes centralizado en este servicio toda la lógica de datos. Los demás componentes la podrán utilizar e incluso podrán compartir los datos en memoria, como el *array* de operaciones.\n\n## 1.2 Providers\n\nDeclarar y decorar la clase no es suficiente. Necesitas **registrarla como un proveedor en algún módulo**. Por ahora hazlo en el cercano módulo de Operaciones usando el array `providers:[]`.\n\n```typescript\n@NgModule({\n  imports: [CommonModule, FormsModule, OperationsRoutingModule],\n  declarations: [ OperationsComponent, NewComponent, ListComponent, ItemComponent],\n  providers: [OperationsService]\n})\nexport class OperationsModule {}\n```\n\nA partir de este momento cualquier otro servicio o componente de este módulo que lo reclame **será proveído con una misma instancia** de este servicio. Se crea un [*singleton*](https://es.wikipedia.org/wiki/Singleton) por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Algunos servicios de uso común se proveen en el módulo raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.\n\n# 2. Dependencias\n\nAl consumo de los servicios inyectables se le conoce como dependencia. Cada componente o servicio puede **declarar en su constructor sus dependencias** hacia servicios inyectables.\n\nPor ejemplo en el componente `OperationsComponent` teníamos incrustada toda la lógica y mantenimiento de los datos. Debe quedarse solamente con sus responsabilidades de presentación y delegar en el nuevo servicio todo lo demás.\n\n```typescript\nexport class OperationsComponent implements OnInit {\n  public numberOfOperations = 0;\n  public operations: Operation[] = [];\n\n  constructor(private operationsService: OperationsService) {}\n\n  ngOnInit() {\n    this.refreshData();\n  }\n  public saveOperation(operation: Operation) {\n    this.operationsService.saveOperation(operation);\n    this.refreshData();\n  }\n  public deleteOperation(operation: Operation) {\n    this.operationsService.deleteOperation(operation);\n    this.refreshData();\n  }\n  private refreshData() {\n    this.numberOfOperations = this.operationsService.getNumberOfOperations();\n    this.operations = this.operationsService.getOperationsList();\n  }\n}\n```\n\nComo ves, **el constructor no tiene otra función que la de recibir las dependencias**. Una vez construida la instancia se puede acceder a ellas a través de `this.operationsService`. Ahora este componente ya no sabe nada sobre dónde se almacenan o cómo se recuperan los datos.\n\n## 2.1 Singleton\n\nLo mismo que le ocurre al `OperationsComponent` le puede pasar a cualquier otro componente del módulo. Como por ejemplo el `ItemComponent`. El cual **reclama la misma dependencia y recibe la misma instancia**. Esto es así porque cada módulo gestiona las dependencias en modo *Singleton*, y entrega a todos los componentes la misma instancia del servicio.\n\n```typescript\nexport class ItemComponent implements OnInit {\n  public operation: Operation;\n\n  constructor(\n    private route: ActivatedRoute,\n    private operationsService: OperationsService\n  ) {}\n\n  ngOnInit() {\n    const id = this.route.snapshot.params[\"id\"];\n    this.operation = this.operationsService.getOperationById(id);\n  }\n}\n```\n\n> Ojo, si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.\n\n## 2.2 Comunicación via url\n\nPara finalizar el ejercicio te muestro cómo desde el `ListComponent` puedes crear **enlaces que envían parámetros a otras páginas**. Con esa mínima información la página destino puede usar el valor del parámetro para consultar datos en el servicio.\n\n```html\n<tbody>\n    <tr *ngFor=\"let operation of operations\">\n      <td><a [routerLink]=\"[operation._id]\">{{ operation._id }}</a></td>  \n      <td>{{ operation.description }}</td>\n      <td>{{ operation.kind }}</td>\n      <td>{{ operation.amount | number:'7.2-2' }}</td>\n      <td><button (click)=\"deleteOperation(operation)\">Delete</button> </td>\n    </tr>\n  </tbody>\n```\n\nEste caso de uso mantiene los datos en memoria, lo cual es muy poco fiable y sólo debe usarse con información muy volátil. Sigue esta serie para añadirle [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/) mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-5-Servicios-inyectables-en-Angular.md","raw":"---\ntitle: Servicios inyectables en Angular\npermalink: servicios-inyectables-en-Angular\ndate: 2017-11-23 10:44:58\ntags:  \n- Angular\n- Angular5\n- Angular2\n- DI\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-5_5_inject.png\n---\n\n![Tutorial Angular5 5-Inject](/images/tutorial-angular-5_5_inject.png)\n\nLa presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. **La lógica y los datos tienen su lugar en servicios compartidos**.\n\nPara que los componentes consuman los servicios de forma controlada tenemos _inyectables_ en la librería `@angular/core` con los que realizar **la inyección de dependencias**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/). Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular5/5-inject](https://github.com/AcademiaBinaria/angular5/tree/master/5-inject/cash-flow)\n\n# 1. Servicios\n\nComo casi todo en Angular, **los servicios son clases TypeScript**. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero, Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.\n\nEste sistema se base en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona **[la Dependency Inyection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias) en Angular**.\n\n## 1.1 Inyectables\n\nLa particularidad de las clases de servicios está en su decorador: `@Injectable()`. Esta función viene en el `@angular/core` e **indica que esta clase puede ser inyectada** dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios:\n\n```shell\nng g s views/operations/operations\n```\n\nEl resultado es el fichero `operations.service.ts` que he rellenado con un contenido como este:\n\n```typescript\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class OperationsService {\n  private operations: Operation[] = [];\n\n  constructor() {}\n\n  public getNumberOfOperations(): number {\n    return this.operations.length;\n  }\n  public getOperationsList(): Operation[] {\n    return this.operations;\n  }\n  public getOperationById(id: string): Operation {\n    return this.operations.find(o => o._id === id);\n  }\n  public saveOperation(operation: Operation) {\n    operation._id = new Date().getTime().toString();\n    this.operations.push(operation);\n  }\n  public deleteOperation(operation: Operation) {\n    const index = this.operations.indexOf(operation);\n    this.operations.splice(index, 1);\n  }\n}\n```\n\nAhora tienes centralizado en este servicio toda la lógica de datos. Los demás componentes la podrán utilizar e incluso podrán compartir los datos en memoria, como el *array* de operaciones.\n\n## 1.2 Providers\n\nDeclarar y decorar la clase no es suficiente. Necesitas **registrarla como un proveedor en algún módulo**. Por ahora hazlo en el cercano módulo de Operaciones usando el array `providers:[]`.\n\n```typescript\n@NgModule({\n  imports: [CommonModule, FormsModule, OperationsRoutingModule],\n  declarations: [ OperationsComponent, NewComponent, ListComponent, ItemComponent],\n  providers: [OperationsService]\n})\nexport class OperationsModule {}\n```\n\nA partir de este momento cualquier otro servicio o componente de este módulo que lo reclame **será proveído con una misma instancia** de este servicio. Se crea un [*singleton*](https://es.wikipedia.org/wiki/Singleton) por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Algunos servicios de uso común se proveen en el módulo raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.\n\n# 2. Dependencias\n\nAl consumo de los servicios inyectables se le conoce como dependencia. Cada componente o servicio puede **declarar en su constructor sus dependencias** hacia servicios inyectables.\n\nPor ejemplo en el componente `OperationsComponent` teníamos incrustada toda la lógica y mantenimiento de los datos. Debe quedarse solamente con sus responsabilidades de presentación y delegar en el nuevo servicio todo lo demás.\n\n```typescript\nexport class OperationsComponent implements OnInit {\n  public numberOfOperations = 0;\n  public operations: Operation[] = [];\n\n  constructor(private operationsService: OperationsService) {}\n\n  ngOnInit() {\n    this.refreshData();\n  }\n  public saveOperation(operation: Operation) {\n    this.operationsService.saveOperation(operation);\n    this.refreshData();\n  }\n  public deleteOperation(operation: Operation) {\n    this.operationsService.deleteOperation(operation);\n    this.refreshData();\n  }\n  private refreshData() {\n    this.numberOfOperations = this.operationsService.getNumberOfOperations();\n    this.operations = this.operationsService.getOperationsList();\n  }\n}\n```\n\nComo ves, **el constructor no tiene otra función que la de recibir las dependencias**. Una vez construida la instancia se puede acceder a ellas a través de `this.operationsService`. Ahora este componente ya no sabe nada sobre dónde se almacenan o cómo se recuperan los datos.\n\n## 2.1 Singleton\n\nLo mismo que le ocurre al `OperationsComponent` le puede pasar a cualquier otro componente del módulo. Como por ejemplo el `ItemComponent`. El cual **reclama la misma dependencia y recibe la misma instancia**. Esto es así porque cada módulo gestiona las dependencias en modo *Singleton*, y entrega a todos los componentes la misma instancia del servicio.\n\n```typescript\nexport class ItemComponent implements OnInit {\n  public operation: Operation;\n\n  constructor(\n    private route: ActivatedRoute,\n    private operationsService: OperationsService\n  ) {}\n\n  ngOnInit() {\n    const id = this.route.snapshot.params[\"id\"];\n    this.operation = this.operationsService.getOperationById(id);\n  }\n}\n```\n\n> Ojo, si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.\n\n## 2.2 Comunicación via url\n\nPara finalizar el ejercicio te muestro cómo desde el `ListComponent` puedes crear **enlaces que envían parámetros a otras páginas**. Con esa mínima información la página destino puede usar el valor del parámetro para consultar datos en el servicio.\n\n```html\n<tbody>\n    <tr *ngFor=\"let operation of operations\">\n      <td><a [routerLink]=\"[operation._id]\">{{ operation._id }}</a></td>  \n      <td>{{ operation.description }}</td>\n      <td>{{ operation.kind }}</td>\n      <td>{{ operation.amount | number:'7.2-2' }}</td>\n      <td><button (click)=\"deleteOperation(operation)\">Delete</button> </td>\n    </tr>\n  </tbody>\n```\n\nEste caso de uso mantiene los datos en memoria, lo cual es muy poco fiable y sólo debe usarse con información muy volátil. Sigue esta serie para añadirle [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/) mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"servicios-inyectables-en-Angular","published":1,"updated":"2017-12-20T09:17:19.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvi7001piwd3nglxcwnn","content":"<p><img src=\"/images/tutorial-angular-5_5_inject.png\" alt=\"Tutorial Angular5 5-Inject\"></p><p>La presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. <strong>La lógica y los datos tienen su lugar en servicios compartidos</strong>.</p><p>Para que los componentes consuman los servicios de forma controlada tenemos <em>inyectables</em> en la librería <code>@angular/core</code> con los que realizar <strong>la inyección de dependencias</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a>. Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/5-inject/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/5-inject</a></p></blockquote><h1 id=\"1-Servicios\"><a href=\"#1-Servicios\" class=\"headerlink\" title=\"1. Servicios\"></a>1. Servicios</h1><p>Como casi todo en Angular, <strong>los servicios son clases TypeScript</strong>. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero, Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.</p><p>Este sistema se base en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona <strong><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\" target=\"_blank\" rel=\"external\">la Dependency Inyection</a> en Angular</strong>.</p><h2 id=\"1-1-Inyectables\"><a href=\"#1-1-Inyectables\" class=\"headerlink\" title=\"1.1 Inyectables\"></a>1.1 Inyectables</h2><p>La particularidad de las clases de servicios está en su decorador: <code>@Injectable()</code>. Esta función viene en el <code>@angular/core</code> e <strong>indica que esta clase puede ser inyectada</strong> dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios:</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g s views/operations/operations</div></pre></td></tr></table></figure><p>El resultado es el fichero <code>operations.service.ts</code> que he rellenado con un contenido como este:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsService &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> operations: Operation[] = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> getNumberOfOperations(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.operations.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> getOperationsList(): Operation[] &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.operations;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> getOperationById(id: <span class=\"built_in\">string</span>): Operation &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.operations.find(<span class=\"function\"><span class=\"params\">o</span> =&gt;</span> o._id === id);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> saveOperation(operation: Operation) &#123;</div><div class=\"line\">    operation._id = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime().toString();</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.push(operation);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.operations.indexOf(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Ahora tienes centralizado en este servicio toda la lógica de datos. Los demás componentes la podrán utilizar e incluso podrán compartir los datos en memoria, como el <em>array</em> de operaciones.</p><h2 id=\"1-2-Providers\"><a href=\"#1-2-Providers\" class=\"headerlink\" title=\"1.2 Providers\"></a>1.2 Providers</h2><p>Declarar y decorar la clase no es suficiente. Necesitas <strong>registrarla como un proveedor en algún módulo</strong>. Por ahora hazlo en el cercano módulo de Operaciones usando el array <code>providers:[]</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [CommonModule, FormsModule, OperationsRoutingModule],</div><div class=\"line\">  declarations: [ OperationsComponent, NewComponent, ListComponent, ItemComponent],</div><div class=\"line\">  providers: [OperationsService]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsModule &#123;&#125;</div></pre></td></tr></table></figure><p>A partir de este momento cualquier otro servicio o componente de este módulo que lo reclame <strong>será proveído con una misma instancia</strong> de este servicio. Se crea un <a href=\"https://es.wikipedia.org/wiki/Singleton\" target=\"_blank\" rel=\"external\"><em>singleton</em></a> por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Algunos servicios de uso común se proveen en el módulo raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.</p><h1 id=\"2-Dependencias\"><a href=\"#2-Dependencias\" class=\"headerlink\" title=\"2. Dependencias\"></a>2. Dependencias</h1><p>Al consumo de los servicios inyectables se le conoce como dependencia. Cada componente o servicio puede <strong>declarar en su constructor sus dependencias</strong> hacia servicios inyectables.</p><p>Por ejemplo en el componente <code>OperationsComponent</code> teníamos incrustada toda la lógica y mantenimiento de los datos. Debe quedarse solamente con sus responsabilidades de presentación y delegar en el nuevo servicio todo lo demás.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> operationsService: OperationsService</span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.refreshData();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> saveOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.operationsService.saveOperation(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.refreshData();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.operationsService.deleteOperation(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.refreshData();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">private</span> refreshData() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numberOfOperations = <span class=\"keyword\">this</span>.operationsService.getNumberOfOperations();</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations = <span class=\"keyword\">this</span>.operationsService.getOperationsList();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Como ves, <strong>el constructor no tiene otra función que la de recibir las dependencias</strong>. Una vez construida la instancia se puede acceder a ellas a través de <code>this.operationsService</code>. Ahora este componente ya no sabe nada sobre dónde se almacenan o cómo se recuperan los datos.</p><h2 id=\"2-1-Singleton\"><a href=\"#2-1-Singleton\" class=\"headerlink\" title=\"2.1 Singleton\"></a>2.1 Singleton</h2><p>Lo mismo que le ocurre al <code>OperationsComponent</code> le puede pasar a cualquier otro componente del módulo. Como por ejemplo el <code>ItemComponent</code>. El cual <strong>reclama la misma dependencia y recibe la misma instancia</strong>. Esto es así porque cada módulo gestiona las dependencias en modo <em>Singleton</em>, y entrega a todos los componentes la misma instancia del servicio.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ItemComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> operation: Operation;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> route: ActivatedRoute,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> operationsService: OperationsService</span></div><div class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> id = <span class=\"keyword\">this</span>.route.snapshot.params[<span class=\"string\">\"id\"</span>];</div><div class=\"line\">    <span class=\"keyword\">this</span>.operation = <span class=\"keyword\">this</span>.operationsService.getOperationById(id);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>Ojo, si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.</p></blockquote><h2 id=\"2-2-Comunicacion-via-url\"><a href=\"#2-2-Comunicacion-via-url\" class=\"headerlink\" title=\"2.2 Comunicación via url\"></a>2.2 Comunicación via url</h2><p>Para finalizar el ejercicio te muestro cómo desde el <code>ListComponent</code> puedes crear <strong>enlaces que envían parámetros a otras páginas</strong>. Con esa mínima información la página destino puede usar el valor del parámetro para consultar datos en el servicio.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let operation of operations\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"[operation._id]\"</span>&gt;</span>&#123;&#123; operation._id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.kind &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.amount | number:'7.2-2' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteOperation(operation)\"</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div></pre></td></tr></table></figure><p>Este caso de uso mantiene los datos en memoria, lo cual es muy poco fiable y sólo debe usarse con información muy volátil. Sigue esta serie para añadirle <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a> mientras aprendes a programar con Angular5.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-5_5_inject.png\" alt=\"Tutorial Angular5 5-Inject\"></p><p>La presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. <strong>La lógica y los datos tienen su lugar en servicios compartidos</strong>.</p><p>Para que los componentes consuman los servicios de forma controlada tenemos <em>inyectables</em> en la librería <code>@angular/core</code> con los que realizar <strong>la inyección de dependencias</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a>. Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/5-inject/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/5-inject</a></p></blockquote><h1 id=\"1-Servicios\"><a href=\"#1-Servicios\" class=\"headerlink\" title=\"1. Servicios\"></a>1. Servicios</h1><p>Como casi todo en Angular, <strong>los servicios son clases TypeScript</strong>. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero, Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.</p><p>Este sistema se base en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona <strong><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\" target=\"_blank\" rel=\"external\">la Dependency Inyection</a> en Angular</strong>.</p><h2 id=\"1-1-Inyectables\"><a href=\"#1-1-Inyectables\" class=\"headerlink\" title=\"1.1 Inyectables\"></a>1.1 Inyectables</h2><p>La particularidad de las clases de servicios está en su decorador: <code>@Injectable()</code>. Esta función viene en el <code>@angular/core</code> e <strong>indica que esta clase puede ser inyectada</strong> dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios:</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g s views/operations/operations</div></pre></td></tr></table></figure><p>El resultado es el fichero <code>operations.service.ts</code> que he rellenado con un contenido como este:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Injectable</span>()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsService &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> operations: Operation[] = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> getNumberOfOperations(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.operations.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> getOperationsList(): Operation[] &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.operations;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> getOperationById(id: <span class=\"built_in\">string</span>): Operation &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.operations.find(<span class=\"function\"><span class=\"params\">o</span> =&gt;</span> o._id === id);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> saveOperation(operation: Operation) &#123;</div><div class=\"line\">    operation._id = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime().toString();</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.push(operation);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.operations.indexOf(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Ahora tienes centralizado en este servicio toda la lógica de datos. Los demás componentes la podrán utilizar e incluso podrán compartir los datos en memoria, como el <em>array</em> de operaciones.</p><h2 id=\"1-2-Providers\"><a href=\"#1-2-Providers\" class=\"headerlink\" title=\"1.2 Providers\"></a>1.2 Providers</h2><p>Declarar y decorar la clase no es suficiente. Necesitas <strong>registrarla como un proveedor en algún módulo</strong>. Por ahora hazlo en el cercano módulo de Operaciones usando el array <code>providers:[]</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  imports: [CommonModule, FormsModule, OperationsRoutingModule],</div><div class=\"line\">  declarations: [ OperationsComponent, NewComponent, ListComponent, ItemComponent],</div><div class=\"line\">  providers: [OperationsService]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsModule &#123;&#125;</div></pre></td></tr></table></figure><p>A partir de este momento cualquier otro servicio o componente de este módulo que lo reclame <strong>será proveído con una misma instancia</strong> de este servicio. Se crea un <a href=\"https://es.wikipedia.org/wiki/Singleton\" target=\"_blank\" rel=\"external\"><em>singleton</em></a> por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Algunos servicios de uso común se proveen en el módulo raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.</p><h1 id=\"2-Dependencias\"><a href=\"#2-Dependencias\" class=\"headerlink\" title=\"2. Dependencias\"></a>2. Dependencias</h1><p>Al consumo de los servicios inyectables se le conoce como dependencia. Cada componente o servicio puede <strong>declarar en su constructor sus dependencias</strong> hacia servicios inyectables.</p><p>Por ejemplo en el componente <code>OperationsComponent</code> teníamos incrustada toda la lógica y mantenimiento de los datos. Debe quedarse solamente con sus responsabilidades de presentación y delegar en el nuevo servicio todo lo demás.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> operationsService: OperationsService</span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.refreshData();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> saveOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.operationsService.saveOperation(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.refreshData();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.operationsService.deleteOperation(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.refreshData();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">private</span> refreshData() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.numberOfOperations = <span class=\"keyword\">this</span>.operationsService.getNumberOfOperations();</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations = <span class=\"keyword\">this</span>.operationsService.getOperationsList();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Como ves, <strong>el constructor no tiene otra función que la de recibir las dependencias</strong>. Una vez construida la instancia se puede acceder a ellas a través de <code>this.operationsService</code>. Ahora este componente ya no sabe nada sobre dónde se almacenan o cómo se recuperan los datos.</p><h2 id=\"2-1-Singleton\"><a href=\"#2-1-Singleton\" class=\"headerlink\" title=\"2.1 Singleton\"></a>2.1 Singleton</h2><p>Lo mismo que le ocurre al <code>OperationsComponent</code> le puede pasar a cualquier otro componente del módulo. Como por ejemplo el <code>ItemComponent</code>. El cual <strong>reclama la misma dependencia y recibe la misma instancia</strong>. Esto es así porque cada módulo gestiona las dependencias en modo <em>Singleton</em>, y entrega a todos los componentes la misma instancia del servicio.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ItemComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> operation: Operation;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> route: ActivatedRoute,</span></div><div class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> operationsService: OperationsService</span></div><div class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> id = <span class=\"keyword\">this</span>.route.snapshot.params[<span class=\"string\">\"id\"</span>];</div><div class=\"line\">    <span class=\"keyword\">this</span>.operation = <span class=\"keyword\">this</span>.operationsService.getOperationById(id);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>Ojo, si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.</p></blockquote><h2 id=\"2-2-Comunicacion-via-url\"><a href=\"#2-2-Comunicacion-via-url\" class=\"headerlink\" title=\"2.2 Comunicación via url\"></a>2.2 Comunicación via url</h2><p>Para finalizar el ejercicio te muestro cómo desde el <code>ListComponent</code> puedes crear <strong>enlaces que envían parámetros a otras páginas</strong>. Con esa mínima información la página destino puede usar el valor del parámetro para consultar datos en el servicio.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let operation of operations\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"[operation._id]\"</span>&gt;</span>&#123;&#123; operation._id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.kind &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.amount | number:'7.2-2' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteOperation(operation)\"</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div></pre></td></tr></table></figure><p>Este caso de uso mantiene los datos en memoria, lo cual es muy poco fiable y sólo debe usarse con información muy volátil. Sigue esta serie para añadirle <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a> mientras aprendes a programar con Angular5.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Vigilancia y seguridad en Angular","date":"2017-12-29T10:49:27.000Z","thumbnail":"/css/images/angular-5_7_watch.png","_content":"\n![Tutorial Angular5 7-watch](/images/tutorial-angular-5_7_watch.png)\n\nLa seguridad de los datos es una responsabilidad compartida entre el servidor y el cliente. En **Angular** usaremos los _interceptores_ para detectar intrusos y enviar credenciales. La **identificación de usuarios y el control** de acceso es parte del trabajo de un desarrollador front-end.\n\nVeremos nuevos usos de los _observables_ y los servicios de la librería `@angular/common/http` con los que tratar con los **tokens para comunicaciones seguras en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Comunicaciones http en Angular](../comunicaciones-http-en-Angular/). Al finalizar tendrás una aplicación que identifica usuarios y se responsabiliza de almacenar y comunicar el _token_ de seguridad de un servicio REST.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular5/7-watch](https://github.com/AcademiaBinaria/angular5/tree/master/7-watch/cash-flow)\n> El servicio REST se encuentra en _GitHub_: [AcademiaBinaria/ApiBase](https://github.com/AcademiaBinaria/ApiBase)\n\n# 1 Seguridad\n\nLa seguridad de las comunicaciones con un servicio REST se resuelve habitualmente mediante una **credencial generada por el servidor llamada _token_**. Un usuario registrado en el sistema puede hacer _log in_ enviando una vez su identificador y contraseña. Si todo va bien, a cambio el servidor le enviará un _token_ que deberá usar en las siguientes llamadas. Con esto el servidor será capaz de autentificar las llamadas y responder adecuadamente.\n\n## 1.1 Detectar intrusos\n\nEn el ejercicio anterior usé el `CatchInterceptorService` para capturar los errores obtenidos del servidor. Cuando me llegue un código `401 Unauthorized` querrá decir que el servidor no acepta las actuales credenciales del usuario. Lo que hago es llevar al usuario a una página para que pueda registrarse o volver a identificarse en el sistema.\n\n```typescript\nprivate catchHttpError(err: HttpErrorResponse) {\n  if (err.status === 401) {\n    this.catchUnauthorized();\n  } else {\n    console.warn(err.statusText);\n  }\n}\nprivate catchUnauthorized() {\n  console.log(\"Not authorized\");\n  this.navigateToLogin();\n}\nprivate navigateToLogin() {\n  this.router.navigateByUrl(\"/credentials/login\");\n}\n```\n\n## 1.2 Obtener credenciales\n\nMediante un formulario pregunto al usuario los datos de identificación estándar: _email y password_. Estos se envían al servidor para que registre un usuario nuevo o valide a uno existente según el caso. Mira el código del fichero `credentials.component.ts`.\n\n```typescript\npublic sendCredential() {\n  this.errorMessage = \"\";\n  const credential = this.pageData.credential;\n  const service = this.pageData.title;\n  this.credentialsService\n    .sendCredential(credential, service)\n    .subscribe(\n      this.acceptedCredentials.bind(this),\n      this.invalidCredentials.bind(this)\n    );\n}\nprivate acceptedCredentials(token) {\n  this.busService.emitUserToken(token);\n  this.router.navigateByUrl(\"/\");\n}\nprivate invalidCredentials() {\n  this.busService.emitUserToken(null);\n  this.errorMessage = \"Invalid Credentials\";\n}\n```\n\n> Este componente sirve para registrar o identificar usuarios. Cambia su comportamiento según el valor de `this.pageData` que viene determinado desde el enrutador. Esta es una manera sencilla de reutilizar componentes. Mira en `credentials.routing.ts` para tener más detalles.\n\n## 1.3 Almacenamiento del token\n\nSi se aceptan las credenciales **el servidor nos devolverá un objeto con el _token_ de la sesión** para el usuario. Es habitual que envíe más información como roles, y preferencias del usuario... pero eso ya depende del API. Lo que depende de ti es guardar ese _token_.\n\nEl **almacenamiento recomendado en los navegadores es el `localStorage`** pero en este tutorial introductorio tendrás que conformarte con almacenarlo en la memoria. Eso sí, necesitamos un lugar que sea accesible para un interceptor que aún no has visto: el `TokenInterceptorService`, que se encargará de enviar dicho _token_ en todas las llamadas. Para comunicar este componente de las credenciales con ese interceptor sin acoplarlos he decidido usar un servicio intermedio: el `BusService`.\n\n### 1.3.1 El bus service\n\nEste servicio del fichero `bus.service.ts` es la implementación más sencilla del patrón _Redux_ que he podido crear. Se basa en utilizar la librería `RxJs` para emitir cambios en el estado de un modelo; y que otro servicio pueda subscribirse para ser notificado de dichos cambios.\n\nEl emisor será el componente `CredentialsComponent` que envía las credenciales al servidor y recibe el _token_. El subscriptor será el servicio de interceptación  `TokenInterceptorService` que usará dicho _token_ para identificar al usuario actual en todas las llamadas al servidor. Y en el medio está el `BusService` que actúa de enlace entre ambos. Este es el código necesario en el fichero `bus.service.ts`:\n\n```typescript\nprivate userToken$ = new Subject<any>();\n\nconstructor() {}\n\npublic getUserToken$(): Observable<any> {\n  return this.userToken$.asObservable();\n}\npublic emitUserToken(userToken: any) {\n  this.userToken$.next(userToken);\n}\n```\n\nEl tipo genérico `Subject<any>` viene en la librería `rxjs/Subject` y es el hermano mayor del ya conocido `Observable<any>`. En este caso permite ademas _emitir_ valores que recibirán los subscriptores. La suscripción puede realizarse directamente contra la instancia del `Subject`, pero lo recomendable es que dicha instancia sea privada y que sólo exponga una parte de su funcionalidad. \n> Digamos que exponemos el _Observable_ de sólo lectura obtenido mediante la función `.asObservable()`.\n\n### 1.3.2 El Token Interceptor Service\n\nYa sólo falta consumir ese _Observable_ en el servicio interceptor `token-interceptor.service.ts`. Para ello me suscribo a los cambios emitidos desde el `BusService` y guardo el token que me envíen para su uso posterior.\n\n```typescript\nprivate token: string = \"InitialAuthorizationToken\";\n\nconstructor(private busService: BusService) {\n  this.subscribeToTokenChanges();\n}\n\nprivate subscribeToTokenChanges() {\n  this.busService.getUserToken$().subscribe(this.setTokenIfAny.bind(this));\n}\nprivate setTokenIfAny(data) {\n  if (data && data.token) {\n    this.token = data.token;\n  }\n}\n```\n\n# 2 vigilancia\n\nEl servicio `TokenInterceptorService` se encarga de enviar el _token_ actual en cada llamada que pasa por sus manos. Para ello implementa la interfaz `HttpInterceptor` en su método `intercept()` con la lógica suficiente para enviar el token en una cabecera acordada con el API. En este caso uso la estándar `Authorization`.\n\n```typescript\npublic intercept(\n  req: HttpRequest<any>,\n  next: HttpHandler\n): Observable<HttpEvent<any>> {\n  const authorizationReq = this.setAuthHeader(req);\n  const handledRequest = next.handle(authorizationReq);\n  return handledRequest;\n}\nprivate setAuthHeader(req: HttpRequest<any>): HttpRequest<any> {\n  const authorization = `Bearer ${this.token}`;\n  const headers = req.headers.set(\"Authorization\", authorization);\n  const authorizationReq = req.clone({ headers });\n  return authorizationReq;\n}\n```\n\nA parte de toda la _liturgia_ a la que nos obliga el `HttpInterceptor`, al final la lógica es sencilla. Se trata de rellenar la cabecera con el token actual. Si es o no válido es algo que decidirá el servidor. Aquí simplemente envías lo que tienes.\n\n> En Angular promueven el uso de funciones y datos _inmutables_ de ahí que nos obliguen a clonar las cabeceras para modificarlas.\n\nYa tenemos al usuario identificado y los datos se envían o reciben acompañados de una cabecera que el servidor interpreta como una firma; lo básico para un sistema mínimamente seguro. Sigue esta serie para crear tus [formularios reactivos con Angular](../formularios-reactivos-con-Angular/) mientras aprendes a programar con Angular6. \n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-7-Vigilancia-y-seguridad-en-Angular.md","raw":"---\ntitle: Vigilancia y seguridad en Angular\npermalink: vigilancia-y-seguridad-en-Angular\ndate: 2017-12-29 11:49:27\ntags:  \n- Angular\n- Angular5\n- Angular2\n- observables\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-5_7_watch.png\n---\n\n![Tutorial Angular5 7-watch](/images/tutorial-angular-5_7_watch.png)\n\nLa seguridad de los datos es una responsabilidad compartida entre el servidor y el cliente. En **Angular** usaremos los _interceptores_ para detectar intrusos y enviar credenciales. La **identificación de usuarios y el control** de acceso es parte del trabajo de un desarrollador front-end.\n\nVeremos nuevos usos de los _observables_ y los servicios de la librería `@angular/common/http` con los que tratar con los **tokens para comunicaciones seguras en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Comunicaciones http en Angular](../comunicaciones-http-en-Angular/). Al finalizar tendrás una aplicación que identifica usuarios y se responsabiliza de almacenar y comunicar el _token_ de seguridad de un servicio REST.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular5/7-watch](https://github.com/AcademiaBinaria/angular5/tree/master/7-watch/cash-flow)\n> El servicio REST se encuentra en _GitHub_: [AcademiaBinaria/ApiBase](https://github.com/AcademiaBinaria/ApiBase)\n\n# 1 Seguridad\n\nLa seguridad de las comunicaciones con un servicio REST se resuelve habitualmente mediante una **credencial generada por el servidor llamada _token_**. Un usuario registrado en el sistema puede hacer _log in_ enviando una vez su identificador y contraseña. Si todo va bien, a cambio el servidor le enviará un _token_ que deberá usar en las siguientes llamadas. Con esto el servidor será capaz de autentificar las llamadas y responder adecuadamente.\n\n## 1.1 Detectar intrusos\n\nEn el ejercicio anterior usé el `CatchInterceptorService` para capturar los errores obtenidos del servidor. Cuando me llegue un código `401 Unauthorized` querrá decir que el servidor no acepta las actuales credenciales del usuario. Lo que hago es llevar al usuario a una página para que pueda registrarse o volver a identificarse en el sistema.\n\n```typescript\nprivate catchHttpError(err: HttpErrorResponse) {\n  if (err.status === 401) {\n    this.catchUnauthorized();\n  } else {\n    console.warn(err.statusText);\n  }\n}\nprivate catchUnauthorized() {\n  console.log(\"Not authorized\");\n  this.navigateToLogin();\n}\nprivate navigateToLogin() {\n  this.router.navigateByUrl(\"/credentials/login\");\n}\n```\n\n## 1.2 Obtener credenciales\n\nMediante un formulario pregunto al usuario los datos de identificación estándar: _email y password_. Estos se envían al servidor para que registre un usuario nuevo o valide a uno existente según el caso. Mira el código del fichero `credentials.component.ts`.\n\n```typescript\npublic sendCredential() {\n  this.errorMessage = \"\";\n  const credential = this.pageData.credential;\n  const service = this.pageData.title;\n  this.credentialsService\n    .sendCredential(credential, service)\n    .subscribe(\n      this.acceptedCredentials.bind(this),\n      this.invalidCredentials.bind(this)\n    );\n}\nprivate acceptedCredentials(token) {\n  this.busService.emitUserToken(token);\n  this.router.navigateByUrl(\"/\");\n}\nprivate invalidCredentials() {\n  this.busService.emitUserToken(null);\n  this.errorMessage = \"Invalid Credentials\";\n}\n```\n\n> Este componente sirve para registrar o identificar usuarios. Cambia su comportamiento según el valor de `this.pageData` que viene determinado desde el enrutador. Esta es una manera sencilla de reutilizar componentes. Mira en `credentials.routing.ts` para tener más detalles.\n\n## 1.3 Almacenamiento del token\n\nSi se aceptan las credenciales **el servidor nos devolverá un objeto con el _token_ de la sesión** para el usuario. Es habitual que envíe más información como roles, y preferencias del usuario... pero eso ya depende del API. Lo que depende de ti es guardar ese _token_.\n\nEl **almacenamiento recomendado en los navegadores es el `localStorage`** pero en este tutorial introductorio tendrás que conformarte con almacenarlo en la memoria. Eso sí, necesitamos un lugar que sea accesible para un interceptor que aún no has visto: el `TokenInterceptorService`, que se encargará de enviar dicho _token_ en todas las llamadas. Para comunicar este componente de las credenciales con ese interceptor sin acoplarlos he decidido usar un servicio intermedio: el `BusService`.\n\n### 1.3.1 El bus service\n\nEste servicio del fichero `bus.service.ts` es la implementación más sencilla del patrón _Redux_ que he podido crear. Se basa en utilizar la librería `RxJs` para emitir cambios en el estado de un modelo; y que otro servicio pueda subscribirse para ser notificado de dichos cambios.\n\nEl emisor será el componente `CredentialsComponent` que envía las credenciales al servidor y recibe el _token_. El subscriptor será el servicio de interceptación  `TokenInterceptorService` que usará dicho _token_ para identificar al usuario actual en todas las llamadas al servidor. Y en el medio está el `BusService` que actúa de enlace entre ambos. Este es el código necesario en el fichero `bus.service.ts`:\n\n```typescript\nprivate userToken$ = new Subject<any>();\n\nconstructor() {}\n\npublic getUserToken$(): Observable<any> {\n  return this.userToken$.asObservable();\n}\npublic emitUserToken(userToken: any) {\n  this.userToken$.next(userToken);\n}\n```\n\nEl tipo genérico `Subject<any>` viene en la librería `rxjs/Subject` y es el hermano mayor del ya conocido `Observable<any>`. En este caso permite ademas _emitir_ valores que recibirán los subscriptores. La suscripción puede realizarse directamente contra la instancia del `Subject`, pero lo recomendable es que dicha instancia sea privada y que sólo exponga una parte de su funcionalidad. \n> Digamos que exponemos el _Observable_ de sólo lectura obtenido mediante la función `.asObservable()`.\n\n### 1.3.2 El Token Interceptor Service\n\nYa sólo falta consumir ese _Observable_ en el servicio interceptor `token-interceptor.service.ts`. Para ello me suscribo a los cambios emitidos desde el `BusService` y guardo el token que me envíen para su uso posterior.\n\n```typescript\nprivate token: string = \"InitialAuthorizationToken\";\n\nconstructor(private busService: BusService) {\n  this.subscribeToTokenChanges();\n}\n\nprivate subscribeToTokenChanges() {\n  this.busService.getUserToken$().subscribe(this.setTokenIfAny.bind(this));\n}\nprivate setTokenIfAny(data) {\n  if (data && data.token) {\n    this.token = data.token;\n  }\n}\n```\n\n# 2 vigilancia\n\nEl servicio `TokenInterceptorService` se encarga de enviar el _token_ actual en cada llamada que pasa por sus manos. Para ello implementa la interfaz `HttpInterceptor` en su método `intercept()` con la lógica suficiente para enviar el token en una cabecera acordada con el API. En este caso uso la estándar `Authorization`.\n\n```typescript\npublic intercept(\n  req: HttpRequest<any>,\n  next: HttpHandler\n): Observable<HttpEvent<any>> {\n  const authorizationReq = this.setAuthHeader(req);\n  const handledRequest = next.handle(authorizationReq);\n  return handledRequest;\n}\nprivate setAuthHeader(req: HttpRequest<any>): HttpRequest<any> {\n  const authorization = `Bearer ${this.token}`;\n  const headers = req.headers.set(\"Authorization\", authorization);\n  const authorizationReq = req.clone({ headers });\n  return authorizationReq;\n}\n```\n\nA parte de toda la _liturgia_ a la que nos obliga el `HttpInterceptor`, al final la lógica es sencilla. Se trata de rellenar la cabecera con el token actual. Si es o no válido es algo que decidirá el servidor. Aquí simplemente envías lo que tienes.\n\n> En Angular promueven el uso de funciones y datos _inmutables_ de ahí que nos obliguen a clonar las cabeceras para modificarlas.\n\nYa tenemos al usuario identificado y los datos se envían o reciben acompañados de una cabecera que el servidor interpreta como una firma; lo básico para un sistema mínimamente seguro. Sigue esta serie para crear tus [formularios reactivos con Angular](../formularios-reactivos-con-Angular/) mientras aprendes a programar con Angular6. \n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"vigilancia-y-seguridad-en-Angular","published":1,"updated":"2018-05-03T09:07:15.049Z","_id":"cjbrwpvi7001siwd3xpxrryku","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-5_7_watch.png\" alt=\"Tutorial Angular5 7-watch\"></p><p>La seguridad de los datos es una responsabilidad compartida entre el servidor y el cliente. En <strong>Angular</strong> usaremos los <em>interceptores</em> para detectar intrusos y enviar credenciales. La <strong>identificación de usuarios y el control</strong> de acceso es parte del trabajo de un desarrollador front-end.</p><p>Veremos nuevos usos de los <em>observables</em> y los servicios de la librería <code>@angular/common/http</code> con los que tratar con los <strong>tokens para comunicaciones seguras en Angular</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones http en Angular</a>. Al finalizar tendrás una aplicación que identifica usuarios y se responsabiliza de almacenar y comunicar el <em>token</em> de seguridad de un servicio REST.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/7-watch/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/7-watch</a><br>El servicio REST se encuentra en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/ApiBase\" target=\"_blank\" rel=\"external\">AcademiaBinaria/ApiBase</a></p></blockquote><h1 id=\"1-Seguridad\"><a href=\"#1-Seguridad\" class=\"headerlink\" title=\"1 Seguridad\"></a>1 Seguridad</h1><p>La seguridad de las comunicaciones con un servicio REST se resuelve habitualmente mediante una <strong>credencial generada por el servidor llamada <em>token</em></strong>. Un usuario registrado en el sistema puede hacer <em>log in</em> enviando una vez su identificador y contraseña. Si todo va bien, a cambio el servidor le enviará un <em>token</em> que deberá usar en las siguientes llamadas. Con esto el servidor será capaz de autentificar las llamadas y responder adecuadamente.</p><h2 id=\"1-1-Detectar-intrusos\"><a href=\"#1-1-Detectar-intrusos\" class=\"headerlink\" title=\"1.1 Detectar intrusos\"></a>1.1 Detectar intrusos</h2><p>En el ejercicio anterior usé el <code>CatchInterceptorService</code> para capturar los errores obtenidos del servidor. Cuando me llegue un código <code>401 Unauthorized</code> querrá decir que el servidor no acepta las actuales credenciales del usuario. Lo que hago es llevar al usuario a una página para que pueda registrarse o volver a identificarse en el sistema.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> catchHttpError(err: HttpErrorResponse) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err.status === <span class=\"number\">401</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.catchUnauthorized();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.warn(err.statusText);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> catchUnauthorized() &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Not authorized\"</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.navigateToLogin();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> navigateToLogin() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.router.navigateByUrl(<span class=\"string\">\"/credentials/login\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"1-2-Obtener-credenciales\"><a href=\"#1-2-Obtener-credenciales\" class=\"headerlink\" title=\"1.2 Obtener credenciales\"></a>1.2 Obtener credenciales</h2><p>Mediante un formulario pregunto al usuario los datos de identificación estándar: <em>email y password</em>. Estos se envían al servidor para que registre un usuario nuevo o valide a uno existente según el caso. Mira el código del fichero <code>credentials.component.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> sendCredential() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.errorMessage = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> credential = <span class=\"keyword\">this</span>.pageData.credential;</div><div class=\"line\">  <span class=\"keyword\">const</span> service = <span class=\"keyword\">this</span>.pageData.title;</div><div class=\"line\">  <span class=\"keyword\">this</span>.credentialsService</div><div class=\"line\">    .sendCredential(credential, service)</div><div class=\"line\">    .subscribe(</div><div class=\"line\">      <span class=\"keyword\">this</span>.acceptedCredentials.bind(<span class=\"keyword\">this</span>),</div><div class=\"line\">      <span class=\"keyword\">this</span>.invalidCredentials.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> acceptedCredentials(token) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.busService.emitUserToken(token);</div><div class=\"line\">  <span class=\"keyword\">this</span>.router.navigateByUrl(<span class=\"string\">\"/\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> invalidCredentials() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.busService.emitUserToken(<span class=\"literal\">null</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.errorMessage = <span class=\"string\">\"Invalid Credentials\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>Este componente sirve para registrar o identificar usuarios. Cambia su comportamiento según el valor de <code>this.pageData</code> que viene determinado desde el enrutador. Esta es una manera sencilla de reutilizar componentes. Mira en <code>credentials.routing.ts</code> para tener más detalles.</p></blockquote><h2 id=\"1-3-Almacenamiento-del-token\"><a href=\"#1-3-Almacenamiento-del-token\" class=\"headerlink\" title=\"1.3 Almacenamiento del token\"></a>1.3 Almacenamiento del token</h2><p>Si se aceptan las credenciales <strong>el servidor nos devolverá un objeto con el <em>token</em> de la sesión</strong> para el usuario. Es habitual que envíe más información como roles, y preferencias del usuario… pero eso ya depende del API. Lo que depende de ti es guardar ese <em>token</em>.</p><p>El <strong>almacenamiento recomendado en los navegadores es el <code>localStorage</code></strong> pero en este tutorial introductorio tendrás que conformarte con almacenarlo en la memoria. Eso sí, necesitamos un lugar que sea accesible para un interceptor que aún no has visto: el <code>TokenInterceptorService</code>, que se encargará de enviar dicho <em>token</em> en todas las llamadas. Para comunicar este componente de las credenciales con ese interceptor sin acoplarlos he decidido usar un servicio intermedio: el <code>BusService</code>.</p><h3 id=\"1-3-1-El-bus-service\"><a href=\"#1-3-1-El-bus-service\" class=\"headerlink\" title=\"1.3.1 El bus service\"></a>1.3.1 El bus service</h3><p>Este servicio del fichero <code>bus.service.ts</code> es la implementación más sencilla del patrón <em>Redux</em> que he podido crear. Se basa en utilizar la librería <code>RxJs</code> para emitir cambios en el estado de un modelo; y que otro servicio pueda subscribirse para ser notificado de dichos cambios.</p><p>El emisor será el componente <code>CredentialsComponent</code> que envía las credenciales al servidor y recibe el <em>token</em>. El subscriptor será el servicio de interceptación <code>TokenInterceptorService</code> que usará dicho <em>token</em> para identificar al usuario actual en todas las llamadas al servidor. Y en el medio está el <code>BusService</code> que actúa de enlace entre ambos. Este es el código necesario en el fichero <code>bus.service.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> userToken$ = <span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">any</span>&gt;();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> getUserToken$(): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.userToken$.asObservable();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> emitUserToken(userToken: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.userToken$.next(userToken);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>El tipo genérico <code>Subject&lt;any&gt;</code> viene en la librería <code>rxjs/Subject</code> y es el hermano mayor del ya conocido <code>Observable&lt;any&gt;</code>. En este caso permite ademas <em>emitir</em> valores que recibirán los subscriptores. La suscripción puede realizarse directamente contra la instancia del <code>Subject</code>, pero lo recomendable es que dicha instancia sea privada y que sólo exponga una parte de su funcionalidad.</p><blockquote><p>Digamos que exponemos el <em>Observable</em> de sólo lectura obtenido mediante la función <code>.asObservable()</code>.</p></blockquote><h3 id=\"1-3-2-El-Token-Interceptor-Service\"><a href=\"#1-3-2-El-Token-Interceptor-Service\" class=\"headerlink\" title=\"1.3.2 El Token Interceptor Service\"></a>1.3.2 El Token Interceptor Service</h3><p>Ya sólo falta consumir ese <em>Observable</em> en el servicio interceptor <code>token-interceptor.service.ts</code>. Para ello me suscribo a los cambios emitidos desde el <code>BusService</code> y guardo el token que me envíen para su uso posterior.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> token: <span class=\"built_in\">string</span> = <span class=\"string\">\"InitialAuthorizationToken\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> busService: BusService</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.subscribeToTokenChanges();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> subscribeToTokenChanges() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.busService.getUserToken$().subscribe(<span class=\"keyword\">this</span>.setTokenIfAny.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> setTokenIfAny(data) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (data &amp;&amp; data.token) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.token = data.token;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h1 id=\"2-vigilancia\"><a href=\"#2-vigilancia\" class=\"headerlink\" title=\"2 vigilancia\"></a>2 vigilancia</h1><p>El servicio <code>TokenInterceptorService</code> se encarga de enviar el <em>token</em> actual en cada llamada que pasa por sus manos. Para ello implementa la interfaz <code>HttpInterceptor</code> en su método <code>intercept()</code> con la lógica suficiente para enviar el token en una cabecera acordada con el API. En este caso uso la estándar <code>Authorization</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> intercept(</div><div class=\"line\">  req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;,</div><div class=\"line\">  next: HttpHandler</div><div class=\"line\">): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> authorizationReq = <span class=\"keyword\">this</span>.setAuthHeader(req);</div><div class=\"line\">  <span class=\"keyword\">const</span> handledRequest = next.handle(authorizationReq);</div><div class=\"line\">  <span class=\"keyword\">return</span> handledRequest;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> setAuthHeader(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;): HttpRequest&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> authorization = <span class=\"string\">`Bearer <span class=\"subst\">$&#123;this.token&#125;</span>`</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> headers = req.headers.set(<span class=\"string\">\"Authorization\"</span>, authorization);</div><div class=\"line\">  <span class=\"keyword\">const</span> authorizationReq = req.clone(&#123; headers &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> authorizationReq;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>A parte de toda la <em>liturgia</em> a la que nos obliga el <code>HttpInterceptor</code>, al final la lógica es sencilla. Se trata de rellenar la cabecera con el token actual. Si es o no válido es algo que decidirá el servidor. Aquí simplemente envías lo que tienes.</p><blockquote><p>En Angular promueven el uso de funciones y datos <em>inmutables</em> de ahí que nos obliguen a clonar las cabeceras para modificarlas.</p></blockquote><p>Ya tenemos al usuario identificado y los datos se envían o reciben acompañados de una cabecera que el servidor interpreta como una firma; lo básico para un sistema mínimamente seguro. Sigue esta serie para crear tus <a href=\"../formularios-reactivos-con-Angular/\">formularios reactivos con Angular</a> mientras aprendes a programar con Angular6.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-5_7_watch.png\" alt=\"Tutorial Angular5 7-watch\"></p><p>La seguridad de los datos es una responsabilidad compartida entre el servidor y el cliente. En <strong>Angular</strong> usaremos los <em>interceptores</em> para detectar intrusos y enviar credenciales. La <strong>identificación de usuarios y el control</strong> de acceso es parte del trabajo de un desarrollador front-end.</p><p>Veremos nuevos usos de los <em>observables</em> y los servicios de la librería <code>@angular/common/http</code> con los que tratar con los <strong>tokens para comunicaciones seguras en Angular</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones http en Angular</a>. Al finalizar tendrás una aplicación que identifica usuarios y se responsabiliza de almacenar y comunicar el <em>token</em> de seguridad de un servicio REST.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/7-watch/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/7-watch</a><br>El servicio REST se encuentra en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/ApiBase\" target=\"_blank\" rel=\"external\">AcademiaBinaria/ApiBase</a></p></blockquote><h1 id=\"1-Seguridad\"><a href=\"#1-Seguridad\" class=\"headerlink\" title=\"1 Seguridad\"></a>1 Seguridad</h1><p>La seguridad de las comunicaciones con un servicio REST se resuelve habitualmente mediante una <strong>credencial generada por el servidor llamada <em>token</em></strong>. Un usuario registrado en el sistema puede hacer <em>log in</em> enviando una vez su identificador y contraseña. Si todo va bien, a cambio el servidor le enviará un <em>token</em> que deberá usar en las siguientes llamadas. Con esto el servidor será capaz de autentificar las llamadas y responder adecuadamente.</p><h2 id=\"1-1-Detectar-intrusos\"><a href=\"#1-1-Detectar-intrusos\" class=\"headerlink\" title=\"1.1 Detectar intrusos\"></a>1.1 Detectar intrusos</h2><p>En el ejercicio anterior usé el <code>CatchInterceptorService</code> para capturar los errores obtenidos del servidor. Cuando me llegue un código <code>401 Unauthorized</code> querrá decir que el servidor no acepta las actuales credenciales del usuario. Lo que hago es llevar al usuario a una página para que pueda registrarse o volver a identificarse en el sistema.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> catchHttpError(err: HttpErrorResponse) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err.status === <span class=\"number\">401</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.catchUnauthorized();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.warn(err.statusText);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> catchUnauthorized() &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Not authorized\"</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.navigateToLogin();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> navigateToLogin() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.router.navigateByUrl(<span class=\"string\">\"/credentials/login\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"1-2-Obtener-credenciales\"><a href=\"#1-2-Obtener-credenciales\" class=\"headerlink\" title=\"1.2 Obtener credenciales\"></a>1.2 Obtener credenciales</h2><p>Mediante un formulario pregunto al usuario los datos de identificación estándar: <em>email y password</em>. Estos se envían al servidor para que registre un usuario nuevo o valide a uno existente según el caso. Mira el código del fichero <code>credentials.component.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> sendCredential() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.errorMessage = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> credential = <span class=\"keyword\">this</span>.pageData.credential;</div><div class=\"line\">  <span class=\"keyword\">const</span> service = <span class=\"keyword\">this</span>.pageData.title;</div><div class=\"line\">  <span class=\"keyword\">this</span>.credentialsService</div><div class=\"line\">    .sendCredential(credential, service)</div><div class=\"line\">    .subscribe(</div><div class=\"line\">      <span class=\"keyword\">this</span>.acceptedCredentials.bind(<span class=\"keyword\">this</span>),</div><div class=\"line\">      <span class=\"keyword\">this</span>.invalidCredentials.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> acceptedCredentials(token) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.busService.emitUserToken(token);</div><div class=\"line\">  <span class=\"keyword\">this</span>.router.navigateByUrl(<span class=\"string\">\"/\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> invalidCredentials() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.busService.emitUserToken(<span class=\"literal\">null</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.errorMessage = <span class=\"string\">\"Invalid Credentials\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>Este componente sirve para registrar o identificar usuarios. Cambia su comportamiento según el valor de <code>this.pageData</code> que viene determinado desde el enrutador. Esta es una manera sencilla de reutilizar componentes. Mira en <code>credentials.routing.ts</code> para tener más detalles.</p></blockquote><h2 id=\"1-3-Almacenamiento-del-token\"><a href=\"#1-3-Almacenamiento-del-token\" class=\"headerlink\" title=\"1.3 Almacenamiento del token\"></a>1.3 Almacenamiento del token</h2><p>Si se aceptan las credenciales <strong>el servidor nos devolverá un objeto con el <em>token</em> de la sesión</strong> para el usuario. Es habitual que envíe más información como roles, y preferencias del usuario… pero eso ya depende del API. Lo que depende de ti es guardar ese <em>token</em>.</p><p>El <strong>almacenamiento recomendado en los navegadores es el <code>localStorage</code></strong> pero en este tutorial introductorio tendrás que conformarte con almacenarlo en la memoria. Eso sí, necesitamos un lugar que sea accesible para un interceptor que aún no has visto: el <code>TokenInterceptorService</code>, que se encargará de enviar dicho <em>token</em> en todas las llamadas. Para comunicar este componente de las credenciales con ese interceptor sin acoplarlos he decidido usar un servicio intermedio: el <code>BusService</code>.</p><h3 id=\"1-3-1-El-bus-service\"><a href=\"#1-3-1-El-bus-service\" class=\"headerlink\" title=\"1.3.1 El bus service\"></a>1.3.1 El bus service</h3><p>Este servicio del fichero <code>bus.service.ts</code> es la implementación más sencilla del patrón <em>Redux</em> que he podido crear. Se basa en utilizar la librería <code>RxJs</code> para emitir cambios en el estado de un modelo; y que otro servicio pueda subscribirse para ser notificado de dichos cambios.</p><p>El emisor será el componente <code>CredentialsComponent</code> que envía las credenciales al servidor y recibe el <em>token</em>. El subscriptor será el servicio de interceptación <code>TokenInterceptorService</code> que usará dicho <em>token</em> para identificar al usuario actual en todas las llamadas al servidor. Y en el medio está el <code>BusService</code> que actúa de enlace entre ambos. Este es el código necesario en el fichero <code>bus.service.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> userToken$ = <span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">any</span>&gt;();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> getUserToken$(): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.userToken$.asObservable();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> emitUserToken(userToken: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.userToken$.next(userToken);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>El tipo genérico <code>Subject&lt;any&gt;</code> viene en la librería <code>rxjs/Subject</code> y es el hermano mayor del ya conocido <code>Observable&lt;any&gt;</code>. En este caso permite ademas <em>emitir</em> valores que recibirán los subscriptores. La suscripción puede realizarse directamente contra la instancia del <code>Subject</code>, pero lo recomendable es que dicha instancia sea privada y que sólo exponga una parte de su funcionalidad.</p><blockquote><p>Digamos que exponemos el <em>Observable</em> de sólo lectura obtenido mediante la función <code>.asObservable()</code>.</p></blockquote><h3 id=\"1-3-2-El-Token-Interceptor-Service\"><a href=\"#1-3-2-El-Token-Interceptor-Service\" class=\"headerlink\" title=\"1.3.2 El Token Interceptor Service\"></a>1.3.2 El Token Interceptor Service</h3><p>Ya sólo falta consumir ese <em>Observable</em> en el servicio interceptor <code>token-interceptor.service.ts</code>. Para ello me suscribo a los cambios emitidos desde el <code>BusService</code> y guardo el token que me envíen para su uso posterior.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> token: <span class=\"built_in\">string</span> = <span class=\"string\">\"InitialAuthorizationToken\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> busService: BusService</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.subscribeToTokenChanges();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> subscribeToTokenChanges() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.busService.getUserToken$().subscribe(<span class=\"keyword\">this</span>.setTokenIfAny.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> setTokenIfAny(data) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (data &amp;&amp; data.token) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.token = data.token;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h1 id=\"2-vigilancia\"><a href=\"#2-vigilancia\" class=\"headerlink\" title=\"2 vigilancia\"></a>2 vigilancia</h1><p>El servicio <code>TokenInterceptorService</code> se encarga de enviar el <em>token</em> actual en cada llamada que pasa por sus manos. Para ello implementa la interfaz <code>HttpInterceptor</code> en su método <code>intercept()</code> con la lógica suficiente para enviar el token en una cabecera acordada con el API. En este caso uso la estándar <code>Authorization</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> intercept(</div><div class=\"line\">  req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;,</div><div class=\"line\">  next: HttpHandler</div><div class=\"line\">): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> authorizationReq = <span class=\"keyword\">this</span>.setAuthHeader(req);</div><div class=\"line\">  <span class=\"keyword\">const</span> handledRequest = next.handle(authorizationReq);</div><div class=\"line\">  <span class=\"keyword\">return</span> handledRequest;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> setAuthHeader(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;): HttpRequest&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> authorization = <span class=\"string\">`Bearer <span class=\"subst\">$&#123;this.token&#125;</span>`</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> headers = req.headers.set(<span class=\"string\">\"Authorization\"</span>, authorization);</div><div class=\"line\">  <span class=\"keyword\">const</span> authorizationReq = req.clone(&#123; headers &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> authorizationReq;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>A parte de toda la <em>liturgia</em> a la que nos obliga el <code>HttpInterceptor</code>, al final la lógica es sencilla. Se trata de rellenar la cabecera con el token actual. Si es o no válido es algo que decidirá el servidor. Aquí simplemente envías lo que tienes.</p><blockquote><p>En Angular promueven el uso de funciones y datos <em>inmutables</em> de ahí que nos obliguen a clonar las cabeceras para modificarlas.</p></blockquote><p>Ya tenemos al usuario identificado y los datos se envían o reciben acompañados de una cabecera que el servidor interpreta como una firma; lo básico para un sistema mínimamente seguro. Sigue esta serie para crear tus <a href=\"../formularios-reactivos-con-Angular/\">formularios reactivos con Angular</a> mientras aprendes a programar con Angular6.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Flujo de datos entre componentes Angular","date":"2017-11-20T16:10:44.000Z","thumbnail":"/css/images/angular-5_4_flow.png","_content":"![Tutorial Angular5 4-Flow](/images/tutorial-angular-5_4_flow.png)\n\nLos formularios profesionales son complejos y **Angular ofrece soluciones de comunicación para pantallas complejas**. Favorece la implementación de buenas prácticas mediante el desarrollo de componentes atómicos y reutilizables.\n\nPero comunicar componentes no es tarea fácil y puede generar código difícil de seguir. La librería `@angular/forms` ofrece *tuberías de comunicación* para **mantener el flujo de datos bajo control**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/). Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en dos componentes.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/angular5/4-flow](https://github.com/AcademiaBinaria/angular5/tree/master/4-flow/cash-flow) \n\n\n# 1. Comunicación entre componentes de una página\n\nEs habitual crear un componente por página. Es muy común que esa página se complique. Y la solución a la complejidad es la **división en componentes y reparto de responsabilidade**s. \n\nPartiendo de un componente como era el `OperationsComponent` vemos que tenía asociadas dos tareas: recoger en un formulario y mostrar en una tabla los datos de operaciones financieras. Para repartir la responsabilidad creamos un componente, el `NewComponent`, para el formulario y otro, el `ListComponent`, para la tabla.\n\n>En la [implementación anterior del `NewComponent`](https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/new.component.ts) estaba todo pues no sabíamos como llevarlo a otro sitio y comunicar los componentes.\n\nLos datos han de guardarse y recuperarse en componentes distintos; tenemos **dos estrategias** para lograrlo. Tener **un único responsable o que cada componente se encargue** de sus datos.\n\n## 1.1 Controlador y presentadores\n\nLa estrategia de un controlador y múltiples presentadores es la más adecuada para la mayor parte de las situaciones. Es la que he escogido para este ejercicio.\n\nSe basa en que **el componente contenedor** `OperationsComponent` sea el **guardián del acceso** a los datos. Mientras que **los componentes presentadores** `NewComponent` y `ListComponent` **recibirán la información y notificarán los cambios** a su padre controlador.\n\nPara eso tienes que usar dos decoradores de Angular: `@Input()` y `@Output()`.\n\n### 1.1.1 @Input()\n\nPara que una vista muestre datos tiene que usar directivas como `{ {numberOfOperations} }` asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede **recibirlo desde el exterior**. La novedad es hacer que lo reciba vía *html*.\n\nEmpieza por decorar con `@Input()` la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo `list.component.ts`.\n\n```typescript\nexport class ListComponent implements OnInit {\n  @Input() public numberOfOperations = 0;\n  @Input() public operations: Operation[] = [];\n}\n```\n\nAhora puedes enviarle datos a este componente desde el *html* de su consumidor. Por ejemplo desde `operations.component.ts` le puedo enviar una constante o, mucho más interesante, el valor de una variable.\n\n```html\n<cf-list \n  [numberOfOperations]=\"numberOfOperations\" \n  [operations]=\"operations\" >\n</cf-list>\n```\n\nY en su clase controladora tenemos el código que almacena los datos. \n\n```typescript\nexport class OperationsComponent implements OnInit {\n  public numberOfOperations = 0;\n  public operations: Operation[] = [];\n}\n```\n\nEstoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. De esta forma es fácil y queda muy limpio el **envío de datos hacia abajo**. Pero, ¿y hacia arriba?.\n\n### 1.1.2 @Output()\n\nLos componentes de nivel inferior no sólo se dedican a presentar datos. También pueden crearlos, modificarlos o eliminarlos. Aunque no directamente; para hacerlo **comunican el cambio requerido al controlador de nivel superior**.\n\nPor ejemplo, el mismo componente `ListComponent` además de mostrar operaciones en una tabla permite borrar un registro. Bueno, realmente permite que el usuario diga que quiere borrar un registro. En su *html* tiene algo así:\n\n```html\n<tr *ngFor=\"let operation of operations\">\n  <td>{{ operation.description }}</td>\n  <td>{{ operation.kind }}</td>\n  <td>{{ operation.amount | number:'7.2-2' }}</td>\n  <td><button (click)=\"deleteOperation(operation)\">Delete</button></td>\n</tr>\n```\n\nClaramente el botón con el evento `(click)=\"deleteOperation(operation)\"` manifiesta una intención de borrar el registro. Pero el método del componente no actúa directamente con el array de datos. \n\n>Si lo hiciera haría difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación..\n\nEn su lugar, lo que hace es **emitir un evento**, confiando que alguien lo reciba y actúe en consecuencia. La emisión se realiza mediante el decorador `@Output() public delete`, sobre una propiedad que es un emisor de eventos *tipado*, `new EventEmitter<Operation>();`. El método `deleteOperation(operation)`, es un delegado al que llama la vista y usa dicho emisor para... ejem, emitir la señal hacia arriba.\n\n```typescript\nexport class ListComponent implements OnInit {\n  @Output() public delete = new EventEmitter<Operation>();\n\n  public deleteOperation(operation: Operation) {\n    this.delete.emit(operation);\n  }\n}\n```\n\nMientras tanto, **en el controlador principal la vista se subscribe al evento** `(delete)` como si este fuese un evento nativo. La instrucción que se ejecuta hace uso del argumento recibido en el identificador `$event` estándar del framework.\n\n```html\n<cf-list \n  [numberOfOperations]=\"0\" \n  [operations]=\"operations\" \n  (delete)=\"deleteOperation($event)\" >\n</cf-list>\n```\n\nEn el componente principal ya podemos operar con los datos. El método `deleteOperation(operation: Operation)` accede y modifica el valor del array `operations`. Cuando dicho array cambia en el componente principal lo notifica automáticamente hacia abajo; de nuevo hacia la lista.\n\n```typescript\nexport class OperationsComponent implements OnInit {\n  public numberOfOperations = 0;\n  public operations: Operation[] = [];\n\n  public deleteOperation(operation: Operation) {\n    const index = this.operations.indexOf(operation);\n    this.operations.splice(index, 1);\n    this.numberOfOperations = this.operations.length;\n  }\n}\n```\n\nDe esta manera se cierra el círculo. Los componentes de bajo nivel pueden **recibir datos para ser presentados o emitir eventos para modificarlos**. El componente de nivel superior es el **único responsable de obtener y actuar** sobre los datos.\n\n## 1.2 Múltiples controladores\n\nCuando las pantallas se hacen realmente complejas, empiezan a surgir **árboles de componentes** de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. \n\nLa solución en esos casos pasa porque **algunos componentes tengan su propio control de datos**. Para que esto tampoco te lleve a un caos incontrolable te enseñaré cómo resolverlo usando *Observables*. Pero eso será más adelante. \n\n# 2. Otras comunicaciones\n\n## 2.1 Comunicación entre distintas páginas\n\nEn las aplicaciones hay **comunicaciones de estado más allá de la página actual**. La comunicación entre páginas es responsabilidad del `@angular/router`.\n\nEn el [estado actual del componente `ItemComponent`](https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/item.component.ts) es capaz de recibir por parámetros una identificación de operación. Pero no tiene acceso al array de datos y por tanto no los puede mostrar ni interactuar con ellos.\n\nDesde luego necesita convertirse en un controlador, pero antes habrá que **bajar los datos a un nivel compartido entre páginas**. Lo haremos en próximos pasos. Primero mediante  [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) y después usando [Comunicaciones HTTP en Angular](../categories/Tutorial/Angular/).\n\n## 2.2 Comunicación entre estructuras\n\nOtra situación habitual es **comunicar la vista de negocio activa con elementos generales** de la página. Por ejemplo podrías querer mostrar el contador o un balance de operaciones en la barra del menú.\n\nEste tipo de comunicaciones también se resuelve mediante *Observables* y merece un capítulo especial. Por ahora tienes una aplicación en *Angular* que comunica datos y cambios entre componentes de una misma página. Sigue esta serie para añadirle [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/ng-4-Flujo-de-datos-entre-componentes-Angular.md","raw":"---\ntitle: Flujo de datos entre componentes Angular\npermalink: flujo-de-datos-entre-componentes-angular\ndate: 2017-11-20 17:10:44\ntags:  \n- Angular\n- Angular5\n- Angular2\n- Forms\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-5_4_flow.png\n---\n![Tutorial Angular5 4-Flow](/images/tutorial-angular-5_4_flow.png)\n\nLos formularios profesionales son complejos y **Angular ofrece soluciones de comunicación para pantallas complejas**. Favorece la implementación de buenas prácticas mediante el desarrollo de componentes atómicos y reutilizables.\n\nPero comunicar componentes no es tarea fácil y puede generar código difícil de seguir. La librería `@angular/forms` ofrece *tuberías de comunicación* para **mantener el flujo de datos bajo control**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/). Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en dos componentes.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/angular5/4-flow](https://github.com/AcademiaBinaria/angular5/tree/master/4-flow/cash-flow) \n\n\n# 1. Comunicación entre componentes de una página\n\nEs habitual crear un componente por página. Es muy común que esa página se complique. Y la solución a la complejidad es la **división en componentes y reparto de responsabilidade**s. \n\nPartiendo de un componente como era el `OperationsComponent` vemos que tenía asociadas dos tareas: recoger en un formulario y mostrar en una tabla los datos de operaciones financieras. Para repartir la responsabilidad creamos un componente, el `NewComponent`, para el formulario y otro, el `ListComponent`, para la tabla.\n\n>En la [implementación anterior del `NewComponent`](https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/new.component.ts) estaba todo pues no sabíamos como llevarlo a otro sitio y comunicar los componentes.\n\nLos datos han de guardarse y recuperarse en componentes distintos; tenemos **dos estrategias** para lograrlo. Tener **un único responsable o que cada componente se encargue** de sus datos.\n\n## 1.1 Controlador y presentadores\n\nLa estrategia de un controlador y múltiples presentadores es la más adecuada para la mayor parte de las situaciones. Es la que he escogido para este ejercicio.\n\nSe basa en que **el componente contenedor** `OperationsComponent` sea el **guardián del acceso** a los datos. Mientras que **los componentes presentadores** `NewComponent` y `ListComponent` **recibirán la información y notificarán los cambios** a su padre controlador.\n\nPara eso tienes que usar dos decoradores de Angular: `@Input()` y `@Output()`.\n\n### 1.1.1 @Input()\n\nPara que una vista muestre datos tiene que usar directivas como `{ {numberOfOperations} }` asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede **recibirlo desde el exterior**. La novedad es hacer que lo reciba vía *html*.\n\nEmpieza por decorar con `@Input()` la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo `list.component.ts`.\n\n```typescript\nexport class ListComponent implements OnInit {\n  @Input() public numberOfOperations = 0;\n  @Input() public operations: Operation[] = [];\n}\n```\n\nAhora puedes enviarle datos a este componente desde el *html* de su consumidor. Por ejemplo desde `operations.component.ts` le puedo enviar una constante o, mucho más interesante, el valor de una variable.\n\n```html\n<cf-list \n  [numberOfOperations]=\"numberOfOperations\" \n  [operations]=\"operations\" >\n</cf-list>\n```\n\nY en su clase controladora tenemos el código que almacena los datos. \n\n```typescript\nexport class OperationsComponent implements OnInit {\n  public numberOfOperations = 0;\n  public operations: Operation[] = [];\n}\n```\n\nEstoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. De esta forma es fácil y queda muy limpio el **envío de datos hacia abajo**. Pero, ¿y hacia arriba?.\n\n### 1.1.2 @Output()\n\nLos componentes de nivel inferior no sólo se dedican a presentar datos. También pueden crearlos, modificarlos o eliminarlos. Aunque no directamente; para hacerlo **comunican el cambio requerido al controlador de nivel superior**.\n\nPor ejemplo, el mismo componente `ListComponent` además de mostrar operaciones en una tabla permite borrar un registro. Bueno, realmente permite que el usuario diga que quiere borrar un registro. En su *html* tiene algo así:\n\n```html\n<tr *ngFor=\"let operation of operations\">\n  <td>{{ operation.description }}</td>\n  <td>{{ operation.kind }}</td>\n  <td>{{ operation.amount | number:'7.2-2' }}</td>\n  <td><button (click)=\"deleteOperation(operation)\">Delete</button></td>\n</tr>\n```\n\nClaramente el botón con el evento `(click)=\"deleteOperation(operation)\"` manifiesta una intención de borrar el registro. Pero el método del componente no actúa directamente con el array de datos. \n\n>Si lo hiciera haría difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación..\n\nEn su lugar, lo que hace es **emitir un evento**, confiando que alguien lo reciba y actúe en consecuencia. La emisión se realiza mediante el decorador `@Output() public delete`, sobre una propiedad que es un emisor de eventos *tipado*, `new EventEmitter<Operation>();`. El método `deleteOperation(operation)`, es un delegado al que llama la vista y usa dicho emisor para... ejem, emitir la señal hacia arriba.\n\n```typescript\nexport class ListComponent implements OnInit {\n  @Output() public delete = new EventEmitter<Operation>();\n\n  public deleteOperation(operation: Operation) {\n    this.delete.emit(operation);\n  }\n}\n```\n\nMientras tanto, **en el controlador principal la vista se subscribe al evento** `(delete)` como si este fuese un evento nativo. La instrucción que se ejecuta hace uso del argumento recibido en el identificador `$event` estándar del framework.\n\n```html\n<cf-list \n  [numberOfOperations]=\"0\" \n  [operations]=\"operations\" \n  (delete)=\"deleteOperation($event)\" >\n</cf-list>\n```\n\nEn el componente principal ya podemos operar con los datos. El método `deleteOperation(operation: Operation)` accede y modifica el valor del array `operations`. Cuando dicho array cambia en el componente principal lo notifica automáticamente hacia abajo; de nuevo hacia la lista.\n\n```typescript\nexport class OperationsComponent implements OnInit {\n  public numberOfOperations = 0;\n  public operations: Operation[] = [];\n\n  public deleteOperation(operation: Operation) {\n    const index = this.operations.indexOf(operation);\n    this.operations.splice(index, 1);\n    this.numberOfOperations = this.operations.length;\n  }\n}\n```\n\nDe esta manera se cierra el círculo. Los componentes de bajo nivel pueden **recibir datos para ser presentados o emitir eventos para modificarlos**. El componente de nivel superior es el **único responsable de obtener y actuar** sobre los datos.\n\n## 1.2 Múltiples controladores\n\nCuando las pantallas se hacen realmente complejas, empiezan a surgir **árboles de componentes** de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. \n\nLa solución en esos casos pasa porque **algunos componentes tengan su propio control de datos**. Para que esto tampoco te lleve a un caos incontrolable te enseñaré cómo resolverlo usando *Observables*. Pero eso será más adelante. \n\n# 2. Otras comunicaciones\n\n## 2.1 Comunicación entre distintas páginas\n\nEn las aplicaciones hay **comunicaciones de estado más allá de la página actual**. La comunicación entre páginas es responsabilidad del `@angular/router`.\n\nEn el [estado actual del componente `ItemComponent`](https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/item.component.ts) es capaz de recibir por parámetros una identificación de operación. Pero no tiene acceso al array de datos y por tanto no los puede mostrar ni interactuar con ellos.\n\nDesde luego necesita convertirse en un controlador, pero antes habrá que **bajar los datos a un nivel compartido entre páginas**. Lo haremos en próximos pasos. Primero mediante  [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) y después usando [Comunicaciones HTTP en Angular](../categories/Tutorial/Angular/).\n\n## 2.2 Comunicación entre estructuras\n\nOtra situación habitual es **comunicar la vista de negocio activa con elementos generales** de la página. Por ejemplo podrías querer mostrar el contador o un balance de operaciones en la barra del menú.\n\nEste tipo de comunicaciones también se resuelve mediante *Observables* y merece un capítulo especial. Por ahora tienes una aplicación en *Angular* que comunica datos y cambios entre componentes de una misma página. Sigue esta serie para añadirle [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"flujo-de-datos-entre-componentes-angular","published":1,"updated":"2017-12-20T09:17:19.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvin001viwd3a5fd3f8a","content":"<p><img src=\"/images/tutorial-angular-5_4_flow.png\" alt=\"Tutorial Angular5 4-Flow\"></p><p>Los formularios profesionales son complejos y <strong>Angular ofrece soluciones de comunicación para pantallas complejas</strong>. Favorece la implementación de buenas prácticas mediante el desarrollo de componentes atómicos y reutilizables.</p><p>Pero comunicar componentes no es tarea fácil y puede generar código difícil de seguir. La librería <code>@angular/forms</code> ofrece <em>tuberías de comunicación</em> para <strong>mantener el flujo de datos bajo control</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a>. Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en dos componentes.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/4-flow/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/4-flow</a></p></blockquote><h1 id=\"1-Comunicacion-entre-componentes-de-una-pagina\"><a href=\"#1-Comunicacion-entre-componentes-de-una-pagina\" class=\"headerlink\" title=\"1. Comunicación entre componentes de una página\"></a>1. Comunicación entre componentes de una página</h1><p>Es habitual crear un componente por página. Es muy común que esa página se complique. Y la solución a la complejidad es la <strong>división en componentes y reparto de responsabilidade</strong>s.</p><p>Partiendo de un componente como era el <code>OperationsComponent</code> vemos que tenía asociadas dos tareas: recoger en un formulario y mostrar en una tabla los datos de operaciones financieras. Para repartir la responsabilidad creamos un componente, el <code>NewComponent</code>, para el formulario y otro, el <code>ListComponent</code>, para la tabla.</p><blockquote><p>En la <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/new.component.ts\" target=\"_blank\" rel=\"external\">implementación anterior del <code>NewComponent</code></a> estaba todo pues no sabíamos como llevarlo a otro sitio y comunicar los componentes.</p></blockquote><p>Los datos han de guardarse y recuperarse en componentes distintos; tenemos <strong>dos estrategias</strong> para lograrlo. Tener <strong>un único responsable o que cada componente se encargue</strong> de sus datos.</p><h2 id=\"1-1-Controlador-y-presentadores\"><a href=\"#1-1-Controlador-y-presentadores\" class=\"headerlink\" title=\"1.1 Controlador y presentadores\"></a>1.1 Controlador y presentadores</h2><p>La estrategia de un controlador y múltiples presentadores es la más adecuada para la mayor parte de las situaciones. Es la que he escogido para este ejercicio.</p><p>Se basa en que <strong>el componente contenedor</strong> <code>OperationsComponent</code> sea el <strong>guardián del acceso</strong> a los datos. Mientras que <strong>los componentes presentadores</strong> <code>NewComponent</code> y <code>ListComponent</code> <strong>recibirán la información y notificarán los cambios</strong> a su padre controlador.</p><p>Para eso tienes que usar dos decoradores de Angular: <code>@Input()</code> y <code>@Output()</code>.</p><h3 id=\"1-1-1-Input\"><a href=\"#1-1-1-Input\" class=\"headerlink\" title=\"1.1.1 @Input()\"></a>1.1.1 @Input()</h3><p>Para que una vista muestre datos tiene que usar directivas como <code>{ {numberOfOperations} }</code> asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede <strong>recibirlo desde el exterior</strong>. La novedad es hacer que lo reciba vía <em>html</em>.</p><p>Empieza por decorar con <code>@Input()</code> la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo <code>list.component.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Ahora puedes enviarle datos a este componente desde el <em>html</em> de su consumidor. Por ejemplo desde <code>operations.component.ts</code> le puedo enviar una constante o, mucho más interesante, el valor de una variable.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cf-list</span> </span></div><div class=\"line\"><span class=\"tag\">  [<span class=\"attr\">numberOfOperations</span>]=<span class=\"string\">\"numberOfOperations\"</span> </span></div><div class=\"line\"><span class=\"tag\">  [<span class=\"attr\">operations</span>]=<span class=\"string\">\"operations\"</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">cf-list</span>&gt;</span></div></pre></td></tr></table></figure><p>Y en su clase controladora tenemos el código que almacena los datos.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Estoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. De esta forma es fácil y queda muy limpio el <strong>envío de datos hacia abajo</strong>. Pero, ¿y hacia arriba?.</p><h3 id=\"1-1-2-Output\"><a href=\"#1-1-2-Output\" class=\"headerlink\" title=\"1.1.2 @Output()\"></a>1.1.2 @Output()</h3><p>Los componentes de nivel inferior no sólo se dedican a presentar datos. También pueden crearlos, modificarlos o eliminarlos. Aunque no directamente; para hacerlo <strong>comunican el cambio requerido al controlador de nivel superior</strong>.</p><p>Por ejemplo, el mismo componente <code>ListComponent</code> además de mostrar operaciones en una tabla permite borrar un registro. Bueno, realmente permite que el usuario diga que quiere borrar un registro. En su <em>html</em> tiene algo así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let operation of operations\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.kind &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.amount | number:'7.2-2' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteOperation(operation)\"</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div></pre></td></tr></table></figure><p>Claramente el botón con el evento <code>(click)=&quot;deleteOperation(operation)&quot;</code> manifiesta una intención de borrar el registro. Pero el método del componente no actúa directamente con el array de datos.</p><blockquote><p>Si lo hiciera haría difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación..</p></blockquote><p>En su lugar, lo que hace es <strong>emitir un evento</strong>, confiando que alguien lo reciba y actúe en consecuencia. La emisión se realiza mediante el decorador <code>@Output() public delete</code>, sobre una propiedad que es un emisor de eventos <em>tipado</em>, <code>new EventEmitter&lt;Operation&gt;();</code>. El método <code>deleteOperation(operation)</code>, es un delegado al que llama la vista y usa dicho emisor para… ejem, emitir la señal hacia arriba.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"meta\">@Output</span>() <span class=\"keyword\">public</span> <span class=\"keyword\">delete</span> = <span class=\"keyword\">new</span> EventEmitter&lt;Operation&gt;();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.delete.emit(operation);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Mientras tanto, <strong>en el controlador principal la vista se subscribe al evento</strong> <code>(delete)</code> como si este fuese un evento nativo. La instrucción que se ejecuta hace uso del argumento recibido en el identificador <code>$event</code> estándar del framework.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cf-list</span> </span></div><div class=\"line\"><span class=\"tag\">  [<span class=\"attr\">numberOfOperations</span>]=<span class=\"string\">\"0\"</span> </span></div><div class=\"line\"><span class=\"tag\">  [<span class=\"attr\">operations</span>]=<span class=\"string\">\"operations\"</span> </span></div><div class=\"line\"><span class=\"tag\">  (<span class=\"attr\">delete</span>)=<span class=\"string\">\"deleteOperation($event)\"</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">cf-list</span>&gt;</span></div></pre></td></tr></table></figure><p>En el componente principal ya podemos operar con los datos. El método <code>deleteOperation(operation: Operation)</code> accede y modifica el valor del array <code>operations</code>. Cuando dicho array cambia en el componente principal lo notifica automáticamente hacia abajo; de nuevo hacia la lista.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.operations.indexOf(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.numberOfOperations = <span class=\"keyword\">this</span>.operations.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>De esta manera se cierra el círculo. Los componentes de bajo nivel pueden <strong>recibir datos para ser presentados o emitir eventos para modificarlos</strong>. El componente de nivel superior es el <strong>único responsable de obtener y actuar</strong> sobre los datos.</p><h2 id=\"1-2-Multiples-controladores\"><a href=\"#1-2-Multiples-controladores\" class=\"headerlink\" title=\"1.2 Múltiples controladores\"></a>1.2 Múltiples controladores</h2><p>Cuando las pantallas se hacen realmente complejas, empiezan a surgir <strong>árboles de componentes</strong> de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico.</p><p>La solución en esos casos pasa porque <strong>algunos componentes tengan su propio control de datos</strong>. Para que esto tampoco te lleve a un caos incontrolable te enseñaré cómo resolverlo usando <em>Observables</em>. Pero eso será más adelante.</p><h1 id=\"2-Otras-comunicaciones\"><a href=\"#2-Otras-comunicaciones\" class=\"headerlink\" title=\"2. Otras comunicaciones\"></a>2. Otras comunicaciones</h1><h2 id=\"2-1-Comunicacion-entre-distintas-paginas\"><a href=\"#2-1-Comunicacion-entre-distintas-paginas\" class=\"headerlink\" title=\"2.1 Comunicación entre distintas páginas\"></a>2.1 Comunicación entre distintas páginas</h2><p>En las aplicaciones hay <strong>comunicaciones de estado más allá de la página actual</strong>. La comunicación entre páginas es responsabilidad del <code>@angular/router</code>.</p><p>En el <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/item.component.ts\" target=\"_blank\" rel=\"external\">estado actual del componente <code>ItemComponent</code></a> es capaz de recibir por parámetros una identificación de operación. Pero no tiene acceso al array de datos y por tanto no los puede mostrar ni interactuar con ellos.</p><p>Desde luego necesita convertirse en un controlador, pero antes habrá que <strong>bajar los datos a un nivel compartido entre páginas</strong>. Lo haremos en próximos pasos. Primero mediante <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> y después usando <a href=\"../categories/Tutorial/Angular/\">Comunicaciones HTTP en Angular</a>.</p><h2 id=\"2-2-Comunicacion-entre-estructuras\"><a href=\"#2-2-Comunicacion-entre-estructuras\" class=\"headerlink\" title=\"2.2 Comunicación entre estructuras\"></a>2.2 Comunicación entre estructuras</h2><p>Otra situación habitual es <strong>comunicar la vista de negocio activa con elementos generales</strong> de la página. Por ejemplo podrías querer mostrar el contador o un balance de operaciones en la barra del menú.</p><p>Este tipo de comunicaciones también se resuelve mediante <em>Observables</em> y merece un capítulo especial. Por ahora tienes una aplicación en <em>Angular</em> que comunica datos y cambios entre componentes de una misma página. Sigue esta serie para añadirle <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> mientras aprendes a programar con Angular5.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-5_4_flow.png\" alt=\"Tutorial Angular5 4-Flow\"></p><p>Los formularios profesionales son complejos y <strong>Angular ofrece soluciones de comunicación para pantallas complejas</strong>. Favorece la implementación de buenas prácticas mediante el desarrollo de componentes atómicos y reutilizables.</p><p>Pero comunicar componentes no es tarea fácil y puede generar código difícil de seguir. La librería <code>@angular/forms</code> ofrece <em>tuberías de comunicación</em> para <strong>mantener el flujo de datos bajo control</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a>. Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en dos componentes.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/4-flow/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/4-flow</a></p></blockquote><h1 id=\"1-Comunicacion-entre-componentes-de-una-pagina\"><a href=\"#1-Comunicacion-entre-componentes-de-una-pagina\" class=\"headerlink\" title=\"1. Comunicación entre componentes de una página\"></a>1. Comunicación entre componentes de una página</h1><p>Es habitual crear un componente por página. Es muy común que esa página se complique. Y la solución a la complejidad es la <strong>división en componentes y reparto de responsabilidade</strong>s.</p><p>Partiendo de un componente como era el <code>OperationsComponent</code> vemos que tenía asociadas dos tareas: recoger en un formulario y mostrar en una tabla los datos de operaciones financieras. Para repartir la responsabilidad creamos un componente, el <code>NewComponent</code>, para el formulario y otro, el <code>ListComponent</code>, para la tabla.</p><blockquote><p>En la <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/new.component.ts\" target=\"_blank\" rel=\"external\">implementación anterior del <code>NewComponent</code></a> estaba todo pues no sabíamos como llevarlo a otro sitio y comunicar los componentes.</p></blockquote><p>Los datos han de guardarse y recuperarse en componentes distintos; tenemos <strong>dos estrategias</strong> para lograrlo. Tener <strong>un único responsable o que cada componente se encargue</strong> de sus datos.</p><h2 id=\"1-1-Controlador-y-presentadores\"><a href=\"#1-1-Controlador-y-presentadores\" class=\"headerlink\" title=\"1.1 Controlador y presentadores\"></a>1.1 Controlador y presentadores</h2><p>La estrategia de un controlador y múltiples presentadores es la más adecuada para la mayor parte de las situaciones. Es la que he escogido para este ejercicio.</p><p>Se basa en que <strong>el componente contenedor</strong> <code>OperationsComponent</code> sea el <strong>guardián del acceso</strong> a los datos. Mientras que <strong>los componentes presentadores</strong> <code>NewComponent</code> y <code>ListComponent</code> <strong>recibirán la información y notificarán los cambios</strong> a su padre controlador.</p><p>Para eso tienes que usar dos decoradores de Angular: <code>@Input()</code> y <code>@Output()</code>.</p><h3 id=\"1-1-1-Input\"><a href=\"#1-1-1-Input\" class=\"headerlink\" title=\"1.1.1 @Input()\"></a>1.1.1 @Input()</h3><p>Para que una vista muestre datos tiene que usar directivas como <code>{ {numberOfOperations} }</code> asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede <strong>recibirlo desde el exterior</strong>. La novedad es hacer que lo reciba vía <em>html</em>.</p><p>Empieza por decorar con <code>@Input()</code> la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo <code>list.component.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Ahora puedes enviarle datos a este componente desde el <em>html</em> de su consumidor. Por ejemplo desde <code>operations.component.ts</code> le puedo enviar una constante o, mucho más interesante, el valor de una variable.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cf-list</span> </span></div><div class=\"line\"><span class=\"tag\">  [<span class=\"attr\">numberOfOperations</span>]=<span class=\"string\">\"numberOfOperations\"</span> </span></div><div class=\"line\"><span class=\"tag\">  [<span class=\"attr\">operations</span>]=<span class=\"string\">\"operations\"</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">cf-list</span>&gt;</span></div></pre></td></tr></table></figure><p>Y en su clase controladora tenemos el código que almacena los datos.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Estoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. De esta forma es fácil y queda muy limpio el <strong>envío de datos hacia abajo</strong>. Pero, ¿y hacia arriba?.</p><h3 id=\"1-1-2-Output\"><a href=\"#1-1-2-Output\" class=\"headerlink\" title=\"1.1.2 @Output()\"></a>1.1.2 @Output()</h3><p>Los componentes de nivel inferior no sólo se dedican a presentar datos. También pueden crearlos, modificarlos o eliminarlos. Aunque no directamente; para hacerlo <strong>comunican el cambio requerido al controlador de nivel superior</strong>.</p><p>Por ejemplo, el mismo componente <code>ListComponent</code> además de mostrar operaciones en una tabla permite borrar un registro. Bueno, realmente permite que el usuario diga que quiere borrar un registro. En su <em>html</em> tiene algo así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let operation of operations\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.kind &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; operation.amount | number:'7.2-2' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteOperation(operation)\"</span>&gt;</span>Delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div></pre></td></tr></table></figure><p>Claramente el botón con el evento <code>(click)=&quot;deleteOperation(operation)&quot;</code> manifiesta una intención de borrar el registro. Pero el método del componente no actúa directamente con el array de datos.</p><blockquote><p>Si lo hiciera haría difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación..</p></blockquote><p>En su lugar, lo que hace es <strong>emitir un evento</strong>, confiando que alguien lo reciba y actúe en consecuencia. La emisión se realiza mediante el decorador <code>@Output() public delete</code>, sobre una propiedad que es un emisor de eventos <em>tipado</em>, <code>new EventEmitter&lt;Operation&gt;();</code>. El método <code>deleteOperation(operation)</code>, es un delegado al que llama la vista y usa dicho emisor para… ejem, emitir la señal hacia arriba.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ListComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"meta\">@Output</span>() <span class=\"keyword\">public</span> <span class=\"keyword\">delete</span> = <span class=\"keyword\">new</span> EventEmitter&lt;Operation&gt;();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.delete.emit(operation);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Mientras tanto, <strong>en el controlador principal la vista se subscribe al evento</strong> <code>(delete)</code> como si este fuese un evento nativo. La instrucción que se ejecuta hace uso del argumento recibido en el identificador <code>$event</code> estándar del framework.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cf-list</span> </span></div><div class=\"line\"><span class=\"tag\">  [<span class=\"attr\">numberOfOperations</span>]=<span class=\"string\">\"0\"</span> </span></div><div class=\"line\"><span class=\"tag\">  [<span class=\"attr\">operations</span>]=<span class=\"string\">\"operations\"</span> </span></div><div class=\"line\"><span class=\"tag\">  (<span class=\"attr\">delete</span>)=<span class=\"string\">\"deleteOperation($event)\"</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">cf-list</span>&gt;</span></div></pre></td></tr></table></figure><p>En el componente principal ya podemos operar con los datos. El método <code>deleteOperation(operation: Operation)</code> accede y modifica el valor del array <code>operations</code>. Cuando dicho array cambia en el componente principal lo notifica automáticamente hacia abajo; de nuevo hacia la lista.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsComponent <span class=\"keyword\">implements</span> OnInit &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> numberOfOperations = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> operations: Operation[] = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> deleteOperation(operation: Operation) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.operations.indexOf(operation);</div><div class=\"line\">    <span class=\"keyword\">this</span>.operations.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.numberOfOperations = <span class=\"keyword\">this</span>.operations.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>De esta manera se cierra el círculo. Los componentes de bajo nivel pueden <strong>recibir datos para ser presentados o emitir eventos para modificarlos</strong>. El componente de nivel superior es el <strong>único responsable de obtener y actuar</strong> sobre los datos.</p><h2 id=\"1-2-Multiples-controladores\"><a href=\"#1-2-Multiples-controladores\" class=\"headerlink\" title=\"1.2 Múltiples controladores\"></a>1.2 Múltiples controladores</h2><p>Cuando las pantallas se hacen realmente complejas, empiezan a surgir <strong>árboles de componentes</strong> de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico.</p><p>La solución en esos casos pasa porque <strong>algunos componentes tengan su propio control de datos</strong>. Para que esto tampoco te lleve a un caos incontrolable te enseñaré cómo resolverlo usando <em>Observables</em>. Pero eso será más adelante.</p><h1 id=\"2-Otras-comunicaciones\"><a href=\"#2-Otras-comunicaciones\" class=\"headerlink\" title=\"2. Otras comunicaciones\"></a>2. Otras comunicaciones</h1><h2 id=\"2-1-Comunicacion-entre-distintas-paginas\"><a href=\"#2-1-Comunicacion-entre-distintas-paginas\" class=\"headerlink\" title=\"2.1 Comunicación entre distintas páginas\"></a>2.1 Comunicación entre distintas páginas</h2><p>En las aplicaciones hay <strong>comunicaciones de estado más allá de la página actual</strong>. La comunicación entre páginas es responsabilidad del <code>@angular/router</code>.</p><p>En el <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/3-data/cash-flow/src/app/views/operations/item.component.ts\" target=\"_blank\" rel=\"external\">estado actual del componente <code>ItemComponent</code></a> es capaz de recibir por parámetros una identificación de operación. Pero no tiene acceso al array de datos y por tanto no los puede mostrar ni interactuar con ellos.</p><p>Desde luego necesita convertirse en un controlador, pero antes habrá que <strong>bajar los datos a un nivel compartido entre páginas</strong>. Lo haremos en próximos pasos. Primero mediante <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> y después usando <a href=\"../categories/Tutorial/Angular/\">Comunicaciones HTTP en Angular</a>.</p><h2 id=\"2-2-Comunicacion-entre-estructuras\"><a href=\"#2-2-Comunicacion-entre-estructuras\" class=\"headerlink\" title=\"2.2 Comunicación entre estructuras\"></a>2.2 Comunicación entre estructuras</h2><p>Otra situación habitual es <strong>comunicar la vista de negocio activa con elementos generales</strong> de la página. Por ejemplo podrías querer mostrar el contador o un balance de operaciones en la barra del menú.</p><p>Este tipo de comunicaciones también se resuelve mediante <em>Observables</em> y merece un capítulo especial. Por ahora tienes una aplicación en <em>Angular</em> que comunica datos y cambios entre componentes de una misma página. Sigue esta serie para añadirle <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> mientras aprendes a programar con Angular5.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Comunicaciones http en Angular","date":"2017-12-18T10:06:00.000Z","thumbnail":"/css/images/angular-5_6_http.png","_content":"\n![Tutorial Angular5 6-http](/images/tutorial-angular-5_6_http.png)\n\nLas comunicaciones _http_ son una pieza fundamental del desarrollo web, y en **Angular** siempre han sido fáciles y potentes. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas. Pero con la versión actual **consumir un servicio REST** vuelve a ser cosa de niños.\n\nClaro que para ello tendremos que jugar con los _observables_ y los servicios de la librería `@angular/common/http` con los que realizar **comunicaciones asíncronas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/). Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular5/6-http](https://github.com/AcademiaBinaria/angular5/tree/master/6-http/cash-flow)\n> El servicio REST se encuentra en _GitHub_: [AcademiaBinaria/ApiBase](https://github.com/AcademiaBinaria/ApiBase)\n\n# 1. El servicio HttpClient\n\nLa librería `@angular/common/http` trae el módulo `HttpClientModule` con el servicio inyectable `HttpClient` que debes declarar como dependencia en tus propios constructores.\n\nEn el fichero `operations.service.ts` tienes el código que reclama la dependencia y la configura con una ruta base obtenida de la configuración de `environment`. Queda algo así:\n\n```typescript\nexport class OperationsService {\n  private url = environment.apiUrl + \"pub/items/\";\n\n  constructor(private http: HttpClient) {}\n}\n```\n\nA partir de este momento sólo queda invocar los métodos REST en la propiedad `this.http`.\n\n## 1.1 Métodos REST\n\nPara cada verbo _http_ tenemos su método en el servicio `HttpClient`. Su primer parámetro será la url a la que invocar. Los métodos de envío reciben la carga en el segundo argumento, y la envían automáticamente como objetos _JSON_.\n\nUn ejemplo sencillo lo tienes en el servicio `OperationsService`.\n\n```typescript\n public getOperationsList$(): Observable<Operation[]> {\n   return this.http.get<Operation[]>(this.url);\n }\n public getOperationById$(id: string): Observable<Operation> {\n   return this.http.get<Operation>(this.url + id);\n }\n public saveOperation$(operation: Operation): Observable<any> {\n   return this.http.post(this.url, operation);\n }\n public deleteOperation$(operation: Operation): Observable<any> {\n   return this.http.delete(this.url + operation._id);\n }\n```\n\n> Cada método de negocio, configura la llamada de infraestructura; parece poca cosa. Podría ser un buen sitio para validar la información antes de ser enviada, o quizás agrupar varias llamadas de red para una misma operación de negocio. El _dolar_ al final del nombre es un convenio para las funciones que devuelven observables.\n\n# 2 Observables\n\nLas **comunicaciones** entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.\n\nEsta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones _AJAX_ basadas en el paso de funciones _callback_. La aparición de las _promises_ mejoró la claridad del código, y ahora con los _Observables_ tenemos además una gran potencia para manipular la **información asíncrona**.\n\n> El patrón `Observable` fue implementado por Microsoft en la librería [_Reactive Extensions_](http://reactivex.io/intro.html) más conocida como `RxJs`. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.\n\nLo primero es importar el código, esto se hace forma similar a cualquier otra clase o función. Para empezar basta con `import { Observable } from \"rxjs/Observable\";`.\n\nEsta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan `: Observable<Operation>`, o si no saben que tipo esperar se conforman con `: Observable<any>`.\n\nEn cualquier caso, **toda operación asíncrona retornará una instancia observable** a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine. Por limpieza eso debes hacerlo en los componentes que consuman el servicio, no en el propio servicio.\n\n## 2.1 Lectura\n\nEn `operations.component` están las llamadas y las suscripciones necesarias. Por ejemplo el método `refreshData()` realiza llamadas y se suscribe para conocer los resultados. Cada suscripción es un _callback_ al que habrá que pasarle el contexto mediante `.bind(this)`.\n\n```typescript\nprivate refreshData() {\n  this.message = `Refreshing Data`;\n  this.fullError = null;\n  this.operationsService\n    .getOperationsList$()\n    .subscribe(this.showOperations.bind(this), this.catchError.bind(this));\n  this.operationsService\n    .getNumberOfOperations$()\n    .subscribe(this.showCount.bind(this), this.catchError.bind(this));\n}\nprivate showOperations(operations: Operation[]) {\n  this.operations = operations;\n  this.message = `operations Ok`;\n}\nprivate showCount(data: any) {\n  this.numberOfOperations = data.count;\n  this.message = `count Ok`;\n}\nprivate catchError(err) {\n  if (err instanceof HttpErrorResponse) {\n    this.message = `Http Error: ${err.status}, text: ${err.statusText}`;\n  } else {\n    this.message = `Unknown error, text: ${err.message}`;\n  }\n  this.fullError = err;\n}\n```\n\nEl método `subscribe` recibe hasta tres argumentos (ok, error, fin) donde colocar funciones receptoras para cada tipo de evento que ocurra. Sólo el primero es obligatorio, y es en el que recibes la información directamente desempaquetada. En el segundo, normalmente pondrás lógica para responder ante códigos de error devueltos por el servidor. Es opcional porque hay técnicas para gestionarlos de manera centralizada pero en este ejemplo te muestro con detalle cómo tratar y analizar los eventos de error.\n\n> Recordatorio para novatos: Es importante comprender la naturaleza asíncrona de estas operaciones. El código de las funciones subscritas se ejecutará en el futuro, no de una manera secuencial.\n\n## 2.2 Escritura\n\nSi lo que quieres es enviar objetos a un servidor, por ejemplo mediante el verbo _POST_, sólo tienes que pasarle la _payload_ al método de negocio y suscribirte a la respuesta.\n\n```typescript\npublic saveOperation(operation: Operation) {\n this.operationsService\n   .saveOperation$(operation)\n   .subscribe(data => this.refreshData());\n}\n```\n\n> De nuevo, fíjate como refrescamos los datos una vez recibida la respuesta. Hacerlo antes podría dar lugar a respuestas incongruentes. En este caso no es la respuesta en sí lo que interesa, sino el hecho de haya terminado bien.\n\n# 3 Interceptores\n\nAngular ha incorporado recientemente el concepto de interceptor que había funcionado muy bien en *AngularJS*. Ahora los interceptores son clases con métodos que interceptan (de ahí su nombre) todas las peticiones http realizadas. En esos métodos puedes poner lógica que modifique, cancele o simplemente controle el ciclo petición/respuesta de cada llamada.\n\n## 3.1 Implementación de la interfaz\n\nAprovechando el **TypeScript** y sus características de programación orientada a objetos, en **Angular** han optado por obligarnos a cumplir _interfaces_ y como contraparte al cumplir ese contrato invocan a nuestro código en circunstancias controladas. ¿Cómo se hace?.\n\nPara empezar hay que crear un servicio inyectable en un módulo general o en el raíz. Yo he creado el `CatchInterceptorService` en `lib/catch-interceptor.service.ts`. Ten a mano [este enlace](https://github.com/AcademiaBinaria/angular5/blob/master/6-http/cash-flow/src/app/lib/catch-interceptor.service.ts) para seguir el retos del artículo. Su propósito será capturar las respuestas y gestionar de forma centralizada los errores que se obtengan en un único lugar. Como cualquier otro inyectable habrá que proveerlo en un módulo, yo lo hice en el raíz. Si abres el `app.module.ts` verás un sistema de aprovisionamiento algo complejo.\n\n```typescript\nproviders: [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: CatchInterceptorService,\n    multi: true\n  }\n];\n```\n\nLa dependencia que se solicitará es `HTTP_INTERCEPTORS`, y cuando alguien lo haga (son los servicios de http de Angular a bajo nivel) le será inyectada una instancia de la clase `CatchInterceptorService`.\n\n> Es decir, tu clase interceptora será usada sin que el que la reclame conozca siquiera su nombre. Pero esto es la clave de la inversión de control en la inyección de dependencias.\n\nEl parámetro `multi: true`, indica que puedes crear tantas clases de interceptación como quieras. Esto permite tener múltiples interceptores especializados.\n\n## 3.2 El método de interceptación\n\nAl implementar la interfaz `HttpInterceptor` estás obligado a crear un método con una firma como esta: `public intercept(req, next)`. Este será invocado para cada llamada que hecha con `httpClient`. A esta función se la conoce como _función interceptora_ y ya ves que tiene unos argumentos y un tipo de retorno bien definidos... y algo complejos a primera vista. Veamos una implementación mínimalista.\n\n```typescript\npublic intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n  return next.handle(req);\n}\n```\n\nLo que dice es que recibe un puntero a la petición en curso, `req: HttpRequest<any>`, y otro a la siguiente clase que la procese,`next: HttpHandler`. También obliga a devolver un observable; lógico porque esto es en último término a lo que te suscribes en tu código de negocio. Afortunadamente el método `handle(req: HttpRequest<any>)` de cualquiera que sea la siguiente clase procesadora retorna un observable. Y así se da continuidad al flujo de la llamada.\n\n## 3.3 Los operadores observables\n\nAdemás de tipos de datos como `Observable<any>` con métodos clave como `.subscribe(ok, err, end)`, la librería _RxJs_ viene cargadita de [operadores](http://reactivex.io/documentation/operators.html) que... operan sobre instancias de los observables. Esos operadores son funciones que reciben y retornan observables.\n\nPodemos ver a los observables como _streams_, es decir una corriente de datos que circula por una tubería. Los operadores serán funciones que afecten al contenido o al caudal y que se pueden agregar o eliminar ordenadamente de la tubería. Una de esas operaciones se llama `tap`, un grifo.\n\n> Nota: este operador fue anteriormente conocido como `do`.[Ver documentación operador do](http://reactivex.io/documentation/operators/do.html).\n\nLa operación `tap` se usa cuando se quiere actuar ante un cambio en el contenido o caudal pero sin cambiarlo. Para mi es adecuada porque lo que pretendo es auditar las llamadas y enterarme de los errores sin tocar absolutamente nada.\n\nEn base a todo lo anterior montaré unas sentencias como estas dentro de la función `intercept`:\n\n```typescript\nconst handledRequest = next.handle(req);\nconst successCallback = this.interceptResponse.bind(this);\nconst errorCallback = this.catchError.bind(this);\nconst interceptionOperator = tap<HttpEvent<any>>(\n  successCallback,\n  errorCallback\n);\nreturn handledRequest.pipe(interceptionOperator);\n```\n\nTómate tu tiempo para revisar cada línea. En primer lugar obtengo un puntero al _stream observable_ que es la petición en curso. Despues asigno dos funciones locales que actuarán como _callbacks_ para cuando lleguen datos o errores respectivamente. Preparo el operador `tap` de la librería observable asignádole ambos _callbacks_ y un tipo de retorno concreto en su genérico. Y por último mediante el método `pipe` engancho el operador a la tubería por la que circula el chorro. Respira y vuelve a leerlo.\n\n> Admito que si es tu primer contacto con este mundo de los observables este codigo pueda resultar complejo. La buena noticia es que este código es una especie de patrón o _snippet_ que puedes reutiliazar para casi cualquier interceptor. Sólo habrá que cambiar el operador y el trabajo interno de sus _callbacks_.\n\nCon esto tienes un sistema que envía a la consola información extra como la duración de las llamadas. Además inspecciona los errores en un único lugar. Esto puede incluso hacer innecesario que los componentes procesen errores.\n\nYa tenemos los datos almacenados en un servidor con el que nos comunicamos por _http_; aunque por ahora de forma anónima. Con el conocimiento actual de los observables, el _httpClient_ y los interceptores estamos a un paso de darle seguridad a las comunicaciones. Sigue esta serie para añadirle [vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/) mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-6-comunicaciones-http-en-angular.md","raw":"---\ntitle: Comunicaciones http en Angular\npermalink: comunicaciones-http-en-Angular\ndate: 2017-12-18 11:06:00\ntags:  \n- Angular\n- Angular5\n- Angular2\n- http\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-5_6_http.png\n---\n\n![Tutorial Angular5 6-http](/images/tutorial-angular-5_6_http.png)\n\nLas comunicaciones _http_ son una pieza fundamental del desarrollo web, y en **Angular** siempre han sido fáciles y potentes. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas. Pero con la versión actual **consumir un servicio REST** vuelve a ser cosa de niños.\n\nClaro que para ello tendremos que jugar con los _observables_ y los servicios de la librería `@angular/common/http` con los que realizar **comunicaciones asíncronas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/). Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular5/6-http](https://github.com/AcademiaBinaria/angular5/tree/master/6-http/cash-flow)\n> El servicio REST se encuentra en _GitHub_: [AcademiaBinaria/ApiBase](https://github.com/AcademiaBinaria/ApiBase)\n\n# 1. El servicio HttpClient\n\nLa librería `@angular/common/http` trae el módulo `HttpClientModule` con el servicio inyectable `HttpClient` que debes declarar como dependencia en tus propios constructores.\n\nEn el fichero `operations.service.ts` tienes el código que reclama la dependencia y la configura con una ruta base obtenida de la configuración de `environment`. Queda algo así:\n\n```typescript\nexport class OperationsService {\n  private url = environment.apiUrl + \"pub/items/\";\n\n  constructor(private http: HttpClient) {}\n}\n```\n\nA partir de este momento sólo queda invocar los métodos REST en la propiedad `this.http`.\n\n## 1.1 Métodos REST\n\nPara cada verbo _http_ tenemos su método en el servicio `HttpClient`. Su primer parámetro será la url a la que invocar. Los métodos de envío reciben la carga en el segundo argumento, y la envían automáticamente como objetos _JSON_.\n\nUn ejemplo sencillo lo tienes en el servicio `OperationsService`.\n\n```typescript\n public getOperationsList$(): Observable<Operation[]> {\n   return this.http.get<Operation[]>(this.url);\n }\n public getOperationById$(id: string): Observable<Operation> {\n   return this.http.get<Operation>(this.url + id);\n }\n public saveOperation$(operation: Operation): Observable<any> {\n   return this.http.post(this.url, operation);\n }\n public deleteOperation$(operation: Operation): Observable<any> {\n   return this.http.delete(this.url + operation._id);\n }\n```\n\n> Cada método de negocio, configura la llamada de infraestructura; parece poca cosa. Podría ser un buen sitio para validar la información antes de ser enviada, o quizás agrupar varias llamadas de red para una misma operación de negocio. El _dolar_ al final del nombre es un convenio para las funciones que devuelven observables.\n\n# 2 Observables\n\nLas **comunicaciones** entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.\n\nEsta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones _AJAX_ basadas en el paso de funciones _callback_. La aparición de las _promises_ mejoró la claridad del código, y ahora con los _Observables_ tenemos además una gran potencia para manipular la **información asíncrona**.\n\n> El patrón `Observable` fue implementado por Microsoft en la librería [_Reactive Extensions_](http://reactivex.io/intro.html) más conocida como `RxJs`. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.\n\nLo primero es importar el código, esto se hace forma similar a cualquier otra clase o función. Para empezar basta con `import { Observable } from \"rxjs/Observable\";`.\n\nEsta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan `: Observable<Operation>`, o si no saben que tipo esperar se conforman con `: Observable<any>`.\n\nEn cualquier caso, **toda operación asíncrona retornará una instancia observable** a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine. Por limpieza eso debes hacerlo en los componentes que consuman el servicio, no en el propio servicio.\n\n## 2.1 Lectura\n\nEn `operations.component` están las llamadas y las suscripciones necesarias. Por ejemplo el método `refreshData()` realiza llamadas y se suscribe para conocer los resultados. Cada suscripción es un _callback_ al que habrá que pasarle el contexto mediante `.bind(this)`.\n\n```typescript\nprivate refreshData() {\n  this.message = `Refreshing Data`;\n  this.fullError = null;\n  this.operationsService\n    .getOperationsList$()\n    .subscribe(this.showOperations.bind(this), this.catchError.bind(this));\n  this.operationsService\n    .getNumberOfOperations$()\n    .subscribe(this.showCount.bind(this), this.catchError.bind(this));\n}\nprivate showOperations(operations: Operation[]) {\n  this.operations = operations;\n  this.message = `operations Ok`;\n}\nprivate showCount(data: any) {\n  this.numberOfOperations = data.count;\n  this.message = `count Ok`;\n}\nprivate catchError(err) {\n  if (err instanceof HttpErrorResponse) {\n    this.message = `Http Error: ${err.status}, text: ${err.statusText}`;\n  } else {\n    this.message = `Unknown error, text: ${err.message}`;\n  }\n  this.fullError = err;\n}\n```\n\nEl método `subscribe` recibe hasta tres argumentos (ok, error, fin) donde colocar funciones receptoras para cada tipo de evento que ocurra. Sólo el primero es obligatorio, y es en el que recibes la información directamente desempaquetada. En el segundo, normalmente pondrás lógica para responder ante códigos de error devueltos por el servidor. Es opcional porque hay técnicas para gestionarlos de manera centralizada pero en este ejemplo te muestro con detalle cómo tratar y analizar los eventos de error.\n\n> Recordatorio para novatos: Es importante comprender la naturaleza asíncrona de estas operaciones. El código de las funciones subscritas se ejecutará en el futuro, no de una manera secuencial.\n\n## 2.2 Escritura\n\nSi lo que quieres es enviar objetos a un servidor, por ejemplo mediante el verbo _POST_, sólo tienes que pasarle la _payload_ al método de negocio y suscribirte a la respuesta.\n\n```typescript\npublic saveOperation(operation: Operation) {\n this.operationsService\n   .saveOperation$(operation)\n   .subscribe(data => this.refreshData());\n}\n```\n\n> De nuevo, fíjate como refrescamos los datos una vez recibida la respuesta. Hacerlo antes podría dar lugar a respuestas incongruentes. En este caso no es la respuesta en sí lo que interesa, sino el hecho de haya terminado bien.\n\n# 3 Interceptores\n\nAngular ha incorporado recientemente el concepto de interceptor que había funcionado muy bien en *AngularJS*. Ahora los interceptores son clases con métodos que interceptan (de ahí su nombre) todas las peticiones http realizadas. En esos métodos puedes poner lógica que modifique, cancele o simplemente controle el ciclo petición/respuesta de cada llamada.\n\n## 3.1 Implementación de la interfaz\n\nAprovechando el **TypeScript** y sus características de programación orientada a objetos, en **Angular** han optado por obligarnos a cumplir _interfaces_ y como contraparte al cumplir ese contrato invocan a nuestro código en circunstancias controladas. ¿Cómo se hace?.\n\nPara empezar hay que crear un servicio inyectable en un módulo general o en el raíz. Yo he creado el `CatchInterceptorService` en `lib/catch-interceptor.service.ts`. Ten a mano [este enlace](https://github.com/AcademiaBinaria/angular5/blob/master/6-http/cash-flow/src/app/lib/catch-interceptor.service.ts) para seguir el retos del artículo. Su propósito será capturar las respuestas y gestionar de forma centralizada los errores que se obtengan en un único lugar. Como cualquier otro inyectable habrá que proveerlo en un módulo, yo lo hice en el raíz. Si abres el `app.module.ts` verás un sistema de aprovisionamiento algo complejo.\n\n```typescript\nproviders: [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: CatchInterceptorService,\n    multi: true\n  }\n];\n```\n\nLa dependencia que se solicitará es `HTTP_INTERCEPTORS`, y cuando alguien lo haga (son los servicios de http de Angular a bajo nivel) le será inyectada una instancia de la clase `CatchInterceptorService`.\n\n> Es decir, tu clase interceptora será usada sin que el que la reclame conozca siquiera su nombre. Pero esto es la clave de la inversión de control en la inyección de dependencias.\n\nEl parámetro `multi: true`, indica que puedes crear tantas clases de interceptación como quieras. Esto permite tener múltiples interceptores especializados.\n\n## 3.2 El método de interceptación\n\nAl implementar la interfaz `HttpInterceptor` estás obligado a crear un método con una firma como esta: `public intercept(req, next)`. Este será invocado para cada llamada que hecha con `httpClient`. A esta función se la conoce como _función interceptora_ y ya ves que tiene unos argumentos y un tipo de retorno bien definidos... y algo complejos a primera vista. Veamos una implementación mínimalista.\n\n```typescript\npublic intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n  return next.handle(req);\n}\n```\n\nLo que dice es que recibe un puntero a la petición en curso, `req: HttpRequest<any>`, y otro a la siguiente clase que la procese,`next: HttpHandler`. También obliga a devolver un observable; lógico porque esto es en último término a lo que te suscribes en tu código de negocio. Afortunadamente el método `handle(req: HttpRequest<any>)` de cualquiera que sea la siguiente clase procesadora retorna un observable. Y así se da continuidad al flujo de la llamada.\n\n## 3.3 Los operadores observables\n\nAdemás de tipos de datos como `Observable<any>` con métodos clave como `.subscribe(ok, err, end)`, la librería _RxJs_ viene cargadita de [operadores](http://reactivex.io/documentation/operators.html) que... operan sobre instancias de los observables. Esos operadores son funciones que reciben y retornan observables.\n\nPodemos ver a los observables como _streams_, es decir una corriente de datos que circula por una tubería. Los operadores serán funciones que afecten al contenido o al caudal y que se pueden agregar o eliminar ordenadamente de la tubería. Una de esas operaciones se llama `tap`, un grifo.\n\n> Nota: este operador fue anteriormente conocido como `do`.[Ver documentación operador do](http://reactivex.io/documentation/operators/do.html).\n\nLa operación `tap` se usa cuando se quiere actuar ante un cambio en el contenido o caudal pero sin cambiarlo. Para mi es adecuada porque lo que pretendo es auditar las llamadas y enterarme de los errores sin tocar absolutamente nada.\n\nEn base a todo lo anterior montaré unas sentencias como estas dentro de la función `intercept`:\n\n```typescript\nconst handledRequest = next.handle(req);\nconst successCallback = this.interceptResponse.bind(this);\nconst errorCallback = this.catchError.bind(this);\nconst interceptionOperator = tap<HttpEvent<any>>(\n  successCallback,\n  errorCallback\n);\nreturn handledRequest.pipe(interceptionOperator);\n```\n\nTómate tu tiempo para revisar cada línea. En primer lugar obtengo un puntero al _stream observable_ que es la petición en curso. Despues asigno dos funciones locales que actuarán como _callbacks_ para cuando lleguen datos o errores respectivamente. Preparo el operador `tap` de la librería observable asignádole ambos _callbacks_ y un tipo de retorno concreto en su genérico. Y por último mediante el método `pipe` engancho el operador a la tubería por la que circula el chorro. Respira y vuelve a leerlo.\n\n> Admito que si es tu primer contacto con este mundo de los observables este codigo pueda resultar complejo. La buena noticia es que este código es una especie de patrón o _snippet_ que puedes reutiliazar para casi cualquier interceptor. Sólo habrá que cambiar el operador y el trabajo interno de sus _callbacks_.\n\nCon esto tienes un sistema que envía a la consola información extra como la duración de las llamadas. Además inspecciona los errores en un único lugar. Esto puede incluso hacer innecesario que los componentes procesen errores.\n\nYa tenemos los datos almacenados en un servidor con el que nos comunicamos por _http_; aunque por ahora de forma anónima. Con el conocimiento actual de los observables, el _httpClient_ y los interceptores estamos a un paso de darle seguridad a las comunicaciones. Sigue esta serie para añadirle [vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/) mientras aprendes a programar con Angular5.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"comunicaciones-http-en-Angular","published":1,"updated":"2017-12-29T11:28:48.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvin001ziwd3551c6s4a","content":"<p><img src=\"/images/tutorial-angular-5_6_http.png\" alt=\"Tutorial Angular5 6-http\"></p><p>Las comunicaciones <em>http</em> son una pieza fundamental del desarrollo web, y en <strong>Angular</strong> siempre han sido fáciles y potentes. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas. Pero con la versión actual <strong>consumir un servicio REST</strong> vuelve a ser cosa de niños.</p><p>Claro que para ello tendremos que jugar con los <em>observables</em> y los servicios de la librería <code>@angular/common/http</code> con los que realizar <strong>comunicaciones asíncronas en Angular</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a>. Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/6-http/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/6-http</a><br>El servicio REST se encuentra en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/ApiBase\" target=\"_blank\" rel=\"external\">AcademiaBinaria/ApiBase</a></p></blockquote><h1 id=\"1-El-servicio-HttpClient\"><a href=\"#1-El-servicio-HttpClient\" class=\"headerlink\" title=\"1. El servicio HttpClient\"></a>1. El servicio HttpClient</h1><p>La librería <code>@angular/common/http</code> trae el módulo <code>HttpClientModule</code> con el servicio inyectable <code>HttpClient</code> que debes declarar como dependencia en tus propios constructores.</p><p>En el fichero <code>operations.service.ts</code> tienes el código que reclama la dependencia y la configura con una ruta base obtenida de la configuración de <code>environment</code>. Queda algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsService &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> url = environment.apiUrl + <span class=\"string\">\"pub/items/\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: HttpClient</span>) &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>A partir de este momento sólo queda invocar los métodos REST en la propiedad <code>this.http</code>.</p><h2 id=\"1-1-Metodos-REST\"><a href=\"#1-1-Metodos-REST\" class=\"headerlink\" title=\"1.1 Métodos REST\"></a>1.1 Métodos REST</h2><p>Para cada verbo <em>http</em> tenemos su método en el servicio <code>HttpClient</code>. Su primer parámetro será la url a la que invocar. Los métodos de envío reciben la carga en el segundo argumento, y la envían automáticamente como objetos <em>JSON</em>.</p><p>Un ejemplo sencillo lo tienes en el servicio <code>OperationsService</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> getOperationsList$(): Observable&lt;Operation[]&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get&lt;Operation[]&gt;(<span class=\"keyword\">this</span>.url);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> getOperationById$(id: <span class=\"built_in\">string</span>): Observable&lt;Operation&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get&lt;Operation&gt;(<span class=\"keyword\">this</span>.url + id);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> saveOperation$(operation: Operation): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.post(<span class=\"keyword\">this</span>.url, operation);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> deleteOperation$(operation: Operation): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.delete(<span class=\"keyword\">this</span>.url + operation._id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>Cada método de negocio, configura la llamada de infraestructura; parece poca cosa. Podría ser un buen sitio para validar la información antes de ser enviada, o quizás agrupar varias llamadas de red para una misma operación de negocio. El <em>dolar</em> al final del nombre es un convenio para las funciones que devuelven observables.</p></blockquote><h1 id=\"2-Observables\"><a href=\"#2-Observables\" class=\"headerlink\" title=\"2 Observables\"></a>2 Observables</h1><p>Las <strong>comunicaciones</strong> entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.</p><p>Esta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones <em>AJAX</em> basadas en el paso de funciones <em>callback</em>. La aparición de las <em>promises</em> mejoró la claridad del código, y ahora con los <em>Observables</em> tenemos además una gran potencia para manipular la <strong>información asíncrona</strong>.</p><blockquote><p>El patrón <code>Observable</code> fue implementado por Microsoft en la librería <a href=\"http://reactivex.io/intro.html\" target=\"_blank\" rel=\"external\"><em>Reactive Extensions</em></a> más conocida como <code>RxJs</code>. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.</p></blockquote><p>Lo primero es importar el código, esto se hace forma similar a cualquier otra clase o función. Para empezar basta con <code>import { Observable } from &quot;rxjs/Observable&quot;;</code>.</p><p>Esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan <code>: Observable&lt;Operation&gt;</code>, o si no saben que tipo esperar se conforman con <code>: Observable&lt;any&gt;</code>.</p><p>En cualquier caso, <strong>toda operación asíncrona retornará una instancia observable</strong> a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine. Por limpieza eso debes hacerlo en los componentes que consuman el servicio, no en el propio servicio.</p><h2 id=\"2-1-Lectura\"><a href=\"#2-1-Lectura\" class=\"headerlink\" title=\"2.1 Lectura\"></a>2.1 Lectura</h2><p>En <code>operations.component</code> están las llamadas y las suscripciones necesarias. Por ejemplo el método <code>refreshData()</code> realiza llamadas y se suscribe para conocer los resultados. Cada suscripción es un <em>callback</em> al que habrá que pasarle el contexto mediante <code>.bind(this)</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> refreshData() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.message = <span class=\"string\">`Refreshing Data`</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.fullError = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.operationsService</div><div class=\"line\">    .getOperationsList$()</div><div class=\"line\">    .subscribe(<span class=\"keyword\">this</span>.showOperations.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.catchError.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">  <span class=\"keyword\">this</span>.operationsService</div><div class=\"line\">    .getNumberOfOperations$()</div><div class=\"line\">    .subscribe(<span class=\"keyword\">this</span>.showCount.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.catchError.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> showOperations(operations: Operation[]) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.operations = operations;</div><div class=\"line\">  <span class=\"keyword\">this</span>.message = <span class=\"string\">`operations Ok`</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> showCount(data: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.numberOfOperations = data.count;</div><div class=\"line\">  <span class=\"keyword\">this</span>.message = <span class=\"string\">`count Ok`</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> catchError(err) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> HttpErrorResponse) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.message = <span class=\"string\">`Http Error: <span class=\"subst\">$&#123;err.status&#125;</span>, text: <span class=\"subst\">$&#123;err.statusText&#125;</span>`</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.message = <span class=\"string\">`Unknown error, text: <span class=\"subst\">$&#123;err.message&#125;</span>`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">this</span>.fullError = err;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>El método <code>subscribe</code> recibe hasta tres argumentos (ok, error, fin) donde colocar funciones receptoras para cada tipo de evento que ocurra. Sólo el primero es obligatorio, y es en el que recibes la información directamente desempaquetada. En el segundo, normalmente pondrás lógica para responder ante códigos de error devueltos por el servidor. Es opcional porque hay técnicas para gestionarlos de manera centralizada pero en este ejemplo te muestro con detalle cómo tratar y analizar los eventos de error.</p><blockquote><p>Recordatorio para novatos: Es importante comprender la naturaleza asíncrona de estas operaciones. El código de las funciones subscritas se ejecutará en el futuro, no de una manera secuencial.</p></blockquote><h2 id=\"2-2-Escritura\"><a href=\"#2-2-Escritura\" class=\"headerlink\" title=\"2.2 Escritura\"></a>2.2 Escritura</h2><p>Si lo que quieres es enviar objetos a un servidor, por ejemplo mediante el verbo <em>POST</em>, sólo tienes que pasarle la <em>payload</em> al método de negocio y suscribirte a la respuesta.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> saveOperation(operation: Operation) &#123;</div><div class=\"line\"> <span class=\"keyword\">this</span>.operationsService</div><div class=\"line\">   .saveOperation$(operation)</div><div class=\"line\">   .subscribe(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"keyword\">this</span>.refreshData());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>De nuevo, fíjate como refrescamos los datos una vez recibida la respuesta. Hacerlo antes podría dar lugar a respuestas incongruentes. En este caso no es la respuesta en sí lo que interesa, sino el hecho de haya terminado bien.</p></blockquote><h1 id=\"3-Interceptores\"><a href=\"#3-Interceptores\" class=\"headerlink\" title=\"3 Interceptores\"></a>3 Interceptores</h1><p>Angular ha incorporado recientemente el concepto de interceptor que había funcionado muy bien en <em>AngularJS</em>. Ahora los interceptores son clases con métodos que interceptan (de ahí su nombre) todas las peticiones http realizadas. En esos métodos puedes poner lógica que modifique, cancele o simplemente controle el ciclo petición/respuesta de cada llamada.</p><h2 id=\"3-1-Implementacion-de-la-interfaz\"><a href=\"#3-1-Implementacion-de-la-interfaz\" class=\"headerlink\" title=\"3.1 Implementación de la interfaz\"></a>3.1 Implementación de la interfaz</h2><p>Aprovechando el <strong>TypeScript</strong> y sus características de programación orientada a objetos, en <strong>Angular</strong> han optado por obligarnos a cumplir <em>interfaces</em> y como contraparte al cumplir ese contrato invocan a nuestro código en circunstancias controladas. ¿Cómo se hace?.</p><p>Para empezar hay que crear un servicio inyectable en un módulo general o en el raíz. Yo he creado el <code>CatchInterceptorService</code> en <code>lib/catch-interceptor.service.ts</code>. Ten a mano <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/6-http/cash-flow/src/app/lib/catch-interceptor.service.ts\" target=\"_blank\" rel=\"external\">este enlace</a> para seguir el retos del artículo. Su propósito será capturar las respuestas y gestionar de forma centralizada los errores que se obtengan en un único lugar. Como cualquier otro inyectable habrá que proveerlo en un módulo, yo lo hice en el raíz. Si abres el <code>app.module.ts</code> verás un sistema de aprovisionamiento algo complejo.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">providers: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    provide: HTTP_INTERCEPTORS,</div><div class=\"line\">    useClass: CatchInterceptorService,</div><div class=\"line\">    multi: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure><p>La dependencia que se solicitará es <code>HTTP_INTERCEPTORS</code>, y cuando alguien lo haga (son los servicios de http de Angular a bajo nivel) le será inyectada una instancia de la clase <code>CatchInterceptorService</code>.</p><blockquote><p>Es decir, tu clase interceptora será usada sin que el que la reclame conozca siquiera su nombre. Pero esto es la clave de la inversión de control en la inyección de dependencias.</p></blockquote><p>El parámetro <code>multi: true</code>, indica que puedes crear tantas clases de interceptación como quieras. Esto permite tener múltiples interceptores especializados.</p><h2 id=\"3-2-El-metodo-de-interceptacion\"><a href=\"#3-2-El-metodo-de-interceptacion\" class=\"headerlink\" title=\"3.2 El método de interceptación\"></a>3.2 El método de interceptación</h2><p>Al implementar la interfaz <code>HttpInterceptor</code> estás obligado a crear un método con una firma como esta: <code>public intercept(req, next)</code>. Este será invocado para cada llamada que hecha con <code>httpClient</code>. A esta función se la conoce como <em>función interceptora</em> y ya ves que tiene unos argumentos y un tipo de retorno bien definidos… y algo complejos a primera vista. Veamos una implementación mínimalista.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> next.handle(req);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Lo que dice es que recibe un puntero a la petición en curso, <code>req: HttpRequest&lt;any&gt;</code>, y otro a la siguiente clase que la procese,<code>next: HttpHandler</code>. También obliga a devolver un observable; lógico porque esto es en último término a lo que te suscribes en tu código de negocio. Afortunadamente el método <code>handle(req: HttpRequest&lt;any&gt;)</code> de cualquiera que sea la siguiente clase procesadora retorna un observable. Y así se da continuidad al flujo de la llamada.</p><h2 id=\"3-3-Los-operadores-observables\"><a href=\"#3-3-Los-operadores-observables\" class=\"headerlink\" title=\"3.3 Los operadores observables\"></a>3.3 Los operadores observables</h2><p>Además de tipos de datos como <code>Observable&lt;any&gt;</code> con métodos clave como <code>.subscribe(ok, err, end)</code>, la librería <em>RxJs</em> viene cargadita de <a href=\"http://reactivex.io/documentation/operators.html\" target=\"_blank\" rel=\"external\">operadores</a> que… operan sobre instancias de los observables. Esos operadores son funciones que reciben y retornan observables.</p><p>Podemos ver a los observables como <em>streams</em>, es decir una corriente de datos que circula por una tubería. Los operadores serán funciones que afecten al contenido o al caudal y que se pueden agregar o eliminar ordenadamente de la tubería. Una de esas operaciones se llama <code>tap</code>, un grifo.</p><blockquote><p>Nota: este operador fue anteriormente conocido como <code>do</code>.<a href=\"http://reactivex.io/documentation/operators/do.html\" target=\"_blank\" rel=\"external\">Ver documentación operador do</a>.</p></blockquote><p>La operación <code>tap</code> se usa cuando se quiere actuar ante un cambio en el contenido o caudal pero sin cambiarlo. Para mi es adecuada porque lo que pretendo es auditar las llamadas y enterarme de los errores sin tocar absolutamente nada.</p><p>En base a todo lo anterior montaré unas sentencias como estas dentro de la función <code>intercept</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> handledRequest = next.handle(req);</div><div class=\"line\"><span class=\"keyword\">const</span> successCallback = <span class=\"keyword\">this</span>.interceptResponse.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> errorCallback = <span class=\"keyword\">this</span>.catchError.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> interceptionOperator = tap&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt;(</div><div class=\"line\">  successCallback,</div><div class=\"line\">  errorCallback</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">return</span> handledRequest.pipe(interceptionOperator);</div></pre></td></tr></table></figure><p>Tómate tu tiempo para revisar cada línea. En primer lugar obtengo un puntero al <em>stream observable</em> que es la petición en curso. Despues asigno dos funciones locales que actuarán como <em>callbacks</em> para cuando lleguen datos o errores respectivamente. Preparo el operador <code>tap</code> de la librería observable asignádole ambos <em>callbacks</em> y un tipo de retorno concreto en su genérico. Y por último mediante el método <code>pipe</code> engancho el operador a la tubería por la que circula el chorro. Respira y vuelve a leerlo.</p><blockquote><p>Admito que si es tu primer contacto con este mundo de los observables este codigo pueda resultar complejo. La buena noticia es que este código es una especie de patrón o <em>snippet</em> que puedes reutiliazar para casi cualquier interceptor. Sólo habrá que cambiar el operador y el trabajo interno de sus <em>callbacks</em>.</p></blockquote><p>Con esto tienes un sistema que envía a la consola información extra como la duración de las llamadas. Además inspecciona los errores en un único lugar. Esto puede incluso hacer innecesario que los componentes procesen errores.</p><p>Ya tenemos los datos almacenados en un servidor con el que nos comunicamos por <em>http</em>; aunque por ahora de forma anónima. Con el conocimiento actual de los observables, el <em>httpClient</em> y los interceptores estamos a un paso de darle seguridad a las comunicaciones. Sigue esta serie para añadirle <a href=\"../vigilancia-y-seguridad-en-Angular/\">vigilancia y seguridad en Angular</a> mientras aprendes a programar con Angular5.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-5_6_http.png\" alt=\"Tutorial Angular5 6-http\"></p><p>Las comunicaciones <em>http</em> son una pieza fundamental del desarrollo web, y en <strong>Angular</strong> siempre han sido fáciles y potentes. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas. Pero con la versión actual <strong>consumir un servicio REST</strong> vuelve a ser cosa de niños.</p><p>Claro que para ello tendremos que jugar con los <em>observables</em> y los servicios de la librería <code>@angular/common/http</code> con los que realizar <strong>comunicaciones asíncronas en Angular</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a>. Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular5/tree/master/6-http/cash-flow\" target=\"_blank\" rel=\"external\">AcademiaBinaria/angular5/6-http</a><br>El servicio REST se encuentra en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/ApiBase\" target=\"_blank\" rel=\"external\">AcademiaBinaria/ApiBase</a></p></blockquote><h1 id=\"1-El-servicio-HttpClient\"><a href=\"#1-El-servicio-HttpClient\" class=\"headerlink\" title=\"1. El servicio HttpClient\"></a>1. El servicio HttpClient</h1><p>La librería <code>@angular/common/http</code> trae el módulo <code>HttpClientModule</code> con el servicio inyectable <code>HttpClient</code> que debes declarar como dependencia en tus propios constructores.</p><p>En el fichero <code>operations.service.ts</code> tienes el código que reclama la dependencia y la configura con una ruta base obtenida de la configuración de <code>environment</code>. Queda algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OperationsService &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> url = environment.apiUrl + <span class=\"string\">\"pub/items/\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> http: HttpClient</span>) &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>A partir de este momento sólo queda invocar los métodos REST en la propiedad <code>this.http</code>.</p><h2 id=\"1-1-Metodos-REST\"><a href=\"#1-1-Metodos-REST\" class=\"headerlink\" title=\"1.1 Métodos REST\"></a>1.1 Métodos REST</h2><p>Para cada verbo <em>http</em> tenemos su método en el servicio <code>HttpClient</code>. Su primer parámetro será la url a la que invocar. Los métodos de envío reciben la carga en el segundo argumento, y la envían automáticamente como objetos <em>JSON</em>.</p><p>Un ejemplo sencillo lo tienes en el servicio <code>OperationsService</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> getOperationsList$(): Observable&lt;Operation[]&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get&lt;Operation[]&gt;(<span class=\"keyword\">this</span>.url);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> getOperationById$(id: <span class=\"built_in\">string</span>): Observable&lt;Operation&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get&lt;Operation&gt;(<span class=\"keyword\">this</span>.url + id);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> saveOperation$(operation: Operation): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.post(<span class=\"keyword\">this</span>.url, operation);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> deleteOperation$(operation: Operation): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.delete(<span class=\"keyword\">this</span>.url + operation._id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>Cada método de negocio, configura la llamada de infraestructura; parece poca cosa. Podría ser un buen sitio para validar la información antes de ser enviada, o quizás agrupar varias llamadas de red para una misma operación de negocio. El <em>dolar</em> al final del nombre es un convenio para las funciones que devuelven observables.</p></blockquote><h1 id=\"2-Observables\"><a href=\"#2-Observables\" class=\"headerlink\" title=\"2 Observables\"></a>2 Observables</h1><p>Las <strong>comunicaciones</strong> entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.</p><p>Esta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones <em>AJAX</em> basadas en el paso de funciones <em>callback</em>. La aparición de las <em>promises</em> mejoró la claridad del código, y ahora con los <em>Observables</em> tenemos además una gran potencia para manipular la <strong>información asíncrona</strong>.</p><blockquote><p>El patrón <code>Observable</code> fue implementado por Microsoft en la librería <a href=\"http://reactivex.io/intro.html\" target=\"_blank\" rel=\"external\"><em>Reactive Extensions</em></a> más conocida como <code>RxJs</code>. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.</p></blockquote><p>Lo primero es importar el código, esto se hace forma similar a cualquier otra clase o función. Para empezar basta con <code>import { Observable } from &quot;rxjs/Observable&quot;;</code>.</p><p>Esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan <code>: Observable&lt;Operation&gt;</code>, o si no saben que tipo esperar se conforman con <code>: Observable&lt;any&gt;</code>.</p><p>En cualquier caso, <strong>toda operación asíncrona retornará una instancia observable</strong> a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine. Por limpieza eso debes hacerlo en los componentes que consuman el servicio, no en el propio servicio.</p><h2 id=\"2-1-Lectura\"><a href=\"#2-1-Lectura\" class=\"headerlink\" title=\"2.1 Lectura\"></a>2.1 Lectura</h2><p>En <code>operations.component</code> están las llamadas y las suscripciones necesarias. Por ejemplo el método <code>refreshData()</code> realiza llamadas y se suscribe para conocer los resultados. Cada suscripción es un <em>callback</em> al que habrá que pasarle el contexto mediante <code>.bind(this)</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> refreshData() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.message = <span class=\"string\">`Refreshing Data`</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.fullError = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.operationsService</div><div class=\"line\">    .getOperationsList$()</div><div class=\"line\">    .subscribe(<span class=\"keyword\">this</span>.showOperations.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.catchError.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">  <span class=\"keyword\">this</span>.operationsService</div><div class=\"line\">    .getNumberOfOperations$()</div><div class=\"line\">    .subscribe(<span class=\"keyword\">this</span>.showCount.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>.catchError.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> showOperations(operations: Operation[]) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.operations = operations;</div><div class=\"line\">  <span class=\"keyword\">this</span>.message = <span class=\"string\">`operations Ok`</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> showCount(data: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.numberOfOperations = data.count;</div><div class=\"line\">  <span class=\"keyword\">this</span>.message = <span class=\"string\">`count Ok`</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> catchError(err) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> HttpErrorResponse) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.message = <span class=\"string\">`Http Error: <span class=\"subst\">$&#123;err.status&#125;</span>, text: <span class=\"subst\">$&#123;err.statusText&#125;</span>`</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.message = <span class=\"string\">`Unknown error, text: <span class=\"subst\">$&#123;err.message&#125;</span>`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">this</span>.fullError = err;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>El método <code>subscribe</code> recibe hasta tres argumentos (ok, error, fin) donde colocar funciones receptoras para cada tipo de evento que ocurra. Sólo el primero es obligatorio, y es en el que recibes la información directamente desempaquetada. En el segundo, normalmente pondrás lógica para responder ante códigos de error devueltos por el servidor. Es opcional porque hay técnicas para gestionarlos de manera centralizada pero en este ejemplo te muestro con detalle cómo tratar y analizar los eventos de error.</p><blockquote><p>Recordatorio para novatos: Es importante comprender la naturaleza asíncrona de estas operaciones. El código de las funciones subscritas se ejecutará en el futuro, no de una manera secuencial.</p></blockquote><h2 id=\"2-2-Escritura\"><a href=\"#2-2-Escritura\" class=\"headerlink\" title=\"2.2 Escritura\"></a>2.2 Escritura</h2><p>Si lo que quieres es enviar objetos a un servidor, por ejemplo mediante el verbo <em>POST</em>, sólo tienes que pasarle la <em>payload</em> al método de negocio y suscribirte a la respuesta.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> saveOperation(operation: Operation) &#123;</div><div class=\"line\"> <span class=\"keyword\">this</span>.operationsService</div><div class=\"line\">   .saveOperation$(operation)</div><div class=\"line\">   .subscribe(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"keyword\">this</span>.refreshData());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>De nuevo, fíjate como refrescamos los datos una vez recibida la respuesta. Hacerlo antes podría dar lugar a respuestas incongruentes. En este caso no es la respuesta en sí lo que interesa, sino el hecho de haya terminado bien.</p></blockquote><h1 id=\"3-Interceptores\"><a href=\"#3-Interceptores\" class=\"headerlink\" title=\"3 Interceptores\"></a>3 Interceptores</h1><p>Angular ha incorporado recientemente el concepto de interceptor que había funcionado muy bien en <em>AngularJS</em>. Ahora los interceptores son clases con métodos que interceptan (de ahí su nombre) todas las peticiones http realizadas. En esos métodos puedes poner lógica que modifique, cancele o simplemente controle el ciclo petición/respuesta de cada llamada.</p><h2 id=\"3-1-Implementacion-de-la-interfaz\"><a href=\"#3-1-Implementacion-de-la-interfaz\" class=\"headerlink\" title=\"3.1 Implementación de la interfaz\"></a>3.1 Implementación de la interfaz</h2><p>Aprovechando el <strong>TypeScript</strong> y sus características de programación orientada a objetos, en <strong>Angular</strong> han optado por obligarnos a cumplir <em>interfaces</em> y como contraparte al cumplir ese contrato invocan a nuestro código en circunstancias controladas. ¿Cómo se hace?.</p><p>Para empezar hay que crear un servicio inyectable en un módulo general o en el raíz. Yo he creado el <code>CatchInterceptorService</code> en <code>lib/catch-interceptor.service.ts</code>. Ten a mano <a href=\"https://github.com/AcademiaBinaria/angular5/blob/master/6-http/cash-flow/src/app/lib/catch-interceptor.service.ts\" target=\"_blank\" rel=\"external\">este enlace</a> para seguir el retos del artículo. Su propósito será capturar las respuestas y gestionar de forma centralizada los errores que se obtengan en un único lugar. Como cualquier otro inyectable habrá que proveerlo en un módulo, yo lo hice en el raíz. Si abres el <code>app.module.ts</code> verás un sistema de aprovisionamiento algo complejo.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">providers: [</div><div class=\"line\">  &#123;</div><div class=\"line\">    provide: HTTP_INTERCEPTORS,</div><div class=\"line\">    useClass: CatchInterceptorService,</div><div class=\"line\">    multi: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure><p>La dependencia que se solicitará es <code>HTTP_INTERCEPTORS</code>, y cuando alguien lo haga (son los servicios de http de Angular a bajo nivel) le será inyectada una instancia de la clase <code>CatchInterceptorService</code>.</p><blockquote><p>Es decir, tu clase interceptora será usada sin que el que la reclame conozca siquiera su nombre. Pero esto es la clave de la inversión de control en la inyección de dependencias.</p></blockquote><p>El parámetro <code>multi: true</code>, indica que puedes crear tantas clases de interceptación como quieras. Esto permite tener múltiples interceptores especializados.</p><h2 id=\"3-2-El-metodo-de-interceptacion\"><a href=\"#3-2-El-metodo-de-interceptacion\" class=\"headerlink\" title=\"3.2 El método de interceptación\"></a>3.2 El método de interceptación</h2><p>Al implementar la interfaz <code>HttpInterceptor</code> estás obligado a crear un método con una firma como esta: <code>public intercept(req, next)</code>. Este será invocado para cada llamada que hecha con <code>httpClient</code>. A esta función se la conoce como <em>función interceptora</em> y ya ves que tiene unos argumentos y un tipo de retorno bien definidos… y algo complejos a primera vista. Veamos una implementación mínimalista.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> next.handle(req);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Lo que dice es que recibe un puntero a la petición en curso, <code>req: HttpRequest&lt;any&gt;</code>, y otro a la siguiente clase que la procese,<code>next: HttpHandler</code>. También obliga a devolver un observable; lógico porque esto es en último término a lo que te suscribes en tu código de negocio. Afortunadamente el método <code>handle(req: HttpRequest&lt;any&gt;)</code> de cualquiera que sea la siguiente clase procesadora retorna un observable. Y así se da continuidad al flujo de la llamada.</p><h2 id=\"3-3-Los-operadores-observables\"><a href=\"#3-3-Los-operadores-observables\" class=\"headerlink\" title=\"3.3 Los operadores observables\"></a>3.3 Los operadores observables</h2><p>Además de tipos de datos como <code>Observable&lt;any&gt;</code> con métodos clave como <code>.subscribe(ok, err, end)</code>, la librería <em>RxJs</em> viene cargadita de <a href=\"http://reactivex.io/documentation/operators.html\" target=\"_blank\" rel=\"external\">operadores</a> que… operan sobre instancias de los observables. Esos operadores son funciones que reciben y retornan observables.</p><p>Podemos ver a los observables como <em>streams</em>, es decir una corriente de datos que circula por una tubería. Los operadores serán funciones que afecten al contenido o al caudal y que se pueden agregar o eliminar ordenadamente de la tubería. Una de esas operaciones se llama <code>tap</code>, un grifo.</p><blockquote><p>Nota: este operador fue anteriormente conocido como <code>do</code>.<a href=\"http://reactivex.io/documentation/operators/do.html\" target=\"_blank\" rel=\"external\">Ver documentación operador do</a>.</p></blockquote><p>La operación <code>tap</code> se usa cuando se quiere actuar ante un cambio en el contenido o caudal pero sin cambiarlo. Para mi es adecuada porque lo que pretendo es auditar las llamadas y enterarme de los errores sin tocar absolutamente nada.</p><p>En base a todo lo anterior montaré unas sentencias como estas dentro de la función <code>intercept</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> handledRequest = next.handle(req);</div><div class=\"line\"><span class=\"keyword\">const</span> successCallback = <span class=\"keyword\">this</span>.interceptResponse.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> errorCallback = <span class=\"keyword\">this</span>.catchError.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> interceptionOperator = tap&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt;(</div><div class=\"line\">  successCallback,</div><div class=\"line\">  errorCallback</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">return</span> handledRequest.pipe(interceptionOperator);</div></pre></td></tr></table></figure><p>Tómate tu tiempo para revisar cada línea. En primer lugar obtengo un puntero al <em>stream observable</em> que es la petición en curso. Despues asigno dos funciones locales que actuarán como <em>callbacks</em> para cuando lleguen datos o errores respectivamente. Preparo el operador <code>tap</code> de la librería observable asignádole ambos <em>callbacks</em> y un tipo de retorno concreto en su genérico. Y por último mediante el método <code>pipe</code> engancho el operador a la tubería por la que circula el chorro. Respira y vuelve a leerlo.</p><blockquote><p>Admito que si es tu primer contacto con este mundo de los observables este codigo pueda resultar complejo. La buena noticia es que este código es una especie de patrón o <em>snippet</em> que puedes reutiliazar para casi cualquier interceptor. Sólo habrá que cambiar el operador y el trabajo interno de sus <em>callbacks</em>.</p></blockquote><p>Con esto tienes un sistema que envía a la consola información extra como la duración de las llamadas. Además inspecciona los errores en un único lugar. Esto puede incluso hacer innecesario que los componentes procesen errores.</p><p>Ya tenemos los datos almacenados en un servidor con el que nos comunicamos por <em>http</em>; aunque por ahora de forma anónima. Con el conocimiento actual de los observables, el <em>httpClient</em> y los interceptores estamos a un paso de darle seguridad a las comunicaciones. Sigue esta serie para añadirle <a href=\"../vigilancia-y-seguridad-en-Angular/\">vigilancia y seguridad en Angular</a> mientras aprendes a programar con Angular5.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"ng* el ecosistema de AngularJS","id":"2","updated":"2015-08-20T12:45:59.000Z","date":"2015-08-15T08:55:14.000Z","_content":"\nLista de componentes para ampliar AngularJS que te ayudarán a mejorar tus proyectos.\n\n- **AngularUI**: Antes de programar nada mira si estos chicos ya lo han hecho antes: utilidades, componentes visuales, *bootstrap* y...\n- **ng-grid**: Si tienes que mostrar datos en forma de tabla, este es tu punto de partida.\n- **ngProgress**: Para incorporar una barra de progreso que informe a tus usuarios de la actividad de la aplicación.\n- **RestAngular**: Librería especializada para consumir servicios REST de manera avanzada e intensiva.\n- **angular-aop**: El AOP encapsula los *Aspectos* del código relacionados con instrumentación y seguimiento, liberándolo para la lógica de negocio.\n- **textAngular**: Editor de textos cpn doble binding, formatos, estilos…\n- **angular-translate**: Tener una interfaz en distintos idiomas es una tarea cada vez mas común… y complicada. Esta librería es un gran ayuda.\n- **angular-field-splitter**: Útil para descomponer un campo lógico en varios inputs físicos: Códigos de cuenta, teléfonos, fechas\n- **angular-gm**: Para mostrar mapas de Google de forma dinámica enlazados con tu modelo\n- **ng-slider**: Una barra con punteros para selecionar rangos de forma visual\n","source":"_posts/ng-el-ecosistema-de-AngularJS.md","raw":"---\ntitle: ng* el ecosistema de AngularJS\ntags: \n- AngularJS\ncategories:\n- Avanzado \npermalink: ng-el-ecosistema-de-angularjs\nid: 2\nupdated: 2015/08/20 14:45:59\ndate: 2015/08/15 10:55:14\n---\n\nLista de componentes para ampliar AngularJS que te ayudarán a mejorar tus proyectos.\n\n- **AngularUI**: Antes de programar nada mira si estos chicos ya lo han hecho antes: utilidades, componentes visuales, *bootstrap* y...\n- **ng-grid**: Si tienes que mostrar datos en forma de tabla, este es tu punto de partida.\n- **ngProgress**: Para incorporar una barra de progreso que informe a tus usuarios de la actividad de la aplicación.\n- **RestAngular**: Librería especializada para consumir servicios REST de manera avanzada e intensiva.\n- **angular-aop**: El AOP encapsula los *Aspectos* del código relacionados con instrumentación y seguimiento, liberándolo para la lógica de negocio.\n- **textAngular**: Editor de textos cpn doble binding, formatos, estilos…\n- **angular-translate**: Tener una interfaz en distintos idiomas es una tarea cada vez mas común… y complicada. Esta librería es un gran ayuda.\n- **angular-field-splitter**: Útil para descomponer un campo lógico en varios inputs físicos: Códigos de cuenta, teléfonos, fechas\n- **angular-gm**: Para mostrar mapas de Google de forma dinámica enlazados con tu modelo\n- **ng-slider**: Una barra con punteros para selecionar rangos de forma visual\n","slug":"ng-el-ecosistema-de-angularjs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvj30023iwd3eb4hu4n0","content":"<p>Lista de componentes para ampliar AngularJS que te ayudarán a mejorar tus proyectos.</p><ul><li><strong>AngularUI</strong>: Antes de programar nada mira si estos chicos ya lo han hecho antes: utilidades, componentes visuales, <em>bootstrap</em> y…</li><li><strong>ng-grid</strong>: Si tienes que mostrar datos en forma de tabla, este es tu punto de partida.</li><li><strong>ngProgress</strong>: Para incorporar una barra de progreso que informe a tus usuarios de la actividad de la aplicación.</li><li><strong>RestAngular</strong>: Librería especializada para consumir servicios REST de manera avanzada e intensiva.</li><li><strong>angular-aop</strong>: El AOP encapsula los <em>Aspectos</em> del código relacionados con instrumentación y seguimiento, liberándolo para la lógica de negocio.</li><li><strong>textAngular</strong>: Editor de textos cpn doble binding, formatos, estilos…</li><li><strong>angular-translate</strong>: Tener una interfaz en distintos idiomas es una tarea cada vez mas común… y complicada. Esta librería es un gran ayuda.</li><li><strong>angular-field-splitter</strong>: Útil para descomponer un campo lógico en varios inputs físicos: Códigos de cuenta, teléfonos, fechas</li><li><strong>angular-gm</strong>: Para mostrar mapas de Google de forma dinámica enlazados con tu modelo</li><li><strong>ng-slider</strong>: Una barra con punteros para selecionar rangos de forma visual</li></ul>","site":{"data":{}},"excerpt":"","more":"<p>Lista de componentes para ampliar AngularJS que te ayudarán a mejorar tus proyectos.</p><ul><li><strong>AngularUI</strong>: Antes de programar nada mira si estos chicos ya lo han hecho antes: utilidades, componentes visuales, <em>bootstrap</em> y…</li><li><strong>ng-grid</strong>: Si tienes que mostrar datos en forma de tabla, este es tu punto de partida.</li><li><strong>ngProgress</strong>: Para incorporar una barra de progreso que informe a tus usuarios de la actividad de la aplicación.</li><li><strong>RestAngular</strong>: Librería especializada para consumir servicios REST de manera avanzada e intensiva.</li><li><strong>angular-aop</strong>: El AOP encapsula los <em>Aspectos</em> del código relacionados con instrumentación y seguimiento, liberándolo para la lógica de negocio.</li><li><strong>textAngular</strong>: Editor de textos cpn doble binding, formatos, estilos…</li><li><strong>angular-translate</strong>: Tener una interfaz en distintos idiomas es una tarea cada vez mas común… y complicada. Esta librería es un gran ayuda.</li><li><strong>angular-field-splitter</strong>: Útil para descomponer un campo lógico en varios inputs físicos: Códigos de cuenta, teléfonos, fechas</li><li><strong>angular-gm</strong>: Para mostrar mapas de Google de forma dinámica enlazados con tu modelo</li><li><strong>ng-slider</strong>: Una barra con punteros para selecionar rangos de forma visual</li></ul>"},{"title":"Hola Angular CLI","date":"2018-08-13T15:54:00.000Z","updated":"2018-08-13T17:19:00.000Z","thumbnail":"/css/images/angular-0_cli.png","_content":"![Tutorial Angular 0-CLI](/images/tutorial-angular-0_cli.png)\n\n**Angular en su versión 6 es la plataforma perfecta para el desarrollo** profesional de aplicaciones modernas. **El CLI es la herramienta** adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.\n\n<!-- more -->\n\nEl comúnmente conocido como **AngularCLI** o *CLI a secas* es la herramienta de línea de comandos estándar para **crear, depurar y publicar aplicaciones Angular**. En su actual **versión 6** es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/AutoBot/0-Hello](https://github.com/AcademiaBinaria/autobot/tree/0-hello) \n\n# 1. Instalación de Angular CLI 6\n\nPara empezar, como en casi cualquier desarrollo **necesitarás *NodeJS* y su manejador de de paquetes *npm***. Tenerlos actualizados es un mandamiento básico para un desarrollador web.\n\nEmpieza con una **instalación global** que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.\n\n```console\n$ npm i -g @angular/cli@latest\n$ ng -v\n$ ng help\n$ ng help new\n```\n\n# 2. Crear y ejecutar una aplicación Angular 6\n\nUna vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será `ng new` que te va a **generar toda una aplicación funcional** y las configuraciones necesarias para su depuración, pruebas y ejecución.\n\n```console\nng new autobot -s -S -t\ncd autobot\nnpm start\n```\n\n Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de *npm*  para el arranque de cualquier aplicación: `npm start`.\n\nSi todo va bien, en unos segundo podrás visitar [http://localhost:4000](http://localhost:4000) para ver en marcha la aplicación.\n\nPero volvamos a la terminal y analicemos la primera línea. `ng new autobot -s -S -t`. \n\n> En este tutorial crearemos una aplicación muy básica para jugar con coches llamada **autobot** Una excusa para aprender a programar en Angular; nada serio. El comando [`ng new`](https://github.com/angular/angular-cli/wiki/new) mostrado utiliza opciones que nos vendrán bien en un futuro, aunque por ahora sólo sirven para demostrar las capacidades del generador. Para empezar podríamos habernos limitado a un simple `ng new nombre-de-mi-aplicacion` pero a la larga vendrá bien conocer estas y otras opciones para crear aplicaciones profesionales. Aquí una explicación de lo usado.\n\n| Comando  | Significado |\n| -------- | ----------- |\n| ng  | programa principal del cli instalado en la máquina  |\n| new  | comando para solicitar la generación una nueva aplicación  |\n| autobot  | nombre de la nueva aplicación  |\n| -s  | estilos (no usaremos mucho) en línea  |\n| -S  | tampoco vamos a usar test unitarios  |\n| -t  | no recomendable en proyectos serios  |\n\n> Para un ejemplo más realista, consulta cómo está hecho [AcademiaBinaria/AstroBot](https://github.com/AcademiaBinaria/astrobot/) , el hermano mayor de *AutoBot*\n\n```console\nng new astrobot --routing -s -S\ncd astrobot\nnpm start\n```\n\n\n# 3. Estructura de una aplicación Angular\nUna vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay **una enorme cantidad de ficheros y carpetas**, las buenas son que como verás, casi todo es **configuración e infraestructura**. \n \n## 3.1 Visual Studio Code\n\nPara ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo [VSCode](https://code.visualstudio.com/). Es un **gran editor, gratuito y multiplataforma**. Viene con un terminal integrado y puedes mejorarlo instalando extensiones.\n\nAntes de empezar debes instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con *Angular*,  se llama [Angular Essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials). Con eso y el [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) verás *Angular en colores*.\n\n## 3.2 Carpetas y Ficheros principales\n\nVolviendo a la **estructura de ficheros y carpetas** te encontrás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones `.ts`. Son para ficheros [*TypeScript*](https://www.typescriptlang.org/), una evolución del *JavaScript* con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:\n\n+ angular.json  *: configuración del propio CLI. La madre de todos los configuradores*\n+ package.json *: dependencias de librerías y scripts*\n+ src/ *: la carpeta donde están los archivos fuentes*\n    + index.html *: un fichero HTML índice estándar*\n    + main.ts *: fichero TypeScript de arranque de la aplicación*\n    + app/ *: la carpeta con el código específico de tu aplicación*\n        + app.module.ts *: las aplicaciones son árboles de módulos, y este es su raíz*\n        + app.component.ts *: las páginas son árboles de componentes, y este es su raíz*\n\nEcha un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.\n\n# 4. Edición\n\nAngular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de **recargar la aplicación en caliente** en cuanto guardas tu trabajo como programador. En esta última versión, la 6, se ha mejorado el proceso y es realmente rápido.\n\nPara probarlo sólo tienes que dejar arrancada la aplicación con el comando `npm start`; **cambiar un fichero de código y comprobar el resultado** en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso *hola mundo*.\n\n## 4.1 Hola Mundo\n\nAbre el fichero `app.component.ts` y busca dentro de él una clase llamada `AppComponent`. Encontrarás que tiene una propiedad `title`. Asígnale el saludo de rigor: `title = 'Hello World';`. Guarda y comprueba cómo tu navegador **se habrá actualizado automáticamente**.\n\nToda **esta magia depende de una cadena de comandos** que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a [*WebPack*](https://webpack.github.io/), un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.\n\nEsta es una lista no exhaustiva de lo que sucede.\n\n1. npm start\n2. ng serve\n3. webpack server en http://localhost:4000\n    1. vigilancia de cambios sobre la carpeta src/\n    2. livereload\n      1. compilado de la aplicación\n      2. recarga del navegador\n\nCambia a tu antojo el `app.component.ts` y comprueba los cambios de manera inmediata en tu navegador.\n\n# 5. Configuración\n\nEl CLI 6 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el `package.json` y agregar librerías de terceros.\n\n## 5.1 Package.json\n\nEl `package.json` es el fichero estándar de *npm* donde se almacenan las **dependencias de terceros**. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de *Angular 6*. Y también las herramientas que necesita el programador, por ejemplo el propio *AngularCLI*;\n\n```json\n{\n  \"dependencies\": {\n      \"@angular/core\": \"^6.1.0\",\n  },\n  \"devDependencies\": {\n      \"@angular/cli\": \"6.1.0\",\n  }\n}\n```\n\nOtro uso del `package.json` es servir de **contenedor de scripts** para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar `npm start` ejecutará el contenido asignado en el fichero *json*, originalmente `ng serve`. Esto lanza el servidor de pruebas con sus opciones por defecto. \n\nPero el **comando [ng serve](https://github.com/angular/angular-cli/wiki/serve)** admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.\n\n```json\n{\n \"start\": \"ng serve -o --port 4203\",\n}\n```\n\n## 5.2 Estilos y librerías de terceros\n\nLas librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos **algún que otro producto de terceros**. Ya sean utilidades como *[Moment](https://momentjs.com/)*, librerías gráficas como *[chart.js](http://www.chartjs.org/)* o la aplicación de estilos y componentes visuales de *frameworks como Bootstrap o MaterialDesign*. Pero todos se instalan de igual forma. Descargándolos con *npm* y adjuntándolos en el `angular.json`. \n\n>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama *[bulma](https://bulma.io/)* y es apropiada para prototipos, pruebas o pequeños proyectos. Como otros muchos frameworks css, bulma necesita los iconos de [Font Awesome](https://fontawesome.com/). \n\nTambién usaremos *[Moment](https://momentjs.com/)* para el trabajo con fechas y horas. Casi todas las librerías que uses se importarán directamente en TypeScript. No hya necesidad de agregar su script en ningún sitio.\n\nSe descargan e instalan de manera estándar.\n\n```console\nnpm i bulma --save\nnpm i font-awesome --save\nnpm install moment --save\n```\n\nPara que se incluyan en la distribución hay que ir a la configuración del *CLI*.Y se agrega a través del fichero `.angular-cli.json` a la colección de *styles* o de *scripts* que corresponda.\n\n```json\n{\n    \"styles\": [\n        \"node_modules/bulma/css/bulma.min.css\",\n        \"node_modules/font-awesome/css/font-awesome.css\",\n        \"src/styles.css\"\n    ]\n}\n```\n\nEstas colecciones de archivos los usa el *cli* a través de *webpack* para incluirlos **minificados y concatenados en un fichero *bundle* sustituyendo a las clásicas etiquetas html**. De esta forma el fichero `index.html` apenas tendrás que tocarlo. Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. \n\nUna cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo *bulma*. \n\n# 6. Angular 6 y el CLI 6\n\nPor si la línea de comandos te suena muy antigua, y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto [Angular Console](https://angularconsole.com/) te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.\n\nOtros productos que te puede interesar instalar son: [Compodoc](https://compodoc.app/) para la generación de documentación y [Webpack Bundle Analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer) para el visualizar y controlar el código generado.\n\nLos últimos toques antes de publicar pueden incluir el *script de analytics* en el `index.html` y un comando para publicar en *github pages*.\n\nUna vez instalados, configura nuevos *scripts* en el `package.json` para poder lanzarlos más tarde.\n\n```json\n{\n    \"scripts\": {\n        \"ng\": \"ng\",\n        \"start\": \"ng serve -o --port 4203\",\n        \"build\": \"ng build --prod --stats-json\",\n        \"gh\": \"ng build --prod --output-path docs --base-href https://academiabinaria.github.io/autobot/\",\n        \"test\": \"ng test\",\n        \"lint\": \"ng lint\",\n        \"e2e\": \"ng e2e\",\n        \"doc\": \"compodoc -p src/tsconfig.app.json -s\",\n        \"stats\": \"webpack-bundle-analyzer dist/autobot/stats.json\"\n  }\n}\n```\n\n\nComprueba las ejecuciones de los distintos *scripts*. Con `npm start` no se generan ficheros físicos. Todos es en memoria pra mayor velocidad de re-compilación mientras desarrollas. En cambio `npm run build` creará una carpeta `./dist/autobot` en la que dejará los archivos necesarios para ejecución. Por último `npm run gh` los prepara para enviar como a la carpeta `./docs` listos para publicar en las  *git hub pages*. \n\nPara complementar tu conocimiento del CLI te recomiendo la [wiki](https://github.com/angular/angular-cli/wiki) y este artículo que trata la configuración del CLI en profundidad [Angular CLI 6 under the hood ](https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01)\n\nEsto es sólo el principio, *Angular CLI 6* puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 6. En el próximo artículo crearemos una [Base para una aplicación Angular](../base-aplicacion-angular/).\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/ng_0-Hola-Angular-CLI.md","raw":"---\ntitle: Hola Angular CLI\npermalink: hola-angular-cli\ndate: 2018-08-13 17:54:00\nupdated: 2018-08-13 19:19:00\ntags:  \n- Angular\n- CLI\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-0_cli.png\n---\n![Tutorial Angular 0-CLI](/images/tutorial-angular-0_cli.png)\n\n**Angular en su versión 6 es la plataforma perfecta para el desarrollo** profesional de aplicaciones modernas. **El CLI es la herramienta** adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.\n\n<!-- more -->\n\nEl comúnmente conocido como **AngularCLI** o *CLI a secas* es la herramienta de línea de comandos estándar para **crear, depurar y publicar aplicaciones Angular**. En su actual **versión 6** es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/AutoBot/0-Hello](https://github.com/AcademiaBinaria/autobot/tree/0-hello) \n\n# 1. Instalación de Angular CLI 6\n\nPara empezar, como en casi cualquier desarrollo **necesitarás *NodeJS* y su manejador de de paquetes *npm***. Tenerlos actualizados es un mandamiento básico para un desarrollador web.\n\nEmpieza con una **instalación global** que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.\n\n```console\n$ npm i -g @angular/cli@latest\n$ ng -v\n$ ng help\n$ ng help new\n```\n\n# 2. Crear y ejecutar una aplicación Angular 6\n\nUna vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será `ng new` que te va a **generar toda una aplicación funcional** y las configuraciones necesarias para su depuración, pruebas y ejecución.\n\n```console\nng new autobot -s -S -t\ncd autobot\nnpm start\n```\n\n Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de *npm*  para el arranque de cualquier aplicación: `npm start`.\n\nSi todo va bien, en unos segundo podrás visitar [http://localhost:4000](http://localhost:4000) para ver en marcha la aplicación.\n\nPero volvamos a la terminal y analicemos la primera línea. `ng new autobot -s -S -t`. \n\n> En este tutorial crearemos una aplicación muy básica para jugar con coches llamada **autobot** Una excusa para aprender a programar en Angular; nada serio. El comando [`ng new`](https://github.com/angular/angular-cli/wiki/new) mostrado utiliza opciones que nos vendrán bien en un futuro, aunque por ahora sólo sirven para demostrar las capacidades del generador. Para empezar podríamos habernos limitado a un simple `ng new nombre-de-mi-aplicacion` pero a la larga vendrá bien conocer estas y otras opciones para crear aplicaciones profesionales. Aquí una explicación de lo usado.\n\n| Comando  | Significado |\n| -------- | ----------- |\n| ng  | programa principal del cli instalado en la máquina  |\n| new  | comando para solicitar la generación una nueva aplicación  |\n| autobot  | nombre de la nueva aplicación  |\n| -s  | estilos (no usaremos mucho) en línea  |\n| -S  | tampoco vamos a usar test unitarios  |\n| -t  | no recomendable en proyectos serios  |\n\n> Para un ejemplo más realista, consulta cómo está hecho [AcademiaBinaria/AstroBot](https://github.com/AcademiaBinaria/astrobot/) , el hermano mayor de *AutoBot*\n\n```console\nng new astrobot --routing -s -S\ncd astrobot\nnpm start\n```\n\n\n# 3. Estructura de una aplicación Angular\nUna vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay **una enorme cantidad de ficheros y carpetas**, las buenas son que como verás, casi todo es **configuración e infraestructura**. \n \n## 3.1 Visual Studio Code\n\nPara ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo [VSCode](https://code.visualstudio.com/). Es un **gran editor, gratuito y multiplataforma**. Viene con un terminal integrado y puedes mejorarlo instalando extensiones.\n\nAntes de empezar debes instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con *Angular*,  se llama [Angular Essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials). Con eso y el [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) verás *Angular en colores*.\n\n## 3.2 Carpetas y Ficheros principales\n\nVolviendo a la **estructura de ficheros y carpetas** te encontrás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones `.ts`. Son para ficheros [*TypeScript*](https://www.typescriptlang.org/), una evolución del *JavaScript* con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:\n\n+ angular.json  *: configuración del propio CLI. La madre de todos los configuradores*\n+ package.json *: dependencias de librerías y scripts*\n+ src/ *: la carpeta donde están los archivos fuentes*\n    + index.html *: un fichero HTML índice estándar*\n    + main.ts *: fichero TypeScript de arranque de la aplicación*\n    + app/ *: la carpeta con el código específico de tu aplicación*\n        + app.module.ts *: las aplicaciones son árboles de módulos, y este es su raíz*\n        + app.component.ts *: las páginas son árboles de componentes, y este es su raíz*\n\nEcha un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.\n\n# 4. Edición\n\nAngular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de **recargar la aplicación en caliente** en cuanto guardas tu trabajo como programador. En esta última versión, la 6, se ha mejorado el proceso y es realmente rápido.\n\nPara probarlo sólo tienes que dejar arrancada la aplicación con el comando `npm start`; **cambiar un fichero de código y comprobar el resultado** en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso *hola mundo*.\n\n## 4.1 Hola Mundo\n\nAbre el fichero `app.component.ts` y busca dentro de él una clase llamada `AppComponent`. Encontrarás que tiene una propiedad `title`. Asígnale el saludo de rigor: `title = 'Hello World';`. Guarda y comprueba cómo tu navegador **se habrá actualizado automáticamente**.\n\nToda **esta magia depende de una cadena de comandos** que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a [*WebPack*](https://webpack.github.io/), un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.\n\nEsta es una lista no exhaustiva de lo que sucede.\n\n1. npm start\n2. ng serve\n3. webpack server en http://localhost:4000\n    1. vigilancia de cambios sobre la carpeta src/\n    2. livereload\n      1. compilado de la aplicación\n      2. recarga del navegador\n\nCambia a tu antojo el `app.component.ts` y comprueba los cambios de manera inmediata en tu navegador.\n\n# 5. Configuración\n\nEl CLI 6 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el `package.json` y agregar librerías de terceros.\n\n## 5.1 Package.json\n\nEl `package.json` es el fichero estándar de *npm* donde se almacenan las **dependencias de terceros**. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de *Angular 6*. Y también las herramientas que necesita el programador, por ejemplo el propio *AngularCLI*;\n\n```json\n{\n  \"dependencies\": {\n      \"@angular/core\": \"^6.1.0\",\n  },\n  \"devDependencies\": {\n      \"@angular/cli\": \"6.1.0\",\n  }\n}\n```\n\nOtro uso del `package.json` es servir de **contenedor de scripts** para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar `npm start` ejecutará el contenido asignado en el fichero *json*, originalmente `ng serve`. Esto lanza el servidor de pruebas con sus opciones por defecto. \n\nPero el **comando [ng serve](https://github.com/angular/angular-cli/wiki/serve)** admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.\n\n```json\n{\n \"start\": \"ng serve -o --port 4203\",\n}\n```\n\n## 5.2 Estilos y librerías de terceros\n\nLas librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos **algún que otro producto de terceros**. Ya sean utilidades como *[Moment](https://momentjs.com/)*, librerías gráficas como *[chart.js](http://www.chartjs.org/)* o la aplicación de estilos y componentes visuales de *frameworks como Bootstrap o MaterialDesign*. Pero todos se instalan de igual forma. Descargándolos con *npm* y adjuntándolos en el `angular.json`. \n\n>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama *[bulma](https://bulma.io/)* y es apropiada para prototipos, pruebas o pequeños proyectos. Como otros muchos frameworks css, bulma necesita los iconos de [Font Awesome](https://fontawesome.com/). \n\nTambién usaremos *[Moment](https://momentjs.com/)* para el trabajo con fechas y horas. Casi todas las librerías que uses se importarán directamente en TypeScript. No hya necesidad de agregar su script en ningún sitio.\n\nSe descargan e instalan de manera estándar.\n\n```console\nnpm i bulma --save\nnpm i font-awesome --save\nnpm install moment --save\n```\n\nPara que se incluyan en la distribución hay que ir a la configuración del *CLI*.Y se agrega a través del fichero `.angular-cli.json` a la colección de *styles* o de *scripts* que corresponda.\n\n```json\n{\n    \"styles\": [\n        \"node_modules/bulma/css/bulma.min.css\",\n        \"node_modules/font-awesome/css/font-awesome.css\",\n        \"src/styles.css\"\n    ]\n}\n```\n\nEstas colecciones de archivos los usa el *cli* a través de *webpack* para incluirlos **minificados y concatenados en un fichero *bundle* sustituyendo a las clásicas etiquetas html**. De esta forma el fichero `index.html` apenas tendrás que tocarlo. Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. \n\nUna cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo *bulma*. \n\n# 6. Angular 6 y el CLI 6\n\nPor si la línea de comandos te suena muy antigua, y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto [Angular Console](https://angularconsole.com/) te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.\n\nOtros productos que te puede interesar instalar son: [Compodoc](https://compodoc.app/) para la generación de documentación y [Webpack Bundle Analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer) para el visualizar y controlar el código generado.\n\nLos últimos toques antes de publicar pueden incluir el *script de analytics* en el `index.html` y un comando para publicar en *github pages*.\n\nUna vez instalados, configura nuevos *scripts* en el `package.json` para poder lanzarlos más tarde.\n\n```json\n{\n    \"scripts\": {\n        \"ng\": \"ng\",\n        \"start\": \"ng serve -o --port 4203\",\n        \"build\": \"ng build --prod --stats-json\",\n        \"gh\": \"ng build --prod --output-path docs --base-href https://academiabinaria.github.io/autobot/\",\n        \"test\": \"ng test\",\n        \"lint\": \"ng lint\",\n        \"e2e\": \"ng e2e\",\n        \"doc\": \"compodoc -p src/tsconfig.app.json -s\",\n        \"stats\": \"webpack-bundle-analyzer dist/autobot/stats.json\"\n  }\n}\n```\n\n\nComprueba las ejecuciones de los distintos *scripts*. Con `npm start` no se generan ficheros físicos. Todos es en memoria pra mayor velocidad de re-compilación mientras desarrollas. En cambio `npm run build` creará una carpeta `./dist/autobot` en la que dejará los archivos necesarios para ejecución. Por último `npm run gh` los prepara para enviar como a la carpeta `./docs` listos para publicar en las  *git hub pages*. \n\nPara complementar tu conocimiento del CLI te recomiendo la [wiki](https://github.com/angular/angular-cli/wiki) y este artículo que trata la configuración del CLI en profundidad [Angular CLI 6 under the hood ](https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01)\n\nEsto es sólo el principio, *Angular CLI 6* puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 6. En el próximo artículo crearemos una [Base para una aplicación Angular](../base-aplicacion-angular/).\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"hola-angular-cli","published":1,"_id":"cjbrwpvji0027iwd3esyp8axx","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-0_cli.png\" alt=\"Tutorial Angular 0-CLI\"></p><p><strong>Angular en su versión 6 es la plataforma perfecta para el desarrollo</strong> profesional de aplicaciones modernas. <strong>El CLI es la herramienta</strong> adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.</p><a id=\"more\"></a><p>El comúnmente conocido como <strong>AngularCLI</strong> o <em>CLI a secas</em> es la herramienta de línea de comandos estándar para <strong>crear, depurar y publicar aplicaciones Angular</strong>. En su actual <strong>versión 6</strong> es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/0-hello\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/0-Hello</a></p></blockquote><h1 id=\"1-Instalacion-de-Angular-CLI-6\"><a href=\"#1-Instalacion-de-Angular-CLI-6\" class=\"headerlink\" title=\"1. Instalación de Angular CLI 6\"></a>1. Instalación de Angular CLI 6</h1><p>Para empezar, como en casi cualquier desarrollo <strong>necesitarás <em>NodeJS</em> y su manejador de de paquetes <em>npm</em></strong>. Tenerlos actualizados es un mandamiento básico para un desarrollador web.</p><p>Empieza con una <strong>instalación global</strong> que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm i -g @angular/cli@latest</span><br><span class=\"line\"><span class=\"meta\">$</span> ng -v</span><br><span class=\"line\"><span class=\"meta\">$</span> ng help</span><br><span class=\"line\"><span class=\"meta\">$</span> ng help new</span><br></pre></td></tr></table></figure><h1 id=\"2-Crear-y-ejecutar-una-aplicacion-Angular-6\"><a href=\"#2-Crear-y-ejecutar-una-aplicacion-Angular-6\" class=\"headerlink\" title=\"2. Crear y ejecutar una aplicación Angular 6\"></a>2. Crear y ejecutar una aplicación Angular 6</h1><p>Una vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será <code>ng new</code> que te va a <strong>generar toda una aplicación funcional</strong> y las configuraciones necesarias para su depuración, pruebas y ejecución.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new autobot -s -S -t</span><br><span class=\"line\">cd autobot</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><p>Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de <em>npm</em> para el arranque de cualquier aplicación: <code>npm start</code>.</p><p>Si todo va bien, en unos segundo podrás visitar <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> para ver en marcha la aplicación.</p><p>Pero volvamos a la terminal y analicemos la primera línea. <code>ng new autobot -s -S -t</code>.</p><blockquote><p>En este tutorial crearemos una aplicación muy básica para jugar con coches llamada <strong>autobot</strong> Una excusa para aprender a programar en Angular; nada serio. El comando <a href=\"https://github.com/angular/angular-cli/wiki/new\" target=\"_blank\" rel=\"noopener\"><code>ng new</code></a> mostrado utiliza opciones que nos vendrán bien en un futuro, aunque por ahora sólo sirven para demostrar las capacidades del generador. Para empezar podríamos habernos limitado a un simple <code>ng new nombre-de-mi-aplicacion</code> pero a la larga vendrá bien conocer estas y otras opciones para crear aplicaciones profesionales. Aquí una explicación de lo usado.</p></blockquote><table><thead><tr><th>Comando</th><th>Significado</th></tr></thead><tbody><tr><td>ng</td><td>programa principal del cli instalado en la máquina</td></tr><tr><td>new</td><td>comando para solicitar la generación una nueva aplicación</td></tr><tr><td>autobot</td><td>nombre de la nueva aplicación</td></tr><tr><td>-s</td><td>estilos (no usaremos mucho) en línea</td></tr><tr><td>-S</td><td>tampoco vamos a usar test unitarios</td></tr><tr><td>-t</td><td>no recomendable en proyectos serios</td></tr></tbody></table><blockquote><p>Para un ejemplo más realista, consulta cómo está hecho <a href=\"https://github.com/AcademiaBinaria/astrobot/\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AstroBot</a> , el hermano mayor de <em>AutoBot</em></p></blockquote><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new astrobot --routing -s -S</span><br><span class=\"line\">cd astrobot</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><h1 id=\"3-Estructura-de-una-aplicacion-Angular\"><a href=\"#3-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"3. Estructura de una aplicación Angular\"></a>3. Estructura de una aplicación Angular</h1><p>Una vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay <strong>una enorme cantidad de ficheros y carpetas</strong>, las buenas son que como verás, casi todo es <strong>configuración e infraestructura</strong>.</p><h2 id=\"3-1-Visual-Studio-Code\"><a href=\"#3-1-Visual-Studio-Code\" class=\"headerlink\" title=\"3.1 Visual Studio Code\"></a>3.1 Visual Studio Code</h2><p>Para ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">VSCode</a>. Es un <strong>gran editor, gratuito y multiplataforma</strong>. Viene con un terminal integrado y puedes mejorarlo instalando extensiones.</p><p>Antes de empezar debes instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con <em>Angular</em>, se llama <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\" target=\"_blank\" rel=\"noopener\">Angular Essentials</a>. Con eso y el <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"noopener\">Material Icon Theme</a> verás <em>Angular en colores</em>.</p><h2 id=\"3-2-Carpetas-y-Ficheros-principales\"><a href=\"#3-2-Carpetas-y-Ficheros-principales\" class=\"headerlink\" title=\"3.2 Carpetas y Ficheros principales\"></a>3.2 Carpetas y Ficheros principales</h2><p>Volviendo a la <strong>estructura de ficheros y carpetas</strong> te encontrás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones <code>.ts</code>. Son para ficheros <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\"><em>TypeScript</em></a>, una evolución del <em>JavaScript</em> con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:</p><ul><li>angular.json <em>: configuración del propio CLI. La madre de todos los configuradores</em></li><li>package.json <em>: dependencias de librerías y scripts</em></li><li>src/ <em>: la carpeta donde están los archivos fuentes</em><ul><li>index.html <em>: un fichero HTML índice estándar</em></li><li>main.ts <em>: fichero TypeScript de arranque de la aplicación</em></li><li>app/ <em>: la carpeta con el código específico de tu aplicación</em><ul><li>app.module.ts <em>: las aplicaciones son árboles de módulos, y este es su raíz</em></li><li>app.component.ts <em>: las páginas son árboles de componentes, y este es su raíz</em></li></ul></li></ul></li></ul><p>Echa un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.</p><h1 id=\"4-Edicion\"><a href=\"#4-Edicion\" class=\"headerlink\" title=\"4. Edición\"></a>4. Edición</h1><p>Angular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de <strong>recargar la aplicación en caliente</strong> en cuanto guardas tu trabajo como programador. En esta última versión, la 6, se ha mejorado el proceso y es realmente rápido.</p><p>Para probarlo sólo tienes que dejar arrancada la aplicación con el comando <code>npm start</code>; <strong>cambiar un fichero de código y comprobar el resultado</strong> en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso <em>hola mundo</em>.</p><h2 id=\"4-1-Hola-Mundo\"><a href=\"#4-1-Hola-Mundo\" class=\"headerlink\" title=\"4.1 Hola Mundo\"></a>4.1 Hola Mundo</h2><p>Abre el fichero <code>app.component.ts</code> y busca dentro de él una clase llamada <code>AppComponent</code>. Encontrarás que tiene una propiedad <code>title</code>. Asígnale el saludo de rigor: <code>title = &#39;Hello World&#39;;</code>. Guarda y comprueba cómo tu navegador <strong>se habrá actualizado automáticamente</strong>.</p><p>Toda <strong>esta magia depende de una cadena de comandos</strong> que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"noopener\"><em>WebPack</em></a>, un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.</p><p>Esta es una lista no exhaustiva de lo que sucede.</p><ol><li>npm start</li><li>ng serve</li><li>webpack server en <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a><ol><li>vigilancia de cambios sobre la carpeta src/</li><li>livereload<ol><li>compilado de la aplicación</li><li>recarga del navegador</li></ol></li></ol></li></ol><p>Cambia a tu antojo el <code>app.component.ts</code> y comprueba los cambios de manera inmediata en tu navegador.</p><h1 id=\"5-Configuracion\"><a href=\"#5-Configuracion\" class=\"headerlink\" title=\"5. Configuración\"></a>5. Configuración</h1><p>El CLI 6 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el <code>package.json</code> y agregar librerías de terceros.</p><h2 id=\"5-1-Package-json\"><a href=\"#5-1-Package-json\" class=\"headerlink\" title=\"5.1 Package.json\"></a>5.1 Package.json</h2><p>El <code>package.json</code> es el fichero estándar de <em>npm</em> donde se almacenan las <strong>dependencias de terceros</strong>. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de <em>Angular 6</em>. Y también las herramientas que necesita el programador, por ejemplo el propio <em>AngularCLI</em>;</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"@angular/core\"</span>: <span class=\"string\">\"^6.1.0\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"@angular/cli\"</span>: <span class=\"string\">\"6.1.0\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Otro uso del <code>package.json</code> es servir de <strong>contenedor de scripts</strong> para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar <code>npm start</code> ejecutará el contenido asignado en el fichero <em>json</em>, originalmente <code>ng serve</code>. Esto lanza el servidor de pruebas con sus opciones por defecto.</p><p>Pero el <strong>comando <a href=\"https://github.com/angular/angular-cli/wiki/serve\" target=\"_blank\" rel=\"noopener\">ng serve</a></strong> admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve -o --port 4203\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"5-2-Estilos-y-librerias-de-terceros\"><a href=\"#5-2-Estilos-y-librerias-de-terceros\" class=\"headerlink\" title=\"5.2 Estilos y librerías de terceros\"></a>5.2 Estilos y librerías de terceros</h2><p>Las librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos <strong>algún que otro producto de terceros</strong>. Ya sean utilidades como <em><a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"noopener\">Moment</a></em>, librerías gráficas como <em><a href=\"http://www.chartjs.org/\" target=\"_blank\" rel=\"noopener\">chart.js</a></em> o la aplicación de estilos y componentes visuales de <em>frameworks como Bootstrap o MaterialDesign</em>. Pero todos se instalan de igual forma. Descargándolos con <em>npm</em> y adjuntándolos en el <code>angular.json</code>.</p><blockquote><p>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama <em><a href=\"https://bulma.io/\" target=\"_blank\" rel=\"noopener\">bulma</a></em> y es apropiada para prototipos, pruebas o pequeños proyectos. Como otros muchos frameworks css, bulma necesita los iconos de <a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>.</p></blockquote><p>También usaremos <em><a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"noopener\">Moment</a></em> para el trabajo con fechas y horas. Casi todas las librerías que uses se importarán directamente en TypeScript. No hya necesidad de agregar su script en ningún sitio.</p><p>Se descargan e instalan de manera estándar.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i bulma --save</span><br><span class=\"line\">npm i font-awesome --save</span><br><span class=\"line\">npm install moment --save</span><br></pre></td></tr></table></figure><p>Para que se incluyan en la distribución hay que ir a la configuración del <em>CLI</em>.Y se agrega a través del fichero <code>.angular-cli.json</code> a la colección de <em>styles</em> o de <em>scripts</em> que corresponda.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"styles\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node_modules/bulma/css/bulma.min.css\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"node_modules/font-awesome/css/font-awesome.css\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"src/styles.css\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Estas colecciones de archivos los usa el <em>cli</em> a través de <em>webpack</em> para incluirlos <strong>minificados y concatenados en un fichero <em>bundle</em> sustituyendo a las clásicas etiquetas html</strong>. De esta forma el fichero <code>index.html</code> apenas tendrás que tocarlo. Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript.</p><p>Una cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo <em>bulma</em>.</p><h1 id=\"6-Angular-6-y-el-CLI-6\"><a href=\"#6-Angular-6-y-el-CLI-6\" class=\"headerlink\" title=\"6. Angular 6 y el CLI 6\"></a>6. Angular 6 y el CLI 6</h1><p>Por si la línea de comandos te suena muy antigua, y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto <a href=\"https://angularconsole.com/\" target=\"_blank\" rel=\"noopener\">Angular Console</a> te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.</p><p>Otros productos que te puede interesar instalar son: <a href=\"https://compodoc.app/\" target=\"_blank\" rel=\"noopener\">Compodoc</a> para la generación de documentación y <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" target=\"_blank\" rel=\"noopener\">Webpack Bundle Analyzer</a> para el visualizar y controlar el código generado.</p><p>Los últimos toques antes de publicar pueden incluir el <em>script de analytics</em> en el <code>index.html</code> y un comando para publicar en <em>github pages</em>.</p><p>Una vez instalados, configura nuevos <em>scripts</em> en el <code>package.json</code> para poder lanzarlos más tarde.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"ng\"</span>: <span class=\"string\">\"ng\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve -o --port 4203\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"ng build --prod --stats-json\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"gh\"</span>: <span class=\"string\">\"ng build --prod --output-path docs --base-href https://academiabinaria.github.io/autobot/\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"ng test\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"lint\"</span>: <span class=\"string\">\"ng lint\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"e2e\"</span>: <span class=\"string\">\"ng e2e\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"doc\"</span>: <span class=\"string\">\"compodoc -p src/tsconfig.app.json -s\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stats\"</span>: <span class=\"string\">\"webpack-bundle-analyzer dist/autobot/stats.json\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Comprueba las ejecuciones de los distintos <em>scripts</em>. Con <code>npm start</code> no se generan ficheros físicos. Todos es en memoria pra mayor velocidad de re-compilación mientras desarrollas. En cambio <code>npm run build</code> creará una carpeta <code>./dist/autobot</code> en la que dejará los archivos necesarios para ejecución. Por último <code>npm run gh</code> los prepara para enviar como a la carpeta <code>./docs</code> listos para publicar en las <em>git hub pages</em>.</p><p>Para complementar tu conocimiento del CLI te recomiendo la <a href=\"https://github.com/angular/angular-cli/wiki\" target=\"_blank\" rel=\"noopener\">wiki</a> y este artículo que trata la configuración del CLI en profundidad <a href=\"https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01\" target=\"_blank\" rel=\"noopener\">Angular CLI 6 under the hood </a></p><p>Esto es sólo el principio, <em>Angular CLI 6</em> puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 6. En el próximo artículo crearemos una <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-0_cli.png\" alt=\"Tutorial Angular 0-CLI\"></p><p><strong>Angular en su versión 6 es la plataforma perfecta para el desarrollo</strong> profesional de aplicaciones modernas. <strong>El CLI es la herramienta</strong> adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.</p>","more":"<p>El comúnmente conocido como <strong>AngularCLI</strong> o <em>CLI a secas</em> es la herramienta de línea de comandos estándar para <strong>crear, depurar y publicar aplicaciones Angular</strong>. En su actual <strong>versión 6</strong> es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/0-hello\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/0-Hello</a></p></blockquote><h1 id=\"1-Instalacion-de-Angular-CLI-6\"><a href=\"#1-Instalacion-de-Angular-CLI-6\" class=\"headerlink\" title=\"1. Instalación de Angular CLI 6\"></a>1. Instalación de Angular CLI 6</h1><p>Para empezar, como en casi cualquier desarrollo <strong>necesitarás <em>NodeJS</em> y su manejador de de paquetes <em>npm</em></strong>. Tenerlos actualizados es un mandamiento básico para un desarrollador web.</p><p>Empieza con una <strong>instalación global</strong> que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm i -g @angular/cli@latest</span><br><span class=\"line\"><span class=\"meta\">$</span> ng -v</span><br><span class=\"line\"><span class=\"meta\">$</span> ng help</span><br><span class=\"line\"><span class=\"meta\">$</span> ng help new</span><br></pre></td></tr></table></figure><h1 id=\"2-Crear-y-ejecutar-una-aplicacion-Angular-6\"><a href=\"#2-Crear-y-ejecutar-una-aplicacion-Angular-6\" class=\"headerlink\" title=\"2. Crear y ejecutar una aplicación Angular 6\"></a>2. Crear y ejecutar una aplicación Angular 6</h1><p>Una vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será <code>ng new</code> que te va a <strong>generar toda una aplicación funcional</strong> y las configuraciones necesarias para su depuración, pruebas y ejecución.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new autobot -s -S -t</span><br><span class=\"line\">cd autobot</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><p>Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de <em>npm</em> para el arranque de cualquier aplicación: <code>npm start</code>.</p><p>Si todo va bien, en unos segundo podrás visitar <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> para ver en marcha la aplicación.</p><p>Pero volvamos a la terminal y analicemos la primera línea. <code>ng new autobot -s -S -t</code>.</p><blockquote><p>En este tutorial crearemos una aplicación muy básica para jugar con coches llamada <strong>autobot</strong> Una excusa para aprender a programar en Angular; nada serio. El comando <a href=\"https://github.com/angular/angular-cli/wiki/new\" target=\"_blank\" rel=\"noopener\"><code>ng new</code></a> mostrado utiliza opciones que nos vendrán bien en un futuro, aunque por ahora sólo sirven para demostrar las capacidades del generador. Para empezar podríamos habernos limitado a un simple <code>ng new nombre-de-mi-aplicacion</code> pero a la larga vendrá bien conocer estas y otras opciones para crear aplicaciones profesionales. Aquí una explicación de lo usado.</p></blockquote><table><thead><tr><th>Comando</th><th>Significado</th></tr></thead><tbody><tr><td>ng</td><td>programa principal del cli instalado en la máquina</td></tr><tr><td>new</td><td>comando para solicitar la generación una nueva aplicación</td></tr><tr><td>autobot</td><td>nombre de la nueva aplicación</td></tr><tr><td>-s</td><td>estilos (no usaremos mucho) en línea</td></tr><tr><td>-S</td><td>tampoco vamos a usar test unitarios</td></tr><tr><td>-t</td><td>no recomendable en proyectos serios</td></tr></tbody></table><blockquote><p>Para un ejemplo más realista, consulta cómo está hecho <a href=\"https://github.com/AcademiaBinaria/astrobot/\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AstroBot</a> , el hermano mayor de <em>AutoBot</em></p></blockquote><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new astrobot --routing -s -S</span><br><span class=\"line\">cd astrobot</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><h1 id=\"3-Estructura-de-una-aplicacion-Angular\"><a href=\"#3-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"3. Estructura de una aplicación Angular\"></a>3. Estructura de una aplicación Angular</h1><p>Una vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay <strong>una enorme cantidad de ficheros y carpetas</strong>, las buenas son que como verás, casi todo es <strong>configuración e infraestructura</strong>.</p><h2 id=\"3-1-Visual-Studio-Code\"><a href=\"#3-1-Visual-Studio-Code\" class=\"headerlink\" title=\"3.1 Visual Studio Code\"></a>3.1 Visual Studio Code</h2><p>Para ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">VSCode</a>. Es un <strong>gran editor, gratuito y multiplataforma</strong>. Viene con un terminal integrado y puedes mejorarlo instalando extensiones.</p><p>Antes de empezar debes instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con <em>Angular</em>, se llama <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\" target=\"_blank\" rel=\"noopener\">Angular Essentials</a>. Con eso y el <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"noopener\">Material Icon Theme</a> verás <em>Angular en colores</em>.</p><h2 id=\"3-2-Carpetas-y-Ficheros-principales\"><a href=\"#3-2-Carpetas-y-Ficheros-principales\" class=\"headerlink\" title=\"3.2 Carpetas y Ficheros principales\"></a>3.2 Carpetas y Ficheros principales</h2><p>Volviendo a la <strong>estructura de ficheros y carpetas</strong> te encontrás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones <code>.ts</code>. Son para ficheros <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\"><em>TypeScript</em></a>, una evolución del <em>JavaScript</em> con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:</p><ul><li>angular.json <em>: configuración del propio CLI. La madre de todos los configuradores</em></li><li>package.json <em>: dependencias de librerías y scripts</em></li><li>src/ <em>: la carpeta donde están los archivos fuentes</em><ul><li>index.html <em>: un fichero HTML índice estándar</em></li><li>main.ts <em>: fichero TypeScript de arranque de la aplicación</em></li><li>app/ <em>: la carpeta con el código específico de tu aplicación</em><ul><li>app.module.ts <em>: las aplicaciones son árboles de módulos, y este es su raíz</em></li><li>app.component.ts <em>: las páginas son árboles de componentes, y este es su raíz</em></li></ul></li></ul></li></ul><p>Echa un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.</p><h1 id=\"4-Edicion\"><a href=\"#4-Edicion\" class=\"headerlink\" title=\"4. Edición\"></a>4. Edición</h1><p>Angular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de <strong>recargar la aplicación en caliente</strong> en cuanto guardas tu trabajo como programador. En esta última versión, la 6, se ha mejorado el proceso y es realmente rápido.</p><p>Para probarlo sólo tienes que dejar arrancada la aplicación con el comando <code>npm start</code>; <strong>cambiar un fichero de código y comprobar el resultado</strong> en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso <em>hola mundo</em>.</p><h2 id=\"4-1-Hola-Mundo\"><a href=\"#4-1-Hola-Mundo\" class=\"headerlink\" title=\"4.1 Hola Mundo\"></a>4.1 Hola Mundo</h2><p>Abre el fichero <code>app.component.ts</code> y busca dentro de él una clase llamada <code>AppComponent</code>. Encontrarás que tiene una propiedad <code>title</code>. Asígnale el saludo de rigor: <code>title = &#39;Hello World&#39;;</code>. Guarda y comprueba cómo tu navegador <strong>se habrá actualizado automáticamente</strong>.</p><p>Toda <strong>esta magia depende de una cadena de comandos</strong> que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"noopener\"><em>WebPack</em></a>, un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.</p><p>Esta es una lista no exhaustiva de lo que sucede.</p><ol><li>npm start</li><li>ng serve</li><li>webpack server en <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a><ol><li>vigilancia de cambios sobre la carpeta src/</li><li>livereload<ol><li>compilado de la aplicación</li><li>recarga del navegador</li></ol></li></ol></li></ol><p>Cambia a tu antojo el <code>app.component.ts</code> y comprueba los cambios de manera inmediata en tu navegador.</p><h1 id=\"5-Configuracion\"><a href=\"#5-Configuracion\" class=\"headerlink\" title=\"5. Configuración\"></a>5. Configuración</h1><p>El CLI 6 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el <code>package.json</code> y agregar librerías de terceros.</p><h2 id=\"5-1-Package-json\"><a href=\"#5-1-Package-json\" class=\"headerlink\" title=\"5.1 Package.json\"></a>5.1 Package.json</h2><p>El <code>package.json</code> es el fichero estándar de <em>npm</em> donde se almacenan las <strong>dependencias de terceros</strong>. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de <em>Angular 6</em>. Y también las herramientas que necesita el programador, por ejemplo el propio <em>AngularCLI</em>;</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"@angular/core\"</span>: <span class=\"string\">\"^6.1.0\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"@angular/cli\"</span>: <span class=\"string\">\"6.1.0\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Otro uso del <code>package.json</code> es servir de <strong>contenedor de scripts</strong> para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar <code>npm start</code> ejecutará el contenido asignado en el fichero <em>json</em>, originalmente <code>ng serve</code>. Esto lanza el servidor de pruebas con sus opciones por defecto.</p><p>Pero el <strong>comando <a href=\"https://github.com/angular/angular-cli/wiki/serve\" target=\"_blank\" rel=\"noopener\">ng serve</a></strong> admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve -o --port 4203\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"5-2-Estilos-y-librerias-de-terceros\"><a href=\"#5-2-Estilos-y-librerias-de-terceros\" class=\"headerlink\" title=\"5.2 Estilos y librerías de terceros\"></a>5.2 Estilos y librerías de terceros</h2><p>Las librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos <strong>algún que otro producto de terceros</strong>. Ya sean utilidades como <em><a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"noopener\">Moment</a></em>, librerías gráficas como <em><a href=\"http://www.chartjs.org/\" target=\"_blank\" rel=\"noopener\">chart.js</a></em> o la aplicación de estilos y componentes visuales de <em>frameworks como Bootstrap o MaterialDesign</em>. Pero todos se instalan de igual forma. Descargándolos con <em>npm</em> y adjuntándolos en el <code>angular.json</code>.</p><blockquote><p>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama <em><a href=\"https://bulma.io/\" target=\"_blank\" rel=\"noopener\">bulma</a></em> y es apropiada para prototipos, pruebas o pequeños proyectos. Como otros muchos frameworks css, bulma necesita los iconos de <a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a>.</p></blockquote><p>También usaremos <em><a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"noopener\">Moment</a></em> para el trabajo con fechas y horas. Casi todas las librerías que uses se importarán directamente en TypeScript. No hya necesidad de agregar su script en ningún sitio.</p><p>Se descargan e instalan de manera estándar.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i bulma --save</span><br><span class=\"line\">npm i font-awesome --save</span><br><span class=\"line\">npm install moment --save</span><br></pre></td></tr></table></figure><p>Para que se incluyan en la distribución hay que ir a la configuración del <em>CLI</em>.Y se agrega a través del fichero <code>.angular-cli.json</code> a la colección de <em>styles</em> o de <em>scripts</em> que corresponda.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"styles\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node_modules/bulma/css/bulma.min.css\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"node_modules/font-awesome/css/font-awesome.css\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"src/styles.css\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Estas colecciones de archivos los usa el <em>cli</em> a través de <em>webpack</em> para incluirlos <strong>minificados y concatenados en un fichero <em>bundle</em> sustituyendo a las clásicas etiquetas html</strong>. De esta forma el fichero <code>index.html</code> apenas tendrás que tocarlo. Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript.</p><p>Una cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo <em>bulma</em>.</p><h1 id=\"6-Angular-6-y-el-CLI-6\"><a href=\"#6-Angular-6-y-el-CLI-6\" class=\"headerlink\" title=\"6. Angular 6 y el CLI 6\"></a>6. Angular 6 y el CLI 6</h1><p>Por si la línea de comandos te suena muy antigua, y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto <a href=\"https://angularconsole.com/\" target=\"_blank\" rel=\"noopener\">Angular Console</a> te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.</p><p>Otros productos que te puede interesar instalar son: <a href=\"https://compodoc.app/\" target=\"_blank\" rel=\"noopener\">Compodoc</a> para la generación de documentación y <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" target=\"_blank\" rel=\"noopener\">Webpack Bundle Analyzer</a> para el visualizar y controlar el código generado.</p><p>Los últimos toques antes de publicar pueden incluir el <em>script de analytics</em> en el <code>index.html</code> y un comando para publicar en <em>github pages</em>.</p><p>Una vez instalados, configura nuevos <em>scripts</em> en el <code>package.json</code> para poder lanzarlos más tarde.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"ng\"</span>: <span class=\"string\">\"ng\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve -o --port 4203\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"ng build --prod --stats-json\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"gh\"</span>: <span class=\"string\">\"ng build --prod --output-path docs --base-href https://academiabinaria.github.io/autobot/\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"ng test\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"lint\"</span>: <span class=\"string\">\"ng lint\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"e2e\"</span>: <span class=\"string\">\"ng e2e\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"doc\"</span>: <span class=\"string\">\"compodoc -p src/tsconfig.app.json -s\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stats\"</span>: <span class=\"string\">\"webpack-bundle-analyzer dist/autobot/stats.json\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Comprueba las ejecuciones de los distintos <em>scripts</em>. Con <code>npm start</code> no se generan ficheros físicos. Todos es en memoria pra mayor velocidad de re-compilación mientras desarrollas. En cambio <code>npm run build</code> creará una carpeta <code>./dist/autobot</code> en la que dejará los archivos necesarios para ejecución. Por último <code>npm run gh</code> los prepara para enviar como a la carpeta <code>./docs</code> listos para publicar en las <em>git hub pages</em>.</p><p>Para complementar tu conocimiento del CLI te recomiendo la <a href=\"https://github.com/angular/angular-cli/wiki\" target=\"_blank\" rel=\"noopener\">wiki</a> y este artículo que trata la configuración del CLI en profundidad <a href=\"https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01\" target=\"_blank\" rel=\"noopener\">Angular CLI 6 under the hood </a></p><p>Esto es sólo el principio, <em>Angular CLI 6</em> puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 6. En el próximo artículo crearemos una <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Páginas y rutas Angular SPA","date":"2018-08-24T10:19:14.000Z","thumbnail":"/css/images/angular-2_spa.png","_content":"![Tutorial Angular5 2-SPA](/images/tutorial-angular-2_spa.png)\n\n\nLas **aplicaciones Angular son conjuntos de páginas enrutadas** en el propio navegador. Son las conocidas *SPA, Single Page Applications*. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.\n\nSeguimos usando el concepto de árbol, ahora como analogía de **las rutas y las vistas** asociadas. Algo que se consigue fácilmente con `@angular/router` **el enrutador de Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Base para una aplicación Angular](../base-aplicacion-angular/). Al finalizar tendrás un SPA con vistas asociadas a sus rutas.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/AutoBot/2-spa](https://github.com/AcademiaBinaria/autobot/tree/2-spa) \n\n# 1. Rutas\n\nAl crear la aplicación hice uso del flag `routing true` en el comando de generación del *CLI*. Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el `AppModule` verdadero módulo raíz, y ahora verás su gemelo: el **módulo de enrutado** 'AppRoutingModule'.\n\n## 1.1 RouterModule\n\nEste módulo cumple dos funciones. Por un lado **importa al `RouterModule`** que contiene toda la lógica necesaria para enrutar en el navegador. Por otro lado, permite la **definición de rutas** en el array `Routes[]`. \n\n>Por motivos estéticos he cambiado el nombre original del fichero `app-routing.module.ts` a `app.routing.ts` y así disponer de un icono propio en el tema [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme).\n\n```typescript\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { HomeComponent } from \"./views/home/home.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: HomeComponent\n  }];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nEl array de rutas recibe **objetos con propiedades** de configuración. La primera es `path:` en la que se especifica **la dirección** que resuelve, en este caso la ruta vacía o raíz del árbol de rutas. Otra propiedad fundamental es `component` la cual indica **el componente** que se debe mostrar cuando esta ruta se active.\n\nEn este caso he aprovechado el componente `HomeComponent` para asociarlo a la ruta raíz. Pero, ¿qué pasará con dicho componente? ¿dónde se cargará?. Presentamos a `<router-outlet>`.\n\n## 1.2 Router Outlet\n\nLa idea general de **una SPA es tener una única página que cargue dinámicamente otras vistas**. Normalmente la página contenedora mantiene el menú de navegación, el pie de página y otras áreas comunes. Y deja un espacio para la carga dinámica. Para ello necesitamos saber **qué componente cargar y dónde mostrarlo**. De esto último se ocupa la etiqueta ` <router-outlet></router-outlet>`.\n\nEn el `app.component.ts` había un reclamo directo al componente `cf-home`. Para hacerlo dinámico se sustituye por ` <router-outlet></router-outlet>` quedando algo así:\n\n```typescript\n    selector: \"cf-root\",\n    template: `\n      <cf-nav></cf-nav>\n      <router-outlet></router-outlet>\n      <cf-footer></cf-footer>\n    `\n    styles: []\n```\n> Puedes ver los cambios realizados en [este *commit*](https://github.com/AcademiaBinaria/angular5/commit/a0ae9077ea2a74e8683de8b281147661b7a9f508)\n\n## 1.3 Router Redirect\n\nLa configuración de rutas no sólo permite asignar componentes a las direcciones. También se pueden hacer **redirecciones de unas direcciones a otras**. Y por supuesto puede haber **rutas no contempladas o errores** por parte del usuario, los infames `404 Not Found`.\n\nUn ejemplo de ambas situaciones sería configurar nuestras rutas de forma que toda ruta desconocida nos lleve a otra general que muestre un mensaje predeterminado. Para hacerlo genera un módulo y un componente llamados `NotFound` con los siguientes comandos:\n\n```shell\nng g m views/not-found\nng g c views/not-found/not-found --export --flat\n```\nVuelve al módulo de enrutado, ahora conocido como `app.routing.ts`, y agrega dos nuevas entradas al array `routes`.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: HomeComponent\n  },\n  {\n    path: \"404\",\n    component: NotFoundComponent\n  },\n  {\n    path: \"**\",\n    redirectTo: \"/404\"\n  }\n  ];\n```\n\nLa entrada interesante es la última. Su dirección `path: \"**\"` indica que es cualquier ruta que no haya sido resuelta previamente. Un *not found* de toda la vida. En este caso lo redirijo a una ruta existente: `/404`. Y a esta última se le asocia un componente concreto, el `NotFoundComponent`.\n\n## 1.4 Router Link\n\nLos enlaces web tradicionalmente se han resuelto con elementos `<a href=\"\"></a>` dónde en su atributo `href` se asociaba la dirección a la cuál navegar ante el click del usuario. **En Angular los enlaces se declaran con un atributo** especial llamado `routerLink`. Este atributo **se compila dando lugar al `href`** oportuno.\n\nEn el fichero `not-found.component.ts` pon algo así:\n```typescript\n  selector: \"cf-not-found\",\n  template: `\n    <h1>Not Found</h1>\n    <h2>404</h2>\n    <a routerLink=\"/\">Go home</a>\n  `,\n  styles: []\n```\n\n>Por ahora la funcionalidad de `routerLink` no mejora en nada a `href`. Pero lo hará. Mientras tanto familiarízate con su sintaxis y... asegúrate de importar `RouterModule` en `not-found.module.ts`. \n\n\n# 2 Lazy Loading\nLas *webs SPA* se crearon por una razón que casi acaba con ellas: **la velocidad**. Al realizar el enrutado en el cliente y querer evitar todos los viajes posibles hasta el servidor, se cargó a la única página web con todo el peso de la aplicación. Lo cual la hizo terriblemente lenta en la primera visita de cada usuario. \n\nEl **impacto de la primera visita** en una aplicación de intranet no suele ser un problema grave. Pero en internet esa visita puede ser la primera y la última. La solución viene de mano del concepto de *lazy loading* o carga perezosa. Consiste en diferir la carga de la lógica asociada a una dirección hasta el momento en que sea activada dicha ruta. De esa forma, **una página no visitada es una página que no pesa**. Y la carga inicial se hace mucho más liviana.\n\n## 2.1 Webpack y los bundles por ruta\n\nObjetivo: adelgazar el peso del *bundle* principal. Para conseguirlo hay que configurar las rutas de forma que no sea necesario importar los componentes a mostrar. De otro modo *webpack* empaquetaría ese componente como algo necesario... y por tanto sería enviado al navegador en el *bundle* principal sin que sea seguro su uso. La solución que ofrecen el *cli* y *webpack* consiste en **delegar la asignación del componente a otro módulo, pero sin importarlo**.\n\nHe creado un una nueva vista para ser usada en una nueva dirección llamada `/operations`. El componente se llama `OperationsComponent` y se ha **declarado pero no exportado** en el módulo `OperationsModule`. \n\n```shell\nng g m views/operations --routing true\nng g c views/operations/operations --flat\n```\n\nEste módulo no debe ser importado por el `AppModule`. Simplemente debe usarse su ruta relativa en el módulo de enrutado `AppRoutingModule` como un valor especial. Fíjate que **la dirección del fichero es una cadena de texto** asignada a una nueva propiedad de objeto route, la propiedad `loadChildren:\"\"`. No se está produciendo ninguna importación en *TypeScript* como ocurre con los componentes `HomeComponent` y  `NotFoundComponent`.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: HomeComponent\n  },\n  {\n    path: \"operations\",\n    loadChildren: \"./views/operations/operations.module#OperationsModule\"\n  },\n  {\n    path: \"404\",\n    component: NotFoundComponent\n  },\n  {\n    path: \"**\",\n    redirectTo: \"/404\"\n  }\n  ];\n```\n\nCon esta información *webpack* va a generar un *bundle* específico para este módulo. Si durante la ejecución se activa la ruta `/operations` entonces descarga ese paquete y ejecuta su contenido. Mientras tanto, se queda almacenado en el servidor.\n\n## 2.2 El enrutador delegado\n\nYa sabemos que hasta que no se active la ruta `/operations` no hay que hacer nada. Pero si se activa, entonces se descarga un *bundle* que contiene un módulo y los componentes necesarios. Sólo falta escoger dentro de ese módulo el componente que se asignará a la ruta.\n\nPara eso al crear el módulo de operaciones usé el *flag* `routing true`. Esto hace que se genere un segundo módulo de enrutado. El `OperationsRoutingModule` prácticamente idéntico al enrutador raíz. Digamos que es **un enrutador subordinado** al primero. Sólo se llega aquí si en la ruta principal se ha navegado a una dirección concreta. A este nivel la dirección `path: \"\"` se agrega al `path: \"operations\"` de su enrutador padre.\n\nLa ventaja real de este segundo enrutador es que irá empaquetado en el mismo *bundle* que el módulo de negocio y sus componentes. Aquí sí que asignaremos un componente concreto: el `OperationsComponent`. Dejando el fichero `operations.routing.ts` más o menos así:\n\n```typescript\nimport { OperationsComponent } from \"./operations.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OperationsComponent\n  }\n];\n```\n\n# 3 Parámetros\n\nLas rutas vistas hasta ahora se consideran estáticas pues se han definido usando constantes. Es muy habitual tener **páginas con la misma estructura pero distintos contenidos**. Un blog con sus posts, una tienda con sus productos... hay miles de ejemplos así.\n\nEse tipo de direcciones se consideran paramétricas, tienen unos segmentos estáticos y otros dinámicos. Estos últimos se definen con parámetros, algo así como **variables dentro de la cadena de la ruta**. Su sintaxis obliga a precederlas de dos puntos. Por ejemplo `countries/:country/cities/:city` resolvería rutas como *countries/usa/cities/new-york* o *countries/france/cities/paris*. Rellenando los parámetros `:country` y `:city` con los valores necesarios.  \n\n```typescript\nimport { OperationsComponent } from \"./operations.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OperationsComponent\n  },\n  {\n    path: \":id\",\n    component: ItemComponent\n  }\n];\n```\n\nEsta configuración resuelve las rutas `operations` y `operations/cualquier-cosa`. En la primera carga `OperationsComponent` y en los demás casos el `ItemComponent`.\n\n> En la práctica que nos ocupa lo usaremos para ver el detalle de las operaciones económicas realizadas. Como por ahora no tenemos, he puesto de ejemplo algunos números bien conocidos.\n\nPara forzar los enlaces he creado un componente a modo de listado llamado `ListComponent`. La parte interesante de su *html* es:\n\n```html\n<ul>\n  <li><a routerLink=\"/operations/271\">Number e</a></li>\n  <li><a routerLink=\"/operations/314\">Pi</a></li>\n  <li><a routerLink=\"/operations/667\">Gravitational Constant</a></li>\n</ul>\n```\n\nAún más interesante es el componente que muestra cada elemento de la lista, el `ItemComponent`. En este caso fíjate cómo accede a la ruta, obtiene el valor del parámetro y lo usa para mostrarlo en la web. \n\nContenido del fichero `item.component.ts`:\n\n```typescript\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n@Component({\n  selector: \"cf-item\",\n  template: ` <h3>{{ _id }}</h3>`\n})\nexport class ItemComponent implements OnInit {\n  _id: any;\n  constructor(private route: ActivatedRoute) {}\n  ngOnInit() {\n    this._id = this.route.snapshot.params[\"id\"];\n  }\n}\n```\n\n# 3.1 ActivatedRoute\n\nEl framework *Angular* trae muchas librerías para facilitar la vida al programador. Sólo hay que saber dónde están y cómo pedirlas. Para ello volvemos a la tecnología escogida,  *TypeScript*, que permite las **importaciones y la inyección de dependencias**.\n\nLa instrucción `import { ActivatedRoute } from \"@angular/router\";` pone a disposición del programdor el código donde está definida la clase `ActivatedRoute`, pero no se instancia directamente. En su lugar, se usa como un argumento del constructor de la clase del componente. Ese constructor es invocado por *Angular*, el cual sabe cómo rellenar los argumentos que le pido. Es decir, sabe cómo inyectar instancias de las que dependo.\n\nUna vez que me **inyectan las dependencias en el constructor** ya están listas para ser usadas como propiedades de la clase. *Mágia del TypeScript*. En concreto `this.route` me da acceso a métodos y propiedades para trabajar con la ruta activa y poder leer sus parámetros.\n\n# 3.2 Eventos e interfaces en TypeScript\n\nEl lenguaje *TypeScript* como superconjunto de *JavaScript* aporta técnicas de P.O.O. bien conocidas en lenguajes como *Java* o *C#*. Por ejemplo **la herencia y los interfaces**. Los diseñadores de *Angular* decidieron usar interfaces para implementar el **ciclo de vida de los componentes**. En lugar de lanzar eventos a los que subscribirse, te piden que implementes métodos de distintas interfaces. Esos métodos serán llamados cuando corresponda, como si fuesen subscripciones a eventos.\n\nEn este caso la *interfaz* `OnInit` obliga a implementar el método `ngOnInit()` el cual será invocado lo antes posible pero tras la completa construcción del componente. Asegurando así que el código que se ejecute en ese método tenga acceso a un componente completo y totalmente listo. \n\n\nCon esto tendrás una aplicación SPA en *Angular 6*. Sigue esta serie para añadirle [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/) mientras aprendes a programar con Angular6.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng_2-Paginas-y-rutas-Angular-SPA.md","raw":"---\ntitle: Páginas y rutas Angular SPA\npermalink: paginas-y-rutas-angular-spa\ndate: 2018-08-24 12:19:14\ntags:  \n- Angular\n- SPA\n- Routing\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-2_spa.png\n---\n![Tutorial Angular5 2-SPA](/images/tutorial-angular-2_spa.png)\n\n\nLas **aplicaciones Angular son conjuntos de páginas enrutadas** en el propio navegador. Son las conocidas *SPA, Single Page Applications*. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.\n\nSeguimos usando el concepto de árbol, ahora como analogía de **las rutas y las vistas** asociadas. Algo que se consigue fácilmente con `@angular/router` **el enrutador de Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Base para una aplicación Angular](../base-aplicacion-angular/). Al finalizar tendrás un SPA con vistas asociadas a sus rutas.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/AutoBot/2-spa](https://github.com/AcademiaBinaria/autobot/tree/2-spa) \n\n# 1. Rutas\n\nAl crear la aplicación hice uso del flag `routing true` en el comando de generación del *CLI*. Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el `AppModule` verdadero módulo raíz, y ahora verás su gemelo: el **módulo de enrutado** 'AppRoutingModule'.\n\n## 1.1 RouterModule\n\nEste módulo cumple dos funciones. Por un lado **importa al `RouterModule`** que contiene toda la lógica necesaria para enrutar en el navegador. Por otro lado, permite la **definición de rutas** en el array `Routes[]`. \n\n>Por motivos estéticos he cambiado el nombre original del fichero `app-routing.module.ts` a `app.routing.ts` y así disponer de un icono propio en el tema [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme).\n\n```typescript\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { HomeComponent } from \"./views/home/home.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: HomeComponent\n  }];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nEl array de rutas recibe **objetos con propiedades** de configuración. La primera es `path:` en la que se especifica **la dirección** que resuelve, en este caso la ruta vacía o raíz del árbol de rutas. Otra propiedad fundamental es `component` la cual indica **el componente** que se debe mostrar cuando esta ruta se active.\n\nEn este caso he aprovechado el componente `HomeComponent` para asociarlo a la ruta raíz. Pero, ¿qué pasará con dicho componente? ¿dónde se cargará?. Presentamos a `<router-outlet>`.\n\n## 1.2 Router Outlet\n\nLa idea general de **una SPA es tener una única página que cargue dinámicamente otras vistas**. Normalmente la página contenedora mantiene el menú de navegación, el pie de página y otras áreas comunes. Y deja un espacio para la carga dinámica. Para ello necesitamos saber **qué componente cargar y dónde mostrarlo**. De esto último se ocupa la etiqueta ` <router-outlet></router-outlet>`.\n\nEn el `app.component.ts` había un reclamo directo al componente `cf-home`. Para hacerlo dinámico se sustituye por ` <router-outlet></router-outlet>` quedando algo así:\n\n```typescript\n    selector: \"cf-root\",\n    template: `\n      <cf-nav></cf-nav>\n      <router-outlet></router-outlet>\n      <cf-footer></cf-footer>\n    `\n    styles: []\n```\n> Puedes ver los cambios realizados en [este *commit*](https://github.com/AcademiaBinaria/angular5/commit/a0ae9077ea2a74e8683de8b281147661b7a9f508)\n\n## 1.3 Router Redirect\n\nLa configuración de rutas no sólo permite asignar componentes a las direcciones. También se pueden hacer **redirecciones de unas direcciones a otras**. Y por supuesto puede haber **rutas no contempladas o errores** por parte del usuario, los infames `404 Not Found`.\n\nUn ejemplo de ambas situaciones sería configurar nuestras rutas de forma que toda ruta desconocida nos lleve a otra general que muestre un mensaje predeterminado. Para hacerlo genera un módulo y un componente llamados `NotFound` con los siguientes comandos:\n\n```shell\nng g m views/not-found\nng g c views/not-found/not-found --export --flat\n```\nVuelve al módulo de enrutado, ahora conocido como `app.routing.ts`, y agrega dos nuevas entradas al array `routes`.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: HomeComponent\n  },\n  {\n    path: \"404\",\n    component: NotFoundComponent\n  },\n  {\n    path: \"**\",\n    redirectTo: \"/404\"\n  }\n  ];\n```\n\nLa entrada interesante es la última. Su dirección `path: \"**\"` indica que es cualquier ruta que no haya sido resuelta previamente. Un *not found* de toda la vida. En este caso lo redirijo a una ruta existente: `/404`. Y a esta última se le asocia un componente concreto, el `NotFoundComponent`.\n\n## 1.4 Router Link\n\nLos enlaces web tradicionalmente se han resuelto con elementos `<a href=\"\"></a>` dónde en su atributo `href` se asociaba la dirección a la cuál navegar ante el click del usuario. **En Angular los enlaces se declaran con un atributo** especial llamado `routerLink`. Este atributo **se compila dando lugar al `href`** oportuno.\n\nEn el fichero `not-found.component.ts` pon algo así:\n```typescript\n  selector: \"cf-not-found\",\n  template: `\n    <h1>Not Found</h1>\n    <h2>404</h2>\n    <a routerLink=\"/\">Go home</a>\n  `,\n  styles: []\n```\n\n>Por ahora la funcionalidad de `routerLink` no mejora en nada a `href`. Pero lo hará. Mientras tanto familiarízate con su sintaxis y... asegúrate de importar `RouterModule` en `not-found.module.ts`. \n\n\n# 2 Lazy Loading\nLas *webs SPA* se crearon por una razón que casi acaba con ellas: **la velocidad**. Al realizar el enrutado en el cliente y querer evitar todos los viajes posibles hasta el servidor, se cargó a la única página web con todo el peso de la aplicación. Lo cual la hizo terriblemente lenta en la primera visita de cada usuario. \n\nEl **impacto de la primera visita** en una aplicación de intranet no suele ser un problema grave. Pero en internet esa visita puede ser la primera y la última. La solución viene de mano del concepto de *lazy loading* o carga perezosa. Consiste en diferir la carga de la lógica asociada a una dirección hasta el momento en que sea activada dicha ruta. De esa forma, **una página no visitada es una página que no pesa**. Y la carga inicial se hace mucho más liviana.\n\n## 2.1 Webpack y los bundles por ruta\n\nObjetivo: adelgazar el peso del *bundle* principal. Para conseguirlo hay que configurar las rutas de forma que no sea necesario importar los componentes a mostrar. De otro modo *webpack* empaquetaría ese componente como algo necesario... y por tanto sería enviado al navegador en el *bundle* principal sin que sea seguro su uso. La solución que ofrecen el *cli* y *webpack* consiste en **delegar la asignación del componente a otro módulo, pero sin importarlo**.\n\nHe creado un una nueva vista para ser usada en una nueva dirección llamada `/operations`. El componente se llama `OperationsComponent` y se ha **declarado pero no exportado** en el módulo `OperationsModule`. \n\n```shell\nng g m views/operations --routing true\nng g c views/operations/operations --flat\n```\n\nEste módulo no debe ser importado por el `AppModule`. Simplemente debe usarse su ruta relativa en el módulo de enrutado `AppRoutingModule` como un valor especial. Fíjate que **la dirección del fichero es una cadena de texto** asignada a una nueva propiedad de objeto route, la propiedad `loadChildren:\"\"`. No se está produciendo ninguna importación en *TypeScript* como ocurre con los componentes `HomeComponent` y  `NotFoundComponent`.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: HomeComponent\n  },\n  {\n    path: \"operations\",\n    loadChildren: \"./views/operations/operations.module#OperationsModule\"\n  },\n  {\n    path: \"404\",\n    component: NotFoundComponent\n  },\n  {\n    path: \"**\",\n    redirectTo: \"/404\"\n  }\n  ];\n```\n\nCon esta información *webpack* va a generar un *bundle* específico para este módulo. Si durante la ejecución se activa la ruta `/operations` entonces descarga ese paquete y ejecuta su contenido. Mientras tanto, se queda almacenado en el servidor.\n\n## 2.2 El enrutador delegado\n\nYa sabemos que hasta que no se active la ruta `/operations` no hay que hacer nada. Pero si se activa, entonces se descarga un *bundle* que contiene un módulo y los componentes necesarios. Sólo falta escoger dentro de ese módulo el componente que se asignará a la ruta.\n\nPara eso al crear el módulo de operaciones usé el *flag* `routing true`. Esto hace que se genere un segundo módulo de enrutado. El `OperationsRoutingModule` prácticamente idéntico al enrutador raíz. Digamos que es **un enrutador subordinado** al primero. Sólo se llega aquí si en la ruta principal se ha navegado a una dirección concreta. A este nivel la dirección `path: \"\"` se agrega al `path: \"operations\"` de su enrutador padre.\n\nLa ventaja real de este segundo enrutador es que irá empaquetado en el mismo *bundle* que el módulo de negocio y sus componentes. Aquí sí que asignaremos un componente concreto: el `OperationsComponent`. Dejando el fichero `operations.routing.ts` más o menos así:\n\n```typescript\nimport { OperationsComponent } from \"./operations.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OperationsComponent\n  }\n];\n```\n\n# 3 Parámetros\n\nLas rutas vistas hasta ahora se consideran estáticas pues se han definido usando constantes. Es muy habitual tener **páginas con la misma estructura pero distintos contenidos**. Un blog con sus posts, una tienda con sus productos... hay miles de ejemplos así.\n\nEse tipo de direcciones se consideran paramétricas, tienen unos segmentos estáticos y otros dinámicos. Estos últimos se definen con parámetros, algo así como **variables dentro de la cadena de la ruta**. Su sintaxis obliga a precederlas de dos puntos. Por ejemplo `countries/:country/cities/:city` resolvería rutas como *countries/usa/cities/new-york* o *countries/france/cities/paris*. Rellenando los parámetros `:country` y `:city` con los valores necesarios.  \n\n```typescript\nimport { OperationsComponent } from \"./operations.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OperationsComponent\n  },\n  {\n    path: \":id\",\n    component: ItemComponent\n  }\n];\n```\n\nEsta configuración resuelve las rutas `operations` y `operations/cualquier-cosa`. En la primera carga `OperationsComponent` y en los demás casos el `ItemComponent`.\n\n> En la práctica que nos ocupa lo usaremos para ver el detalle de las operaciones económicas realizadas. Como por ahora no tenemos, he puesto de ejemplo algunos números bien conocidos.\n\nPara forzar los enlaces he creado un componente a modo de listado llamado `ListComponent`. La parte interesante de su *html* es:\n\n```html\n<ul>\n  <li><a routerLink=\"/operations/271\">Number e</a></li>\n  <li><a routerLink=\"/operations/314\">Pi</a></li>\n  <li><a routerLink=\"/operations/667\">Gravitational Constant</a></li>\n</ul>\n```\n\nAún más interesante es el componente que muestra cada elemento de la lista, el `ItemComponent`. En este caso fíjate cómo accede a la ruta, obtiene el valor del parámetro y lo usa para mostrarlo en la web. \n\nContenido del fichero `item.component.ts`:\n\n```typescript\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n@Component({\n  selector: \"cf-item\",\n  template: ` <h3>{{ _id }}</h3>`\n})\nexport class ItemComponent implements OnInit {\n  _id: any;\n  constructor(private route: ActivatedRoute) {}\n  ngOnInit() {\n    this._id = this.route.snapshot.params[\"id\"];\n  }\n}\n```\n\n# 3.1 ActivatedRoute\n\nEl framework *Angular* trae muchas librerías para facilitar la vida al programador. Sólo hay que saber dónde están y cómo pedirlas. Para ello volvemos a la tecnología escogida,  *TypeScript*, que permite las **importaciones y la inyección de dependencias**.\n\nLa instrucción `import { ActivatedRoute } from \"@angular/router\";` pone a disposición del programdor el código donde está definida la clase `ActivatedRoute`, pero no se instancia directamente. En su lugar, se usa como un argumento del constructor de la clase del componente. Ese constructor es invocado por *Angular*, el cual sabe cómo rellenar los argumentos que le pido. Es decir, sabe cómo inyectar instancias de las que dependo.\n\nUna vez que me **inyectan las dependencias en el constructor** ya están listas para ser usadas como propiedades de la clase. *Mágia del TypeScript*. En concreto `this.route` me da acceso a métodos y propiedades para trabajar con la ruta activa y poder leer sus parámetros.\n\n# 3.2 Eventos e interfaces en TypeScript\n\nEl lenguaje *TypeScript* como superconjunto de *JavaScript* aporta técnicas de P.O.O. bien conocidas en lenguajes como *Java* o *C#*. Por ejemplo **la herencia y los interfaces**. Los diseñadores de *Angular* decidieron usar interfaces para implementar el **ciclo de vida de los componentes**. En lugar de lanzar eventos a los que subscribirse, te piden que implementes métodos de distintas interfaces. Esos métodos serán llamados cuando corresponda, como si fuesen subscripciones a eventos.\n\nEn este caso la *interfaz* `OnInit` obliga a implementar el método `ngOnInit()` el cual será invocado lo antes posible pero tras la completa construcción del componente. Asegurando así que el código que se ejecute en ese método tenga acceso a un componente completo y totalmente listo. \n\n\nCon esto tendrás una aplicación SPA en *Angular 6*. Sigue esta serie para añadirle [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/) mientras aprendes a programar con Angular6.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"paginas-y-rutas-angular-spa","published":1,"updated":"2018-08-24T10:29:39.875Z","_id":"cjbrwpvji0029iwd3b7w987c4","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-2_spa.png\" alt=\"Tutorial Angular5 2-SPA\"></p><p>Las <strong>aplicaciones Angular son conjuntos de páginas enrutadas</strong> en el propio navegador. Son las conocidas <em>SPA, Single Page Applications</em>. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.</p><p>Seguimos usando el concepto de árbol, ahora como analogía de <strong>las rutas y las vistas</strong> asociadas. Algo que se consigue fácilmente con <code>@angular/router</code> <strong>el enrutador de Angular</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>. Al finalizar tendrás un SPA con vistas asociadas a sus rutas.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/2-spa\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/2-spa</a></p></blockquote><h1 id=\"1-Rutas\"><a href=\"#1-Rutas\" class=\"headerlink\" title=\"1. Rutas\"></a>1. Rutas</h1><p>Al crear la aplicación hice uso del flag <code>routing true</code> en el comando de generación del <em>CLI</em>. Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el <code>AppModule</code> verdadero módulo raíz, y ahora verás su gemelo: el <strong>módulo de enrutado</strong> ‘AppRoutingModule’.</p><h2 id=\"1-1-RouterModule\"><a href=\"#1-1-RouterModule\" class=\"headerlink\" title=\"1.1 RouterModule\"></a>1.1 RouterModule</h2><p>Este módulo cumple dos funciones. Por un lado <strong>importa al <code>RouterModule</code></strong> que contiene toda la lógica necesaria para enrutar en el navegador. Por otro lado, permite la <strong>definición de rutas</strong> en el array <code>Routes[]</code>.</p><blockquote><p>Por motivos estéticos he cambiado el nombre original del fichero <code>app-routing.module.ts</code> a <code>app.routing.ts</code> y así disponer de un icono propio en el tema <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"noopener\">Material Icon Theme</a>.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/router\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./views/home/home.component\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>El array de rutas recibe <strong>objetos con propiedades</strong> de configuración. La primera es <code>path:</code> en la que se especifica <strong>la dirección</strong> que resuelve, en este caso la ruta vacía o raíz del árbol de rutas. Otra propiedad fundamental es <code>component</code> la cual indica <strong>el componente</strong> que se debe mostrar cuando esta ruta se active.</p><p>En este caso he aprovechado el componente <code>HomeComponent</code> para asociarlo a la ruta raíz. Pero, ¿qué pasará con dicho componente? ¿dónde se cargará?. Presentamos a <code>&lt;router-outlet&gt;</code>.</p><h2 id=\"1-2-Router-Outlet\"><a href=\"#1-2-Router-Outlet\" class=\"headerlink\" title=\"1.2 Router Outlet\"></a>1.2 Router Outlet</h2><p>La idea general de <strong>una SPA es tener una única página que cargue dinámicamente otras vistas</strong>. Normalmente la página contenedora mantiene el menú de navegación, el pie de página y otras áreas comunes. Y deja un espacio para la carga dinámica. Para ello necesitamos saber <strong>qué componente cargar y dónde mostrarlo</strong>. De esto último se ocupa la etiqueta <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>.</p><p>En el <code>app.component.ts</code> había un reclamo directo al componente <code>cf-home</code>. Para hacerlo dinámico se sustituye por <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> quedando algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector: <span class=\"string\">\"cf-root\"</span>,</span><br><span class=\"line\">template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;cf-nav&gt;&lt;/cf-nav&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;router-outlet&gt;&lt;/router-outlet&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;cf-footer&gt;&lt;/cf-footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">styles: []</span><br></pre></td></tr></table></figure><blockquote><p>Puedes ver los cambios realizados en <a href=\"https://github.com/AcademiaBinaria/angular5/commit/a0ae9077ea2a74e8683de8b281147661b7a9f508\" target=\"_blank\" rel=\"noopener\">este <em>commit</em></a></p></blockquote><h2 id=\"1-3-Router-Redirect\"><a href=\"#1-3-Router-Redirect\" class=\"headerlink\" title=\"1.3 Router Redirect\"></a>1.3 Router Redirect</h2><p>La configuración de rutas no sólo permite asignar componentes a las direcciones. También se pueden hacer <strong>redirecciones de unas direcciones a otras</strong>. Y por supuesto puede haber <strong>rutas no contempladas o errores</strong> por parte del usuario, los infames <code>404 Not Found</code>.</p><p>Un ejemplo de ambas situaciones sería configurar nuestras rutas de forma que toda ruta desconocida nos lleve a otra general que muestre un mensaje predeterminado. Para hacerlo genera un módulo y un componente llamados <code>NotFound</code> con los siguientes comandos:</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m views/not-found</span><br><span class=\"line\">ng g c views/not-found/not-found --export --flat</span><br></pre></td></tr></table></figure><p>Vuelve al módulo de enrutado, ahora conocido como <code>app.routing.ts</code>, y agrega dos nuevas entradas al array <code>routes</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"404\"</span>,</span><br><span class=\"line\">    component: NotFoundComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"**\"</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">\"/404\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ];</span><br></pre></td></tr></table></figure><p>La entrada interesante es la última. Su dirección <code>path: &quot;**&quot;</code> indica que es cualquier ruta que no haya sido resuelta previamente. Un <em>not found</em> de toda la vida. En este caso lo redirijo a una ruta existente: <code>/404</code>. Y a esta última se le asocia un componente concreto, el <code>NotFoundComponent</code>.</p><h2 id=\"1-4-Router-Link\"><a href=\"#1-4-Router-Link\" class=\"headerlink\" title=\"1.4 Router Link\"></a>1.4 Router Link</h2><p>Los enlaces web tradicionalmente se han resuelto con elementos <code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code> dónde en su atributo <code>href</code> se asociaba la dirección a la cuál navegar ante el click del usuario. <strong>En Angular los enlaces se declaran con un atributo</strong> especial llamado <code>routerLink</code>. Este atributo <strong>se compila dando lugar al <code>href</code></strong> oportuno.</p><p>En el fichero <code>not-found.component.ts</code> pon algo así:<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector: <span class=\"string\">\"cf-not-found\"</span>,</span><br><span class=\"line\">template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;h1&gt;Not Found&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;h2&gt;404&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;a routerLink=\"/\"&gt;Go home&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>,</span><br><span class=\"line\">styles: []</span><br></pre></td></tr></table></figure><p></p><blockquote><p>Por ahora la funcionalidad de <code>routerLink</code> no mejora en nada a <code>href</code>. Pero lo hará. Mientras tanto familiarízate con su sintaxis y… asegúrate de importar <code>RouterModule</code> en <code>not-found.module.ts</code>.</p></blockquote><h1 id=\"2-Lazy-Loading\"><a href=\"#2-Lazy-Loading\" class=\"headerlink\" title=\"2 Lazy Loading\"></a>2 Lazy Loading</h1><p>Las <em>webs SPA</em> se crearon por una razón que casi acaba con ellas: <strong>la velocidad</strong>. Al realizar el enrutado en el cliente y querer evitar todos los viajes posibles hasta el servidor, se cargó a la única página web con todo el peso de la aplicación. Lo cual la hizo terriblemente lenta en la primera visita de cada usuario.</p><p>El <strong>impacto de la primera visita</strong> en una aplicación de intranet no suele ser un problema grave. Pero en internet esa visita puede ser la primera y la última. La solución viene de mano del concepto de <em>lazy loading</em> o carga perezosa. Consiste en diferir la carga de la lógica asociada a una dirección hasta el momento en que sea activada dicha ruta. De esa forma, <strong>una página no visitada es una página que no pesa</strong>. Y la carga inicial se hace mucho más liviana.</p><h2 id=\"2-1-Webpack-y-los-bundles-por-ruta\"><a href=\"#2-1-Webpack-y-los-bundles-por-ruta\" class=\"headerlink\" title=\"2.1 Webpack y los bundles por ruta\"></a>2.1 Webpack y los bundles por ruta</h2><p>Objetivo: adelgazar el peso del <em>bundle</em> principal. Para conseguirlo hay que configurar las rutas de forma que no sea necesario importar los componentes a mostrar. De otro modo <em>webpack</em> empaquetaría ese componente como algo necesario… y por tanto sería enviado al navegador en el <em>bundle</em> principal sin que sea seguro su uso. La solución que ofrecen el <em>cli</em> y <em>webpack</em> consiste en <strong>delegar la asignación del componente a otro módulo, pero sin importarlo</strong>.</p><p>He creado un una nueva vista para ser usada en una nueva dirección llamada <code>/operations</code>. El componente se llama <code>OperationsComponent</code> y se ha <strong>declarado pero no exportado</strong> en el módulo <code>OperationsModule</code>.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m views/operations --routing true</span><br><span class=\"line\">ng g c views/operations/operations --flat</span><br></pre></td></tr></table></figure><p>Este módulo no debe ser importado por el <code>AppModule</code>. Simplemente debe usarse su ruta relativa en el módulo de enrutado <code>AppRoutingModule</code> como un valor especial. Fíjate que <strong>la dirección del fichero es una cadena de texto</strong> asignada a una nueva propiedad de objeto route, la propiedad <code>loadChildren:&quot;&quot;</code>. No se está produciendo ninguna importación en <em>TypeScript</em> como ocurre con los componentes <code>HomeComponent</code> y <code>NotFoundComponent</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"operations\"</span>,</span><br><span class=\"line\">    loadChildren: <span class=\"string\">\"./views/operations/operations.module#OperationsModule\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"404\"</span>,</span><br><span class=\"line\">    component: NotFoundComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"**\"</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">\"/404\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ];</span><br></pre></td></tr></table></figure><p>Con esta información <em>webpack</em> va a generar un <em>bundle</em> específico para este módulo. Si durante la ejecución se activa la ruta <code>/operations</code> entonces descarga ese paquete y ejecuta su contenido. Mientras tanto, se queda almacenado en el servidor.</p><h2 id=\"2-2-El-enrutador-delegado\"><a href=\"#2-2-El-enrutador-delegado\" class=\"headerlink\" title=\"2.2 El enrutador delegado\"></a>2.2 El enrutador delegado</h2><p>Ya sabemos que hasta que no se active la ruta <code>/operations</code> no hay que hacer nada. Pero si se activa, entonces se descarga un <em>bundle</em> que contiene un módulo y los componentes necesarios. Sólo falta escoger dentro de ese módulo el componente que se asignará a la ruta.</p><p>Para eso al crear el módulo de operaciones usé el <em>flag</em> <code>routing true</code>. Esto hace que se genere un segundo módulo de enrutado. El <code>OperationsRoutingModule</code> prácticamente idéntico al enrutador raíz. Digamos que es <strong>un enrutador subordinado</strong> al primero. Sólo se llega aquí si en la ruta principal se ha navegado a una dirección concreta. A este nivel la dirección <code>path: &quot;&quot;</code> se agrega al <code>path: &quot;operations&quot;</code> de su enrutador padre.</p><p>La ventaja real de este segundo enrutador es que irá empaquetado en el mismo <em>bundle</em> que el módulo de negocio y sus componentes. Aquí sí que asignaremos un componente concreto: el <code>OperationsComponent</code>. Dejando el fichero <code>operations.routing.ts</code> más o menos así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OperationsComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./operations.component\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: OperationsComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><h1 id=\"3-Parametros\"><a href=\"#3-Parametros\" class=\"headerlink\" title=\"3 Parámetros\"></a>3 Parámetros</h1><p>Las rutas vistas hasta ahora se consideran estáticas pues se han definido usando constantes. Es muy habitual tener <strong>páginas con la misma estructura pero distintos contenidos</strong>. Un blog con sus posts, una tienda con sus productos… hay miles de ejemplos así.</p><p>Ese tipo de direcciones se consideran paramétricas, tienen unos segmentos estáticos y otros dinámicos. Estos últimos se definen con parámetros, algo así como <strong>variables dentro de la cadena de la ruta</strong>. Su sintaxis obliga a precederlas de dos puntos. Por ejemplo <code>countries/:country/cities/:city</code> resolvería rutas como <em>countries/usa/cities/new-york</em> o <em>countries/france/cities/paris</em>. Rellenando los parámetros <code>:country</code> y <code>:city</code> con los valores necesarios.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OperationsComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./operations.component\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: OperationsComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\":id\"</span>,</span><br><span class=\"line\">    component: ItemComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>Esta configuración resuelve las rutas <code>operations</code> y <code>operations/cualquier-cosa</code>. En la primera carga <code>OperationsComponent</code> y en los demás casos el <code>ItemComponent</code>.</p><blockquote><p>En la práctica que nos ocupa lo usaremos para ver el detalle de las operaciones económicas realizadas. Como por ahora no tenemos, he puesto de ejemplo algunos números bien conocidos.</p></blockquote><p>Para forzar los enlaces he creado un componente a modo de listado llamado <code>ListComponent</code>. La parte interesante de su <em>html</em> es:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/operations/271\"</span>&gt;</span>Number e<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/operations/314\"</span>&gt;</span>Pi<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/operations/667\"</span>&gt;</span>Gravitational Constant<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Aún más interesante es el componente que muestra cada elemento de la lista, el <code>ItemComponent</code>. En este caso fíjate cómo accede a la ruta, obtiene el valor del parámetro y lo usa para mostrarlo en la web.</p><p>Contenido del fichero <code>item.component.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/router\"</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">\"cf-item\"</span>,</span><br><span class=\"line\">  template: <span class=\"string\">` &lt;h3&gt;&#123;&#123; _id &#125;&#125;&lt;/h3&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ItemComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  _id: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> route: ActivatedRoute</span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._id = <span class=\"keyword\">this</span>.route.snapshot.params[<span class=\"string\">\"id\"</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"3-1-ActivatedRoute\"><a href=\"#3-1-ActivatedRoute\" class=\"headerlink\" title=\"3.1 ActivatedRoute\"></a>3.1 ActivatedRoute</h1><p>El framework <em>Angular</em> trae muchas librerías para facilitar la vida al programador. Sólo hay que saber dónde están y cómo pedirlas. Para ello volvemos a la tecnología escogida, <em>TypeScript</em>, que permite las <strong>importaciones y la inyección de dependencias</strong>.</p><p>La instrucción <code>import { ActivatedRoute } from &quot;@angular/router&quot;;</code> pone a disposición del programdor el código donde está definida la clase <code>ActivatedRoute</code>, pero no se instancia directamente. En su lugar, se usa como un argumento del constructor de la clase del componente. Ese constructor es invocado por <em>Angular</em>, el cual sabe cómo rellenar los argumentos que le pido. Es decir, sabe cómo inyectar instancias de las que dependo.</p><p>Una vez que me <strong>inyectan las dependencias en el constructor</strong> ya están listas para ser usadas como propiedades de la clase. <em>Mágia del TypeScript</em>. En concreto <code>this.route</code> me da acceso a métodos y propiedades para trabajar con la ruta activa y poder leer sus parámetros.</p><h1 id=\"3-2-Eventos-e-interfaces-en-TypeScript\"><a href=\"#3-2-Eventos-e-interfaces-en-TypeScript\" class=\"headerlink\" title=\"3.2 Eventos e interfaces en TypeScript\"></a>3.2 Eventos e interfaces en TypeScript</h1><p>El lenguaje <em>TypeScript</em> como superconjunto de <em>JavaScript</em> aporta técnicas de P.O.O. bien conocidas en lenguajes como <em>Java</em> o <em>C#</em>. Por ejemplo <strong>la herencia y los interfaces</strong>. Los diseñadores de <em>Angular</em> decidieron usar interfaces para implementar el <strong>ciclo de vida de los componentes</strong>. En lugar de lanzar eventos a los que subscribirse, te piden que implementes métodos de distintas interfaces. Esos métodos serán llamados cuando corresponda, como si fuesen subscripciones a eventos.</p><p>En este caso la <em>interfaz</em> <code>OnInit</code> obliga a implementar el método <code>ngOnInit()</code> el cual será invocado lo antes posible pero tras la completa construcción del componente. Asegurando así que el código que se ejecute en ese método tenga acceso a un componente completo y totalmente listo.</p><p>Con esto tendrás una aplicación SPA en <em>Angular 6</em>. Sigue esta serie para añadirle <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a> mientras aprendes a programar con Angular6.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-2_spa.png\" alt=\"Tutorial Angular5 2-SPA\"></p><p>Las <strong>aplicaciones Angular son conjuntos de páginas enrutadas</strong> en el propio navegador. Son las conocidas <em>SPA, Single Page Applications</em>. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.</p><p>Seguimos usando el concepto de árbol, ahora como analogía de <strong>las rutas y las vistas</strong> asociadas. Algo que se consigue fácilmente con <code>@angular/router</code> <strong>el enrutador de Angular</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>. Al finalizar tendrás un SPA con vistas asociadas a sus rutas.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/2-spa\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/2-spa</a></p></blockquote><h1 id=\"1-Rutas\"><a href=\"#1-Rutas\" class=\"headerlink\" title=\"1. Rutas\"></a>1. Rutas</h1><p>Al crear la aplicación hice uso del flag <code>routing true</code> en el comando de generación del <em>CLI</em>. Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el <code>AppModule</code> verdadero módulo raíz, y ahora verás su gemelo: el <strong>módulo de enrutado</strong> ‘AppRoutingModule’.</p><h2 id=\"1-1-RouterModule\"><a href=\"#1-1-RouterModule\" class=\"headerlink\" title=\"1.1 RouterModule\"></a>1.1 RouterModule</h2><p>Este módulo cumple dos funciones. Por un lado <strong>importa al <code>RouterModule</code></strong> que contiene toda la lógica necesaria para enrutar en el navegador. Por otro lado, permite la <strong>definición de rutas</strong> en el array <code>Routes[]</code>.</p><blockquote><p>Por motivos estéticos he cambiado el nombre original del fichero <code>app-routing.module.ts</code> a <code>app.routing.ts</code> y así disponer de un icono propio en el tema <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"noopener\">Material Icon Theme</a>.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/router\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./views/home/home.component\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>El array de rutas recibe <strong>objetos con propiedades</strong> de configuración. La primera es <code>path:</code> en la que se especifica <strong>la dirección</strong> que resuelve, en este caso la ruta vacía o raíz del árbol de rutas. Otra propiedad fundamental es <code>component</code> la cual indica <strong>el componente</strong> que se debe mostrar cuando esta ruta se active.</p><p>En este caso he aprovechado el componente <code>HomeComponent</code> para asociarlo a la ruta raíz. Pero, ¿qué pasará con dicho componente? ¿dónde se cargará?. Presentamos a <code>&lt;router-outlet&gt;</code>.</p><h2 id=\"1-2-Router-Outlet\"><a href=\"#1-2-Router-Outlet\" class=\"headerlink\" title=\"1.2 Router Outlet\"></a>1.2 Router Outlet</h2><p>La idea general de <strong>una SPA es tener una única página que cargue dinámicamente otras vistas</strong>. Normalmente la página contenedora mantiene el menú de navegación, el pie de página y otras áreas comunes. Y deja un espacio para la carga dinámica. Para ello necesitamos saber <strong>qué componente cargar y dónde mostrarlo</strong>. De esto último se ocupa la etiqueta <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>.</p><p>En el <code>app.component.ts</code> había un reclamo directo al componente <code>cf-home</code>. Para hacerlo dinámico se sustituye por <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> quedando algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector: <span class=\"string\">\"cf-root\"</span>,</span><br><span class=\"line\">template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;cf-nav&gt;&lt;/cf-nav&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;router-outlet&gt;&lt;/router-outlet&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;cf-footer&gt;&lt;/cf-footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">styles: []</span><br></pre></td></tr></table></figure><blockquote><p>Puedes ver los cambios realizados en <a href=\"https://github.com/AcademiaBinaria/angular5/commit/a0ae9077ea2a74e8683de8b281147661b7a9f508\" target=\"_blank\" rel=\"noopener\">este <em>commit</em></a></p></blockquote><h2 id=\"1-3-Router-Redirect\"><a href=\"#1-3-Router-Redirect\" class=\"headerlink\" title=\"1.3 Router Redirect\"></a>1.3 Router Redirect</h2><p>La configuración de rutas no sólo permite asignar componentes a las direcciones. También se pueden hacer <strong>redirecciones de unas direcciones a otras</strong>. Y por supuesto puede haber <strong>rutas no contempladas o errores</strong> por parte del usuario, los infames <code>404 Not Found</code>.</p><p>Un ejemplo de ambas situaciones sería configurar nuestras rutas de forma que toda ruta desconocida nos lleve a otra general que muestre un mensaje predeterminado. Para hacerlo genera un módulo y un componente llamados <code>NotFound</code> con los siguientes comandos:</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m views/not-found</span><br><span class=\"line\">ng g c views/not-found/not-found --export --flat</span><br></pre></td></tr></table></figure><p>Vuelve al módulo de enrutado, ahora conocido como <code>app.routing.ts</code>, y agrega dos nuevas entradas al array <code>routes</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"404\"</span>,</span><br><span class=\"line\">    component: NotFoundComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"**\"</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">\"/404\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ];</span><br></pre></td></tr></table></figure><p>La entrada interesante es la última. Su dirección <code>path: &quot;**&quot;</code> indica que es cualquier ruta que no haya sido resuelta previamente. Un <em>not found</em> de toda la vida. En este caso lo redirijo a una ruta existente: <code>/404</code>. Y a esta última se le asocia un componente concreto, el <code>NotFoundComponent</code>.</p><h2 id=\"1-4-Router-Link\"><a href=\"#1-4-Router-Link\" class=\"headerlink\" title=\"1.4 Router Link\"></a>1.4 Router Link</h2><p>Los enlaces web tradicionalmente se han resuelto con elementos <code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code> dónde en su atributo <code>href</code> se asociaba la dirección a la cuál navegar ante el click del usuario. <strong>En Angular los enlaces se declaran con un atributo</strong> especial llamado <code>routerLink</code>. Este atributo <strong>se compila dando lugar al <code>href</code></strong> oportuno.</p><p>En el fichero <code>not-found.component.ts</code> pon algo así:<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector: <span class=\"string\">\"cf-not-found\"</span>,</span><br><span class=\"line\">template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;h1&gt;Not Found&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;h2&gt;404&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;a routerLink=\"/\"&gt;Go home&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>,</span><br><span class=\"line\">styles: []</span><br></pre></td></tr></table></figure><p></p><blockquote><p>Por ahora la funcionalidad de <code>routerLink</code> no mejora en nada a <code>href</code>. Pero lo hará. Mientras tanto familiarízate con su sintaxis y… asegúrate de importar <code>RouterModule</code> en <code>not-found.module.ts</code>.</p></blockquote><h1 id=\"2-Lazy-Loading\"><a href=\"#2-Lazy-Loading\" class=\"headerlink\" title=\"2 Lazy Loading\"></a>2 Lazy Loading</h1><p>Las <em>webs SPA</em> se crearon por una razón que casi acaba con ellas: <strong>la velocidad</strong>. Al realizar el enrutado en el cliente y querer evitar todos los viajes posibles hasta el servidor, se cargó a la única página web con todo el peso de la aplicación. Lo cual la hizo terriblemente lenta en la primera visita de cada usuario.</p><p>El <strong>impacto de la primera visita</strong> en una aplicación de intranet no suele ser un problema grave. Pero en internet esa visita puede ser la primera y la última. La solución viene de mano del concepto de <em>lazy loading</em> o carga perezosa. Consiste en diferir la carga de la lógica asociada a una dirección hasta el momento en que sea activada dicha ruta. De esa forma, <strong>una página no visitada es una página que no pesa</strong>. Y la carga inicial se hace mucho más liviana.</p><h2 id=\"2-1-Webpack-y-los-bundles-por-ruta\"><a href=\"#2-1-Webpack-y-los-bundles-por-ruta\" class=\"headerlink\" title=\"2.1 Webpack y los bundles por ruta\"></a>2.1 Webpack y los bundles por ruta</h2><p>Objetivo: adelgazar el peso del <em>bundle</em> principal. Para conseguirlo hay que configurar las rutas de forma que no sea necesario importar los componentes a mostrar. De otro modo <em>webpack</em> empaquetaría ese componente como algo necesario… y por tanto sería enviado al navegador en el <em>bundle</em> principal sin que sea seguro su uso. La solución que ofrecen el <em>cli</em> y <em>webpack</em> consiste en <strong>delegar la asignación del componente a otro módulo, pero sin importarlo</strong>.</p><p>He creado un una nueva vista para ser usada en una nueva dirección llamada <code>/operations</code>. El componente se llama <code>OperationsComponent</code> y se ha <strong>declarado pero no exportado</strong> en el módulo <code>OperationsModule</code>.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m views/operations --routing true</span><br><span class=\"line\">ng g c views/operations/operations --flat</span><br></pre></td></tr></table></figure><p>Este módulo no debe ser importado por el <code>AppModule</code>. Simplemente debe usarse su ruta relativa en el módulo de enrutado <code>AppRoutingModule</code> como un valor especial. Fíjate que <strong>la dirección del fichero es una cadena de texto</strong> asignada a una nueva propiedad de objeto route, la propiedad <code>loadChildren:&quot;&quot;</code>. No se está produciendo ninguna importación en <em>TypeScript</em> como ocurre con los componentes <code>HomeComponent</code> y <code>NotFoundComponent</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"operations\"</span>,</span><br><span class=\"line\">    loadChildren: <span class=\"string\">\"./views/operations/operations.module#OperationsModule\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"404\"</span>,</span><br><span class=\"line\">    component: NotFoundComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"**\"</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">\"/404\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ];</span><br></pre></td></tr></table></figure><p>Con esta información <em>webpack</em> va a generar un <em>bundle</em> específico para este módulo. Si durante la ejecución se activa la ruta <code>/operations</code> entonces descarga ese paquete y ejecuta su contenido. Mientras tanto, se queda almacenado en el servidor.</p><h2 id=\"2-2-El-enrutador-delegado\"><a href=\"#2-2-El-enrutador-delegado\" class=\"headerlink\" title=\"2.2 El enrutador delegado\"></a>2.2 El enrutador delegado</h2><p>Ya sabemos que hasta que no se active la ruta <code>/operations</code> no hay que hacer nada. Pero si se activa, entonces se descarga un <em>bundle</em> que contiene un módulo y los componentes necesarios. Sólo falta escoger dentro de ese módulo el componente que se asignará a la ruta.</p><p>Para eso al crear el módulo de operaciones usé el <em>flag</em> <code>routing true</code>. Esto hace que se genere un segundo módulo de enrutado. El <code>OperationsRoutingModule</code> prácticamente idéntico al enrutador raíz. Digamos que es <strong>un enrutador subordinado</strong> al primero. Sólo se llega aquí si en la ruta principal se ha navegado a una dirección concreta. A este nivel la dirección <code>path: &quot;&quot;</code> se agrega al <code>path: &quot;operations&quot;</code> de su enrutador padre.</p><p>La ventaja real de este segundo enrutador es que irá empaquetado en el mismo <em>bundle</em> que el módulo de negocio y sus componentes. Aquí sí que asignaremos un componente concreto: el <code>OperationsComponent</code>. Dejando el fichero <code>operations.routing.ts</code> más o menos así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OperationsComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./operations.component\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: OperationsComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><h1 id=\"3-Parametros\"><a href=\"#3-Parametros\" class=\"headerlink\" title=\"3 Parámetros\"></a>3 Parámetros</h1><p>Las rutas vistas hasta ahora se consideran estáticas pues se han definido usando constantes. Es muy habitual tener <strong>páginas con la misma estructura pero distintos contenidos</strong>. Un blog con sus posts, una tienda con sus productos… hay miles de ejemplos así.</p><p>Ese tipo de direcciones se consideran paramétricas, tienen unos segmentos estáticos y otros dinámicos. Estos últimos se definen con parámetros, algo así como <strong>variables dentro de la cadena de la ruta</strong>. Su sintaxis obliga a precederlas de dos puntos. Por ejemplo <code>countries/:country/cities/:city</code> resolvería rutas como <em>countries/usa/cities/new-york</em> o <em>countries/france/cities/paris</em>. Rellenando los parámetros <code>:country</code> y <code>:city</code> con los valores necesarios.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OperationsComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./operations.component\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    component: OperationsComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">\":id\"</span>,</span><br><span class=\"line\">    component: ItemComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>Esta configuración resuelve las rutas <code>operations</code> y <code>operations/cualquier-cosa</code>. En la primera carga <code>OperationsComponent</code> y en los demás casos el <code>ItemComponent</code>.</p><blockquote><p>En la práctica que nos ocupa lo usaremos para ver el detalle de las operaciones económicas realizadas. Como por ahora no tenemos, he puesto de ejemplo algunos números bien conocidos.</p></blockquote><p>Para forzar los enlaces he creado un componente a modo de listado llamado <code>ListComponent</code>. La parte interesante de su <em>html</em> es:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/operations/271\"</span>&gt;</span>Number e<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/operations/314\"</span>&gt;</span>Pi<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/operations/667\"</span>&gt;</span>Gravitational Constant<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Aún más interesante es el componente que muestra cada elemento de la lista, el <code>ItemComponent</code>. En este caso fíjate cómo accede a la ruta, obtiene el valor del parámetro y lo usa para mostrarlo en la web.</p><p>Contenido del fichero <code>item.component.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/router\"</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">\"cf-item\"</span>,</span><br><span class=\"line\">  template: <span class=\"string\">` &lt;h3&gt;&#123;&#123; _id &#125;&#125;&lt;/h3&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ItemComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  _id: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> route: ActivatedRoute</span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._id = <span class=\"keyword\">this</span>.route.snapshot.params[<span class=\"string\">\"id\"</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"3-1-ActivatedRoute\"><a href=\"#3-1-ActivatedRoute\" class=\"headerlink\" title=\"3.1 ActivatedRoute\"></a>3.1 ActivatedRoute</h1><p>El framework <em>Angular</em> trae muchas librerías para facilitar la vida al programador. Sólo hay que saber dónde están y cómo pedirlas. Para ello volvemos a la tecnología escogida, <em>TypeScript</em>, que permite las <strong>importaciones y la inyección de dependencias</strong>.</p><p>La instrucción <code>import { ActivatedRoute } from &quot;@angular/router&quot;;</code> pone a disposición del programdor el código donde está definida la clase <code>ActivatedRoute</code>, pero no se instancia directamente. En su lugar, se usa como un argumento del constructor de la clase del componente. Ese constructor es invocado por <em>Angular</em>, el cual sabe cómo rellenar los argumentos que le pido. Es decir, sabe cómo inyectar instancias de las que dependo.</p><p>Una vez que me <strong>inyectan las dependencias en el constructor</strong> ya están listas para ser usadas como propiedades de la clase. <em>Mágia del TypeScript</em>. En concreto <code>this.route</code> me da acceso a métodos y propiedades para trabajar con la ruta activa y poder leer sus parámetros.</p><h1 id=\"3-2-Eventos-e-interfaces-en-TypeScript\"><a href=\"#3-2-Eventos-e-interfaces-en-TypeScript\" class=\"headerlink\" title=\"3.2 Eventos e interfaces en TypeScript\"></a>3.2 Eventos e interfaces en TypeScript</h1><p>El lenguaje <em>TypeScript</em> como superconjunto de <em>JavaScript</em> aporta técnicas de P.O.O. bien conocidas en lenguajes como <em>Java</em> o <em>C#</em>. Por ejemplo <strong>la herencia y los interfaces</strong>. Los diseñadores de <em>Angular</em> decidieron usar interfaces para implementar el <strong>ciclo de vida de los componentes</strong>. En lugar de lanzar eventos a los que subscribirse, te piden que implementes métodos de distintas interfaces. Esos métodos serán llamados cuando corresponda, como si fuesen subscripciones a eventos.</p><p>En este caso la <em>interfaz</em> <code>OnInit</code> obliga a implementar el método <code>ngOnInit()</code> el cual será invocado lo antes posible pero tras la completa construcción del componente. Asegurando así que el código que se ejecute en ese método tenga acceso a un componente completo y totalmente listo.</p><p>Con esto tendrás una aplicación SPA en <em>Angular 6</em>. Sigue esta serie para añadirle <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a> mientras aprendes a programar con Angular6.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Base para una aplicación Angular","date":"2018-08-17T09:02:46.000Z","thumbnail":"/css/images/angular-1_base.png","_content":"![Tutorial Angular 1-Base](/images/tutorial-angular-1_base.png)\n\nVamos a crear una **base sobre la que programar una aplicación Angular 6** profesional. Usaremos el *CLI* para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado. \nLa idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: **los módulos y los componentes**.\n\n<!-- more -->\n\nPartimos de la aplicación tal cómo la dejamos en el [Hola Mundo en Angular](../hola-angular-cli/). Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/AutoBot/1-base](https://github.com/AcademiaBinaria/autobot/tree/1-base) \n\n# 1. Módulos\n\nLos módulos son **contenedores dónde almacenar los componentes y servicios** de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.\n\n## 1.1 Definición mediante decoradores\n\nAntes de importar cualquier módulo hay que definirlo. En Angular 6 **los módulos de declaran como clases de TypeScript**. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función `@NgModule()` que recibe un objeto como único argumento. En las propiedades de ese objeto es dónde se configura el módulo. \n\nMira el módulo `AppModule` original que genera el CLI en el fichero `app.module.ts`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n## 1.2 Importación de otros módulos\n\nEl módulo `App` también se conoce como **módulo raíz** porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad `imports:[]`, que es un array de punteros a otros módulos.\n\n>En la situación original el módulo principal depende un módulo *custom* (el `CoreModule` que usarás más adelante) y de otro *del framework* para la presentación en el navegador (el `BrowserModule`).\n\n### 1.2.1 Dos mundos paralelos: imports de Angular 6 e import de TypeScript\n\nSi es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el `app.module.ts` son algo así:\n\n```typescript\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { AppComponent } from \"./app.component\";\n```\n\nEstas **sentencias de importación son propias del lenguaje** y nada tienen que ver con Angular 6. En ellas se indica que este fichero importa el contenido de otros ficheros *TypeScript*. La importación se realiza en base a convenios personalizables. Si empieza con `./` entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio `node_modules` y se trata como código de terceros.\n\n>En general no tendrás que preocuparte de estas importaciones físicas, pues el *VSCode* y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código.\n\n## 1.3 Generación de módulos\n\nHasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de **crear tu primer módulo**. Para eso usaremos otro comando del *cli*, el `ng generate module`. En una ventana del terminal escribe:\n\n```shell\nng g m core\n```\n\nEsta es la sintaxis abreviada del comando [`ng generate`](https://github.com/angular/angular-cli/wiki/generate) el cual dispone de varios planos de construcción o *blueprints*. El que he usado aquí es el de `module aka m` para la construcción de módulos.\n\nEl resultado es la creación del fichero `core/core.module.ts` con la declaración y decoración del módulo `CoreModule`.\nEste módulo te servirá de **contenedor para guardar componentes** y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante. \n\n```typescript\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class CoreModule {}\n```\n\nPor ahora hay que asegurar que **este módulo es importado por el raíz, el AppModule**. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n> El módulo raíz, al igual que como verás más tarde con el componente ráiz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root. \n\n# 2. Componentes\n\nLos módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. **Los componentes son los bloques básicos de construcción de las páginas web en Angular 6**. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).\n\n>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero `app.component.ts`. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero (es el caso escogido a efectos didácticos) o en dos, tres o incluso cuatro ficheros especializados (con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).\n\n## 2.1 Anatomía de un componente\n\nLos componentes, como el resto de artefactos en Angular 6, serán **clases TypeScript decoradas** con funciones específicas. En este caso la función es `@Component()` que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.\n\n```typescript\nimport { Core } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  template: `<h1>Hello</h1>`,\n  styles: []\n})\nexport class AppComponent {}\n```\n\n**Los componentes definen nuevas etiquetas HTML** para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página `index.html`. El nombre de la nueva etiqueta se conoce como *selector*. En este caso la propiedad `selector: \"app-root\"` permite el uso de este componente dentro de otro con esta invocación `<app-root></app-root>`. En este caso el componente raíz.\n\n>Particularidades del compnente raíz. Su nombre oficial es `AppComponent`, y su selector debería llamarse `app-app`. Pero su *selector real* es `app-root`, formado a partir del prefijo de la aplicación y su supuesto nombre oficioso. Observa el prefijo `app` que se usará en todos los componentes propios, fue asignado por defecto durante la generación de la aplicación. Puede personalizarse usando el modificador `--prefix` de `ng new` y en distintos ficheros de configuración. Volviendo al componente raíz; está destinado a ser usado en la página principal, en el `index.html`. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array `bootstrap: [AppComponent]`, es ahí donde se incluyen los componentes con la capacidad de lanzar *bootstrap* la aplicación. \n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\nY en el `index.html`\n\n```html\n<body>\n  <app-root></app-root>\n</body>\n```\n\n\n**La plantilla representa la parte visual** del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad `template` del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero *html* y referenciarlo como una ruta relativa en la propiedad `templateUrl`.\n\nLa propiedad **`styles` y su gemela `stylesUrl` permiten asignar estilos** *CSS, SASS o LESS* al componente. Estos estilos se incrustan durante la compilación en los nodos del *DOM* generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.\n\n**En la clase del componente nos encontraremos la implementación de su funcionalidad**. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.\n\nUna aplicación web en Angular 6 se monta como un **árbol de componentes**. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.\n\n## 2.2 Generación de componentes\n\nPara **crear nuevos componentes** vamos a usar de nuevo el *CLI* con su comando `ng generate component` o abreviadamente `ng g c`. Pero ahora con los planos para construir un componente. La sintaxis completa del [comando *generate*](https://github.com/angular/angular-cli/wiki/generate-component) permite crear componentes en diversas formas.\n\nCasi **todas las páginas tienen una estructura** similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal. \n\nEjecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.\n\n```shell\nng g c core/navigator --export\nng g c core/navigator/header --flat\nng g c core/navigator/main --flat\nng g c core/navigator/footer --flat \n```\n\nFíjate en el componente del fichero `nav.component.ts`. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: `app-navigator` y `NavigatorComponent`. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre `App` no coincide con su selector `root`.\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'app-navigator',\n  template: `\n    <app-header></app-header>\n    <app-main></app-main>\n    <app-footer></app-footer>\n  `,\n  styles: []\n})\nexport class NavigatorComponent implements OnInit {\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\n## 2.3 Componentes públicos y privados\n\nLa clave del código limpio es **exponer funcionalidad de manera expresiva pero ocultar la implementación**. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la **programación basada en componentes** podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.\n\nLos componentes no deciden por sí mismos su **visibilidad**. Cuando un componente es generado se declara en un módulo contenedor en su propiedad `declares:[]`. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero **si quieres usarlo desde fuera tendrás que exportarlo**. Eso se hace en la propiedad `exports:[]` del módulo en el que se crea. \n\n>La exportación debe hacerse a mano o indicarse con el *flag* `--export` para que lo haga el *cli*. Esto se ha hecho en el componente `navigator` para poder usarlo en el componente `app`.\n\n**Los componentes privados suelen ser sencillos**. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador `--flat` ni siquiera generan carpeta propia.\n\nComo regla general, **cuando en una plantilla se incruste otro componente**, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.\n\n# 3. Organización\n\nTodos los programas tiene partes repetitivas. Los principios de **organización y código limpio** nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas. \n\nSon **componentes de infraestructura**. Conviene guardarlos en una carpeta especial. Aquí la he llamado `shared`, pero `tools`, `common`, o `lib` suelen ser otros nombres habituales.\n\nEl caso es **distinguir los componentes de infraestructura de los de negocio** o funcionalidad. Los módulos `core` y `shared` los trataremos como de infraestructura y todos los demás serán de negocio (aún no tenemos). El primero es para meter cosas de uso único esenciales para la aplicación. El segundo para meter bloques reutilizables durante la construcción de la aplicación. Recuerda que sólo son convenios de arquitectura de software; adáptalos a tus necesidades.\n\n![Árbol de módulos](/images/1-base_module_tree.png)\n\n>En esta aplicación hasta ahora no es nada funcional,!y ya tiene tres módulos y cinco componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes. Para un ejemplo más realista, consulta cómo está hecho *Astrobot* [AcademiaBinaria/AstroBot](https://github.com/AcademiaBinaria/astrobot/) , que es el hermano mayor y más profesional de *AutoBot*.\n\nCon esto tendrás una base para una aplicación *Angular 6*. Sigue esta serie para añadirle funcionalidad mediante [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/) mientras aprendes a programar con Angular6.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/ng_1-Base-aplicacion-Angular.md","raw":"---\ntitle: Base para una aplicación Angular\npermalink: base-aplicacion-angular\ndate: 2018-08-17 11:02:46\ntags:  \n- Angular\n- CLI\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-1_base.png\n---\n![Tutorial Angular 1-Base](/images/tutorial-angular-1_base.png)\n\nVamos a crear una **base sobre la que programar una aplicación Angular 6** profesional. Usaremos el *CLI* para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado. \nLa idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: **los módulos y los componentes**.\n\n<!-- more -->\n\nPartimos de la aplicación tal cómo la dejamos en el [Hola Mundo en Angular](../hola-angular-cli/). Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.\n\n>Código asociado a este artículo en *GitHub*: [AcademiaBinaria/AutoBot/1-base](https://github.com/AcademiaBinaria/autobot/tree/1-base) \n\n# 1. Módulos\n\nLos módulos son **contenedores dónde almacenar los componentes y servicios** de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.\n\n## 1.1 Definición mediante decoradores\n\nAntes de importar cualquier módulo hay que definirlo. En Angular 6 **los módulos de declaran como clases de TypeScript**. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función `@NgModule()` que recibe un objeto como único argumento. En las propiedades de ese objeto es dónde se configura el módulo. \n\nMira el módulo `AppModule` original que genera el CLI en el fichero `app.module.ts`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n## 1.2 Importación de otros módulos\n\nEl módulo `App` también se conoce como **módulo raíz** porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad `imports:[]`, que es un array de punteros a otros módulos.\n\n>En la situación original el módulo principal depende un módulo *custom* (el `CoreModule` que usarás más adelante) y de otro *del framework* para la presentación en el navegador (el `BrowserModule`).\n\n### 1.2.1 Dos mundos paralelos: imports de Angular 6 e import de TypeScript\n\nSi es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el `app.module.ts` son algo así:\n\n```typescript\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { AppComponent } from \"./app.component\";\n```\n\nEstas **sentencias de importación son propias del lenguaje** y nada tienen que ver con Angular 6. En ellas se indica que este fichero importa el contenido de otros ficheros *TypeScript*. La importación se realiza en base a convenios personalizables. Si empieza con `./` entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio `node_modules` y se trata como código de terceros.\n\n>En general no tendrás que preocuparte de estas importaciones físicas, pues el *VSCode* y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código.\n\n## 1.3 Generación de módulos\n\nHasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de **crear tu primer módulo**. Para eso usaremos otro comando del *cli*, el `ng generate module`. En una ventana del terminal escribe:\n\n```shell\nng g m core\n```\n\nEsta es la sintaxis abreviada del comando [`ng generate`](https://github.com/angular/angular-cli/wiki/generate) el cual dispone de varios planos de construcción o *blueprints*. El que he usado aquí es el de `module aka m` para la construcción de módulos.\n\nEl resultado es la creación del fichero `core/core.module.ts` con la declaración y decoración del módulo `CoreModule`.\nEste módulo te servirá de **contenedor para guardar componentes** y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante. \n\n```typescript\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class CoreModule {}\n```\n\nPor ahora hay que asegurar que **este módulo es importado por el raíz, el AppModule**. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n> El módulo raíz, al igual que como verás más tarde con el componente ráiz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root. \n\n# 2. Componentes\n\nLos módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. **Los componentes son los bloques básicos de construcción de las páginas web en Angular 6**. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).\n\n>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero `app.component.ts`. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero (es el caso escogido a efectos didácticos) o en dos, tres o incluso cuatro ficheros especializados (con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).\n\n## 2.1 Anatomía de un componente\n\nLos componentes, como el resto de artefactos en Angular 6, serán **clases TypeScript decoradas** con funciones específicas. En este caso la función es `@Component()` que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.\n\n```typescript\nimport { Core } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  template: `<h1>Hello</h1>`,\n  styles: []\n})\nexport class AppComponent {}\n```\n\n**Los componentes definen nuevas etiquetas HTML** para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página `index.html`. El nombre de la nueva etiqueta se conoce como *selector*. En este caso la propiedad `selector: \"app-root\"` permite el uso de este componente dentro de otro con esta invocación `<app-root></app-root>`. En este caso el componente raíz.\n\n>Particularidades del compnente raíz. Su nombre oficial es `AppComponent`, y su selector debería llamarse `app-app`. Pero su *selector real* es `app-root`, formado a partir del prefijo de la aplicación y su supuesto nombre oficioso. Observa el prefijo `app` que se usará en todos los componentes propios, fue asignado por defecto durante la generación de la aplicación. Puede personalizarse usando el modificador `--prefix` de `ng new` y en distintos ficheros de configuración. Volviendo al componente raíz; está destinado a ser usado en la página principal, en el `index.html`. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array `bootstrap: [AppComponent]`, es ahí donde se incluyen los componentes con la capacidad de lanzar *bootstrap* la aplicación. \n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\nY en el `index.html`\n\n```html\n<body>\n  <app-root></app-root>\n</body>\n```\n\n\n**La plantilla representa la parte visual** del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad `template` del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero *html* y referenciarlo como una ruta relativa en la propiedad `templateUrl`.\n\nLa propiedad **`styles` y su gemela `stylesUrl` permiten asignar estilos** *CSS, SASS o LESS* al componente. Estos estilos se incrustan durante la compilación en los nodos del *DOM* generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.\n\n**En la clase del componente nos encontraremos la implementación de su funcionalidad**. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.\n\nUna aplicación web en Angular 6 se monta como un **árbol de componentes**. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.\n\n## 2.2 Generación de componentes\n\nPara **crear nuevos componentes** vamos a usar de nuevo el *CLI* con su comando `ng generate component` o abreviadamente `ng g c`. Pero ahora con los planos para construir un componente. La sintaxis completa del [comando *generate*](https://github.com/angular/angular-cli/wiki/generate-component) permite crear componentes en diversas formas.\n\nCasi **todas las páginas tienen una estructura** similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal. \n\nEjecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.\n\n```shell\nng g c core/navigator --export\nng g c core/navigator/header --flat\nng g c core/navigator/main --flat\nng g c core/navigator/footer --flat \n```\n\nFíjate en el componente del fichero `nav.component.ts`. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: `app-navigator` y `NavigatorComponent`. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre `App` no coincide con su selector `root`.\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'app-navigator',\n  template: `\n    <app-header></app-header>\n    <app-main></app-main>\n    <app-footer></app-footer>\n  `,\n  styles: []\n})\nexport class NavigatorComponent implements OnInit {\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\n## 2.3 Componentes públicos y privados\n\nLa clave del código limpio es **exponer funcionalidad de manera expresiva pero ocultar la implementación**. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la **programación basada en componentes** podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.\n\nLos componentes no deciden por sí mismos su **visibilidad**. Cuando un componente es generado se declara en un módulo contenedor en su propiedad `declares:[]`. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero **si quieres usarlo desde fuera tendrás que exportarlo**. Eso se hace en la propiedad `exports:[]` del módulo en el que se crea. \n\n>La exportación debe hacerse a mano o indicarse con el *flag* `--export` para que lo haga el *cli*. Esto se ha hecho en el componente `navigator` para poder usarlo en el componente `app`.\n\n**Los componentes privados suelen ser sencillos**. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador `--flat` ni siquiera generan carpeta propia.\n\nComo regla general, **cuando en una plantilla se incruste otro componente**, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.\n\n# 3. Organización\n\nTodos los programas tiene partes repetitivas. Los principios de **organización y código limpio** nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas. \n\nSon **componentes de infraestructura**. Conviene guardarlos en una carpeta especial. Aquí la he llamado `shared`, pero `tools`, `common`, o `lib` suelen ser otros nombres habituales.\n\nEl caso es **distinguir los componentes de infraestructura de los de negocio** o funcionalidad. Los módulos `core` y `shared` los trataremos como de infraestructura y todos los demás serán de negocio (aún no tenemos). El primero es para meter cosas de uso único esenciales para la aplicación. El segundo para meter bloques reutilizables durante la construcción de la aplicación. Recuerda que sólo son convenios de arquitectura de software; adáptalos a tus necesidades.\n\n![Árbol de módulos](/images/1-base_module_tree.png)\n\n>En esta aplicación hasta ahora no es nada funcional,!y ya tiene tres módulos y cinco componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes. Para un ejemplo más realista, consulta cómo está hecho *Astrobot* [AcademiaBinaria/AstroBot](https://github.com/AcademiaBinaria/astrobot/) , que es el hermano mayor y más profesional de *AutoBot*.\n\nCon esto tendrás una base para una aplicación *Angular 6*. Sigue esta serie para añadirle funcionalidad mediante [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/) mientras aprendes a programar con Angular6.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"base-aplicacion-angular","published":1,"updated":"2018-08-20T12:12:46.199Z","_id":"cjbrwpvji002biwd3ak7z4jrq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-1_base.png\" alt=\"Tutorial Angular 1-Base\"></p><p>Vamos a crear una <strong>base sobre la que programar una aplicación Angular 6</strong> profesional. Usaremos el <em>CLI</em> para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.<br>La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: <strong>los módulos y los componentes</strong>.</p><a id=\"more\"></a><p>Partimos de la aplicación tal cómo la dejamos en el <a href=\"../hola-angular-cli/\">Hola Mundo en Angular</a>. Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/1-base\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/1-base</a></p></blockquote><h1 id=\"1-Modulos\"><a href=\"#1-Modulos\" class=\"headerlink\" title=\"1. Módulos\"></a>1. Módulos</h1><p>Los módulos son <strong>contenedores dónde almacenar los componentes y servicios</strong> de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.</p><h2 id=\"1-1-Definicion-mediante-decoradores\"><a href=\"#1-1-Definicion-mediante-decoradores\" class=\"headerlink\" title=\"1.1 Definición mediante decoradores\"></a>1.1 Definición mediante decoradores</h2><p>Antes de importar cualquier módulo hay que definirlo. En Angular 6 <strong>los módulos de declaran como clases de TypeScript</strong>. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función <code>@NgModule()</code> que recibe un objeto como único argumento. En las propiedades de ese objeto es dónde se configura el módulo.</p><p>Mira el módulo <code>AppModule</code> original que genera el CLI en el fichero <code>app.module.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"1-2-Importacion-de-otros-modulos\"><a href=\"#1-2-Importacion-de-otros-modulos\" class=\"headerlink\" title=\"1.2 Importación de otros módulos\"></a>1.2 Importación de otros módulos</h2><p>El módulo <code>App</code> también se conoce como <strong>módulo raíz</strong> porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad <code>imports:[]</code>, que es un array de punteros a otros módulos.</p><blockquote><p>En la situación original el módulo principal depende un módulo <em>custom</em> (el <code>CoreModule</code> que usarás más adelante) y de otro <em>del framework</em> para la presentación en el navegador (el <code>BrowserModule</code>).</p></blockquote><h3 id=\"1-2-1-Dos-mundos-paralelos-imports-de-Angular-6-e-import-de-TypeScript\"><a href=\"#1-2-1-Dos-mundos-paralelos-imports-de-Angular-6-e-import-de-TypeScript\" class=\"headerlink\" title=\"1.2.1 Dos mundos paralelos: imports de Angular 6 e import de TypeScript\"></a>1.2.1 Dos mundos paralelos: imports de Angular 6 e import de TypeScript</h3><p>Si es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el <code>app.module.ts</code> son algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./app.component\"</span>;</span><br></pre></td></tr></table></figure><p>Estas <strong>sentencias de importación son propias del lenguaje</strong> y nada tienen que ver con Angular 6. En ellas se indica que este fichero importa el contenido de otros ficheros <em>TypeScript</em>. La importación se realiza en base a convenios personalizables. Si empieza con <code>./</code> entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio <code>node_modules</code> y se trata como código de terceros.</p><blockquote><p>En general no tendrás que preocuparte de estas importaciones físicas, pues el <em>VSCode</em> y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código.</p></blockquote><h2 id=\"1-3-Generacion-de-modulos\"><a href=\"#1-3-Generacion-de-modulos\" class=\"headerlink\" title=\"1.3 Generación de módulos\"></a>1.3 Generación de módulos</h2><p>Hasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de <strong>crear tu primer módulo</strong>. Para eso usaremos otro comando del <em>cli</em>, el <code>ng generate module</code>. En una ventana del terminal escribe:</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m core</span><br></pre></td></tr></table></figure><p>Esta es la sintaxis abreviada del comando <a href=\"https://github.com/angular/angular-cli/wiki/generate\" target=\"_blank\" rel=\"noopener\"><code>ng generate</code></a> el cual dispone de varios planos de construcción o <em>blueprints</em>. El que he usado aquí es el de <code>module aka m</code> para la construcción de módulos.</p><p>El resultado es la creación del fichero <code>core/core.module.ts</code> con la declaración y decoración del módulo <code>CoreModule</code>.<br>Este módulo te servirá de <strong>contenedor para guardar componentes</strong> y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [],</span><br><span class=\"line\">  declarations: [],</span><br><span class=\"line\">  exports: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Por ahora hay que asegurar que <strong>este módulo es importado por el raíz, el AppModule</strong>. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El módulo raíz, al igual que como verás más tarde con el componente ráiz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.</p></blockquote><h1 id=\"2-Componentes\"><a href=\"#2-Componentes\" class=\"headerlink\" title=\"2. Componentes\"></a>2. Componentes</h1><p>Los módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. <strong>Los componentes son los bloques básicos de construcción de las páginas web en Angular 6</strong>. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).</p><blockquote><p>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero <code>app.component.ts</code>. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero (es el caso escogido a efectos didácticos) o en dos, tres o incluso cuatro ficheros especializados (con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).</p></blockquote><h2 id=\"2-1-Anatomia-de-un-componente\"><a href=\"#2-1-Anatomia-de-un-componente\" class=\"headerlink\" title=\"2.1 Anatomía de un componente\"></a>2.1 Anatomía de un componente</h2><p>Los componentes, como el resto de artefactos en Angular 6, serán <strong>clases TypeScript decoradas</strong> con funciones específicas. En este caso la función es <code>@Component()</code> que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Core &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">\"app-root\"</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;h1&gt;Hello&lt;/h1&gt;`</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>Los componentes definen nuevas etiquetas HTML</strong> para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página <code>index.html</code>. El nombre de la nueva etiqueta se conoce como <em>selector</em>. En este caso la propiedad <code>selector: &quot;app-root&quot;</code> permite el uso de este componente dentro de otro con esta invocación <code>&lt;app-root&gt;&lt;/app-root&gt;</code>. En este caso el componente raíz.</p><blockquote><p>Particularidades del compnente raíz. Su nombre oficial es <code>AppComponent</code>, y su selector debería llamarse <code>app-app</code>. Pero su <em>selector real</em> es <code>app-root</code>, formado a partir del prefijo de la aplicación y su supuesto nombre oficioso. Observa el prefijo <code>app</code> que se usará en todos los componentes propios, fue asignado por defecto durante la generación de la aplicación. Puede personalizarse usando el modificador <code>--prefix</code> de <code>ng new</code> y en distintos ficheros de configuración. Volviendo al componente raíz; está destinado a ser usado en la página principal, en el <code>index.html</code>. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array <code>bootstrap: [AppComponent]</code>, es ahí donde se incluyen los componentes con la capacidad de lanzar <em>bootstrap</em> la aplicación.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Y en el <code>index.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>La plantilla representa la parte visual</strong> del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad <code>template</code> del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero <em>html</em> y referenciarlo como una ruta relativa en la propiedad <code>templateUrl</code>.</p><p>La propiedad <strong><code>styles</code> y su gemela <code>stylesUrl</code> permiten asignar estilos</strong> <em>CSS, SASS o LESS</em> al componente. Estos estilos se incrustan durante la compilación en los nodos del <em>DOM</em> generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.</p><p><strong>En la clase del componente nos encontraremos la implementación de su funcionalidad</strong>. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.</p><p>Una aplicación web en Angular 6 se monta como un <strong>árbol de componentes</strong>. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.</p><h2 id=\"2-2-Generacion-de-componentes\"><a href=\"#2-2-Generacion-de-componentes\" class=\"headerlink\" title=\"2.2 Generación de componentes\"></a>2.2 Generación de componentes</h2><p>Para <strong>crear nuevos componentes</strong> vamos a usar de nuevo el <em>CLI</em> con su comando <code>ng generate component</code> o abreviadamente <code>ng g c</code>. Pero ahora con los planos para construir un componente. La sintaxis completa del <a href=\"https://github.com/angular/angular-cli/wiki/generate-component\" target=\"_blank\" rel=\"noopener\">comando <em>generate</em></a> permite crear componentes en diversas formas.</p><p>Casi <strong>todas las páginas tienen una estructura</strong> similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.</p><p>Ejecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c core/navigator --export</span><br><span class=\"line\">ng g c core/navigator/header --flat</span><br><span class=\"line\">ng g c core/navigator/main --flat</span><br><span class=\"line\">ng g c core/navigator/footer --flat</span><br></pre></td></tr></table></figure><p>Fíjate en el componente del fichero <code>nav.component.ts</code>. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: <code>app-navigator</code> y <code>NavigatorComponent</code>. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre <code>App</code> no coincide con su selector <code>root</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-navigator'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app-header&gt;&lt;/app-header&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app-main&gt;&lt;/app-main&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app-footer&gt;&lt;/app-footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NavigatorComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-3-Componentes-publicos-y-privados\"><a href=\"#2-3-Componentes-publicos-y-privados\" class=\"headerlink\" title=\"2.3 Componentes públicos y privados\"></a>2.3 Componentes públicos y privados</h2><p>La clave del código limpio es <strong>exponer funcionalidad de manera expresiva pero ocultar la implementación</strong>. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la <strong>programación basada en componentes</strong> podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.</p><p>Los componentes no deciden por sí mismos su <strong>visibilidad</strong>. Cuando un componente es generado se declara en un módulo contenedor en su propiedad <code>declares:[]</code>. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero <strong>si quieres usarlo desde fuera tendrás que exportarlo</strong>. Eso se hace en la propiedad <code>exports:[]</code> del módulo en el que se crea.</p><blockquote><p>La exportación debe hacerse a mano o indicarse con el <em>flag</em> <code>--export</code> para que lo haga el <em>cli</em>. Esto se ha hecho en el componente <code>navigator</code> para poder usarlo en el componente <code>app</code>.</p></blockquote><p><strong>Los componentes privados suelen ser sencillos</strong>. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador <code>--flat</code> ni siquiera generan carpeta propia.</p><p>Como regla general, <strong>cuando en una plantilla se incruste otro componente</strong>, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.</p><h1 id=\"3-Organizacion\"><a href=\"#3-Organizacion\" class=\"headerlink\" title=\"3. Organización\"></a>3. Organización</h1><p>Todos los programas tiene partes repetitivas. Los principios de <strong>organización y código limpio</strong> nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.</p><p>Son <strong>componentes de infraestructura</strong>. Conviene guardarlos en una carpeta especial. Aquí la he llamado <code>shared</code>, pero <code>tools</code>, <code>common</code>, o <code>lib</code> suelen ser otros nombres habituales.</p><p>El caso es <strong>distinguir los componentes de infraestructura de los de negocio</strong> o funcionalidad. Los módulos <code>core</code> y <code>shared</code> los trataremos como de infraestructura y todos los demás serán de negocio (aún no tenemos). El primero es para meter cosas de uso único esenciales para la aplicación. El segundo para meter bloques reutilizables durante la construcción de la aplicación. Recuerda que sólo son convenios de arquitectura de software; adáptalos a tus necesidades.</p><p><img src=\"/images/1-base_module_tree.png\" alt=\"Árbol de módulos\"></p><blockquote><p>En esta aplicación hasta ahora no es nada funcional,!y ya tiene tres módulos y cinco componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes. Para un ejemplo más realista, consulta cómo está hecho <em>Astrobot</em> <a href=\"https://github.com/AcademiaBinaria/astrobot/\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AstroBot</a> , que es el hermano mayor y más profesional de <em>AutoBot</em>.</p></blockquote><p>Con esto tendrás una base para una aplicación <em>Angular 6</em>. Sigue esta serie para añadirle funcionalidad mediante <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a> mientras aprendes a programar con Angular6.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-1_base.png\" alt=\"Tutorial Angular 1-Base\"></p><p>Vamos a crear una <strong>base sobre la que programar una aplicación Angular 6</strong> profesional. Usaremos el <em>CLI</em> para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.<br>La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: <strong>los módulos y los componentes</strong>.</p>","more":"<p>Partimos de la aplicación tal cómo la dejamos en el <a href=\"../hola-angular-cli/\">Hola Mundo en Angular</a>. Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/1-base\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/1-base</a></p></blockquote><h1 id=\"1-Modulos\"><a href=\"#1-Modulos\" class=\"headerlink\" title=\"1. Módulos\"></a>1. Módulos</h1><p>Los módulos son <strong>contenedores dónde almacenar los componentes y servicios</strong> de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.</p><h2 id=\"1-1-Definicion-mediante-decoradores\"><a href=\"#1-1-Definicion-mediante-decoradores\" class=\"headerlink\" title=\"1.1 Definición mediante decoradores\"></a>1.1 Definición mediante decoradores</h2><p>Antes de importar cualquier módulo hay que definirlo. En Angular 6 <strong>los módulos de declaran como clases de TypeScript</strong>. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función <code>@NgModule()</code> que recibe un objeto como único argumento. En las propiedades de ese objeto es dónde se configura el módulo.</p><p>Mira el módulo <code>AppModule</code> original que genera el CLI en el fichero <code>app.module.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"1-2-Importacion-de-otros-modulos\"><a href=\"#1-2-Importacion-de-otros-modulos\" class=\"headerlink\" title=\"1.2 Importación de otros módulos\"></a>1.2 Importación de otros módulos</h2><p>El módulo <code>App</code> también se conoce como <strong>módulo raíz</strong> porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad <code>imports:[]</code>, que es un array de punteros a otros módulos.</p><blockquote><p>En la situación original el módulo principal depende un módulo <em>custom</em> (el <code>CoreModule</code> que usarás más adelante) y de otro <em>del framework</em> para la presentación en el navegador (el <code>BrowserModule</code>).</p></blockquote><h3 id=\"1-2-1-Dos-mundos-paralelos-imports-de-Angular-6-e-import-de-TypeScript\"><a href=\"#1-2-1-Dos-mundos-paralelos-imports-de-Angular-6-e-import-de-TypeScript\" class=\"headerlink\" title=\"1.2.1 Dos mundos paralelos: imports de Angular 6 e import de TypeScript\"></a>1.2.1 Dos mundos paralelos: imports de Angular 6 e import de TypeScript</h3><p>Si es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el <code>app.module.ts</code> son algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/platform-browser\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./app.component\"</span>;</span><br></pre></td></tr></table></figure><p>Estas <strong>sentencias de importación son propias del lenguaje</strong> y nada tienen que ver con Angular 6. En ellas se indica que este fichero importa el contenido de otros ficheros <em>TypeScript</em>. La importación se realiza en base a convenios personalizables. Si empieza con <code>./</code> entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio <code>node_modules</code> y se trata como código de terceros.</p><blockquote><p>En general no tendrás que preocuparte de estas importaciones físicas, pues el <em>VSCode</em> y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código.</p></blockquote><h2 id=\"1-3-Generacion-de-modulos\"><a href=\"#1-3-Generacion-de-modulos\" class=\"headerlink\" title=\"1.3 Generación de módulos\"></a>1.3 Generación de módulos</h2><p>Hasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de <strong>crear tu primer módulo</strong>. Para eso usaremos otro comando del <em>cli</em>, el <code>ng generate module</code>. En una ventana del terminal escribe:</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m core</span><br></pre></td></tr></table></figure><p>Esta es la sintaxis abreviada del comando <a href=\"https://github.com/angular/angular-cli/wiki/generate\" target=\"_blank\" rel=\"noopener\"><code>ng generate</code></a> el cual dispone de varios planos de construcción o <em>blueprints</em>. El que he usado aquí es el de <code>module aka m</code> para la construcción de módulos.</p><p>El resultado es la creación del fichero <code>core/core.module.ts</code> con la declaración y decoración del módulo <code>CoreModule</code>.<br>Este módulo te servirá de <strong>contenedor para guardar componentes</strong> y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [],</span><br><span class=\"line\">  declarations: [],</span><br><span class=\"line\">  exports: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Por ahora hay que asegurar que <strong>este módulo es importado por el raíz, el AppModule</strong>. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El módulo raíz, al igual que como verás más tarde con el componente ráiz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.</p></blockquote><h1 id=\"2-Componentes\"><a href=\"#2-Componentes\" class=\"headerlink\" title=\"2. Componentes\"></a>2. Componentes</h1><p>Los módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. <strong>Los componentes son los bloques básicos de construcción de las páginas web en Angular 6</strong>. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).</p><blockquote><p>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero <code>app.component.ts</code>. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero (es el caso escogido a efectos didácticos) o en dos, tres o incluso cuatro ficheros especializados (con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).</p></blockquote><h2 id=\"2-1-Anatomia-de-un-componente\"><a href=\"#2-1-Anatomia-de-un-componente\" class=\"headerlink\" title=\"2.1 Anatomía de un componente\"></a>2.1 Anatomía de un componente</h2><p>Los componentes, como el resto de artefactos en Angular 6, serán <strong>clases TypeScript decoradas</strong> con funciones específicas. En este caso la función es <code>@Component()</code> que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Core &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@angular/core\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">\"app-root\"</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;h1&gt;Hello&lt;/h1&gt;`</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>Los componentes definen nuevas etiquetas HTML</strong> para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página <code>index.html</code>. El nombre de la nueva etiqueta se conoce como <em>selector</em>. En este caso la propiedad <code>selector: &quot;app-root&quot;</code> permite el uso de este componente dentro de otro con esta invocación <code>&lt;app-root&gt;&lt;/app-root&gt;</code>. En este caso el componente raíz.</p><blockquote><p>Particularidades del compnente raíz. Su nombre oficial es <code>AppComponent</code>, y su selector debería llamarse <code>app-app</code>. Pero su <em>selector real</em> es <code>app-root</code>, formado a partir del prefijo de la aplicación y su supuesto nombre oficioso. Observa el prefijo <code>app</code> que se usará en todos los componentes propios, fue asignado por defecto durante la generación de la aplicación. Puede personalizarse usando el modificador <code>--prefix</code> de <code>ng new</code> y en distintos ficheros de configuración. Volviendo al componente raíz; está destinado a ser usado en la página principal, en el <code>index.html</code>. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array <code>bootstrap: [AppComponent]</code>, es ahí donde se incluyen los componentes con la capacidad de lanzar <em>bootstrap</em> la aplicación.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Y en el <code>index.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>La plantilla representa la parte visual</strong> del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad <code>template</code> del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero <em>html</em> y referenciarlo como una ruta relativa en la propiedad <code>templateUrl</code>.</p><p>La propiedad <strong><code>styles</code> y su gemela <code>stylesUrl</code> permiten asignar estilos</strong> <em>CSS, SASS o LESS</em> al componente. Estos estilos se incrustan durante la compilación en los nodos del <em>DOM</em> generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.</p><p><strong>En la clase del componente nos encontraremos la implementación de su funcionalidad</strong>. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.</p><p>Una aplicación web en Angular 6 se monta como un <strong>árbol de componentes</strong>. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.</p><h2 id=\"2-2-Generacion-de-componentes\"><a href=\"#2-2-Generacion-de-componentes\" class=\"headerlink\" title=\"2.2 Generación de componentes\"></a>2.2 Generación de componentes</h2><p>Para <strong>crear nuevos componentes</strong> vamos a usar de nuevo el <em>CLI</em> con su comando <code>ng generate component</code> o abreviadamente <code>ng g c</code>. Pero ahora con los planos para construir un componente. La sintaxis completa del <a href=\"https://github.com/angular/angular-cli/wiki/generate-component\" target=\"_blank\" rel=\"noopener\">comando <em>generate</em></a> permite crear componentes en diversas formas.</p><p>Casi <strong>todas las páginas tienen una estructura</strong> similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.</p><p>Ejecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c core/navigator --export</span><br><span class=\"line\">ng g c core/navigator/header --flat</span><br><span class=\"line\">ng g c core/navigator/main --flat</span><br><span class=\"line\">ng g c core/navigator/footer --flat</span><br></pre></td></tr></table></figure><p>Fíjate en el componente del fichero <code>nav.component.ts</code>. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: <code>app-navigator</code> y <code>NavigatorComponent</code>. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre <code>App</code> no coincide con su selector <code>root</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-navigator'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app-header&gt;&lt;/app-header&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app-main&gt;&lt;/app-main&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;app-footer&gt;&lt;/app-footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NavigatorComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-3-Componentes-publicos-y-privados\"><a href=\"#2-3-Componentes-publicos-y-privados\" class=\"headerlink\" title=\"2.3 Componentes públicos y privados\"></a>2.3 Componentes públicos y privados</h2><p>La clave del código limpio es <strong>exponer funcionalidad de manera expresiva pero ocultar la implementación</strong>. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la <strong>programación basada en componentes</strong> podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.</p><p>Los componentes no deciden por sí mismos su <strong>visibilidad</strong>. Cuando un componente es generado se declara en un módulo contenedor en su propiedad <code>declares:[]</code>. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero <strong>si quieres usarlo desde fuera tendrás que exportarlo</strong>. Eso se hace en la propiedad <code>exports:[]</code> del módulo en el que se crea.</p><blockquote><p>La exportación debe hacerse a mano o indicarse con el <em>flag</em> <code>--export</code> para que lo haga el <em>cli</em>. Esto se ha hecho en el componente <code>navigator</code> para poder usarlo en el componente <code>app</code>.</p></blockquote><p><strong>Los componentes privados suelen ser sencillos</strong>. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador <code>--flat</code> ni siquiera generan carpeta propia.</p><p>Como regla general, <strong>cuando en una plantilla se incruste otro componente</strong>, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.</p><h1 id=\"3-Organizacion\"><a href=\"#3-Organizacion\" class=\"headerlink\" title=\"3. Organización\"></a>3. Organización</h1><p>Todos los programas tiene partes repetitivas. Los principios de <strong>organización y código limpio</strong> nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.</p><p>Son <strong>componentes de infraestructura</strong>. Conviene guardarlos en una carpeta especial. Aquí la he llamado <code>shared</code>, pero <code>tools</code>, <code>common</code>, o <code>lib</code> suelen ser otros nombres habituales.</p><p>El caso es <strong>distinguir los componentes de infraestructura de los de negocio</strong> o funcionalidad. Los módulos <code>core</code> y <code>shared</code> los trataremos como de infraestructura y todos los demás serán de negocio (aún no tenemos). El primero es para meter cosas de uso único esenciales para la aplicación. El segundo para meter bloques reutilizables durante la construcción de la aplicación. Recuerda que sólo son convenios de arquitectura de software; adáptalos a tus necesidades.</p><p><img src=\"/images/1-base_module_tree.png\" alt=\"Árbol de módulos\"></p><blockquote><p>En esta aplicación hasta ahora no es nada funcional,!y ya tiene tres módulos y cinco componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes. Para un ejemplo más realista, consulta cómo está hecho <em>Astrobot</em> <a href=\"https://github.com/AcademiaBinaria/astrobot/\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AstroBot</a> , que es el hermano mayor y más profesional de <em>AutoBot</em>.</p></blockquote><p>Con esto tendrás una base para una aplicación <em>Angular 6</em>. Sigue esta serie para añadirle funcionalidad mediante <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a> mientras aprendes a programar con Angular6.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"npm: de instalador a publicador","id":"10","updated":"2016-04-19T05:01:25.000Z","date":"2016-04-18T14:07:46.000Z","_content":"\nSeguro que estás harto de repetir la mítica instrucción `npm install paquete-x` Pero, ¿has pensado en **publicar tus propios módulos**?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en [*npm*](https://www.npmjs.com/). \n\nSigue este proceso y te convertirás en un creador de paquetes para *npm* : \n\n## Programa\n\nTodo empieza por tener una necesidad y resolverla **encapsulando su código en un módulo.** Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos. \n\nAntes de continuar vamos a fijar un par de conceptos:\n\n**- módulo:** Fichero *.js* que exporta un funcionalidad y oculta su implementación.\n\n**- paquete:** Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.\n\nConocidos los ingredientes, la receta es sencilla:\n\n1. Debes crear un proyecto para el paquete que vas a publicar. \n2. Has de subir el código a un repositorio público. \n3. Y debes rellenar convenientemente el `package.json` de tu proyecto.\n\nEste es un ejemplo que he creado y [publicado en github](https://github.com/AgoraBinaria/ab-ftp) que te puede servir de base. \n\nPresta especial atención al **nombrado** de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un *prefijo* con tus iniciales o las de tu empresa.\n\nNo te olvides de incluir un juego de **pruebas y documentación** necesaria para sus uso.\n\n## Publica\n\nPuedes descargar librerías y herramienta desde el repositorio de *npm* de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que **registrarte para poder publicar** contenido. El [proceso de registro](https://www.npmjs.com/signup) vía web es sencillo y grátis. \n\nUna vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: `npm login` te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:\n\n```\nnpm publish\n```\n\nPuedes encontrar [más información](https://docs.npmjs.com/cli/publish) acerca de este mega comando en la documentación de *npmjs*. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.\n\nLa clave está en que tu fichero de configuración `package.json` sea correcto y lo más completo posible. Escribe un completo `readme.md` que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo [el contenido subido a github](https://github.com/AgoraBinaria/ab-ftp) se transforma y se ve en la [página de información de npm.](https://www.npmjs.com/package/ab-ftp)\n\n\nComprueba en un directorio vacío que `npm install nombre-de-tu-paquete` descarga todo lo necesario... y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.\n\n\n## Actualiza\n\nCon el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de [nombrado de versiones semántico](http://semver.org/): \n\n**x.y.z = 1.2.3 = ruptura.mejora.parche** \n\nEs bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en *github*.\n\n```\ngit tag 0.1.2\ngit push --tags\n```\n\n\n## Disfruta\n\nFinalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso **siempre habrás ganado**. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.","source":"_posts/npm-de-instalador-a-publicador.md","raw":"---\ntitle: 'npm: de instalador a publicador'\ntags: \n- NodeJS\ncategories:\n- Avanzado \npermalink: npm-de-instalador-a-publicador\nid: 10\nupdated: '2016-04-19 07:01:25'\ndate: 2016-04-18 16:07:46\n---\n\nSeguro que estás harto de repetir la mítica instrucción `npm install paquete-x` Pero, ¿has pensado en **publicar tus propios módulos**?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en [*npm*](https://www.npmjs.com/). \n\nSigue este proceso y te convertirás en un creador de paquetes para *npm* : \n\n## Programa\n\nTodo empieza por tener una necesidad y resolverla **encapsulando su código en un módulo.** Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos. \n\nAntes de continuar vamos a fijar un par de conceptos:\n\n**- módulo:** Fichero *.js* que exporta un funcionalidad y oculta su implementación.\n\n**- paquete:** Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.\n\nConocidos los ingredientes, la receta es sencilla:\n\n1. Debes crear un proyecto para el paquete que vas a publicar. \n2. Has de subir el código a un repositorio público. \n3. Y debes rellenar convenientemente el `package.json` de tu proyecto.\n\nEste es un ejemplo que he creado y [publicado en github](https://github.com/AgoraBinaria/ab-ftp) que te puede servir de base. \n\nPresta especial atención al **nombrado** de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un *prefijo* con tus iniciales o las de tu empresa.\n\nNo te olvides de incluir un juego de **pruebas y documentación** necesaria para sus uso.\n\n## Publica\n\nPuedes descargar librerías y herramienta desde el repositorio de *npm* de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que **registrarte para poder publicar** contenido. El [proceso de registro](https://www.npmjs.com/signup) vía web es sencillo y grátis. \n\nUna vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: `npm login` te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:\n\n```\nnpm publish\n```\n\nPuedes encontrar [más información](https://docs.npmjs.com/cli/publish) acerca de este mega comando en la documentación de *npmjs*. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.\n\nLa clave está en que tu fichero de configuración `package.json` sea correcto y lo más completo posible. Escribe un completo `readme.md` que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo [el contenido subido a github](https://github.com/AgoraBinaria/ab-ftp) se transforma y se ve en la [página de información de npm.](https://www.npmjs.com/package/ab-ftp)\n\n\nComprueba en un directorio vacío que `npm install nombre-de-tu-paquete` descarga todo lo necesario... y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.\n\n\n## Actualiza\n\nCon el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de [nombrado de versiones semántico](http://semver.org/): \n\n**x.y.z = 1.2.3 = ruptura.mejora.parche** \n\nEs bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en *github*.\n\n```\ngit tag 0.1.2\ngit push --tags\n```\n\n\n## Disfruta\n\nFinalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso **siempre habrás ganado**. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.","slug":"npm-de-instalador-a-publicador","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjbrwpvjy002eiwd3kujb9qqx","content":"<p>Seguro que estás harto de repetir la mítica instrucción <code>npm install paquete-x</code> Pero, ¿has pensado en <strong>publicar tus propios módulos</strong>?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\"><em>npm</em></a>.</p><p>Sigue este proceso y te convertirás en un creador de paquetes para <em>npm</em> :</p><h2 id=\"Programa\"><a href=\"#Programa\" class=\"headerlink\" title=\"Programa\"></a>Programa</h2><p>Todo empieza por tener una necesidad y resolverla <strong>encapsulando su código en un módulo.</strong> Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.</p><p>Antes de continuar vamos a fijar un par de conceptos:</p><p><strong>- módulo:</strong> Fichero <em>.js</em> que exporta un funcionalidad y oculta su implementación.</p><p><strong>- paquete:</strong> Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.</p><p>Conocidos los ingredientes, la receta es sencilla:</p><ol><li>Debes crear un proyecto para el paquete que vas a publicar.</li><li>Has de subir el código a un repositorio público.</li><li>Y debes rellenar convenientemente el <code>package.json</code> de tu proyecto.</li></ol><p>Este es un ejemplo que he creado y <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"external\">publicado en github</a> que te puede servir de base.</p><p>Presta especial atención al <strong>nombrado</strong> de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un <em>prefijo</em> con tus iniciales o las de tu empresa.</p><p>No te olvides de incluir un juego de <strong>pruebas y documentación</strong> necesaria para sus uso.</p><h2 id=\"Publica\"><a href=\"#Publica\" class=\"headerlink\" title=\"Publica\"></a>Publica</h2><p>Puedes descargar librerías y herramienta desde el repositorio de <em>npm</em> de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que <strong>registrarte para poder publicar</strong> contenido. El <a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"external\">proceso de registro</a> vía web es sencillo y grátis.</p><p>Una vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: <code>npm login</code> te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm publish</div></pre></td></tr></table></figure><p>Puedes encontrar <a href=\"https://docs.npmjs.com/cli/publish\" target=\"_blank\" rel=\"external\">más información</a> acerca de este mega comando en la documentación de <em>npmjs</em>. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.</p><p>La clave está en que tu fichero de configuración <code>package.json</code> sea correcto y lo más completo posible. Escribe un completo <code>readme.md</code> que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"external\">el contenido subido a github</a> se transforma y se ve en la <a href=\"https://www.npmjs.com/package/ab-ftp\" target=\"_blank\" rel=\"external\">página de información de npm.</a></p><p>Comprueba en un directorio vacío que <code>npm install nombre-de-tu-paquete</code> descarga todo lo necesario… y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.</p><h2 id=\"Actualiza\"><a href=\"#Actualiza\" class=\"headerlink\" title=\"Actualiza\"></a>Actualiza</h2><p>Con el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de <a href=\"http://semver.org/\" target=\"_blank\" rel=\"external\">nombrado de versiones semántico</a>:</p><p><strong>x.y.z = 1.2.3 = ruptura.mejora.parche</strong></p><p>Es bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en <em>github</em>.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag 0.1.2</div><div class=\"line\">git push --tags</div></pre></td></tr></table></figure><h2 id=\"Disfruta\"><a href=\"#Disfruta\" class=\"headerlink\" title=\"Disfruta\"></a>Disfruta</h2><p>Finalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso <strong>siempre habrás ganado</strong>. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.</p>","site":{"data":{}},"excerpt":"","more":"<p>Seguro que estás harto de repetir la mítica instrucción <code>npm install paquete-x</code> Pero, ¿has pensado en <strong>publicar tus propios módulos</strong>?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\"><em>npm</em></a>.</p><p>Sigue este proceso y te convertirás en un creador de paquetes para <em>npm</em> :</p><h2 id=\"Programa\"><a href=\"#Programa\" class=\"headerlink\" title=\"Programa\"></a>Programa</h2><p>Todo empieza por tener una necesidad y resolverla <strong>encapsulando su código en un módulo.</strong> Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.</p><p>Antes de continuar vamos a fijar un par de conceptos:</p><p><strong>- módulo:</strong> Fichero <em>.js</em> que exporta un funcionalidad y oculta su implementación.</p><p><strong>- paquete:</strong> Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.</p><p>Conocidos los ingredientes, la receta es sencilla:</p><ol><li>Debes crear un proyecto para el paquete que vas a publicar.</li><li>Has de subir el código a un repositorio público.</li><li>Y debes rellenar convenientemente el <code>package.json</code> de tu proyecto.</li></ol><p>Este es un ejemplo que he creado y <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"external\">publicado en github</a> que te puede servir de base.</p><p>Presta especial atención al <strong>nombrado</strong> de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un <em>prefijo</em> con tus iniciales o las de tu empresa.</p><p>No te olvides de incluir un juego de <strong>pruebas y documentación</strong> necesaria para sus uso.</p><h2 id=\"Publica\"><a href=\"#Publica\" class=\"headerlink\" title=\"Publica\"></a>Publica</h2><p>Puedes descargar librerías y herramienta desde el repositorio de <em>npm</em> de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que <strong>registrarte para poder publicar</strong> contenido. El <a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"external\">proceso de registro</a> vía web es sencillo y grátis.</p><p>Una vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: <code>npm login</code> te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm publish</div></pre></td></tr></table></figure><p>Puedes encontrar <a href=\"https://docs.npmjs.com/cli/publish\" target=\"_blank\" rel=\"external\">más información</a> acerca de este mega comando en la documentación de <em>npmjs</em>. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.</p><p>La clave está en que tu fichero de configuración <code>package.json</code> sea correcto y lo más completo posible. Escribe un completo <code>readme.md</code> que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"external\">el contenido subido a github</a> se transforma y se ve en la <a href=\"https://www.npmjs.com/package/ab-ftp\" target=\"_blank\" rel=\"external\">página de información de npm.</a></p><p>Comprueba en un directorio vacío que <code>npm install nombre-de-tu-paquete</code> descarga todo lo necesario… y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.</p><h2 id=\"Actualiza\"><a href=\"#Actualiza\" class=\"headerlink\" title=\"Actualiza\"></a>Actualiza</h2><p>Con el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de <a href=\"http://semver.org/\" target=\"_blank\" rel=\"external\">nombrado de versiones semántico</a>:</p><p><strong>x.y.z = 1.2.3 = ruptura.mejora.parche</strong></p><p>Es bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en <em>github</em>.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag 0.1.2</div><div class=\"line\">git push --tags</div></pre></td></tr></table></figure><h2 id=\"Disfruta\"><a href=\"#Disfruta\" class=\"headerlink\" title=\"Disfruta\"></a>Disfruta</h2><p>Finalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso <strong>siempre habrás ganado</strong>. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.</p>"},{"title":"Formularios reactivos con Angular","date":"2018-05-03T08:59:27.000Z","thumbnail":"/css/images/angular_8_reactive.png","_content":"\n![Tutorial Angular 8-reactive](/images/tutorial-angular_8_reactive.png)\n\nEl **doble enlace automático** entre elementos html y propiedades de objetos fue el primer gran éxito de **Angular**. Ese _doble-binding_ facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.\n\nLa solución pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo `ReactiveFormsModule` que viene en la librería `@angular/forms` permiten programar **formularios reactivos conducidos por el código**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/). Al finalizar tendrás una aplicación con formularios _model driven_ fáciles de mantener y validar.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/kakebo/8-reactive](https://github.com/AcademiaBinaria/kakebo/tree/8-reactive)\n\n\n# 1 Desacople\n\nLa directiva `[(ngModel)]=\"model.property\"` con su popular _banana in a box_ establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.\n\nSe puede establecer validaciones y configurar el evento que dispara las actualizaciones; todo ello usando más y más atributos y directivas en la plantilla. Son los formularios _template driven_ que degeneran en un html farragoso y difícil de mantener.\n\n## 1.1 Form Builder\n\nEntra en acción el  `FormBuilder`, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un `FormGroup`, o grupo de controles, que realiza un seguimiento del valor y estado de validez de los datos.\n\nVeamos un ejemplo mínimo de su declaración. \n\n```typescript\nimport { FormBuilder, FormGroup } from '@angular/forms';\npublic form: FormGroup;\nconstructor(private formBuilder: FormBuilder) {}\npublic ngOnInit() {\n  this.form = this.formBuilder.group({});\n}\n```\n\n# 2 Form Group\n\nEl formulario se define como un grupo de controles. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control y asignarle validaciones.\n\nEn este paso tenemos a disposición varias sobrecargas para configurar con mayor o menor detalle el control.\n\n## 2.1 Default data\nPara empezar es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario\n\n```typescript\nthis.name = 'ALBERTO';\nthis.form = this.formBuilder.group({\n  email: 'info@angular.io',\n  name: this.name.toLowerCase(),\n  registeredOn : new Date().toISOString().substring(0, 10)\n  password: ''\n});\n```\n\n## 2.1 Enlace en la vista\n\nMientras tanto en la vista html... Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una mayor limpieza en la vista. Lo único necesario será asignar por nombre el elemento html con el control que lo gestionará.\n\n>Para ello usaremos dos directivas que vienen dentro del módulo _reactivo_ son `[formGroup]=\"objetoFormulario\"` para el formulario en su conjunto, y `formControlName=\"nombreDelControl\"` para cada control.\n\n```html\n<form [formGroup]=\"form\">\n  <label for=\"email\">E-mail</label>\n  <input name=\"email\"\n         formControlName=\"email\"\n         type=\"email\" />\n  <label for=\"name\">Name</label>\n  <input name=\"name\"\n         formControlName=\"name\"\n         type=\"text\" />\n  <label for=\"registeredOn\">Registered On</label>\n  <input name=\"registeredOn\"\n         formControlName=\"registeredOn\"\n         type=\"date\" />\n  <label for=\"password\">Password</label>\n  <input name=\"password\"\n         formControlName=\"password\"\n         type=\"password\" />\n</form>\n```\n\n# 2 Validación de formularios\n\nLa validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer **frente de defensa ante errores de usuarios**; involuntarios o deliberados.\n\nDichas validaciones se solían realizar agregando atributos html tales como el conocido `required`. Pero todo eso ahora se traslada a la configuración de cada control, dónde podrás establecer un o varias reglas de validación. \n\n>De nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas. Las reglas son funciones y el objeto `Validators` del _framework_ viene con las más comunes listas para usar.  \n\n```typescript\nthis.form = this.formBuilder.group({\n  email: [\n    'info@angular.io', \n    [ Validators.required, Validators.email ]\n  ],\n  name: [\n    this.name.toLowerCase(),\n    Validators.required\n  ],\n  registeredOn : new Date().toISOString().substring(0, 10)\n  password: [\n    '', \n    [ Validators.required, Validators.minLength(4) ]\n  ]\n});\n```\nA estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.\n\n# 3 Estados\n\nLos formularios y controles reactivos están gestionados por máquinas de estados que determinan en todo momento la situación de cada control y del formulario en si mismo.\n\n## 3.1 Estados de validación\n\nAl establecer una más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.\n\nLa máquina de estados de validación contempla los siguientes mutuamente excluyentes:\n\n- **VALID**: el control ha pasado todos los chequeos\n- **INVALID**: el control ha fallado al menos en una regla.\n- **PENDING**: el control está en medio de un proceso de validación\n- **DISABLED**: el control está desactivado y exento de validación\n\nCuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad `errors` que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.\n\n## 3.2 Estados de modificación\n\nLos controles, y el formulario, se someten a otra máquina que monitoriza el valor del control y sus cambios. \n\nLa máquina de estados de cambio contempla entre otros los siguientes:\n\n- **PRINSTINE**: el valor del control no ha sido cambiado por el usuario\n- **DIRTY**: el usuario ha modificado el valor del control.\n- **TOUCHED**: el usuario ha lanzado un evento `blur` sobre el control.\n- **UNTOUCHED**: el usuario no ha lanzado un evento `blur` sobre el control.\n\nComo en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.\n\n# 4 Valor\n\nEste sistema de gestión de los controles del formulario oculta la parte más valiosa, el valor que se pretende almacenar, en una la propiedad `value` del formulario. \n\nContendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.\n\nUn ejemplo típico sueles ser como la siguiente vista y su controlador:\n\n```html\n<form [formGroup]=\"form\"\n      (submit)=\"onSubmit(form.value)\">\n  <label for=\"email\">E-mail</label>\n  <input name=\"email\"\n         formControlName=\"email\"\n         type=\"email\" />\n <button type=\"submit\"\n        [disabled]=\"form.invalid\">Save</button>\n</form>\n```\n\n```typescript\npublic onSubmit(formValue: any) {\n  console.log(formValue);\n  // { email:'info@angular.io' }\n}\n```\n\nYa tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. \n\nCon esto completas tu formación y dispones de conocimiento para crear aplicaciones Angular. Repasa esta serie [tutorial de introducción a Angular](../categories/Tutorial/Angular/) verás como aprendes a programar con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-8-Formularios-reactivos-con-Angular.md","raw":"---\ntitle: Formularios reactivos con Angular\npermalink: formularios-reactivos-con-Angular\ndate: 2018-05-03 10:59:27\ntags:  \n- Angular\n- Angular6\n- Angular5\n- Angular2\n- reactiveForms\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular_8_reactive.png\n---\n\n![Tutorial Angular 8-reactive](/images/tutorial-angular_8_reactive.png)\n\nEl **doble enlace automático** entre elementos html y propiedades de objetos fue el primer gran éxito de **Angular**. Ese _doble-binding_ facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.\n\nLa solución pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo `ReactiveFormsModule` que viene en la librería `@angular/forms` permiten programar **formularios reactivos conducidos por el código**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/). Al finalizar tendrás una aplicación con formularios _model driven_ fáciles de mantener y validar.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/kakebo/8-reactive](https://github.com/AcademiaBinaria/kakebo/tree/8-reactive)\n\n\n# 1 Desacople\n\nLa directiva `[(ngModel)]=\"model.property\"` con su popular _banana in a box_ establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.\n\nSe puede establecer validaciones y configurar el evento que dispara las actualizaciones; todo ello usando más y más atributos y directivas en la plantilla. Son los formularios _template driven_ que degeneran en un html farragoso y difícil de mantener.\n\n## 1.1 Form Builder\n\nEntra en acción el  `FormBuilder`, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un `FormGroup`, o grupo de controles, que realiza un seguimiento del valor y estado de validez de los datos.\n\nVeamos un ejemplo mínimo de su declaración. \n\n```typescript\nimport { FormBuilder, FormGroup } from '@angular/forms';\npublic form: FormGroup;\nconstructor(private formBuilder: FormBuilder) {}\npublic ngOnInit() {\n  this.form = this.formBuilder.group({});\n}\n```\n\n# 2 Form Group\n\nEl formulario se define como un grupo de controles. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control y asignarle validaciones.\n\nEn este paso tenemos a disposición varias sobrecargas para configurar con mayor o menor detalle el control.\n\n## 2.1 Default data\nPara empezar es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario\n\n```typescript\nthis.name = 'ALBERTO';\nthis.form = this.formBuilder.group({\n  email: 'info@angular.io',\n  name: this.name.toLowerCase(),\n  registeredOn : new Date().toISOString().substring(0, 10)\n  password: ''\n});\n```\n\n## 2.1 Enlace en la vista\n\nMientras tanto en la vista html... Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una mayor limpieza en la vista. Lo único necesario será asignar por nombre el elemento html con el control que lo gestionará.\n\n>Para ello usaremos dos directivas que vienen dentro del módulo _reactivo_ son `[formGroup]=\"objetoFormulario\"` para el formulario en su conjunto, y `formControlName=\"nombreDelControl\"` para cada control.\n\n```html\n<form [formGroup]=\"form\">\n  <label for=\"email\">E-mail</label>\n  <input name=\"email\"\n         formControlName=\"email\"\n         type=\"email\" />\n  <label for=\"name\">Name</label>\n  <input name=\"name\"\n         formControlName=\"name\"\n         type=\"text\" />\n  <label for=\"registeredOn\">Registered On</label>\n  <input name=\"registeredOn\"\n         formControlName=\"registeredOn\"\n         type=\"date\" />\n  <label for=\"password\">Password</label>\n  <input name=\"password\"\n         formControlName=\"password\"\n         type=\"password\" />\n</form>\n```\n\n# 2 Validación de formularios\n\nLa validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer **frente de defensa ante errores de usuarios**; involuntarios o deliberados.\n\nDichas validaciones se solían realizar agregando atributos html tales como el conocido `required`. Pero todo eso ahora se traslada a la configuración de cada control, dónde podrás establecer un o varias reglas de validación. \n\n>De nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas. Las reglas son funciones y el objeto `Validators` del _framework_ viene con las más comunes listas para usar.  \n\n```typescript\nthis.form = this.formBuilder.group({\n  email: [\n    'info@angular.io', \n    [ Validators.required, Validators.email ]\n  ],\n  name: [\n    this.name.toLowerCase(),\n    Validators.required\n  ],\n  registeredOn : new Date().toISOString().substring(0, 10)\n  password: [\n    '', \n    [ Validators.required, Validators.minLength(4) ]\n  ]\n});\n```\nA estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.\n\n# 3 Estados\n\nLos formularios y controles reactivos están gestionados por máquinas de estados que determinan en todo momento la situación de cada control y del formulario en si mismo.\n\n## 3.1 Estados de validación\n\nAl establecer una más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.\n\nLa máquina de estados de validación contempla los siguientes mutuamente excluyentes:\n\n- **VALID**: el control ha pasado todos los chequeos\n- **INVALID**: el control ha fallado al menos en una regla.\n- **PENDING**: el control está en medio de un proceso de validación\n- **DISABLED**: el control está desactivado y exento de validación\n\nCuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad `errors` que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.\n\n## 3.2 Estados de modificación\n\nLos controles, y el formulario, se someten a otra máquina que monitoriza el valor del control y sus cambios. \n\nLa máquina de estados de cambio contempla entre otros los siguientes:\n\n- **PRINSTINE**: el valor del control no ha sido cambiado por el usuario\n- **DIRTY**: el usuario ha modificado el valor del control.\n- **TOUCHED**: el usuario ha lanzado un evento `blur` sobre el control.\n- **UNTOUCHED**: el usuario no ha lanzado un evento `blur` sobre el control.\n\nComo en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.\n\n# 4 Valor\n\nEste sistema de gestión de los controles del formulario oculta la parte más valiosa, el valor que se pretende almacenar, en una la propiedad `value` del formulario. \n\nContendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.\n\nUn ejemplo típico sueles ser como la siguiente vista y su controlador:\n\n```html\n<form [formGroup]=\"form\"\n      (submit)=\"onSubmit(form.value)\">\n  <label for=\"email\">E-mail</label>\n  <input name=\"email\"\n         formControlName=\"email\"\n         type=\"email\" />\n <button type=\"submit\"\n        [disabled]=\"form.invalid\">Save</button>\n</form>\n```\n\n```typescript\npublic onSubmit(formValue: any) {\n  console.log(formValue);\n  // { email:'info@angular.io' }\n}\n```\n\nYa tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. \n\nCon esto completas tu formación y dispones de conocimiento para crear aplicaciones Angular. Repasa esta serie [tutorial de introducción a Angular](../categories/Tutorial/Angular/) verás como aprendes a programar con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"formularios-reactivos-con-Angular","published":1,"updated":"2018-05-03T11:53:46.071Z","_id":"cjgqbs5xg00006gs3o2wn0xbp","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular_8_reactive.png\" alt=\"Tutorial Angular 8-reactive\"></p><p>El <strong>doble enlace automático</strong> entre elementos html y propiedades de objetos fue el primer gran éxito de <strong>Angular</strong>. Ese <em>doble-binding</em> facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.</p><p>La solución pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo <code>ReactiveFormsModule</code> que viene en la librería <code>@angular/forms</code> permiten programar <strong>formularios reactivos conducidos por el código</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../vigilancia-y-seguridad-en-Angular/\">Vigilancia y seguridad en Angular</a>. Al finalizar tendrás una aplicación con formularios <em>model driven</em> fáciles de mantener y validar.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/kakebo/tree/8-reactive\" target=\"_blank\" rel=\"external\">AcademiaBinaria/kakebo/8-reactive</a></p></blockquote><h1 id=\"1-Desacople\"><a href=\"#1-Desacople\" class=\"headerlink\" title=\"1 Desacople\"></a>1 Desacople</h1><p>La directiva <code>[(ngModel)]=&quot;model.property&quot;</code> con su popular <em>banana in a box</em> establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.</p><p>Se puede establecer validaciones y configurar el evento que dispara las actualizaciones; todo ello usando más y más atributos y directivas en la plantilla. Son los formularios <em>template driven</em> que degeneran en un html farragoso y difícil de mantener.</p><h2 id=\"1-1-Form-Builder\"><a href=\"#1-1-Form-Builder\" class=\"headerlink\" title=\"1.1 Form Builder\"></a>1.1 Form Builder</h2><p>Entra en acción el <code>FormBuilder</code>, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un <code>FormGroup</code>, o grupo de controles, que realiza un seguimiento del valor y estado de validez de los datos.</p><p>Veamos un ejemplo mínimo de su declaración.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormBuilder, FormGroup &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> form: FormGroup;</div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> formBuilder: FormBuilder</span>) &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> ngOnInit() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.form = <span class=\"keyword\">this</span>.formBuilder.group(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h1 id=\"2-Form-Group\"><a href=\"#2-Form-Group\" class=\"headerlink\" title=\"2 Form Group\"></a>2 Form Group</h1><p>El formulario se define como un grupo de controles. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control y asignarle validaciones.</p><p>En este paso tenemos a disposición varias sobrecargas para configurar con mayor o menor detalle el control.</p><h2 id=\"2-1-Default-data\"><a href=\"#2-1-Default-data\" class=\"headerlink\" title=\"2.1 Default data\"></a>2.1 Default data</h2><p>Para empezar es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.name = <span class=\"string\">'ALBERTO'</span>;</div><div class=\"line\"><span class=\"keyword\">this</span>.form = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</div><div class=\"line\">  email: <span class=\"string\">'info@angular.io'</span>,</div><div class=\"line\">  name: <span class=\"keyword\">this</span>.name.toLowerCase(),</div><div class=\"line\">  registeredOn : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().substring(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</div><div class=\"line\">  password: <span class=\"string\">''</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><h2 id=\"2-1-Enlace-en-la-vista\"><a href=\"#2-1-Enlace-en-la-vista\" class=\"headerlink\" title=\"2.1 Enlace en la vista\"></a>2.1 Enlace en la vista</h2><p>Mientras tanto en la vista html… Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una mayor limpieza en la vista. Lo único necesario será asignar por nombre el elemento html con el control que lo gestionará.</p><blockquote><p>Para ello usaremos dos directivas que vienen dentro del módulo <em>reactivo</em> son <code>[formGroup]=&quot;objetoFormulario&quot;</code> para el formulario en su conjunto, y <code>formControlName=&quot;nombreDelControl&quot;</code> para cada control.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"form\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"email\"</span>&gt;</span>E-mail<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"name\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"registeredOn\"</span>&gt;</span>Registered On<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"registeredOn\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"registeredOn\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><h1 id=\"2-Validacion-de-formularios\"><a href=\"#2-Validacion-de-formularios\" class=\"headerlink\" title=\"2 Validación de formularios\"></a>2 Validación de formularios</h1><p>La validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer <strong>frente de defensa ante errores de usuarios</strong>; involuntarios o deliberados.</p><p>Dichas validaciones se solían realizar agregando atributos html tales como el conocido <code>required</code>. Pero todo eso ahora se traslada a la configuración de cada control, dónde podrás establecer un o varias reglas de validación.</p><blockquote><p>De nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas. Las reglas son funciones y el objeto <code>Validators</code> del <em>framework</em> viene con las más comunes listas para usar.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.form = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</div><div class=\"line\">  email: [</div><div class=\"line\">    <span class=\"string\">'info@angular.io'</span>, </div><div class=\"line\">    [ Validators.required, Validators.email ]</div><div class=\"line\">  ],</div><div class=\"line\">  name: [</div><div class=\"line\">    <span class=\"keyword\">this</span>.name.toLowerCase(),</div><div class=\"line\">    Validators.required</div><div class=\"line\">  ],</div><div class=\"line\">  registeredOn : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().substring(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</div><div class=\"line\">  password: [</div><div class=\"line\">    <span class=\"string\">''</span>, </div><div class=\"line\">    [ Validators.required, Validators.minLength(<span class=\"number\">4</span>) ]</div><div class=\"line\">  ]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>A estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.</p><h1 id=\"3-Estados\"><a href=\"#3-Estados\" class=\"headerlink\" title=\"3 Estados\"></a>3 Estados</h1><p>Los formularios y controles reactivos están gestionados por máquinas de estados que determinan en todo momento la situación de cada control y del formulario en si mismo.</p><h2 id=\"3-1-Estados-de-validacion\"><a href=\"#3-1-Estados-de-validacion\" class=\"headerlink\" title=\"3.1 Estados de validación\"></a>3.1 Estados de validación</h2><p>Al establecer una más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.</p><p>La máquina de estados de validación contempla los siguientes mutuamente excluyentes:</p><ul><li><strong>VALID</strong>: el control ha pasado todos los chequeos</li><li><strong>INVALID</strong>: el control ha fallado al menos en una regla.</li><li><strong>PENDING</strong>: el control está en medio de un proceso de validación</li><li><strong>DISABLED</strong>: el control está desactivado y exento de validación</li></ul><p>Cuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad <code>errors</code> que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.</p><h2 id=\"3-2-Estados-de-modificacion\"><a href=\"#3-2-Estados-de-modificacion\" class=\"headerlink\" title=\"3.2 Estados de modificación\"></a>3.2 Estados de modificación</h2><p>Los controles, y el formulario, se someten a otra máquina que monitoriza el valor del control y sus cambios.</p><p>La máquina de estados de cambio contempla entre otros los siguientes:</p><ul><li><strong>PRINSTINE</strong>: el valor del control no ha sido cambiado por el usuario</li><li><strong>DIRTY</strong>: el usuario ha modificado el valor del control.</li><li><strong>TOUCHED</strong>: el usuario ha lanzado un evento <code>blur</code> sobre el control.</li><li><strong>UNTOUCHED</strong>: el usuario no ha lanzado un evento <code>blur</code> sobre el control.</li></ul><p>Como en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.</p><h1 id=\"4-Valor\"><a href=\"#4-Valor\" class=\"headerlink\" title=\"4 Valor\"></a>4 Valor</h1><p>Este sistema de gestión de los controles del formulario oculta la parte más valiosa, el valor que se pretende almacenar, en una la propiedad <code>value</code> del formulario.</p><p>Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.</p><p>Un ejemplo típico sueles ser como la siguiente vista y su controlador:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"form\"</span></span></div><div class=\"line\"><span class=\"tag\">      (<span class=\"attr\">submit</span>)=<span class=\"string\">\"onSubmit(form.value)\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"email\"</span>&gt;</span>E-mail<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> /&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span></span></div><div class=\"line\"><span class=\"tag\">        [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"form.invalid\"</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> onSubmit(formValue: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(formValue);</div><div class=\"line\">  <span class=\"comment\">// &#123; email:'info@angular.io' &#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Ya tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada.</p><p>Con esto completas tu formación y dispones de conocimiento para crear aplicaciones Angular. Repasa esta serie <a href=\"../categories/Tutorial/Angular/\">tutorial de introducción a Angular</a> verás como aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular_8_reactive.png\" alt=\"Tutorial Angular 8-reactive\"></p><p>El <strong>doble enlace automático</strong> entre elementos html y propiedades de objetos fue el primer gran éxito de <strong>Angular</strong>. Ese <em>doble-binding</em> facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.</p><p>La solución pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo <code>ReactiveFormsModule</code> que viene en la librería <code>@angular/forms</code> permiten programar <strong>formularios reactivos conducidos por el código</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../vigilancia-y-seguridad-en-Angular/\">Vigilancia y seguridad en Angular</a>. Al finalizar tendrás una aplicación con formularios <em>model driven</em> fáciles de mantener y validar.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/kakebo/tree/8-reactive\" target=\"_blank\" rel=\"external\">AcademiaBinaria/kakebo/8-reactive</a></p></blockquote><h1 id=\"1-Desacople\"><a href=\"#1-Desacople\" class=\"headerlink\" title=\"1 Desacople\"></a>1 Desacople</h1><p>La directiva <code>[(ngModel)]=&quot;model.property&quot;</code> con su popular <em>banana in a box</em> establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.</p><p>Se puede establecer validaciones y configurar el evento que dispara las actualizaciones; todo ello usando más y más atributos y directivas en la plantilla. Son los formularios <em>template driven</em> que degeneran en un html farragoso y difícil de mantener.</p><h2 id=\"1-1-Form-Builder\"><a href=\"#1-1-Form-Builder\" class=\"headerlink\" title=\"1.1 Form Builder\"></a>1.1 Form Builder</h2><p>Entra en acción el <code>FormBuilder</code>, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un <code>FormGroup</code>, o grupo de controles, que realiza un seguimiento del valor y estado de validez de los datos.</p><p>Veamos un ejemplo mínimo de su declaración.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; FormBuilder, FormGroup &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> form: FormGroup;</div><div class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> formBuilder: FormBuilder</span>) &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> ngOnInit() &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.form = <span class=\"keyword\">this</span>.formBuilder.group(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h1 id=\"2-Form-Group\"><a href=\"#2-Form-Group\" class=\"headerlink\" title=\"2 Form Group\"></a>2 Form Group</h1><p>El formulario se define como un grupo de controles. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control y asignarle validaciones.</p><p>En este paso tenemos a disposición varias sobrecargas para configurar con mayor o menor detalle el control.</p><h2 id=\"2-1-Default-data\"><a href=\"#2-1-Default-data\" class=\"headerlink\" title=\"2.1 Default data\"></a>2.1 Default data</h2><p>Para empezar es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.name = <span class=\"string\">'ALBERTO'</span>;</div><div class=\"line\"><span class=\"keyword\">this</span>.form = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</div><div class=\"line\">  email: <span class=\"string\">'info@angular.io'</span>,</div><div class=\"line\">  name: <span class=\"keyword\">this</span>.name.toLowerCase(),</div><div class=\"line\">  registeredOn : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().substring(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</div><div class=\"line\">  password: <span class=\"string\">''</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><h2 id=\"2-1-Enlace-en-la-vista\"><a href=\"#2-1-Enlace-en-la-vista\" class=\"headerlink\" title=\"2.1 Enlace en la vista\"></a>2.1 Enlace en la vista</h2><p>Mientras tanto en la vista html… Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una mayor limpieza en la vista. Lo único necesario será asignar por nombre el elemento html con el control que lo gestionará.</p><blockquote><p>Para ello usaremos dos directivas que vienen dentro del módulo <em>reactivo</em> son <code>[formGroup]=&quot;objetoFormulario&quot;</code> para el formulario en su conjunto, y <code>formControlName=&quot;nombreDelControl&quot;</code> para cada control.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"form\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"email\"</span>&gt;</span>E-mail<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"name\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"registeredOn\"</span>&gt;</span>Registered On<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"registeredOn\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"registeredOn\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"password\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><h1 id=\"2-Validacion-de-formularios\"><a href=\"#2-Validacion-de-formularios\" class=\"headerlink\" title=\"2 Validación de formularios\"></a>2 Validación de formularios</h1><p>La validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer <strong>frente de defensa ante errores de usuarios</strong>; involuntarios o deliberados.</p><p>Dichas validaciones se solían realizar agregando atributos html tales como el conocido <code>required</code>. Pero todo eso ahora se traslada a la configuración de cada control, dónde podrás establecer un o varias reglas de validación.</p><blockquote><p>De nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas. Las reglas son funciones y el objeto <code>Validators</code> del <em>framework</em> viene con las más comunes listas para usar.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.form = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</div><div class=\"line\">  email: [</div><div class=\"line\">    <span class=\"string\">'info@angular.io'</span>, </div><div class=\"line\">    [ Validators.required, Validators.email ]</div><div class=\"line\">  ],</div><div class=\"line\">  name: [</div><div class=\"line\">    <span class=\"keyword\">this</span>.name.toLowerCase(),</div><div class=\"line\">    Validators.required</div><div class=\"line\">  ],</div><div class=\"line\">  registeredOn : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().substring(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</div><div class=\"line\">  password: [</div><div class=\"line\">    <span class=\"string\">''</span>, </div><div class=\"line\">    [ Validators.required, Validators.minLength(<span class=\"number\">4</span>) ]</div><div class=\"line\">  ]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>A estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.</p><h1 id=\"3-Estados\"><a href=\"#3-Estados\" class=\"headerlink\" title=\"3 Estados\"></a>3 Estados</h1><p>Los formularios y controles reactivos están gestionados por máquinas de estados que determinan en todo momento la situación de cada control y del formulario en si mismo.</p><h2 id=\"3-1-Estados-de-validacion\"><a href=\"#3-1-Estados-de-validacion\" class=\"headerlink\" title=\"3.1 Estados de validación\"></a>3.1 Estados de validación</h2><p>Al establecer una más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.</p><p>La máquina de estados de validación contempla los siguientes mutuamente excluyentes:</p><ul><li><strong>VALID</strong>: el control ha pasado todos los chequeos</li><li><strong>INVALID</strong>: el control ha fallado al menos en una regla.</li><li><strong>PENDING</strong>: el control está en medio de un proceso de validación</li><li><strong>DISABLED</strong>: el control está desactivado y exento de validación</li></ul><p>Cuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad <code>errors</code> que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.</p><h2 id=\"3-2-Estados-de-modificacion\"><a href=\"#3-2-Estados-de-modificacion\" class=\"headerlink\" title=\"3.2 Estados de modificación\"></a>3.2 Estados de modificación</h2><p>Los controles, y el formulario, se someten a otra máquina que monitoriza el valor del control y sus cambios.</p><p>La máquina de estados de cambio contempla entre otros los siguientes:</p><ul><li><strong>PRINSTINE</strong>: el valor del control no ha sido cambiado por el usuario</li><li><strong>DIRTY</strong>: el usuario ha modificado el valor del control.</li><li><strong>TOUCHED</strong>: el usuario ha lanzado un evento <code>blur</code> sobre el control.</li><li><strong>UNTOUCHED</strong>: el usuario no ha lanzado un evento <code>blur</code> sobre el control.</li></ul><p>Como en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.</p><h1 id=\"4-Valor\"><a href=\"#4-Valor\" class=\"headerlink\" title=\"4 Valor\"></a>4 Valor</h1><p>Este sistema de gestión de los controles del formulario oculta la parte más valiosa, el valor que se pretende almacenar, en una la propiedad <code>value</code> del formulario.</p><p>Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.</p><p>Un ejemplo típico sueles ser como la siguiente vista y su controlador:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"form\"</span></span></div><div class=\"line\"><span class=\"tag\">      (<span class=\"attr\">submit</span>)=<span class=\"string\">\"onSubmit(form.value)\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"email\"</span>&gt;</span>E-mail<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">formControlName</span>=<span class=\"string\">\"email\"</span></span></div><div class=\"line\"><span class=\"tag\">         <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> /&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span></span></div><div class=\"line\"><span class=\"tag\">        [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"form.invalid\"</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> onSubmit(formValue: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(formValue);</div><div class=\"line\">  <span class=\"comment\">// &#123; email:'info@angular.io' &#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>Ya tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada.</p><p>Con esto completas tu formación y dispones de conocimiento para crear aplicaciones Angular. Repasa esta serie <a href=\"../categories/Tutorial/Angular/\">tutorial de introducción a Angular</a> verás como aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjbrwpvf6000aiwd3funll6pp","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvg1000kiwd3ncix4g8w"},{"post_id":"cjbrwpvdb0002iwd3s3hm2ey2","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvg1000piwd3c5k3f06j"},{"post_id":"cjbrwpvf6000ciwd3yh7x0xku","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvg1000siwd399iticgz"},{"post_id":"cjbrwpvfm000hiwd3kjqdf4ac","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvgh000viwd31it5or35"},{"post_id":"cjbrwpvee0004iwd33m6qo4qf","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvgh000yiwd3zis908bp"},{"post_id":"cjbrwpvg1000jiwd31vpe6o8t","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvgx0011iwd3rquxanwz"},{"post_id":"cjbrwpvg1000oiwd3iw0obsh1","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvhc0013iwd3wh15xj9l"},{"post_id":"cjbrwpveq0008iwd321bv9dux","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvhc0016iwd30dznaoev"},{"post_id":"cjbrwpvg1000riwd3xv00rnbm","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvhs001aiwd3y2m3uz0q"},{"post_id":"cjbrwpvgh000uiwd3oi8jqncw","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvhs001eiwd39etoi0n8"},{"post_id":"cjbrwpvgh000xiwd30fgjttck","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvi7001iiwd3r4gt3g62"},{"post_id":"cjbrwpvgx0010iwd3wg1uhspm","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvi7001miwd3ijyzzz9a"},{"post_id":"cjbrwpvhc0015iwd3isv7fz8o","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvi7001oiwd3hlzqwu9x"},{"post_id":"cjbrwpvhs001diwd3sjrli39w","category_id":"cjbrwpvhc0018iwd35xk9dihj","_id":"cjbrwpvi7001qiwd3h242snl9"},{"post_id":"cjbrwpvgx0012iwd36zjlkr34","category_id":"cjbrwpvhc0018iwd35xk9dihj","_id":"cjbrwpvin001uiwd37h2iby6e"},{"post_id":"cjbrwpvhs001giwd3e9p6o803","category_id":"cjbrwpvhc0018iwd35xk9dihj","_id":"cjbrwpvin001wiwd3u6hjabjo"},{"post_id":"cjbrwpvi7001liwd3mxs167tt","category_id":"cjbrwpvel0005iwd3drbh7j0w","_id":"cjbrwpvj30020iwd3y1qr8n5b"},{"post_id":"cjbrwpvhs0019iwd3xtobv2q2","category_id":"cjbrwpvhc0018iwd35xk9dihj","_id":"cjbrwpvj30024iwd3zdpiqgrh"},{"post_id":"cjbrwpvin001viwd3a5fd3f8a","category_id":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjbrwpvke002miwd3ti987hnh"},{"post_id":"cjbrwpvin001viwd3a5fd3f8a","category_id":"cjbrwpvjy002diwd3equpwx2y","_id":"cjbrwpvke002piwd37gzqbc2z"},{"post_id":"cjbrwpvi7001niwd3srhzdu8j","category_id":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjbrwpvke002siwd34fghtdc1"},{"post_id":"cjbrwpvi7001niwd3srhzdu8j","category_id":"cjbrwpvjy002diwd3equpwx2y","_id":"cjbrwpvkt002uiwd3jmhqihdl"},{"post_id":"cjbrwpvin001ziwd3551c6s4a","category_id":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjbrwpvkt002xiwd3ex2t5klp"},{"post_id":"cjbrwpvin001ziwd3551c6s4a","category_id":"cjbrwpvjy002diwd3equpwx2y","_id":"cjbrwpvkt0030iwd3fp8apa94"},{"post_id":"cjbrwpvj30023iwd3eb4hu4n0","category_id":"cjbrwpvke002riwd3gys3x6vg","_id":"cjbrwpvl90033iwd37f3nceeb"},{"post_id":"cjbrwpvi7001piwd3nglxcwnn","category_id":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjbrwpvl90038iwd33o7x5cst"},{"post_id":"cjbrwpvi7001piwd3nglxcwnn","category_id":"cjbrwpvjy002diwd3equpwx2y","_id":"cjbrwpvl9003aiwd3qnwx3end"},{"post_id":"cjbrwpvji0027iwd3esyp8axx","category_id":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjbrwpvl9003diwd3vg7e6bau"},{"post_id":"cjbrwpvji0027iwd3esyp8axx","category_id":"cjbrwpvjy002diwd3equpwx2y","_id":"cjbrwpvl9003giwd3wd8c028d"},{"post_id":"cjbrwpvji0029iwd3b7w987c4","category_id":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjbrwpvlo003jiwd3zr497nk3"},{"post_id":"cjbrwpvji0029iwd3b7w987c4","category_id":"cjbrwpvjy002diwd3equpwx2y","_id":"cjbrwpvlo003miwd3iun0zbj2"},{"post_id":"cjbrwpvi7001siwd3xpxrryku","category_id":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjbrwpvlo003piwd3e70k6zbv"},{"post_id":"cjbrwpvi7001siwd3xpxrryku","category_id":"cjbrwpvjy002diwd3equpwx2y","_id":"cjbrwpvlo003qiwd3sz2by5b7"},{"post_id":"cjbrwpvji002biwd3ak7z4jrq","category_id":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjbrwpvm4003siwd3e5xmp5uy"},{"post_id":"cjbrwpvji002biwd3ak7z4jrq","category_id":"cjbrwpvjy002diwd3equpwx2y","_id":"cjbrwpvm4003tiwd3itaaj798"},{"post_id":"cjbrwpvjy002eiwd3kujb9qqx","category_id":"cjbrwpvke002riwd3gys3x6vg","_id":"cjbrwpvm4003wiwd341c1652q"},{"post_id":"cjgqbs5xg00006gs3o2wn0xbp","category_id":"cjbrwpvin001tiwd3d4s3d3xu","_id":"cjgqbs5y200036gs3o2wgq5ze"},{"post_id":"cjgqbs5xg00006gs3o2wn0xbp","category_id":"cjbrwpvjy002diwd3equpwx2y","_id":"cjgqbs5y200046gs3am4fqic8"}],"PostTag":[{"post_id":"cjbrwpvdb0002iwd3s3hm2ey2","tag_id":"cjbrwpveq0006iwd3mx0r73ql","_id":"cjbrwpvfm000fiwd3181lvqks"},{"post_id":"cjbrwpvee0004iwd33m6qo4qf","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvg1000qiwd346mzj5ht"},{"post_id":"cjbrwpvg1000riwd3xv00rnbm","tag_id":"cjbrwpveq0006iwd3mx0r73ql","_id":"cjbrwpvgh000wiwd3g0a44gke"},{"post_id":"cjbrwpveq0008iwd321bv9dux","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvhc0017iwd384ptnz98"},{"post_id":"cjbrwpveq0008iwd321bv9dux","tag_id":"cjbrwpvgh000tiwd3v94qv1ae","_id":"cjbrwpvhs001biwd3xup26vk1"},{"post_id":"cjbrwpveq0008iwd321bv9dux","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvhs001fiwd3ekinwdcz"},{"post_id":"cjbrwpvf6000aiwd3funll6pp","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvi7001jiwd33viufola"},{"post_id":"cjbrwpvf6000ciwd3yh7x0xku","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvin001yiwd3a5801mwq"},{"post_id":"cjbrwpvf6000ciwd3yh7x0xku","tag_id":"cjbrwpvi7001kiwd37pepzyjm","_id":"cjbrwpvj30022iwd3mkth6mam"},{"post_id":"cjbrwpvf6000ciwd3yh7x0xku","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvji0026iwd3sxzk8ilp"},{"post_id":"cjbrwpvfm000hiwd3kjqdf4ac","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvjy002ciwd3jhfi3jmz"},{"post_id":"cjbrwpvfm000hiwd3kjqdf4ac","tag_id":"cjbrwpvin001xiwd3qzmu2hgu","_id":"cjbrwpvjy002fiwd3r3i49q2q"},{"post_id":"cjbrwpvfm000hiwd3kjqdf4ac","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvjy002hiwd3jf15by2i"},{"post_id":"cjbrwpvg1000jiwd31vpe6o8t","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvjy002kiwd3m8cf4xi2"},{"post_id":"cjbrwpvg1000jiwd31vpe6o8t","tag_id":"cjbrwpvji002aiwd3hht5b7pc","_id":"cjbrwpvke002niwd3cfoilsjs"},{"post_id":"cjbrwpvg1000jiwd31vpe6o8t","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvke002qiwd3uidc6ten"},{"post_id":"cjbrwpvg1000oiwd3iw0obsh1","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvkt002viwd3a7fumkzj"},{"post_id":"cjbrwpvg1000oiwd3iw0obsh1","tag_id":"cjbrwpvin001xiwd3qzmu2hgu","_id":"cjbrwpvkt002yiwd3eas8q21h"},{"post_id":"cjbrwpvg1000oiwd3iw0obsh1","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvkt0031iwd3dqke61or"},{"post_id":"cjbrwpvgh000uiwd3oi8jqncw","tag_id":"cjbrwpvke002tiwd3671s8s4y","_id":"cjbrwpvl90034iwd3uu2t9xp6"},{"post_id":"cjbrwpvgh000xiwd30fgjttck","tag_id":"cjbrwpvkt002ziwd3mp9aadnw","_id":"cjbrwpvl90037iwd3d9v5kr66"},{"post_id":"cjbrwpvgx0010iwd3wg1uhspm","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvl9003ciwd3gtdmzt34"},{"post_id":"cjbrwpvgx0010iwd3wg1uhspm","tag_id":"cjbrwpvji002aiwd3hht5b7pc","_id":"cjbrwpvl9003eiwd3851c3eve"},{"post_id":"cjbrwpvgx0010iwd3wg1uhspm","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvlo003iiwd3ob5elfep"},{"post_id":"cjbrwpvgx0012iwd36zjlkr34","tag_id":"cjbrwpvl90039iwd3zsvjskmp","_id":"cjbrwpvlo003kiwd3b5iejmrt"},{"post_id":"cjbrwpvhc0015iwd3isv7fz8o","tag_id":"cjbrwpvkt002ziwd3mp9aadnw","_id":"cjbrwpvlo003oiwd3tyim5lxu"},{"post_id":"cjbrwpvhs0019iwd3xtobv2q2","tag_id":"cjbrwpvlo003liwd3bl4ttnek","_id":"cjbrwpvm4003viwd3meueqky7"},{"post_id":"cjbrwpvhs0019iwd3xtobv2q2","tag_id":"cjbrwpvl90039iwd3zsvjskmp","_id":"cjbrwpvm4003xiwd39nrdu9k3"},{"post_id":"cjbrwpvhs001diwd3sjrli39w","tag_id":"cjbrwpvm4003uiwd31niwz9d0","_id":"cjbrwpvm40041iwd3kmlbrre6"},{"post_id":"cjbrwpvhs001diwd3sjrli39w","tag_id":"cjbrwpvkt002ziwd3mp9aadnw","_id":"cjbrwpvm40042iwd3lfwteh4p"},{"post_id":"cjbrwpvhs001diwd3sjrli39w","tag_id":"cjbrwpvke002tiwd3671s8s4y","_id":"cjbrwpvm40044iwd396gf3j3i"},{"post_id":"cjbrwpvhs001giwd3e9p6o803","tag_id":"cjbrwpvm40040iwd3ek0w7quz","_id":"cjbrwpvm40045iwd38nv5ix6k"},{"post_id":"cjbrwpvi7001liwd3mxs167tt","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvmk0047iwd3kk1re80i"},{"post_id":"cjbrwpvi7001liwd3mxs167tt","tag_id":"cjbrwpvm40043iwd3lq55emn8","_id":"cjbrwpvmk0048iwd3bojxyvds"},{"post_id":"cjbrwpvi7001liwd3mxs167tt","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvmk004aiwd3p90mpf5l"},{"post_id":"cjbrwpvi7001niwd3srhzdu8j","tag_id":"cjbrwpvmk0046iwd3jgv16jo3","_id":"cjbrwpvmk004eiwd3a49kjkop"},{"post_id":"cjbrwpvi7001niwd3srhzdu8j","tag_id":"cjbrwpvmk0049iwd3gsdmo61n","_id":"cjbrwpvmk004fiwd37lgfzh9m"},{"post_id":"cjbrwpvi7001niwd3srhzdu8j","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvmz004hiwd3iik6jm17"},{"post_id":"cjbrwpvi7001niwd3srhzdu8j","tag_id":"cjbrwpvin001xiwd3qzmu2hgu","_id":"cjbrwpvmz004iiwd3w4671emn"},{"post_id":"cjbrwpvi7001niwd3srhzdu8j","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvmz004kiwd34r5raa27"},{"post_id":"cjbrwpvi7001niwd3srhzdu8j","tag_id":"cjbrwpvmk004ciwd3um2auy0r","_id":"cjbrwpvmz004liwd3zbjq39th"},{"post_id":"cjbrwpvi7001piwd3nglxcwnn","tag_id":"cjbrwpvmk0046iwd3jgv16jo3","_id":"cjbrwpvmz004niwd32h68p4fl"},{"post_id":"cjbrwpvi7001piwd3nglxcwnn","tag_id":"cjbrwpvmk0049iwd3gsdmo61n","_id":"cjbrwpvmz004oiwd3l92t51k4"},{"post_id":"cjbrwpvi7001piwd3nglxcwnn","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvmz004qiwd3y7cag4hr"},{"post_id":"cjbrwpvi7001piwd3nglxcwnn","tag_id":"cjbrwpvgh000tiwd3v94qv1ae","_id":"cjbrwpvmz004riwd3leged8uj"},{"post_id":"cjbrwpvi7001piwd3nglxcwnn","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvmz004tiwd3fdutg7fz"},{"post_id":"cjbrwpvi7001piwd3nglxcwnn","tag_id":"cjbrwpvmk004ciwd3um2auy0r","_id":"cjbrwpvmz004uiwd3n826xqa2"},{"post_id":"cjbrwpvi7001siwd3xpxrryku","tag_id":"cjbrwpvmk0046iwd3jgv16jo3","_id":"cjbrwpvmz004xiwd34qr5yr63"},{"post_id":"cjbrwpvi7001siwd3xpxrryku","tag_id":"cjbrwpvmk0049iwd3gsdmo61n","_id":"cjbrwpvmz004yiwd3ht6h6b62"},{"post_id":"cjbrwpvi7001siwd3xpxrryku","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvnf0050iwd3ve4hyty4"},{"post_id":"cjbrwpvi7001siwd3xpxrryku","tag_id":"cjbrwpvmz004siwd38nko48yj","_id":"cjbrwpvnf0051iwd3n54y3qc3"},{"post_id":"cjbrwpvi7001siwd3xpxrryku","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvnf0053iwd329qbq56a"},{"post_id":"cjbrwpvi7001siwd3xpxrryku","tag_id":"cjbrwpvmk004ciwd3um2auy0r","_id":"cjbrwpvnf0054iwd3920s2cu0"},{"post_id":"cjbrwpvin001viwd3a5fd3f8a","tag_id":"cjbrwpvmk0046iwd3jgv16jo3","_id":"cjbrwpvnf0057iwd3bgap5i2y"},{"post_id":"cjbrwpvin001viwd3a5fd3f8a","tag_id":"cjbrwpvmk0049iwd3gsdmo61n","_id":"cjbrwpvnf0058iwd3cvok7342"},{"post_id":"cjbrwpvin001viwd3a5fd3f8a","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvnf005aiwd36w2in7z7"},{"post_id":"cjbrwpvin001viwd3a5fd3f8a","tag_id":"cjbrwpvin001xiwd3qzmu2hgu","_id":"cjbrwpvnv005biwd3xljpupxz"},{"post_id":"cjbrwpvin001viwd3a5fd3f8a","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvnv005diwd3smol2q80"},{"post_id":"cjbrwpvin001viwd3a5fd3f8a","tag_id":"cjbrwpvmk004ciwd3um2auy0r","_id":"cjbrwpvnv005eiwd3dno3b2xj"},{"post_id":"cjbrwpvin001ziwd3551c6s4a","tag_id":"cjbrwpvmk0046iwd3jgv16jo3","_id":"cjbrwpvnv005giwd3r4t4byyl"},{"post_id":"cjbrwpvin001ziwd3551c6s4a","tag_id":"cjbrwpvmk0049iwd3gsdmo61n","_id":"cjbrwpvnv005hiwd32t5uydvk"},{"post_id":"cjbrwpvin001ziwd3551c6s4a","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjbrwpvnv005jiwd3wlqwvbjc"},{"post_id":"cjbrwpvin001ziwd3551c6s4a","tag_id":"cjbrwpvi7001kiwd37pepzyjm","_id":"cjbrwpvnv005kiwd32wfi8lgx"},{"post_id":"cjbrwpvin001ziwd3551c6s4a","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvnv005miwd3s1lvyezx"},{"post_id":"cjbrwpvin001ziwd3551c6s4a","tag_id":"cjbrwpvmk004ciwd3um2auy0r","_id":"cjbrwpvnv005niwd3mmrufjxc"},{"post_id":"cjbrwpvj30023iwd3eb4hu4n0","tag_id":"cjbrwpvl90039iwd3zsvjskmp","_id":"cjbrwpvoa005piwd312w78419"},{"post_id":"cjbrwpvji0027iwd3esyp8axx","tag_id":"cjbrwpvmk0046iwd3jgv16jo3","_id":"cjbrwpvoa005siwd3n7g59avd"},{"post_id":"cjbrwpvji0027iwd3esyp8axx","tag_id":"cjbrwpvji002aiwd3hht5b7pc","_id":"cjbrwpvoa005wiwd3lwpc3dnh"},{"post_id":"cjbrwpvji0027iwd3esyp8axx","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvoa005yiwd39wtquete"},{"post_id":"cjbrwpvji0027iwd3esyp8axx","tag_id":"cjbrwpvmk004ciwd3um2auy0r","_id":"cjbrwpvoa005ziwd3h4zgswxi"},{"post_id":"cjbrwpvji0029iwd3b7w987c4","tag_id":"cjbrwpvmk0046iwd3jgv16jo3","_id":"cjbrwpvoa0062iwd3wzzcqzet"},{"post_id":"cjbrwpvji0029iwd3b7w987c4","tag_id":"cjbrwpvm40043iwd3lq55emn8","_id":"cjbrwpvos0066iwd3qhjenjtc"},{"post_id":"cjbrwpvji0029iwd3b7w987c4","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvow0068iwd32vg78aya"},{"post_id":"cjbrwpvji0029iwd3b7w987c4","tag_id":"cjbrwpvmk004ciwd3um2auy0r","_id":"cjbrwpvow0069iwd3rwyt16vs"},{"post_id":"cjbrwpvji002biwd3ak7z4jrq","tag_id":"cjbrwpvmk0046iwd3jgv16jo3","_id":"cjbrwpvp1006biwd30lebvq48"},{"post_id":"cjbrwpvji002biwd3ak7z4jrq","tag_id":"cjbrwpvji002aiwd3hht5b7pc","_id":"cjbrwpvp3006eiwd3815960vo"},{"post_id":"cjbrwpvji002biwd3ak7z4jrq","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjbrwpvp3006fiwd385b4das8"},{"post_id":"cjbrwpvji002biwd3ak7z4jrq","tag_id":"cjbrwpvmk004ciwd3um2auy0r","_id":"cjbrwpvp4006giwd34kinwbpa"},{"post_id":"cjbrwpvjy002eiwd3kujb9qqx","tag_id":"cjbrwpvkt002ziwd3mp9aadnw","_id":"cjbrwpvp4006hiwd39i98qnfi"},{"post_id":"cjgqbs5xg00006gs3o2wn0xbp","tag_id":"cjbrwpvmk0046iwd3jgv16jo3","_id":"cjgqbs5y400056gs307wjo33v"},{"post_id":"cjgqbs5xg00006gs3o2wn0xbp","tag_id":"cjgqbs5xv00016gs3o8sy742m","_id":"cjgqbs5y400066gs38g759v4i"},{"post_id":"cjgqbs5xg00006gs3o2wn0xbp","tag_id":"cjbrwpvmk0049iwd3gsdmo61n","_id":"cjgqbs5y400076gs3ojmy9e9r"},{"post_id":"cjgqbs5xg00006gs3o2wn0xbp","tag_id":"cjbrwpvf6000eiwd3cq18xpoc","_id":"cjgqbs5y400086gs3nfqd4ix9"},{"post_id":"cjgqbs5xg00006gs3o2wn0xbp","tag_id":"cjgqbs5y100026gs35y0p0hxz","_id":"cjgqbs5y500096gs3w3fbme7h"},{"post_id":"cjgqbs5xg00006gs3o2wn0xbp","tag_id":"cjbrwpvgh000ziwd30n9o8ljl","_id":"cjgqbs5y5000a6gs3qrag8kkf"},{"post_id":"cjgqbs5xg00006gs3o2wn0xbp","tag_id":"cjbrwpvmk004ciwd3um2auy0r","_id":"cjgqbs5y7000b6gs3v3q65pzf"},{"post_id":"cjbrwpvji0029iwd3b7w987c4","tag_id":"cjl7utvls0000lgs32ph7r4uf","_id":"cjl7utvm80001lgs3nsk6ynqk"}],"Tag":[{"name":"Bootstrap","_id":"cjbrwpveq0006iwd3mx0r73ql"},{"name":"Angular2","_id":"cjbrwpvf6000eiwd3cq18xpoc"},{"name":"DI","_id":"cjbrwpvgh000tiwd3v94qv1ae"},{"name":"Tutorial","_id":"cjbrwpvgh000ziwd30n9o8ljl"},{"name":"http","_id":"cjbrwpvi7001kiwd37pepzyjm"},{"name":"Forms","_id":"cjbrwpvin001xiwd3qzmu2hgu"},{"name":"CLI","_id":"cjbrwpvji002aiwd3hht5b7pc"},{"name":"MongoDB","_id":"cjbrwpvke002tiwd3671s8s4y"},{"name":"NodeJS","_id":"cjbrwpvkt002ziwd3mp9aadnw"},{"name":"AngularJS","_id":"cjbrwpvl90039iwd3zsvjskmp"},{"name":"FrontEnd","_id":"cjbrwpvlo003liwd3bl4ttnek"},{"name":"BackEnd","_id":"cjbrwpvm4003uiwd31niwz9d0"},{"name":"TypeScript","_id":"cjbrwpvm40040iwd3ek0w7quz"},{"name":"SPA","_id":"cjbrwpvm40043iwd3lq55emn8"},{"name":"Angular","_id":"cjbrwpvmk0046iwd3jgv16jo3"},{"name":"Angular5","_id":"cjbrwpvmk0049iwd3gsdmo61n"},{"name":"Introducción","_id":"cjbrwpvmk004ciwd3um2auy0r"},{"name":"observables","_id":"cjbrwpvmz004siwd38nko48yj"},{"name":"Angular6","_id":"cjgqbs5xv00016gs3o8sy742m"},{"name":"reactiveForms","_id":"cjgqbs5y100026gs35y0p0hxz"},{"name":"Routing","_id":"cjl7utvls0000lgs32ph7r4uf"}]}}