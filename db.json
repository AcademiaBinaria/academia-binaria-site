{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/ng2-Arbol-de-componentes.jpg","path":"images/ng2-Arbol-de-componentes.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Arbol-de-dependencias.jpg","path":"images/ng2-Arbol-de-dependencias.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Component-DataFlow.jpg","path":"images/ng2-Component-DataFlow.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-DI-component-directive.jpg","path":"images/ng2-DI-component-directive.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-DI-component-service.jpg","path":"images/ng2-DI-component-service.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2-Flujo-de-datos.jpg","path":"images/ng2-Flujo-de-datos.jpg","modified":0,"renderable":0},{"_id":"source/images/ng2Component--1-.jpg","path":"images/ng2Component--1-.jpg","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-5_inject.png","path":"images/tutorial-angular-5_inject.png","modified":0,"renderable":0},{"_id":"source/images/pedidos_ms.PNG","path":"images/pedidos_ms.PNG","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-6_http.png","path":"images/tutorial-angular-6_http.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-7_watch.png","path":"images/tutorial-angular-7_watch.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-8_reactive.png","path":"images/tutorial-angular-8_reactive.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-b_pwa.png","path":"images/tutorial-angular-b_pwa.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/images/tutorial-angular-0_cli.png","path":"images/tutorial-angular-0_cli.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-10_monorepo.png","path":"images/tutorial-angular-10_monorepo.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-2_spa.png","path":"images/tutorial-angular-2_spa.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-4_flow.png","path":"images/tutorial-angular-4_flow.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-3_data.png","path":"images/tutorial-angular-3_data.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-9_material.png","path":"images/tutorial-angular-9_material.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-1_base.png","path":"images/tutorial-angular-1_base.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-a_redux.png","path":"images/tutorial-angular-a_redux.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/angular-1_base.png","path":"css/images/angular-1_base.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-10_monorepo.png","path":"css/images/angular-10_monorepo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-2_spa.png","path":"css/images/angular-2_spa.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-0_cli.png","path":"css/images/angular-0_cli.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-3_data.png","path":"css/images/angular-3_data.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-4_flow.png","path":"css/images/angular-4_flow.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-5_inject.png","path":"css/images/angular-5_inject.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-6_http.png","path":"css/images/angular-6_http.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-8_reactive.png","path":"css/images/angular-8_reactive.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-7_watch.png","path":"css/images/angular-7_watch.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-9_material.png","path":"css/images/angular-9_material.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-a_redux.png","path":"css/images/angular-a_redux.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-b_pwa.png","path":"css/images/angular-b_pwa.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-c_universal.png","path":"css/images/angular-c_universal.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular.jpg","path":"css/images/angular.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/typescript.jpg","path":"css/images/typescript.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"source/images/tutorial-angular-c_universal.png","path":"images/tutorial-angular-c_universal.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular.builders.png","path":"css/images/angular.builders.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular.builders_cuadrado.png","path":"css/images/angular.builders_cuadrado.png","modified":0,"renderable":1},{"_id":"source/images/draw-horse.jpeg","path":"images/draw-horse.jpeg","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-11_test.png","path":"images/tutorial-angular-11_test.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/angular-11_test.png","path":"css/images/angular-11_test.png","modified":0,"renderable":1},{"_id":"source/images/10-projects-dependency.png","path":"images/10-projects-dependency.png","modified":0,"renderable":0},{"_id":"source/images/11-projects-dependency.png","path":"images/11-projects-dependency.png","modified":0,"renderable":0},{"_id":"source/images/12-projects-dependency.png","path":"images/12-projects-dependency.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-13_unidirectional.png","path":"images/tutorial-angular-13_unidirectional.png","modified":0,"renderable":0},{"_id":"source/images/tutorial-angular-12_change.png","path":"images/tutorial-angular-12_change.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/angular-13_unidirectional.png","path":"css/images/angular-13_unidirectional.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/angular-12_change.png","path":"css/images/angular-12_change.png","modified":0,"renderable":1},{"_id":"source/images/12-class-dependency.png","path":"images/12-class-dependency.png","modified":0,"renderable":0},{"_id":"source/images/13-projects-dependency.png","path":"images/13-projects-dependency.png","modified":0,"renderable":0},{"_id":"source/images/13-class-dependency.png","path":"images/13-class-dependency.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/icarus/icarus.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525337765886},{"_id":"source/.DS_Store","hash":"39d94912a63ec708e3af99df0204f2b60fb1105d","modified":1525337765754},{"_id":"source/404.md","hash":"ed869e21a6ac3f026e7f38aab1e2bbf374e19444","modified":1525337765754},{"_id":"themes/icarus/LICENSE","hash":"73ed09aa00f7bda6319fc7d5b722fb40e0c2017e","modified":1525337765871},{"_id":"themes/icarus/_config.yml","hash":"c6a95c347670e1e9aef7057eb67176a59193bca5","modified":1555348732513},{"_id":"themes/icarus/README.md","hash":"c2407cbda23f087be719d6dc3f7207a8e01ffd73","modified":1525337765871},{"_id":"themes/icarus/_config.yml.example","hash":"73af4425442660d8cd491115a13d2a14c52f59cc","modified":1525337765886},{"_id":"themes/icarus/package.json","hash":"c156985c2689895a228188a29ceaae8f7d0bb34f","modified":1525337766058},{"_id":"source/Contacto/index.md","hash":"8d3f82ba692c2e9e02bbb6c7184ebe3772cd210d","modified":1525337765754},{"_id":"source/Cookies/index.md","hash":"910a9c77e0b6b83065878febc522fba888491234","modified":1525337765769},{"_id":"source/Cursos/_old_index.md","hash":"6e08f944b7ed227418d8b2c85d96a364e2bc2667","modified":1553069720885},{"_id":"source/Cursos/angular-basic.md","hash":"e23a7c9f5ff467588b5df9140349050d0c2c402d","modified":1556811803003},{"_id":"source/Cursos/angular-business.md","hash":"c7532e89d2897d3ff9b7bf98cf14570e972ee1e9","modified":1556811803004},{"_id":"source/Cursos/index.md","hash":"98e685650c12475ac333229c6bd560372ffa5002","modified":1556811803006},{"_id":"source/Noticias-Junio-2016/index.md","hash":"1189d0847c6c149b8e4fb81516f4865ca2bf6fed","modified":1525337765769},{"_id":"source/Promociones/index.md","hash":"f632b70d1a3924a0335fdc734366a31c1d8bc1cd","modified":1525337765769},{"_id":"source/_posts/Node-6-0-0-actualizacion-con-nvm.md","hash":"b817fe493340291ff7296a7905b8b72a0f96db7c","modified":1562856756427},{"_id":"source/_posts/Para-que-puedo-usar-NodeJS.md","hash":"996914b2c4071c5b793efbd1882469a5779a2e81","modified":1562856756427},{"_id":"source/_posts/Soluciones-BackEnd-2016.md","hash":"2ce02cb5e4aad50d54c8c55b23698fbdf86ec905","modified":1562856822502},{"_id":"source/_posts/Soluciones-FrontEnd-2016.md","hash":"15accef29481686ca3e967aade9849365285b3b5","modified":1562856795296},{"_id":"source/_posts/ng-10-nx-mono-repositorios-en-Angular.md","hash":"d7fa5b242c87dde059d3d662cfb78bfa0e25a2a0","modified":1567528365928},{"_id":"source/_posts/TypeScript-programa-en-el-front-igual-que-en-el-back.md","hash":"da2060ceb3a10fff69ce61a338bdb86e4f98849d","modified":1562856822502},{"_id":"source/_posts/ng-3-Formularios-tablas-y-modelos-de-datos-en-Angular.md","hash":"47b7e55f3ecd60dd92a27e20d20ea8685288546a","modified":1565003355435},{"_id":"source/_posts/ng-4-Flujo-de-datos-entre-componentes-Angular.md","hash":"40ae743ca984171904a1cb59cfdfb8710634b409","modified":1565005498161},{"_id":"source/_posts/ng-5-Servicios-inyectables-en-Angular.md","hash":"7ce7218199f7898bd95413b1ffa16ede867368ea","modified":1565003786274},{"_id":"source/_posts/ng-6-comunicaciones-http-en-angular.md","hash":"4c2f4788c684e0ae06a27ea75117b9db3f30bed3","modified":1565005064362},{"_id":"source/_posts/ng-7-Vigilancia-y-seguridad-en-Angular.md","hash":"a6a728163e793c879d41950a6f8b0f47df39bf8f","modified":1565017215758},{"_id":"source/_posts/ng-8-Formularios-reactivos-con-Angular.md","hash":"5821f1f96aa201f98139d9e9533da5d185c329c2","modified":1565017273403},{"_id":"source/_posts/ng-9-Material-Design-y-CLI-de-Angular.md","hash":"048d34098d1b6cb73ee1963dacb3392a892450d2","modified":1553098269838},{"_id":"source/_posts/ng-old-adv-9-Deteccion-del-cambio-con-RxJS-y-Angular.md","hash":"6b61417c344d7e0ea3db26fe14ef482427bd0f9d","modified":1564503223398},{"_id":"source/_posts/ng-old-adv-a-El-patron-Redux-con-NgRx-en-Angular.md","hash":"8f9064412d681d220f51b4f36f0cbcfd57b2b17c","modified":1564758145064},{"_id":"source/_posts/ng-old-adv-b-PWA-Entre-la-web-y-las-apps-con-Angular.md","hash":"664460c62f2b8a3f57deb305ebaaf2fa6bb9b8b4","modified":1562856295592},{"_id":"source/_posts/ng-old-adv-c-velocidad-y-seo-con-el-ssr-de-angular-universal.md","hash":"a1738208df2e6f69d18e717eaa7096962b641c57","modified":1562856309912},{"_id":"source/_posts/ng_0-Hola-Angular-CLI.md","hash":"6b68c7a83fe0d606331455d2fd54ce76df3caf76","modified":1553098269805},{"_id":"source/_posts/ng_1-Base-aplicacion-Angular.md","hash":"c220bfb78515f00f5f1c201c48d522639890de67","modified":1565002144805},{"_id":"source/_posts/ng_2-Paginas-y-rutas-Angular-SPA.md","hash":"78df16708a091115b0781295a99adeec122c1f52","modified":1563967000301},{"_id":"source/_posts/npm-de-instalador-a-publicador.md","hash":"a63c7015f4602ad57a5a5603564bad985681b446","modified":1562856756432},{"_id":"source/_posts/temp.txt","hash":"d82d37c2d5422e2521693d7ee4d75b7e8c4959c7","modified":1536925828653},{"_id":"source/images/ng2-Arbol-de-componentes.jpg","hash":"ddf926766408af4ce8c65d3de3d5ff0270a0121b","modified":1525337765801},{"_id":"source/images/ng2-Arbol-de-dependencias.jpg","hash":"e474811bca4569fc209680fcb7f7fc432b60af99","modified":1525337765801},{"_id":"source/images/ng2-Component-DataFlow.jpg","hash":"0032c08ed4f67fc294781b6acb472f50f17ed0f2","modified":1525337765801},{"_id":"source/images/ng2-DI-component-directive.jpg","hash":"ed32320793c7b4c608bcb55d8bdc63ba40dde3fc","modified":1525337765801},{"_id":"source/images/ng2-DI-component-service.jpg","hash":"36febb9d7dbdc6fa87d03d7b5c0ad28adfbcf130","modified":1525337765801},{"_id":"source/images/ng2-Flujo-de-datos.jpg","hash":"e8a401ea27c0d850170a310ee8ce5db233cd3214","modified":1525337765801},{"_id":"source/images/ng2Component--1-.jpg","hash":"4f3a1732800a40410e7b34cb733633866d2dccaf","modified":1525337765801},{"_id":"source/images/tutorial-angular-5_inject.png","hash":"6c973db275b9201fa39c30a7e45a5a16e419808d","modified":1536577315653},{"_id":"source/scaffolds/draft.md","hash":"b14e9fa1e21c75482dd3f05d27705719a2cb47f1","modified":1525337765855},{"_id":"source/scaffolds/page.md","hash":"892cedeb7b62a73e72a3b369daf2bc63dfee47dc","modified":1525337765871},{"_id":"source/scaffolds/post.md","hash":"c569840f0ea232daf0865c3bc8f7ef63b235be62","modified":1525337765871},{"_id":"themes/icarus/languages/en.yml","hash":"2b888a89957e07f440452a12ef338af979abb4c6","modified":1525337765902},{"_id":"themes/icarus/languages/es.yml","hash":"aff832ad099fdeac148c643360df44d0a7f59874","modified":1525337765902},{"_id":"themes/icarus/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1525337765902},{"_id":"themes/icarus/languages/id.yml","hash":"83021037b6dad8dd48f48e3b4a822d07d56fc272","modified":1525337765902},{"_id":"themes/icarus/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1525337765902},{"_id":"themes/icarus/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1525337765902},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1525337765902},{"_id":"themes/icarus/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1525337765902},{"_id":"themes/icarus/languages/tr.yml","hash":"50d94b21e1838db1214f6874f4f81b47c8c521db","modified":1525337765917},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"fdce6e6716768cfac9355c4e88a05260efeeae1c","modified":1525337765917},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"646a7ef3e85481b013ffb2f4d9f9a8900f092d73","modified":1525337765917},{"_id":"themes/icarus/layout/archive.ejs","hash":"6a4adb703df447a754225fa665e679816e432ea2","modified":1525337765917},{"_id":"themes/icarus/layout/categories.ejs","hash":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1525337765917},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1525337765917},{"_id":"themes/icarus/layout/index.ejs","hash":"c329f4598a0af4d8678ba789fdc84fcdf10122de","modified":1525337765996},{"_id":"themes/icarus/layout/layout.ejs","hash":"b37ed400e1416964b45ff7d0fa64417d2172962a","modified":1525337766011},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1525337766011},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1525337766011},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1525337766042},{"_id":"themes/icarus/layout/tags.ejs","hash":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1525337766042},{"_id":"themes/icarus/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1525337766058},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1525337766058},{"_id":"source/images/pedidos_ms.PNG","hash":"87bfe70ad301e5eb261f9289eceb66ba0ad263a9","modified":1547047499788},{"_id":"source/images/tutorial-angular-6_http.png","hash":"ad9a952719b98cd7aa14820172e70a9697b497fd","modified":1536915878153},{"_id":"source/images/tutorial-angular-7_watch.png","hash":"ba0564cd624db724dab51a4b9f4c920e527fa37a","modified":1537177186055},{"_id":"source/images/tutorial-angular-8_reactive.png","hash":"efd001decaa557eb69d70bc7be7931c78362ff00","modified":1537778302204},{"_id":"source/images/tutorial-angular-b_pwa.png","hash":"4fcca7fe1f8e483d1712e04ffd856a8f5bb4eac2","modified":1539168137921},{"_id":"themes/icarus/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1525337765886},{"_id":"themes/icarus/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1525337765886},{"_id":"themes/icarus/_source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1525337765886},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"67b9c24a2973bb208e183ce46201d3c209a1bd4a","modified":1525337765933},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"f744b41f3cc258e2a5a6df6abf6cf9ba9f05c19c","modified":1525337765933},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1525337765933},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1525337765933},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1525337765949},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"6a53104fc01fd4a7a34b46c2828e76d02cacb0dd","modified":1525337765933},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"7269156a9d99b238f6394b4e7e52d0439e774eb3","modified":1525337765949},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"b3dd067a6099f0e088f3374d37b8a726bafe15e5","modified":1525337765949},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"d2d0d8113a5a7d2cddf1d8ce067e07d40874e56c","modified":1525337765949},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"063f997bad70768fa3a7f954830b51893b2d48da","modified":1525337765949},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1525337765949},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1525337765964},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"39970201c684e19eba4d3db6db192e78bb695d66","modified":1525337765964},{"_id":"themes/icarus/layout/common/article.ejs","hash":"5a59e61e22ccaf40977a39a5af3a7c250b95dfff","modified":1563969212202},{"_id":"themes/icarus/layout/common/head.ejs","hash":"0df5bb7c34937154c16d0a7598913d236585db3c","modified":1556811885819},{"_id":"themes/icarus/layout/common/header.ejs","hash":"c75d5c3e956f70b0b82552f1e3f5749f0229ddd7","modified":1525337765964},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"00d07055a0948c9dbd424cf462fb656c75426664","modified":1563968180229},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"4e41b1fdc4ba78b6ea7e8d5e35db10b8e2e51b19","modified":1564645362830},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"7be8d835b664085758f0ea550e3180c05de6f2b7","modified":1525337765996},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1525337765996},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"a2ba07bd70a82a80df71133dc0cea1248a1e3b3e","modified":1525337765996},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1525337766011},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1525337766011},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"2a41940ab86d3f7b095436b56ea304689c2b5121","modified":1525337766011},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1525337766027},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1525337766027},{"_id":"themes/icarus/layout/share/default.ejs","hash":"8532f15f400dbc7c1e89ab26972fc4e404001849","modified":1525337766042},{"_id":"themes/icarus/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1525337766042},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1525337766042},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1525337766027},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1525337766027},{"_id":"themes/icarus/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1525337766027},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1525337766027},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1525337766027},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1525337766042},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1525337766042},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1525337766042},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"7767972b9d0cba456f0e0cff1b96b516936414ea","modified":1525337766042},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1525337766058},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"a4b28996e0e7df2e582387455c02f5c33f691bbd","modified":1525337766058},{"_id":"themes/icarus/source/css/_extend.styl","hash":"c18c58c67f49b8afe92fa8852ff7e203ce5958de","modified":1525337766058},{"_id":"themes/icarus/source/css/_variables.styl","hash":"da60cf824c9e905aca1f002e417a3c61864b6883","modified":1525337766136},{"_id":"themes/icarus/source/css/style.styl","hash":"4dc397810fe188ac58166754b667f1891c1518c0","modified":1525337766152},{"_id":"themes/icarus/source/js/insight.js","hash":"691bc7ce086b55b360bb6ec517b2ad6e53ebadc7","modified":1525337766152},{"_id":"themes/icarus/source/js/main.js","hash":"aaea695ac93046f3024db7634baf6f4400f4920c","modified":1535976312066},{"_id":"source/images/tutorial-angular-0_cli.png","hash":"0f7ab5648cb3b0ee99d0c52bdf8186dfe7b9986a","modified":1535970798589},{"_id":"source/images/tutorial-angular-10_monorepo.png","hash":"7102f1df6829b462c50e20d588d05a2c39c15899","modified":1562858140959},{"_id":"source/images/tutorial-angular-2_spa.png","hash":"01f90e62f3ad81b990b47b96fc5fdfb3354e1433","modified":1535970976294},{"_id":"source/images/tutorial-angular-4_flow.png","hash":"4484fdf085e6361a070d09ef059f2b0570ab83f6","modified":1536140866612},{"_id":"source/images/tutorial-angular-3_data.png","hash":"7e963d68e8c6015ebd95d560203ae63165232ccf","modified":1535971203834},{"_id":"source/images/tutorial-angular-9_material.png","hash":"04134304478eab6bf7335950deec1d76ca404f81","modified":1552496734141},{"_id":"source/images/tutorial-angular-1_base.png","hash":"fd0fb70cc95d61f24978b0d4a13da675639aaa4b","modified":1535970910201},{"_id":"source/images/tutorial-angular-a_redux.png","hash":"32fe748e5c2f5ed47ecdc15240dc6fcf93805a2e","modified":1538664479152},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"96f999573eb908f7129a1c09e486d46d630c0a7d","modified":1525337765980},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"6ca8a8c45794a4e10aaac0da85db71b43e5a72ce","modified":1535976257417},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1525337765964},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1525337765980},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"1800d1fa5cc689dcbdc1f58296521e9eb2b53e21","modified":1564649361028},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1525337765980},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"4dd216a147dd65ddc37521fe8a1a01aa929aeea5","modified":1525337766121},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1525337766136},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"acd8966e8f986baca6659ad7418dce13860898a8","modified":1525337766136},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"d0109f33d279a3456317c342d84633ffe08a8b10","modified":1525337766136},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1525337766136},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"8a84868a13c7edb733347655b33dc169c682e8b8","modified":1525337766136},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"7eed2cec34bd182c390bf042b56d41f7f2793a2c","modified":1525337766136},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"fb211c3c747565e6fa2304f436b42d14ef84d71a","modified":1525337766136},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"ba1ea8a87ca7c667f0d3cc40033b52bdf168fbdd","modified":1525337766136},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1525337766058},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1525337766058},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1525337766074},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1525337766089},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1525337766105},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1525337766121},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1525337766121},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1525337766136},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1525337766136},{"_id":"themes/icarus/source/css/images/angular-1_base.png","hash":"ccf5bc5a6c3c6cc995d240bd11334d2a773612fd","modified":1536577741031},{"_id":"themes/icarus/source/css/images/angular-10_monorepo.png","hash":"41d8ef7a7f07b19cdd6446baa42d42ca034aaaf5","modified":1562858250533},{"_id":"themes/icarus/source/css/images/angular-2_spa.png","hash":"2373e59391c1fff21dbe71f5086cbab63c563efe","modified":1536577682762},{"_id":"themes/icarus/source/css/images/angular-0_cli.png","hash":"3426c1558f871f64b531a13dc85416f38446967d","modified":1536577764554},{"_id":"themes/icarus/source/css/images/angular-3_data.png","hash":"14e44451e3bbbd4f75a211616787a9e2a2c0c87c","modified":1536577631237},{"_id":"themes/icarus/source/css/images/angular-4_flow.png","hash":"44814f98c95e46a866b51cce8589388f72d5a2ee","modified":1536577582120},{"_id":"themes/icarus/source/css/images/angular-5_inject.png","hash":"aa4a32e4439fba549391fc3eb9fdd067fbea0111","modified":1536577521540},{"_id":"themes/icarus/source/css/images/angular-6_http.png","hash":"02dd0b7f55fb6c41eb6f9f9f64d873db2261a6be","modified":1536915887721},{"_id":"themes/icarus/source/css/images/angular-8_reactive.png","hash":"6de03afae8a8354e4bc0b0427621dbaccb26f403","modified":1537778311425},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1525337766089},{"_id":"themes/icarus/source/css/images/angular-7_watch.png","hash":"bdd11b0a68a362b35a2c935895d776a579e0f288","modified":1537177222337},{"_id":"themes/icarus/source/css/images/angular-9_change.png","hash":"9e43153fe5b4331d5c2b3ad258e9cbf974f9db6c","modified":1538040521973},{"_id":"themes/icarus/source/css/images/angular-9_material.png","hash":"f45b79fbb5c3cc310c0df994efed934a387a3874","modified":1552496734143},{"_id":"themes/icarus/source/css/images/angular-a_redux.png","hash":"7297d66020b7dc7ef36c56a513822e28d1b77b78","modified":1538664541539},{"_id":"themes/icarus/source/css/images/angular-b_pwa.png","hash":"b60677505a5f7274ba780ebc777c615ab908ef08","modified":1539168299460},{"_id":"themes/icarus/source/css/images/angular-c_universal.png","hash":"6bed177f608d431184b204afd5853905c8a9efa1","modified":1540549887891},{"_id":"themes/icarus/source/css/images/angular.jpg","hash":"6bf224d00bb2f792e52fbe936ac5abf2aa1332c0","modified":1525337766152},{"_id":"themes/icarus/source/css/images/avatar.jpg","hash":"6d461314157540948b0b35d63fe9dda8c2fa4665","modified":1525337766152},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1525337766152},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1525337766183},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1525337766183},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1525337766246},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1525337766246},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"fc90dbfc227563029ece7cff13585083b62935bc","modified":1525337765980},{"_id":"source/images/tutorial-angular-9_change.png","hash":"58e3283cf4a2192301ff1274ade581e7fbfb6549","modified":1538040495994},{"_id":"themes/icarus/source/css/images/logo.png","hash":"3ea04c5059266f2614f2fe37ebd81b6e8acb8a3c","modified":1525337766152},{"_id":"themes/icarus/source/css/images/favicon.ico","hash":"eaf485c235ca3d83faf3d38064a6e0f1df3d14fa","modified":1534174777336},{"_id":"themes/icarus/source/css/images/typescript.jpg","hash":"f49a461df54b6d5eb9c14d921d7ee8689b10ec22","modified":1525337766152},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1525337766167},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1525337766183},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1525337766183},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1525337766183},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1525337766183},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1525337766183},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1525337766183},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1525337766199},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1525337766199},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1525337766214},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1525337766199},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1525337766214},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1525337766214},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1525337766230},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1525337766246},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1525337766246},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1525337766246},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1525337766246},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1525337766167},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1525337766167},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1525337766183},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1525337766183},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1525337766183},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1525337766183},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1525337766167},{"_id":"source/images/tutorial-angular-c_universal.png","hash":"7032b7bcf7b37a4a9f1faf62d72e93eb8573cb0b","modified":1540549862328},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1525337766167},{"_id":"public/images/ng2-Arbol-de-componentes.jpg","hash":"981461824a8b8c4be309e0f45b2f6e77b0ce3975","modified":1563967303271},{"_id":"public/images/ng2-Arbol-de-dependencias.jpg","hash":"4aa93110fbb2a84d15436432b103b369368411b9","modified":1563967303271},{"_id":"public/images/ng2-Component-DataFlow.jpg","hash":"b9a22cc89d665491b54e2d0e7a94bd6b19a11aa2","modified":1563967303271},{"_id":"public/images/ng2-DI-component-directive.jpg","hash":"55f9382deef44c734bf892571df3127f88871939","modified":1563967303272},{"_id":"public/images/ng2-DI-component-service.jpg","hash":"3e387e0e2b3b2bd40004b569f83cd2b74f3363e4","modified":1563967303272},{"_id":"public/images/ng2-Flujo-de-datos.jpg","hash":"b791adc0f1322b16145d23e2479fc0a1b95f5846","modified":1563967303272},{"_id":"public/images/ng2Component--1-.jpg","hash":"8e13a6985d532c4413ab8253d8e37edc3b2fcc7f","modified":1563967303272},{"_id":"public/images/tutorial-angular-5_inject.png","hash":"3dad3f82be4c3b7a47ff1bc40ae02590fb72bb56","modified":1563967303272},{"_id":"public/images/pedidos_ms.PNG","hash":"0f029e34d708727a07c5cf29b76f739bcba45c76","modified":1563967303272},{"_id":"public/images/tutorial-angular-6_http.png","hash":"f9c72bf0deff3712524b6a0eff49fd60019f07e6","modified":1563967303272},{"_id":"public/images/tutorial-angular-7_watch.png","hash":"91d34a0dd059c403189fa3632a243e97d1ca06c6","modified":1563967303272},{"_id":"public/images/tutorial-angular-8_reactive.png","hash":"621a29537d48cda980f8ede1270d0d2e902b341c","modified":1563967303272},{"_id":"public/images/tutorial-angular-b_pwa.png","hash":"146490314f83d77ec8953b9ce7fc70ab99545554","modified":1563967303273},{"_id":"public/images/tutorial-angular-0_cli.png","hash":"0b15754c7bd374a893b2ae1f04e629419b77fcd2","modified":1563967303273},{"_id":"public/images/tutorial-angular-4_flow.png","hash":"4a1a58487affa6e836dfecde1e0d21553aeed035","modified":1563967303273},{"_id":"public/images/tutorial-angular-2_spa.png","hash":"c9ea2498d6334762fca7f491935fa45ae1e12675","modified":1563967303273},{"_id":"public/images/tutorial-angular-3_data.png","hash":"865bafd69f3fad2cb86c5ef2da66007a18360606","modified":1563967303273},{"_id":"public/images/tutorial-angular-10_monorepo.png","hash":"24ba64b432657f310c8aaa805515b057737f3fb1","modified":1563967303274},{"_id":"public/images/tutorial-angular-1_base.png","hash":"733a3755501bd93af49e963b65002e2f05790ea6","modified":1563967303274},{"_id":"public/css/images/angular-1_base.png","hash":"fb71a1fca4f50b1e7fe7af0deac4bd09bc3a87d3","modified":1563967303274},{"_id":"public/images/tutorial-angular-a_redux.png","hash":"38dd7f5377ffe9c256063cd9fb7a9776396c0fba","modified":1563967303274},{"_id":"public/css/images/angular-10_monorepo.png","hash":"752b3e8f7a5f6c440b1d83533abe523bfeb055df","modified":1563967303275},{"_id":"public/images/tutorial-angular-9_material.png","hash":"cbb67315f980af2771cde4deaa17341f9d327ddf","modified":1563967303275},{"_id":"public/css/images/angular-2_spa.png","hash":"339ff8549c88a8c26a79d7b0b6d92947792d3ccf","modified":1563967303275},{"_id":"public/css/images/angular-4_flow.png","hash":"61c81d8980240105c15a085d6b9bded74fdd4ad3","modified":1563967303275},{"_id":"public/css/images/angular-0_cli.png","hash":"f76c60732d5c1949d28499c7790aff8c5c0a4838","modified":1563967303275},{"_id":"public/css/images/angular-3_data.png","hash":"66d3af6a40a7a0d1b57aec8275223fa84dcf5c79","modified":1563967303275},{"_id":"public/css/images/angular-5_inject.png","hash":"e5214d29c3123b4b993a7f0b5012aa09979645ef","modified":1563967303275},{"_id":"public/css/images/angular-6_http.png","hash":"5e41adeae5cb206e5a13ee7e1578528fe65e3ffb","modified":1563967303275},{"_id":"public/css/images/angular-8_reactive.png","hash":"905818fc5d768340e64f2cc45e72c64233736569","modified":1563967303275},{"_id":"public/css/images/angular-9_change.png","hash":"d0fe0d6091b1a3e7ae5916c87d7ea72f5c67f21d","modified":1563967303276},{"_id":"public/css/images/angular-7_watch.png","hash":"a554b06b830a246aa710878258e970111473257e","modified":1563967303276},{"_id":"public/css/images/angular-9_material.png","hash":"d0ae8fe3865ee3d6edc924ecd9c17284596f7852","modified":1563967303276},{"_id":"public/css/images/angular-a_redux.png","hash":"dceaaf08d45407c55d9cb60e3caa543135e6cc4d","modified":1563967303276},{"_id":"public/css/images/angular-b_pwa.png","hash":"808f0733c8723096a434ad46df77d1048aa68c08","modified":1563967303276},{"_id":"public/css/images/angular-c_universal.png","hash":"7fc544086695f4b7e80c5821323e06f2b10082bc","modified":1563967303276},{"_id":"public/css/images/thumb-default-small.png","hash":"e63874a08229a3031c407915ca448ca9d3ab234f","modified":1563967303276},{"_id":"public/css/images/avatar.jpg","hash":"f5cce34d891789ed4982cd8ebc64ad8d4f402e38","modified":1563967303276},{"_id":"public/images/tutorial-angular-9_change.png","hash":"f2959666ba728629067359c6707747e6ea2f871e","modified":1563967303276},{"_id":"public/css/images/angular.jpg","hash":"6e341e706f0b6f27dc9ba93efe56621409e4304f","modified":1563967303276},{"_id":"public/css/images/logo.png","hash":"ac0fa5cf38f9211089dce5486a3ae7d666dc5db1","modified":1563967303277},{"_id":"public/css/images/typescript.jpg","hash":"eb636fe8bea5b21d8f92b430c6492166ff21e30f","modified":1563967303277},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"0d20ced713d03f14fb4966e984c6ab4b12694591","modified":1563967303277},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"66532a70bf3f0b148846ea98ae20f0577a7cf99a","modified":1563967303277},{"_id":"public/images/tutorial-angular-c_universal.png","hash":"339c09b3aaa00df8aad48c4298187d18f62d1bec","modified":1563967303277},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"6aea5705bf22ea3815773da476d3f6e8fadb9c26","modified":1563967303277},{"_id":"public/content.json","hash":"749a0cd7b82607bed24ddd91358c35cec75693bb","modified":1567697815461},{"_id":"public/sitemap.xml","hash":"64d2546af700b8831b1d1a1a76d74824b9d04881","modified":1567697815461},{"_id":"public/archives/page/3/index.html","hash":"b074ad6865dafffe6742c38f1c7b9c4fda3c5ba6","modified":1567686993213},{"_id":"public/archives/2015/index.html","hash":"122d9ae387a8c530b1ffff261eab57e4f45ea91e","modified":1567686993206},{"_id":"public/archives/2015/08/index.html","hash":"04131f299034fabeef6dd4b33bbe5de7a98dfa3d","modified":1567686993207},{"_id":"public/archives/2016/01/index.html","hash":"3dba3814fa07609743283f9830b954dd08db779d","modified":1567686993206},{"_id":"public/archives/2016/03/index.html","hash":"eb0699c2cd673b660b457be036bed1fb5cfe2627","modified":1567686993207},{"_id":"public/archives/2016/04/index.html","hash":"b66dfe1fad673fcbcf241df0e4747cefe356b79e","modified":1567686993207},{"_id":"public/archives/2016/05/index.html","hash":"eb9e62b0ed0dbc17d9557ebc74212cceab5b1cba","modified":1567686993207},{"_id":"public/archives/2017/index.html","hash":"7eb0221e86b157d3679b4969b8d1419376edea47","modified":1567686993207},{"_id":"public/archives/2017/03/index.html","hash":"e10baaebc6b76d2cb48c581aac62406dc56414df","modified":1567686993207},{"_id":"public/archives/2018/09/index.html","hash":"0a508117e8b8a31a847cc759b16a4741bc1ed5fb","modified":1564649462432},{"_id":"public/archives/2019/page/2/index.html","hash":"2065899a83e9ce29f3b1c193a0faf325109bfb90","modified":1567686993214},{"_id":"public/archives/2019/07/index.html","hash":"da4689294c4e0ee5203928c3632f11130be72be1","modified":1567528007105},{"_id":"public/tag/Introduccion/page/2/index.html","hash":"20fa454d4aaf52dd381edee2b1d0b0c830668e96","modified":1567686993217},{"_id":"public/tag/Nx/index.html","hash":"2fc2feb5a3137f09782c670000b9918b8420b19a","modified":1567686993217},{"_id":"public/tag/FrontEnd/index.html","hash":"75ae5fbe1ed625393556590e16c146c470b11736","modified":1567686993207},{"_id":"public/tag/AngularJS/index.html","hash":"2af8d72fd78f5cb8637cbd49823b81e13dd3bf9b","modified":1567686993207},{"_id":"public/tag/BackEnd/index.html","hash":"8b04251deb62e8f69b6100f2e058b84062c7956d","modified":1567686993208},{"_id":"public/tag/MongoDB/index.html","hash":"4755925346d63b505cfd1fe76049b53cd86874c4","modified":1567686993208},{"_id":"public/tag/Forms/index.html","hash":"97fec61080f5711b64da45f07460546c308d0486","modified":1567686993208},{"_id":"public/404.html","hash":"ab0f03226ff20c17935346dc1ad0206dfd00c3f8","modified":1567686993208},{"_id":"public/cursos/angular-business.html","hash":"83f4d72253069784adea2cbc3bf8b3d8c64b717f","modified":1567686993208},{"_id":"public/contacto.html","hash":"868c9437c47bd13fb6e1c8e0a4d51ec0fda65623","modified":1567686993208},{"_id":"public/cursos.html","hash":"389c70e4f71730b0a7665ea911864455f1e8cc12","modified":1567686993208},{"_id":"public/noticias-junio-16.html","hash":"53528126ccc8db798e9f48407ffa2423820ffef0","modified":1567686993208},{"_id":"public/cookies.html","hash":"e95a0ea8ba55034a29f8535d10c4c7aeb1c6332d","modified":1567686993208},{"_id":"public/cursos/angular-basic.html","hash":"1ab773394f263a17b0eff79dca6e9095dad982d3","modified":1567686993208},{"_id":"public/promociones.html","hash":"bfe44dac13118496c7f23e75c71d4958618defb9","modified":1567686993209},{"_id":"public/scaffolds/draft.html","hash":"ea38b154bace55d779e681cb9a109df26422e8db","modified":1567686993209},{"_id":"public/scaffolds/page.html","hash":"85617ff909e746c6a46114b9748f6b9d45031de9","modified":1567686993209},{"_id":"public/scaffolds/post.html","hash":"9c3bec51da2b54f4ea367345b7d7d4f73683609d","modified":1567686993209},{"_id":"public/nx-mono-repositorios-en-Angular/index.html","hash":"85a37d60607bbf9dee3db2c46c8283d304af7e1e","modified":1567686993209},{"_id":"public/Material-Design-y-CLI-de-Angular/index.html","hash":"fae4c695e1f91c6c19a34d1024cb7ae43a00c3c8","modified":1567686993210},{"_id":"public/formularios-reactivos-con-Angular/index.html","hash":"aa611f2b89f690604d7decd5d36486036467d691","modified":1567686993209},{"_id":"public/vigilancia-y-seguridad-en-Angular/index.html","hash":"3245ae3622df7d19877c0f3d45df9a18c63e2022","modified":1567686993210},{"_id":"public/comunicaciones-http-en-Angular/index.html","hash":"9b7744ddf03be659149b68bbd2b044049b5fa46b","modified":1567686993210},{"_id":"public/servicios-inyectables-en-Angular/index.html","hash":"277e38c74f161da14488cfdafe0fb3a7abb17a60","modified":1567686993210},{"_id":"public/flujo-de-datos-entre-componentes-angular/index.html","hash":"8ff917a5b992f8af0159d38db8ebe30b1a890926","modified":1567686993210},{"_id":"public/formularios-tablas-y-modelos-de-datos-en-angular/index.html","hash":"d218275a1796da4d083068df2cdf86377355bbe0","modified":1567686993210},{"_id":"public/paginas-y-rutas-angular-spa/index.html","hash":"c94a83fb15b9796cd3be07bdbb52288d9f06fdcf","modified":1567686993210},{"_id":"public/base-aplicacion-angular/index.html","hash":"cbbf5f101a75a080c46218db49514097e8a21020","modified":1567686993211},{"_id":"public/hola-angular-cli/index.html","hash":"8689265b68a930ede92fd85f00673841bc757c6d","modified":1567686993210},{"_id":"public/velocidad-y-seo-con-el-ssr-de-angular-universal/index.html","hash":"94a583b4a489a4aa1f3e8c7e138e1f64164526f1","modified":1567686993211},{"_id":"public/pwa-entre-la-web-y-las-apps-con-angular/index.html","hash":"c5caa3aabd9f07a4a03ff8907b08c6ae2878c139","modified":1567686993210},{"_id":"public/el-patron-redux-con-ngrx-en-angular/index.html","hash":"1c3146a85727f11d7e01e840609b5e0f5c11b42d","modified":1567686993211},{"_id":"public/deteccion-del-cambio-en-Angular/index.html","hash":"b71216cb0f7e0bea042df9a142188cda436cc597","modified":1567686993209},{"_id":"public/typescript-programa-en-el-front-igual-que-en-el-back/index.html","hash":"8c2ba62ef41c99bb857b78899ea358641cbe8dd9","modified":1567686993211},{"_id":"public/node-6-0-0-actualizacion-con-nvm/index.html","hash":"c16e51c2ba70b8f2b0f4876040da930874190770","modified":1567686993212},{"_id":"public/npm-de-instalador-a-publicador/index.html","hash":"cec24cbb1b645e0db80ba4dd338a8d1877c6064f","modified":1567686993212},{"_id":"public/soluciones-backend-2016/index.html","hash":"baee41212b2e8442cbf9de04ea0b8344498889a0","modified":1567686993212},{"_id":"public/soluciones-frontend-2016/index.html","hash":"e2eb4b3071a4a9ca3259033695975aa26965a8f8","modified":1567686993212},{"_id":"public/para-que-puedo-usar-nodejs/index.html","hash":"07e8795824351f68cd192c0660272f79bcefc2ff","modified":1567686993212},{"_id":"public/categories/Tutorial/index.html","hash":"040b1badf21f4a148672078c870e152576ac5c38","modified":1567686993215},{"_id":"public/categories/Tutorial/page/2/index.html","hash":"1c6db52427e6bb1f70f7b4ed6611fa4b21121121","modified":1567686993216},{"_id":"public/categories/Tutorial/Angular/index.html","hash":"352a036a5abb5664dee8b571e542c431fff72faf","modified":1567686993216},{"_id":"public/categories/Tutorial/Angular/page/2/index.html","hash":"2fe0472438a063e18a618b48bfdb2a70ea07567c","modified":1567686993216},{"_id":"public/archives/index.html","hash":"2facbb2f17048a31440de8aed0ef22de46940771","modified":1567686993213},{"_id":"public/archives/page/2/index.html","hash":"a1dc03c80f82239ce1e539c2bfc0c2d790d5f810","modified":1567686993213},{"_id":"public/archives/2016/index.html","hash":"dcab2751efa343f48963324ec3ce8c2411e17e49","modified":1567686993213},{"_id":"public/archives/2018/index.html","hash":"fb1e302ae7b2d75ebbb6a8235b97e99b29f04b59","modified":1567686993213},{"_id":"public/archives/2018/10/index.html","hash":"4e36a9690b7aeee2945e26a3ffa6dc72e67465ed","modified":1567686993214},{"_id":"public/archives/2019/index.html","hash":"f1f4d3f608ba5ecd7245d41583c05c6ee6ad1582","modified":1567686993213},{"_id":"public/archives/2019/01/index.html","hash":"fa329ba857878fb7ab74b6e2ac15e396139f6086","modified":1567686993214},{"_id":"public/archives/2019/02/index.html","hash":"a49f6d7ca97c384cd1cd56769e7b323b3a12c57d","modified":1567686993214},{"_id":"public/archives/2019/03/index.html","hash":"a52d3623d8c26165a671e6c221a966468a2a2bce","modified":1567686993214},{"_id":"public/index.html","hash":"7b2751fe7e2e5d3baf64fdd84060003879326522","modified":1567686993216},{"_id":"public/page/2/index.html","hash":"f47e084a8c5549d2a84a58054f5427de064f9d53","modified":1567686993216},{"_id":"public/page/3/index.html","hash":"df24fd5ad70faf42bdce220f4eab3463b02a0527","modified":1567686993216},{"_id":"public/page/4/index.html","hash":"6f78388261bf2896b81781a6096745a1e7f86e8d","modified":1567686993216},{"_id":"public/page/5/index.html","hash":"5ddbf656fb7f7b4d2875c4e8f6bde49f79627284","modified":1567686993217},{"_id":"public/tag/NodeJS/index.html","hash":"c5150087a4e8eab8d31dbb78fc09190a5f74d429","modified":1567686993217},{"_id":"public/tag/Introduccion/index.html","hash":"58c9baf23c4d48f5748732ae4e39aa6d00756aa6","modified":1567686993217},{"_id":"public/tag/Angular/index.html","hash":"e17ae3040a62e1fdcf0361b76fa60c1491a3ebf7","modified":1567686993217},{"_id":"public/tag/Angular/page/2/index.html","hash":"bcc986efafc488827212e870c2ccb924a040949c","modified":1567686993217},{"_id":"public/tag/Angular8/index.html","hash":"27f499800db73b8d9fb380cb06219c109133ac50","modified":1567686993217},{"_id":"public/tag/Tutorial/index.html","hash":"7a1a793caf5af23d2008f2cc9e950f469de7d1b7","modified":1567686993218},{"_id":"public/tag/Tutorial/page/2/index.html","hash":"f096e67c3307c32ef61c15495ffb72eb7e75b108","modified":1567686993218},{"_id":"public/tag/Avanzado/index.html","hash":"3efc34df5ac9eb616f0b46036c3ce8a73c58d150","modified":1567686993218},{"_id":"public/tag/Opinion/index.html","hash":"879da8dd6d4e158f418bf5af739f7acaf5fe8f6d","modified":1567686993218},{"_id":"public/tag/Angular7/index.html","hash":"28112ff482f1e2a325822c5c2303bb945d7ffd92","modified":1567686993218},{"_id":"public/tag/Angular7/page/2/index.html","hash":"0985c7bdb7064fbc2160b5b9215444615fd8bc2a","modified":1564998192035},{"_id":"public/tag/Angular2/index.html","hash":"2a454cf199bffa384e0a465ab4bc625dac31cfee","modified":1567686993218},{"_id":"public/tag/Angular2/page/2/index.html","hash":"67e7cba765ebd01f561c91142e84a53de9d15ed9","modified":1567686993229},{"_id":"public/tag/TypeScript/index.html","hash":"9386e9bf3ccccfbefde4281a7f4d8955d8029544","modified":1567686993226},{"_id":"public/tag/Components/index.html","hash":"3f0729e3ed87d5f34d775e93a10a0a16516cba6e","modified":1567686993226},{"_id":"public/tag/Servicios/index.html","hash":"6ad7e85ae23abc7aefbce43445f34d39d1a7f521","modified":1567686993226},{"_id":"public/tag/DI/index.html","hash":"24d9296305a552d1b048c2992364c86240c1149b","modified":1567686993226},{"_id":"public/tag/RxJS/index.html","hash":"816d03e46a80d5c72435925afb1f6cc9a882dae9","modified":1567686993227},{"_id":"public/tag/reactiveForms/index.html","hash":"81ec268f4dec00d16ae87df6412f8c84b51b2e45","modified":1567686993227},{"_id":"public/tag/material/index.html","hash":"6053733d9e3f434f93ec63e31b54c8c00f5e9704","modified":1567686993227},{"_id":"public/tag/ChangeDetection/index.html","hash":"a83a29b214efbf56977eff1c899d93e05088862d","modified":1567686993227},{"_id":"public/tag/Redux/index.html","hash":"1c0ee77ec08d72b8e333a7572983de46cca07f1d","modified":1567686993227},{"_id":"public/tag/NgRx/index.html","hash":"fe974c8669dc4ad1de73c18032739ced2bdd1c0c","modified":1567686993227},{"_id":"public/tag/PWA/index.html","hash":"df05c8af4f39139f61f8991b8dce1e26c8c0d39c","modified":1567686993228},{"_id":"public/tag/SPA/index.html","hash":"5191a27ac178681c7b9c3991090bb6e7d0ffef3e","modified":1567686993228},{"_id":"public/tag/Routing/index.html","hash":"1b12108b5b8c68ef7a551685663997433a84f3b6","modified":1567686993228},{"_id":"public/tag/Universal/index.html","hash":"c0e95fcfac607c89f152e93594b089df6084bc12","modified":1567686993228},{"_id":"public/tag/SSR/index.html","hash":"d5372d3d88f74d46d0d4ba89b50990ad48e4f353","modified":1567686993228},{"_id":"public/tag/http/index.html","hash":"3b0dfa54d2563be1631b0b3b1e2860fc813e0746","modified":1567686993229},{"_id":"public/tag/Observables/index.html","hash":"d3b8035a196b60236439b9dcc4d203d48eb31fc2","modified":1567686993229},{"_id":"public/tag/Angular6/index.html","hash":"f4f5067e4f3ff68a5fd3b8dacc76beba633ca8e7","modified":1567686993229},{"_id":"public/tag/CLI/index.html","hash":"333d3ea2315a8ab5d3f536c856d038f8a28c1eda","modified":1567686993229},{"_id":"themes/icarus/source/css/images/angular.builders.png","hash":"47c6b8ea65bca8f9db8ae63d9129d6c179f7c2ea","modified":1563870245113},{"_id":"themes/icarus/source/css/images/angular.builders_cuadrado.png","hash":"c6ff75091e1be21bd66201d8140f51efb6aca175","modified":1563870246819},{"_id":"public/css/images/angular.builders.png","hash":"1a17b0b730a318d10c28cbd937fd31e2747c158e","modified":1563968585224},{"_id":"public/css/images/angular.builders_cuadrado.png","hash":"02f110bc3f32c3e5e193334accecd0a8f0a361a3","modified":1563968585225},{"_id":"public/post-sitemap.xml","hash":"dbc2a51effce2ecbe17676cdf49b948b73064b0c","modified":1567686991872},{"_id":"public/page-sitemap.xml","hash":"7288e240566ed5b97d472861b5d717a054d1f90e","modified":1567686991872},{"_id":"public/category-sitemap.xml","hash":"105b10ec0bfc4c7a9480c1a5e66d34d41e28cfb8","modified":1567686991872},{"_id":"public/tag-sitemap.xml","hash":"919131e71df6d147b1fad69ca9cfab9a88476dbc","modified":1567686991872},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1567686991872},{"_id":"source/_posts/ng-11-Flujo reactivo unidireccional con Angular y RxJs.md","hash":"1a230468e174c178628be6655de7f49e3ff699d2","modified":1564564800516},{"_id":"source/images/tutorial-angular-11_unidirectional.png","hash":"7105fb8b04de1a92a2a2681506ee55fd6cecedb3","modified":1564489361301},{"_id":"themes/icarus/source/css/images/angular-11_unidirectional.png","hash":"dee49c49cbfb2808e0271c629d4b5248a6842b37","modified":1564488963967},{"_id":"source/_posts/ng-12-Flujo reactivo unidireccional con Angular y RxJs.md","hash":"e546a37aadfea42623f7aabcb6e7f09b7cbb0818","modified":1564641623227},{"_id":"source/images/draw-horse.jpeg","hash":"9b7c94d3a9417ee722955dd3bc8462de1ecb62d0","modified":1564568463447},{"_id":"source/_posts/ng-11-test-unitario-con-jest-y-e2e-con-cypress-en-Angular.md","hash":"ec5eb435a5d9cd2dfcbd267cf60d805feb83d60d","modified":1564641928596},{"_id":"source/images/tutorial-angular-11_test.png","hash":"29b4f8736ddaf8c7bc41fc1a7840d086025f943c","modified":1564642536332},{"_id":"source/images/tutorial-angular-12_unidirectional.png","hash":"7105fb8b04de1a92a2a2681506ee55fd6cecedb3","modified":1564641632752},{"_id":"themes/icarus/source/css/images/angular-11_test.png","hash":"e55cdd34f94c6ba7a09c1a3a775da197cdad54fe","modified":1564642558473},{"_id":"themes/icarus/source/css/images/angular-12_unidirectional.png","hash":"dee49c49cbfb2808e0271c629d4b5248a6842b37","modified":1564641649956},{"_id":"source/_posts/_ng-12-Flujo reactivo unidireccional con Angular y RxJs.md","hash":"59ffcbae278b4ee469dfc54d9966ea1005768fd9","modified":1564648273443},{"_id":"source/_posts/ng-11-tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular.md","hash":"b0feeddefd7ecbb8bf1f6d8997493c8c8c8dccda","modified":1567697699393},{"_id":"source/images/10-projects-dependency.png","hash":"05aa9816c520bcbee12b267c5635e61ee990ef9f","modified":1564647859652},{"_id":"source/images/11-projects-dependency.png","hash":"328588f3e93749fdceb24bc898bd23f63391b584","modified":1564647978345},{"_id":"public/images/tutorial-angular-11_test.png","hash":"6d323e90c9a0589fec247b1d6f3e17744c9b88f5","modified":1564649462445},{"_id":"public/images/tutorial-angular-12_unidirectional.png","hash":"74a8d8fb7909a2c194bbce8eff71183679431b02","modified":1564649462446},{"_id":"public/css/images/angular-11_test.png","hash":"4bb3634f258a2a641b953045459b63faa039c561","modified":1564649462446},{"_id":"public/css/images/angular-12_unidirectional.png","hash":"419213055472b07097d63e2b746d401f70984233","modified":1564649462446},{"_id":"public/images/10-projects-dependency.png","hash":"50e06392969e81cb1d0ccee2bb081468abfbf37d","modified":1564649462446},{"_id":"public/images/11-projects-dependency.png","hash":"911ad572b0f88b91e7a9c8ea5154c6acd573fe8a","modified":1564649462446},{"_id":"public/tag/Test/index.html","hash":"c5c8837afb66ca1d8ac79341a59020a746d84a99","modified":1567686993228},{"_id":"public/tag/Jest/index.html","hash":"40737546af465dcf7d73f3cf577f094b602372fe","modified":1567686993228},{"_id":"public/tag/Cypress/index.html","hash":"1a2c6db4f6078a920b9d372b21bf5b3c4f8250a1","modified":1567686993228},{"_id":"public/tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular/index.html","hash":"0ee9a82c23b86408416fc3e454c292d8b6b4d7b3","modified":1567697815464},{"_id":"public/images/draw-horse.jpeg","hash":"9b7c94d3a9417ee722955dd3bc8462de1ecb62d0","modified":1564649462463},{"_id":"source/_posts/_ng-13-Flujo reactivo unidireccional con Angular y RxJs.md","hash":"e01c28bd1561c96fe22fbd1ebbdfee74da8c52c2","modified":1564673740308},{"_id":"source/images/12-projects-dependency.png","hash":"4456a09bade67f87e690a380f7acecc3f59cbe75","modified":1564673758778},{"_id":"source/_posts/ng-12-Deteccion-del-cambio-en-Angular.md","hash":"b440bb87176beea6a739cb36f57a18eba2ae0b4b","modified":1564760625289},{"_id":"source/images/tutorial-angular-13_unidirectional.png","hash":"7105fb8b04de1a92a2a2681506ee55fd6cecedb3","modified":1564671093706},{"_id":"themes/icarus/source/css/images/angular-13_unidirectional.png","hash":"dee49c49cbfb2808e0271c629d4b5248a6842b37","modified":1564671122667},{"_id":"source/images/tutorial-angular-12_change.png","hash":"8fac09f82d3fb8a9afaddd547653040605ce145e","modified":1564675436847},{"_id":"themes/icarus/source/css/images/angular-12_change.png","hash":"a074af521514c1ad4af33662f05e66e8183549c2","modified":1564674373935},{"_id":"source/images/12-class-dependency.png","hash":"41e598b1f619cd59bf931ae0988c9ee6fe66ba2d","modified":1564675148091},{"_id":"public/images/tutorial-angular-13_unidirectional.png","hash":"74a8d8fb7909a2c194bbce8eff71183679431b02","modified":1564675593814},{"_id":"public/images/tutorial-angular-12_change.png","hash":"0c5c5058371d6bd43058b6d9cd2e6457e1a5d406","modified":1564675593814},{"_id":"public/css/images/angular-13_unidirectional.png","hash":"419213055472b07097d63e2b746d401f70984233","modified":1564675593814},{"_id":"public/css/images/angular-12_change.png","hash":"3759cbe2cc08ce9e6de52e6804ff70be47e165ad","modified":1564675593814},{"_id":"public/images/12-class-dependency.png","hash":"090b9f9ea2e16dcd84893419aef76a49ffa5ca77","modified":1564675593814},{"_id":"public/archives/2019/08/index.html","hash":"66904035f55f166c3787f0ff6d050ddf34cbf1d1","modified":1567686993215},{"_id":"public/images/12-projects-dependency.png","hash":"4456a09bade67f87e690a380f7acecc3f59cbe75","modified":1564675593849},{"_id":"source/images/13-projects-dependency.png","hash":"160ee55cb4860cb32a9f7783bdeb59414abb846b","modified":1564760650385},{"_id":"source/images/13-class-dependency.png","hash":"ce409f5b00733eaa6a47b13ed5e3df4d8f77726b","modified":1564760646511},{"_id":"source/_posts/ng-13-Flujo reactivo unidireccional con Angular y RxJs.md","hash":"db7ff6081ba6295f39cdfa3f5ba0f0112c21c884","modified":1564998010854},{"_id":"public/tag/RxJs/index.html","hash":"c6c5c336ec55ff08f07a892185abe4aa5468d3d0","modified":1567686993228},{"_id":"public/images/13-projects-dependency.png","hash":"241c853b667234c17e1e361d09d38b3372e8fac4","modified":1564998192035},{"_id":"public/images/13-class-dependency.png","hash":"767f139a86d8e9dfc7e9df5a5c94855c5e121cb4","modified":1564998192035},{"_id":"public/flujo-reactivo-unidireccional-con-Angular-y-RxJs/index.html","hash":"ea197465f00ea156bdcb4df8f10780db979ca07b","modified":1567686993209},{"_id":"public/tag/Angular8/page/2/index.html","hash":"06a5c52149183ab6e6f1aaf3784d151c2433b150","modified":1567686993217},{"_id":"source/_posts/__ng-10-nx-mono-repositorios-en-Angular copy.md","hash":"c35bce33e0135f2c47c03b2993ec2378f2298a9a","modified":1567521983600},{"_id":"public/archives/2019/09/index.html","hash":"11c76d2d4cac16062a9e86c203ae709c5a418383","modified":1567686993215}],"Category":[{"name":"Tutorial","_id":"cjyh5p4cc000v18s3mngt8jm4"},{"name":"Angular","parent":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4fi004h18s38ychi8v2"}],"Data":[],"Page":[{"layout":"page","title":"404 No encontrado","comments":0,"_content":"\n> Lo sentimos, la ruta no se ha encontrado.\n> Por favor, dirígete al [inicio del blog](../)\n> -- <cite>El equipo de Academia Binaria</cite>\n\n---\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"404.md","raw":"---\npermalink: /404.html\nlayout: page\ntitle: 404 No encontrado\ncomments: false\n---\n\n> Lo sentimos, la ruta no se ha encontrado.\n> Por favor, dirígete al [inicio del blog](../)\n> -- <cite>El equipo de Academia Binaria</cite>\n\n---\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","date":"2018-05-03T08:56:05.754Z","updated":"2018-05-03T08:56:05.754Z","path":"/404.html","_id":"cjyh5p48c000018s37v5nm17b","content":"<blockquote><p>Lo sentimos, la ruta no se ha encontrado.<br>Por favor, dirígete al <a href=\"../\">inicio del blog</a><br>– <cite>El equipo de Academia Binaria</cite></p></blockquote><hr><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"","more":"<blockquote><p>Lo sentimos, la ruta no se ha encontrado.<br>Por favor, dirígete al <a href=\"../\">inicio del blog</a><br>– <cite>El equipo de Academia Binaria</cite></p></blockquote><hr><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Cursos Online Avanzado de Angular","updated":"2019-04-24T12:07:39.000Z","date":"2019-03-20T09:07:39.000Z","_content":"\n[Implantación de buenas prácticas en desarrollos empresariales con Angular.](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo)\n\n# Angular Business\n\n## 0 - Repositorios profesionales con Nx\n\n### 0.1 Nx y el CLI\n\n- Instalación de Nx y CLI\n- Crear y configurar un workspace\n\n### 0.1 Estructura de un workspace\n\n- Apps\n- Libs\n\n### 0.2 Proyectos\n\n- Frontend webs\n- Backend Apis\n\n### 0.3 Librerías\n\n- 4.1 Librerías en TypeScript\n- 4.2 Librerías de Angular\n\n## 1 - Testing de aplicaciones\n\n### 1.1 Tipos de tests\n\n- Integración o e2e\n- Unitarios\n\n### 1.2 Test de Integración con Cypress\n\n- Cypress\n- Test e2e\n\n### 1.3 Test Unitarios con Jest\n\n- Jest\n- Test unitarios\n\n## 2 - Detección del cambio en Angular\n\n### 2.1 Estrategias de detección del cambio\n\n- Default\n- OnPush\n\n### 2.2 Técnicas OnPush\n\n- DetectChanges\n- Async\n- Inmutable\n\n### 2.3 Optimización\n\n- OnPush es más ligero\n- Async, CDR y clone detectan los cambios\n\n\n## 3 - Componentes dinámicos, directivas y pipes\n\n### 3.1 Plantillas de contenido dinámico\n\n- Un componente común\n- Implementaciones distintas\n\n### 3.2 Atributos custom con Directivas\n\n- Generación de directivas\n- Consumo de directivas\n\n### 3.2 Funciones de transformación con Pipes\n\n- Generación de pipes\n- Consumo de pipes\n\n\n## 4 - Redux con observables\n\n### 4.1 Arquitectura del patrón Redux\n\n- Principios de Redux\n- Elementos de Redux\n\n### 4.2 Implementación de un Store con RxJs\n\n- El Store observable\n- El envío de acciones\n- La función reductora de estado\n- La selección de suscripciones\n\n## 5 - Redux con NgRx\n\n### 5.1 Instalación y configuración\n\n - Instalación de NgRx\n - Registro y configuración\n - Router y DevTools\n\n### 5.2 Actions\n\n - Create\n - Dispatch\n\n### 5.3 State reducer\n\n - State\n - Create function\n - Register in Store\n\n### 5.4 Selectors\n\n - Create selector\n - Selecting data\n - Fachadas\n\n### 5.5 Effects\n\n - Install\n - Efecto básico\n - Api async effects\n - More Api async effects\n\n## 6 - Deploy Progressive Web Apps\n\n### 6.1 Angular Service Worker con el CLI\n\n - Instalación\n - Modificaciones automáticas\n - Paquetes recomendados\n\n### 6.2 Configuración de caché\n\n - Assets\n - API\n\n### 6.3 Actualizaciones y notificaciones\n\n - Actualización de versiones\n - Notificaciones Push\n\n### 6.4 Shell\n\n - Una animación para amenizar la carga\n\n> WIP\n\n## 7 - Server Side Rendering\n\n### 7.1 Angular Universal\n### 7.2 Despliegue con Node Express\n### 7.3 Variantes: shell y pre-rendering\n\n## 8 - Internacionalización y puesta en producción\n\n### 8.1 Traducciones\n### 8.2 Adaptaciones culturales de tiempo y moneda\n### 8.3 Otras consideraciones para aplicaciones en producción.\n\n## 9 - Web Components\n\n### 9.1 Desarrollo en Angular\n### 9.2 Consumo en cualquier framework\n\n[Mejora ya!](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/)\n\n[Contenido detallado Angular Basic](../cursos/angular-basic)\n","source":"Cursos/angular-business.md","raw":"---\ntitle: Cursos Online Avanzado de Angular\npermalink: cursos/angular-business\nupdated: '2019-04-24 14:07:39'\ndate: 2019-03-20 10:07:39\n---\n\n[Implantación de buenas prácticas en desarrollos empresariales con Angular.](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo)\n\n# Angular Business\n\n## 0 - Repositorios profesionales con Nx\n\n### 0.1 Nx y el CLI\n\n- Instalación de Nx y CLI\n- Crear y configurar un workspace\n\n### 0.1 Estructura de un workspace\n\n- Apps\n- Libs\n\n### 0.2 Proyectos\n\n- Frontend webs\n- Backend Apis\n\n### 0.3 Librerías\n\n- 4.1 Librerías en TypeScript\n- 4.2 Librerías de Angular\n\n## 1 - Testing de aplicaciones\n\n### 1.1 Tipos de tests\n\n- Integración o e2e\n- Unitarios\n\n### 1.2 Test de Integración con Cypress\n\n- Cypress\n- Test e2e\n\n### 1.3 Test Unitarios con Jest\n\n- Jest\n- Test unitarios\n\n## 2 - Detección del cambio en Angular\n\n### 2.1 Estrategias de detección del cambio\n\n- Default\n- OnPush\n\n### 2.2 Técnicas OnPush\n\n- DetectChanges\n- Async\n- Inmutable\n\n### 2.3 Optimización\n\n- OnPush es más ligero\n- Async, CDR y clone detectan los cambios\n\n\n## 3 - Componentes dinámicos, directivas y pipes\n\n### 3.1 Plantillas de contenido dinámico\n\n- Un componente común\n- Implementaciones distintas\n\n### 3.2 Atributos custom con Directivas\n\n- Generación de directivas\n- Consumo de directivas\n\n### 3.2 Funciones de transformación con Pipes\n\n- Generación de pipes\n- Consumo de pipes\n\n\n## 4 - Redux con observables\n\n### 4.1 Arquitectura del patrón Redux\n\n- Principios de Redux\n- Elementos de Redux\n\n### 4.2 Implementación de un Store con RxJs\n\n- El Store observable\n- El envío de acciones\n- La función reductora de estado\n- La selección de suscripciones\n\n## 5 - Redux con NgRx\n\n### 5.1 Instalación y configuración\n\n - Instalación de NgRx\n - Registro y configuración\n - Router y DevTools\n\n### 5.2 Actions\n\n - Create\n - Dispatch\n\n### 5.3 State reducer\n\n - State\n - Create function\n - Register in Store\n\n### 5.4 Selectors\n\n - Create selector\n - Selecting data\n - Fachadas\n\n### 5.5 Effects\n\n - Install\n - Efecto básico\n - Api async effects\n - More Api async effects\n\n## 6 - Deploy Progressive Web Apps\n\n### 6.1 Angular Service Worker con el CLI\n\n - Instalación\n - Modificaciones automáticas\n - Paquetes recomendados\n\n### 6.2 Configuración de caché\n\n - Assets\n - API\n\n### 6.3 Actualizaciones y notificaciones\n\n - Actualización de versiones\n - Notificaciones Push\n\n### 6.4 Shell\n\n - Una animación para amenizar la carga\n\n> WIP\n\n## 7 - Server Side Rendering\n\n### 7.1 Angular Universal\n### 7.2 Despliegue con Node Express\n### 7.3 Variantes: shell y pre-rendering\n\n## 8 - Internacionalización y puesta en producción\n\n### 8.1 Traducciones\n### 8.2 Adaptaciones culturales de tiempo y moneda\n### 8.3 Otras consideraciones para aplicaciones en producción.\n\n## 9 - Web Components\n\n### 9.1 Desarrollo en Angular\n### 9.2 Consumo en cualquier framework\n\n[Mejora ya!](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/)\n\n[Contenido detallado Angular Basic](../cursos/angular-basic)\n","path":"cursos/angular-business.html","comments":1,"layout":"page","_id":"cjyh5p4ac000118s34wwequzp","content":"<p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Implantación de buenas prácticas en desarrollos empresariales con Angular.</a></p><h1 id=\"Angular-Business\"><a href=\"#Angular-Business\" class=\"headerlink\" title=\"Angular Business\"></a>Angular Business</h1><h2 id=\"0-Repositorios-profesionales-con-Nx\"><a href=\"#0-Repositorios-profesionales-con-Nx\" class=\"headerlink\" title=\"0 - Repositorios profesionales con Nx\"></a>0 - Repositorios profesionales con Nx</h2><h3 id=\"0-1-Nx-y-el-CLI\"><a href=\"#0-1-Nx-y-el-CLI\" class=\"headerlink\" title=\"0.1 Nx y el CLI\"></a>0.1 Nx y el CLI</h3><ul><li>Instalación de Nx y CLI</li><li>Crear y configurar un workspace</li></ul><h3 id=\"0-1-Estructura-de-un-workspace\"><a href=\"#0-1-Estructura-de-un-workspace\" class=\"headerlink\" title=\"0.1 Estructura de un workspace\"></a>0.1 Estructura de un workspace</h3><ul><li>Apps</li><li>Libs</li></ul><h3 id=\"0-2-Proyectos\"><a href=\"#0-2-Proyectos\" class=\"headerlink\" title=\"0.2 Proyectos\"></a>0.2 Proyectos</h3><ul><li>Frontend webs</li><li>Backend Apis</li></ul><h3 id=\"0-3-Librerias\"><a href=\"#0-3-Librerias\" class=\"headerlink\" title=\"0.3 Librerías\"></a>0.3 Librerías</h3><ul><li>4.1 Librerías en TypeScript</li><li>4.2 Librerías de Angular</li></ul><h2 id=\"1-Testing-de-aplicaciones\"><a href=\"#1-Testing-de-aplicaciones\" class=\"headerlink\" title=\"1 - Testing de aplicaciones\"></a>1 - Testing de aplicaciones</h2><h3 id=\"1-1-Tipos-de-tests\"><a href=\"#1-1-Tipos-de-tests\" class=\"headerlink\" title=\"1.1 Tipos de tests\"></a>1.1 Tipos de tests</h3><ul><li>Integración o e2e</li><li>Unitarios</li></ul><h3 id=\"1-2-Test-de-Integracion-con-Cypress\"><a href=\"#1-2-Test-de-Integracion-con-Cypress\" class=\"headerlink\" title=\"1.2 Test de Integración con Cypress\"></a>1.2 Test de Integración con Cypress</h3><ul><li>Cypress</li><li>Test e2e</li></ul><h3 id=\"1-3-Test-Unitarios-con-Jest\"><a href=\"#1-3-Test-Unitarios-con-Jest\" class=\"headerlink\" title=\"1.3 Test Unitarios con Jest\"></a>1.3 Test Unitarios con Jest</h3><ul><li>Jest</li><li>Test unitarios</li></ul><h2 id=\"2-Deteccion-del-cambio-en-Angular\"><a href=\"#2-Deteccion-del-cambio-en-Angular\" class=\"headerlink\" title=\"2 - Detección del cambio en Angular\"></a>2 - Detección del cambio en Angular</h2><h3 id=\"2-1-Estrategias-de-deteccion-del-cambio\"><a href=\"#2-1-Estrategias-de-deteccion-del-cambio\" class=\"headerlink\" title=\"2.1 Estrategias de detección del cambio\"></a>2.1 Estrategias de detección del cambio</h3><ul><li>Default</li><li>OnPush</li></ul><h3 id=\"2-2-Tecnicas-OnPush\"><a href=\"#2-2-Tecnicas-OnPush\" class=\"headerlink\" title=\"2.2 Técnicas OnPush\"></a>2.2 Técnicas OnPush</h3><ul><li>DetectChanges</li><li>Async</li><li>Inmutable</li></ul><h3 id=\"2-3-Optimizacion\"><a href=\"#2-3-Optimizacion\" class=\"headerlink\" title=\"2.3 Optimización\"></a>2.3 Optimización</h3><ul><li>OnPush es más ligero</li><li>Async, CDR y clone detectan los cambios</li></ul><h2 id=\"3-Componentes-dinamicos-directivas-y-pipes\"><a href=\"#3-Componentes-dinamicos-directivas-y-pipes\" class=\"headerlink\" title=\"3 - Componentes dinámicos, directivas y pipes\"></a>3 - Componentes dinámicos, directivas y pipes</h2><h3 id=\"3-1-Plantillas-de-contenido-dinamico\"><a href=\"#3-1-Plantillas-de-contenido-dinamico\" class=\"headerlink\" title=\"3.1 Plantillas de contenido dinámico\"></a>3.1 Plantillas de contenido dinámico</h3><ul><li>Un componente común</li><li>Implementaciones distintas</li></ul><h3 id=\"3-2-Atributos-custom-con-Directivas\"><a href=\"#3-2-Atributos-custom-con-Directivas\" class=\"headerlink\" title=\"3.2 Atributos custom con Directivas\"></a>3.2 Atributos custom con Directivas</h3><ul><li>Generación de directivas</li><li>Consumo de directivas</li></ul><h3 id=\"3-2-Funciones-de-transformacion-con-Pipes\"><a href=\"#3-2-Funciones-de-transformacion-con-Pipes\" class=\"headerlink\" title=\"3.2 Funciones de transformación con Pipes\"></a>3.2 Funciones de transformación con Pipes</h3><ul><li>Generación de pipes</li><li>Consumo de pipes</li></ul><h2 id=\"4-Redux-con-observables\"><a href=\"#4-Redux-con-observables\" class=\"headerlink\" title=\"4 - Redux con observables\"></a>4 - Redux con observables</h2><h3 id=\"4-1-Arquitectura-del-patron-Redux\"><a href=\"#4-1-Arquitectura-del-patron-Redux\" class=\"headerlink\" title=\"4.1 Arquitectura del patrón Redux\"></a>4.1 Arquitectura del patrón Redux</h3><ul><li>Principios de Redux</li><li>Elementos de Redux</li></ul><h3 id=\"4-2-Implementacion-de-un-Store-con-RxJs\"><a href=\"#4-2-Implementacion-de-un-Store-con-RxJs\" class=\"headerlink\" title=\"4.2 Implementación de un Store con RxJs\"></a>4.2 Implementación de un Store con RxJs</h3><ul><li>El Store observable</li><li>El envío de acciones</li><li>La función reductora de estado</li><li>La selección de suscripciones</li></ul><h2 id=\"5-Redux-con-NgRx\"><a href=\"#5-Redux-con-NgRx\" class=\"headerlink\" title=\"5 - Redux con NgRx\"></a>5 - Redux con NgRx</h2><h3 id=\"5-1-Instalacion-y-configuracion\"><a href=\"#5-1-Instalacion-y-configuracion\" class=\"headerlink\" title=\"5.1 Instalación y configuración\"></a>5.1 Instalación y configuración</h3><ul><li>Instalación de NgRx</li><li>Registro y configuración</li><li>Router y DevTools</li></ul><h3 id=\"5-2-Actions\"><a href=\"#5-2-Actions\" class=\"headerlink\" title=\"5.2 Actions\"></a>5.2 Actions</h3><ul><li>Create</li><li>Dispatch</li></ul><h3 id=\"5-3-State-reducer\"><a href=\"#5-3-State-reducer\" class=\"headerlink\" title=\"5.3 State reducer\"></a>5.3 State reducer</h3><ul><li>State</li><li>Create function</li><li>Register in Store</li></ul><h3 id=\"5-4-Selectors\"><a href=\"#5-4-Selectors\" class=\"headerlink\" title=\"5.4 Selectors\"></a>5.4 Selectors</h3><ul><li>Create selector</li><li>Selecting data</li><li>Fachadas</li></ul><h3 id=\"5-5-Effects\"><a href=\"#5-5-Effects\" class=\"headerlink\" title=\"5.5 Effects\"></a>5.5 Effects</h3><ul><li>Install</li><li>Efecto básico</li><li>Api async effects</li><li>More Api async effects</li></ul><h2 id=\"6-Deploy-Progressive-Web-Apps\"><a href=\"#6-Deploy-Progressive-Web-Apps\" class=\"headerlink\" title=\"6 - Deploy Progressive Web Apps\"></a>6 - Deploy Progressive Web Apps</h2><h3 id=\"6-1-Angular-Service-Worker-con-el-CLI\"><a href=\"#6-1-Angular-Service-Worker-con-el-CLI\" class=\"headerlink\" title=\"6.1 Angular Service Worker con el CLI\"></a>6.1 Angular Service Worker con el CLI</h3><ul><li>Instalación</li><li>Modificaciones automáticas</li><li>Paquetes recomendados</li></ul><h3 id=\"6-2-Configuracion-de-cache\"><a href=\"#6-2-Configuracion-de-cache\" class=\"headerlink\" title=\"6.2 Configuración de caché\"></a>6.2 Configuración de caché</h3><ul><li>Assets</li><li>API</li></ul><h3 id=\"6-3-Actualizaciones-y-notificaciones\"><a href=\"#6-3-Actualizaciones-y-notificaciones\" class=\"headerlink\" title=\"6.3 Actualizaciones y notificaciones\"></a>6.3 Actualizaciones y notificaciones</h3><ul><li>Actualización de versiones</li><li>Notificaciones Push</li></ul><h3 id=\"6-4-Shell\"><a href=\"#6-4-Shell\" class=\"headerlink\" title=\"6.4 Shell\"></a>6.4 Shell</h3><ul><li>Una animación para amenizar la carga</li></ul><blockquote><p>WIP</p></blockquote><h2 id=\"7-Server-Side-Rendering\"><a href=\"#7-Server-Side-Rendering\" class=\"headerlink\" title=\"7 - Server Side Rendering\"></a>7 - Server Side Rendering</h2><h3 id=\"7-1-Angular-Universal\"><a href=\"#7-1-Angular-Universal\" class=\"headerlink\" title=\"7.1 Angular Universal\"></a>7.1 Angular Universal</h3><h3 id=\"7-2-Despliegue-con-Node-Express\"><a href=\"#7-2-Despliegue-con-Node-Express\" class=\"headerlink\" title=\"7.2 Despliegue con Node Express\"></a>7.2 Despliegue con Node Express</h3><h3 id=\"7-3-Variantes-shell-y-pre-rendering\"><a href=\"#7-3-Variantes-shell-y-pre-rendering\" class=\"headerlink\" title=\"7.3 Variantes: shell y pre-rendering\"></a>7.3 Variantes: shell y pre-rendering</h3><h2 id=\"8-Internacionalizacion-y-puesta-en-produccion\"><a href=\"#8-Internacionalizacion-y-puesta-en-produccion\" class=\"headerlink\" title=\"8 - Internacionalización y puesta en producción\"></a>8 - Internacionalización y puesta en producción</h2><h3 id=\"8-1-Traducciones\"><a href=\"#8-1-Traducciones\" class=\"headerlink\" title=\"8.1 Traducciones\"></a>8.1 Traducciones</h3><h3 id=\"8-2-Adaptaciones-culturales-de-tiempo-y-moneda\"><a href=\"#8-2-Adaptaciones-culturales-de-tiempo-y-moneda\" class=\"headerlink\" title=\"8.2 Adaptaciones culturales de tiempo y moneda\"></a>8.2 Adaptaciones culturales de tiempo y moneda</h3><h3 id=\"8-3-Otras-consideraciones-para-aplicaciones-en-produccion\"><a href=\"#8-3-Otras-consideraciones-para-aplicaciones-en-produccion\" class=\"headerlink\" title=\"8.3 Otras consideraciones para aplicaciones en producción.\"></a>8.3 Otras consideraciones para aplicaciones en producción.</h3><h2 id=\"9-Web-Components\"><a href=\"#9-Web-Components\" class=\"headerlink\" title=\"9 - Web Components\"></a>9 - Web Components</h2><h3 id=\"9-1-Desarrollo-en-Angular\"><a href=\"#9-1-Desarrollo-en-Angular\" class=\"headerlink\" title=\"9.1 Desarrollo en Angular\"></a>9.1 Desarrollo en Angular</h3><h3 id=\"9-2-Consumo-en-cualquier-framework\"><a href=\"#9-2-Consumo-en-cualquier-framework\" class=\"headerlink\" title=\"9.2 Consumo en cualquier framework\"></a>9.2 Consumo en cualquier framework</h3><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/\" target=\"_blank\" rel=\"noopener\">Mejora ya!</a></p><p><a href=\"../cursos/angular-basic\">Contenido detallado Angular Basic</a></p>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Implantación de buenas prácticas en desarrollos empresariales con Angular.</a></p><h1 id=\"Angular-Business\"><a href=\"#Angular-Business\" class=\"headerlink\" title=\"Angular Business\"></a>Angular Business</h1><h2 id=\"0-Repositorios-profesionales-con-Nx\"><a href=\"#0-Repositorios-profesionales-con-Nx\" class=\"headerlink\" title=\"0 - Repositorios profesionales con Nx\"></a>0 - Repositorios profesionales con Nx</h2><h3 id=\"0-1-Nx-y-el-CLI\"><a href=\"#0-1-Nx-y-el-CLI\" class=\"headerlink\" title=\"0.1 Nx y el CLI\"></a>0.1 Nx y el CLI</h3><ul><li>Instalación de Nx y CLI</li><li>Crear y configurar un workspace</li></ul><h3 id=\"0-1-Estructura-de-un-workspace\"><a href=\"#0-1-Estructura-de-un-workspace\" class=\"headerlink\" title=\"0.1 Estructura de un workspace\"></a>0.1 Estructura de un workspace</h3><ul><li>Apps</li><li>Libs</li></ul><h3 id=\"0-2-Proyectos\"><a href=\"#0-2-Proyectos\" class=\"headerlink\" title=\"0.2 Proyectos\"></a>0.2 Proyectos</h3><ul><li>Frontend webs</li><li>Backend Apis</li></ul><h3 id=\"0-3-Librerias\"><a href=\"#0-3-Librerias\" class=\"headerlink\" title=\"0.3 Librerías\"></a>0.3 Librerías</h3><ul><li>4.1 Librerías en TypeScript</li><li>4.2 Librerías de Angular</li></ul><h2 id=\"1-Testing-de-aplicaciones\"><a href=\"#1-Testing-de-aplicaciones\" class=\"headerlink\" title=\"1 - Testing de aplicaciones\"></a>1 - Testing de aplicaciones</h2><h3 id=\"1-1-Tipos-de-tests\"><a href=\"#1-1-Tipos-de-tests\" class=\"headerlink\" title=\"1.1 Tipos de tests\"></a>1.1 Tipos de tests</h3><ul><li>Integración o e2e</li><li>Unitarios</li></ul><h3 id=\"1-2-Test-de-Integracion-con-Cypress\"><a href=\"#1-2-Test-de-Integracion-con-Cypress\" class=\"headerlink\" title=\"1.2 Test de Integración con Cypress\"></a>1.2 Test de Integración con Cypress</h3><ul><li>Cypress</li><li>Test e2e</li></ul><h3 id=\"1-3-Test-Unitarios-con-Jest\"><a href=\"#1-3-Test-Unitarios-con-Jest\" class=\"headerlink\" title=\"1.3 Test Unitarios con Jest\"></a>1.3 Test Unitarios con Jest</h3><ul><li>Jest</li><li>Test unitarios</li></ul><h2 id=\"2-Deteccion-del-cambio-en-Angular\"><a href=\"#2-Deteccion-del-cambio-en-Angular\" class=\"headerlink\" title=\"2 - Detección del cambio en Angular\"></a>2 - Detección del cambio en Angular</h2><h3 id=\"2-1-Estrategias-de-deteccion-del-cambio\"><a href=\"#2-1-Estrategias-de-deteccion-del-cambio\" class=\"headerlink\" title=\"2.1 Estrategias de detección del cambio\"></a>2.1 Estrategias de detección del cambio</h3><ul><li>Default</li><li>OnPush</li></ul><h3 id=\"2-2-Tecnicas-OnPush\"><a href=\"#2-2-Tecnicas-OnPush\" class=\"headerlink\" title=\"2.2 Técnicas OnPush\"></a>2.2 Técnicas OnPush</h3><ul><li>DetectChanges</li><li>Async</li><li>Inmutable</li></ul><h3 id=\"2-3-Optimizacion\"><a href=\"#2-3-Optimizacion\" class=\"headerlink\" title=\"2.3 Optimización\"></a>2.3 Optimización</h3><ul><li>OnPush es más ligero</li><li>Async, CDR y clone detectan los cambios</li></ul><h2 id=\"3-Componentes-dinamicos-directivas-y-pipes\"><a href=\"#3-Componentes-dinamicos-directivas-y-pipes\" class=\"headerlink\" title=\"3 - Componentes dinámicos, directivas y pipes\"></a>3 - Componentes dinámicos, directivas y pipes</h2><h3 id=\"3-1-Plantillas-de-contenido-dinamico\"><a href=\"#3-1-Plantillas-de-contenido-dinamico\" class=\"headerlink\" title=\"3.1 Plantillas de contenido dinámico\"></a>3.1 Plantillas de contenido dinámico</h3><ul><li>Un componente común</li><li>Implementaciones distintas</li></ul><h3 id=\"3-2-Atributos-custom-con-Directivas\"><a href=\"#3-2-Atributos-custom-con-Directivas\" class=\"headerlink\" title=\"3.2 Atributos custom con Directivas\"></a>3.2 Atributos custom con Directivas</h3><ul><li>Generación de directivas</li><li>Consumo de directivas</li></ul><h3 id=\"3-2-Funciones-de-transformacion-con-Pipes\"><a href=\"#3-2-Funciones-de-transformacion-con-Pipes\" class=\"headerlink\" title=\"3.2 Funciones de transformación con Pipes\"></a>3.2 Funciones de transformación con Pipes</h3><ul><li>Generación de pipes</li><li>Consumo de pipes</li></ul><h2 id=\"4-Redux-con-observables\"><a href=\"#4-Redux-con-observables\" class=\"headerlink\" title=\"4 - Redux con observables\"></a>4 - Redux con observables</h2><h3 id=\"4-1-Arquitectura-del-patron-Redux\"><a href=\"#4-1-Arquitectura-del-patron-Redux\" class=\"headerlink\" title=\"4.1 Arquitectura del patrón Redux\"></a>4.1 Arquitectura del patrón Redux</h3><ul><li>Principios de Redux</li><li>Elementos de Redux</li></ul><h3 id=\"4-2-Implementacion-de-un-Store-con-RxJs\"><a href=\"#4-2-Implementacion-de-un-Store-con-RxJs\" class=\"headerlink\" title=\"4.2 Implementación de un Store con RxJs\"></a>4.2 Implementación de un Store con RxJs</h3><ul><li>El Store observable</li><li>El envío de acciones</li><li>La función reductora de estado</li><li>La selección de suscripciones</li></ul><h2 id=\"5-Redux-con-NgRx\"><a href=\"#5-Redux-con-NgRx\" class=\"headerlink\" title=\"5 - Redux con NgRx\"></a>5 - Redux con NgRx</h2><h3 id=\"5-1-Instalacion-y-configuracion\"><a href=\"#5-1-Instalacion-y-configuracion\" class=\"headerlink\" title=\"5.1 Instalación y configuración\"></a>5.1 Instalación y configuración</h3><ul><li>Instalación de NgRx</li><li>Registro y configuración</li><li>Router y DevTools</li></ul><h3 id=\"5-2-Actions\"><a href=\"#5-2-Actions\" class=\"headerlink\" title=\"5.2 Actions\"></a>5.2 Actions</h3><ul><li>Create</li><li>Dispatch</li></ul><h3 id=\"5-3-State-reducer\"><a href=\"#5-3-State-reducer\" class=\"headerlink\" title=\"5.3 State reducer\"></a>5.3 State reducer</h3><ul><li>State</li><li>Create function</li><li>Register in Store</li></ul><h3 id=\"5-4-Selectors\"><a href=\"#5-4-Selectors\" class=\"headerlink\" title=\"5.4 Selectors\"></a>5.4 Selectors</h3><ul><li>Create selector</li><li>Selecting data</li><li>Fachadas</li></ul><h3 id=\"5-5-Effects\"><a href=\"#5-5-Effects\" class=\"headerlink\" title=\"5.5 Effects\"></a>5.5 Effects</h3><ul><li>Install</li><li>Efecto básico</li><li>Api async effects</li><li>More Api async effects</li></ul><h2 id=\"6-Deploy-Progressive-Web-Apps\"><a href=\"#6-Deploy-Progressive-Web-Apps\" class=\"headerlink\" title=\"6 - Deploy Progressive Web Apps\"></a>6 - Deploy Progressive Web Apps</h2><h3 id=\"6-1-Angular-Service-Worker-con-el-CLI\"><a href=\"#6-1-Angular-Service-Worker-con-el-CLI\" class=\"headerlink\" title=\"6.1 Angular Service Worker con el CLI\"></a>6.1 Angular Service Worker con el CLI</h3><ul><li>Instalación</li><li>Modificaciones automáticas</li><li>Paquetes recomendados</li></ul><h3 id=\"6-2-Configuracion-de-cache\"><a href=\"#6-2-Configuracion-de-cache\" class=\"headerlink\" title=\"6.2 Configuración de caché\"></a>6.2 Configuración de caché</h3><ul><li>Assets</li><li>API</li></ul><h3 id=\"6-3-Actualizaciones-y-notificaciones\"><a href=\"#6-3-Actualizaciones-y-notificaciones\" class=\"headerlink\" title=\"6.3 Actualizaciones y notificaciones\"></a>6.3 Actualizaciones y notificaciones</h3><ul><li>Actualización de versiones</li><li>Notificaciones Push</li></ul><h3 id=\"6-4-Shell\"><a href=\"#6-4-Shell\" class=\"headerlink\" title=\"6.4 Shell\"></a>6.4 Shell</h3><ul><li>Una animación para amenizar la carga</li></ul><blockquote><p>WIP</p></blockquote><h2 id=\"7-Server-Side-Rendering\"><a href=\"#7-Server-Side-Rendering\" class=\"headerlink\" title=\"7 - Server Side Rendering\"></a>7 - Server Side Rendering</h2><h3 id=\"7-1-Angular-Universal\"><a href=\"#7-1-Angular-Universal\" class=\"headerlink\" title=\"7.1 Angular Universal\"></a>7.1 Angular Universal</h3><h3 id=\"7-2-Despliegue-con-Node-Express\"><a href=\"#7-2-Despliegue-con-Node-Express\" class=\"headerlink\" title=\"7.2 Despliegue con Node Express\"></a>7.2 Despliegue con Node Express</h3><h3 id=\"7-3-Variantes-shell-y-pre-rendering\"><a href=\"#7-3-Variantes-shell-y-pre-rendering\" class=\"headerlink\" title=\"7.3 Variantes: shell y pre-rendering\"></a>7.3 Variantes: shell y pre-rendering</h3><h2 id=\"8-Internacionalizacion-y-puesta-en-produccion\"><a href=\"#8-Internacionalizacion-y-puesta-en-produccion\" class=\"headerlink\" title=\"8 - Internacionalización y puesta en producción\"></a>8 - Internacionalización y puesta en producción</h2><h3 id=\"8-1-Traducciones\"><a href=\"#8-1-Traducciones\" class=\"headerlink\" title=\"8.1 Traducciones\"></a>8.1 Traducciones</h3><h3 id=\"8-2-Adaptaciones-culturales-de-tiempo-y-moneda\"><a href=\"#8-2-Adaptaciones-culturales-de-tiempo-y-moneda\" class=\"headerlink\" title=\"8.2 Adaptaciones culturales de tiempo y moneda\"></a>8.2 Adaptaciones culturales de tiempo y moneda</h3><h3 id=\"8-3-Otras-consideraciones-para-aplicaciones-en-produccion\"><a href=\"#8-3-Otras-consideraciones-para-aplicaciones-en-produccion\" class=\"headerlink\" title=\"8.3 Otras consideraciones para aplicaciones en producción.\"></a>8.3 Otras consideraciones para aplicaciones en producción.</h3><h2 id=\"9-Web-Components\"><a href=\"#9-Web-Components\" class=\"headerlink\" title=\"9 - Web Components\"></a>9 - Web Components</h2><h3 id=\"9-1-Desarrollo-en-Angular\"><a href=\"#9-1-Desarrollo-en-Angular\" class=\"headerlink\" title=\"9.1 Desarrollo en Angular\"></a>9.1 Desarrollo en Angular</h3><h3 id=\"9-2-Consumo-en-cualquier-framework\"><a href=\"#9-2-Consumo-en-cualquier-framework\" class=\"headerlink\" title=\"9.2 Consumo en cualquier framework\"></a>9.2 Consumo en cualquier framework</h3><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/\" target=\"_blank\" rel=\"noopener\">Mejora ya!</a></p><p><a href=\"../cursos/angular-basic\">Contenido detallado Angular Basic</a></p>"},{"title":"Contacto","id":4,"updated":"2017-02-14T08:21:50.000Z","date":"2015-09-16T11:52:52.000Z","_content":"\n<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>","source":"Contacto/index.md","raw":"---\ntitle: Contacto\npermalink: contacto\nid: 4\nupdated: '2017-02-14 09:21:50'\ndate: 2015-09-16 13:52:52\n---\n\n<div>\nVivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b>\n</div>\n<p/>\n<div>\nSi quieres <b>visitarnos</b> ven a:\n</div>\n\n<hr/>\n\n<div itemscope itemtype=\"http://schema.org/LocalBusiness\">  \n  <h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4>\n  <span itemprop=\"description\"> Factoría de software y academia de programadores.</span>\n  <p/>\n  <div itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n    <span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span>\n    CP:<span itemprop=\"postalCode\">15190</span>\n    <p/>\n    <span itemprop=\"addressLocality\">A Coruña</span>,\n    <span itemprop=\"addressCountry\">España</span>\n  </div>\n  Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\">+34 609884782</a></span>\n  <p/>\n  Email: <span itemprop=\"email\">info(at)agorabinaria.com</span>\n</div>\n\n<hr />\n\n<p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:  </p>\n\n<blockquote>\n  <p> Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span> </p>\n  <p> Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\">http://www.vitaedigital.com/</a></span> </p>\n  \n</blockquote>","path":"contacto.html","comments":1,"layout":"page","_id":"cjyh5p4ah000318s30fjejhgc","content":"<div>Vivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b></div><p><div>Si quieres <b>visitarnos</b> ven a:</div><hr><div itemscope=\"\" itemtype=\"http://schema.org/LocalBusiness\"><h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4><span itemprop=\"description\">Factoría de software y academia de programadores.</span><p><div itemprop=\"address\" itemscope=\"\" itemtype=\"http://schema.org/PostalAddress\"><span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span> CP:<span itemprop=\"postalCode\">15190</span><p><span itemprop=\"addressLocality\">A Coruña</span>, <span itemprop=\"addressCountry\">España</span></p></div>Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\" target=\"_blank\" rel=\"noopener\">+34 609884782</a></span></p><p>Email: <span itemprop=\"email\">info(at)agorabinaria.com</span></p></div><hr></p><p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:</p><blockquote><p>Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span></p><p>Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\" target=\"_blank\" rel=\"noopener\">http://www.vitaedigital.com/</a></span></p></blockquote>","site":{"data":{}},"excerpt":"","more":"<div>Vivimos en la nube y nos relacionamos contigo en cualquier sitio desde <b>A Coruña, España.</b></div><p><div>Si quieres <b>visitarnos</b> ven a:</div><hr><div itemscope=\"\" itemtype=\"http://schema.org/LocalBusiness\"><h4><span itemprop=\"name\">Ágora Binaria S.L</span></h4><span itemprop=\"description\">Factoría de software y academia de programadores.</span><p><div itemprop=\"address\" itemscope=\"\" itemtype=\"http://schema.org/PostalAddress\"><span itemprop=\"streetAddress\">Av. Primera C10. Edif Abanca Innova</span> CP:<span itemprop=\"postalCode\">15190</span><p><span itemprop=\"addressLocality\">A Coruña</span>, <span itemprop=\"addressCountry\">España</span></p></div>Telefóno: <span itemprop=\"telephone\"><a href=\"tel:+34 609884782\" target=\"_blank\" rel=\"noopener\">+34 609884782</a></span></p><p>Email: <span itemprop=\"email\">info(at)agorabinaria.com</span></p></div><hr></p><p>Para temas comerciales de cursos presenciales con <strong>Vita Digital S.L.</strong>:</p><blockquote><p>Email: <span itemprop=\"email\">vitae(at)vitaedigital.com</span></p><p>Web: <span itemprop=\"web\"><a href=\"http://www.vitaedigital.com/\" target=\"_blank\" rel=\"noopener\">http://www.vitaedigital.com/</a></span></p></blockquote>"},{"title":"Cursos Online de Angular","updated":"2019-03-20T09:07:39.000Z","date":"2019-03-20T09:07:39.000Z","_content":"\n### [Contenido detallado Angular Basic](cursos/angular-basic)\n### [Contenido detallado Angular Business](cursos/angular-business)\n\n> Cursos con lecciones en video, chat de preguntas, tutorías y prácticas corregidas.\n> -- <cite>Te espero, Alberto Basalo</cite>\n\n# Angular Basic\n\n[Introducción desde cero al desarrollo con Angular.](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n\n#### 0 - Hola Angular CLI\n#### 1 - Base para una aplicación Angular\n\n#### 2 - Páginas y rutas SPA\n#### 3 - Formularios, tablas y modelos de datos\n\n#### 4 - Flujo de datos entre componentes\n#### 5 - Servicios inyectables\n\n#### 6 - Comunicaciones http\n#### 7 - Vigilancia y seguridad\n\n#### 8 - Formularios reactivos\n#### 9 - Material Design y CLI\n\n[Empieza ya!](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n[Contenido detallado Angular Basic](cursos/angular-basic)\n---\n\n# Angular Business\n\n[Implantación de buenas prácticas en desarrollos empresariales con Angular.](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo)\n\n#### 0 - Repositorios profesionales con Nx\n#### 1 - Testing de aplicaciones con Cypress y Jest\n\n#### 2 - Detección del cambio en Angular\n#### 3 - Componentes dinámicos, directivas y pipes\n\n#### 4 - Redux con observables RxJs\n#### 5 - Redux con NgRx\n\n#### 6 - Deploy Progressive Web Apps\n#### 7 - Server Side Rendering\n\n#### 8 - Internacionalización y puesta en producción\n#### 9 - Web Components\n\n[Mejora ya!](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/)\n[Contenido detallado Angular Business](cursos/angular-business)\n\n> Con diploma acreditativo, bolsa de trabajo y bonificables por Fundae.\n> -- <cite>Aprende online con Alberto Basalo</cite>\n\n[Angular Basic: Curso de introducción desde cero al desarrollo con Angular.](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n\n[Angular Business: Curso de implantación de buenas prácticas en desarrollos empresariales con Angular.](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/)","source":"Cursos/index.md","raw":"---\ntitle: Cursos Online de Angular\npermalink: cursos\nupdated: '2019-03-20 10:07:39'\ndate: 2019-03-20 10:07:39\n---\n\n### [Contenido detallado Angular Basic](cursos/angular-basic)\n### [Contenido detallado Angular Business](cursos/angular-business)\n\n> Cursos con lecciones en video, chat de preguntas, tutorías y prácticas corregidas.\n> -- <cite>Te espero, Alberto Basalo</cite>\n\n# Angular Basic\n\n[Introducción desde cero al desarrollo con Angular.](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n\n#### 0 - Hola Angular CLI\n#### 1 - Base para una aplicación Angular\n\n#### 2 - Páginas y rutas SPA\n#### 3 - Formularios, tablas y modelos de datos\n\n#### 4 - Flujo de datos entre componentes\n#### 5 - Servicios inyectables\n\n#### 6 - Comunicaciones http\n#### 7 - Vigilancia y seguridad\n\n#### 8 - Formularios reactivos\n#### 9 - Material Design y CLI\n\n[Empieza ya!](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n[Contenido detallado Angular Basic](cursos/angular-basic)\n---\n\n# Angular Business\n\n[Implantación de buenas prácticas en desarrollos empresariales con Angular.](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo)\n\n#### 0 - Repositorios profesionales con Nx\n#### 1 - Testing de aplicaciones con Cypress y Jest\n\n#### 2 - Detección del cambio en Angular\n#### 3 - Componentes dinámicos, directivas y pipes\n\n#### 4 - Redux con observables RxJs\n#### 5 - Redux con NgRx\n\n#### 6 - Deploy Progressive Web Apps\n#### 7 - Server Side Rendering\n\n#### 8 - Internacionalización y puesta en producción\n#### 9 - Web Components\n\n[Mejora ya!](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/)\n[Contenido detallado Angular Business](cursos/angular-business)\n\n> Con diploma acreditativo, bolsa de trabajo y bonificables por Fundae.\n> -- <cite>Aprende online con Alberto Basalo</cite>\n\n[Angular Basic: Curso de introducción desde cero al desarrollo con Angular.](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n\n[Angular Business: Curso de implantación de buenas prácticas en desarrollos empresariales con Angular.](https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/)","path":"cursos.html","comments":1,"layout":"page","_id":"cjyh5p4ak000518s3p0fuvmpr","content":"<h3 id=\"Contenido-detallado-Angular-Basic\"><a href=\"#Contenido-detallado-Angular-Basic\" class=\"headerlink\" title=\"Contenido detallado Angular Basic\"></a><a href=\"cursos/angular-basic\">Contenido detallado Angular Basic</a></h3><h3 id=\"Contenido-detallado-Angular-Business\"><a href=\"#Contenido-detallado-Angular-Business\" class=\"headerlink\" title=\"Contenido detallado Angular Business\"></a><a href=\"cursos/angular-business\">Contenido detallado Angular Business</a></h3><blockquote><p>Cursos con lecciones en video, chat de preguntas, tutorías y prácticas corregidas.<br>– <cite>Te espero, Alberto Basalo</cite></p></blockquote><h1 id=\"Angular-Basic\"><a href=\"#Angular-Basic\" class=\"headerlink\" title=\"Angular Basic\"></a>Angular Basic</h1><p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Introducción desde cero al desarrollo con Angular.</a></p><h4 id=\"0-Hola-Angular-CLI\"><a href=\"#0-Hola-Angular-CLI\" class=\"headerlink\" title=\"0 - Hola Angular CLI\"></a>0 - Hola Angular CLI</h4><h4 id=\"1-Base-para-una-aplicacion-Angular\"><a href=\"#1-Base-para-una-aplicacion-Angular\" class=\"headerlink\" title=\"1 - Base para una aplicación Angular\"></a>1 - Base para una aplicación Angular</h4><h4 id=\"2-Paginas-y-rutas-SPA\"><a href=\"#2-Paginas-y-rutas-SPA\" class=\"headerlink\" title=\"2 - Páginas y rutas SPA\"></a>2 - Páginas y rutas SPA</h4><h4 id=\"3-Formularios-tablas-y-modelos-de-datos\"><a href=\"#3-Formularios-tablas-y-modelos-de-datos\" class=\"headerlink\" title=\"3 - Formularios, tablas y modelos de datos\"></a>3 - Formularios, tablas y modelos de datos</h4><h4 id=\"4-Flujo-de-datos-entre-componentes\"><a href=\"#4-Flujo-de-datos-entre-componentes\" class=\"headerlink\" title=\"4 - Flujo de datos entre componentes\"></a>4 - Flujo de datos entre componentes</h4><h4 id=\"5-Servicios-inyectables\"><a href=\"#5-Servicios-inyectables\" class=\"headerlink\" title=\"5 - Servicios inyectables\"></a>5 - Servicios inyectables</h4><h4 id=\"6-Comunicaciones-http\"><a href=\"#6-Comunicaciones-http\" class=\"headerlink\" title=\"6 - Comunicaciones http\"></a>6 - Comunicaciones http</h4><h4 id=\"7-Vigilancia-y-seguridad\"><a href=\"#7-Vigilancia-y-seguridad\" class=\"headerlink\" title=\"7 - Vigilancia y seguridad\"></a>7 - Vigilancia y seguridad</h4><h4 id=\"8-Formularios-reactivos\"><a href=\"#8-Formularios-reactivos\" class=\"headerlink\" title=\"8 - Formularios reactivos\"></a>8 - Formularios reactivos</h4><h4 id=\"9-Material-Design-y-CLI\"><a href=\"#9-Material-Design-y-CLI\" class=\"headerlink\" title=\"9 - Material Design y CLI\"></a>9 - Material Design y CLI</h4><p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Empieza ya!</a></p><h2 id=\"Contenido-detallado-Angular-Basic-1\"><a href=\"#Contenido-detallado-Angular-Basic-1\" class=\"headerlink\" title=\"Contenido detallado Angular Basic\"></a><a href=\"cursos/angular-basic\">Contenido detallado Angular Basic</a></h2><h1 id=\"Angular-Business\"><a href=\"#Angular-Business\" class=\"headerlink\" title=\"Angular Business\"></a>Angular Business</h1><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Implantación de buenas prácticas en desarrollos empresariales con Angular.</a></p><h4 id=\"0-Repositorios-profesionales-con-Nx\"><a href=\"#0-Repositorios-profesionales-con-Nx\" class=\"headerlink\" title=\"0 - Repositorios profesionales con Nx\"></a>0 - Repositorios profesionales con Nx</h4><h4 id=\"1-Testing-de-aplicaciones-con-Cypress-y-Jest\"><a href=\"#1-Testing-de-aplicaciones-con-Cypress-y-Jest\" class=\"headerlink\" title=\"1 - Testing de aplicaciones con Cypress y Jest\"></a>1 - Testing de aplicaciones con Cypress y Jest</h4><h4 id=\"2-Deteccion-del-cambio-en-Angular\"><a href=\"#2-Deteccion-del-cambio-en-Angular\" class=\"headerlink\" title=\"2 - Detección del cambio en Angular\"></a>2 - Detección del cambio en Angular</h4><h4 id=\"3-Componentes-dinamicos-directivas-y-pipes\"><a href=\"#3-Componentes-dinamicos-directivas-y-pipes\" class=\"headerlink\" title=\"3 - Componentes dinámicos, directivas y pipes\"></a>3 - Componentes dinámicos, directivas y pipes</h4><h4 id=\"4-Redux-con-observables-RxJs\"><a href=\"#4-Redux-con-observables-RxJs\" class=\"headerlink\" title=\"4 - Redux con observables RxJs\"></a>4 - Redux con observables RxJs</h4><h4 id=\"5-Redux-con-NgRx\"><a href=\"#5-Redux-con-NgRx\" class=\"headerlink\" title=\"5 - Redux con NgRx\"></a>5 - Redux con NgRx</h4><h4 id=\"6-Deploy-Progressive-Web-Apps\"><a href=\"#6-Deploy-Progressive-Web-Apps\" class=\"headerlink\" title=\"6 - Deploy Progressive Web Apps\"></a>6 - Deploy Progressive Web Apps</h4><h4 id=\"7-Server-Side-Rendering\"><a href=\"#7-Server-Side-Rendering\" class=\"headerlink\" title=\"7 - Server Side Rendering\"></a>7 - Server Side Rendering</h4><h4 id=\"8-Internacionalizacion-y-puesta-en-produccion\"><a href=\"#8-Internacionalizacion-y-puesta-en-produccion\" class=\"headerlink\" title=\"8 - Internacionalización y puesta en producción\"></a>8 - Internacionalización y puesta en producción</h4><h4 id=\"9-Web-Components\"><a href=\"#9-Web-Components\" class=\"headerlink\" title=\"9 - Web Components\"></a>9 - Web Components</h4><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/\" target=\"_blank\" rel=\"noopener\">Mejora ya!</a><br><a href=\"cursos/angular-business\">Contenido detallado Angular Business</a></p><blockquote><p>Con diploma acreditativo, bolsa de trabajo y bonificables por Fundae.<br>– <cite>Aprende online con Alberto Basalo</cite></p></blockquote><p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Angular Basic: Curso de introducción desde cero al desarrollo con Angular.</a></p><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/\" target=\"_blank\" rel=\"noopener\">Angular Business: Curso de implantación de buenas prácticas en desarrollos empresariales con Angular.</a></p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Contenido-detallado-Angular-Basic\"><a href=\"#Contenido-detallado-Angular-Basic\" class=\"headerlink\" title=\"Contenido detallado Angular Basic\"></a><a href=\"cursos/angular-basic\">Contenido detallado Angular Basic</a></h3><h3 id=\"Contenido-detallado-Angular-Business\"><a href=\"#Contenido-detallado-Angular-Business\" class=\"headerlink\" title=\"Contenido detallado Angular Business\"></a><a href=\"cursos/angular-business\">Contenido detallado Angular Business</a></h3><blockquote><p>Cursos con lecciones en video, chat de preguntas, tutorías y prácticas corregidas.<br>– <cite>Te espero, Alberto Basalo</cite></p></blockquote><h1 id=\"Angular-Basic\"><a href=\"#Angular-Basic\" class=\"headerlink\" title=\"Angular Basic\"></a>Angular Basic</h1><p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Introducción desde cero al desarrollo con Angular.</a></p><h4 id=\"0-Hola-Angular-CLI\"><a href=\"#0-Hola-Angular-CLI\" class=\"headerlink\" title=\"0 - Hola Angular CLI\"></a>0 - Hola Angular CLI</h4><h4 id=\"1-Base-para-una-aplicacion-Angular\"><a href=\"#1-Base-para-una-aplicacion-Angular\" class=\"headerlink\" title=\"1 - Base para una aplicación Angular\"></a>1 - Base para una aplicación Angular</h4><h4 id=\"2-Paginas-y-rutas-SPA\"><a href=\"#2-Paginas-y-rutas-SPA\" class=\"headerlink\" title=\"2 - Páginas y rutas SPA\"></a>2 - Páginas y rutas SPA</h4><h4 id=\"3-Formularios-tablas-y-modelos-de-datos\"><a href=\"#3-Formularios-tablas-y-modelos-de-datos\" class=\"headerlink\" title=\"3 - Formularios, tablas y modelos de datos\"></a>3 - Formularios, tablas y modelos de datos</h4><h4 id=\"4-Flujo-de-datos-entre-componentes\"><a href=\"#4-Flujo-de-datos-entre-componentes\" class=\"headerlink\" title=\"4 - Flujo de datos entre componentes\"></a>4 - Flujo de datos entre componentes</h4><h4 id=\"5-Servicios-inyectables\"><a href=\"#5-Servicios-inyectables\" class=\"headerlink\" title=\"5 - Servicios inyectables\"></a>5 - Servicios inyectables</h4><h4 id=\"6-Comunicaciones-http\"><a href=\"#6-Comunicaciones-http\" class=\"headerlink\" title=\"6 - Comunicaciones http\"></a>6 - Comunicaciones http</h4><h4 id=\"7-Vigilancia-y-seguridad\"><a href=\"#7-Vigilancia-y-seguridad\" class=\"headerlink\" title=\"7 - Vigilancia y seguridad\"></a>7 - Vigilancia y seguridad</h4><h4 id=\"8-Formularios-reactivos\"><a href=\"#8-Formularios-reactivos\" class=\"headerlink\" title=\"8 - Formularios reactivos\"></a>8 - Formularios reactivos</h4><h4 id=\"9-Material-Design-y-CLI\"><a href=\"#9-Material-Design-y-CLI\" class=\"headerlink\" title=\"9 - Material Design y CLI\"></a>9 - Material Design y CLI</h4><p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Empieza ya!</a></p><h2 id=\"Contenido-detallado-Angular-Basic-1\"><a href=\"#Contenido-detallado-Angular-Basic-1\" class=\"headerlink\" title=\"Contenido detallado Angular Basic\"></a><a href=\"cursos/angular-basic\">Contenido detallado Angular Basic</a></h2><h1 id=\"Angular-Business\"><a href=\"#Angular-Business\" class=\"headerlink\" title=\"Angular Business\"></a>Angular Business</h1><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Implantación de buenas prácticas en desarrollos empresariales con Angular.</a></p><h4 id=\"0-Repositorios-profesionales-con-Nx\"><a href=\"#0-Repositorios-profesionales-con-Nx\" class=\"headerlink\" title=\"0 - Repositorios profesionales con Nx\"></a>0 - Repositorios profesionales con Nx</h4><h4 id=\"1-Testing-de-aplicaciones-con-Cypress-y-Jest\"><a href=\"#1-Testing-de-aplicaciones-con-Cypress-y-Jest\" class=\"headerlink\" title=\"1 - Testing de aplicaciones con Cypress y Jest\"></a>1 - Testing de aplicaciones con Cypress y Jest</h4><h4 id=\"2-Deteccion-del-cambio-en-Angular\"><a href=\"#2-Deteccion-del-cambio-en-Angular\" class=\"headerlink\" title=\"2 - Detección del cambio en Angular\"></a>2 - Detección del cambio en Angular</h4><h4 id=\"3-Componentes-dinamicos-directivas-y-pipes\"><a href=\"#3-Componentes-dinamicos-directivas-y-pipes\" class=\"headerlink\" title=\"3 - Componentes dinámicos, directivas y pipes\"></a>3 - Componentes dinámicos, directivas y pipes</h4><h4 id=\"4-Redux-con-observables-RxJs\"><a href=\"#4-Redux-con-observables-RxJs\" class=\"headerlink\" title=\"4 - Redux con observables RxJs\"></a>4 - Redux con observables RxJs</h4><h4 id=\"5-Redux-con-NgRx\"><a href=\"#5-Redux-con-NgRx\" class=\"headerlink\" title=\"5 - Redux con NgRx\"></a>5 - Redux con NgRx</h4><h4 id=\"6-Deploy-Progressive-Web-Apps\"><a href=\"#6-Deploy-Progressive-Web-Apps\" class=\"headerlink\" title=\"6 - Deploy Progressive Web Apps\"></a>6 - Deploy Progressive Web Apps</h4><h4 id=\"7-Server-Side-Rendering\"><a href=\"#7-Server-Side-Rendering\" class=\"headerlink\" title=\"7 - Server Side Rendering\"></a>7 - Server Side Rendering</h4><h4 id=\"8-Internacionalizacion-y-puesta-en-produccion\"><a href=\"#8-Internacionalizacion-y-puesta-en-produccion\" class=\"headerlink\" title=\"8 - Internacionalización y puesta en producción\"></a>8 - Internacionalización y puesta en producción</h4><h4 id=\"9-Web-Components\"><a href=\"#9-Web-Components\" class=\"headerlink\" title=\"9 - Web Components\"></a>9 - Web Components</h4><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/\" target=\"_blank\" rel=\"noopener\">Mejora ya!</a><br><a href=\"cursos/angular-business\">Contenido detallado Angular Business</a></p><blockquote><p>Con diploma acreditativo, bolsa de trabajo y bonificables por Fundae.<br>– <cite>Aprende online con Alberto Basalo</cite></p></blockquote><p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Angular Basic: Curso de introducción desde cero al desarrollo con Angular.</a></p><p><a href=\"https://www.trainingit.es/curso-angular-avanzado/?promo=meetup10&af=abasalo/\" target=\"_blank\" rel=\"noopener\">Angular Business: Curso de implantación de buenas prácticas en desarrollos empresariales con Angular.</a></p>"},{"title":"Noticias Junio 2016","id":16,"updated":"2016-06-06T12:28:19.000Z","date":"2016-06-03T08:44:51.000Z","_content":"\n##06-06-16\n\n\n###Angular 2 R.C.: La evolución de la plataforma.\nAngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo ...JS. Pero la esperada versión [Angular2](http://angular.io) lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.\n\nTodo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora [es una plataforma](/angular2-primeras-impresiones/) mucho más cercana al mundo empresarial. \n\nUsa esta [serie de artículos sobre Angular2](/tag/angular2/) como tutorial para adaptarte a esta evolución.\n \n###Enlaces para aprender\n####[AngularJS] : [Mejorar el Rendimiento en una línea.]()\nParece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.\n \n####[JavaScript] : [La fatiga de frameworks comparada.]()\nEmpiezo por la consabida broma de pedir una moratoria en el desarrollo de armas... digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.\n \n####[NodeJS] : [Monitorizar aplicaciones bien y fácil.]()\nSi no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(' ;-) ').\n \n####[MongoDB] : [Rendimiento y Monitorización de MongoDB.]()\nAhora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.\n \n####[CleanCode] : [Escribe código pensando en mantenerlo.]()\nEscribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.\n \n###Próximas actividades\nEste es el mes de Angular2. Su estreno como Release Candidate permite ofrecer [formación con garantías](/promociones). Nos vemos.\n\n \n>*Keep coding, keep learning.*","source":"Noticias-Junio-2016/index.md","raw":"---\ntitle: Noticias Junio 2016\npermalink: noticias-junio-16\nid: 16\nupdated: '2016-06-06 14:28:19'\ndate: 2016-06-03 10:44:51\n---\n\n##06-06-16\n\n\n###Angular 2 R.C.: La evolución de la plataforma.\nAngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo ...JS. Pero la esperada versión [Angular2](http://angular.io) lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.\n\nTodo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora [es una plataforma](/angular2-primeras-impresiones/) mucho más cercana al mundo empresarial. \n\nUsa esta [serie de artículos sobre Angular2](/tag/angular2/) como tutorial para adaptarte a esta evolución.\n \n###Enlaces para aprender\n####[AngularJS] : [Mejorar el Rendimiento en una línea.]()\nParece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.\n \n####[JavaScript] : [La fatiga de frameworks comparada.]()\nEmpiezo por la consabida broma de pedir una moratoria en el desarrollo de armas... digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.\n \n####[NodeJS] : [Monitorizar aplicaciones bien y fácil.]()\nSi no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(' ;-) ').\n \n####[MongoDB] : [Rendimiento y Monitorización de MongoDB.]()\nAhora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar  las instalciones.\n \n####[CleanCode] : [Escribe código pensando en mantenerlo.]()\nEscribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.\n \n###Próximas actividades\nEste es el mes de Angular2. Su estreno como Release Candidate permite ofrecer [formación con garantías](/promociones). Nos vemos.\n\n \n>*Keep coding, keep learning.*","path":"noticias-junio-16.html","comments":1,"layout":"page","_id":"cjyh5p4am000718s3eak9xamx","content":"<p>##06-06-16</p><p>###Angular 2 R.C.: La evolución de la plataforma.<br>AngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo …JS. Pero la esperada versión <a href=\"http://angular.io\" target=\"_blank\" rel=\"noopener\">Angular2</a> lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.</p><p>Todo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora <a href=\"/angular2-primeras-impresiones/\">es una plataforma</a> mucho más cercana al mundo empresarial.</p><p>Usa esta <a href=\"/tag/angular2/\">serie de artículos sobre Angular2</a> como tutorial para adaptarte a esta evolución.</p><p>###Enlaces para aprender</p><p>####[AngularJS] : <a href=\"\">Mejorar el Rendimiento en una línea.</a><br>Parece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.</p><p>####[JavaScript] : <a href=\"\">La fatiga de frameworks comparada.</a><br>Empiezo por la consabida broma de pedir una moratoria en el desarrollo de armas… digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.</p><p>####[NodeJS] : <a href=\"\">Monitorizar aplicaciones bien y fácil.</a><br>Si no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(‘ ;-) ‘).</p><p>####[MongoDB] : <a href=\"\">Rendimiento y Monitorización de MongoDB.</a><br>Ahora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar las instalciones.</p><p>####[CleanCode] : <a href=\"\">Escribe código pensando en mantenerlo.</a><br>Escribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.</p><p>###Próximas actividades<br>Este es el mes de Angular2. Su estreno como Release Candidate permite ofrecer <a href=\"/promociones\">formación con garantías</a>. Nos vemos.</p><blockquote><p><em>Keep coding, keep learning.</em></p></blockquote>","site":{"data":{}},"excerpt":"","more":"<p>##06-06-16</p><p>###Angular 2 R.C.: La evolución de la plataforma.<br>AngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo …JS. Pero la esperada versión <a href=\"http://angular.io\" target=\"_blank\" rel=\"noopener\">Angular2</a> lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.</p><p>Todo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora <a href=\"/angular2-primeras-impresiones/\">es una plataforma</a> mucho más cercana al mundo empresarial.</p><p>Usa esta <a href=\"/tag/angular2/\">serie de artículos sobre Angular2</a> como tutorial para adaptarte a esta evolución.</p><p>###Enlaces para aprender</p><p>####[AngularJS] : <a href=\"\">Mejorar el Rendimiento en una línea.</a><br>Parece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.</p><p>####[JavaScript] : <a href=\"\">La fatiga de frameworks comparada.</a><br>Empiezo por la consabida broma de pedir una moratoria en el desarrollo de armas… digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.</p><p>####[NodeJS] : <a href=\"\">Monitorizar aplicaciones bien y fácil.</a><br>Si no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(‘ ;-) ‘).</p><p>####[MongoDB] : <a href=\"\">Rendimiento y Monitorización de MongoDB.</a><br>Ahora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar las instalciones.</p><p>####[CleanCode] : <a href=\"\">Escribe código pensando en mantenerlo.</a><br>Escribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.</p><p>###Próximas actividades<br>Este es el mes de Angular2. Su estreno como Release Candidate permite ofrecer <a href=\"/promociones\">formación con garantías</a>. Nos vemos.</p><blockquote><p><em>Keep coding, keep learning.</em></p></blockquote>"},{"title":"Cookies","id":9,"updated":"2016-04-18T13:48:28.000Z","date":"2016-04-14T12:29:58.000Z","_content":"\nUtilizamos cookies para facilitar el uso de nuestra página web. \n\nLas cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. \n\nLas utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con\nanterioridad, o si su visita es nueva o recurrente. \n\nLas cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. \n\nEn caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. ","source":"Cookies/index.md","raw":"---\ntitle: Cookies\npermalink: cookies\nid: 9\nupdated: '2016-04-18 15:48:28'\ndate: 2016-04-14 14:29:58\n---\n\nUtilizamos cookies para facilitar el uso de nuestra página web. \n\nLas cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web. \n\nLas utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con\nanterioridad, o si su visita es nueva o recurrente. \n\nLas cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle. \n\nEn caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas. ","path":"cookies.html","comments":1,"layout":"page","_id":"cjyh5p4ao000918s3y53yncb0","content":"<p>Utilizamos cookies para facilitar el uso de nuestra página web.</p><p>Las cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web.</p><p>Las utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con<br>anterioridad, o si su visita es nueva o recurrente.</p><p>Las cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle.</p><p>En caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas.</p>","site":{"data":{}},"excerpt":"","more":"<p>Utilizamos cookies para facilitar el uso de nuestra página web.</p><p>Las cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web.</p><p>Las utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista con<br>anterioridad, o si su visita es nueva o recurrente.</p><p>Las cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle.</p><p>En caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas.</p>"},{"title":"Cursos Online de introducción a Angular","updated":"2019-04-24T12:07:39.000Z","date":"2019-03-20T09:07:39.000Z","_content":"\n[Angular Basic: Curso de introducción desde cero al desarrollo con Angular.](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n\n## [0 - Hola Angular CLI](../hola-angular-cli)\n\n### 0.1 Angular y el CLI\n\n- Instalación de Angular CLI 7\n- Crear y ejecutar aplicaciones Angular\n\n### 0.2 Estructura de una aplicación Angular\n\n- Ficheros y carpetas principales\n- Edición de un Hola Mundo\n\n### 0.3 Configuración\n\n- Configurar el CLI\n- Configurar el Workflow\n- Configurar la aplicación\n\n### 0.4 Angular y su ecosistema\n\n- Extensiones de Visual Studio\n- Configurar Prettier\n- Ecosistema de terceros\n\n## [1 - Base para una aplicación Angular](../base-aplicacion-angular)\n\n### 1.1 - Módulos\n\n- Anatomía de un módulo\n- Generación de módulos\n\n### 1.2 - Componentes\n\n- Anatomía de un componente\n- Generación de componentes\n\n### 1.3 - Visibilidad entre componentes\n\n- Componentes públicos y privados\n- Importación y exportación entre módulos\n\n### 1.4 - Transitividad y Organización\n\n- Transitividad en una cadena de módulos\n- Organización de la aplicación en módulos\n\n## [2 - Páginas y rutas SPA](../paginas-y-rutas-angular-spa)\n\n### 2.1 Rutas\n\n- RouterModule\n- Router Outlet\n- Router Link\n\n### 2.2 Lazy Loading\n\n- Webpack y los bundles por ruta\n- El enrutador delegado\n- Navegación\n\n### 2.3 Rutas anidadas\n\n- Children\n- RouterOutlet anidado\n\n### 2.4 Parámetros\n\n- Variables en la ruta\n- ActivatedRoute\n\n## [3 - Formularios, tablas y modelos de datos](../formularios-tablas-y-modelos-de-datos-en-angular)\n\n### 3.1 Binding\n\n- Base\n- Directivas\n\n### 3.2 Doble Binding\n\n- NgModel\n- Form\n\n### 3.3 Estructuras\n\n- ngFor\n- ngIf\n\n### 3.4 Modelo y controlador\n\n- Interfaces y modelos\n- ViewModel en el controlador\n\n## [4 - Flujo de datos entre componentes](../flujo-de-datos-entre-componentes-angular)\n\n### 4.1 Comunicación entre componentes\n\n- Necesidad de comunicación\n- Escenarios\n\n### 4.2 Contenedor / Presentadores\n\n- El patrón Contenedor / Presentadores\n- El contenedor\n- Envío hacia el presentador con @Input()\n- Respuesta del presentador con @Output()\n\n### 4.3 Otras comunicaciones\n\n- Comunicación entre distintas páginas\n- Comunicación entre estructuras desacopladas\n\n## [5 - Servicios inyectables](../servicios-inyectables-en-Angular)\n\n### 5.1 Inyección de dependencias\n\n- Generación de servicios\n- Consumo de dependencias\n\n### 5.2 Inversión del control\n\n- Interface y servicio base\n- Implementaciones\n- Provisión manual\n- Factoría\n\n## [6 - Comunicaciones http](../comunicaciones-http-en-Angular)\n\n### 6.1 El servicio HttpClient\n\n- Importación y declaración de servicios\n- Obtención de datos\n- Envío de datos\n- Actualización de datos\n\n### 6.2 Observables\n\n- Async\n- pipe\n- operators\n\n### 6.3 Interceptores\n\n- La interfaz HttpInterceptor\n- Inversión del control vía token\n- Un auditor de llamadas\n\n## [7 - Vigilancia y seguridad](../vigilancia-y-seguridad-en-Angular)\n\n### 7.1 Observables para monitorizar datos\n\n- Productores de observables\n- Un Store de notificaciones\n- Desacoplados pero conectados\n\n### 7.2 Interceptores para gestionar errores\n\n- El operador catchError\n- Gestión centralizada de errores\n\n### 7.3 Un notificador de problemas\n\n- Emisión mediante el Store\n- Recepción desacoplada del interceptor\n\n## [8 - Formularios reactivos](formularios-reactivos-con-Angular)\n\n### 8.1 Desacople entre vista y modelo\n\n- Form builder\n- Form control\n- Form view\n\n### 8.2 Validación y estados\n\n- Validadores predefinidos y personalizados\n- Estados de cambio y validación\n\n### 8.3 Un gestor de credenciales\n\n- Detección y redirección de intrusos\n- Almacenamiento y uso del token\n\n## [9 - Material Design y CLI](../Material-Design-y-CLI-de-Angular)\n\n### 9.1 Repositorio multi-proyecto\n\n- Carpetas src y projects\n- Compilación multi - proyecto\n\n### 9.2 Instalación y configuración de Material\n\n- Agregar dependencias con schematics\n- Estilos, iconos y temas básicos\n\n### 9.3 Componentes básicos\n\n- Navegación y layout\n- Componentes básicos\n\n[Empieza ya!](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n\n[Contenido detallado Angular Business](../cursos/angular-business)","source":"Cursos/angular-basic.md","raw":"---\ntitle: Cursos Online de introducción a Angular\npermalink: cursos/angular-basic\nupdated: '2019-04-24 14:07:39'\ndate: 2019-03-20 10:07:39\n---\n\n[Angular Basic: Curso de introducción desde cero al desarrollo con Angular.](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n\n## [0 - Hola Angular CLI](../hola-angular-cli)\n\n### 0.1 Angular y el CLI\n\n- Instalación de Angular CLI 7\n- Crear y ejecutar aplicaciones Angular\n\n### 0.2 Estructura de una aplicación Angular\n\n- Ficheros y carpetas principales\n- Edición de un Hola Mundo\n\n### 0.3 Configuración\n\n- Configurar el CLI\n- Configurar el Workflow\n- Configurar la aplicación\n\n### 0.4 Angular y su ecosistema\n\n- Extensiones de Visual Studio\n- Configurar Prettier\n- Ecosistema de terceros\n\n## [1 - Base para una aplicación Angular](../base-aplicacion-angular)\n\n### 1.1 - Módulos\n\n- Anatomía de un módulo\n- Generación de módulos\n\n### 1.2 - Componentes\n\n- Anatomía de un componente\n- Generación de componentes\n\n### 1.3 - Visibilidad entre componentes\n\n- Componentes públicos y privados\n- Importación y exportación entre módulos\n\n### 1.4 - Transitividad y Organización\n\n- Transitividad en una cadena de módulos\n- Organización de la aplicación en módulos\n\n## [2 - Páginas y rutas SPA](../paginas-y-rutas-angular-spa)\n\n### 2.1 Rutas\n\n- RouterModule\n- Router Outlet\n- Router Link\n\n### 2.2 Lazy Loading\n\n- Webpack y los bundles por ruta\n- El enrutador delegado\n- Navegación\n\n### 2.3 Rutas anidadas\n\n- Children\n- RouterOutlet anidado\n\n### 2.4 Parámetros\n\n- Variables en la ruta\n- ActivatedRoute\n\n## [3 - Formularios, tablas y modelos de datos](../formularios-tablas-y-modelos-de-datos-en-angular)\n\n### 3.1 Binding\n\n- Base\n- Directivas\n\n### 3.2 Doble Binding\n\n- NgModel\n- Form\n\n### 3.3 Estructuras\n\n- ngFor\n- ngIf\n\n### 3.4 Modelo y controlador\n\n- Interfaces y modelos\n- ViewModel en el controlador\n\n## [4 - Flujo de datos entre componentes](../flujo-de-datos-entre-componentes-angular)\n\n### 4.1 Comunicación entre componentes\n\n- Necesidad de comunicación\n- Escenarios\n\n### 4.2 Contenedor / Presentadores\n\n- El patrón Contenedor / Presentadores\n- El contenedor\n- Envío hacia el presentador con @Input()\n- Respuesta del presentador con @Output()\n\n### 4.3 Otras comunicaciones\n\n- Comunicación entre distintas páginas\n- Comunicación entre estructuras desacopladas\n\n## [5 - Servicios inyectables](../servicios-inyectables-en-Angular)\n\n### 5.1 Inyección de dependencias\n\n- Generación de servicios\n- Consumo de dependencias\n\n### 5.2 Inversión del control\n\n- Interface y servicio base\n- Implementaciones\n- Provisión manual\n- Factoría\n\n## [6 - Comunicaciones http](../comunicaciones-http-en-Angular)\n\n### 6.1 El servicio HttpClient\n\n- Importación y declaración de servicios\n- Obtención de datos\n- Envío de datos\n- Actualización de datos\n\n### 6.2 Observables\n\n- Async\n- pipe\n- operators\n\n### 6.3 Interceptores\n\n- La interfaz HttpInterceptor\n- Inversión del control vía token\n- Un auditor de llamadas\n\n## [7 - Vigilancia y seguridad](../vigilancia-y-seguridad-en-Angular)\n\n### 7.1 Observables para monitorizar datos\n\n- Productores de observables\n- Un Store de notificaciones\n- Desacoplados pero conectados\n\n### 7.2 Interceptores para gestionar errores\n\n- El operador catchError\n- Gestión centralizada de errores\n\n### 7.3 Un notificador de problemas\n\n- Emisión mediante el Store\n- Recepción desacoplada del interceptor\n\n## [8 - Formularios reactivos](formularios-reactivos-con-Angular)\n\n### 8.1 Desacople entre vista y modelo\n\n- Form builder\n- Form control\n- Form view\n\n### 8.2 Validación y estados\n\n- Validadores predefinidos y personalizados\n- Estados de cambio y validación\n\n### 8.3 Un gestor de credenciales\n\n- Detección y redirección de intrusos\n- Almacenamiento y uso del token\n\n## [9 - Material Design y CLI](../Material-Design-y-CLI-de-Angular)\n\n### 9.1 Repositorio multi-proyecto\n\n- Carpetas src y projects\n- Compilación multi - proyecto\n\n### 9.2 Instalación y configuración de Material\n\n- Agregar dependencias con schematics\n- Estilos, iconos y temas básicos\n\n### 9.3 Componentes básicos\n\n- Navegación y layout\n- Componentes básicos\n\n[Empieza ya!](https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo)\n\n[Contenido detallado Angular Business](../cursos/angular-business)","path":"cursos/angular-basic.html","comments":1,"layout":"page","_id":"cjyh5p4as000b18s3aiy9su9a","content":"<p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Angular Basic: Curso de introducción desde cero al desarrollo con Angular.</a></p><h2 id=\"0-Hola-Angular-CLI\"><a href=\"#0-Hola-Angular-CLI\" class=\"headerlink\" title=\"0 - Hola Angular CLI\"></a><a href=\"../hola-angular-cli\">0 - Hola Angular CLI</a></h2><h3 id=\"0-1-Angular-y-el-CLI\"><a href=\"#0-1-Angular-y-el-CLI\" class=\"headerlink\" title=\"0.1 Angular y el CLI\"></a>0.1 Angular y el CLI</h3><ul><li>Instalación de Angular CLI 7</li><li>Crear y ejecutar aplicaciones Angular</li></ul><h3 id=\"0-2-Estructura-de-una-aplicacion-Angular\"><a href=\"#0-2-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"0.2 Estructura de una aplicación Angular\"></a>0.2 Estructura de una aplicación Angular</h3><ul><li>Ficheros y carpetas principales</li><li>Edición de un Hola Mundo</li></ul><h3 id=\"0-3-Configuracion\"><a href=\"#0-3-Configuracion\" class=\"headerlink\" title=\"0.3 Configuración\"></a>0.3 Configuración</h3><ul><li>Configurar el CLI</li><li>Configurar el Workflow</li><li>Configurar la aplicación</li></ul><h3 id=\"0-4-Angular-y-su-ecosistema\"><a href=\"#0-4-Angular-y-su-ecosistema\" class=\"headerlink\" title=\"0.4 Angular y su ecosistema\"></a>0.4 Angular y su ecosistema</h3><ul><li>Extensiones de Visual Studio</li><li>Configurar Prettier</li><li>Ecosistema de terceros</li></ul><h2 id=\"1-Base-para-una-aplicacion-Angular\"><a href=\"#1-Base-para-una-aplicacion-Angular\" class=\"headerlink\" title=\"1 - Base para una aplicación Angular\"></a><a href=\"../base-aplicacion-angular\">1 - Base para una aplicación Angular</a></h2><h3 id=\"1-1-Modulos\"><a href=\"#1-1-Modulos\" class=\"headerlink\" title=\"1.1 - Módulos\"></a>1.1 - Módulos</h3><ul><li>Anatomía de un módulo</li><li>Generación de módulos</li></ul><h3 id=\"1-2-Componentes\"><a href=\"#1-2-Componentes\" class=\"headerlink\" title=\"1.2 - Componentes\"></a>1.2 - Componentes</h3><ul><li>Anatomía de un componente</li><li>Generación de componentes</li></ul><h3 id=\"1-3-Visibilidad-entre-componentes\"><a href=\"#1-3-Visibilidad-entre-componentes\" class=\"headerlink\" title=\"1.3 - Visibilidad entre componentes\"></a>1.3 - Visibilidad entre componentes</h3><ul><li>Componentes públicos y privados</li><li>Importación y exportación entre módulos</li></ul><h3 id=\"1-4-Transitividad-y-Organizacion\"><a href=\"#1-4-Transitividad-y-Organizacion\" class=\"headerlink\" title=\"1.4 - Transitividad y Organización\"></a>1.4 - Transitividad y Organización</h3><ul><li>Transitividad en una cadena de módulos</li><li>Organización de la aplicación en módulos</li></ul><h2 id=\"2-Paginas-y-rutas-SPA\"><a href=\"#2-Paginas-y-rutas-SPA\" class=\"headerlink\" title=\"2 - Páginas y rutas SPA\"></a><a href=\"../paginas-y-rutas-angular-spa\">2 - Páginas y rutas SPA</a></h2><h3 id=\"2-1-Rutas\"><a href=\"#2-1-Rutas\" class=\"headerlink\" title=\"2.1 Rutas\"></a>2.1 Rutas</h3><ul><li>RouterModule</li><li>Router Outlet</li><li>Router Link</li></ul><h3 id=\"2-2-Lazy-Loading\"><a href=\"#2-2-Lazy-Loading\" class=\"headerlink\" title=\"2.2 Lazy Loading\"></a>2.2 Lazy Loading</h3><ul><li>Webpack y los bundles por ruta</li><li>El enrutador delegado</li><li>Navegación</li></ul><h3 id=\"2-3-Rutas-anidadas\"><a href=\"#2-3-Rutas-anidadas\" class=\"headerlink\" title=\"2.3 Rutas anidadas\"></a>2.3 Rutas anidadas</h3><ul><li>Children</li><li>RouterOutlet anidado</li></ul><h3 id=\"2-4-Parametros\"><a href=\"#2-4-Parametros\" class=\"headerlink\" title=\"2.4 Parámetros\"></a>2.4 Parámetros</h3><ul><li>Variables en la ruta</li><li>ActivatedRoute</li></ul><h2 id=\"3-Formularios-tablas-y-modelos-de-datos\"><a href=\"#3-Formularios-tablas-y-modelos-de-datos\" class=\"headerlink\" title=\"3 - Formularios, tablas y modelos de datos\"></a><a href=\"../formularios-tablas-y-modelos-de-datos-en-angular\">3 - Formularios, tablas y modelos de datos</a></h2><h3 id=\"3-1-Binding\"><a href=\"#3-1-Binding\" class=\"headerlink\" title=\"3.1 Binding\"></a>3.1 Binding</h3><ul><li>Base</li><li>Directivas</li></ul><h3 id=\"3-2-Doble-Binding\"><a href=\"#3-2-Doble-Binding\" class=\"headerlink\" title=\"3.2 Doble Binding\"></a>3.2 Doble Binding</h3><ul><li>NgModel</li><li>Form</li></ul><h3 id=\"3-3-Estructuras\"><a href=\"#3-3-Estructuras\" class=\"headerlink\" title=\"3.3 Estructuras\"></a>3.3 Estructuras</h3><ul><li>ngFor</li><li>ngIf</li></ul><h3 id=\"3-4-Modelo-y-controlador\"><a href=\"#3-4-Modelo-y-controlador\" class=\"headerlink\" title=\"3.4 Modelo y controlador\"></a>3.4 Modelo y controlador</h3><ul><li>Interfaces y modelos</li><li>ViewModel en el controlador</li></ul><h2 id=\"4-Flujo-de-datos-entre-componentes\"><a href=\"#4-Flujo-de-datos-entre-componentes\" class=\"headerlink\" title=\"4 - Flujo de datos entre componentes\"></a><a href=\"../flujo-de-datos-entre-componentes-angular\">4 - Flujo de datos entre componentes</a></h2><h3 id=\"4-1-Comunicacion-entre-componentes\"><a href=\"#4-1-Comunicacion-entre-componentes\" class=\"headerlink\" title=\"4.1 Comunicación entre componentes\"></a>4.1 Comunicación entre componentes</h3><ul><li>Necesidad de comunicación</li><li>Escenarios</li></ul><h3 id=\"4-2-Contenedor-Presentadores\"><a href=\"#4-2-Contenedor-Presentadores\" class=\"headerlink\" title=\"4.2 Contenedor / Presentadores\"></a>4.2 Contenedor / Presentadores</h3><ul><li>El patrón Contenedor / Presentadores</li><li>El contenedor</li><li>Envío hacia el presentador con @Input()</li><li>Respuesta del presentador con @Output()</li></ul><h3 id=\"4-3-Otras-comunicaciones\"><a href=\"#4-3-Otras-comunicaciones\" class=\"headerlink\" title=\"4.3 Otras comunicaciones\"></a>4.3 Otras comunicaciones</h3><ul><li>Comunicación entre distintas páginas</li><li>Comunicación entre estructuras desacopladas</li></ul><h2 id=\"5-Servicios-inyectables\"><a href=\"#5-Servicios-inyectables\" class=\"headerlink\" title=\"5 - Servicios inyectables\"></a><a href=\"../servicios-inyectables-en-Angular\">5 - Servicios inyectables</a></h2><h3 id=\"5-1-Inyeccion-de-dependencias\"><a href=\"#5-1-Inyeccion-de-dependencias\" class=\"headerlink\" title=\"5.1 Inyección de dependencias\"></a>5.1 Inyección de dependencias</h3><ul><li>Generación de servicios</li><li>Consumo de dependencias</li></ul><h3 id=\"5-2-Inversion-del-control\"><a href=\"#5-2-Inversion-del-control\" class=\"headerlink\" title=\"5.2 Inversión del control\"></a>5.2 Inversión del control</h3><ul><li>Interface y servicio base</li><li>Implementaciones</li><li>Provisión manual</li><li>Factoría</li></ul><h2 id=\"6-Comunicaciones-http\"><a href=\"#6-Comunicaciones-http\" class=\"headerlink\" title=\"6 - Comunicaciones http\"></a><a href=\"../comunicaciones-http-en-Angular\">6 - Comunicaciones http</a></h2><h3 id=\"6-1-El-servicio-HttpClient\"><a href=\"#6-1-El-servicio-HttpClient\" class=\"headerlink\" title=\"6.1 El servicio HttpClient\"></a>6.1 El servicio HttpClient</h3><ul><li>Importación y declaración de servicios</li><li>Obtención de datos</li><li>Envío de datos</li><li>Actualización de datos</li></ul><h3 id=\"6-2-Observables\"><a href=\"#6-2-Observables\" class=\"headerlink\" title=\"6.2 Observables\"></a>6.2 Observables</h3><ul><li>Async</li><li>pipe</li><li>operators</li></ul><h3 id=\"6-3-Interceptores\"><a href=\"#6-3-Interceptores\" class=\"headerlink\" title=\"6.3 Interceptores\"></a>6.3 Interceptores</h3><ul><li>La interfaz HttpInterceptor</li><li>Inversión del control vía token</li><li>Un auditor de llamadas</li></ul><h2 id=\"7-Vigilancia-y-seguridad\"><a href=\"#7-Vigilancia-y-seguridad\" class=\"headerlink\" title=\"7 - Vigilancia y seguridad\"></a><a href=\"../vigilancia-y-seguridad-en-Angular\">7 - Vigilancia y seguridad</a></h2><h3 id=\"7-1-Observables-para-monitorizar-datos\"><a href=\"#7-1-Observables-para-monitorizar-datos\" class=\"headerlink\" title=\"7.1 Observables para monitorizar datos\"></a>7.1 Observables para monitorizar datos</h3><ul><li>Productores de observables</li><li>Un Store de notificaciones</li><li>Desacoplados pero conectados</li></ul><h3 id=\"7-2-Interceptores-para-gestionar-errores\"><a href=\"#7-2-Interceptores-para-gestionar-errores\" class=\"headerlink\" title=\"7.2 Interceptores para gestionar errores\"></a>7.2 Interceptores para gestionar errores</h3><ul><li>El operador catchError</li><li>Gestión centralizada de errores</li></ul><h3 id=\"7-3-Un-notificador-de-problemas\"><a href=\"#7-3-Un-notificador-de-problemas\" class=\"headerlink\" title=\"7.3 Un notificador de problemas\"></a>7.3 Un notificador de problemas</h3><ul><li>Emisión mediante el Store</li><li>Recepción desacoplada del interceptor</li></ul><h2 id=\"8-Formularios-reactivos\"><a href=\"#8-Formularios-reactivos\" class=\"headerlink\" title=\"8 - Formularios reactivos\"></a><a href=\"formularios-reactivos-con-Angular\">8 - Formularios reactivos</a></h2><h3 id=\"8-1-Desacople-entre-vista-y-modelo\"><a href=\"#8-1-Desacople-entre-vista-y-modelo\" class=\"headerlink\" title=\"8.1 Desacople entre vista y modelo\"></a>8.1 Desacople entre vista y modelo</h3><ul><li>Form builder</li><li>Form control</li><li>Form view</li></ul><h3 id=\"8-2-Validacion-y-estados\"><a href=\"#8-2-Validacion-y-estados\" class=\"headerlink\" title=\"8.2 Validación y estados\"></a>8.2 Validación y estados</h3><ul><li>Validadores predefinidos y personalizados</li><li>Estados de cambio y validación</li></ul><h3 id=\"8-3-Un-gestor-de-credenciales\"><a href=\"#8-3-Un-gestor-de-credenciales\" class=\"headerlink\" title=\"8.3 Un gestor de credenciales\"></a>8.3 Un gestor de credenciales</h3><ul><li>Detección y redirección de intrusos</li><li>Almacenamiento y uso del token</li></ul><h2 id=\"9-Material-Design-y-CLI\"><a href=\"#9-Material-Design-y-CLI\" class=\"headerlink\" title=\"9 - Material Design y CLI\"></a><a href=\"../Material-Design-y-CLI-de-Angular\">9 - Material Design y CLI</a></h2><h3 id=\"9-1-Repositorio-multi-proyecto\"><a href=\"#9-1-Repositorio-multi-proyecto\" class=\"headerlink\" title=\"9.1 Repositorio multi-proyecto\"></a>9.1 Repositorio multi-proyecto</h3><ul><li>Carpetas src y projects</li><li>Compilación multi - proyecto</li></ul><h3 id=\"9-2-Instalacion-y-configuracion-de-Material\"><a href=\"#9-2-Instalacion-y-configuracion-de-Material\" class=\"headerlink\" title=\"9.2 Instalación y configuración de Material\"></a>9.2 Instalación y configuración de Material</h3><ul><li>Agregar dependencias con schematics</li><li>Estilos, iconos y temas básicos</li></ul><h3 id=\"9-3-Componentes-basicos\"><a href=\"#9-3-Componentes-basicos\" class=\"headerlink\" title=\"9.3 Componentes básicos\"></a>9.3 Componentes básicos</h3><ul><li>Navegación y layout</li><li>Componentes básicos</li></ul><p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Empieza ya!</a></p><p><a href=\"../cursos/angular-business\">Contenido detallado Angular Business</a></p>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Angular Basic: Curso de introducción desde cero al desarrollo con Angular.</a></p><h2 id=\"0-Hola-Angular-CLI\"><a href=\"#0-Hola-Angular-CLI\" class=\"headerlink\" title=\"0 - Hola Angular CLI\"></a><a href=\"../hola-angular-cli\">0 - Hola Angular CLI</a></h2><h3 id=\"0-1-Angular-y-el-CLI\"><a href=\"#0-1-Angular-y-el-CLI\" class=\"headerlink\" title=\"0.1 Angular y el CLI\"></a>0.1 Angular y el CLI</h3><ul><li>Instalación de Angular CLI 7</li><li>Crear y ejecutar aplicaciones Angular</li></ul><h3 id=\"0-2-Estructura-de-una-aplicacion-Angular\"><a href=\"#0-2-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"0.2 Estructura de una aplicación Angular\"></a>0.2 Estructura de una aplicación Angular</h3><ul><li>Ficheros y carpetas principales</li><li>Edición de un Hola Mundo</li></ul><h3 id=\"0-3-Configuracion\"><a href=\"#0-3-Configuracion\" class=\"headerlink\" title=\"0.3 Configuración\"></a>0.3 Configuración</h3><ul><li>Configurar el CLI</li><li>Configurar el Workflow</li><li>Configurar la aplicación</li></ul><h3 id=\"0-4-Angular-y-su-ecosistema\"><a href=\"#0-4-Angular-y-su-ecosistema\" class=\"headerlink\" title=\"0.4 Angular y su ecosistema\"></a>0.4 Angular y su ecosistema</h3><ul><li>Extensiones de Visual Studio</li><li>Configurar Prettier</li><li>Ecosistema de terceros</li></ul><h2 id=\"1-Base-para-una-aplicacion-Angular\"><a href=\"#1-Base-para-una-aplicacion-Angular\" class=\"headerlink\" title=\"1 - Base para una aplicación Angular\"></a><a href=\"../base-aplicacion-angular\">1 - Base para una aplicación Angular</a></h2><h3 id=\"1-1-Modulos\"><a href=\"#1-1-Modulos\" class=\"headerlink\" title=\"1.1 - Módulos\"></a>1.1 - Módulos</h3><ul><li>Anatomía de un módulo</li><li>Generación de módulos</li></ul><h3 id=\"1-2-Componentes\"><a href=\"#1-2-Componentes\" class=\"headerlink\" title=\"1.2 - Componentes\"></a>1.2 - Componentes</h3><ul><li>Anatomía de un componente</li><li>Generación de componentes</li></ul><h3 id=\"1-3-Visibilidad-entre-componentes\"><a href=\"#1-3-Visibilidad-entre-componentes\" class=\"headerlink\" title=\"1.3 - Visibilidad entre componentes\"></a>1.3 - Visibilidad entre componentes</h3><ul><li>Componentes públicos y privados</li><li>Importación y exportación entre módulos</li></ul><h3 id=\"1-4-Transitividad-y-Organizacion\"><a href=\"#1-4-Transitividad-y-Organizacion\" class=\"headerlink\" title=\"1.4 - Transitividad y Organización\"></a>1.4 - Transitividad y Organización</h3><ul><li>Transitividad en una cadena de módulos</li><li>Organización de la aplicación en módulos</li></ul><h2 id=\"2-Paginas-y-rutas-SPA\"><a href=\"#2-Paginas-y-rutas-SPA\" class=\"headerlink\" title=\"2 - Páginas y rutas SPA\"></a><a href=\"../paginas-y-rutas-angular-spa\">2 - Páginas y rutas SPA</a></h2><h3 id=\"2-1-Rutas\"><a href=\"#2-1-Rutas\" class=\"headerlink\" title=\"2.1 Rutas\"></a>2.1 Rutas</h3><ul><li>RouterModule</li><li>Router Outlet</li><li>Router Link</li></ul><h3 id=\"2-2-Lazy-Loading\"><a href=\"#2-2-Lazy-Loading\" class=\"headerlink\" title=\"2.2 Lazy Loading\"></a>2.2 Lazy Loading</h3><ul><li>Webpack y los bundles por ruta</li><li>El enrutador delegado</li><li>Navegación</li></ul><h3 id=\"2-3-Rutas-anidadas\"><a href=\"#2-3-Rutas-anidadas\" class=\"headerlink\" title=\"2.3 Rutas anidadas\"></a>2.3 Rutas anidadas</h3><ul><li>Children</li><li>RouterOutlet anidado</li></ul><h3 id=\"2-4-Parametros\"><a href=\"#2-4-Parametros\" class=\"headerlink\" title=\"2.4 Parámetros\"></a>2.4 Parámetros</h3><ul><li>Variables en la ruta</li><li>ActivatedRoute</li></ul><h2 id=\"3-Formularios-tablas-y-modelos-de-datos\"><a href=\"#3-Formularios-tablas-y-modelos-de-datos\" class=\"headerlink\" title=\"3 - Formularios, tablas y modelos de datos\"></a><a href=\"../formularios-tablas-y-modelos-de-datos-en-angular\">3 - Formularios, tablas y modelos de datos</a></h2><h3 id=\"3-1-Binding\"><a href=\"#3-1-Binding\" class=\"headerlink\" title=\"3.1 Binding\"></a>3.1 Binding</h3><ul><li>Base</li><li>Directivas</li></ul><h3 id=\"3-2-Doble-Binding\"><a href=\"#3-2-Doble-Binding\" class=\"headerlink\" title=\"3.2 Doble Binding\"></a>3.2 Doble Binding</h3><ul><li>NgModel</li><li>Form</li></ul><h3 id=\"3-3-Estructuras\"><a href=\"#3-3-Estructuras\" class=\"headerlink\" title=\"3.3 Estructuras\"></a>3.3 Estructuras</h3><ul><li>ngFor</li><li>ngIf</li></ul><h3 id=\"3-4-Modelo-y-controlador\"><a href=\"#3-4-Modelo-y-controlador\" class=\"headerlink\" title=\"3.4 Modelo y controlador\"></a>3.4 Modelo y controlador</h3><ul><li>Interfaces y modelos</li><li>ViewModel en el controlador</li></ul><h2 id=\"4-Flujo-de-datos-entre-componentes\"><a href=\"#4-Flujo-de-datos-entre-componentes\" class=\"headerlink\" title=\"4 - Flujo de datos entre componentes\"></a><a href=\"../flujo-de-datos-entre-componentes-angular\">4 - Flujo de datos entre componentes</a></h2><h3 id=\"4-1-Comunicacion-entre-componentes\"><a href=\"#4-1-Comunicacion-entre-componentes\" class=\"headerlink\" title=\"4.1 Comunicación entre componentes\"></a>4.1 Comunicación entre componentes</h3><ul><li>Necesidad de comunicación</li><li>Escenarios</li></ul><h3 id=\"4-2-Contenedor-Presentadores\"><a href=\"#4-2-Contenedor-Presentadores\" class=\"headerlink\" title=\"4.2 Contenedor / Presentadores\"></a>4.2 Contenedor / Presentadores</h3><ul><li>El patrón Contenedor / Presentadores</li><li>El contenedor</li><li>Envío hacia el presentador con @Input()</li><li>Respuesta del presentador con @Output()</li></ul><h3 id=\"4-3-Otras-comunicaciones\"><a href=\"#4-3-Otras-comunicaciones\" class=\"headerlink\" title=\"4.3 Otras comunicaciones\"></a>4.3 Otras comunicaciones</h3><ul><li>Comunicación entre distintas páginas</li><li>Comunicación entre estructuras desacopladas</li></ul><h2 id=\"5-Servicios-inyectables\"><a href=\"#5-Servicios-inyectables\" class=\"headerlink\" title=\"5 - Servicios inyectables\"></a><a href=\"../servicios-inyectables-en-Angular\">5 - Servicios inyectables</a></h2><h3 id=\"5-1-Inyeccion-de-dependencias\"><a href=\"#5-1-Inyeccion-de-dependencias\" class=\"headerlink\" title=\"5.1 Inyección de dependencias\"></a>5.1 Inyección de dependencias</h3><ul><li>Generación de servicios</li><li>Consumo de dependencias</li></ul><h3 id=\"5-2-Inversion-del-control\"><a href=\"#5-2-Inversion-del-control\" class=\"headerlink\" title=\"5.2 Inversión del control\"></a>5.2 Inversión del control</h3><ul><li>Interface y servicio base</li><li>Implementaciones</li><li>Provisión manual</li><li>Factoría</li></ul><h2 id=\"6-Comunicaciones-http\"><a href=\"#6-Comunicaciones-http\" class=\"headerlink\" title=\"6 - Comunicaciones http\"></a><a href=\"../comunicaciones-http-en-Angular\">6 - Comunicaciones http</a></h2><h3 id=\"6-1-El-servicio-HttpClient\"><a href=\"#6-1-El-servicio-HttpClient\" class=\"headerlink\" title=\"6.1 El servicio HttpClient\"></a>6.1 El servicio HttpClient</h3><ul><li>Importación y declaración de servicios</li><li>Obtención de datos</li><li>Envío de datos</li><li>Actualización de datos</li></ul><h3 id=\"6-2-Observables\"><a href=\"#6-2-Observables\" class=\"headerlink\" title=\"6.2 Observables\"></a>6.2 Observables</h3><ul><li>Async</li><li>pipe</li><li>operators</li></ul><h3 id=\"6-3-Interceptores\"><a href=\"#6-3-Interceptores\" class=\"headerlink\" title=\"6.3 Interceptores\"></a>6.3 Interceptores</h3><ul><li>La interfaz HttpInterceptor</li><li>Inversión del control vía token</li><li>Un auditor de llamadas</li></ul><h2 id=\"7-Vigilancia-y-seguridad\"><a href=\"#7-Vigilancia-y-seguridad\" class=\"headerlink\" title=\"7 - Vigilancia y seguridad\"></a><a href=\"../vigilancia-y-seguridad-en-Angular\">7 - Vigilancia y seguridad</a></h2><h3 id=\"7-1-Observables-para-monitorizar-datos\"><a href=\"#7-1-Observables-para-monitorizar-datos\" class=\"headerlink\" title=\"7.1 Observables para monitorizar datos\"></a>7.1 Observables para monitorizar datos</h3><ul><li>Productores de observables</li><li>Un Store de notificaciones</li><li>Desacoplados pero conectados</li></ul><h3 id=\"7-2-Interceptores-para-gestionar-errores\"><a href=\"#7-2-Interceptores-para-gestionar-errores\" class=\"headerlink\" title=\"7.2 Interceptores para gestionar errores\"></a>7.2 Interceptores para gestionar errores</h3><ul><li>El operador catchError</li><li>Gestión centralizada de errores</li></ul><h3 id=\"7-3-Un-notificador-de-problemas\"><a href=\"#7-3-Un-notificador-de-problemas\" class=\"headerlink\" title=\"7.3 Un notificador de problemas\"></a>7.3 Un notificador de problemas</h3><ul><li>Emisión mediante el Store</li><li>Recepción desacoplada del interceptor</li></ul><h2 id=\"8-Formularios-reactivos\"><a href=\"#8-Formularios-reactivos\" class=\"headerlink\" title=\"8 - Formularios reactivos\"></a><a href=\"formularios-reactivos-con-Angular\">8 - Formularios reactivos</a></h2><h3 id=\"8-1-Desacople-entre-vista-y-modelo\"><a href=\"#8-1-Desacople-entre-vista-y-modelo\" class=\"headerlink\" title=\"8.1 Desacople entre vista y modelo\"></a>8.1 Desacople entre vista y modelo</h3><ul><li>Form builder</li><li>Form control</li><li>Form view</li></ul><h3 id=\"8-2-Validacion-y-estados\"><a href=\"#8-2-Validacion-y-estados\" class=\"headerlink\" title=\"8.2 Validación y estados\"></a>8.2 Validación y estados</h3><ul><li>Validadores predefinidos y personalizados</li><li>Estados de cambio y validación</li></ul><h3 id=\"8-3-Un-gestor-de-credenciales\"><a href=\"#8-3-Un-gestor-de-credenciales\" class=\"headerlink\" title=\"8.3 Un gestor de credenciales\"></a>8.3 Un gestor de credenciales</h3><ul><li>Detección y redirección de intrusos</li><li>Almacenamiento y uso del token</li></ul><h2 id=\"9-Material-Design-y-CLI\"><a href=\"#9-Material-Design-y-CLI\" class=\"headerlink\" title=\"9 - Material Design y CLI\"></a><a href=\"../Material-Design-y-CLI-de-Angular\">9 - Material Design y CLI</a></h2><h3 id=\"9-1-Repositorio-multi-proyecto\"><a href=\"#9-1-Repositorio-multi-proyecto\" class=\"headerlink\" title=\"9.1 Repositorio multi-proyecto\"></a>9.1 Repositorio multi-proyecto</h3><ul><li>Carpetas src y projects</li><li>Compilación multi - proyecto</li></ul><h3 id=\"9-2-Instalacion-y-configuracion-de-Material\"><a href=\"#9-2-Instalacion-y-configuracion-de-Material\" class=\"headerlink\" title=\"9.2 Instalación y configuración de Material\"></a>9.2 Instalación y configuración de Material</h3><ul><li>Agregar dependencias con schematics</li><li>Estilos, iconos y temas básicos</li></ul><h3 id=\"9-3-Componentes-basicos\"><a href=\"#9-3-Componentes-basicos\" class=\"headerlink\" title=\"9.3 Componentes básicos\"></a>9.3 Componentes básicos</h3><ul><li>Navegación y layout</li><li>Componentes básicos</li></ul><p><a href=\"https://www.trainingit.es/curso-angular-basico/?promo=meetup10&af=abasalo\" target=\"_blank\" rel=\"noopener\">Empieza ya!</a></p><p><a href=\"../cursos/angular-business\">Contenido detallado Angular Business</a></p>"},{"title":"Promociones","id":25,"updated":"2016-05-27T06:46:03.000Z","date":"2016-05-10T11:53:10.000Z","_content":"\n#Cursos de Angular2\n\n---\n\n####Online\n\nInicio 9 de junio de 2016\n\n###[Angular 2, desarrollo de aplicaciones empresariales con HTML](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\nCon EscuelaIT\n\n\n---\n\n####Presencial en Coruña\n\nInicio 10 de junio de 2016\n\n###[A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x](http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x)\n\nCon Vitae Digital","source":"Promociones/index.md","raw":"---\ntitle: Promociones\npermalink: promociones\nid: 25\nupdated: '2016-05-27 08:46:03'\ndate: 2016-05-10 13:53:10\n---\n\n#Cursos de Angular2\n\n---\n\n####Online\n\nInicio 9 de junio de 2016\n\n###[Angular 2, desarrollo de aplicaciones empresariales con HTML](http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/)\n\nCon EscuelaIT\n\n\n---\n\n####Presencial en Coruña\n\nInicio 10 de junio de 2016\n\n###[A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x](http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x)\n\nCon Vitae Digital","path":"promociones.html","comments":1,"layout":"page","_id":"cjyh5p4aw000d18s3cx8y3rzx","content":"<p>#Cursos de Angular2</p><hr><p>####Online</p><p>Inicio 9 de junio de 2016</p><p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"noopener\">Angular 2, desarrollo de aplicaciones empresariales con HTML</a></p><p>Con EscuelaIT</p><hr><p>####Presencial en Coruña</p><p>Inicio 10 de junio de 2016</p><p>###<a href=\"http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x\" target=\"_blank\" rel=\"noopener\">A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x</a></p><p>Con Vitae Digital</p>","site":{"data":{}},"excerpt":"","more":"<p>#Cursos de Angular2</p><hr><p>####Online</p><p>Inicio 9 de junio de 2016</p><p>###<a href=\"http://escuela.it/cursos/angular-2-desarrollo-aplicaciones-empresariales-html/\" target=\"_blank\" rel=\"noopener\">Angular 2, desarrollo de aplicaciones empresariales con HTML</a></p><p>Con EscuelaIT</p><hr><p>####Presencial en Coruña</p><p>Inicio 10 de junio de 2016</p><p>###<a href=\"http://vitaedigital.com/ofertas-formacion/#a-coruna-curso-en-abierto-de-angular2-typescript-y-estrategias-de-migracion-de-versiones-1-x\" target=\"_blank\" rel=\"noopener\">A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.x</a></p><p>Con Vitae Digital</p>"},{"title":"[object Object]","tags":null,"_content":"","source":"scaffolds/draft.md","raw":"---\ntitle: {{ title }}\ntags:\n---\n","date":"2018-05-03T08:56:05.855Z","updated":"2018-05-03T08:56:05.855Z","path":"scaffolds/draft.html","comments":1,"layout":"page","_id":"cjyh5p4c6000t18s3ot6pao7p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[object Object]","date":"2018-05-03T08:56:05.871Z","_content":"","source":"scaffolds/page.md","raw":"---\ntitle: {{ title }}\ndate: {{ date }}\n---\n","updated":"2018-05-03T08:56:05.871Z","path":"scaffolds/page.html","comments":1,"layout":"page","_id":"cjyh5p4ce000w18s3kqe8vfto","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[object Object]","date":"2018-05-03T08:56:05.871Z","tags":null,"_content":"","source":"scaffolds/post.md","raw":"---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n","updated":"2018-05-03T08:56:05.871Z","path":"scaffolds/post.html","comments":1,"layout":"page","_id":"cjyh5p4cf000x18s3grtkvprq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Para qué puedo usar NodeJS","id":"20","updated":"2015-08-20T12:53:50.000Z","date":"2015-08-20T12:28:01.000Z","_content":"\nNodeJS se ha hecho muy popular por dos razones relacionas: **potencia y escalabilidad.** Ambas derivadas de su modelo de *ejecución asíncrona no bloqueante*.\n\nSe basa en el lenguaje **JavaScript**: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.\n\nEl uso más inmediato de NodeJS está en la **programación de servicios web**. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el *JavaScript del lado del servidor.*\n\nPero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir **aplicaciones de escritorio** con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para **scripts de administración o monitorización** en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los *development workflows* de cada vez más empresas de programación en cualquier lenguaje.\n\nDada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en **tiempo real**. Y por su escasa demanda de *hardware* se usa también en proyectos de **Internet of Things**\n\nEn definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje **de propósito general.**\n\n\n","source":"_posts/Para-que-puedo-usar-NodeJS.md","raw":"---\ntitle: Para qué puedo usar NodeJS\ntags:\n- NodeJS\n- Introducción\npermalink: para-que-puedo-usar-nodejs\nid: 20\nupdated: '2015-08-20 14:53:50'\ndate: 2015-08-20 14:28:01\n---\n\nNodeJS se ha hecho muy popular por dos razones relacionas: **potencia y escalabilidad.** Ambas derivadas de su modelo de *ejecución asíncrona no bloqueante*.\n\nSe basa en el lenguaje **JavaScript**: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.\n\nEl uso más inmediato de NodeJS está en la **programación de servicios web**. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el *JavaScript del lado del servidor.*\n\nPero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir **aplicaciones de escritorio** con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para **scripts de administración o monitorización** en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los *development workflows* de cada vez más empresas de programación en cualquier lenguaje.\n\nDada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en **tiempo real**. Y por su escasa demanda de *hardware* se usa también en proyectos de **Internet of Things**\n\nEn definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje **de propósito general.**\n\n\n","slug":"para-que-puedo-usar-nodejs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4ac000218s39sjyo11e","content":"<p>NodeJS se ha hecho muy popular por dos razones relacionas: <strong>potencia y escalabilidad.</strong> Ambas derivadas de su modelo de <em>ejecución asíncrona no bloqueante</em>.</p><p>Se basa en el lenguaje <strong>JavaScript</strong>: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.</p><p>El uso más inmediato de NodeJS está en la <strong>programación de servicios web</strong>. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el <em>JavaScript del lado del servidor.</em></p><p>Pero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir <strong>aplicaciones de escritorio</strong> con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para <strong>scripts de administración o monitorización</strong> en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los <em>development workflows</em> de cada vez más empresas de programación en cualquier lenguaje.</p><p>Dada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en <strong>tiempo real</strong>. Y por su escasa demanda de <em>hardware</em> se usa también en proyectos de <strong>Internet of Things</strong></p><p>En definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje <strong>de propósito general.</strong></p>","site":{"data":{}},"excerpt":"","more":"<p>NodeJS se ha hecho muy popular por dos razones relacionas: <strong>potencia y escalabilidad.</strong> Ambas derivadas de su modelo de <em>ejecución asíncrona no bloqueante</em>.</p><p>Se basa en el lenguaje <strong>JavaScript</strong>: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.</p><p>El uso más inmediato de NodeJS está en la <strong>programación de servicios web</strong>. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el <em>JavaScript del lado del servidor.</em></p><p>Pero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir <strong>aplicaciones de escritorio</strong> con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para <strong>scripts de administración o monitorización</strong> en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los <em>development workflows</em> de cada vez más empresas de programación en cualquier lenguaje.</p><p>Dada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en <strong>tiempo real</strong>. Y por su escasa demanda de <em>hardware</em> se usa también en proyectos de <strong>Internet of Things</strong></p><p>En definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje <strong>de propósito general.</strong></p>"},{"title":"Nx, mono repositorios en Angular","date":"2019-09-03T16:59:27.000Z","thumbnail":"/css/images/angular-10_monorepo.png","_content":"\n![nx-mono-repositorios-en-Angular](/images/tutorial-angular-10_monorepo.png)\n\nEmpiezo este **tutorial de Angular Avanzado** con la frase con la que acabé un artículo de opinión sobre arquitectura de software acerca de [Angular para grandes aplicaciones.](https://medium.com/@albertobasalo71/angular-para-grandes-aplicaciones-b66786fd3032)\n\n> Angular y las decisiones de diseño que le acompañan tienen como objetivo facilitar el desarrollo y mantenimiento a medio y largo plazo de aplicaciones web no triviales.\n\nLas empresas de desarrollo y los clientes finales que escogen **Angular**, suelen ser de tamaño medio o grande. Cuanto mayor sea el problema más destaca este _framework_. Y tarde o temprano esos grandes proyectos necesitarán compartir o reutilizar código. La herramienta [Nx de Nrwl](https://nx.dev/angular) ayuda en esa tarea facilitando la creación de espacios de trabajo multi proyecto: **los mono repositorios.**\n\n<!-- more -->\n\nPartiendo de cero y usando las herramientas de [Nrwl.io/](https://nrwl.io/) crearemos un _blueprint_ para desarrollar grandes aplicaciones. Al finalizar tendrás, en el mismo repositorio, un par de aplicaciones y varias librerías reutilizables creadas con los _Nx power-ups_.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Crear el repositorio.](./#1-Crear-el-repositorio)\n\n[2. Generar varias aplicaciones con Angular.](./#2-Generar-una-SPA-con-Angular)\n\n[3. Tener una biblioteca TypeScript con lógica de dominio.](./#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio)\n\n[4. Tener una biblioteca Angular con componentes de interfaz.](./#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz)\n\n[5. Tener una biblioteca Angular con servicios de datos.](./#5-Tener-una-biblioteca-Angular-con-servicios-de-datos)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Crear el repositorio\n\n```yaml\n Como: arquitecto de software\n quiero: disponer de un espacio de trabajo único\n para: crear aplicaciones y librerías.\n ```\n\nLo primero será preparar las herramientas. **Nx** es un complemento del **CLI** así que debemos tener este último disponible. Voy a emplear [yarn](https://yarnpkg.com/lang/en/) para la instalación de paquetes y la ejecución de comandos. Pero se muestran las instrucciones alternativas con `npm`. El repositorio siempre lo creo vacío y después agrego las capacidades específicas para **Angular**.\n\n```bash\n# Add latest Angular CLI\nyarn global add @angular/cli\n# Sets yarn as default packager for cli\nng config -g cli.packageManager yarn\n\n# Creates empty repository\nyarn create nx-workspace angular-blueprint\n\n# also with NPM...\nnpm i -g @angular/cli\nnpx create-nx-workspace@latest angular-blueprint\n```\n\n---\n\n# 2. Generar una SPA con Angular\n\n```yaml\nAs a: customer,\n  I want: to see a shop\n  so that: I can buy products\n\n As a: seller,\n  I want: to see a warehouse\n  so that: I can take control\n```\n\nLos próximos comandos te sonarán a los mismo del **angular-cli**. Es normal, pues **Nx** utiliza y mejora las capacidades de la herramienta original. La diferencia está en que la recién creada aplicación, en lugar de nacer en la raíz del _workspace_, va la carpeta específica `/apps`.\n\n```bash\n# Add Angular capabilities\nyarn add --dev @nrwl/angular\n\n# Generate an Angular application with nx power-ups\nng g @nrwl/schematics:application shop --inlineStyle --routing --directory= -p ab-shop\n# Start default !!!\nyarn start\n# Generate an Angular application with nx power-ups\nng g @nrwl/schematics:application warehouse --inlineStyle --routing --directory= -p ab-warehouse\n# Start especific !!!\nng serve warehouse --port=4202 -o\n```\n\nAmbas aplicaciones comparten la configuración del `angular.json` y las demás herramientas de ayuda como **tslint** y **prettier**. Destaca mucho que también que compartan `/node_modules`, lo cual se agradece en el tiempo y en el espacio.\n\nCon nx puedes crear también aplicaciones de Backend. Por ejemplo un API REST hecha con [NestJS](https://nestjs.com/). Para acceder a los generadores específico tienes que instalarlos antes. por ejemplo:\n\n```bash\nyarn add --dev @nrwl/nest\nng g @nrwl/nest:application api\nng serve api\n```\n\nAl tener varias aplicaciones es conveniente disponer de scripts específicos para cada una. Por ejemplo yo en el `package.json` tendía algo así.\n\n```json\n{\n  \"start:shop\": \"ng serve shop --port=4201 -o\",\n  \"build:shop\": \"ng build shop --prod\",\n  \"test:shop\": \"ng test shop\",\n  \"start:warehouse\": \"ng serve warehouse --port=4202 -o\",\n  \"build:warehouse\": \"ng build warehouse --prod\",\n  \"test:warehouse\": \"ng test warehouse\",\n  \"start:api\": \"ng serve api\",\n  \"build:api\": \"ng build api --prod\",\n  \"test:api\": \"ng test api\",\n}\n```\n\nPor supuesto que todos estos comando se pueden lanzar visualmente mediante la extensión [Angular Console para VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). Te recomiendo además estas otras extensiones:\n\n```json\n{\n  \"recommendations\": [\n    \"nrwl.angular-console\",\n    \"angular.ng-template\",\n    \"ms-vscode.vscode-typescript-tslint-plugin\",\n    \"esbenp.prettier-vscode\",\n    \"pkief.material-icon-theme\",\n    \"christian-kohler.path-intellisense\",\n    \"ban.spellright\",\n    \"johnpapa.angular-essentials\"\n  ]\n}\n```\n\n---\n\n\n# 3. Tener una biblioteca TypeScript con lógica de dominio.\n\n```yaml\n Como: arquitecto\n quiero: tener una biblioteca en TypeScript con lógica de dominio\n de modo que: pueda usarla con varios frameworks o incluso en puro JavaScript.\n ```\n\nMás temprano que tarde aparecerán funcionalidades comunes a distintas aplicaciones. Validadores genéricos, utilidades o casos concretos de un cliente pero que se usan en todos sus desarrollos. En este ejemplo partimos de la necesidad común de un sistema de saludos (un mensaje, vaya). Y para ello empezamos por definir una `interface` pública reutilizable.\n\nUn poco de arquitectura de software. Todo lo que podamos programar y que no dependa de un _framework_ debemos encapsularlo en librerías independientes. De esa forma puede reutilizarse con otras tecnologías o sobrevivir dignamente a la evolución o desaparición de Angular.\n\nLo primero será crear la librería. Pero esta vez no usaremos los _schematics_ del **cli**, si no los propios de **nrwl**. La idea es usarla como la **capa de dominio de la arquitectura**. En ella pondremos los modelos y servicios de lógica de negocio con las menores dependencias posibles. Repito lo fundamental: minimizar las dependencias. En concreto no dependeremos de Angular, lo cual permitiría usarlo con otros _frameworks_ actuales o futuros.\n\n```bash\n# Generate a Type Script library with nx power-ups\nng generate @nrwl/workspace:library domain --directory=shared\n```\nPor ahora no te preocupes de la implementación. La muestro para destacar las dos cosas que considero más importantes:\n\n- No hay ninguna referencia explícita a _Angular_.\n\n- Lo que quieras exportar debe indicarse en el fichero `index.ts`.\n\nPor lo demás es puro _TypeScript_; en una carpeta con intenciones bien claras: `models/` creo de forma manual el siguiente fichero:\n\n`libs\\shared\\domain\\src\\lib\\models\\greetings.interface.ts`\n\n```typescript\nexport interface Greetings {\n  message: string;\n}\n```\nal no disponer del sistema de módulos de angular tengo que exportarlo en el índice de la librería.\n\n`libs\\shared\\domain\\src\\index.ts`\n\n```typescript\nexport * from './lib/models/greetings.interface';\n```\n\nPara localizarlo, Nx crea un alias en el `tsconfig.json`, que puedes retocar a voluntad\n\n```json\n\"paths\": {\n  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]\n}\n```\n\nYa está listo para seer consumido desde distintos proyectos (Lo haré después en el API y ya mismo en la próxima librería de componentes).\n\n---\n\n# 4. Tener una biblioteca Angular con componentes de interfaz\n\n```yaml\nAs a: customer,\n  I want: to be greeted\n  so that: I feel at home\n\nAs a: seller,\n  I want: to be greeted\n  so that: I feel at home\n```\n\nSi eres una empresa consultora es posible que te encuentres repitiendo funciones o pantallas una y otra vez para distintos clientes. Por supuesto que una gran empresa seguro que se hacen muchas aplicaciones similares, a las que les vendría de maravilla **compartir una biblioteca de componentes**.\n\nPues ahora crear librerías es igual de sencillo que crear aplicaciones. **Nx** las depositará en la carpeta `/libs` y se ocupará de apuntarlas en el `tsconfig.json` para que la importación desde el resto del proyecto use alias cortos y evidentes.\n\nCrear componentes en un entorno multi proyecto requiere especificar a qué proyecto se asociarán. Para empezar vamos a crear los componentes básicos para esta funcionalidad en una librería compartida de para interfaz de usuario.\n\n```bash\n# Generate an Angular library with nx power-ups\nng g @nrwl/angular:library ui --directory=shared --prefix=ab-ui --simpleModuleName\n# Generate Greetings Component\nng g component greetings --project=shared-ui --module=ui.module.ts --export --inlineStyle --inlineTemplate\n```\n\nY le damos contenido al componente. Fíjate en la importación de la interfaz `Greetings`.\n\n\n`libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-ui-greetings',\n  template: `\n    <p>\n      {{ theGreeting.message }}\n    </p>\n  `,\n  styles: []\n})\nexport class GreetingsComponent implements OnInit {\n  public theGreeting: Greetings = { message: 'Hello world' };\n  constructor() {}\n\n  ngOnInit() {}\n}\n```\n---\n\nPuedes usarlos como cualquier otro componente y en cualquier aplicación del repositorio. Simplemente importando el módulo en el que se declaran: el `UiModule`. NX se encarga de referenciar cada proyecto en el fichero `tsconfig.json`. De esa forma se facilita su importación en cualquier otra aplicación del repositorio.\n\nPrimero importamos el módulo.\n\n`apps\\shop\\src\\app\\app.module.ts`\n\n```typescript\nimport { UiModule } from '@a-boss/ui';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot([], { initialNavigation: 'enabled' }),\n    UiModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nY ya podemos incrustar sus componentes públicos.\n\n`apps\\shop\\src\\app\\app.component.html`\n\n```html\n<ab-ui-greetings></ab-ui-greetings>\n<router-outlet></router-outlet>\n```\n\n`apps\\shop\\src\\app\\app.component.ts`\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'ab-shop-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent {\n  title = 'shop';\n}\n```\n\n---\n\n# 5. Tener una biblioteca Angular con servicios de datos\n\n```yaml\nAs a: customer,\n  I want: to be greeted by the API :-)\n  so that: I know I am not alone.\n\nAs a: seller,\n  I want: to be greeted by the API :-)\n  so that: I know I am not alone.\n```\n\nAdemás de componentes visuales, podemos tener librerías con servicios de lógica o de acceso a datos. Por ejemplo un servicio para comunicarnos con el API podría ser utilizado en diversos proyectos (aplicaciones o librerías).\n\nCon lo ya sabido vamos a crear una librería compartida para acceso a datos.\n\n\n```bash\nng g @nrwl/angular:library data --directory=shared --prefix=ab-data --simpleModuleName\nng g service greetings --project=shared-data --no-flat\n```\n\nEl servicio realiza la llamada http y devuelve un observable.\n\n`libs\\shared\\data\\src\\lib\\greetings\\greetings.service.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class GreetingsService {\n  private apiUrl = 'http://localhost:3333/api';\n  constructor(private httpClient: HttpClient) {}\n  public getGrettings$(): Observable<Greetings> {\n    return this.httpClient.get<Greetings>(this.apiUrl);\n  }\n}\n```\n\nPara consumir el servicio no hay que hacer nada más. Pero, para importarlo en TypeScript, necesitmaos que nos lo exporten adecuadamente.\n\n`libs\\shared\\data\\src\\index.ts`\n\n```typescript\nexport * from './lib/data.module';\nexport * from './lib/greetings/greetings.service';\n```\n\n`tsconfig.json`\n\n```json\n\"paths\": {\n  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]\n}\n```\n\nY ahora consumirlo ya no es un problema. Por ejemplo directamente en el componente.\n\n`libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts`\n\n```typescript\nimport { GreetingsService } from '@a-boss/data';\nimport { Greetings } from '@a-boss/domain';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-ui-greetings',\n  template: `\n    <p>\n      {{ theGreeting.message }}\n    </p>\n  `,\n  styles: []\n})\nexport class GreetingsComponent implements OnInit {\n  public theGreeting: Greetings = { message: 'Hello world' };\n  constructor(private greetingsService: GreetingsService) {}\n  public ngOnInit() {\n    this.greetingsService.getGrettings$().subscribe(this.appendApiMessage);\n  }\n  private appendApiMessage = (apiGreetings: Greetings) =>\n    (this.theGreeting.message += ' and ' + apiGreetings.message);\n}\n```\n\nYa que estamos accediendo al API, podemos aprovechar para adecuar sus tipos a la interfaz declarada en el dominio. Fíjate lo familiar que resulta este código **NodeJS** gracias al framework [nest](https://nestjs.com/).\n\n`apps\\api\\src\\app\\app.controller.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData(): Greetings {\n    return this.appService.getData();\n  }\n}\n```\n\n\n<!-- ## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro las distintas librerías y aplicaciones que tenemos en este momento. Fíjate en la jerarquía de dependencias : Aplicaciones -> Librerías Angular -> Librerías del Dominio.\n\n![Dependencias entre proyectos](/images/10-projects-dependency.png)\n\n---\n\nTienes más ejemplos en el repositorio como [la implementación un _ErrorHandler_](https://github.com/angularbuilders/angular-blueprint/blob/master/libs/tracer/src/lib/services/error-handler.service.ts). Es un servicio que una vez proveído hace uso del servicio de trazas.\n\nDispones de un _journal_ con indicaciones paso a paso de este tutorial. Consulta directamente la [documentación](https://angularbuilders.github.io/angular-blueprint/0-mono_repo) del proyecto en GitHub.\n\nLas tareas relativas a este tutorial están resueltas en el [proyecto 0 - monorepo](https://github.com/angularbuilders/angular-blueprint/projects/1)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n-->\n\n---\n\n## Resumen\n\nEn definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones avanzadas. **Angular** es una plataforma ideal para esos grandes proyectos, pero requiere conocimiento y bases sólidas para sacarle partido.\n\nCon este tutorial empiezas tu formación [avanzada en Angular](../tag/Avanzado/) para poder afrontar retos de tamaño industrial. Continúa aprendiendo a crear y ejecutar pruebas automatizadas creando [tests unitarios con Jest y e2e con Cypress en Angular](../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular).\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-10-nx-mono-repositorios-en-Angular.md","raw":"---\ntitle: Nx, mono repositorios en Angular\npermalink: nx-mono-repositorios-en-Angular\ndate: 2019-09-03 18:59:27\ntags:\n- Angular\n- Angular8\n- Nx\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-10_monorepo.png\n---\n\n![nx-mono-repositorios-en-Angular](/images/tutorial-angular-10_monorepo.png)\n\nEmpiezo este **tutorial de Angular Avanzado** con la frase con la que acabé un artículo de opinión sobre arquitectura de software acerca de [Angular para grandes aplicaciones.](https://medium.com/@albertobasalo71/angular-para-grandes-aplicaciones-b66786fd3032)\n\n> Angular y las decisiones de diseño que le acompañan tienen como objetivo facilitar el desarrollo y mantenimiento a medio y largo plazo de aplicaciones web no triviales.\n\nLas empresas de desarrollo y los clientes finales que escogen **Angular**, suelen ser de tamaño medio o grande. Cuanto mayor sea el problema más destaca este _framework_. Y tarde o temprano esos grandes proyectos necesitarán compartir o reutilizar código. La herramienta [Nx de Nrwl](https://nx.dev/angular) ayuda en esa tarea facilitando la creación de espacios de trabajo multi proyecto: **los mono repositorios.**\n\n<!-- more -->\n\nPartiendo de cero y usando las herramientas de [Nrwl.io/](https://nrwl.io/) crearemos un _blueprint_ para desarrollar grandes aplicaciones. Al finalizar tendrás, en el mismo repositorio, un par de aplicaciones y varias librerías reutilizables creadas con los _Nx power-ups_.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Crear el repositorio.](./#1-Crear-el-repositorio)\n\n[2. Generar varias aplicaciones con Angular.](./#2-Generar-una-SPA-con-Angular)\n\n[3. Tener una biblioteca TypeScript con lógica de dominio.](./#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio)\n\n[4. Tener una biblioteca Angular con componentes de interfaz.](./#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz)\n\n[5. Tener una biblioteca Angular con servicios de datos.](./#5-Tener-una-biblioteca-Angular-con-servicios-de-datos)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Crear el repositorio\n\n```yaml\n Como: arquitecto de software\n quiero: disponer de un espacio de trabajo único\n para: crear aplicaciones y librerías.\n ```\n\nLo primero será preparar las herramientas. **Nx** es un complemento del **CLI** así que debemos tener este último disponible. Voy a emplear [yarn](https://yarnpkg.com/lang/en/) para la instalación de paquetes y la ejecución de comandos. Pero se muestran las instrucciones alternativas con `npm`. El repositorio siempre lo creo vacío y después agrego las capacidades específicas para **Angular**.\n\n```bash\n# Add latest Angular CLI\nyarn global add @angular/cli\n# Sets yarn as default packager for cli\nng config -g cli.packageManager yarn\n\n# Creates empty repository\nyarn create nx-workspace angular-blueprint\n\n# also with NPM...\nnpm i -g @angular/cli\nnpx create-nx-workspace@latest angular-blueprint\n```\n\n---\n\n# 2. Generar una SPA con Angular\n\n```yaml\nAs a: customer,\n  I want: to see a shop\n  so that: I can buy products\n\n As a: seller,\n  I want: to see a warehouse\n  so that: I can take control\n```\n\nLos próximos comandos te sonarán a los mismo del **angular-cli**. Es normal, pues **Nx** utiliza y mejora las capacidades de la herramienta original. La diferencia está en que la recién creada aplicación, en lugar de nacer en la raíz del _workspace_, va la carpeta específica `/apps`.\n\n```bash\n# Add Angular capabilities\nyarn add --dev @nrwl/angular\n\n# Generate an Angular application with nx power-ups\nng g @nrwl/schematics:application shop --inlineStyle --routing --directory= -p ab-shop\n# Start default !!!\nyarn start\n# Generate an Angular application with nx power-ups\nng g @nrwl/schematics:application warehouse --inlineStyle --routing --directory= -p ab-warehouse\n# Start especific !!!\nng serve warehouse --port=4202 -o\n```\n\nAmbas aplicaciones comparten la configuración del `angular.json` y las demás herramientas de ayuda como **tslint** y **prettier**. Destaca mucho que también que compartan `/node_modules`, lo cual se agradece en el tiempo y en el espacio.\n\nCon nx puedes crear también aplicaciones de Backend. Por ejemplo un API REST hecha con [NestJS](https://nestjs.com/). Para acceder a los generadores específico tienes que instalarlos antes. por ejemplo:\n\n```bash\nyarn add --dev @nrwl/nest\nng g @nrwl/nest:application api\nng serve api\n```\n\nAl tener varias aplicaciones es conveniente disponer de scripts específicos para cada una. Por ejemplo yo en el `package.json` tendía algo así.\n\n```json\n{\n  \"start:shop\": \"ng serve shop --port=4201 -o\",\n  \"build:shop\": \"ng build shop --prod\",\n  \"test:shop\": \"ng test shop\",\n  \"start:warehouse\": \"ng serve warehouse --port=4202 -o\",\n  \"build:warehouse\": \"ng build warehouse --prod\",\n  \"test:warehouse\": \"ng test warehouse\",\n  \"start:api\": \"ng serve api\",\n  \"build:api\": \"ng build api --prod\",\n  \"test:api\": \"ng test api\",\n}\n```\n\nPor supuesto que todos estos comando se pueden lanzar visualmente mediante la extensión [Angular Console para VSCode](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console). Te recomiendo además estas otras extensiones:\n\n```json\n{\n  \"recommendations\": [\n    \"nrwl.angular-console\",\n    \"angular.ng-template\",\n    \"ms-vscode.vscode-typescript-tslint-plugin\",\n    \"esbenp.prettier-vscode\",\n    \"pkief.material-icon-theme\",\n    \"christian-kohler.path-intellisense\",\n    \"ban.spellright\",\n    \"johnpapa.angular-essentials\"\n  ]\n}\n```\n\n---\n\n\n# 3. Tener una biblioteca TypeScript con lógica de dominio.\n\n```yaml\n Como: arquitecto\n quiero: tener una biblioteca en TypeScript con lógica de dominio\n de modo que: pueda usarla con varios frameworks o incluso en puro JavaScript.\n ```\n\nMás temprano que tarde aparecerán funcionalidades comunes a distintas aplicaciones. Validadores genéricos, utilidades o casos concretos de un cliente pero que se usan en todos sus desarrollos. En este ejemplo partimos de la necesidad común de un sistema de saludos (un mensaje, vaya). Y para ello empezamos por definir una `interface` pública reutilizable.\n\nUn poco de arquitectura de software. Todo lo que podamos programar y que no dependa de un _framework_ debemos encapsularlo en librerías independientes. De esa forma puede reutilizarse con otras tecnologías o sobrevivir dignamente a la evolución o desaparición de Angular.\n\nLo primero será crear la librería. Pero esta vez no usaremos los _schematics_ del **cli**, si no los propios de **nrwl**. La idea es usarla como la **capa de dominio de la arquitectura**. En ella pondremos los modelos y servicios de lógica de negocio con las menores dependencias posibles. Repito lo fundamental: minimizar las dependencias. En concreto no dependeremos de Angular, lo cual permitiría usarlo con otros _frameworks_ actuales o futuros.\n\n```bash\n# Generate a Type Script library with nx power-ups\nng generate @nrwl/workspace:library domain --directory=shared\n```\nPor ahora no te preocupes de la implementación. La muestro para destacar las dos cosas que considero más importantes:\n\n- No hay ninguna referencia explícita a _Angular_.\n\n- Lo que quieras exportar debe indicarse en el fichero `index.ts`.\n\nPor lo demás es puro _TypeScript_; en una carpeta con intenciones bien claras: `models/` creo de forma manual el siguiente fichero:\n\n`libs\\shared\\domain\\src\\lib\\models\\greetings.interface.ts`\n\n```typescript\nexport interface Greetings {\n  message: string;\n}\n```\nal no disponer del sistema de módulos de angular tengo que exportarlo en el índice de la librería.\n\n`libs\\shared\\domain\\src\\index.ts`\n\n```typescript\nexport * from './lib/models/greetings.interface';\n```\n\nPara localizarlo, Nx crea un alias en el `tsconfig.json`, que puedes retocar a voluntad\n\n```json\n\"paths\": {\n  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]\n}\n```\n\nYa está listo para seer consumido desde distintos proyectos (Lo haré después en el API y ya mismo en la próxima librería de componentes).\n\n---\n\n# 4. Tener una biblioteca Angular con componentes de interfaz\n\n```yaml\nAs a: customer,\n  I want: to be greeted\n  so that: I feel at home\n\nAs a: seller,\n  I want: to be greeted\n  so that: I feel at home\n```\n\nSi eres una empresa consultora es posible que te encuentres repitiendo funciones o pantallas una y otra vez para distintos clientes. Por supuesto que una gran empresa seguro que se hacen muchas aplicaciones similares, a las que les vendría de maravilla **compartir una biblioteca de componentes**.\n\nPues ahora crear librerías es igual de sencillo que crear aplicaciones. **Nx** las depositará en la carpeta `/libs` y se ocupará de apuntarlas en el `tsconfig.json` para que la importación desde el resto del proyecto use alias cortos y evidentes.\n\nCrear componentes en un entorno multi proyecto requiere especificar a qué proyecto se asociarán. Para empezar vamos a crear los componentes básicos para esta funcionalidad en una librería compartida de para interfaz de usuario.\n\n```bash\n# Generate an Angular library with nx power-ups\nng g @nrwl/angular:library ui --directory=shared --prefix=ab-ui --simpleModuleName\n# Generate Greetings Component\nng g component greetings --project=shared-ui --module=ui.module.ts --export --inlineStyle --inlineTemplate\n```\n\nY le damos contenido al componente. Fíjate en la importación de la interfaz `Greetings`.\n\n\n`libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-ui-greetings',\n  template: `\n    <p>\n      {{ theGreeting.message }}\n    </p>\n  `,\n  styles: []\n})\nexport class GreetingsComponent implements OnInit {\n  public theGreeting: Greetings = { message: 'Hello world' };\n  constructor() {}\n\n  ngOnInit() {}\n}\n```\n---\n\nPuedes usarlos como cualquier otro componente y en cualquier aplicación del repositorio. Simplemente importando el módulo en el que se declaran: el `UiModule`. NX se encarga de referenciar cada proyecto en el fichero `tsconfig.json`. De esa forma se facilita su importación en cualquier otra aplicación del repositorio.\n\nPrimero importamos el módulo.\n\n`apps\\shop\\src\\app\\app.module.ts`\n\n```typescript\nimport { UiModule } from '@a-boss/ui';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot([], { initialNavigation: 'enabled' }),\n    UiModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nY ya podemos incrustar sus componentes públicos.\n\n`apps\\shop\\src\\app\\app.component.html`\n\n```html\n<ab-ui-greetings></ab-ui-greetings>\n<router-outlet></router-outlet>\n```\n\n`apps\\shop\\src\\app\\app.component.ts`\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'ab-shop-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent {\n  title = 'shop';\n}\n```\n\n---\n\n# 5. Tener una biblioteca Angular con servicios de datos\n\n```yaml\nAs a: customer,\n  I want: to be greeted by the API :-)\n  so that: I know I am not alone.\n\nAs a: seller,\n  I want: to be greeted by the API :-)\n  so that: I know I am not alone.\n```\n\nAdemás de componentes visuales, podemos tener librerías con servicios de lógica o de acceso a datos. Por ejemplo un servicio para comunicarnos con el API podría ser utilizado en diversos proyectos (aplicaciones o librerías).\n\nCon lo ya sabido vamos a crear una librería compartida para acceso a datos.\n\n\n```bash\nng g @nrwl/angular:library data --directory=shared --prefix=ab-data --simpleModuleName\nng g service greetings --project=shared-data --no-flat\n```\n\nEl servicio realiza la llamada http y devuelve un observable.\n\n`libs\\shared\\data\\src\\lib\\greetings\\greetings.service.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class GreetingsService {\n  private apiUrl = 'http://localhost:3333/api';\n  constructor(private httpClient: HttpClient) {}\n  public getGrettings$(): Observable<Greetings> {\n    return this.httpClient.get<Greetings>(this.apiUrl);\n  }\n}\n```\n\nPara consumir el servicio no hay que hacer nada más. Pero, para importarlo en TypeScript, necesitmaos que nos lo exporten adecuadamente.\n\n`libs\\shared\\data\\src\\index.ts`\n\n```typescript\nexport * from './lib/data.module';\nexport * from './lib/greetings/greetings.service';\n```\n\n`tsconfig.json`\n\n```json\n\"paths\": {\n  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]\n}\n```\n\nY ahora consumirlo ya no es un problema. Por ejemplo directamente en el componente.\n\n`libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts`\n\n```typescript\nimport { GreetingsService } from '@a-boss/data';\nimport { Greetings } from '@a-boss/domain';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ab-ui-greetings',\n  template: `\n    <p>\n      {{ theGreeting.message }}\n    </p>\n  `,\n  styles: []\n})\nexport class GreetingsComponent implements OnInit {\n  public theGreeting: Greetings = { message: 'Hello world' };\n  constructor(private greetingsService: GreetingsService) {}\n  public ngOnInit() {\n    this.greetingsService.getGrettings$().subscribe(this.appendApiMessage);\n  }\n  private appendApiMessage = (apiGreetings: Greetings) =>\n    (this.theGreeting.message += ' and ' + apiGreetings.message);\n}\n```\n\nYa que estamos accediendo al API, podemos aprovechar para adecuar sus tipos a la interfaz declarada en el dominio. Fíjate lo familiar que resulta este código **NodeJS** gracias al framework [nest](https://nestjs.com/).\n\n`apps\\api\\src\\app\\app.controller.ts`\n\n```typescript\nimport { Greetings } from '@a-boss/domain';\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData(): Greetings {\n    return this.appService.getData();\n  }\n}\n```\n\n\n<!-- ## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro las distintas librerías y aplicaciones que tenemos en este momento. Fíjate en la jerarquía de dependencias : Aplicaciones -> Librerías Angular -> Librerías del Dominio.\n\n![Dependencias entre proyectos](/images/10-projects-dependency.png)\n\n---\n\nTienes más ejemplos en el repositorio como [la implementación un _ErrorHandler_](https://github.com/angularbuilders/angular-blueprint/blob/master/libs/tracer/src/lib/services/error-handler.service.ts). Es un servicio que una vez proveído hace uso del servicio de trazas.\n\nDispones de un _journal_ con indicaciones paso a paso de este tutorial. Consulta directamente la [documentación](https://angularbuilders.github.io/angular-blueprint/0-mono_repo) del proyecto en GitHub.\n\nLas tareas relativas a este tutorial están resueltas en el [proyecto 0 - monorepo](https://github.com/angularbuilders/angular-blueprint/projects/1)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n-->\n\n---\n\n## Resumen\n\nEn definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones avanzadas. **Angular** es una plataforma ideal para esos grandes proyectos, pero requiere conocimiento y bases sólidas para sacarle partido.\n\nCon este tutorial empiezas tu formación [avanzada en Angular](../tag/Avanzado/) para poder afrontar retos de tamaño industrial. Continúa aprendiendo a crear y ejecutar pruebas automatizadas creando [tests unitarios con Jest y e2e con Cypress en Angular](../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular).\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"nx-mono-repositorios-en-Angular","published":1,"updated":"2019-09-03T16:32:45.928Z","_id":"cjyh5p4ai000418s3vs2z8684","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-10_monorepo.png\" alt=\"nx-mono-repositorios-en-Angular\"></p><p>Empiezo este <strong>tutorial de Angular Avanzado</strong> con la frase con la que acabé un artículo de opinión sobre arquitectura de software acerca de <a href=\"https://medium.com/@albertobasalo71/angular-para-grandes-aplicaciones-b66786fd3032\" target=\"_blank\" rel=\"noopener\">Angular para grandes aplicaciones.</a></p><blockquote><p>Angular y las decisiones de diseño que le acompañan tienen como objetivo facilitar el desarrollo y mantenimiento a medio y largo plazo de aplicaciones web no triviales.</p></blockquote><p>Las empresas de desarrollo y los clientes finales que escogen <strong>Angular</strong>, suelen ser de tamaño medio o grande. Cuanto mayor sea el problema más destaca este <em>framework</em>. Y tarde o temprano esos grandes proyectos necesitarán compartir o reutilizar código. La herramienta <a href=\"https://nx.dev/angular\" target=\"_blank\" rel=\"noopener\">Nx de Nrwl</a> ayuda en esa tarea facilitando la creación de espacios de trabajo multi proyecto: <strong>los mono repositorios.</strong></p><a id=\"more\"></a><p>Partiendo de cero y usando las herramientas de <a href=\"https://nrwl.io/\" target=\"_blank\" rel=\"noopener\">Nrwl.io/</a> crearemos un <em>blueprint</em> para desarrollar grandes aplicaciones. Al finalizar tendrás, en el mismo repositorio, un par de aplicaciones y varias librerías reutilizables creadas con los <em>Nx power-ups</em>.</p><blockquote><p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-boss</a></p></blockquote><h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Crear-el-repositorio\">1. Crear el repositorio.</a></p><p><a href=\"./#2-Generar-una-SPA-con-Angular\">2. Generar varias aplicaciones con Angular.</a></p><p><a href=\"./#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\">3. Tener una biblioteca TypeScript con lógica de dominio.</a></p><p><a href=\"./#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\">4. Tener una biblioteca Angular con componentes de interfaz.</a></p><p><a href=\"./#5-Tener-una-biblioteca-Angular-con-servicios-de-datos\">5. Tener una biblioteca Angular con servicios de datos.</a></p><p><a href=\"./#Diagramas\">Diagramas</a></p><p><a href=\"./#Resumen\">Resumen</a></p><hr><h1 id=\"1-Crear-el-repositorio\"><a href=\"#1-Crear-el-repositorio\" class=\"headerlink\" title=\"1. Crear el repositorio\"></a>1. Crear el repositorio</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">arquitecto</span> <span class=\"string\">de</span> <span class=\"string\">software</span></span><br><span class=\"line\"><span class=\"attr\">quiero:</span> <span class=\"string\">disponer</span> <span class=\"string\">de</span> <span class=\"string\">un</span> <span class=\"string\">espacio</span> <span class=\"string\">de</span> <span class=\"string\">trabajo</span> <span class=\"string\">único</span></span><br><span class=\"line\"><span class=\"attr\">para:</span> <span class=\"string\">crear</span> <span class=\"string\">aplicaciones</span> <span class=\"string\">y</span> <span class=\"string\">librerías.</span></span><br></pre></td></tr></table></figure><p>Lo primero será preparar las herramientas. <strong>Nx</strong> es un complemento del <strong>CLI</strong> así que debemos tener este último disponible. Voy a emplear <a href=\"https://yarnpkg.com/lang/en/\" target=\"_blank\" rel=\"noopener\">yarn</a> para la instalación de paquetes y la ejecución de comandos. Pero se muestran las instrucciones alternativas con <code>npm</code>. El repositorio siempre lo creo vacío y después agrego las capacidades específicas para <strong>Angular</strong>.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Add latest Angular CLI</span></span><br><span class=\"line\">yarn global add @angular/cli</span><br><span class=\"line\"><span class=\"comment\"># Sets yarn as default packager for cli</span></span><br><span class=\"line\">ng config -g cli.packageManager yarn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creates empty repository</span></span><br><span class=\"line\">yarn create nx-workspace angular-blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># also with NPM...</span></span><br><span class=\"line\">npm i -g @angular/cli</span><br><span class=\"line\">npx create-nx-workspace@latest angular-blueprint</span><br></pre></td></tr></table></figure><hr><h1 id=\"2-Generar-una-SPA-con-Angular\"><a href=\"#2-Generar-una-SPA-con-Angular\" class=\"headerlink\" title=\"2. Generar una SPA con Angular\"></a>2. Generar una SPA con Angular</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">shop</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">buy</span> <span class=\"string\">products</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">warehouse</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">take</span> <span class=\"string\">control</span></span><br></pre></td></tr></table></figure><p>Los próximos comandos te sonarán a los mismo del <strong>angular-cli</strong>. Es normal, pues <strong>Nx</strong> utiliza y mejora las capacidades de la herramienta original. La diferencia está en que la recién creada aplicación, en lugar de nacer en la raíz del <em>workspace</em>, va la carpeta específica <code>/apps</code>.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Add Angular capabilities</span></span><br><span class=\"line\">yarn add --dev @nrwl/angular</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate an Angular application with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/schematics:application shop --inlineStyle --routing --directory= -p ab-shop</span><br><span class=\"line\"><span class=\"comment\"># Start default !!!</span></span><br><span class=\"line\">yarn start</span><br><span class=\"line\"><span class=\"comment\"># Generate an Angular application with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/schematics:application warehouse --inlineStyle --routing --directory= -p ab-warehouse</span><br><span class=\"line\"><span class=\"comment\"># Start especific !!!</span></span><br><span class=\"line\">ng serve warehouse --port=4202 -o</span><br></pre></td></tr></table></figure><p>Ambas aplicaciones comparten la configuración del <code>angular.json</code> y las demás herramientas de ayuda como <strong>tslint</strong> y <strong>prettier</strong>. Destaca mucho que también que compartan <code>/node_modules</code>, lo cual se agradece en el tiempo y en el espacio.</p><p>Con nx puedes crear también aplicaciones de Backend. Por ejemplo un API REST hecha con <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener\">NestJS</a>. Para acceder a los generadores específico tienes que instalarlos antes. por ejemplo:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add --dev @nrwl/nest</span><br><span class=\"line\">ng g @nrwl/nest:application api</span><br><span class=\"line\">ng serve api</span><br></pre></td></tr></table></figure><p>Al tener varias aplicaciones es conveniente disponer de scripts específicos para cada una. Por ejemplo yo en el <code>package.json</code> tendía algo así.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"start:shop\"</span>: <span class=\"string\">\"ng serve shop --port=4201 -o\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"build:shop\"</span>: <span class=\"string\">\"ng build shop --prod\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"test:shop\"</span>: <span class=\"string\">\"ng test shop\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"start:warehouse\"</span>: <span class=\"string\">\"ng serve warehouse --port=4202 -o\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"build:warehouse\"</span>: <span class=\"string\">\"ng build warehouse --prod\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"test:warehouse\"</span>: <span class=\"string\">\"ng test warehouse\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"start:api\"</span>: <span class=\"string\">\"ng serve api\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"build:api\"</span>: <span class=\"string\">\"ng build api --prod\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"test:api\"</span>: <span class=\"string\">\"ng test api\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Por supuesto que todos estos comando se pueden lanzar visualmente mediante la extensión <a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\" target=\"_blank\" rel=\"noopener\">Angular Console para VSCode</a>. Te recomiendo además estas otras extensiones:</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"recommendations\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"nrwl.angular-console\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"angular.ng-template\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ms-vscode.vscode-typescript-tslint-plugin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"esbenp.prettier-vscode\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pkief.material-icon-theme\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"christian-kohler.path-intellisense\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ban.spellright\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"johnpapa.angular-essentials\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id=\"3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\"><a href=\"#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\" class=\"headerlink\" title=\"3. Tener una biblioteca TypeScript con lógica de dominio.\"></a>3. Tener una biblioteca TypeScript con lógica de dominio.</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">arquitecto</span></span><br><span class=\"line\"><span class=\"attr\">quiero:</span> <span class=\"string\">tener</span> <span class=\"string\">una</span> <span class=\"string\">biblioteca</span> <span class=\"string\">en</span> <span class=\"string\">TypeScript</span> <span class=\"string\">con</span> <span class=\"string\">lógica</span> <span class=\"string\">de</span> <span class=\"string\">dominio</span></span><br><span class=\"line\"><span class=\"string\">de</span> <span class=\"string\">modo</span> <span class=\"attr\">que:</span> <span class=\"string\">pueda</span> <span class=\"string\">usarla</span> <span class=\"string\">con</span> <span class=\"string\">varios</span> <span class=\"string\">frameworks</span> <span class=\"string\">o</span> <span class=\"string\">incluso</span> <span class=\"string\">en</span> <span class=\"string\">puro</span> <span class=\"string\">JavaScript.</span></span><br></pre></td></tr></table></figure><p>Más temprano que tarde aparecerán funcionalidades comunes a distintas aplicaciones. Validadores genéricos, utilidades o casos concretos de un cliente pero que se usan en todos sus desarrollos. En este ejemplo partimos de la necesidad común de un sistema de saludos (un mensaje, vaya). Y para ello empezamos por definir una <code>interface</code> pública reutilizable.</p><p>Un poco de arquitectura de software. Todo lo que podamos programar y que no dependa de un <em>framework</em> debemos encapsularlo en librerías independientes. De esa forma puede reutilizarse con otras tecnologías o sobrevivir dignamente a la evolución o desaparición de Angular.</p><p>Lo primero será crear la librería. Pero esta vez no usaremos los <em>schematics</em> del <strong>cli</strong>, si no los propios de <strong>nrwl</strong>. La idea es usarla como la <strong>capa de dominio de la arquitectura</strong>. En ella pondremos los modelos y servicios de lógica de negocio con las menores dependencias posibles. Repito lo fundamental: minimizar las dependencias. En concreto no dependeremos de Angular, lo cual permitiría usarlo con otros <em>frameworks</em> actuales o futuros.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a Type Script library with nx power-ups</span></span><br><span class=\"line\">ng generate @nrwl/workspace:library domain --directory=shared</span><br></pre></td></tr></table></figure><p>Por ahora no te preocupes de la implementación. La muestro para destacar las dos cosas que considero más importantes:</p><ul><li><p>No hay ninguna referencia explícita a <em>Angular</em>.</p></li><li><p>Lo que quieras exportar debe indicarse en el fichero <code>index.ts</code>.</p></li></ul><p>Por lo demás es puro <em>TypeScript</em>; en una carpeta con intenciones bien claras: <code>models/</code> creo de forma manual el siguiente fichero:</p><p><code>libs\\shared\\domain\\src\\lib\\models\\greetings.interface.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Greetings &#123;</span><br><span class=\"line\">  message: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>al no disponer del sistema de módulos de angular tengo que exportarlo en el índice de la librería.</p><p><code>libs\\shared\\domain\\src\\index.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./lib/models/greetings.interface'</span>;</span><br></pre></td></tr></table></figure><p>Para localizarlo, Nx crea un alias en el <code>tsconfig.json</code>, que puedes retocar a voluntad</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"paths\": &#123;</span><br><span class=\"line\">  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ya está listo para seer consumido desde distintos proyectos (Lo haré después en el API y ya mismo en la próxima librería de componentes).</p><hr><h1 id=\"4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\"><a href=\"#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\" class=\"headerlink\" title=\"4. Tener una biblioteca Angular con componentes de interfaz\"></a>4. Tener una biblioteca Angular con componentes de interfaz</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">feel</span> <span class=\"string\">at</span> <span class=\"string\">home</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">feel</span> <span class=\"string\">at</span> <span class=\"string\">home</span></span><br></pre></td></tr></table></figure><p>Si eres una empresa consultora es posible que te encuentres repitiendo funciones o pantallas una y otra vez para distintos clientes. Por supuesto que una gran empresa seguro que se hacen muchas aplicaciones similares, a las que les vendría de maravilla <strong>compartir una biblioteca de componentes</strong>.</p><p>Pues ahora crear librerías es igual de sencillo que crear aplicaciones. <strong>Nx</strong> las depositará en la carpeta <code>/libs</code> y se ocupará de apuntarlas en el <code>tsconfig.json</code> para que la importación desde el resto del proyecto use alias cortos y evidentes.</p><p>Crear componentes en un entorno multi proyecto requiere especificar a qué proyecto se asociarán. Para empezar vamos a crear los componentes básicos para esta funcionalidad en una librería compartida de para interfaz de usuario.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate an Angular library with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/angular:library ui --directory=shared --prefix=ab-ui --simpleModuleName</span><br><span class=\"line\"><span class=\"comment\"># Generate Greetings Component</span></span><br><span class=\"line\">ng g component greetings --project=shared-ui --module=ui.module.ts --<span class=\"built_in\">export</span> --inlineStyle --inlineTemplate</span><br></pre></td></tr></table></figure><p>Y le damos contenido al componente. Fíjate en la importación de la interfaz <code>Greetings</code>.</p><p><code>libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Greetings &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/domain'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-ui-greetings'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; theGreeting.message &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> GreetingsComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> theGreeting: Greetings = &#123; message: <span class=\"string\">'Hello world'</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><p>Puedes usarlos como cualquier otro componente y en cualquier aplicación del repositorio. Simplemente importando el módulo en el que se declaran: el <code>UiModule</code>. NX se encarga de referenciar cada proyecto en el fichero <code>tsconfig.json</code>. De esa forma se facilita su importación en cualquier otra aplicación del repositorio.</p><p>Primero importamos el módulo.</p><p><code>apps\\shop\\src\\app\\app.module.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; UiModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule,</span><br><span class=\"line\">    RouterModule.forRoot([], &#123; initialNavigation: <span class=\"string\">'enabled'</span> &#125;),</span><br><span class=\"line\">    UiModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Y ya podemos incrustar sus componentes públicos.</p><p><code>apps\\shop\\src\\app\\app.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-ui-greetings</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-ui-greetings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>apps\\shop\\src\\app\\app.component.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-shop-root'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">  title = <span class=\"string\">'shop'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id=\"5-Tener-una-biblioteca-Angular-con-servicios-de-datos\"><a href=\"#5-Tener-una-biblioteca-Angular-con-servicios-de-datos\" class=\"headerlink\" title=\"5. Tener una biblioteca Angular con servicios de datos\"></a>5. Tener una biblioteca Angular con servicios de datos</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span> <span class=\"string\">by</span> <span class=\"string\">the</span> <span class=\"string\">API</span> <span class=\"string\">:-)</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">am</span> <span class=\"string\">not</span> <span class=\"string\">alone.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span> <span class=\"string\">by</span> <span class=\"string\">the</span> <span class=\"string\">API</span> <span class=\"string\">:-)</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">am</span> <span class=\"string\">not</span> <span class=\"string\">alone.</span></span><br></pre></td></tr></table></figure><p>Además de componentes visuales, podemos tener librerías con servicios de lógica o de acceso a datos. Por ejemplo un servicio para comunicarnos con el API podría ser utilizado en diversos proyectos (aplicaciones o librerías).</p><p>Con lo ya sabido vamos a crear una librería compartida para acceso a datos.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @nrwl/angular:library data --directory=shared --prefix=ab-data --simpleModuleName</span><br><span class=\"line\">ng g service greetings --project=shared-data --no-flat</span><br></pre></td></tr></table></figure><p>El servicio realiza la llamada http y devuelve un observable.</p><p><code>libs\\shared\\data\\src\\lib\\greetings\\greetings.service.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Greetings &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/domain'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> GreetingsService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> apiUrl = <span class=\"string\">'http://localhost:3333/api'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> getGrettings$(): Observable&lt;Greetings&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.httpClient.get&lt;Greetings&gt;(<span class=\"keyword\">this</span>.apiUrl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Para consumir el servicio no hay que hacer nada más. Pero, para importarlo en TypeScript, necesitmaos que nos lo exporten adecuadamente.</p><p><code>libs\\shared\\data\\src\\index.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./lib/data.module'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./lib/greetings/greetings.service'</span>;</span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code></p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"paths\": &#123;</span><br><span class=\"line\">  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y ahora consumirlo ya no es un problema. Por ejemplo directamente en el componente.</p><p><code>libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; GreetingsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/data'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Greetings &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/domain'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-ui-greetings'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; theGreeting.message &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> GreetingsComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> theGreeting: Greetings = &#123; message: <span class=\"string\">'Hello world'</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> greetingsService: GreetingsService</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.greetingsService.getGrettings$().subscribe(<span class=\"keyword\">this</span>.appendApiMessage);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> appendApiMessage = <span class=\"function\">(<span class=\"params\">apiGreetings: Greetings</span>) =&gt;</span></span><br><span class=\"line\">    (<span class=\"keyword\">this</span>.theGreeting.message += <span class=\"string\">' and '</span> + apiGreetings.message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ya que estamos accediendo al API, podemos aprovechar para adecuar sus tipos a la interfaz declarada en el dominio. Fíjate lo familiar que resulta este código <strong>NodeJS</strong> gracias al framework <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener\">nest</a>.</p><p><code>apps\\api\\src\\app\\app.controller.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Greetings &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/domain'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Controller, Get &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppController &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly appService: AppService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>()</span><br><span class=\"line\">  getData(): Greetings &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.appService.getData();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>En definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones avanzadas. <strong>Angular</strong> es una plataforma ideal para esos grandes proyectos, pero requiere conocimiento y bases sólidas para sacarle partido.</p><p>Con este tutorial empiezas tu formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> para poder afrontar retos de tamaño industrial. Continúa aprendiendo a crear y ejecutar pruebas automatizadas creando <a href=\"../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\">tests unitarios con Jest y e2e con Cypress en Angular</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-10_monorepo.png\" alt=\"nx-mono-repositorios-en-Angular\"></p><p>Empiezo este <strong>tutorial de Angular Avanzado</strong> con la frase con la que acabé un artículo de opinión sobre arquitectura de software acerca de <a href=\"https://medium.com/@albertobasalo71/angular-para-grandes-aplicaciones-b66786fd3032\" target=\"_blank\" rel=\"noopener\">Angular para grandes aplicaciones.</a></p><blockquote><p>Angular y las decisiones de diseño que le acompañan tienen como objetivo facilitar el desarrollo y mantenimiento a medio y largo plazo de aplicaciones web no triviales.</p></blockquote><p>Las empresas de desarrollo y los clientes finales que escogen <strong>Angular</strong>, suelen ser de tamaño medio o grande. Cuanto mayor sea el problema más destaca este <em>framework</em>. Y tarde o temprano esos grandes proyectos necesitarán compartir o reutilizar código. La herramienta <a href=\"https://nx.dev/angular\" target=\"_blank\" rel=\"noopener\">Nx de Nrwl</a> ayuda en esa tarea facilitando la creación de espacios de trabajo multi proyecto: <strong>los mono repositorios.</strong></p>","more":"<p>Partiendo de cero y usando las herramientas de <a href=\"https://nrwl.io/\" target=\"_blank\" rel=\"noopener\">Nrwl.io/</a> crearemos un <em>blueprint</em> para desarrollar grandes aplicaciones. Al finalizar tendrás, en el mismo repositorio, un par de aplicaciones y varias librerías reutilizables creadas con los <em>Nx power-ups</em>.</p><blockquote><p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-boss</a></p></blockquote><h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Crear-el-repositorio\">1. Crear el repositorio.</a></p><p><a href=\"./#2-Generar-una-SPA-con-Angular\">2. Generar varias aplicaciones con Angular.</a></p><p><a href=\"./#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\">3. Tener una biblioteca TypeScript con lógica de dominio.</a></p><p><a href=\"./#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\">4. Tener una biblioteca Angular con componentes de interfaz.</a></p><p><a href=\"./#5-Tener-una-biblioteca-Angular-con-servicios-de-datos\">5. Tener una biblioteca Angular con servicios de datos.</a></p><p><a href=\"./#Diagramas\">Diagramas</a></p><p><a href=\"./#Resumen\">Resumen</a></p><hr><h1 id=\"1-Crear-el-repositorio\"><a href=\"#1-Crear-el-repositorio\" class=\"headerlink\" title=\"1. Crear el repositorio\"></a>1. Crear el repositorio</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">arquitecto</span> <span class=\"string\">de</span> <span class=\"string\">software</span></span><br><span class=\"line\"><span class=\"attr\">quiero:</span> <span class=\"string\">disponer</span> <span class=\"string\">de</span> <span class=\"string\">un</span> <span class=\"string\">espacio</span> <span class=\"string\">de</span> <span class=\"string\">trabajo</span> <span class=\"string\">único</span></span><br><span class=\"line\"><span class=\"attr\">para:</span> <span class=\"string\">crear</span> <span class=\"string\">aplicaciones</span> <span class=\"string\">y</span> <span class=\"string\">librerías.</span></span><br></pre></td></tr></table></figure><p>Lo primero será preparar las herramientas. <strong>Nx</strong> es un complemento del <strong>CLI</strong> así que debemos tener este último disponible. Voy a emplear <a href=\"https://yarnpkg.com/lang/en/\" target=\"_blank\" rel=\"noopener\">yarn</a> para la instalación de paquetes y la ejecución de comandos. Pero se muestran las instrucciones alternativas con <code>npm</code>. El repositorio siempre lo creo vacío y después agrego las capacidades específicas para <strong>Angular</strong>.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Add latest Angular CLI</span></span><br><span class=\"line\">yarn global add @angular/cli</span><br><span class=\"line\"><span class=\"comment\"># Sets yarn as default packager for cli</span></span><br><span class=\"line\">ng config -g cli.packageManager yarn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creates empty repository</span></span><br><span class=\"line\">yarn create nx-workspace angular-blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># also with NPM...</span></span><br><span class=\"line\">npm i -g @angular/cli</span><br><span class=\"line\">npx create-nx-workspace@latest angular-blueprint</span><br></pre></td></tr></table></figure><hr><h1 id=\"2-Generar-una-SPA-con-Angular\"><a href=\"#2-Generar-una-SPA-con-Angular\" class=\"headerlink\" title=\"2. Generar una SPA con Angular\"></a>2. Generar una SPA con Angular</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">shop</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">buy</span> <span class=\"string\">products</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">see</span> <span class=\"string\">a</span> <span class=\"string\">warehouse</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">take</span> <span class=\"string\">control</span></span><br></pre></td></tr></table></figure><p>Los próximos comandos te sonarán a los mismo del <strong>angular-cli</strong>. Es normal, pues <strong>Nx</strong> utiliza y mejora las capacidades de la herramienta original. La diferencia está en que la recién creada aplicación, en lugar de nacer en la raíz del <em>workspace</em>, va la carpeta específica <code>/apps</code>.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Add Angular capabilities</span></span><br><span class=\"line\">yarn add --dev @nrwl/angular</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate an Angular application with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/schematics:application shop --inlineStyle --routing --directory= -p ab-shop</span><br><span class=\"line\"><span class=\"comment\"># Start default !!!</span></span><br><span class=\"line\">yarn start</span><br><span class=\"line\"><span class=\"comment\"># Generate an Angular application with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/schematics:application warehouse --inlineStyle --routing --directory= -p ab-warehouse</span><br><span class=\"line\"><span class=\"comment\"># Start especific !!!</span></span><br><span class=\"line\">ng serve warehouse --port=4202 -o</span><br></pre></td></tr></table></figure><p>Ambas aplicaciones comparten la configuración del <code>angular.json</code> y las demás herramientas de ayuda como <strong>tslint</strong> y <strong>prettier</strong>. Destaca mucho que también que compartan <code>/node_modules</code>, lo cual se agradece en el tiempo y en el espacio.</p><p>Con nx puedes crear también aplicaciones de Backend. Por ejemplo un API REST hecha con <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener\">NestJS</a>. Para acceder a los generadores específico tienes que instalarlos antes. por ejemplo:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add --dev @nrwl/nest</span><br><span class=\"line\">ng g @nrwl/nest:application api</span><br><span class=\"line\">ng serve api</span><br></pre></td></tr></table></figure><p>Al tener varias aplicaciones es conveniente disponer de scripts específicos para cada una. Por ejemplo yo en el <code>package.json</code> tendía algo así.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"start:shop\"</span>: <span class=\"string\">\"ng serve shop --port=4201 -o\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"build:shop\"</span>: <span class=\"string\">\"ng build shop --prod\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"test:shop\"</span>: <span class=\"string\">\"ng test shop\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"start:warehouse\"</span>: <span class=\"string\">\"ng serve warehouse --port=4202 -o\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"build:warehouse\"</span>: <span class=\"string\">\"ng build warehouse --prod\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"test:warehouse\"</span>: <span class=\"string\">\"ng test warehouse\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"start:api\"</span>: <span class=\"string\">\"ng serve api\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"build:api\"</span>: <span class=\"string\">\"ng build api --prod\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"test:api\"</span>: <span class=\"string\">\"ng test api\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Por supuesto que todos estos comando se pueden lanzar visualmente mediante la extensión <a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\" target=\"_blank\" rel=\"noopener\">Angular Console para VSCode</a>. Te recomiendo además estas otras extensiones:</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"recommendations\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"nrwl.angular-console\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"angular.ng-template\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ms-vscode.vscode-typescript-tslint-plugin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"esbenp.prettier-vscode\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pkief.material-icon-theme\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"christian-kohler.path-intellisense\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ban.spellright\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"johnpapa.angular-essentials\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id=\"3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\"><a href=\"#3-Tener-una-biblioteca-TypeScript-con-logica-de-dominio\" class=\"headerlink\" title=\"3. Tener una biblioteca TypeScript con lógica de dominio.\"></a>3. Tener una biblioteca TypeScript con lógica de dominio.</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Como:</span> <span class=\"string\">arquitecto</span></span><br><span class=\"line\"><span class=\"attr\">quiero:</span> <span class=\"string\">tener</span> <span class=\"string\">una</span> <span class=\"string\">biblioteca</span> <span class=\"string\">en</span> <span class=\"string\">TypeScript</span> <span class=\"string\">con</span> <span class=\"string\">lógica</span> <span class=\"string\">de</span> <span class=\"string\">dominio</span></span><br><span class=\"line\"><span class=\"string\">de</span> <span class=\"string\">modo</span> <span class=\"attr\">que:</span> <span class=\"string\">pueda</span> <span class=\"string\">usarla</span> <span class=\"string\">con</span> <span class=\"string\">varios</span> <span class=\"string\">frameworks</span> <span class=\"string\">o</span> <span class=\"string\">incluso</span> <span class=\"string\">en</span> <span class=\"string\">puro</span> <span class=\"string\">JavaScript.</span></span><br></pre></td></tr></table></figure><p>Más temprano que tarde aparecerán funcionalidades comunes a distintas aplicaciones. Validadores genéricos, utilidades o casos concretos de un cliente pero que se usan en todos sus desarrollos. En este ejemplo partimos de la necesidad común de un sistema de saludos (un mensaje, vaya). Y para ello empezamos por definir una <code>interface</code> pública reutilizable.</p><p>Un poco de arquitectura de software. Todo lo que podamos programar y que no dependa de un <em>framework</em> debemos encapsularlo en librerías independientes. De esa forma puede reutilizarse con otras tecnologías o sobrevivir dignamente a la evolución o desaparición de Angular.</p><p>Lo primero será crear la librería. Pero esta vez no usaremos los <em>schematics</em> del <strong>cli</strong>, si no los propios de <strong>nrwl</strong>. La idea es usarla como la <strong>capa de dominio de la arquitectura</strong>. En ella pondremos los modelos y servicios de lógica de negocio con las menores dependencias posibles. Repito lo fundamental: minimizar las dependencias. En concreto no dependeremos de Angular, lo cual permitiría usarlo con otros <em>frameworks</em> actuales o futuros.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a Type Script library with nx power-ups</span></span><br><span class=\"line\">ng generate @nrwl/workspace:library domain --directory=shared</span><br></pre></td></tr></table></figure><p>Por ahora no te preocupes de la implementación. La muestro para destacar las dos cosas que considero más importantes:</p><ul><li><p>No hay ninguna referencia explícita a <em>Angular</em>.</p></li><li><p>Lo que quieras exportar debe indicarse en el fichero <code>index.ts</code>.</p></li></ul><p>Por lo demás es puro <em>TypeScript</em>; en una carpeta con intenciones bien claras: <code>models/</code> creo de forma manual el siguiente fichero:</p><p><code>libs\\shared\\domain\\src\\lib\\models\\greetings.interface.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Greetings &#123;</span><br><span class=\"line\">  message: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>al no disponer del sistema de módulos de angular tengo que exportarlo en el índice de la librería.</p><p><code>libs\\shared\\domain\\src\\index.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./lib/models/greetings.interface'</span>;</span><br></pre></td></tr></table></figure><p>Para localizarlo, Nx crea un alias en el <code>tsconfig.json</code>, que puedes retocar a voluntad</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"paths\": &#123;</span><br><span class=\"line\">  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ya está listo para seer consumido desde distintos proyectos (Lo haré después en el API y ya mismo en la próxima librería de componentes).</p><hr><h1 id=\"4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\"><a href=\"#4-Tener-una-biblioteca-Angular-con-componentes-de-interfaz\" class=\"headerlink\" title=\"4. Tener una biblioteca Angular con componentes de interfaz\"></a>4. Tener una biblioteca Angular con componentes de interfaz</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">feel</span> <span class=\"string\">at</span> <span class=\"string\">home</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">feel</span> <span class=\"string\">at</span> <span class=\"string\">home</span></span><br></pre></td></tr></table></figure><p>Si eres una empresa consultora es posible que te encuentres repitiendo funciones o pantallas una y otra vez para distintos clientes. Por supuesto que una gran empresa seguro que se hacen muchas aplicaciones similares, a las que les vendría de maravilla <strong>compartir una biblioteca de componentes</strong>.</p><p>Pues ahora crear librerías es igual de sencillo que crear aplicaciones. <strong>Nx</strong> las depositará en la carpeta <code>/libs</code> y se ocupará de apuntarlas en el <code>tsconfig.json</code> para que la importación desde el resto del proyecto use alias cortos y evidentes.</p><p>Crear componentes en un entorno multi proyecto requiere especificar a qué proyecto se asociarán. Para empezar vamos a crear los componentes básicos para esta funcionalidad en una librería compartida de para interfaz de usuario.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate an Angular library with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/angular:library ui --directory=shared --prefix=ab-ui --simpleModuleName</span><br><span class=\"line\"><span class=\"comment\"># Generate Greetings Component</span></span><br><span class=\"line\">ng g component greetings --project=shared-ui --module=ui.module.ts --<span class=\"built_in\">export</span> --inlineStyle --inlineTemplate</span><br></pre></td></tr></table></figure><p>Y le damos contenido al componente. Fíjate en la importación de la interfaz <code>Greetings</code>.</p><p><code>libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Greetings &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/domain'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-ui-greetings'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; theGreeting.message &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> GreetingsComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> theGreeting: Greetings = &#123; message: <span class=\"string\">'Hello world'</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><p>Puedes usarlos como cualquier otro componente y en cualquier aplicación del repositorio. Simplemente importando el módulo en el que se declaran: el <code>UiModule</code>. NX se encarga de referenciar cada proyecto en el fichero <code>tsconfig.json</code>. De esa forma se facilita su importación en cualquier otra aplicación del repositorio.</p><p>Primero importamos el módulo.</p><p><code>apps\\shop\\src\\app\\app.module.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; UiModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule,</span><br><span class=\"line\">    RouterModule.forRoot([], &#123; initialNavigation: <span class=\"string\">'enabled'</span> &#125;),</span><br><span class=\"line\">    UiModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Y ya podemos incrustar sus componentes públicos.</p><p><code>apps\\shop\\src\\app\\app.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-ui-greetings</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-ui-greetings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>apps\\shop\\src\\app\\app.component.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-shop-root'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">  title = <span class=\"string\">'shop'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id=\"5-Tener-una-biblioteca-Angular-con-servicios-de-datos\"><a href=\"#5-Tener-una-biblioteca-Angular-con-servicios-de-datos\" class=\"headerlink\" title=\"5. Tener una biblioteca Angular con servicios de datos\"></a>5. Tener una biblioteca Angular con servicios de datos</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">customer,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span> <span class=\"string\">by</span> <span class=\"string\">the</span> <span class=\"string\">API</span> <span class=\"string\">:-)</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">am</span> <span class=\"string\">not</span> <span class=\"string\">alone.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">seller,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">greeted</span> <span class=\"string\">by</span> <span class=\"string\">the</span> <span class=\"string\">API</span> <span class=\"string\">:-)</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">know</span> <span class=\"string\">I</span> <span class=\"string\">am</span> <span class=\"string\">not</span> <span class=\"string\">alone.</span></span><br></pre></td></tr></table></figure><p>Además de componentes visuales, podemos tener librerías con servicios de lógica o de acceso a datos. Por ejemplo un servicio para comunicarnos con el API podría ser utilizado en diversos proyectos (aplicaciones o librerías).</p><p>Con lo ya sabido vamos a crear una librería compartida para acceso a datos.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @nrwl/angular:library data --directory=shared --prefix=ab-data --simpleModuleName</span><br><span class=\"line\">ng g service greetings --project=shared-data --no-flat</span><br></pre></td></tr></table></figure><p>El servicio realiza la llamada http y devuelve un observable.</p><p><code>libs\\shared\\data\\src\\lib\\greetings\\greetings.service.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Greetings &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/domain'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> GreetingsService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> apiUrl = <span class=\"string\">'http://localhost:3333/api'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> getGrettings$(): Observable&lt;Greetings&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.httpClient.get&lt;Greetings&gt;(<span class=\"keyword\">this</span>.apiUrl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Para consumir el servicio no hay que hacer nada más. Pero, para importarlo en TypeScript, necesitmaos que nos lo exporten adecuadamente.</p><p><code>libs\\shared\\data\\src\\index.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./lib/data.module'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./lib/greetings/greetings.service'</span>;</span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code></p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"paths\": &#123;</span><br><span class=\"line\">  \"@a-boss/domain\": [\"libs/shared/domain/src/index.ts\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y ahora consumirlo ya no es un problema. Por ejemplo directamente en el componente.</p><p><code>libs\\shared\\ui\\src\\lib\\greetings\\greetings.component.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; GreetingsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/data'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Greetings &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/domain'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-ui-greetings'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; theGreeting.message &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> GreetingsComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> theGreeting: Greetings = &#123; message: <span class=\"string\">'Hello world'</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> greetingsService: GreetingsService</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.greetingsService.getGrettings$().subscribe(<span class=\"keyword\">this</span>.appendApiMessage);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> appendApiMessage = <span class=\"function\">(<span class=\"params\">apiGreetings: Greetings</span>) =&gt;</span></span><br><span class=\"line\">    (<span class=\"keyword\">this</span>.theGreeting.message += <span class=\"string\">' and '</span> + apiGreetings.message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ya que estamos accediendo al API, podemos aprovechar para adecuar sus tipos a la interfaz declarada en el dominio. Fíjate lo familiar que resulta este código <strong>NodeJS</strong> gracias al framework <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener\">nest</a>.</p><p><code>apps\\api\\src\\app\\app.controller.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Greetings &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/domain'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Controller, Get &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppController &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly appService: AppService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>()</span><br><span class=\"line\">  getData(): Greetings &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.appService.getData();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>En definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones avanzadas. <strong>Angular</strong> es una plataforma ideal para esos grandes proyectos, pero requiere conocimiento y bases sólidas para sacarle partido.</p><p>Con este tutorial empiezas tu formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> para poder afrontar retos de tamaño industrial. Continúa aprendiendo a crear y ejecutar pruebas automatizadas creando <a href=\"../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\">tests unitarios con Jest y e2e con Cypress en Angular</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Soluciones FrontEnd 2016","id":"7","updated":"2016-01-14T10:17:31.000Z","date":"2016-01-14T09:39:32.000Z","_content":"\nInicio el año proponiendo una selección de tecnologías que serán **tendencia en el desarrollo front end** durante este 2016.\n\n* Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.\n\n* Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo **[JSPM](http://jspm.io/)**, que se incorporará definitivamente a nuestro toolbox durante el 2016.\n\n* De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente **[AngularJS1.5](https://www.angularjs.org/)**\n\n* En la parte visual, el look & feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería **[AngularMaterial](https://material.angularjs.org/latest/)** es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.\n\nEn [esta presentación](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing) tienes más información acerca de lo que llamo **frontEdge** : tecnología utilizable, de última generación y con enorme potencial.\n\n[Presentación frontEdge](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing)\n\nSi tienes tiempo, mira [este vídeo](https://www.youtube.com/watch?v=vJZb_rs2vvU) con una charla en la que comentamos estas y otras tecnologías para programadores.\n\n[video frontEdge](https://www.youtube.com/watch?v=vJZb_rs2vvU)","source":"_posts/Soluciones-FrontEnd-2016.md","raw":"---\ntitle: Soluciones FrontEnd 2016\ntags:\n- FrontEnd\n- AngularJS\n- Opinión\npermalink: soluciones-frontend-2016\nid: 7\nupdated: '2016-01-14 11:17:31'\ndate: 2016-01-14 10:39:32\n---\n\nInicio el año proponiendo una selección de tecnologías que serán **tendencia en el desarrollo front end** durante este 2016.\n\n* Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.\n\n* Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo **[JSPM](http://jspm.io/)**, que se incorporará definitivamente a nuestro toolbox durante el 2016.\n\n* De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de  adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente **[AngularJS1.5](https://www.angularjs.org/)**\n\n* En la parte visual, el look & feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería **[AngularMaterial](https://material.angularjs.org/latest/)** es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.\n\nEn [esta presentación](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing) tienes más información acerca de lo que llamo **frontEdge** : tecnología utilizable, de última generación y con enorme potencial.\n\n[Presentación frontEdge](https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing)\n\nSi tienes tiempo, mira [este vídeo](https://www.youtube.com/watch?v=vJZb_rs2vvU) con una charla en la que comentamos estas y otras tecnologías para programadores.\n\n[video frontEdge](https://www.youtube.com/watch?v=vJZb_rs2vvU)","slug":"soluciones-frontend-2016","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4al000618s30m3g1c8a","content":"<p>Inicio el año proponiendo una selección de tecnologías que serán <strong>tendencia en el desarrollo front end</strong> durante este 2016.</p><ul><li><p>Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"noopener\">ES6</a></strong>. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.</p></li><li><p>Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo <strong><a href=\"http://jspm.io/\" target=\"_blank\" rel=\"noopener\">JSPM</a></strong>, que se incorporará definitivamente a nuestro toolbox durante el 2016.</p></li><li><p>De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente <strong><a href=\"https://www.angularjs.org/\" target=\"_blank\" rel=\"noopener\">AngularJS1.5</a></strong></p></li><li><p>En la parte visual, el look &amp; feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería <strong><a href=\"https://material.angularjs.org/latest/\" target=\"_blank\" rel=\"noopener\">AngularMaterial</a></strong> es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.</p></li></ul><p>En <a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">esta presentación</a> tienes más información acerca de lo que llamo <strong>frontEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p><p><a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">Presentación frontEdge</a></p><p>Si tienes tiempo, mira <a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"noopener\">este vídeo</a> con una charla en la que comentamos estas y otras tecnologías para programadores.</p><p><a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"noopener\">video frontEdge</a></p>","site":{"data":{}},"excerpt":"","more":"<p>Inicio el año proponiendo una selección de tecnologías que serán <strong>tendencia en el desarrollo front end</strong> durante este 2016.</p><ul><li><p>Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"noopener\">ES6</a></strong>. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.</p></li><li><p>Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo <strong><a href=\"http://jspm.io/\" target=\"_blank\" rel=\"noopener\">JSPM</a></strong>, que se incorporará definitivamente a nuestro toolbox durante el 2016.</p></li><li><p>De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente <strong><a href=\"https://www.angularjs.org/\" target=\"_blank\" rel=\"noopener\">AngularJS1.5</a></strong></p></li><li><p>En la parte visual, el look &amp; feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería <strong><a href=\"https://material.angularjs.org/latest/\" target=\"_blank\" rel=\"noopener\">AngularMaterial</a></strong> es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.</p></li></ul><p>En <a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">esta presentación</a> tienes más información acerca de lo que llamo <strong>frontEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p><p><a href=\"https://docs.google.com/presentation/d/1ah0w0oW-urVn3rQbX5su2ZydFSyxyw4TIaeq2fCdR1Y/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">Presentación frontEdge</a></p><p>Si tienes tiempo, mira <a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"noopener\">este vídeo</a> con una charla en la que comentamos estas y otras tecnologías para programadores.</p><p><a href=\"https://www.youtube.com/watch?v=vJZb_rs2vvU\" target=\"_blank\" rel=\"noopener\">video frontEdge</a></p>"},{"title":"Soluciones BackEnd 2016","id":"8","updated":"2016-04-01T06:02:55.000Z","date":"2016-03-21T10:50:58.000Z","_content":"\nLas soluciones JavaScript para el servidor que marcan **tendencia en el desarrollo back end** durante este 2016. Continuación de la saga que iniciamos con **[FrontEdge](http://academia-binaria.com/soluciones-frontend-2016/)**.\n\n* Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. En el lado del servidor destaco la disponibilidad de [Promesas](http://es6-features.org/#PromiseUsage) de forma nativa..\n\n* Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que *hay que cumplir con el estándar REST y hay que documentar* todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses **[RAML](http://raml.org/)**. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.\n\n* El ya viejo conocido **[NodeJS](https://nodejs.org/)** se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.\n\n* En la base de datos irrumpe con fuerza la nueva versión de **[MongoDB 3.2](https://docs.mongodb.org/manual/release-notes/3.2/)**, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado *join* entre colecciones .\n\nEn [esta presentación](https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing) tienes más información acerca de lo que llamo **backEdge** : tecnología utilizable, de última generación y con enorme potencial.\n\nEn [este video](https://youtu.be/cfmJQjBfM-s) tienes la charla que di con o que llamo **Desarrollo Web** presentando las tendencias tecnológicas del 2016.","source":"_posts/Soluciones-BackEnd-2016.md","raw":"---\ntitle: Soluciones BackEnd 2016\ntags:\n- BackEnd\n- NodeJS\n- MongoDB\n- Opinión\npermalink: soluciones-backend-2016\nid: 8\nupdated: '2016-04-01 08:02:55'\ndate: 2016-03-21 11:50:58\n---\n\nLas soluciones JavaScript para el servidor que marcan **tendencia en el desarrollo back end** durante este 2016. Continuación de la saga que iniciamos con **[FrontEdge](http://academia-binaria.com/soluciones-frontend-2016/)**.\n\n* Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido **[ES6](http://es6-features.org/#Constants)**. En el lado del servidor destaco la disponibilidad de [Promesas](http://es6-features.org/#PromiseUsage) de forma nativa..\n\n* Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que *hay que cumplir con el estándar REST y hay que documentar* todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses **[RAML](http://raml.org/)**. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.\n\n* El ya viejo conocido **[NodeJS](https://nodejs.org/)** se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.\n\n* En la base de datos irrumpe con fuerza la nueva versión de **[MongoDB 3.2](https://docs.mongodb.org/manual/release-notes/3.2/)**, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado *join* entre colecciones .\n\nEn [esta presentación](https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing) tienes más información acerca de lo que llamo **backEdge** : tecnología utilizable, de última generación y con enorme potencial.\n\nEn [este video](https://youtu.be/cfmJQjBfM-s) tienes la charla que di con o que llamo **Desarrollo Web** presentando las tendencias tecnológicas del 2016.","slug":"soluciones-backend-2016","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4an000818s3z1j65rja","content":"<p>Las soluciones JavaScript para el servidor que marcan <strong>tendencia en el desarrollo back end</strong> durante este 2016. Continuación de la saga que iniciamos con <strong><a href=\"http://academia-binaria.com/soluciones-frontend-2016/\">FrontEdge</a></strong>.</p><ul><li><p>Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"noopener\">ES6</a></strong>. En el lado del servidor destaco la disponibilidad de <a href=\"http://es6-features.org/#PromiseUsage\" target=\"_blank\" rel=\"noopener\">Promesas</a> de forma nativa..</p></li><li><p>Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que <em>hay que cumplir con el estándar REST y hay que documentar</em> todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses <strong><a href=\"http://raml.org/\" target=\"_blank\" rel=\"noopener\">RAML</a></strong>. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.</p></li><li><p>El ya viejo conocido <strong><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">NodeJS</a></strong> se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.</p></li><li><p>En la base de datos irrumpe con fuerza la nueva versión de <strong><a href=\"https://docs.mongodb.org/manual/release-notes/3.2/\" target=\"_blank\" rel=\"noopener\">MongoDB 3.2</a></strong>, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado <em>join</em> entre colecciones .</p></li></ul><p>En <a href=\"https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">esta presentación</a> tienes más información acerca de lo que llamo <strong>backEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p><p>En <a href=\"https://youtu.be/cfmJQjBfM-s\" target=\"_blank\" rel=\"noopener\">este video</a> tienes la charla que di con o que llamo <strong>Desarrollo Web</strong> presentando las tendencias tecnológicas del 2016.</p>","site":{"data":{}},"excerpt":"","more":"<p>Las soluciones JavaScript para el servidor que marcan <strong>tendencia en el desarrollo back end</strong> durante este 2016. Continuación de la saga que iniciamos con <strong><a href=\"http://academia-binaria.com/soluciones-frontend-2016/\">FrontEdge</a></strong>.</p><ul><li><p>Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido <strong><a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"noopener\">ES6</a></strong>. En el lado del servidor destaco la disponibilidad de <a href=\"http://es6-features.org/#PromiseUsage\" target=\"_blank\" rel=\"noopener\">Promesas</a> de forma nativa..</p></li><li><p>Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que <em>hay que cumplir con el estándar REST y hay que documentar</em> todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses <strong><a href=\"http://raml.org/\" target=\"_blank\" rel=\"noopener\">RAML</a></strong>. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.</p></li><li><p>El ya viejo conocido <strong><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">NodeJS</a></strong> se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.</p></li><li><p>En la base de datos irrumpe con fuerza la nueva versión de <strong><a href=\"https://docs.mongodb.org/manual/release-notes/3.2/\" target=\"_blank\" rel=\"noopener\">MongoDB 3.2</a></strong>, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado <em>join</em> entre colecciones .</p></li></ul><p>En <a href=\"https://docs.google.com/presentation/d/12gdsjxUgsN58uzxF4XO38cP2QSH6IR5WjEZBLGfCgUY/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">esta presentación</a> tienes más información acerca de lo que llamo <strong>backEdge</strong> : tecnología utilizable, de última generación y con enorme potencial.</p><p>En <a href=\"https://youtu.be/cfmJQjBfM-s\" target=\"_blank\" rel=\"noopener\">este video</a> tienes la charla que di con o que llamo <strong>Desarrollo Web</strong> presentando las tendencias tecnológicas del 2016.</p>"},{"title":"Node 6.0.0 actualización con nvm","id":"11","updated":"2016-05-05T08:02:26.000Z","date":"2016-05-05T07:39:40.000Z","_content":"\nAcabamos de recibir la buena noticia de la versión 6 de **NodeJS**. En este caso con mejoras de rendimiento e incorporación de sintaxis de **ES6**. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama [nvm](https://github.com/creationix/nvm)\n\nEstos son los pasos que has de seguir para instalar la herramienta.\n\nSe recomienda desinstalar las versiones de **node** y **npm** instaladas previamente. No es obligatorio.\n\n#### LINUX & OS X\n\n1- Comprobamos que tenemos instaladas las dependencias\n1.1 - Dependencias **Linux**\n```\nsudo apt-get update\nsudo apt-get install build-essential\n```\n\n1.2 -Dependencias **OSX** (herramientas de linea de comandos para XCode)\n```\nxcode-select --install\n```\n\n\n2- Descargamos y ejecutamos el script de instalación\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\n\n3- Comprobamos que está instalado **NVM**\n```\ncommand -v nvm\n```\n*debe devolver nvm*\n\n\n4- Instalamos la versión de Node que deseamos\n```\nnvm install 6.0.0\n```\n\n5- Elegimos la versión de Node instalada que deseamos usar\n\n```\nnvm use 6.0.0\n```\n\n#### WINDOWS\n\nPara **Windows** no existe una versión *nativa* de **nvm**, pero si hay dos opciones para gestionar las versiones de node instaladas.\n\n1- **nvm-windows**\n\thttps://github.com/coreybutler/nvm-windows\n\tEs un wrapper de npm para windows, el instalador se encuentra en la URL (https://github.com/coreybutler/nvm/releases).\n\nLos `comandos` para instalar y la versión de Node son los mismos que en Linux y OSX.\n\n2- **nodist**\nEs un gestor de versiones parecido a NVM solo para Windows\n\tLa URL del instalador (https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe).\n\tLos comandos se encuentran en la documentación. (https://github.com/marcelklehr/nodist)","source":"_posts/Node-6-0-0-actualizacion-con-nvm.md","raw":"---\ntitle: Node 6.0.0 actualización con nvm\ntags:\n- NodeJS\n- Introducción\npermalink: node-6-0-0-actualizacion-con-nvm\nid: 11\nupdated: '2016-05-05 10:02:26'\ndate: 2016-05-05 09:39:40\n---\n\nAcabamos de recibir la buena noticia de la versión 6 de **NodeJS**. En este caso con mejoras de rendimiento e incorporación de sintaxis de **ES6**. ¿Cómo obtener esta nueva versión?. Y sobretodo,  ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama [nvm](https://github.com/creationix/nvm)\n\nEstos son los pasos que has de seguir para instalar la herramienta.\n\nSe recomienda desinstalar las versiones de **node** y **npm** instaladas previamente. No es obligatorio.\n\n#### LINUX & OS X\n\n1- Comprobamos que tenemos instaladas las dependencias\n1.1 - Dependencias **Linux**\n```\nsudo apt-get update\nsudo apt-get install build-essential\n```\n\n1.2 -Dependencias **OSX** (herramientas de linea de comandos para XCode)\n```\nxcode-select --install\n```\n\n\n2- Descargamos y ejecutamos el script de instalación\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\n\n3- Comprobamos que está instalado **NVM**\n```\ncommand -v nvm\n```\n*debe devolver nvm*\n\n\n4- Instalamos la versión de Node que deseamos\n```\nnvm install 6.0.0\n```\n\n5- Elegimos la versión de Node instalada que deseamos usar\n\n```\nnvm use 6.0.0\n```\n\n#### WINDOWS\n\nPara **Windows** no existe una versión *nativa* de **nvm**, pero si hay dos opciones para gestionar las versiones de node instaladas.\n\n1- **nvm-windows**\n\thttps://github.com/coreybutler/nvm-windows\n\tEs un wrapper de npm para windows, el instalador se encuentra en la URL (https://github.com/coreybutler/nvm/releases).\n\nLos `comandos` para instalar y la versión de Node son los mismos que en Linux y OSX.\n\n2- **nodist**\nEs un gestor de versiones parecido a NVM solo para Windows\n\tLa URL del instalador (https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe).\n\tLos comandos se encuentran en la documentación. (https://github.com/marcelklehr/nodist)","slug":"node-6-0-0-actualizacion-con-nvm","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4aq000a18s3cjrgbokw","content":"<p>Acabamos de recibir la buena noticia de la versión 6 de <strong>NodeJS</strong>. En este caso con mejoras de rendimiento e incorporación de sintaxis de <strong>ES6</strong>. ¿Cómo obtener esta nueva versión?. Y sobretodo, ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a></p><p>Estos son los pasos que has de seguir para instalar la herramienta.</p><p>Se recomienda desinstalar las versiones de <strong>node</strong> y <strong>npm</strong> instaladas previamente. No es obligatorio.</p><h4 id=\"LINUX-amp-OS-X\"><a href=\"#LINUX-amp-OS-X\" class=\"headerlink\" title=\"LINUX &amp; OS X\"></a>LINUX &amp; OS X</h4><p>1- Comprobamos que tenemos instaladas las dependencias<br>1.1 - Dependencias <strong>Linux</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><p>1.2 -Dependencias <strong>OSX</strong> (herramientas de linea de comandos para XCode)</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure><p>2- Descargamos y ejecutamos el script de instalación</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>3- Comprobamos que está instalado <strong>NVM</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command -v nvm</span><br></pre></td></tr></table></figure><p><em>debe devolver nvm</em></p><p>4- Instalamos la versión de Node que deseamos</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 6.0.0</span><br></pre></td></tr></table></figure><p>5- Elegimos la versión de Node instalada que deseamos usar</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 6.0.0</span><br></pre></td></tr></table></figure><h4 id=\"WINDOWS\"><a href=\"#WINDOWS\" class=\"headerlink\" title=\"WINDOWS\"></a>WINDOWS</h4><p>Para <strong>Windows</strong> no existe una versión <em>nativa</em> de <strong>nvm</strong>, pero si hay dos opciones para gestionar las versiones de node instaladas.</p><p>1- <strong>nvm-windows</strong><br><a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm-windows</a><br>Es un wrapper de npm para windows, el instalador se encuentra en la URL (<a href=\"https://github.com/coreybutler/nvm/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm/releases</a>).</p><p>Los <code>comandos</code> para instalar y la versión de Node son los mismos que en Linux y OSX.</p><p>2- <strong>nodist</strong><br>Es un gestor de versiones parecido a NVM solo para Windows<br>La URL del instalador (<a href=\"https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe\" target=\"_blank\" rel=\"noopener\">https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe</a>).<br>Los comandos se encuentran en la documentación. (<a href=\"https://github.com/marcelklehr/nodist\" target=\"_blank\" rel=\"noopener\">https://github.com/marcelklehr/nodist</a>)</p>","site":{"data":{}},"excerpt":"","more":"<p>Acabamos de recibir la buena noticia de la versión 6 de <strong>NodeJS</strong>. En este caso con mejoras de rendimiento e incorporación de sintaxis de <strong>ES6</strong>. ¿Cómo obtener esta nueva versión?. Y sobretodo, ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a></p><p>Estos son los pasos que has de seguir para instalar la herramienta.</p><p>Se recomienda desinstalar las versiones de <strong>node</strong> y <strong>npm</strong> instaladas previamente. No es obligatorio.</p><h4 id=\"LINUX-amp-OS-X\"><a href=\"#LINUX-amp-OS-X\" class=\"headerlink\" title=\"LINUX &amp; OS X\"></a>LINUX &amp; OS X</h4><p>1- Comprobamos que tenemos instaladas las dependencias<br>1.1 - Dependencias <strong>Linux</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><p>1.2 -Dependencias <strong>OSX</strong> (herramientas de linea de comandos para XCode)</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure><p>2- Descargamos y ejecutamos el script de instalación</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>3- Comprobamos que está instalado <strong>NVM</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command -v nvm</span><br></pre></td></tr></table></figure><p><em>debe devolver nvm</em></p><p>4- Instalamos la versión de Node que deseamos</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 6.0.0</span><br></pre></td></tr></table></figure><p>5- Elegimos la versión de Node instalada que deseamos usar</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 6.0.0</span><br></pre></td></tr></table></figure><h4 id=\"WINDOWS\"><a href=\"#WINDOWS\" class=\"headerlink\" title=\"WINDOWS\"></a>WINDOWS</h4><p>Para <strong>Windows</strong> no existe una versión <em>nativa</em> de <strong>nvm</strong>, pero si hay dos opciones para gestionar las versiones de node instaladas.</p><p>1- <strong>nvm-windows</strong><br><a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm-windows</a><br>Es un wrapper de npm para windows, el instalador se encuentra en la URL (<a href=\"https://github.com/coreybutler/nvm/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm/releases</a>).</p><p>Los <code>comandos</code> para instalar y la versión de Node son los mismos que en Linux y OSX.</p><p>2- <strong>nodist</strong><br>Es un gestor de versiones parecido a NVM solo para Windows<br>La URL del instalador (<a href=\"https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe\" target=\"_blank\" rel=\"noopener\">https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe</a>).<br>Los comandos se encuentran en la documentación. (<a href=\"https://github.com/marcelklehr/nodist\" target=\"_blank\" rel=\"noopener\">https://github.com/marcelklehr/nodist</a>)</p>"},{"title":"Formularios, tablas y modelos de datos en Angular","date":"2019-01-31T18:17:37.000Z","thumbnail":"/css/images/angular-3_data.png","_content":"\n![formularios-tablas-y-modelos-de-datos-en-angular](/images/tutorial-angular-3_data.png)\n\nLas **aplicaciones Angular 8 son excelentes para el tratamiento de datos** en el navegador. Su razón de ser fue la recogida de información mediante formularios y la presentación de páginas dinámicas de forma sencilla.\n\nVamos a ver cómo la librería `@angular/forms` enlaza **las vistas, los controladores y los modelos**; y cómo se hace la presentación de datos en **listas y tablas**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/), al finalizar tendrás una aplicación que recoge y presenta datos.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/3-data]https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/3-data/contacts)\n\n# 1. Binding\n\n## 1.0 Base\n\n**Los formularios son el punto de entrada** de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En _Angular_ han prestado una especial atención a ellos facilitando su desarrollo, **desde pantallas simples hasta complejos procesos**.\n\nPara empezar crearemos un proceso sencillo. algo que permita mantener una lista de contactos empresariales. Con lo aprendido en el tema de [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/) creamos un par de ficheros.\n\n```bash\nng g m contacts --routing true\nng g c contacts/contacts\n```\n\nY asignamos sus rutas delegadas en `app-routing` y en `contacts-routing`:\n\n```typescript\n  // app-routing\n  {\n    path: 'contacts',\n    loadChildren: () => import('./3-data/contacts/contacts.module').then(m => m.ContactsModule)\n  },\n  // contacts-routing\n  {\n    path: '',\n    component: ContactsComponent\n  }\n```\n\nY finalizamos con un enlace en el `HeaderComponent`\n\n```html\n<a routerLink=\"contacts\" class=\"button\">\n  <span> Contacts</span>\n</a>\n```\n\nLa clave para entender cómo funciona _Angular_ está en el concepto de **enlace entre elementos html de las vistas y propiedades de modelos** de datos, el llamado `binding`.\n\nPara realizar el _binding_ usaremos **directivas** en ambos sentidos.\n\n## 1.1 Enlace del modelo hacia la vista\n\nVamos a crear un pequeño modelo de datos. Para empezar agregamos algunas propiedades. En `contacts.component.ts`:\n\n```typescript\npublic header = 'Contacts';\npublic description = 'Manage your contact list';\npublic numContacts = 0;\npublic counterClass = 'tag secondary';\npublic formHidden = false;\n```\n\nEn `contacts.component.html` mostramos cabeceras con estilo\n\n```html\n<h2>{{ header }}</h2>\n<p>{{ description | uppercase }}</p>\n<p>\n  You have\n  <mark [class]=\"counterClass\">{{ numContacts }}</mark>\n  contacts right now.\n</p>\n```\n\n### La interpolación entre \\{ \\{ \\} \\}\n\nEn el fichero `contacts.component.ts` tienes en su vista _html_ encontrarás elementos ajenos al lenguaje. Son las directivas. La primera que encuentras es `{{ header }}`. Esas dobles llaves encierran expresiones que se evaluarán en tiempo de ejecución. La llamamos **directiva de interpolación** y es la manera más cómoda y usual de mostrar contenido dinámico en Angular.\n\n> La expresión interna hace referencia a variables que se obtienen de las propiedades de la clase controladora del componente. En este caso `ContactsComponent` y `header`, con su valor _Contacts_ en ejecución. Este enlace mantiene la vista permanentemente actualizada a través de un potente sistema de detección del cambio.\n\n### Las tuberías |\n\nSi queremos que la presentación del dato sea distinta a su valor real, podemos usar **funciones de transformación** especiales. Se llaman tuberías o _pipes_ y se indican mediante el carácter `|`.\n\nEl _framework_ nos provee de casos básicos como `uppercase, lowercase, date, number...`. También dispones de un mecanismo para crear tus propios _pipes_.\n\n### Los atributos evaluados []\n\nEn _Html_ disponemos de atributos para asignar valores a propiedades de los elementos. Esos atributos reciben los valores como constantes. Pero, si se encierran entre corchetes se convierten en un **evaluador de expresiones** y puede recibir una variable o cualquier otra expresión.\n\nComo por ejemplo usando una _clase css_ cuyo valor cambia en tiempo de ejecución. O para deshabilitar un elemento dinámicamente.\n\n## 1.2 Enlace de la vista hacia el modelo\n\nEn `contacts.component.html` también actuamos sobre la vista, para manipular el modelo... y de vuelta a la vista. Por ejemplo con mecanismo simple de ocultación de un elemento.\n\n```html\n<input value=\"Show Form\" type=\"button\" (click)=\"formHidden = false\" />\n<input value=\"Hide Form\" type=\"button\" (click)=\"formHidden = true\" />\n<form [ngClass]=\"{ 'hidden' : formHidden }\">\n  <fieldset><legend>Contact Form</legend></fieldset>\n</form>\n```\n\n### Las clases CSS como atributos especiales\n\nPara el caso concreto de determinar las clases CSS aplicables a un elemento de manera dinámica, usaremos la directiva `ngClass`. La cual recibe un objeto cuyas propiedades son nombres de clases CSS y sus valores son expresiones booleanas. Si se cumplen se aplica la clase y si no, se quita la clase.\n\n```html\n[ngClass]=\"{ 'hidden' : formHidden }\"\n```\n\nEn este caso se oculta el elemento dependiendo del valor de la expresión `formHidden`. Pero ¿Cómo se manipula esa variable?\n\n### Los eventos ()\n\nCualquier evento asociado a un elemento puede ejecutar una instrucción sin más que incluirlo entre paréntesis. Idealmente dicha instrucción debe llamar a un método o función de la clase controladora. Aunque si es trivial puedes dejarla en el Html.\n\n```html\n(click)=\"formHidden = true\"\n```\n\n# 2. Doble Binding\n\nLa comunicación del modelo hacia la vista es sólo el principio. En _Angular_ también podrás **comunicar la vista hacia el modelo**, permitiéndole al usuario modificar los datos a través de formularios. Es lo que se conoce como _double binding_.\n\n## 2.1 El doble enlace al modelo [(ngModel)]\n\nLa directiva `[(ngModel)]` se compone de un atributo _custom_ `ngModel` y lo rodea de los símbolos `[()]`. Esta técnica es conocida como _banana in a box_ porque su sintaxis requiere un `()` dentro de un `[]` y une las capacidades de las expresiones y los eventos facilitando la comunicación bidireccional.\n\n```html\n[(ngModel)]=\"model.property\"\n```\n\nUsa la comunicación en ambos sentidos\n\n- **(banana)** : de la vista al modelo\n- **[box]** : del modelo a la vista\n\n> Atención: La directiva `ngModel` viene dentro del módulo `FormsModule` que hay que importar explícitamente.\n\nPor ejemplo `[(ngModel)]=\"contact.name\"` enlaza doblemente la propiedad del modelo `contact.name` con el elemento `<input>` de la vista. Cada tecleo del usuario se registra en la variable. Y el valor de la variable se muestra en el `<input>`.\n\nDada un modelo como este en `contacts.component.ts`:\n\n```typescript\npublic contact = { name: '' };\n```\n\nPodemos enlazarlos en la plantilla\n\n```html\n<section>\n  <label for=\"name\">Name</label>\n  <input name=\"name\" type=\"text\" [(ngModel)]=\"contact.name\" placeholder=\"Contact name\" />\n</section>\n```\n\n> Es muy útil mantener en desarrollo un espía visual de lo que está pasando con los datos. Algunas extensiones como [Augury](https://augury.rangle.io/) aportan muchas más prestaciones, pero al empezar el _pipe json_ te ayudará mucho.\n\n```html\n<pre>{{ contact | json }}</pre>\n```\n\nLa directiva `ngModel` es mucho más potente de lo visto aquí. Entre otras cosas permite decidir el criterio de actualización (a cada cambio o al salir del control). También se verá más adelante el asunto de la validación, que requiere un trato especial. Cuando empiezas con Angular Forms, **un input y su ngModel** asociado serán tus mejores amigos.\n\n## 2.2 Form\n\nHay más usos de las directivas en los formularios. Por ejemplo, dado el siguiente modelo:\n\n```typescript\npublic contact = { name: '', isVIP: false, gender: '' };\n```\n\nLe vendría muy bien un _check box_.\n\n### CheckBox\n\n```html\n<section>\n  <label for=\"isVIP\">Is V.I.P.</label>\n  <input name=\"isVIP\" type=\"checkbox\" [(ngModel)]=\"contact.isVIP\" />\n</section>\n```\n\nY un para de _radio buttons_.\n\n### Radio Buttons\n\n```html\n<section>\n  <label for=\"gender\">Gender</label>\n  <input name=\"gender\" value=\"male\" type=\"radio\" [(ngModel)]=\"contact.gender\" />\n  <i>Male</i>\n  <input name=\"gender\" value=\"female\" type=\"radio\" [(ngModel)]=\"contact.gender\" />\n  <i>Female</i>\n</section>\n```\n\n# 3 Estructuras\n\nLos anteriores modificadores actúan a nivel de contenido del HTML. Veremos ahora una para de directivas que afectan directamente a **la estructura del árbol DOM**. Son las llamadas directivas estructurales que comienzan por el signo `*`\n\n## 3.1 Repetitivas \\*ngFor\n\nUna situación que nos encontramos una y otra vez es la de las repeticiones. Listas de datos, tablas o grupos de opciones son ejemplos claros. Hay una directiva en _Angular_ para esa situación, la `*ngFor=\"let iterador of array\"`. **La directiva `*ngFor` forma parte del grupo de directivas estructurales**, porque modifica la estructura del DOM, en este caso insertando múltiples nodos hijos a un elemento dado.\n\n> Puedes ver un ejemplo del uso la directiva `*ngFor` en el componente `ContactsComponent`. Se emplea para recorrer un array de tipos de estado laboral. Es el caso de uso _más repetido de las repeticiones_; mostrar listas de datos.\n\nDado el siguiente modelo:\n\n```typescript\npublic workStatuses = [\n  { id: 0, description: 'unknow' },\n  { id: 1, description: 'student' },\n  { id: 2, description: 'unemployed' },\n  { id: 3, description: 'employed' }\n];\npublic contact = { name: '', isVIP: false, gender: '', workStatus: 0 };\n```\n\nMontamos las opciones de un _select_ html recorriendo el array y usando el iterador `wkSt` para acceder a sus datos.\n\n```html\n<section>\n  <label for=\"workStatus\">Work Status</label>\n  <select name=\"workStatus\" [(ngModel)]=\"contact.workStatus\">\n    <option *ngFor=\"let wkSt of workStatuses\" [value]=\"wkSt.id\">\n      <span>{{ wkSt.description }}</span>\n    </option>\n  </select>\n</section>\n```\n\n## 3.2 Condicionales \\*ngIf\n\nLa directiva estructural más utilizada es la `*ngIf`, la cual consigue que un elemento se incluya o se elimine en el _DOM_ en función de los datos del modelo.\n\n> En el ejemplo puedes ver que la uso para mostrar el campo empresa cuando el contacto está trabajando. En otro aparecerá el campo de estudios.\n\nDado el siguiente modelo:\n\n```typescript\npublic contact = {\n  name: '',\n  isVIP: false,\n  gender: '',\n  workStatus: '0',\n  company: '',\n  education: ''\n};\n```\n\n```html\n<section *ngIf=\"contact.workStatus=='3'; else education\">\n  <label for=\"company\">Company Name</label>\n  <input name=\"company\" type=\"text\" [(ngModel)]=\"contact.company\" />\n</section>\n<ng-template #education>\n  <section>\n    <label for=\"education\">Education</label>\n    <input name=\"education\" type=\"text\" [(ngModel)]=\"contact.education\"/>\n  </section>\n</ng-template>\n```\n\n> if **condition** else **template**\n\n### Identificadores con hashtag\n\nEn el código anterior apreciarás que aparece un elemento `<ng-template>` no estándar con el atributo llamado `#education` precedido por un `#`. La directiva `#` genera un identificador único para el elemento al que se le aplica y permite referirse a él en otros lugares del código.\n\nEse truco permite que `*ngIf` muestre otro elemento cuando la condición principal falle. El otro elemento tiene que ser el componente especial `<ng-template>` que se usa para envolver una rama opcional del DOM. Para localizarlo se usa el identificador `#`.\n\n# 4 Modelo y controlador\n\nLos componentes los hemos definido como **bloques de construcción de páginas. Mediante una vista y un controlador** resuelven un problema de interacción o presentación de modelos. En los puntos anteriores te presenté la vista. Toca ahora estudiar el modelo y el controlador.\n\n## 4.1 El modelo y su interInterfaces y modelos\n\nSin ir muy lejos en las capacidades que tendría un modelo de datos clásico, vamos al menos a beneficiarnos del **_TypeScript_ para definir la estructura de datos**. Esto facilitará la programación mediante el autocompletado del editor y reducirá los errores de tecleo mediante la comprobación estática de tipos.\n\nPara ello necesito una interfaz sencilla. Esto es puro _TypeScript_, no es ningún artificio registrable en Angular. Esos sí, en algún sitio tienen que estar. Yo suelo usar una ruta como `contacts/models`, pero es algo completamente arbitrario.\n\n```typescript\nexport interface Option {\n  id: number;\n  description: string;\n}\n\nexport interface Contact {\n  name: string;\n  isVIP: boolean;\n  gender: string;\n  workStatus: number | string;\n  company: string;\n  education: string;\n}\n```\n\n> Te recomiendo que **no uses clases para definir modelos** a menos que necesites agregarle funcionalidad imprescindible. Las interfaces, ayudan al control de tipos en tiempo de desarrollo, igual que las clases, pero sin generar nada de código en tiempo de ejecución, al contrario que las clases. Ojo al uso de tipos compuestos como `number | string`\n\nSe usan para tipificar las propiedades que conforman nuestro modelo para la vista.\n\n```typescript\npublic workStatuses: Option[] = [\n    { id: 0, description: 'unknow' },\n    { id: 1, description: 'student' },\n    { id: 2, description: 'unemployed' },\n    { id: 3, description: 'employed' }\n  ];\npublic contact: Contact = {\n    name: '',\n    isVIP: false,\n    gender: '',\n    workStatus: 0,\n    company: '',\n    education: ''\n  };\npublic contacts: Contact[] = [];\n```\n\n## 4.2 ViewModel en el controlador\n\nLa parte de **lógica del componente** va en la clase que se usa para su definición. Como ya has visto podemos usar su constructor para reclamar dependencias y usar los interfaces para responder a eventos de su ciclo de vida. Repasemos el `ContactsComponent` viéndolo como la clase que es: no solo propiedades, también **métodos**\n\n```typescript\npublic saveContact() {\n  this.contacts.push({ ...this.contact });\n  this.updateCounter();\n}\nprivate updateCounter() {\n  this.numContacts = this.contacts.length;\n  this.counterClass = this.numContacts === 0 ? 'tag secondary' : 'tag primary';\n}\n```\n\nAhora se trata de invocar el método desde la vista. Es muy buena práctica llevar la lógica al controlador y no escribirla en la vista.\n\n```html\n<input value=\"Save\" type=\"submit\" (click)=\"saveContact()\" />\n```\n\nPodemos decir que las propiedades públicas de la clase actuarán como _binding_ de datos con la vista. Mientras que los métodos públicos serán invocados desde los eventos de la misma vista.\n\n### OnInit\n\nLos componentes son clases con un **ciclo de vida** al que puedes enganchar tu código en algunos pasos. Por ejemplo al iniciarse el componente.\n\nEl CLI hace que las clase del componente implemente la interfaz `OnInit` y eso permite al framework invocar al método `ngOnInit` en cuanto el componente esté listo para su uso. Que no suele ser justo durante la construcción, si no un poco después. Te recomiendo que lleves toda la lógica de inicialización a dicho método.\n\n```typescript\npublic workStatuses: Option[];\npublic contact: Contact;\npublic contacts: Contact[];\nconstructor() {}\npublic ngOnInit() {\n  this.workStatuses = [\n    { id: 0, description: 'unknow' },\n    { id: 1, description: 'student' },\n    { id: 2, description: 'unemployed' },\n    { id: 3, description: 'employed' }\n  ];\n  this.contact = {\n    name: '',\n    isVIP: false,\n    gender: '',\n    workStatus: 0,\n    company: '',\n    education: ''\n  };\n  this.contacts = [];\n}\n```\n\n### Un listado de repaso\n\nPara mostrar lo que ahora estamos guardando en una lista, nada más sencillo que usar de nuevo a `*nFor` y a `*ngIf` para tratar listas vacías.\n\n```html\n<ul *ngIf=\"contacts.length>0; else empty\">\n  <li *ngFor=\"let contact of contacts\">\n    <span>{{ contact.name }}</span>\n    <input value=\"Delete\" type=\"button\" (click)=\"deleteContact(contact)\" />\n  </li>\n</ul>\n<ng-template #empty> <i>No data yet</i> </ng-template>\n```\n\nY ya puestos incluso puedes animarte a borrar contactos. Es fácil, los métodos pueden recibir argumentos. Y la vista los puede enviar.\n\n```typescript\npublic deleteContact(contact: Contact) {\n  this.contacts = this.contacts.filter(c => c.name !== contact.name);\n  this.updateCounter();\n}\n```\n\nMira el código completo de **la clase** `ContactsComponent`en el fichero `contacts.component.ts` para tener una visión completa del componente. Como ves, **las propiedades** `header, numContacas, formHidden, contacts ...` se corresponden con las utilizadas en las directivas de enlace en la vista. **Los métodos** `saveContact(), deleteContact()` son invocados desde eventos de elementos del _html_.\n\nJuntos, **la vista y su clase controladora**, resuelven un problema de interacción con el usuario **creando un componente**. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.\n\n> Y esto es sólo el comienzo. La idea de componente será fundamental en la web del mañana para la creación de páginas mediante `web components`. Pero eso ya se verá más adelante...\n\nAhora tienes una aplicación en _Angular 8_ que recoge y muestra datos. Sigue esta serie para añadirle [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/) mientras aprendes a programar con Angular7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-3-Formularios-tablas-y-modelos-de-datos-en-Angular.md","raw":"---\ntitle: Formularios, tablas y modelos de datos en Angular\npermalink: formularios-tablas-y-modelos-de-datos-en-angular\ndate: 2019-01-31 19:17:37\ntags:\n  - Angular\n  - Forms\n  - Tutorial\n  - Introducción\n  - Angular8\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-3_data.png\n---\n\n![formularios-tablas-y-modelos-de-datos-en-angular](/images/tutorial-angular-3_data.png)\n\nLas **aplicaciones Angular 8 son excelentes para el tratamiento de datos** en el navegador. Su razón de ser fue la recogida de información mediante formularios y la presentación de páginas dinámicas de forma sencilla.\n\nVamos a ver cómo la librería `@angular/forms` enlaza **las vistas, los controladores y los modelos**; y cómo se hace la presentación de datos en **listas y tablas**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/), al finalizar tendrás una aplicación que recoge y presenta datos.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/3-data]https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/3-data/contacts)\n\n# 1. Binding\n\n## 1.0 Base\n\n**Los formularios son el punto de entrada** de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En _Angular_ han prestado una especial atención a ellos facilitando su desarrollo, **desde pantallas simples hasta complejos procesos**.\n\nPara empezar crearemos un proceso sencillo. algo que permita mantener una lista de contactos empresariales. Con lo aprendido en el tema de [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/) creamos un par de ficheros.\n\n```bash\nng g m contacts --routing true\nng g c contacts/contacts\n```\n\nY asignamos sus rutas delegadas en `app-routing` y en `contacts-routing`:\n\n```typescript\n  // app-routing\n  {\n    path: 'contacts',\n    loadChildren: () => import('./3-data/contacts/contacts.module').then(m => m.ContactsModule)\n  },\n  // contacts-routing\n  {\n    path: '',\n    component: ContactsComponent\n  }\n```\n\nY finalizamos con un enlace en el `HeaderComponent`\n\n```html\n<a routerLink=\"contacts\" class=\"button\">\n  <span> Contacts</span>\n</a>\n```\n\nLa clave para entender cómo funciona _Angular_ está en el concepto de **enlace entre elementos html de las vistas y propiedades de modelos** de datos, el llamado `binding`.\n\nPara realizar el _binding_ usaremos **directivas** en ambos sentidos.\n\n## 1.1 Enlace del modelo hacia la vista\n\nVamos a crear un pequeño modelo de datos. Para empezar agregamos algunas propiedades. En `contacts.component.ts`:\n\n```typescript\npublic header = 'Contacts';\npublic description = 'Manage your contact list';\npublic numContacts = 0;\npublic counterClass = 'tag secondary';\npublic formHidden = false;\n```\n\nEn `contacts.component.html` mostramos cabeceras con estilo\n\n```html\n<h2>{{ header }}</h2>\n<p>{{ description | uppercase }}</p>\n<p>\n  You have\n  <mark [class]=\"counterClass\">{{ numContacts }}</mark>\n  contacts right now.\n</p>\n```\n\n### La interpolación entre \\{ \\{ \\} \\}\n\nEn el fichero `contacts.component.ts` tienes en su vista _html_ encontrarás elementos ajenos al lenguaje. Son las directivas. La primera que encuentras es `{{ header }}`. Esas dobles llaves encierran expresiones que se evaluarán en tiempo de ejecución. La llamamos **directiva de interpolación** y es la manera más cómoda y usual de mostrar contenido dinámico en Angular.\n\n> La expresión interna hace referencia a variables que se obtienen de las propiedades de la clase controladora del componente. En este caso `ContactsComponent` y `header`, con su valor _Contacts_ en ejecución. Este enlace mantiene la vista permanentemente actualizada a través de un potente sistema de detección del cambio.\n\n### Las tuberías |\n\nSi queremos que la presentación del dato sea distinta a su valor real, podemos usar **funciones de transformación** especiales. Se llaman tuberías o _pipes_ y se indican mediante el carácter `|`.\n\nEl _framework_ nos provee de casos básicos como `uppercase, lowercase, date, number...`. También dispones de un mecanismo para crear tus propios _pipes_.\n\n### Los atributos evaluados []\n\nEn _Html_ disponemos de atributos para asignar valores a propiedades de los elementos. Esos atributos reciben los valores como constantes. Pero, si se encierran entre corchetes se convierten en un **evaluador de expresiones** y puede recibir una variable o cualquier otra expresión.\n\nComo por ejemplo usando una _clase css_ cuyo valor cambia en tiempo de ejecución. O para deshabilitar un elemento dinámicamente.\n\n## 1.2 Enlace de la vista hacia el modelo\n\nEn `contacts.component.html` también actuamos sobre la vista, para manipular el modelo... y de vuelta a la vista. Por ejemplo con mecanismo simple de ocultación de un elemento.\n\n```html\n<input value=\"Show Form\" type=\"button\" (click)=\"formHidden = false\" />\n<input value=\"Hide Form\" type=\"button\" (click)=\"formHidden = true\" />\n<form [ngClass]=\"{ 'hidden' : formHidden }\">\n  <fieldset><legend>Contact Form</legend></fieldset>\n</form>\n```\n\n### Las clases CSS como atributos especiales\n\nPara el caso concreto de determinar las clases CSS aplicables a un elemento de manera dinámica, usaremos la directiva `ngClass`. La cual recibe un objeto cuyas propiedades son nombres de clases CSS y sus valores son expresiones booleanas. Si se cumplen se aplica la clase y si no, se quita la clase.\n\n```html\n[ngClass]=\"{ 'hidden' : formHidden }\"\n```\n\nEn este caso se oculta el elemento dependiendo del valor de la expresión `formHidden`. Pero ¿Cómo se manipula esa variable?\n\n### Los eventos ()\n\nCualquier evento asociado a un elemento puede ejecutar una instrucción sin más que incluirlo entre paréntesis. Idealmente dicha instrucción debe llamar a un método o función de la clase controladora. Aunque si es trivial puedes dejarla en el Html.\n\n```html\n(click)=\"formHidden = true\"\n```\n\n# 2. Doble Binding\n\nLa comunicación del modelo hacia la vista es sólo el principio. En _Angular_ también podrás **comunicar la vista hacia el modelo**, permitiéndole al usuario modificar los datos a través de formularios. Es lo que se conoce como _double binding_.\n\n## 2.1 El doble enlace al modelo [(ngModel)]\n\nLa directiva `[(ngModel)]` se compone de un atributo _custom_ `ngModel` y lo rodea de los símbolos `[()]`. Esta técnica es conocida como _banana in a box_ porque su sintaxis requiere un `()` dentro de un `[]` y une las capacidades de las expresiones y los eventos facilitando la comunicación bidireccional.\n\n```html\n[(ngModel)]=\"model.property\"\n```\n\nUsa la comunicación en ambos sentidos\n\n- **(banana)** : de la vista al modelo\n- **[box]** : del modelo a la vista\n\n> Atención: La directiva `ngModel` viene dentro del módulo `FormsModule` que hay que importar explícitamente.\n\nPor ejemplo `[(ngModel)]=\"contact.name\"` enlaza doblemente la propiedad del modelo `contact.name` con el elemento `<input>` de la vista. Cada tecleo del usuario se registra en la variable. Y el valor de la variable se muestra en el `<input>`.\n\nDada un modelo como este en `contacts.component.ts`:\n\n```typescript\npublic contact = { name: '' };\n```\n\nPodemos enlazarlos en la plantilla\n\n```html\n<section>\n  <label for=\"name\">Name</label>\n  <input name=\"name\" type=\"text\" [(ngModel)]=\"contact.name\" placeholder=\"Contact name\" />\n</section>\n```\n\n> Es muy útil mantener en desarrollo un espía visual de lo que está pasando con los datos. Algunas extensiones como [Augury](https://augury.rangle.io/) aportan muchas más prestaciones, pero al empezar el _pipe json_ te ayudará mucho.\n\n```html\n<pre>{{ contact | json }}</pre>\n```\n\nLa directiva `ngModel` es mucho más potente de lo visto aquí. Entre otras cosas permite decidir el criterio de actualización (a cada cambio o al salir del control). También se verá más adelante el asunto de la validación, que requiere un trato especial. Cuando empiezas con Angular Forms, **un input y su ngModel** asociado serán tus mejores amigos.\n\n## 2.2 Form\n\nHay más usos de las directivas en los formularios. Por ejemplo, dado el siguiente modelo:\n\n```typescript\npublic contact = { name: '', isVIP: false, gender: '' };\n```\n\nLe vendría muy bien un _check box_.\n\n### CheckBox\n\n```html\n<section>\n  <label for=\"isVIP\">Is V.I.P.</label>\n  <input name=\"isVIP\" type=\"checkbox\" [(ngModel)]=\"contact.isVIP\" />\n</section>\n```\n\nY un para de _radio buttons_.\n\n### Radio Buttons\n\n```html\n<section>\n  <label for=\"gender\">Gender</label>\n  <input name=\"gender\" value=\"male\" type=\"radio\" [(ngModel)]=\"contact.gender\" />\n  <i>Male</i>\n  <input name=\"gender\" value=\"female\" type=\"radio\" [(ngModel)]=\"contact.gender\" />\n  <i>Female</i>\n</section>\n```\n\n# 3 Estructuras\n\nLos anteriores modificadores actúan a nivel de contenido del HTML. Veremos ahora una para de directivas que afectan directamente a **la estructura del árbol DOM**. Son las llamadas directivas estructurales que comienzan por el signo `*`\n\n## 3.1 Repetitivas \\*ngFor\n\nUna situación que nos encontramos una y otra vez es la de las repeticiones. Listas de datos, tablas o grupos de opciones son ejemplos claros. Hay una directiva en _Angular_ para esa situación, la `*ngFor=\"let iterador of array\"`. **La directiva `*ngFor` forma parte del grupo de directivas estructurales**, porque modifica la estructura del DOM, en este caso insertando múltiples nodos hijos a un elemento dado.\n\n> Puedes ver un ejemplo del uso la directiva `*ngFor` en el componente `ContactsComponent`. Se emplea para recorrer un array de tipos de estado laboral. Es el caso de uso _más repetido de las repeticiones_; mostrar listas de datos.\n\nDado el siguiente modelo:\n\n```typescript\npublic workStatuses = [\n  { id: 0, description: 'unknow' },\n  { id: 1, description: 'student' },\n  { id: 2, description: 'unemployed' },\n  { id: 3, description: 'employed' }\n];\npublic contact = { name: '', isVIP: false, gender: '', workStatus: 0 };\n```\n\nMontamos las opciones de un _select_ html recorriendo el array y usando el iterador `wkSt` para acceder a sus datos.\n\n```html\n<section>\n  <label for=\"workStatus\">Work Status</label>\n  <select name=\"workStatus\" [(ngModel)]=\"contact.workStatus\">\n    <option *ngFor=\"let wkSt of workStatuses\" [value]=\"wkSt.id\">\n      <span>{{ wkSt.description }}</span>\n    </option>\n  </select>\n</section>\n```\n\n## 3.2 Condicionales \\*ngIf\n\nLa directiva estructural más utilizada es la `*ngIf`, la cual consigue que un elemento se incluya o se elimine en el _DOM_ en función de los datos del modelo.\n\n> En el ejemplo puedes ver que la uso para mostrar el campo empresa cuando el contacto está trabajando. En otro aparecerá el campo de estudios.\n\nDado el siguiente modelo:\n\n```typescript\npublic contact = {\n  name: '',\n  isVIP: false,\n  gender: '',\n  workStatus: '0',\n  company: '',\n  education: ''\n};\n```\n\n```html\n<section *ngIf=\"contact.workStatus=='3'; else education\">\n  <label for=\"company\">Company Name</label>\n  <input name=\"company\" type=\"text\" [(ngModel)]=\"contact.company\" />\n</section>\n<ng-template #education>\n  <section>\n    <label for=\"education\">Education</label>\n    <input name=\"education\" type=\"text\" [(ngModel)]=\"contact.education\"/>\n  </section>\n</ng-template>\n```\n\n> if **condition** else **template**\n\n### Identificadores con hashtag\n\nEn el código anterior apreciarás que aparece un elemento `<ng-template>` no estándar con el atributo llamado `#education` precedido por un `#`. La directiva `#` genera un identificador único para el elemento al que se le aplica y permite referirse a él en otros lugares del código.\n\nEse truco permite que `*ngIf` muestre otro elemento cuando la condición principal falle. El otro elemento tiene que ser el componente especial `<ng-template>` que se usa para envolver una rama opcional del DOM. Para localizarlo se usa el identificador `#`.\n\n# 4 Modelo y controlador\n\nLos componentes los hemos definido como **bloques de construcción de páginas. Mediante una vista y un controlador** resuelven un problema de interacción o presentación de modelos. En los puntos anteriores te presenté la vista. Toca ahora estudiar el modelo y el controlador.\n\n## 4.1 El modelo y su interInterfaces y modelos\n\nSin ir muy lejos en las capacidades que tendría un modelo de datos clásico, vamos al menos a beneficiarnos del **_TypeScript_ para definir la estructura de datos**. Esto facilitará la programación mediante el autocompletado del editor y reducirá los errores de tecleo mediante la comprobación estática de tipos.\n\nPara ello necesito una interfaz sencilla. Esto es puro _TypeScript_, no es ningún artificio registrable en Angular. Esos sí, en algún sitio tienen que estar. Yo suelo usar una ruta como `contacts/models`, pero es algo completamente arbitrario.\n\n```typescript\nexport interface Option {\n  id: number;\n  description: string;\n}\n\nexport interface Contact {\n  name: string;\n  isVIP: boolean;\n  gender: string;\n  workStatus: number | string;\n  company: string;\n  education: string;\n}\n```\n\n> Te recomiendo que **no uses clases para definir modelos** a menos que necesites agregarle funcionalidad imprescindible. Las interfaces, ayudan al control de tipos en tiempo de desarrollo, igual que las clases, pero sin generar nada de código en tiempo de ejecución, al contrario que las clases. Ojo al uso de tipos compuestos como `number | string`\n\nSe usan para tipificar las propiedades que conforman nuestro modelo para la vista.\n\n```typescript\npublic workStatuses: Option[] = [\n    { id: 0, description: 'unknow' },\n    { id: 1, description: 'student' },\n    { id: 2, description: 'unemployed' },\n    { id: 3, description: 'employed' }\n  ];\npublic contact: Contact = {\n    name: '',\n    isVIP: false,\n    gender: '',\n    workStatus: 0,\n    company: '',\n    education: ''\n  };\npublic contacts: Contact[] = [];\n```\n\n## 4.2 ViewModel en el controlador\n\nLa parte de **lógica del componente** va en la clase que se usa para su definición. Como ya has visto podemos usar su constructor para reclamar dependencias y usar los interfaces para responder a eventos de su ciclo de vida. Repasemos el `ContactsComponent` viéndolo como la clase que es: no solo propiedades, también **métodos**\n\n```typescript\npublic saveContact() {\n  this.contacts.push({ ...this.contact });\n  this.updateCounter();\n}\nprivate updateCounter() {\n  this.numContacts = this.contacts.length;\n  this.counterClass = this.numContacts === 0 ? 'tag secondary' : 'tag primary';\n}\n```\n\nAhora se trata de invocar el método desde la vista. Es muy buena práctica llevar la lógica al controlador y no escribirla en la vista.\n\n```html\n<input value=\"Save\" type=\"submit\" (click)=\"saveContact()\" />\n```\n\nPodemos decir que las propiedades públicas de la clase actuarán como _binding_ de datos con la vista. Mientras que los métodos públicos serán invocados desde los eventos de la misma vista.\n\n### OnInit\n\nLos componentes son clases con un **ciclo de vida** al que puedes enganchar tu código en algunos pasos. Por ejemplo al iniciarse el componente.\n\nEl CLI hace que las clase del componente implemente la interfaz `OnInit` y eso permite al framework invocar al método `ngOnInit` en cuanto el componente esté listo para su uso. Que no suele ser justo durante la construcción, si no un poco después. Te recomiendo que lleves toda la lógica de inicialización a dicho método.\n\n```typescript\npublic workStatuses: Option[];\npublic contact: Contact;\npublic contacts: Contact[];\nconstructor() {}\npublic ngOnInit() {\n  this.workStatuses = [\n    { id: 0, description: 'unknow' },\n    { id: 1, description: 'student' },\n    { id: 2, description: 'unemployed' },\n    { id: 3, description: 'employed' }\n  ];\n  this.contact = {\n    name: '',\n    isVIP: false,\n    gender: '',\n    workStatus: 0,\n    company: '',\n    education: ''\n  };\n  this.contacts = [];\n}\n```\n\n### Un listado de repaso\n\nPara mostrar lo que ahora estamos guardando en una lista, nada más sencillo que usar de nuevo a `*nFor` y a `*ngIf` para tratar listas vacías.\n\n```html\n<ul *ngIf=\"contacts.length>0; else empty\">\n  <li *ngFor=\"let contact of contacts\">\n    <span>{{ contact.name }}</span>\n    <input value=\"Delete\" type=\"button\" (click)=\"deleteContact(contact)\" />\n  </li>\n</ul>\n<ng-template #empty> <i>No data yet</i> </ng-template>\n```\n\nY ya puestos incluso puedes animarte a borrar contactos. Es fácil, los métodos pueden recibir argumentos. Y la vista los puede enviar.\n\n```typescript\npublic deleteContact(contact: Contact) {\n  this.contacts = this.contacts.filter(c => c.name !== contact.name);\n  this.updateCounter();\n}\n```\n\nMira el código completo de **la clase** `ContactsComponent`en el fichero `contacts.component.ts` para tener una visión completa del componente. Como ves, **las propiedades** `header, numContacas, formHidden, contacts ...` se corresponden con las utilizadas en las directivas de enlace en la vista. **Los métodos** `saveContact(), deleteContact()` son invocados desde eventos de elementos del _html_.\n\nJuntos, **la vista y su clase controladora**, resuelven un problema de interacción con el usuario **creando un componente**. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.\n\n> Y esto es sólo el comienzo. La idea de componente será fundamental en la web del mañana para la creación de páginas mediante `web components`. Pero eso ya se verá más adelante...\n\nAhora tienes una aplicación en _Angular 8_ que recoge y muestra datos. Sigue esta serie para añadirle [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/) mientras aprendes a programar con Angular7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"formularios-tablas-y-modelos-de-datos-en-angular","published":1,"updated":"2019-08-05T11:09:15.435Z","_id":"cjyh5p4at000c18s305ljr23t","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-3_data.png\" alt=\"formularios-tablas-y-modelos-de-datos-en-angular\"></p><p>Las <strong>aplicaciones Angular 8 son excelentes para el tratamiento de datos</strong> en el navegador. Su razón de ser fue la recogida de información mediante formularios y la presentación de páginas dinámicas de forma sencilla.</p><p>Vamos a ver cómo la librería <code>@angular/forms</code> enlaza <strong>las vistas, los controladores y los modelos</strong>; y cómo se hace la presentación de datos en <strong>listas y tablas</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a>, al finalizar tendrás una aplicación que recoge y presenta datos.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: [AcademiaBinaria/angular-basic/3-data]<a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/3-data/contacts\" target=\"_blank\" rel=\"noopener\">https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/3-data/contacts</a>)</p></blockquote><h1 id=\"1-Binding\"><a href=\"#1-Binding\" class=\"headerlink\" title=\"1. Binding\"></a>1. Binding</h1><h2 id=\"1-0-Base\"><a href=\"#1-0-Base\" class=\"headerlink\" title=\"1.0 Base\"></a>1.0 Base</h2><p><strong>Los formularios son el punto de entrada</strong> de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En <em>Angular</em> han prestado una especial atención a ellos facilitando su desarrollo, <strong>desde pantallas simples hasta complejos procesos</strong>.</p><p>Para empezar crearemos un proceso sencillo. algo que permita mantener una lista de contactos empresariales. Con lo aprendido en el tema de <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a> creamos un par de ficheros.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m contacts --routing <span class=\"literal\">true</span></span><br><span class=\"line\">ng g c contacts/contacts</span><br></pre></td></tr></table></figure><p>Y asignamos sus rutas delegadas en <code>app-routing</code> y en <code>contacts-routing</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app-routing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">'contacts'</span>,</span><br><span class=\"line\">  loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./3-data/contacts/contacts.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.ContactsModule)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// contacts-routing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">''</span>,</span><br><span class=\"line\">  component: ContactsComponent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y finalizamos con un enlace en el <code>HeaderComponent</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"contacts\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Contacts<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>La clave para entender cómo funciona <em>Angular</em> está en el concepto de <strong>enlace entre elementos html de las vistas y propiedades de modelos</strong> de datos, el llamado <code>binding</code>.</p><p>Para realizar el <em>binding</em> usaremos <strong>directivas</strong> en ambos sentidos.</p><h2 id=\"1-1-Enlace-del-modelo-hacia-la-vista\"><a href=\"#1-1-Enlace-del-modelo-hacia-la-vista\" class=\"headerlink\" title=\"1.1 Enlace del modelo hacia la vista\"></a>1.1 Enlace del modelo hacia la vista</h2><p>Vamos a crear un pequeño modelo de datos. Para empezar agregamos algunas propiedades. En <code>contacts.component.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> header = <span class=\"string\">'Contacts'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> description = <span class=\"string\">'Manage your contact list'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> numContacts = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> counterClass = <span class=\"string\">'tag secondary'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> formHidden = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure><p>En <code>contacts.component.html</code> mostramos cabeceras con estilo</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; header &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; description | uppercase &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  You have</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mark</span> [<span class=\"attr\">class</span>]=<span class=\"string\">\"counterClass\"</span>&gt;</span>&#123;&#123; numContacts &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span></span><br><span class=\"line\">  contacts right now.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"La-interpolacion-entre\"><a href=\"#La-interpolacion-entre\" class=\"headerlink\" title=\"La interpolación entre { { } }\"></a>La interpolación entre { { } }</h3><p>En el fichero <code>contacts.component.ts</code> tienes en su vista <em>html</em> encontrarás elementos ajenos al lenguaje. Son las directivas. La primera que encuentras es <code></code>. Esas dobles llaves encierran expresiones que se evaluarán en tiempo de ejecución. La llamamos <strong>directiva de interpolación</strong> y es la manera más cómoda y usual de mostrar contenido dinámico en Angular.</p><blockquote><p>La expresión interna hace referencia a variables que se obtienen de las propiedades de la clase controladora del componente. En este caso <code>ContactsComponent</code> y <code>header</code>, con su valor <em>Contacts</em> en ejecución. Este enlace mantiene la vista permanentemente actualizada a través de un potente sistema de detección del cambio.</p></blockquote><h3 id=\"Las-tuberias\"><a href=\"#Las-tuberias\" class=\"headerlink\" title=\"Las tuberías |\"></a>Las tuberías |</h3><p>Si queremos que la presentación del dato sea distinta a su valor real, podemos usar <strong>funciones de transformación</strong> especiales. Se llaman tuberías o <em>pipes</em> y se indican mediante el carácter <code>|</code>.</p><p>El <em>framework</em> nos provee de casos básicos como <code>uppercase, lowercase, date, number...</code>. También dispones de un mecanismo para crear tus propios <em>pipes</em>.</p><h3 id=\"Los-atributos-evaluados\"><a href=\"#Los-atributos-evaluados\" class=\"headerlink\" title=\"Los atributos evaluados []\"></a>Los atributos evaluados []</h3><p>En <em>Html</em> disponemos de atributos para asignar valores a propiedades de los elementos. Esos atributos reciben los valores como constantes. Pero, si se encierran entre corchetes se convierten en un <strong>evaluador de expresiones</strong> y puede recibir una variable o cualquier otra expresión.</p><p>Como por ejemplo usando una <em>clase css</em> cuyo valor cambia en tiempo de ejecución. O para deshabilitar un elemento dinámicamente.</p><h2 id=\"1-2-Enlace-de-la-vista-hacia-el-modelo\"><a href=\"#1-2-Enlace-de-la-vista-hacia-el-modelo\" class=\"headerlink\" title=\"1.2 Enlace de la vista hacia el modelo\"></a>1.2 Enlace de la vista hacia el modelo</h2><p>En <code>contacts.component.html</code> también actuamos sobre la vista, para manipular el modelo… y de vuelta a la vista. Por ejemplo con mecanismo simple de ocultación de un elemento.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Show Form\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"formHidden = false\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Hide Form\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"formHidden = true\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'hidden' : formHidden &#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Contact Form<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"Las-clases-CSS-como-atributos-especiales\"><a href=\"#Las-clases-CSS-como-atributos-especiales\" class=\"headerlink\" title=\"Las clases CSS como atributos especiales\"></a>Las clases CSS como atributos especiales</h3><p>Para el caso concreto de determinar las clases CSS aplicables a un elemento de manera dinámica, usaremos la directiva <code>ngClass</code>. La cual recibe un objeto cuyas propiedades son nombres de clases CSS y sus valores son expresiones booleanas. Si se cumplen se aplica la clase y si no, se quita la clase.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ngClass]=\"&#123; 'hidden' : formHidden &#125;\"</span><br></pre></td></tr></table></figure><p>En este caso se oculta el elemento dependiendo del valor de la expresión <code>formHidden</code>. Pero ¿Cómo se manipula esa variable?</p><h3 id=\"Los-eventos\"><a href=\"#Los-eventos\" class=\"headerlink\" title=\"Los eventos ()\"></a>Los eventos ()</h3><p>Cualquier evento asociado a un elemento puede ejecutar una instrucción sin más que incluirlo entre paréntesis. Idealmente dicha instrucción debe llamar a un método o función de la clase controladora. Aunque si es trivial puedes dejarla en el Html.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(click)=\"formHidden = true\"</span><br></pre></td></tr></table></figure><h1 id=\"2-Doble-Binding\"><a href=\"#2-Doble-Binding\" class=\"headerlink\" title=\"2. Doble Binding\"></a>2. Doble Binding</h1><p>La comunicación del modelo hacia la vista es sólo el principio. En <em>Angular</em> también podrás <strong>comunicar la vista hacia el modelo</strong>, permitiéndole al usuario modificar los datos a través de formularios. Es lo que se conoce como <em>double binding</em>.</p><h2 id=\"2-1-El-doble-enlace-al-modelo-ngModel\"><a href=\"#2-1-El-doble-enlace-al-modelo-ngModel\" class=\"headerlink\" title=\"2.1 El doble enlace al modelo [(ngModel)]\"></a>2.1 El doble enlace al modelo [(ngModel)]</h2><p>La directiva <code>[(ngModel)]</code> se compone de un atributo <em>custom</em> <code>ngModel</code> y lo rodea de los símbolos <code>[()]</code>. Esta técnica es conocida como <em>banana in a box</em> porque su sintaxis requiere un <code>()</code> dentro de un <code>[]</code> y une las capacidades de las expresiones y los eventos facilitando la comunicación bidireccional.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(ngModel)]=\"model.property\"</span><br></pre></td></tr></table></figure><p>Usa la comunicación en ambos sentidos</p><ul><li><strong>(banana)</strong> : de la vista al modelo</li><li><strong>[box]</strong> : del modelo a la vista</li></ul><blockquote><p>Atención: La directiva <code>ngModel</code> viene dentro del módulo <code>FormsModule</code> que hay que importar explícitamente.</p></blockquote><p>Por ejemplo <code>[(ngModel)]=&quot;contact.name&quot;</code> enlaza doblemente la propiedad del modelo <code>contact.name</code> con el elemento <code>&lt;input&gt;</code> de la vista. Cada tecleo del usuario se registra en la variable. Y el valor de la variable se muestra en el <code>&lt;input&gt;</code>.</p><p>Dada un modelo como este en <code>contacts.component.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; name: <span class=\"string\">''</span> &#125;;</span><br></pre></td></tr></table></figure><p>Podemos enlazarlos en la plantilla</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Contact name\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Es muy útil mantener en desarrollo un espía visual de lo que está pasando con los datos. Algunas extensiones como <a href=\"https://augury.rangle.io/\" target=\"_blank\" rel=\"noopener\">Augury</a> aportan muchas más prestaciones, pero al empezar el <em>pipe json</em> te ayudará mucho.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; contact | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>La directiva <code>ngModel</code> es mucho más potente de lo visto aquí. Entre otras cosas permite decidir el criterio de actualización (a cada cambio o al salir del control). También se verá más adelante el asunto de la validación, que requiere un trato especial. Cuando empiezas con Angular Forms, <strong>un input y su ngModel</strong> asociado serán tus mejores amigos.</p><h2 id=\"2-2-Form\"><a href=\"#2-2-Form\" class=\"headerlink\" title=\"2.2 Form\"></a>2.2 Form</h2><p>Hay más usos de las directivas en los formularios. Por ejemplo, dado el siguiente modelo:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; name: <span class=\"string\">''</span>, isVIP: <span class=\"literal\">false</span>, gender: <span class=\"string\">''</span> &#125;;</span><br></pre></td></tr></table></figure><p>Le vendría muy bien un <em>check box</em>.</p><h3 id=\"CheckBox\"><a href=\"#CheckBox\" class=\"headerlink\" title=\"CheckBox\"></a>CheckBox</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"isVIP\"</span>&gt;</span>Is V.I.P.<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"isVIP\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.isVIP\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Y un para de <em>radio buttons</em>.</p><h3 id=\"Radio-Buttons\"><a href=\"#Radio-Buttons\" class=\"headerlink\" title=\"Radio Buttons\"></a>Radio Buttons</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"gender\"</span>&gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.gender\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Male<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.gender\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Female<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"3-Estructuras\"><a href=\"#3-Estructuras\" class=\"headerlink\" title=\"3 Estructuras\"></a>3 Estructuras</h1><p>Los anteriores modificadores actúan a nivel de contenido del HTML. Veremos ahora una para de directivas que afectan directamente a <strong>la estructura del árbol DOM</strong>. Son las llamadas directivas estructurales que comienzan por el signo <code>*</code></p><h2 id=\"3-1-Repetitivas-ngFor\"><a href=\"#3-1-Repetitivas-ngFor\" class=\"headerlink\" title=\"3.1 Repetitivas *ngFor\"></a>3.1 Repetitivas *ngFor</h2><p>Una situación que nos encontramos una y otra vez es la de las repeticiones. Listas de datos, tablas o grupos de opciones son ejemplos claros. Hay una directiva en <em>Angular</em> para esa situación, la <code>*ngFor=&quot;let iterador of array&quot;</code>. <strong>La directiva <code>*ngFor</code> forma parte del grupo de directivas estructurales</strong>, porque modifica la estructura del DOM, en este caso insertando múltiples nodos hijos a un elemento dado.</p><blockquote><p>Puedes ver un ejemplo del uso la directiva <code>*ngFor</code> en el componente <code>ContactsComponent</code>. Se emplea para recorrer un array de tipos de estado laboral. Es el caso de uso <em>más repetido de las repeticiones</em>; mostrar listas de datos.</p></blockquote><p>Dado el siguiente modelo:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> workStatuses = [</span><br><span class=\"line\">  &#123; id: <span class=\"number\">0</span>, description: <span class=\"string\">'unknow'</span> &#125;,</span><br><span class=\"line\">  &#123; id: <span class=\"number\">1</span>, description: <span class=\"string\">'student'</span> &#125;,</span><br><span class=\"line\">  &#123; id: <span class=\"number\">2</span>, description: <span class=\"string\">'unemployed'</span> &#125;,</span><br><span class=\"line\">  &#123; id: <span class=\"number\">3</span>, description: <span class=\"string\">'employed'</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; name: <span class=\"string\">''</span>, isVIP: <span class=\"literal\">false</span>, gender: <span class=\"string\">''</span>, workStatus: <span class=\"number\">0</span> &#125;;</span><br></pre></td></tr></table></figure><p>Montamos las opciones de un <em>select</em> html recorriendo el array y usando el iterador <code>wkSt</code> para acceder a sus datos.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"workStatus\"</span>&gt;</span>Work Status<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"workStatus\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.workStatus\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let wkSt of workStatuses\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"wkSt.id\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; wkSt.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"3-2-Condicionales-ngIf\"><a href=\"#3-2-Condicionales-ngIf\" class=\"headerlink\" title=\"3.2 Condicionales *ngIf\"></a>3.2 Condicionales *ngIf</h2><p>La directiva estructural más utilizada es la <code>*ngIf</code>, la cual consigue que un elemento se incluya o se elimine en el <em>DOM</em> en función de los datos del modelo.</p><blockquote><p>En el ejemplo puedes ver que la uso para mostrar el campo empresa cuando el contacto está trabajando. En otro aparecerá el campo de estudios.</p></blockquote><p>Dado el siguiente modelo:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">''</span>,</span><br><span class=\"line\">  isVIP: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  gender: <span class=\"string\">''</span>,</span><br><span class=\"line\">  workStatus: <span class=\"string\">'0'</span>,</span><br><span class=\"line\">  company: <span class=\"string\">''</span>,</span><br><span class=\"line\">  education: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"contact.workStatus=='3'; else education\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"company\"</span>&gt;</span>Company Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"company\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.company\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">education</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"education\"</span>&gt;</span>Education<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"education\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.education\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>if <strong>condition</strong> else <strong>template</strong></p></blockquote><h3 id=\"Identificadores-con-hashtag\"><a href=\"#Identificadores-con-hashtag\" class=\"headerlink\" title=\"Identificadores con hashtag\"></a>Identificadores con hashtag</h3><p>En el código anterior apreciarás que aparece un elemento <code>&lt;ng-template&gt;</code> no estándar con el atributo llamado <code>#education</code> precedido por un <code>#</code>. La directiva <code>#</code> genera un identificador único para el elemento al que se le aplica y permite referirse a él en otros lugares del código.</p><p>Ese truco permite que <code>*ngIf</code> muestre otro elemento cuando la condición principal falle. El otro elemento tiene que ser el componente especial <code>&lt;ng-template&gt;</code> que se usa para envolver una rama opcional del DOM. Para localizarlo se usa el identificador <code>#</code>.</p><h1 id=\"4-Modelo-y-controlador\"><a href=\"#4-Modelo-y-controlador\" class=\"headerlink\" title=\"4 Modelo y controlador\"></a>4 Modelo y controlador</h1><p>Los componentes los hemos definido como <strong>bloques de construcción de páginas. Mediante una vista y un controlador</strong> resuelven un problema de interacción o presentación de modelos. En los puntos anteriores te presenté la vista. Toca ahora estudiar el modelo y el controlador.</p><h2 id=\"4-1-El-modelo-y-su-interInterfaces-y-modelos\"><a href=\"#4-1-El-modelo-y-su-interInterfaces-y-modelos\" class=\"headerlink\" title=\"4.1 El modelo y su interInterfaces y modelos\"></a>4.1 El modelo y su interInterfaces y modelos</h2><p>Sin ir muy lejos en las capacidades que tendría un modelo de datos clásico, vamos al menos a beneficiarnos del <strong><em>TypeScript</em> para definir la estructura de datos</strong>. Esto facilitará la programación mediante el autocompletado del editor y reducirá los errores de tecleo mediante la comprobación estática de tipos.</p><p>Para ello necesito una interfaz sencilla. Esto es puro <em>TypeScript</em>, no es ningún artificio registrable en Angular. Esos sí, en algún sitio tienen que estar. Yo suelo usar una ruta como <code>contacts/models</code>, pero es algo completamente arbitrario.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Option &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  description: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Contact &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  isVIP: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  gender: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  workStatus: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  company: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  education: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Te recomiendo que <strong>no uses clases para definir modelos</strong> a menos que necesites agregarle funcionalidad imprescindible. Las interfaces, ayudan al control de tipos en tiempo de desarrollo, igual que las clases, pero sin generar nada de código en tiempo de ejecución, al contrario que las clases. Ojo al uso de tipos compuestos como <code>number | string</code></p></blockquote><p>Se usan para tipificar las propiedades que conforman nuestro modelo para la vista.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> workStatuses: Option[] = [</span><br><span class=\"line\">    &#123; id: <span class=\"number\">0</span>, description: <span class=\"string\">'unknow'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">1</span>, description: <span class=\"string\">'student'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">2</span>, description: <span class=\"string\">'unemployed'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">3</span>, description: <span class=\"string\">'employed'</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"><span class=\"keyword\">public</span> contact: Contact = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    isVIP: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    gender: <span class=\"string\">''</span>,</span><br><span class=\"line\">    workStatus: <span class=\"number\">0</span>,</span><br><span class=\"line\">    company: <span class=\"string\">''</span>,</span><br><span class=\"line\">    education: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"><span class=\"keyword\">public</span> contacts: Contact[] = [];</span><br></pre></td></tr></table></figure><h2 id=\"4-2-ViewModel-en-el-controlador\"><a href=\"#4-2-ViewModel-en-el-controlador\" class=\"headerlink\" title=\"4.2 ViewModel en el controlador\"></a>4.2 ViewModel en el controlador</h2><p>La parte de <strong>lógica del componente</strong> va en la clase que se usa para su definición. Como ya has visto podemos usar su constructor para reclamar dependencias y usar los interfaces para responder a eventos de su ciclo de vida. Repasemos el <code>ContactsComponent</code> viéndolo como la clase que es: no solo propiedades, también <strong>métodos</strong></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> saveContact() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contacts.push(&#123; ...this.contact &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateCounter();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> updateCounter() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.numContacts = <span class=\"keyword\">this</span>.contacts.length;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.counterClass = <span class=\"keyword\">this</span>.numContacts === <span class=\"number\">0</span> ? <span class=\"string\">'tag secondary'</span> : <span class=\"string\">'tag primary'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ahora se trata de invocar el método desde la vista. Es muy buena práctica llevar la lógica al controlador y no escribirla en la vista.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Save\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"saveContact()\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Podemos decir que las propiedades públicas de la clase actuarán como <em>binding</em> de datos con la vista. Mientras que los métodos públicos serán invocados desde los eventos de la misma vista.</p><h3 id=\"OnInit\"><a href=\"#OnInit\" class=\"headerlink\" title=\"OnInit\"></a>OnInit</h3><p>Los componentes son clases con un <strong>ciclo de vida</strong> al que puedes enganchar tu código en algunos pasos. Por ejemplo al iniciarse el componente.</p><p>El CLI hace que las clase del componente implemente la interfaz <code>OnInit</code> y eso permite al framework invocar al método <code>ngOnInit</code> en cuanto el componente esté listo para su uso. Que no suele ser justo durante la construcción, si no un poco después. Te recomiendo que lleves toda la lógica de inicialización a dicho método.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> workStatuses: Option[];</span><br><span class=\"line\"><span class=\"keyword\">public</span> contact: Contact;</span><br><span class=\"line\"><span class=\"keyword\">public</span> contacts: Contact[];</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.workStatuses = [</span><br><span class=\"line\">    &#123; id: <span class=\"number\">0</span>, description: <span class=\"string\">'unknow'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">1</span>, description: <span class=\"string\">'student'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">2</span>, description: <span class=\"string\">'unemployed'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">3</span>, description: <span class=\"string\">'employed'</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contact = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    isVIP: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    gender: <span class=\"string\">''</span>,</span><br><span class=\"line\">    workStatus: <span class=\"number\">0</span>,</span><br><span class=\"line\">    company: <span class=\"string\">''</span>,</span><br><span class=\"line\">    education: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contacts = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"Un-listado-de-repaso\"><a href=\"#Un-listado-de-repaso\" class=\"headerlink\" title=\"Un listado de repaso\"></a>Un listado de repaso</h3><p>Para mostrar lo que ahora estamos guardando en una lista, nada más sencillo que usar de nuevo a <code>*nFor</code> y a <code>*ngIf</code> para tratar listas vacías.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"contacts.length&gt;0; else empty\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let contact of contacts\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; contact.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Delete\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteContact(contact)\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">empty</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>No data yet<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Y ya puestos incluso puedes animarte a borrar contactos. Es fácil, los métodos pueden recibir argumentos. Y la vista los puede enviar.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> deleteContact(contact: Contact) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contacts = <span class=\"keyword\">this</span>.contacts.filter(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.name !== contact.name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateCounter();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Mira el código completo de <strong>la clase</strong> <code>ContactsComponent</code>en el fichero <code>contacts.component.ts</code> para tener una visión completa del componente. Como ves, <strong>las propiedades</strong> <code>header, numContacas, formHidden, contacts ...</code> se corresponden con las utilizadas en las directivas de enlace en la vista. <strong>Los métodos</strong> <code>saveContact(), deleteContact()</code> son invocados desde eventos de elementos del <em>html</em>.</p><p>Juntos, <strong>la vista y su clase controladora</strong>, resuelven un problema de interacción con el usuario <strong>creando un componente</strong>. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.</p><blockquote><p>Y esto es sólo el comienzo. La idea de componente será fundamental en la web del mañana para la creación de páginas mediante <code>web components</code>. Pero eso ya se verá más adelante…</p></blockquote><p>Ahora tienes una aplicación en <em>Angular 8</em> que recoge y muestra datos. Sigue esta serie para añadirle <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a> mientras aprendes a programar con Angular7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-3_data.png\" alt=\"formularios-tablas-y-modelos-de-datos-en-angular\"></p><p>Las <strong>aplicaciones Angular 8 son excelentes para el tratamiento de datos</strong> en el navegador. Su razón de ser fue la recogida de información mediante formularios y la presentación de páginas dinámicas de forma sencilla.</p><p>Vamos a ver cómo la librería <code>@angular/forms</code> enlaza <strong>las vistas, los controladores y los modelos</strong>; y cómo se hace la presentación de datos en <strong>listas y tablas</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a>, al finalizar tendrás una aplicación que recoge y presenta datos.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: [AcademiaBinaria/angular-basic/3-data]<a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/3-data/contacts\" target=\"_blank\" rel=\"noopener\">https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/3-data/contacts</a>)</p></blockquote><h1 id=\"1-Binding\"><a href=\"#1-Binding\" class=\"headerlink\" title=\"1. Binding\"></a>1. Binding</h1><h2 id=\"1-0-Base\"><a href=\"#1-0-Base\" class=\"headerlink\" title=\"1.0 Base\"></a>1.0 Base</h2><p><strong>Los formularios son el punto de entrada</strong> de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En <em>Angular</em> han prestado una especial atención a ellos facilitando su desarrollo, <strong>desde pantallas simples hasta complejos procesos</strong>.</p><p>Para empezar crearemos un proceso sencillo. algo que permita mantener una lista de contactos empresariales. Con lo aprendido en el tema de <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a> creamos un par de ficheros.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m contacts --routing <span class=\"literal\">true</span></span><br><span class=\"line\">ng g c contacts/contacts</span><br></pre></td></tr></table></figure><p>Y asignamos sus rutas delegadas en <code>app-routing</code> y en <code>contacts-routing</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app-routing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">'contacts'</span>,</span><br><span class=\"line\">  loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./3-data/contacts/contacts.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.ContactsModule)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// contacts-routing</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">''</span>,</span><br><span class=\"line\">  component: ContactsComponent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y finalizamos con un enlace en el <code>HeaderComponent</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"contacts\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Contacts<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>La clave para entender cómo funciona <em>Angular</em> está en el concepto de <strong>enlace entre elementos html de las vistas y propiedades de modelos</strong> de datos, el llamado <code>binding</code>.</p><p>Para realizar el <em>binding</em> usaremos <strong>directivas</strong> en ambos sentidos.</p><h2 id=\"1-1-Enlace-del-modelo-hacia-la-vista\"><a href=\"#1-1-Enlace-del-modelo-hacia-la-vista\" class=\"headerlink\" title=\"1.1 Enlace del modelo hacia la vista\"></a>1.1 Enlace del modelo hacia la vista</h2><p>Vamos a crear un pequeño modelo de datos. Para empezar agregamos algunas propiedades. En <code>contacts.component.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> header = <span class=\"string\">'Contacts'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> description = <span class=\"string\">'Manage your contact list'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> numContacts = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> counterClass = <span class=\"string\">'tag secondary'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> formHidden = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure><p>En <code>contacts.component.html</code> mostramos cabeceras con estilo</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; header &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; description | uppercase &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  You have</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mark</span> [<span class=\"attr\">class</span>]=<span class=\"string\">\"counterClass\"</span>&gt;</span>&#123;&#123; numContacts &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span></span><br><span class=\"line\">  contacts right now.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"La-interpolacion-entre\"><a href=\"#La-interpolacion-entre\" class=\"headerlink\" title=\"La interpolación entre { { } }\"></a>La interpolación entre { { } }</h3><p>En el fichero <code>contacts.component.ts</code> tienes en su vista <em>html</em> encontrarás elementos ajenos al lenguaje. Son las directivas. La primera que encuentras es <code></code>. Esas dobles llaves encierran expresiones que se evaluarán en tiempo de ejecución. La llamamos <strong>directiva de interpolación</strong> y es la manera más cómoda y usual de mostrar contenido dinámico en Angular.</p><blockquote><p>La expresión interna hace referencia a variables que se obtienen de las propiedades de la clase controladora del componente. En este caso <code>ContactsComponent</code> y <code>header</code>, con su valor <em>Contacts</em> en ejecución. Este enlace mantiene la vista permanentemente actualizada a través de un potente sistema de detección del cambio.</p></blockquote><h3 id=\"Las-tuberias\"><a href=\"#Las-tuberias\" class=\"headerlink\" title=\"Las tuberías |\"></a>Las tuberías |</h3><p>Si queremos que la presentación del dato sea distinta a su valor real, podemos usar <strong>funciones de transformación</strong> especiales. Se llaman tuberías o <em>pipes</em> y se indican mediante el carácter <code>|</code>.</p><p>El <em>framework</em> nos provee de casos básicos como <code>uppercase, lowercase, date, number...</code>. También dispones de un mecanismo para crear tus propios <em>pipes</em>.</p><h3 id=\"Los-atributos-evaluados\"><a href=\"#Los-atributos-evaluados\" class=\"headerlink\" title=\"Los atributos evaluados []\"></a>Los atributos evaluados []</h3><p>En <em>Html</em> disponemos de atributos para asignar valores a propiedades de los elementos. Esos atributos reciben los valores como constantes. Pero, si se encierran entre corchetes se convierten en un <strong>evaluador de expresiones</strong> y puede recibir una variable o cualquier otra expresión.</p><p>Como por ejemplo usando una <em>clase css</em> cuyo valor cambia en tiempo de ejecución. O para deshabilitar un elemento dinámicamente.</p><h2 id=\"1-2-Enlace-de-la-vista-hacia-el-modelo\"><a href=\"#1-2-Enlace-de-la-vista-hacia-el-modelo\" class=\"headerlink\" title=\"1.2 Enlace de la vista hacia el modelo\"></a>1.2 Enlace de la vista hacia el modelo</h2><p>En <code>contacts.component.html</code> también actuamos sobre la vista, para manipular el modelo… y de vuelta a la vista. Por ejemplo con mecanismo simple de ocultación de un elemento.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Show Form\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"formHidden = false\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Hide Form\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"formHidden = true\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123; 'hidden' : formHidden &#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Contact Form<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"Las-clases-CSS-como-atributos-especiales\"><a href=\"#Las-clases-CSS-como-atributos-especiales\" class=\"headerlink\" title=\"Las clases CSS como atributos especiales\"></a>Las clases CSS como atributos especiales</h3><p>Para el caso concreto de determinar las clases CSS aplicables a un elemento de manera dinámica, usaremos la directiva <code>ngClass</code>. La cual recibe un objeto cuyas propiedades son nombres de clases CSS y sus valores son expresiones booleanas. Si se cumplen se aplica la clase y si no, se quita la clase.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ngClass]=\"&#123; 'hidden' : formHidden &#125;\"</span><br></pre></td></tr></table></figure><p>En este caso se oculta el elemento dependiendo del valor de la expresión <code>formHidden</code>. Pero ¿Cómo se manipula esa variable?</p><h3 id=\"Los-eventos\"><a href=\"#Los-eventos\" class=\"headerlink\" title=\"Los eventos ()\"></a>Los eventos ()</h3><p>Cualquier evento asociado a un elemento puede ejecutar una instrucción sin más que incluirlo entre paréntesis. Idealmente dicha instrucción debe llamar a un método o función de la clase controladora. Aunque si es trivial puedes dejarla en el Html.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(click)=\"formHidden = true\"</span><br></pre></td></tr></table></figure><h1 id=\"2-Doble-Binding\"><a href=\"#2-Doble-Binding\" class=\"headerlink\" title=\"2. Doble Binding\"></a>2. Doble Binding</h1><p>La comunicación del modelo hacia la vista es sólo el principio. En <em>Angular</em> también podrás <strong>comunicar la vista hacia el modelo</strong>, permitiéndole al usuario modificar los datos a través de formularios. Es lo que se conoce como <em>double binding</em>.</p><h2 id=\"2-1-El-doble-enlace-al-modelo-ngModel\"><a href=\"#2-1-El-doble-enlace-al-modelo-ngModel\" class=\"headerlink\" title=\"2.1 El doble enlace al modelo [(ngModel)]\"></a>2.1 El doble enlace al modelo [(ngModel)]</h2><p>La directiva <code>[(ngModel)]</code> se compone de un atributo <em>custom</em> <code>ngModel</code> y lo rodea de los símbolos <code>[()]</code>. Esta técnica es conocida como <em>banana in a box</em> porque su sintaxis requiere un <code>()</code> dentro de un <code>[]</code> y une las capacidades de las expresiones y los eventos facilitando la comunicación bidireccional.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(ngModel)]=\"model.property\"</span><br></pre></td></tr></table></figure><p>Usa la comunicación en ambos sentidos</p><ul><li><strong>(banana)</strong> : de la vista al modelo</li><li><strong>[box]</strong> : del modelo a la vista</li></ul><blockquote><p>Atención: La directiva <code>ngModel</code> viene dentro del módulo <code>FormsModule</code> que hay que importar explícitamente.</p></blockquote><p>Por ejemplo <code>[(ngModel)]=&quot;contact.name&quot;</code> enlaza doblemente la propiedad del modelo <code>contact.name</code> con el elemento <code>&lt;input&gt;</code> de la vista. Cada tecleo del usuario se registra en la variable. Y el valor de la variable se muestra en el <code>&lt;input&gt;</code>.</p><p>Dada un modelo como este en <code>contacts.component.ts</code>:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; name: <span class=\"string\">''</span> &#125;;</span><br></pre></td></tr></table></figure><p>Podemos enlazarlos en la plantilla</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.name\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Contact name\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Es muy útil mantener en desarrollo un espía visual de lo que está pasando con los datos. Algunas extensiones como <a href=\"https://augury.rangle.io/\" target=\"_blank\" rel=\"noopener\">Augury</a> aportan muchas más prestaciones, pero al empezar el <em>pipe json</em> te ayudará mucho.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; contact | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>La directiva <code>ngModel</code> es mucho más potente de lo visto aquí. Entre otras cosas permite decidir el criterio de actualización (a cada cambio o al salir del control). También se verá más adelante el asunto de la validación, que requiere un trato especial. Cuando empiezas con Angular Forms, <strong>un input y su ngModel</strong> asociado serán tus mejores amigos.</p><h2 id=\"2-2-Form\"><a href=\"#2-2-Form\" class=\"headerlink\" title=\"2.2 Form\"></a>2.2 Form</h2><p>Hay más usos de las directivas en los formularios. Por ejemplo, dado el siguiente modelo:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; name: <span class=\"string\">''</span>, isVIP: <span class=\"literal\">false</span>, gender: <span class=\"string\">''</span> &#125;;</span><br></pre></td></tr></table></figure><p>Le vendría muy bien un <em>check box</em>.</p><h3 id=\"CheckBox\"><a href=\"#CheckBox\" class=\"headerlink\" title=\"CheckBox\"></a>CheckBox</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"isVIP\"</span>&gt;</span>Is V.I.P.<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"isVIP\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.isVIP\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Y un para de <em>radio buttons</em>.</p><h3 id=\"Radio-Buttons\"><a href=\"#Radio-Buttons\" class=\"headerlink\" title=\"Radio Buttons\"></a>Radio Buttons</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"gender\"</span>&gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"male\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.gender\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Male<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"female\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.gender\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>Female<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"3-Estructuras\"><a href=\"#3-Estructuras\" class=\"headerlink\" title=\"3 Estructuras\"></a>3 Estructuras</h1><p>Los anteriores modificadores actúan a nivel de contenido del HTML. Veremos ahora una para de directivas que afectan directamente a <strong>la estructura del árbol DOM</strong>. Son las llamadas directivas estructurales que comienzan por el signo <code>*</code></p><h2 id=\"3-1-Repetitivas-ngFor\"><a href=\"#3-1-Repetitivas-ngFor\" class=\"headerlink\" title=\"3.1 Repetitivas *ngFor\"></a>3.1 Repetitivas *ngFor</h2><p>Una situación que nos encontramos una y otra vez es la de las repeticiones. Listas de datos, tablas o grupos de opciones son ejemplos claros. Hay una directiva en <em>Angular</em> para esa situación, la <code>*ngFor=&quot;let iterador of array&quot;</code>. <strong>La directiva <code>*ngFor</code> forma parte del grupo de directivas estructurales</strong>, porque modifica la estructura del DOM, en este caso insertando múltiples nodos hijos a un elemento dado.</p><blockquote><p>Puedes ver un ejemplo del uso la directiva <code>*ngFor</code> en el componente <code>ContactsComponent</code>. Se emplea para recorrer un array de tipos de estado laboral. Es el caso de uso <em>más repetido de las repeticiones</em>; mostrar listas de datos.</p></blockquote><p>Dado el siguiente modelo:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> workStatuses = [</span><br><span class=\"line\">  &#123; id: <span class=\"number\">0</span>, description: <span class=\"string\">'unknow'</span> &#125;,</span><br><span class=\"line\">  &#123; id: <span class=\"number\">1</span>, description: <span class=\"string\">'student'</span> &#125;,</span><br><span class=\"line\">  &#123; id: <span class=\"number\">2</span>, description: <span class=\"string\">'unemployed'</span> &#125;,</span><br><span class=\"line\">  &#123; id: <span class=\"number\">3</span>, description: <span class=\"string\">'employed'</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123; name: <span class=\"string\">''</span>, isVIP: <span class=\"literal\">false</span>, gender: <span class=\"string\">''</span>, workStatus: <span class=\"number\">0</span> &#125;;</span><br></pre></td></tr></table></figure><p>Montamos las opciones de un <em>select</em> html recorriendo el array y usando el iterador <code>wkSt</code> para acceder a sus datos.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"workStatus\"</span>&gt;</span>Work Status<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"workStatus\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.workStatus\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let wkSt of workStatuses\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"wkSt.id\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; wkSt.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"3-2-Condicionales-ngIf\"><a href=\"#3-2-Condicionales-ngIf\" class=\"headerlink\" title=\"3.2 Condicionales *ngIf\"></a>3.2 Condicionales *ngIf</h2><p>La directiva estructural más utilizada es la <code>*ngIf</code>, la cual consigue que un elemento se incluya o se elimine en el <em>DOM</em> en función de los datos del modelo.</p><blockquote><p>En el ejemplo puedes ver que la uso para mostrar el campo empresa cuando el contacto está trabajando. En otro aparecerá el campo de estudios.</p></blockquote><p>Dado el siguiente modelo:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> contact = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">''</span>,</span><br><span class=\"line\">  isVIP: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  gender: <span class=\"string\">''</span>,</span><br><span class=\"line\">  workStatus: <span class=\"string\">'0'</span>,</span><br><span class=\"line\">  company: <span class=\"string\">''</span>,</span><br><span class=\"line\">  education: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"contact.workStatus=='3'; else education\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"company\"</span>&gt;</span>Company Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"company\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.company\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">education</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"education\"</span>&gt;</span>Education<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"education\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"contact.education\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>if <strong>condition</strong> else <strong>template</strong></p></blockquote><h3 id=\"Identificadores-con-hashtag\"><a href=\"#Identificadores-con-hashtag\" class=\"headerlink\" title=\"Identificadores con hashtag\"></a>Identificadores con hashtag</h3><p>En el código anterior apreciarás que aparece un elemento <code>&lt;ng-template&gt;</code> no estándar con el atributo llamado <code>#education</code> precedido por un <code>#</code>. La directiva <code>#</code> genera un identificador único para el elemento al que se le aplica y permite referirse a él en otros lugares del código.</p><p>Ese truco permite que <code>*ngIf</code> muestre otro elemento cuando la condición principal falle. El otro elemento tiene que ser el componente especial <code>&lt;ng-template&gt;</code> que se usa para envolver una rama opcional del DOM. Para localizarlo se usa el identificador <code>#</code>.</p><h1 id=\"4-Modelo-y-controlador\"><a href=\"#4-Modelo-y-controlador\" class=\"headerlink\" title=\"4 Modelo y controlador\"></a>4 Modelo y controlador</h1><p>Los componentes los hemos definido como <strong>bloques de construcción de páginas. Mediante una vista y un controlador</strong> resuelven un problema de interacción o presentación de modelos. En los puntos anteriores te presenté la vista. Toca ahora estudiar el modelo y el controlador.</p><h2 id=\"4-1-El-modelo-y-su-interInterfaces-y-modelos\"><a href=\"#4-1-El-modelo-y-su-interInterfaces-y-modelos\" class=\"headerlink\" title=\"4.1 El modelo y su interInterfaces y modelos\"></a>4.1 El modelo y su interInterfaces y modelos</h2><p>Sin ir muy lejos en las capacidades que tendría un modelo de datos clásico, vamos al menos a beneficiarnos del <strong><em>TypeScript</em> para definir la estructura de datos</strong>. Esto facilitará la programación mediante el autocompletado del editor y reducirá los errores de tecleo mediante la comprobación estática de tipos.</p><p>Para ello necesito una interfaz sencilla. Esto es puro <em>TypeScript</em>, no es ningún artificio registrable en Angular. Esos sí, en algún sitio tienen que estar. Yo suelo usar una ruta como <code>contacts/models</code>, pero es algo completamente arbitrario.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Option &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  description: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Contact &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  isVIP: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  gender: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  workStatus: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  company: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  education: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Te recomiendo que <strong>no uses clases para definir modelos</strong> a menos que necesites agregarle funcionalidad imprescindible. Las interfaces, ayudan al control de tipos en tiempo de desarrollo, igual que las clases, pero sin generar nada de código en tiempo de ejecución, al contrario que las clases. Ojo al uso de tipos compuestos como <code>number | string</code></p></blockquote><p>Se usan para tipificar las propiedades que conforman nuestro modelo para la vista.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> workStatuses: Option[] = [</span><br><span class=\"line\">    &#123; id: <span class=\"number\">0</span>, description: <span class=\"string\">'unknow'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">1</span>, description: <span class=\"string\">'student'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">2</span>, description: <span class=\"string\">'unemployed'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">3</span>, description: <span class=\"string\">'employed'</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"><span class=\"keyword\">public</span> contact: Contact = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    isVIP: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    gender: <span class=\"string\">''</span>,</span><br><span class=\"line\">    workStatus: <span class=\"number\">0</span>,</span><br><span class=\"line\">    company: <span class=\"string\">''</span>,</span><br><span class=\"line\">    education: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"><span class=\"keyword\">public</span> contacts: Contact[] = [];</span><br></pre></td></tr></table></figure><h2 id=\"4-2-ViewModel-en-el-controlador\"><a href=\"#4-2-ViewModel-en-el-controlador\" class=\"headerlink\" title=\"4.2 ViewModel en el controlador\"></a>4.2 ViewModel en el controlador</h2><p>La parte de <strong>lógica del componente</strong> va en la clase que se usa para su definición. Como ya has visto podemos usar su constructor para reclamar dependencias y usar los interfaces para responder a eventos de su ciclo de vida. Repasemos el <code>ContactsComponent</code> viéndolo como la clase que es: no solo propiedades, también <strong>métodos</strong></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> saveContact() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contacts.push(&#123; ...this.contact &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateCounter();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> updateCounter() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.numContacts = <span class=\"keyword\">this</span>.contacts.length;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.counterClass = <span class=\"keyword\">this</span>.numContacts === <span class=\"number\">0</span> ? <span class=\"string\">'tag secondary'</span> : <span class=\"string\">'tag primary'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ahora se trata de invocar el método desde la vista. Es muy buena práctica llevar la lógica al controlador y no escribirla en la vista.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Save\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"saveContact()\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Podemos decir que las propiedades públicas de la clase actuarán como <em>binding</em> de datos con la vista. Mientras que los métodos públicos serán invocados desde los eventos de la misma vista.</p><h3 id=\"OnInit\"><a href=\"#OnInit\" class=\"headerlink\" title=\"OnInit\"></a>OnInit</h3><p>Los componentes son clases con un <strong>ciclo de vida</strong> al que puedes enganchar tu código en algunos pasos. Por ejemplo al iniciarse el componente.</p><p>El CLI hace que las clase del componente implemente la interfaz <code>OnInit</code> y eso permite al framework invocar al método <code>ngOnInit</code> en cuanto el componente esté listo para su uso. Que no suele ser justo durante la construcción, si no un poco después. Te recomiendo que lleves toda la lógica de inicialización a dicho método.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> workStatuses: Option[];</span><br><span class=\"line\"><span class=\"keyword\">public</span> contact: Contact;</span><br><span class=\"line\"><span class=\"keyword\">public</span> contacts: Contact[];</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.workStatuses = [</span><br><span class=\"line\">    &#123; id: <span class=\"number\">0</span>, description: <span class=\"string\">'unknow'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">1</span>, description: <span class=\"string\">'student'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">2</span>, description: <span class=\"string\">'unemployed'</span> &#125;,</span><br><span class=\"line\">    &#123; id: <span class=\"number\">3</span>, description: <span class=\"string\">'employed'</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contact = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    isVIP: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    gender: <span class=\"string\">''</span>,</span><br><span class=\"line\">    workStatus: <span class=\"number\">0</span>,</span><br><span class=\"line\">    company: <span class=\"string\">''</span>,</span><br><span class=\"line\">    education: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contacts = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"Un-listado-de-repaso\"><a href=\"#Un-listado-de-repaso\" class=\"headerlink\" title=\"Un listado de repaso\"></a>Un listado de repaso</h3><p>Para mostrar lo que ahora estamos guardando en una lista, nada más sencillo que usar de nuevo a <code>*nFor</code> y a <code>*ngIf</code> para tratar listas vacías.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"contacts.length&gt;0; else empty\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let contact of contacts\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; contact.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Delete\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteContact(contact)\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-template</span> #<span class=\"attr\">empty</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>No data yet<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Y ya puestos incluso puedes animarte a borrar contactos. Es fácil, los métodos pueden recibir argumentos. Y la vista los puede enviar.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> deleteContact(contact: Contact) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.contacts = <span class=\"keyword\">this</span>.contacts.filter(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.name !== contact.name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateCounter();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Mira el código completo de <strong>la clase</strong> <code>ContactsComponent</code>en el fichero <code>contacts.component.ts</code> para tener una visión completa del componente. Como ves, <strong>las propiedades</strong> <code>header, numContacas, formHidden, contacts ...</code> se corresponden con las utilizadas en las directivas de enlace en la vista. <strong>Los métodos</strong> <code>saveContact(), deleteContact()</code> son invocados desde eventos de elementos del <em>html</em>.</p><p>Juntos, <strong>la vista y su clase controladora</strong>, resuelven un problema de interacción con el usuario <strong>creando un componente</strong>. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.</p><blockquote><p>Y esto es sólo el comienzo. La idea de componente será fundamental en la web del mañana para la creación de páginas mediante <code>web components</code>. Pero eso ya se verá más adelante…</p></blockquote><p>Ahora tienes una aplicación en <em>Angular 8</em> que recoge y muestra datos. Sigue esta serie para añadirle <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a> mientras aprendes a programar con Angular7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"TypeScript, programa en el front igual que en el back","id":"23","updated":"2017-03-14T18:10:13.000Z","date":"2017-03-14T18:02:11.000Z","thumbnail":"/css/images/typescript.jpg","_content":"\nHasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo *back end y el front end*. El primero era el de los programadores de verdad, con **lenguajes serios y patrones de diseño**. El último era el universo de los diseñadores, con lenguajes de segundo nivel y **micro scripts o código espagueti** descontrolado.\n\n<!-- more -->\n\nPero la llegada de los frameworks *MVC* en el cliente, llevó **grandes cantidades de código al navegador** y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre *back y front*.\n\nPero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo *Java* y *C#* las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo *JavaScript*.\n\nY entonces eclosionó *TypeScript*. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a *JavaScript* al siguiente nivel. Con **tipos estáticos** (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia **suaviza la rampa de entrada al *front* para los desarrolladores *back***.\n\nYa no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el *TypeScript* si dominas y te gusta la POO, serás un *full stack* cuestión de horas.","source":"_posts/TypeScript-programa-en-el-front-igual-que-en-el-back.md","raw":"---\ntitle: 'TypeScript, programa en el front igual que en el back'\ntags:\n- TypeScript\n- Opinión\npermalink: typescript-programa-en-el-front-igual-que-en-el-back\nid: 23\nupdated: '2017-03-14 19:10:13'\ndate: 2017-03-14 19:02:11\nthumbnail: /css/images/typescript.jpg\n---\n\nHasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo *back end y el front end*. El primero era el de los programadores de verdad, con **lenguajes serios y patrones de diseño**. El último era el universo de los diseñadores, con lenguajes de segundo nivel y **micro scripts o código espagueti** descontrolado.\n\n<!-- more -->\n\nPero la llegada de los frameworks *MVC* en el cliente, llevó **grandes cantidades de código al navegador** y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre *back y front*.\n\nPero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo *Java* y *C#* las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo *JavaScript*.\n\nY entonces eclosionó *TypeScript*. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a *JavaScript* al siguiente nivel. Con **tipos estáticos** (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia **suaviza la rampa de entrada al *front* para los desarrolladores *back***.\n\nYa no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el *TypeScript* si dominas y te gusta la POO, serás un *full stack* cuestión de horas.","slug":"typescript-programa-en-el-front-igual-que-en-el-back","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4aw000e18s32ita3em8","content":"<p>Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo <em>back end y el front end</em>. El primero era el de los programadores de verdad, con <strong>lenguajes serios y patrones de diseño</strong>. El último era el universo de los diseñadores, con lenguajes de segundo nivel y <strong>micro scripts o código espagueti</strong> descontrolado.</p><a id=\"more\"></a><p>Pero la llegada de los frameworks <em>MVC</em> en el cliente, llevó <strong>grandes cantidades de código al navegador</strong> y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre <em>back y front</em>.</p><p>Pero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo <em>Java</em> y <em>C#</em> las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo <em>JavaScript</em>.</p><p>Y entonces eclosionó <em>TypeScript</em>. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a <em>JavaScript</em> al siguiente nivel. Con <strong>tipos estáticos</strong> (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia <strong>suaviza la rampa de entrada al <em>front</em> para los desarrolladores <em>back</em></strong>.</p><p>Ya no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el <em>TypeScript</em> si dominas y te gusta la POO, serás un <em>full stack</em> cuestión de horas.</p>","site":{"data":{}},"excerpt":"<p>Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo <em>back end y el front end</em>. El primero era el de los programadores de verdad, con <strong>lenguajes serios y patrones de diseño</strong>. El último era el universo de los diseñadores, con lenguajes de segundo nivel y <strong>micro scripts o código espagueti</strong> descontrolado.</p>","more":"<p>Pero la llegada de los frameworks <em>MVC</em> en el cliente, llevó <strong>grandes cantidades de código al navegador</strong> y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre <em>back y front</em>.</p><p>Pero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo <em>Java</em> y <em>C#</em> las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo <em>JavaScript</em>.</p><p>Y entonces eclosionó <em>TypeScript</em>. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a <em>JavaScript</em> al siguiente nivel. Con <strong>tipos estáticos</strong> (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia <strong>suaviza la rampa de entrada al <em>front</em> para los desarrolladores <em>back</em></strong>.</p><p>Ya no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el <em>TypeScript</em> si dominas y te gusta la POO, serás un <em>full stack</em> cuestión de horas.</p>"},{"title":"Flujo de datos entre componentes Angular","date":"2019-02-12T15:10:44.000Z","thumbnail":"/css/images/angular-4_flow.png","_content":"![flujo-de-datos-entre-componentes-angular](/images/tutorial-angular-4_flow.png)\n\nLos desarrollos profesionales son complicados pero **con Angular tenemos soluciones de comunicación simples para pantallas complejas**. Mediante el desarrollo de componentes atómicos y reutilizables Angular 8 favorece la implementación de buenas prácticas.\n\nCrear y comunicar muchos componentes puede llevarnos a código difícil de seguir. La librería `@angular/forms` ofrece *tuberías de comunicación* para **mantener el flujo de datos bajo control**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/). Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en componentes.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/4-flow](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/4-flow/car)\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n\n# 1. Comunicación entre componentes\n\nLas aplicaciones web en las que destaca Angular suelen ser complejas y con mucha variedad funcional en diversas páginas. A menudo esas páginas están repletas de formularios, informes y botones. La solución viene de mano del viejo principio _divide y vencerás_: **La componentización**\n\n## 1.1. Necesidad de comunicación\n\nEl _framework_ permite y recomienda repartir el trabajo en múltiples componentes de responsabilidad única. También es práctica común el crear páginas específicas para situaciones concretas aunque relacionadas. Por supuesto que estructuras como el menú de navegación o secciones de estado general necesitan conocer datos provenientes de las páginas. Nada está completamente asilado. Esto nos enfrenta la problema de **comunicar componentes**.\n\n## 1.2. Escenarios\n\nLas situaciones que te encontrarás caerán en alguna de estas tres categorías para las que hay soluciones específicas.\n\n### Comunicar componentes acoplados\nSolemos empezar creando un componente por página. Pero es normal que esa página se complique y la solución a la complejidad es la **división en componentes y reparto de responsabilidades**. Dado que están en una misma página existe cierto acoplamiento entre ellos y eso nos facilitará la comunicación.\n\n### Comunicar componentes en páginas distintas\nCuando los componentes se carga en rutas distintas ya no hay forma de comunicarlos directamente. Pero lo resolveremos fácilmente **usando las capacidades del router.**\n\n### Comunicar componentes entre estructuras dinámicas\nLa situación más compleja se da cuando queremos comunicar componentes o servicios desacoplados pero sin cambio de página. En este caso hará falta un **mediador observable**.\n\n\n# 2. El patrón Contendor / Presentadores\n\nEn **arquitectura de software** cuando encontramos una solución a un problema recurrente le ponemos un nombre y tratamos de utilizarlo siempre que podemos. Obviamente es una elección del programador y siempre tiene un coste que debe valorar. En este caso la ventaja es clara: **reparto de responsabilidades**.\n\n## 2.1 El patrón\n\nEn este caso **el patrón contenedor/presentadores** estipula que haya un único componente responsable de obtener, mutar y guardar el estado. Será el componente contenedor. Los presentadores serán responsables de.. ejem, presentar la información y los elementos de interacción con el usuario. Las ventajas derivadas son: mayor facilidad para el _testeo_ y mayores posibilidades de reutilización de presentadores.\n\n> A este patrón a veces se le conoce como parent/children por la jerarquía html que genera.\n\nVeamos una implementación sencilla. Haremos una interfaz mínima para simular el manejo de un coche. Habrá pedales de aceleración y freno, y un cuadro dónde se refleje la velocidad. Para todo ello vamos a usa el _Angular CLI_ y crear un módulo y sus componentes base.\n\n```console\nng g m 4-flow/car\nng g c 4-flow/car/car\nng g c 4-flow/car/car/display\nng g c 4-flow/car/car/pedals\n```\n\nAgregamos una ruta en el enrutador con su enlace en el menú.\n\n```typescript\n{\n  path: 'car',\n  loadChildren: () => import('./4-flow/car/car.module').then(m => m.CarModule)\n}\n```\n\n```html\n<a routerLink=\"car\" class=\"button\">\n  <span> 4 - Car</span>\n</a>\n```\n\n## 2.2 El contenedor\n\nEn el componente contenedor tendremos **una vista muy sencilla y un controlador más complejo**. La vista será la composición de los componentes presentadores, pero el controlador tendrá que obtener datos, aplicarles lógica de negocio y guardarlos cuando corresponda.\n\n> No es habitual asignarle un sufijo al nombre del componente para indicar que es el contenedor. Suele ser suficiente el verlo en la raíz de la jerarquía de carpetas.\n\n```html\n<app-display [model]=\"car.name\"\n             [currentSpeed]=\"car.currentSpeed\"\n             [topSpeed]=\"car.maxSpeed\"\n             [units]=\"'Km/h'\">\n</app-display>\n<app-pedals (brake)=\"onBrake($event)\"\n            [disableBrake]=\"disableBrake\"\n            (throttle)=\"onThrottle($event)\"\n            [disableThrottle]=\"disableThrottle\">\n</app-pedals>\n```\n\nVemos que usa los componentes presentadores `Display` y `Pedals` enviándoles información y suscribiéndose a sus eventos. Concretaremos esta funcionalidad más adelante.\n\n```typescript\npublic car: CarModel;\npublic disableBrake: boolean;\npublic disableThrottle: boolean;\n\nconstructor() {}\n\npublic ngOnInit() {\n  this.car = { name: 'Roadster', maxSpeed: 120, currentSpeed: 0 };\n  this.checkLimits();\n}\nprivate checkLimits() {\n  this.disableBrake = false;\n  this.disableThrottle = false;\n  if (this.car.currentSpeed <= 0) {\n    this.car.currentSpeed = 0;\n    this.disableBrake = true;\n  } else if (this.car.currentSpeed >= this.car.maxSpeed) {\n    this.car.currentSpeed = this.car.maxSpeed;\n    this.disableThrottle = true;\n  }\n}\npublic onBrake(drive: number) {\n  this.car.currentSpeed -= this.getDelta(drive);\n  this.checkLimits();\n}\npublic onThrottle(drive: number) {\n  this.car.currentSpeed += this.getDelta(drive);\n  this.checkLimits();\n}\nprivate getDelta = (drive: number) =>\n  drive + (this.car.maxSpeed - this.car.currentSpeed) / 10;\n```\n\nLo dicho, _la clase controladora del componente contenedor retiene el grueso de la funcionalidad_. En este caso inicializar una instancia de un coche y mantener sus velocidad en los límites lógicos respondiendo a las acciones del usuario conductor.\n\n\n## 2.3 Envío hacia el presentador con @Input()\n\nEsta comunicación _hacia abajo_ envía la información **desde el contenedor hacia el presentador**. Es similar a como una plantilla recibe la información desde el controlador.\n\n\n### @Input()\n\nPara que una vista muestre datos tiene que usar directivas como `{{ model }}` asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede **recibirlo desde el exterior**. La novedad es hacer que lo reciba vía *html*.\n\n```html\n<h2> {{ model }} </h2>\n<h3> Top speed: {{ topSpeed | number:'1.0-0' }}</h3>\n<div class=\"card\">\n  <div class=\"section\">\n    {{ currentSpeed | number:'1.2-2' }} {{ units }}\n  </div>\n  <progress [value]=\"currentSpeed\"\n            [ngClass]=\"getSpeedClass()\"\n            [max]=\"topSpeed\">\n  </progress>\n</div>\n```\n\n\nEmpieza por decorar con `@Input()` la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo `display.component.ts`.\n\n```typescript\nexport class DisplayComponent implements OnInit {\n  @Input() public model: string;\n  @Input() public currentSpeed: number;\n  @Input() public topSpeed: number;\n  @Input() public units: string;\n  constructor() {}\n  ngOnInit() {}\n  public getSpeedClass = () =>\n    this.currentSpeed < this.getThreshold() ? 'primary' : 'secondary';\n  private getThreshold = () => this.topSpeed * 0.8;\n}\n```\n\nAhora puedes enviarle datos a este componente desde el *html* de su consumidor. Por ejemplo desde `car.component.html` le puedo enviar una variable o cualquier expresión evaluable. Recordemos como usa `[propiedad]=\"expresion\"` en el elemento presentador.\n\n```html\n<app-display [model]=\"car.name\"\n             [currentSpeed]=\"car.currentSpeed\"\n             [topSpeed]=\"car.maxSpeed\"\n             [units]=\"'Km/h'\">\n</app-display>\n```\n\nEn la clase controladora del presentador quedan responsabilidades reducidas a temas específicos como determinar las clases _css_ apropiadas o transformar los datos para su presentación.\n\nEstoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. Este mismo patrón puede y debe repetirse hasta **descomponer las vistas en estructuras simples** que nos eviten repeticiones absurdas en código.\n\nDe esta forma es fácil crear componentes reutilizables; y queda muy limpio el **envío de datos hacia abajo**. Pero, ¿y hacia arriba?.\n\n\n## 2.4. Respuesta del presentador con @Output()\n\nLos componentes de nivel inferior no sólo se dedican a presentar datos, también presentan controles. Con ellos el usuario podrá crear, modificar o eliminar los datos que quiera. Aunque no directamente; para hacerlo **comunican el cambio requerido al contenedor de nivel superior**.\n\n### @Output()\n\nPor ejemplo, el componente `PedalsComponent` permite acelerar y frenar. Bueno, realmente permite que el usuario diga que lo quiere hacer; los cambios se harán más arriba. Veamos lo básico del `pedals.component.html` antes de nada:\n\n```html\n<h3> Pedals: </h3>\n<form>\n  <input value=\"brake\"\n    class=\"secondary\"\n    type=\"button\"\n    [disabled]=\"disableBrake\"\n    (click)=\"brake.emit(1)\"/>\n  <input value=\"throttle\"\n    class=\"tertiary\"\n    type=\"button\"\n    [disabled]=\"disableThrottle\"\n    (click)=\"throttle.emit(1)\"/>\n</form>\n```\n\nClaramente son un par de botones que con el evento `(click)` responden a acciones del usuario. En este caso se manifiesta una intención de acelerar o frenar el coche. Pero el método del controlador no actúa directamente sobre los datos.\n\n> Si lo hiciera sería más difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación que se verán más adelante...\n\nEn su lugar, lo que hace es **emitir un evento** confiando que alguien lo reciba y actúe en consecuencia. Por ejemplo la emisión de la instrucción de frenado se realiza mediante la propiedad `brake` decorada con `@Output() public brake new EventEmitter<number>();`. Dicha propiedad será una instancia de un emisor de eventos que mediante el método `.next()` que emite la señal hacia arriba.\n\n```typescript\nexport class PedalsComponent implements OnInit {\n  @Input() public disableBrake: boolean;\n  @Input() public disableThrottle: boolean;\n  @Output() public brake = new EventEmitter<number>();\n  @Output() public throttle = new EventEmitter<number>();\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\nMientras tanto, **en el contenedor la vista se subscribe al evento** `(brake)` como si este fuese un evento nativo y llama a los métodos que manipulan los datos de verdad.\n\n```html\n<app-pedals (brake)=\"onBrake($event)\"\n            [disableBrake]=\"disableBrake\"\n            (throttle)=\"onThrottle($event)\"\n            [disableThrottle]=\"disableThrottle\">\n</app-pedals>\n```\n\nLas propiedades *output* también pueden enviar argumentos que serán recibidos mediante el identificador `$event` propio del framework. Se declaran especificando el tipo del argumento en el genérico del constructor de `EventEmitter<any>`.\n\n\nEn el controlador ya podemos operar con los datos. El método `onBrake(drive: number)` accede y modifica el valor de la velocidad y lo notifica automáticamente hacia abajo.\n\nDe esta manera se cierra el círculo. Los componentes de bajo nivel pueden **recibir datos para ser presentados o emitir eventos para modificarlos**. El componente de nivel superior es el **único responsable de obtener y actuar** sobre los datos.\n\n\n# 3. Comunicaciones entre páginas o estructuras\n\n## 3.1 Comunicación entre distintas páginas\n\nEn las aplicaciones hay **comunicaciones de estado más allá de la página actual**. La comunicación entre páginas es responsabilidad del `@angular/router`. Una vez activada una ruta, el sistema carga un componente en el `<router-outlet>` correspondiente. No hay forma de comunicarse hacia *(arriba) o [abajo]* con algo desconocido. De una página a otra tampoco es problema pues la comunicación va mediante los parámetros de la *url*.\n\nYa hemos usado esta comunicación anteriormente en el tema [2-spa](../paginas-y-rutas-angular-spa/) el componente `AuthorComponent` es capaz de recibir por parámetros una identificación de un autor. Esa información es el resultado de una acción del usuario en la pantalla `/about/authors` programada en el componente `AuthorsComponent`. Por tanto es una comunicación entre componentes, en la que ambos son *controladores hermanos*.\n\n> Desde luego habrá que mejorar el acceso y control de los datos que por ahora es muy rudimentario. Lo haremos en próximos pasos. Primero mediante  [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) y después usando [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/)\n\n## 2.2 Comunicación entre estructuras desacopladas\n\nEstando en la misma ruta, no siempre se podrán conocer los componentes, y por tanto no se podrán usar sus `[propiedades] y (eventos)`\n\n### 2.2.1 El layout principal y los componentes por ruta páginas.\n\nUna situación habitual es **comunicar la vista de negocio activa con elementos generales** de la página. Por ejemplo podrías querer mostrar la velocidad máxima alcanzada en la barra del menú o un un mensaje emergente cada vez que se alcance la velocidad límite. En este caso, el `<router-outlet>` es una barrera que impide usar el patrón contenedor-presentador pues no se puede predecir el contenido dinámico que carga el `RouterOutlet`.\n\n### 2.2.2 Múltiples niveles de presentadores.\n\nCuando las pantallas se hacen realmente complejas empiezan a surgir **árboles de componentes** de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. Enviar hacia abajo las `[propiedades]` es tedioso, pero peor aún es hacer burbujear los `(eventos)` por varias capas de presentadores.\n\nLa solución en ambos casos pasa por permitir que *algunos componentes presentadores tengan su propio control de datos*. Este tipo de comunicaciones técnicamente se resuelve mediante *Observables* y merece un capítulo especial que se verá más adelante en esta serie. Incluso en situaciones complejas habrá que optar por patrones avanzados de gestión de estado como pueda ser *Redux*.\n\nPor ahora tienes una aplicación en *Angular* que comunica datos y cambios entre componentes de una misma página. Sigue el tutorial para añadirle [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) mientras aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/ng-4-Flujo-de-datos-entre-componentes-Angular.md","raw":"---\ntitle: Flujo de datos entre componentes Angular\npermalink: flujo-de-datos-entre-componentes-angular\ndate: 2019-02-12 16:10:44\ntags:\n- Angular\n- Components\n- Tutorial\n- Introducción\n- Angular8\n- Angular2\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-4_flow.png\n---\n![flujo-de-datos-entre-componentes-angular](/images/tutorial-angular-4_flow.png)\n\nLos desarrollos profesionales son complicados pero **con Angular tenemos soluciones de comunicación simples para pantallas complejas**. Mediante el desarrollo de componentes atómicos y reutilizables Angular 8 favorece la implementación de buenas prácticas.\n\nCrear y comunicar muchos componentes puede llevarnos a código difícil de seguir. La librería `@angular/forms` ofrece *tuberías de comunicación* para **mantener el flujo de datos bajo control**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/). Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en componentes.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/4-flow](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/4-flow/car)\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n\n# 1. Comunicación entre componentes\n\nLas aplicaciones web en las que destaca Angular suelen ser complejas y con mucha variedad funcional en diversas páginas. A menudo esas páginas están repletas de formularios, informes y botones. La solución viene de mano del viejo principio _divide y vencerás_: **La componentización**\n\n## 1.1. Necesidad de comunicación\n\nEl _framework_ permite y recomienda repartir el trabajo en múltiples componentes de responsabilidad única. También es práctica común el crear páginas específicas para situaciones concretas aunque relacionadas. Por supuesto que estructuras como el menú de navegación o secciones de estado general necesitan conocer datos provenientes de las páginas. Nada está completamente asilado. Esto nos enfrenta la problema de **comunicar componentes**.\n\n## 1.2. Escenarios\n\nLas situaciones que te encontrarás caerán en alguna de estas tres categorías para las que hay soluciones específicas.\n\n### Comunicar componentes acoplados\nSolemos empezar creando un componente por página. Pero es normal que esa página se complique y la solución a la complejidad es la **división en componentes y reparto de responsabilidades**. Dado que están en una misma página existe cierto acoplamiento entre ellos y eso nos facilitará la comunicación.\n\n### Comunicar componentes en páginas distintas\nCuando los componentes se carga en rutas distintas ya no hay forma de comunicarlos directamente. Pero lo resolveremos fácilmente **usando las capacidades del router.**\n\n### Comunicar componentes entre estructuras dinámicas\nLa situación más compleja se da cuando queremos comunicar componentes o servicios desacoplados pero sin cambio de página. En este caso hará falta un **mediador observable**.\n\n\n# 2. El patrón Contendor / Presentadores\n\nEn **arquitectura de software** cuando encontramos una solución a un problema recurrente le ponemos un nombre y tratamos de utilizarlo siempre que podemos. Obviamente es una elección del programador y siempre tiene un coste que debe valorar. En este caso la ventaja es clara: **reparto de responsabilidades**.\n\n## 2.1 El patrón\n\nEn este caso **el patrón contenedor/presentadores** estipula que haya un único componente responsable de obtener, mutar y guardar el estado. Será el componente contenedor. Los presentadores serán responsables de.. ejem, presentar la información y los elementos de interacción con el usuario. Las ventajas derivadas son: mayor facilidad para el _testeo_ y mayores posibilidades de reutilización de presentadores.\n\n> A este patrón a veces se le conoce como parent/children por la jerarquía html que genera.\n\nVeamos una implementación sencilla. Haremos una interfaz mínima para simular el manejo de un coche. Habrá pedales de aceleración y freno, y un cuadro dónde se refleje la velocidad. Para todo ello vamos a usa el _Angular CLI_ y crear un módulo y sus componentes base.\n\n```console\nng g m 4-flow/car\nng g c 4-flow/car/car\nng g c 4-flow/car/car/display\nng g c 4-flow/car/car/pedals\n```\n\nAgregamos una ruta en el enrutador con su enlace en el menú.\n\n```typescript\n{\n  path: 'car',\n  loadChildren: () => import('./4-flow/car/car.module').then(m => m.CarModule)\n}\n```\n\n```html\n<a routerLink=\"car\" class=\"button\">\n  <span> 4 - Car</span>\n</a>\n```\n\n## 2.2 El contenedor\n\nEn el componente contenedor tendremos **una vista muy sencilla y un controlador más complejo**. La vista será la composición de los componentes presentadores, pero el controlador tendrá que obtener datos, aplicarles lógica de negocio y guardarlos cuando corresponda.\n\n> No es habitual asignarle un sufijo al nombre del componente para indicar que es el contenedor. Suele ser suficiente el verlo en la raíz de la jerarquía de carpetas.\n\n```html\n<app-display [model]=\"car.name\"\n             [currentSpeed]=\"car.currentSpeed\"\n             [topSpeed]=\"car.maxSpeed\"\n             [units]=\"'Km/h'\">\n</app-display>\n<app-pedals (brake)=\"onBrake($event)\"\n            [disableBrake]=\"disableBrake\"\n            (throttle)=\"onThrottle($event)\"\n            [disableThrottle]=\"disableThrottle\">\n</app-pedals>\n```\n\nVemos que usa los componentes presentadores `Display` y `Pedals` enviándoles información y suscribiéndose a sus eventos. Concretaremos esta funcionalidad más adelante.\n\n```typescript\npublic car: CarModel;\npublic disableBrake: boolean;\npublic disableThrottle: boolean;\n\nconstructor() {}\n\npublic ngOnInit() {\n  this.car = { name: 'Roadster', maxSpeed: 120, currentSpeed: 0 };\n  this.checkLimits();\n}\nprivate checkLimits() {\n  this.disableBrake = false;\n  this.disableThrottle = false;\n  if (this.car.currentSpeed <= 0) {\n    this.car.currentSpeed = 0;\n    this.disableBrake = true;\n  } else if (this.car.currentSpeed >= this.car.maxSpeed) {\n    this.car.currentSpeed = this.car.maxSpeed;\n    this.disableThrottle = true;\n  }\n}\npublic onBrake(drive: number) {\n  this.car.currentSpeed -= this.getDelta(drive);\n  this.checkLimits();\n}\npublic onThrottle(drive: number) {\n  this.car.currentSpeed += this.getDelta(drive);\n  this.checkLimits();\n}\nprivate getDelta = (drive: number) =>\n  drive + (this.car.maxSpeed - this.car.currentSpeed) / 10;\n```\n\nLo dicho, _la clase controladora del componente contenedor retiene el grueso de la funcionalidad_. En este caso inicializar una instancia de un coche y mantener sus velocidad en los límites lógicos respondiendo a las acciones del usuario conductor.\n\n\n## 2.3 Envío hacia el presentador con @Input()\n\nEsta comunicación _hacia abajo_ envía la información **desde el contenedor hacia el presentador**. Es similar a como una plantilla recibe la información desde el controlador.\n\n\n### @Input()\n\nPara que una vista muestre datos tiene que usar directivas como `{{ model }}` asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede **recibirlo desde el exterior**. La novedad es hacer que lo reciba vía *html*.\n\n```html\n<h2> {{ model }} </h2>\n<h3> Top speed: {{ topSpeed | number:'1.0-0' }}</h3>\n<div class=\"card\">\n  <div class=\"section\">\n    {{ currentSpeed | number:'1.2-2' }} {{ units }}\n  </div>\n  <progress [value]=\"currentSpeed\"\n            [ngClass]=\"getSpeedClass()\"\n            [max]=\"topSpeed\">\n  </progress>\n</div>\n```\n\n\nEmpieza por decorar con `@Input()` la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo `display.component.ts`.\n\n```typescript\nexport class DisplayComponent implements OnInit {\n  @Input() public model: string;\n  @Input() public currentSpeed: number;\n  @Input() public topSpeed: number;\n  @Input() public units: string;\n  constructor() {}\n  ngOnInit() {}\n  public getSpeedClass = () =>\n    this.currentSpeed < this.getThreshold() ? 'primary' : 'secondary';\n  private getThreshold = () => this.topSpeed * 0.8;\n}\n```\n\nAhora puedes enviarle datos a este componente desde el *html* de su consumidor. Por ejemplo desde `car.component.html` le puedo enviar una variable o cualquier expresión evaluable. Recordemos como usa `[propiedad]=\"expresion\"` en el elemento presentador.\n\n```html\n<app-display [model]=\"car.name\"\n             [currentSpeed]=\"car.currentSpeed\"\n             [topSpeed]=\"car.maxSpeed\"\n             [units]=\"'Km/h'\">\n</app-display>\n```\n\nEn la clase controladora del presentador quedan responsabilidades reducidas a temas específicos como determinar las clases _css_ apropiadas o transformar los datos para su presentación.\n\nEstoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. Este mismo patrón puede y debe repetirse hasta **descomponer las vistas en estructuras simples** que nos eviten repeticiones absurdas en código.\n\nDe esta forma es fácil crear componentes reutilizables; y queda muy limpio el **envío de datos hacia abajo**. Pero, ¿y hacia arriba?.\n\n\n## 2.4. Respuesta del presentador con @Output()\n\nLos componentes de nivel inferior no sólo se dedican a presentar datos, también presentan controles. Con ellos el usuario podrá crear, modificar o eliminar los datos que quiera. Aunque no directamente; para hacerlo **comunican el cambio requerido al contenedor de nivel superior**.\n\n### @Output()\n\nPor ejemplo, el componente `PedalsComponent` permite acelerar y frenar. Bueno, realmente permite que el usuario diga que lo quiere hacer; los cambios se harán más arriba. Veamos lo básico del `pedals.component.html` antes de nada:\n\n```html\n<h3> Pedals: </h3>\n<form>\n  <input value=\"brake\"\n    class=\"secondary\"\n    type=\"button\"\n    [disabled]=\"disableBrake\"\n    (click)=\"brake.emit(1)\"/>\n  <input value=\"throttle\"\n    class=\"tertiary\"\n    type=\"button\"\n    [disabled]=\"disableThrottle\"\n    (click)=\"throttle.emit(1)\"/>\n</form>\n```\n\nClaramente son un par de botones que con el evento `(click)` responden a acciones del usuario. En este caso se manifiesta una intención de acelerar o frenar el coche. Pero el método del controlador no actúa directamente sobre los datos.\n\n> Si lo hiciera sería más difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación que se verán más adelante...\n\nEn su lugar, lo que hace es **emitir un evento** confiando que alguien lo reciba y actúe en consecuencia. Por ejemplo la emisión de la instrucción de frenado se realiza mediante la propiedad `brake` decorada con `@Output() public brake new EventEmitter<number>();`. Dicha propiedad será una instancia de un emisor de eventos que mediante el método `.next()` que emite la señal hacia arriba.\n\n```typescript\nexport class PedalsComponent implements OnInit {\n  @Input() public disableBrake: boolean;\n  @Input() public disableThrottle: boolean;\n  @Output() public brake = new EventEmitter<number>();\n  @Output() public throttle = new EventEmitter<number>();\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\nMientras tanto, **en el contenedor la vista se subscribe al evento** `(brake)` como si este fuese un evento nativo y llama a los métodos que manipulan los datos de verdad.\n\n```html\n<app-pedals (brake)=\"onBrake($event)\"\n            [disableBrake]=\"disableBrake\"\n            (throttle)=\"onThrottle($event)\"\n            [disableThrottle]=\"disableThrottle\">\n</app-pedals>\n```\n\nLas propiedades *output* también pueden enviar argumentos que serán recibidos mediante el identificador `$event` propio del framework. Se declaran especificando el tipo del argumento en el genérico del constructor de `EventEmitter<any>`.\n\n\nEn el controlador ya podemos operar con los datos. El método `onBrake(drive: number)` accede y modifica el valor de la velocidad y lo notifica automáticamente hacia abajo.\n\nDe esta manera se cierra el círculo. Los componentes de bajo nivel pueden **recibir datos para ser presentados o emitir eventos para modificarlos**. El componente de nivel superior es el **único responsable de obtener y actuar** sobre los datos.\n\n\n# 3. Comunicaciones entre páginas o estructuras\n\n## 3.1 Comunicación entre distintas páginas\n\nEn las aplicaciones hay **comunicaciones de estado más allá de la página actual**. La comunicación entre páginas es responsabilidad del `@angular/router`. Una vez activada una ruta, el sistema carga un componente en el `<router-outlet>` correspondiente. No hay forma de comunicarse hacia *(arriba) o [abajo]* con algo desconocido. De una página a otra tampoco es problema pues la comunicación va mediante los parámetros de la *url*.\n\nYa hemos usado esta comunicación anteriormente en el tema [2-spa](../paginas-y-rutas-angular-spa/) el componente `AuthorComponent` es capaz de recibir por parámetros una identificación de un autor. Esa información es el resultado de una acción del usuario en la pantalla `/about/authors` programada en el componente `AuthorsComponent`. Por tanto es una comunicación entre componentes, en la que ambos son *controladores hermanos*.\n\n> Desde luego habrá que mejorar el acceso y control de los datos que por ahora es muy rudimentario. Lo haremos en próximos pasos. Primero mediante  [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) y después usando [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/)\n\n## 2.2 Comunicación entre estructuras desacopladas\n\nEstando en la misma ruta, no siempre se podrán conocer los componentes, y por tanto no se podrán usar sus `[propiedades] y (eventos)`\n\n### 2.2.1 El layout principal y los componentes por ruta páginas.\n\nUna situación habitual es **comunicar la vista de negocio activa con elementos generales** de la página. Por ejemplo podrías querer mostrar la velocidad máxima alcanzada en la barra del menú o un un mensaje emergente cada vez que se alcance la velocidad límite. En este caso, el `<router-outlet>` es una barrera que impide usar el patrón contenedor-presentador pues no se puede predecir el contenido dinámico que carga el `RouterOutlet`.\n\n### 2.2.2 Múltiples niveles de presentadores.\n\nCuando las pantallas se hacen realmente complejas empiezan a surgir **árboles de componentes** de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. Enviar hacia abajo las `[propiedades]` es tedioso, pero peor aún es hacer burbujear los `(eventos)` por varias capas de presentadores.\n\nLa solución en ambos casos pasa por permitir que *algunos componentes presentadores tengan su propio control de datos*. Este tipo de comunicaciones técnicamente se resuelve mediante *Observables* y merece un capítulo especial que se verá más adelante en esta serie. Incluso en situaciones complejas habrá que optar por patrones avanzados de gestión de estado como pueda ser *Redux*.\n\nPor ahora tienes una aplicación en *Angular* que comunica datos y cambios entre componentes de una misma página. Sigue el tutorial para añadirle [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/) mientras aprendes a programar con Angular 8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"flujo-de-datos-entre-componentes-angular","published":1,"updated":"2019-08-05T11:44:58.161Z","_id":"cjyh5p4ax000f18s3scjvy482","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-4_flow.png\" alt=\"flujo-de-datos-entre-componentes-angular\"></p><p>Los desarrollos profesionales son complicados pero <strong>con Angular tenemos soluciones de comunicación simples para pantallas complejas</strong>. Mediante el desarrollo de componentes atómicos y reutilizables Angular 8 favorece la implementación de buenas prácticas.</p><p>Crear y comunicar muchos componentes puede llevarnos a código difícil de seguir. La librería <code>@angular/forms</code> ofrece <em>tuberías de comunicación</em> para <strong>mantener el flujo de datos bajo control</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a>. Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en componentes.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/4-flow/car\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/4-flow</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-Comunicacion-entre-componentes\"><a href=\"#1-Comunicacion-entre-componentes\" class=\"headerlink\" title=\"1. Comunicación entre componentes\"></a>1. Comunicación entre componentes</h1><p>Las aplicaciones web en las que destaca Angular suelen ser complejas y con mucha variedad funcional en diversas páginas. A menudo esas páginas están repletas de formularios, informes y botones. La solución viene de mano del viejo principio <em>divide y vencerás</em>: <strong>La componentización</strong></p><h2 id=\"1-1-Necesidad-de-comunicacion\"><a href=\"#1-1-Necesidad-de-comunicacion\" class=\"headerlink\" title=\"1.1. Necesidad de comunicación\"></a>1.1. Necesidad de comunicación</h2><p>El <em>framework</em> permite y recomienda repartir el trabajo en múltiples componentes de responsabilidad única. También es práctica común el crear páginas específicas para situaciones concretas aunque relacionadas. Por supuesto que estructuras como el menú de navegación o secciones de estado general necesitan conocer datos provenientes de las páginas. Nada está completamente asilado. Esto nos enfrenta la problema de <strong>comunicar componentes</strong>.</p><h2 id=\"1-2-Escenarios\"><a href=\"#1-2-Escenarios\" class=\"headerlink\" title=\"1.2. Escenarios\"></a>1.2. Escenarios</h2><p>Las situaciones que te encontrarás caerán en alguna de estas tres categorías para las que hay soluciones específicas.</p><h3 id=\"Comunicar-componentes-acoplados\"><a href=\"#Comunicar-componentes-acoplados\" class=\"headerlink\" title=\"Comunicar componentes acoplados\"></a>Comunicar componentes acoplados</h3><p>Solemos empezar creando un componente por página. Pero es normal que esa página se complique y la solución a la complejidad es la <strong>división en componentes y reparto de responsabilidades</strong>. Dado que están en una misma página existe cierto acoplamiento entre ellos y eso nos facilitará la comunicación.</p><h3 id=\"Comunicar-componentes-en-paginas-distintas\"><a href=\"#Comunicar-componentes-en-paginas-distintas\" class=\"headerlink\" title=\"Comunicar componentes en páginas distintas\"></a>Comunicar componentes en páginas distintas</h3><p>Cuando los componentes se carga en rutas distintas ya no hay forma de comunicarlos directamente. Pero lo resolveremos fácilmente <strong>usando las capacidades del router.</strong></p><h3 id=\"Comunicar-componentes-entre-estructuras-dinamicas\"><a href=\"#Comunicar-componentes-entre-estructuras-dinamicas\" class=\"headerlink\" title=\"Comunicar componentes entre estructuras dinámicas\"></a>Comunicar componentes entre estructuras dinámicas</h3><p>La situación más compleja se da cuando queremos comunicar componentes o servicios desacoplados pero sin cambio de página. En este caso hará falta un <strong>mediador observable</strong>.</p><h1 id=\"2-El-patron-Contendor-Presentadores\"><a href=\"#2-El-patron-Contendor-Presentadores\" class=\"headerlink\" title=\"2. El patrón Contendor / Presentadores\"></a>2. El patrón Contendor / Presentadores</h1><p>En <strong>arquitectura de software</strong> cuando encontramos una solución a un problema recurrente le ponemos un nombre y tratamos de utilizarlo siempre que podemos. Obviamente es una elección del programador y siempre tiene un coste que debe valorar. En este caso la ventaja es clara: <strong>reparto de responsabilidades</strong>.</p><h2 id=\"2-1-El-patron\"><a href=\"#2-1-El-patron\" class=\"headerlink\" title=\"2.1 El patrón\"></a>2.1 El patrón</h2><p>En este caso <strong>el patrón contenedor/presentadores</strong> estipula que haya un único componente responsable de obtener, mutar y guardar el estado. Será el componente contenedor. Los presentadores serán responsables de.. ejem, presentar la información y los elementos de interacción con el usuario. Las ventajas derivadas son: mayor facilidad para el <em>testeo</em> y mayores posibilidades de reutilización de presentadores.</p><blockquote><p>A este patrón a veces se le conoce como parent/children por la jerarquía html que genera.</p></blockquote><p>Veamos una implementación sencilla. Haremos una interfaz mínima para simular el manejo de un coche. Habrá pedales de aceleración y freno, y un cuadro dónde se refleje la velocidad. Para todo ello vamos a usa el <em>Angular CLI</em> y crear un módulo y sus componentes base.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m 4-flow/car</span><br><span class=\"line\">ng g c 4-flow/car/car</span><br><span class=\"line\">ng g c 4-flow/car/car/display</span><br><span class=\"line\">ng g c 4-flow/car/car/pedals</span><br></pre></td></tr></table></figure><p>Agregamos una ruta en el enrutador con su enlace en el menú.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">'car'</span>,</span><br><span class=\"line\">  loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./4-flow/car/car.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.CarModule)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"car\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> 4 - Car<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"2-2-El-contenedor\"><a href=\"#2-2-El-contenedor\" class=\"headerlink\" title=\"2.2 El contenedor\"></a>2.2 El contenedor</h2><p>En el componente contenedor tendremos <strong>una vista muy sencilla y un controlador más complejo</strong>. La vista será la composición de los componentes presentadores, pero el controlador tendrá que obtener datos, aplicarles lógica de negocio y guardarlos cuando corresponda.</p><blockquote><p>No es habitual asignarle un sufijo al nombre del componente para indicar que es el contenedor. Suele ser suficiente el verlo en la raíz de la jerarquía de carpetas.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-display</span> [<span class=\"attr\">model</span>]=<span class=\"string\">\"car.name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">currentSpeed</span>]=<span class=\"string\">\"car.currentSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">topSpeed</span>]=<span class=\"string\">\"car.maxSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">units</span>]=<span class=\"string\">\"'Km/h'\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-display</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-pedals</span> (<span class=\"attr\">brake</span>)=<span class=\"string\">\"onBrake($event)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">disableBrake</span>]=<span class=\"string\">\"disableBrake\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            (<span class=\"attr\">throttle</span>)=<span class=\"string\">\"onThrottle($event)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">disableThrottle</span>]=<span class=\"string\">\"disableThrottle\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-pedals</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vemos que usa los componentes presentadores <code>Display</code> y <code>Pedals</code> enviándoles información y suscribiéndose a sus eventos. Concretaremos esta funcionalidad más adelante.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> car: CarModel;</span><br><span class=\"line\"><span class=\"keyword\">public</span> disableBrake: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> disableThrottle: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.car = &#123; name: <span class=\"string\">'Roadster'</span>, maxSpeed: <span class=\"number\">120</span>, currentSpeed: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkLimits();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> checkLimits() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.disableBrake = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.disableThrottle = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.car.currentSpeed &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.car.currentSpeed = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.disableBrake = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.car.currentSpeed &gt;= <span class=\"keyword\">this</span>.car.maxSpeed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.car.currentSpeed = <span class=\"keyword\">this</span>.car.maxSpeed;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.disableThrottle = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> onBrake(drive: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.car.currentSpeed -= <span class=\"keyword\">this</span>.getDelta(drive);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkLimits();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> onThrottle(drive: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.car.currentSpeed += <span class=\"keyword\">this</span>.getDelta(drive);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkLimits();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> getDelta = <span class=\"function\">(<span class=\"params\">drive: <span class=\"built_in\">number</span></span>) =&gt;</span></span><br><span class=\"line\">  drive + (<span class=\"keyword\">this</span>.car.maxSpeed - <span class=\"keyword\">this</span>.car.currentSpeed) / <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure><p>Lo dicho, <em>la clase controladora del componente contenedor retiene el grueso de la funcionalidad</em>. En este caso inicializar una instancia de un coche y mantener sus velocidad en los límites lógicos respondiendo a las acciones del usuario conductor.</p><h2 id=\"2-3-Envio-hacia-el-presentador-con-Input\"><a href=\"#2-3-Envio-hacia-el-presentador-con-Input\" class=\"headerlink\" title=\"2.3 Envío hacia el presentador con @Input()\"></a>2.3 Envío hacia el presentador con @Input()</h2><p>Esta comunicación <em>hacia abajo</em> envía la información <strong>desde el contenedor hacia el presentador</strong>. Es similar a como una plantilla recibe la información desde el controlador.</p><h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input()\"></a>@Input()</h3><p>Para que una vista muestre datos tiene que usar directivas como <code></code> asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede <strong>recibirlo desde el exterior</strong>. La novedad es hacer que lo reciba vía <em>html</em>.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> &#123;&#123; model &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> Top speed: &#123;&#123; topSpeed | number:'1.0-0' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"section\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; currentSpeed | number:'1.2-2' &#125;&#125; &#123;&#123; units &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">progress</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"currentSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"getSpeedClass()\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">max</span>]=<span class=\"string\">\"topSpeed\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">progress</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Empieza por decorar con <code>@Input()</code> la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo <code>display.component.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DisplayComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> model: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> currentSpeed: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> topSpeed: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> units: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> getSpeedClass = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.currentSpeed &lt; <span class=\"keyword\">this</span>.getThreshold() ? <span class=\"string\">'primary'</span> : <span class=\"string\">'secondary'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> getThreshold = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.topSpeed * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ahora puedes enviarle datos a este componente desde el <em>html</em> de su consumidor. Por ejemplo desde <code>car.component.html</code> le puedo enviar una variable o cualquier expresión evaluable. Recordemos como usa <code>[propiedad]=&quot;expresion&quot;</code> en el elemento presentador.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-display</span> [<span class=\"attr\">model</span>]=<span class=\"string\">\"car.name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">currentSpeed</span>]=<span class=\"string\">\"car.currentSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">topSpeed</span>]=<span class=\"string\">\"car.maxSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">units</span>]=<span class=\"string\">\"'Km/h'\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-display</span>&gt;</span></span><br></pre></td></tr></table></figure><p>En la clase controladora del presentador quedan responsabilidades reducidas a temas específicos como determinar las clases <em>css</em> apropiadas o transformar los datos para su presentación.</p><p>Estoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. Este mismo patrón puede y debe repetirse hasta <strong>descomponer las vistas en estructuras simples</strong> que nos eviten repeticiones absurdas en código.</p><p>De esta forma es fácil crear componentes reutilizables; y queda muy limpio el <strong>envío de datos hacia abajo</strong>. Pero, ¿y hacia arriba?.</p><h2 id=\"2-4-Respuesta-del-presentador-con-Output\"><a href=\"#2-4-Respuesta-del-presentador-con-Output\" class=\"headerlink\" title=\"2.4. Respuesta del presentador con @Output()\"></a>2.4. Respuesta del presentador con @Output()</h2><p>Los componentes de nivel inferior no sólo se dedican a presentar datos, también presentan controles. Con ellos el usuario podrá crear, modificar o eliminar los datos que quiera. Aunque no directamente; para hacerlo <strong>comunican el cambio requerido al contenedor de nivel superior</strong>.</p><h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output()\"></a>@Output()</h3><p>Por ejemplo, el componente <code>PedalsComponent</code> permite acelerar y frenar. Bueno, realmente permite que el usuario diga que lo quiere hacer; los cambios se harán más arriba. Veamos lo básico del <code>pedals.component.html</code> antes de nada:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> Pedals: <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"brake\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"secondary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"disableBrake\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    (<span class=\"attr\">click</span>)=<span class=\"string\">\"brake.emit(1)\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"throttle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"tertiary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"disableThrottle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    (<span class=\"attr\">click</span>)=<span class=\"string\">\"throttle.emit(1)\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Claramente son un par de botones que con el evento <code>(click)</code> responden a acciones del usuario. En este caso se manifiesta una intención de acelerar o frenar el coche. Pero el método del controlador no actúa directamente sobre los datos.</p><blockquote><p>Si lo hiciera sería más difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación que se verán más adelante…</p></blockquote><p>En su lugar, lo que hace es <strong>emitir un evento</strong> confiando que alguien lo reciba y actúe en consecuencia. Por ejemplo la emisión de la instrucción de frenado se realiza mediante la propiedad <code>brake</code> decorada con <code>@Output() public brake new EventEmitter&lt;number&gt;();</code>. Dicha propiedad será una instancia de un emisor de eventos que mediante el método <code>.next()</code> que emite la señal hacia arriba.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PedalsComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> disableBrake: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> disableThrottle: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() <span class=\"keyword\">public</span> brake = <span class=\"keyword\">new</span> EventEmitter&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() <span class=\"keyword\">public</span> throttle = <span class=\"keyword\">new</span> EventEmitter&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Mientras tanto, <strong>en el contenedor la vista se subscribe al evento</strong> <code>(brake)</code> como si este fuese un evento nativo y llama a los métodos que manipulan los datos de verdad.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-pedals</span> (<span class=\"attr\">brake</span>)=<span class=\"string\">\"onBrake($event)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">disableBrake</span>]=<span class=\"string\">\"disableBrake\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            (<span class=\"attr\">throttle</span>)=<span class=\"string\">\"onThrottle($event)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">disableThrottle</span>]=<span class=\"string\">\"disableThrottle\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-pedals</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Las propiedades <em>output</em> también pueden enviar argumentos que serán recibidos mediante el identificador <code>$event</code> propio del framework. Se declaran especificando el tipo del argumento en el genérico del constructor de <code>EventEmitter&lt;any&gt;</code>.</p><p>En el controlador ya podemos operar con los datos. El método <code>onBrake(drive: number)</code> accede y modifica el valor de la velocidad y lo notifica automáticamente hacia abajo.</p><p>De esta manera se cierra el círculo. Los componentes de bajo nivel pueden <strong>recibir datos para ser presentados o emitir eventos para modificarlos</strong>. El componente de nivel superior es el <strong>único responsable de obtener y actuar</strong> sobre los datos.</p><h1 id=\"3-Comunicaciones-entre-paginas-o-estructuras\"><a href=\"#3-Comunicaciones-entre-paginas-o-estructuras\" class=\"headerlink\" title=\"3. Comunicaciones entre páginas o estructuras\"></a>3. Comunicaciones entre páginas o estructuras</h1><h2 id=\"3-1-Comunicacion-entre-distintas-paginas\"><a href=\"#3-1-Comunicacion-entre-distintas-paginas\" class=\"headerlink\" title=\"3.1 Comunicación entre distintas páginas\"></a>3.1 Comunicación entre distintas páginas</h2><p>En las aplicaciones hay <strong>comunicaciones de estado más allá de la página actual</strong>. La comunicación entre páginas es responsabilidad del <code>@angular/router</code>. Una vez activada una ruta, el sistema carga un componente en el <code>&lt;router-outlet&gt;</code> correspondiente. No hay forma de comunicarse hacia <em>(arriba) o [abajo]</em> con algo desconocido. De una página a otra tampoco es problema pues la comunicación va mediante los parámetros de la <em>url</em>.</p><p>Ya hemos usado esta comunicación anteriormente en el tema <a href=\"../paginas-y-rutas-angular-spa/\">2-spa</a> el componente <code>AuthorComponent</code> es capaz de recibir por parámetros una identificación de un autor. Esa información es el resultado de una acción del usuario en la pantalla <code>/about/authors</code> programada en el componente <code>AuthorsComponent</code>. Por tanto es una comunicación entre componentes, en la que ambos son <em>controladores hermanos</em>.</p><blockquote><p>Desde luego habrá que mejorar el acceso y control de los datos que por ahora es muy rudimentario. Lo haremos en próximos pasos. Primero mediante <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> y después usando <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a></p></blockquote><h2 id=\"2-2-Comunicacion-entre-estructuras-desacopladas\"><a href=\"#2-2-Comunicacion-entre-estructuras-desacopladas\" class=\"headerlink\" title=\"2.2 Comunicación entre estructuras desacopladas\"></a>2.2 Comunicación entre estructuras desacopladas</h2><p>Estando en la misma ruta, no siempre se podrán conocer los componentes, y por tanto no se podrán usar sus <code>[propiedades] y (eventos)</code></p><h3 id=\"2-2-1-El-layout-principal-y-los-componentes-por-ruta-paginas\"><a href=\"#2-2-1-El-layout-principal-y-los-componentes-por-ruta-paginas\" class=\"headerlink\" title=\"2.2.1 El layout principal y los componentes por ruta páginas.\"></a>2.2.1 El layout principal y los componentes por ruta páginas.</h3><p>Una situación habitual es <strong>comunicar la vista de negocio activa con elementos generales</strong> de la página. Por ejemplo podrías querer mostrar la velocidad máxima alcanzada en la barra del menú o un un mensaje emergente cada vez que se alcance la velocidad límite. En este caso, el <code>&lt;router-outlet&gt;</code> es una barrera que impide usar el patrón contenedor-presentador pues no se puede predecir el contenido dinámico que carga el <code>RouterOutlet</code>.</p><h3 id=\"2-2-2-Multiples-niveles-de-presentadores\"><a href=\"#2-2-2-Multiples-niveles-de-presentadores\" class=\"headerlink\" title=\"2.2.2 Múltiples niveles de presentadores.\"></a>2.2.2 Múltiples niveles de presentadores.</h3><p>Cuando las pantallas se hacen realmente complejas empiezan a surgir <strong>árboles de componentes</strong> de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. Enviar hacia abajo las <code>[propiedades]</code> es tedioso, pero peor aún es hacer burbujear los <code>(eventos)</code> por varias capas de presentadores.</p><p>La solución en ambos casos pasa por permitir que <em>algunos componentes presentadores tengan su propio control de datos</em>. Este tipo de comunicaciones técnicamente se resuelve mediante <em>Observables</em> y merece un capítulo especial que se verá más adelante en esta serie. Incluso en situaciones complejas habrá que optar por patrones avanzados de gestión de estado como pueda ser <em>Redux</em>.</p><p>Por ahora tienes una aplicación en <em>Angular</em> que comunica datos y cambios entre componentes de una misma página. Sigue el tutorial para añadirle <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> mientras aprendes a programar con Angular 8.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-4_flow.png\" alt=\"flujo-de-datos-entre-componentes-angular\"></p><p>Los desarrollos profesionales son complicados pero <strong>con Angular tenemos soluciones de comunicación simples para pantallas complejas</strong>. Mediante el desarrollo de componentes atómicos y reutilizables Angular 8 favorece la implementación de buenas prácticas.</p><p>Crear y comunicar muchos componentes puede llevarnos a código difícil de seguir. La librería <code>@angular/forms</code> ofrece <em>tuberías de comunicación</em> para <strong>mantener el flujo de datos bajo control</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a>. Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en componentes.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/4-flow/car\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/4-flow</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-Comunicacion-entre-componentes\"><a href=\"#1-Comunicacion-entre-componentes\" class=\"headerlink\" title=\"1. Comunicación entre componentes\"></a>1. Comunicación entre componentes</h1><p>Las aplicaciones web en las que destaca Angular suelen ser complejas y con mucha variedad funcional en diversas páginas. A menudo esas páginas están repletas de formularios, informes y botones. La solución viene de mano del viejo principio <em>divide y vencerás</em>: <strong>La componentización</strong></p><h2 id=\"1-1-Necesidad-de-comunicacion\"><a href=\"#1-1-Necesidad-de-comunicacion\" class=\"headerlink\" title=\"1.1. Necesidad de comunicación\"></a>1.1. Necesidad de comunicación</h2><p>El <em>framework</em> permite y recomienda repartir el trabajo en múltiples componentes de responsabilidad única. También es práctica común el crear páginas específicas para situaciones concretas aunque relacionadas. Por supuesto que estructuras como el menú de navegación o secciones de estado general necesitan conocer datos provenientes de las páginas. Nada está completamente asilado. Esto nos enfrenta la problema de <strong>comunicar componentes</strong>.</p><h2 id=\"1-2-Escenarios\"><a href=\"#1-2-Escenarios\" class=\"headerlink\" title=\"1.2. Escenarios\"></a>1.2. Escenarios</h2><p>Las situaciones que te encontrarás caerán en alguna de estas tres categorías para las que hay soluciones específicas.</p><h3 id=\"Comunicar-componentes-acoplados\"><a href=\"#Comunicar-componentes-acoplados\" class=\"headerlink\" title=\"Comunicar componentes acoplados\"></a>Comunicar componentes acoplados</h3><p>Solemos empezar creando un componente por página. Pero es normal que esa página se complique y la solución a la complejidad es la <strong>división en componentes y reparto de responsabilidades</strong>. Dado que están en una misma página existe cierto acoplamiento entre ellos y eso nos facilitará la comunicación.</p><h3 id=\"Comunicar-componentes-en-paginas-distintas\"><a href=\"#Comunicar-componentes-en-paginas-distintas\" class=\"headerlink\" title=\"Comunicar componentes en páginas distintas\"></a>Comunicar componentes en páginas distintas</h3><p>Cuando los componentes se carga en rutas distintas ya no hay forma de comunicarlos directamente. Pero lo resolveremos fácilmente <strong>usando las capacidades del router.</strong></p><h3 id=\"Comunicar-componentes-entre-estructuras-dinamicas\"><a href=\"#Comunicar-componentes-entre-estructuras-dinamicas\" class=\"headerlink\" title=\"Comunicar componentes entre estructuras dinámicas\"></a>Comunicar componentes entre estructuras dinámicas</h3><p>La situación más compleja se da cuando queremos comunicar componentes o servicios desacoplados pero sin cambio de página. En este caso hará falta un <strong>mediador observable</strong>.</p><h1 id=\"2-El-patron-Contendor-Presentadores\"><a href=\"#2-El-patron-Contendor-Presentadores\" class=\"headerlink\" title=\"2. El patrón Contendor / Presentadores\"></a>2. El patrón Contendor / Presentadores</h1><p>En <strong>arquitectura de software</strong> cuando encontramos una solución a un problema recurrente le ponemos un nombre y tratamos de utilizarlo siempre que podemos. Obviamente es una elección del programador y siempre tiene un coste que debe valorar. En este caso la ventaja es clara: <strong>reparto de responsabilidades</strong>.</p><h2 id=\"2-1-El-patron\"><a href=\"#2-1-El-patron\" class=\"headerlink\" title=\"2.1 El patrón\"></a>2.1 El patrón</h2><p>En este caso <strong>el patrón contenedor/presentadores</strong> estipula que haya un único componente responsable de obtener, mutar y guardar el estado. Será el componente contenedor. Los presentadores serán responsables de.. ejem, presentar la información y los elementos de interacción con el usuario. Las ventajas derivadas son: mayor facilidad para el <em>testeo</em> y mayores posibilidades de reutilización de presentadores.</p><blockquote><p>A este patrón a veces se le conoce como parent/children por la jerarquía html que genera.</p></blockquote><p>Veamos una implementación sencilla. Haremos una interfaz mínima para simular el manejo de un coche. Habrá pedales de aceleración y freno, y un cuadro dónde se refleje la velocidad. Para todo ello vamos a usa el <em>Angular CLI</em> y crear un módulo y sus componentes base.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m 4-flow/car</span><br><span class=\"line\">ng g c 4-flow/car/car</span><br><span class=\"line\">ng g c 4-flow/car/car/display</span><br><span class=\"line\">ng g c 4-flow/car/car/pedals</span><br></pre></td></tr></table></figure><p>Agregamos una ruta en el enrutador con su enlace en el menú.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">'car'</span>,</span><br><span class=\"line\">  loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./4-flow/car/car.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.CarModule)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"car\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> 4 - Car<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"2-2-El-contenedor\"><a href=\"#2-2-El-contenedor\" class=\"headerlink\" title=\"2.2 El contenedor\"></a>2.2 El contenedor</h2><p>En el componente contenedor tendremos <strong>una vista muy sencilla y un controlador más complejo</strong>. La vista será la composición de los componentes presentadores, pero el controlador tendrá que obtener datos, aplicarles lógica de negocio y guardarlos cuando corresponda.</p><blockquote><p>No es habitual asignarle un sufijo al nombre del componente para indicar que es el contenedor. Suele ser suficiente el verlo en la raíz de la jerarquía de carpetas.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-display</span> [<span class=\"attr\">model</span>]=<span class=\"string\">\"car.name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">currentSpeed</span>]=<span class=\"string\">\"car.currentSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">topSpeed</span>]=<span class=\"string\">\"car.maxSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">units</span>]=<span class=\"string\">\"'Km/h'\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-display</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-pedals</span> (<span class=\"attr\">brake</span>)=<span class=\"string\">\"onBrake($event)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">disableBrake</span>]=<span class=\"string\">\"disableBrake\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            (<span class=\"attr\">throttle</span>)=<span class=\"string\">\"onThrottle($event)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">disableThrottle</span>]=<span class=\"string\">\"disableThrottle\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-pedals</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vemos que usa los componentes presentadores <code>Display</code> y <code>Pedals</code> enviándoles información y suscribiéndose a sus eventos. Concretaremos esta funcionalidad más adelante.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> car: CarModel;</span><br><span class=\"line\"><span class=\"keyword\">public</span> disableBrake: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> disableThrottle: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.car = &#123; name: <span class=\"string\">'Roadster'</span>, maxSpeed: <span class=\"number\">120</span>, currentSpeed: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkLimits();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> checkLimits() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.disableBrake = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.disableThrottle = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.car.currentSpeed &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.car.currentSpeed = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.disableBrake = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.car.currentSpeed &gt;= <span class=\"keyword\">this</span>.car.maxSpeed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.car.currentSpeed = <span class=\"keyword\">this</span>.car.maxSpeed;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.disableThrottle = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> onBrake(drive: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.car.currentSpeed -= <span class=\"keyword\">this</span>.getDelta(drive);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkLimits();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> onThrottle(drive: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.car.currentSpeed += <span class=\"keyword\">this</span>.getDelta(drive);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkLimits();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> getDelta = <span class=\"function\">(<span class=\"params\">drive: <span class=\"built_in\">number</span></span>) =&gt;</span></span><br><span class=\"line\">  drive + (<span class=\"keyword\">this</span>.car.maxSpeed - <span class=\"keyword\">this</span>.car.currentSpeed) / <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure><p>Lo dicho, <em>la clase controladora del componente contenedor retiene el grueso de la funcionalidad</em>. En este caso inicializar una instancia de un coche y mantener sus velocidad en los límites lógicos respondiendo a las acciones del usuario conductor.</p><h2 id=\"2-3-Envio-hacia-el-presentador-con-Input\"><a href=\"#2-3-Envio-hacia-el-presentador-con-Input\" class=\"headerlink\" title=\"2.3 Envío hacia el presentador con @Input()\"></a>2.3 Envío hacia el presentador con @Input()</h2><p>Esta comunicación <em>hacia abajo</em> envía la información <strong>desde el contenedor hacia el presentador</strong>. Es similar a como una plantilla recibe la información desde el controlador.</p><h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input()\"></a>@Input()</h3><p>Para que una vista muestre datos tiene que usar directivas como <code></code> asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede <strong>recibirlo desde el exterior</strong>. La novedad es hacer que lo reciba vía <em>html</em>.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> &#123;&#123; model &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> Top speed: &#123;&#123; topSpeed | number:'1.0-0' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"section\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; currentSpeed | number:'1.2-2' &#125;&#125; &#123;&#123; units &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">progress</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"currentSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"getSpeedClass()\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">max</span>]=<span class=\"string\">\"topSpeed\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">progress</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Empieza por decorar con <code>@Input()</code> la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo <code>display.component.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> DisplayComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> model: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> currentSpeed: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> topSpeed: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> units: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> getSpeedClass = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.currentSpeed &lt; <span class=\"keyword\">this</span>.getThreshold() ? <span class=\"string\">'primary'</span> : <span class=\"string\">'secondary'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> getThreshold = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.topSpeed * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ahora puedes enviarle datos a este componente desde el <em>html</em> de su consumidor. Por ejemplo desde <code>car.component.html</code> le puedo enviar una variable o cualquier expresión evaluable. Recordemos como usa <code>[propiedad]=&quot;expresion&quot;</code> en el elemento presentador.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-display</span> [<span class=\"attr\">model</span>]=<span class=\"string\">\"car.name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">currentSpeed</span>]=<span class=\"string\">\"car.currentSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">topSpeed</span>]=<span class=\"string\">\"car.maxSpeed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [<span class=\"attr\">units</span>]=<span class=\"string\">\"'Km/h'\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-display</span>&gt;</span></span><br></pre></td></tr></table></figure><p>En la clase controladora del presentador quedan responsabilidades reducidas a temas específicos como determinar las clases <em>css</em> apropiadas o transformar los datos para su presentación.</p><p>Estoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. Este mismo patrón puede y debe repetirse hasta <strong>descomponer las vistas en estructuras simples</strong> que nos eviten repeticiones absurdas en código.</p><p>De esta forma es fácil crear componentes reutilizables; y queda muy limpio el <strong>envío de datos hacia abajo</strong>. Pero, ¿y hacia arriba?.</p><h2 id=\"2-4-Respuesta-del-presentador-con-Output\"><a href=\"#2-4-Respuesta-del-presentador-con-Output\" class=\"headerlink\" title=\"2.4. Respuesta del presentador con @Output()\"></a>2.4. Respuesta del presentador con @Output()</h2><p>Los componentes de nivel inferior no sólo se dedican a presentar datos, también presentan controles. Con ellos el usuario podrá crear, modificar o eliminar los datos que quiera. Aunque no directamente; para hacerlo <strong>comunican el cambio requerido al contenedor de nivel superior</strong>.</p><h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output()\"></a>@Output()</h3><p>Por ejemplo, el componente <code>PedalsComponent</code> permite acelerar y frenar. Bueno, realmente permite que el usuario diga que lo quiere hacer; los cambios se harán más arriba. Veamos lo básico del <code>pedals.component.html</code> antes de nada:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> Pedals: <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"brake\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"secondary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"disableBrake\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    (<span class=\"attr\">click</span>)=<span class=\"string\">\"brake.emit(1)\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"throttle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"tertiary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"disableThrottle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    (<span class=\"attr\">click</span>)=<span class=\"string\">\"throttle.emit(1)\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Claramente son un par de botones que con el evento <code>(click)</code> responden a acciones del usuario. En este caso se manifiesta una intención de acelerar o frenar el coche. Pero el método del controlador no actúa directamente sobre los datos.</p><blockquote><p>Si lo hiciera sería más difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación que se verán más adelante…</p></blockquote><p>En su lugar, lo que hace es <strong>emitir un evento</strong> confiando que alguien lo reciba y actúe en consecuencia. Por ejemplo la emisión de la instrucción de frenado se realiza mediante la propiedad <code>brake</code> decorada con <code>@Output() public brake new EventEmitter&lt;number&gt;();</code>. Dicha propiedad será una instancia de un emisor de eventos que mediante el método <code>.next()</code> que emite la señal hacia arriba.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PedalsComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> disableBrake: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() <span class=\"keyword\">public</span> disableThrottle: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() <span class=\"keyword\">public</span> brake = <span class=\"keyword\">new</span> EventEmitter&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"meta\">@Output</span>() <span class=\"keyword\">public</span> throttle = <span class=\"keyword\">new</span> EventEmitter&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Mientras tanto, <strong>en el contenedor la vista se subscribe al evento</strong> <code>(brake)</code> como si este fuese un evento nativo y llama a los métodos que manipulan los datos de verdad.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-pedals</span> (<span class=\"attr\">brake</span>)=<span class=\"string\">\"onBrake($event)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">disableBrake</span>]=<span class=\"string\">\"disableBrake\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            (<span class=\"attr\">throttle</span>)=<span class=\"string\">\"onThrottle($event)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            [<span class=\"attr\">disableThrottle</span>]=<span class=\"string\">\"disableThrottle\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-pedals</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Las propiedades <em>output</em> también pueden enviar argumentos que serán recibidos mediante el identificador <code>$event</code> propio del framework. Se declaran especificando el tipo del argumento en el genérico del constructor de <code>EventEmitter&lt;any&gt;</code>.</p><p>En el controlador ya podemos operar con los datos. El método <code>onBrake(drive: number)</code> accede y modifica el valor de la velocidad y lo notifica automáticamente hacia abajo.</p><p>De esta manera se cierra el círculo. Los componentes de bajo nivel pueden <strong>recibir datos para ser presentados o emitir eventos para modificarlos</strong>. El componente de nivel superior es el <strong>único responsable de obtener y actuar</strong> sobre los datos.</p><h1 id=\"3-Comunicaciones-entre-paginas-o-estructuras\"><a href=\"#3-Comunicaciones-entre-paginas-o-estructuras\" class=\"headerlink\" title=\"3. Comunicaciones entre páginas o estructuras\"></a>3. Comunicaciones entre páginas o estructuras</h1><h2 id=\"3-1-Comunicacion-entre-distintas-paginas\"><a href=\"#3-1-Comunicacion-entre-distintas-paginas\" class=\"headerlink\" title=\"3.1 Comunicación entre distintas páginas\"></a>3.1 Comunicación entre distintas páginas</h2><p>En las aplicaciones hay <strong>comunicaciones de estado más allá de la página actual</strong>. La comunicación entre páginas es responsabilidad del <code>@angular/router</code>. Una vez activada una ruta, el sistema carga un componente en el <code>&lt;router-outlet&gt;</code> correspondiente. No hay forma de comunicarse hacia <em>(arriba) o [abajo]</em> con algo desconocido. De una página a otra tampoco es problema pues la comunicación va mediante los parámetros de la <em>url</em>.</p><p>Ya hemos usado esta comunicación anteriormente en el tema <a href=\"../paginas-y-rutas-angular-spa/\">2-spa</a> el componente <code>AuthorComponent</code> es capaz de recibir por parámetros una identificación de un autor. Esa información es el resultado de una acción del usuario en la pantalla <code>/about/authors</code> programada en el componente <code>AuthorsComponent</code>. Por tanto es una comunicación entre componentes, en la que ambos son <em>controladores hermanos</em>.</p><blockquote><p>Desde luego habrá que mejorar el acceso y control de los datos que por ahora es muy rudimentario. Lo haremos en próximos pasos. Primero mediante <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> y después usando <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a></p></blockquote><h2 id=\"2-2-Comunicacion-entre-estructuras-desacopladas\"><a href=\"#2-2-Comunicacion-entre-estructuras-desacopladas\" class=\"headerlink\" title=\"2.2 Comunicación entre estructuras desacopladas\"></a>2.2 Comunicación entre estructuras desacopladas</h2><p>Estando en la misma ruta, no siempre se podrán conocer los componentes, y por tanto no se podrán usar sus <code>[propiedades] y (eventos)</code></p><h3 id=\"2-2-1-El-layout-principal-y-los-componentes-por-ruta-paginas\"><a href=\"#2-2-1-El-layout-principal-y-los-componentes-por-ruta-paginas\" class=\"headerlink\" title=\"2.2.1 El layout principal y los componentes por ruta páginas.\"></a>2.2.1 El layout principal y los componentes por ruta páginas.</h3><p>Una situación habitual es <strong>comunicar la vista de negocio activa con elementos generales</strong> de la página. Por ejemplo podrías querer mostrar la velocidad máxima alcanzada en la barra del menú o un un mensaje emergente cada vez que se alcance la velocidad límite. En este caso, el <code>&lt;router-outlet&gt;</code> es una barrera que impide usar el patrón contenedor-presentador pues no se puede predecir el contenido dinámico que carga el <code>RouterOutlet</code>.</p><h3 id=\"2-2-2-Multiples-niveles-de-presentadores\"><a href=\"#2-2-2-Multiples-niveles-de-presentadores\" class=\"headerlink\" title=\"2.2.2 Múltiples niveles de presentadores.\"></a>2.2.2 Múltiples niveles de presentadores.</h3><p>Cuando las pantallas se hacen realmente complejas empiezan a surgir <strong>árboles de componentes</strong> de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico. Enviar hacia abajo las <code>[propiedades]</code> es tedioso, pero peor aún es hacer burbujear los <code>(eventos)</code> por varias capas de presentadores.</p><p>La solución en ambos casos pasa por permitir que <em>algunos componentes presentadores tengan su propio control de datos</em>. Este tipo de comunicaciones técnicamente se resuelve mediante <em>Observables</em> y merece un capítulo especial que se verá más adelante en esta serie. Incluso en situaciones complejas habrá que optar por patrones avanzados de gestión de estado como pueda ser <em>Redux</em>.</p><p>Por ahora tienes una aplicación en <em>Angular</em> que comunica datos y cambios entre componentes de una misma página. Sigue el tutorial para añadirle <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a> mientras aprendes a programar con Angular 8.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Servicios inyectables en Angular","date":"2019-02-15T08:54:58.000Z","thumbnail":"/css/images/angular-5_inject.png","_content":"\n![servicios-inyectables-en-Angular](/images/tutorial-angular-5_inject.png)\n\nLa presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. **La lógica y los datos tienen su lugar en servicios compartidos**.\n\nPara que los componentes consuman los servicios de forma controlada tenemos proveedores _inyectables_ en la librería `@angular/core` con los que realizar **la inyección de dependencias**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/). Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/5-inject](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/5-inject/converter)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n# 1. Inyección de dependencias\n\nComo casi todo en Angular, **los servicios son clases TypeScript**. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.\n\nEste sistema se basa en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona la **[Dependency Injection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias) en Angular**.\n\nComo demostración vamos a trabajar con un par de utilidades para conversión de unidades. Crearé un módulo y un componente en el que visualizarlo.\n\n```shell\nng g m 5-inject/converter --routing true\nng g c 5-inject/converter/converter\n```\n\n## 1.1 Generación de servicios\n\nLa particularidad de las clases de servicios está en su decorador: `@Injectable()`. Esta función viene en el `@angular/core` e **indica que esta clase puede ser inyectada** dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios. Estos son ejemplos de instrucciones para crear un _service_.\n\n```shell\nng g s 5-inject/converter/calculator\n```\n\nEl resultado es el fichero `calculator.service.ts` con su decorador que toma una _class_ normal y produce algo _injectable_. Veamos una implementación mínima:\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CalculatorService {\n  constructor() {}\n\n  public fromKilometersToMiles = kilometers => kilometers * 0.62137;\n}\n```\n\nAhora tienes centralizado en este servicio la lógica de datos que tenemos hasta el momento. Los demás componentes la podrán utilizar.\n\n## 1.2 Consumo de dependencias\n\nDeclarar y decorar la clase no es suficiente para poder reclamarla. Necesitas **registrarla como un proveedor en algún módulo**. Desde Angular 6 los servicios se auto-proveen en el módulo raíz mediante la configuración `providedIn: 'root'` de su decorador.\n\n> Esto es útil y cómodo en una gran cantidad de casos. El módulo raíz es visible para toda la aplicación de forma que cualquier componente puede reclamar un servicio suyo sin problema. Excepto que el problema sea el tamaño. El módulo raíz se carga al arrancar y todas sus referencias van el _bundle_ principal. Si queremos repartir el peso debemos llevar ciertos servicios al módulo funcional que los necesite.\n\nVamos a consumir este servicio en el `converter.component.ts`. Al consumo de los servicios inyectables se le conoce como _dependencia_. Cada componente o servicio puede **declarar en su constructor sus dependencias** hacia servicios inyectables. El convenio exige que se especifique el tipo esperado\n\n```typescript\nexport class ConverterComponent implements OnInit {\n  public kilometers = 0;\n  public miles: number;\n\n  constructor(private calculatorService: CalculatorService) {}\n\n  public ngOnInit() {\n    this.convert();\n  }\n\n  public convert() {\n    this.miles = this.calculatorService.fromKilometersToMiles(this.kilometers);\n  }\n}\n```\n\n> Agregar el modificador de alcance `private` o `public` en la declaración de argumentos hace que _TypeScript_ genere una propiedad inicializada con el valor recibido. Es azúcar sintáctico para no tener que declarar la propiedad y asignarle el valor del argumento manualmente. En resumen, los [constructores en TypeScrip](https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords/) admiten argumentos que transforman en propiedades. Mantenemos privado el `converterService` para evitar su uso desde la vista.\n\n```html\n<h2>Distance Converter.</h2>\n<h3>From Europe to USA</h3>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"kilometers\">Kilometers</label>\n      <input name=\"kilometers\" type=\"number\" [(ngModel)]=\"kilometers\" placeholder=\"0\" />\n    </section>\n  </fieldset>\n  <input value=\"Convert\" type=\"button\" (click)=\"convert()\" />\n</form>\n<section>\n  <h4>{{ miles | number:'1.2-2' }} miles</h4>\n</section>\n```\n\n# 2. Inversión del control\n\nUn concepto íntimamente relacionado con la inyección de dependencias es el de [**Inversion of Control**](https://en.wikipedia.org/wiki/Inversion_of_control). El componente dependiente expresa sus necesidades, pero es el _framework_ el que en última instancia decide lo que recibirá. Vemos entonces que **el invocado cede el control al invocador**.\n\nCuando proveemos un servicio en Angular, el comportamiento por defecto es el de proveer un _singleton_ pero hay más opciones. Si se usa el objeto `provider` con `useClass` , `useValue` y `useFactory` podemos controlar el proceso de inyección.\n\nSe crea un [_singleton_](https://es.wikipedia.org/wiki/Singleton) por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Si va a ser compartido gana la opción de auto proveerlo en el raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.\n\nEn un módulo cualquiera, siempre podríamos agregar un servicio a su array de _providers_.\n\n```typescript\n@NgModule({\n  declarations: [...],\n  imports: [...],\n  providers: [ CalculatorService ]\n})\n```\n\nPero siempre será **una instancia única por módulo**. Si un _singleton_ no es lo adecuado, entonces puedes proveer el mismo servicio en distintos módulos. De esa forma se creará una instancia distinta para cada uno. Si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.\n\n> Incluso es posible usar el array `providers:[]` en la decoración de un componente o de otro servicio. Haciendo así aún más granular la elección de instancia.\n\nVeamos un ejemplo extendiendo el problema del conversor de unidades de forma que se pueda escoger una **estrategia** de conversión en base a una cultura concreta. Para empezar necesitamos una interfaz, un servicio base que la implemente y un componente que lo consuma.\n\n```shell\nng g interface 5-inject/converter/i-culture-converter\nng g service 5-inject/converter/culture-converter\nng g component 5-inject/converter/culture-converter\n```\n\n```typeScript\nexport interface ICultureConverter {\n  sourceCulture: string;\n  targetCulture: string;\n  convertDistance: (source: number) => number;\n  convertTemperature: (source: number) => number;\n}\n```\n\n```typescript\nexport abstract class CultureConverterService implements ICultureConverter {\n  sourceCulture: string;\n  targetCulture: string;\n  convertDistance: (source: number) => number;\n  convertTemperature: (source: number) => number;\n\n  constructor() {}\n}\n```\n\n```typeScript\nexport class CultureConverterComponent implements OnInit {\n  public source: string;\n  public target: string;\n  public sourceUnits = 0;\n  public targetUnits: number;\n\n  constructor(private cultureConverterService:CultureConverterService){ }\n\n  public ngOnInit() {\n    this.source = this.cultureConverterService.sourceCulture;\n    this.target = this.cultureConverterService.targetCulture;\n    this.convert();\n  }\n  public convert() {\n    this.targetUnits = this.cultureConverterService.convertDistance(this.sourceUnits);\n  }\n}\n```\n\n```html\n<h2>Culture Converter.</h2>\n<h3>From {{ source }} to {{ target }}</h3>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"sourceUnits\">Distance</label>\n      <input name=\"sourceUnits\" type=\"number\" [(ngModel)]=\"sourceUnits\" placeholder=\"0\" />\n    </section>\n  </fieldset>\n  <input value=\"Convert\" type=\"button\" (click)=\"convert()\" />\n</form>\n<section>\n  <h4>Distance {{ targetUnits | number:'1.2-2' }}</h4>\n</section>\n```\n\n## 2.2 Implementaciones\n\nEl `CultureConverterComponent` depende de `CultureConverterService` el cual implementa de forma abstracta la interfaz `CultureConverter`. Pero eso no es para nada funcional. Vamos a crear dos implementaciones específicas para Europa y USA. Estas clases concretas se apoyarán en el anteriormente creado `CalculatorService` que necesita algo más de código.\n\n```typescript\nexport class CalculatorService {\n  constructor() {}\n\n  public fromKilometersToMiles = kilometers => kilometers * 0.62137;\n  public fromMilesToKilometers = miles => miles * 1.609;\n  public fromCelsiusToFarenheit = celsius => celsius * (9 / 5) + 32;\n  public fromFarenheitToCelsius = farenheit => (farenheit - 32) * (5 / 9);\n}\n```\n\nY aquí están las dos servicios concretos.\n\n```typescript\n@Injectable()\nexport class EuropeConverterService implements ICultureConverter {\n  sourceCulture = 'USA';\n  targetCulture = 'Europe';\n\n  constructor(private converterService: CalculatorService) {}\n\n  public convertDistance = this.converterService.fromMilesToKilometers;\n  public convertTemperature = this.converterService.fromFahrenheitToCelsius;\n}\n```\n\n```typescript\n@Injectable()\nexport class UsaConverterService implements ICultureConverter {\n  sourceCulture = 'Europe';\n  targetCulture = 'USA';\n\n  constructor(private converterService: CalculatorService) {}\n\n  public convertDistance = this.converterService.fromKilometersToMiles;\n  public convertTemperature = this.converterService.fromCelsiusToFahrenheit;\n}\n```\n\n## 2.3 Provisión manual\n\nPor ejemplo si queremos utilizar la implementación concreta de USA lo indicamos en el módulo que lo consuma.\n\n```typescript\n{\n  providers: [\n    {\n      provide: CultureConverterService,\n      useClass: UsaConverterService,\n    },\n  ];\n}\n```\n\nEl componente reclama una instancia de `CultureConverterService` y le damos otra con la misma interfaz. De esta forma podríamos tener módulos distintos, cada uno con su propia estrategia de conversión.\n\n## 2.4 Factoría\n\nUna situación muy común es poder elegir dinámicamente la implementación concreta. Para ello necesitamos una función factoría que con alguna lógica escoja la estrategia concreta.\n\n```typescript\nconst cultureFactory = (converterService: ConverterService) => {\n  if (environment.unitsCulture === 'metric') {\n    return new EuropeConverterService(converterService);\n  } else {\n    return new UsaConverterService(converterService);\n  }\n};\n{\n  providers: [\n    {\n      provide: CultureConverterService,\n      useFactory: cultureFactory,\n      deps: [CalculatorService],\n    },\n  ];\n}\n```\n\nDe esta forma la aplicación se comportará distinto en función de una variable de entorno.\n\nYa tenemos la aplicación mucho mejor estructurada, pero el almacén de datos es mejorable. Se mantienen los datos _hard-coded_, muy incómodo para actualizar; y en memoria, poco fiable y volátil. Lo más habitual es guardar y recuperar la información en un servidor _http_. Sigue esta serie para añadir [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/) mientras aprendes a programar con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-5-Servicios-inyectables-en-Angular.md","raw":"---\ntitle: Servicios inyectables en Angular\npermalink: servicios-inyectables-en-Angular\ndate: 2019-02-15 9:54:58\ntags:\n  - Angular\n  - Servicios\n  - DI\n  - Tutorial\n  - Introducción\n  - Angular8\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-5_inject.png\n---\n\n![servicios-inyectables-en-Angular](/images/tutorial-angular-5_inject.png)\n\nLa presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. **La lógica y los datos tienen su lugar en servicios compartidos**.\n\nPara que los componentes consuman los servicios de forma controlada tenemos proveedores _inyectables_ en la librería `@angular/core` con los que realizar **la inyección de dependencias**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Flujo de datos entre componentes Angular](../flujo-de-datos-entre-componentes-angular/). Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/5-inject](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/5-inject/converter)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n# 1. Inyección de dependencias\n\nComo casi todo en Angular, **los servicios son clases TypeScript**. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.\n\nEste sistema se basa en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona la **[Dependency Injection](https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias) en Angular**.\n\nComo demostración vamos a trabajar con un par de utilidades para conversión de unidades. Crearé un módulo y un componente en el que visualizarlo.\n\n```shell\nng g m 5-inject/converter --routing true\nng g c 5-inject/converter/converter\n```\n\n## 1.1 Generación de servicios\n\nLa particularidad de las clases de servicios está en su decorador: `@Injectable()`. Esta función viene en el `@angular/core` e **indica que esta clase puede ser inyectada** dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios. Estos son ejemplos de instrucciones para crear un _service_.\n\n```shell\nng g s 5-inject/converter/calculator\n```\n\nEl resultado es el fichero `calculator.service.ts` con su decorador que toma una _class_ normal y produce algo _injectable_. Veamos una implementación mínima:\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CalculatorService {\n  constructor() {}\n\n  public fromKilometersToMiles = kilometers => kilometers * 0.62137;\n}\n```\n\nAhora tienes centralizado en este servicio la lógica de datos que tenemos hasta el momento. Los demás componentes la podrán utilizar.\n\n## 1.2 Consumo de dependencias\n\nDeclarar y decorar la clase no es suficiente para poder reclamarla. Necesitas **registrarla como un proveedor en algún módulo**. Desde Angular 6 los servicios se auto-proveen en el módulo raíz mediante la configuración `providedIn: 'root'` de su decorador.\n\n> Esto es útil y cómodo en una gran cantidad de casos. El módulo raíz es visible para toda la aplicación de forma que cualquier componente puede reclamar un servicio suyo sin problema. Excepto que el problema sea el tamaño. El módulo raíz se carga al arrancar y todas sus referencias van el _bundle_ principal. Si queremos repartir el peso debemos llevar ciertos servicios al módulo funcional que los necesite.\n\nVamos a consumir este servicio en el `converter.component.ts`. Al consumo de los servicios inyectables se le conoce como _dependencia_. Cada componente o servicio puede **declarar en su constructor sus dependencias** hacia servicios inyectables. El convenio exige que se especifique el tipo esperado\n\n```typescript\nexport class ConverterComponent implements OnInit {\n  public kilometers = 0;\n  public miles: number;\n\n  constructor(private calculatorService: CalculatorService) {}\n\n  public ngOnInit() {\n    this.convert();\n  }\n\n  public convert() {\n    this.miles = this.calculatorService.fromKilometersToMiles(this.kilometers);\n  }\n}\n```\n\n> Agregar el modificador de alcance `private` o `public` en la declaración de argumentos hace que _TypeScript_ genere una propiedad inicializada con el valor recibido. Es azúcar sintáctico para no tener que declarar la propiedad y asignarle el valor del argumento manualmente. En resumen, los [constructores en TypeScrip](https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords/) admiten argumentos que transforman en propiedades. Mantenemos privado el `converterService` para evitar su uso desde la vista.\n\n```html\n<h2>Distance Converter.</h2>\n<h3>From Europe to USA</h3>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"kilometers\">Kilometers</label>\n      <input name=\"kilometers\" type=\"number\" [(ngModel)]=\"kilometers\" placeholder=\"0\" />\n    </section>\n  </fieldset>\n  <input value=\"Convert\" type=\"button\" (click)=\"convert()\" />\n</form>\n<section>\n  <h4>{{ miles | number:'1.2-2' }} miles</h4>\n</section>\n```\n\n# 2. Inversión del control\n\nUn concepto íntimamente relacionado con la inyección de dependencias es el de [**Inversion of Control**](https://en.wikipedia.org/wiki/Inversion_of_control). El componente dependiente expresa sus necesidades, pero es el _framework_ el que en última instancia decide lo que recibirá. Vemos entonces que **el invocado cede el control al invocador**.\n\nCuando proveemos un servicio en Angular, el comportamiento por defecto es el de proveer un _singleton_ pero hay más opciones. Si se usa el objeto `provider` con `useClass` , `useValue` y `useFactory` podemos controlar el proceso de inyección.\n\nSe crea un [_singleton_](https://es.wikipedia.org/wiki/Singleton) por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Si va a ser compartido gana la opción de auto proveerlo en el raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.\n\nEn un módulo cualquiera, siempre podríamos agregar un servicio a su array de _providers_.\n\n```typescript\n@NgModule({\n  declarations: [...],\n  imports: [...],\n  providers: [ CalculatorService ]\n})\n```\n\nPero siempre será **una instancia única por módulo**. Si un _singleton_ no es lo adecuado, entonces puedes proveer el mismo servicio en distintos módulos. De esa forma se creará una instancia distinta para cada uno. Si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.\n\n> Incluso es posible usar el array `providers:[]` en la decoración de un componente o de otro servicio. Haciendo así aún más granular la elección de instancia.\n\nVeamos un ejemplo extendiendo el problema del conversor de unidades de forma que se pueda escoger una **estrategia** de conversión en base a una cultura concreta. Para empezar necesitamos una interfaz, un servicio base que la implemente y un componente que lo consuma.\n\n```shell\nng g interface 5-inject/converter/i-culture-converter\nng g service 5-inject/converter/culture-converter\nng g component 5-inject/converter/culture-converter\n```\n\n```typeScript\nexport interface ICultureConverter {\n  sourceCulture: string;\n  targetCulture: string;\n  convertDistance: (source: number) => number;\n  convertTemperature: (source: number) => number;\n}\n```\n\n```typescript\nexport abstract class CultureConverterService implements ICultureConverter {\n  sourceCulture: string;\n  targetCulture: string;\n  convertDistance: (source: number) => number;\n  convertTemperature: (source: number) => number;\n\n  constructor() {}\n}\n```\n\n```typeScript\nexport class CultureConverterComponent implements OnInit {\n  public source: string;\n  public target: string;\n  public sourceUnits = 0;\n  public targetUnits: number;\n\n  constructor(private cultureConverterService:CultureConverterService){ }\n\n  public ngOnInit() {\n    this.source = this.cultureConverterService.sourceCulture;\n    this.target = this.cultureConverterService.targetCulture;\n    this.convert();\n  }\n  public convert() {\n    this.targetUnits = this.cultureConverterService.convertDistance(this.sourceUnits);\n  }\n}\n```\n\n```html\n<h2>Culture Converter.</h2>\n<h3>From {{ source }} to {{ target }}</h3>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"sourceUnits\">Distance</label>\n      <input name=\"sourceUnits\" type=\"number\" [(ngModel)]=\"sourceUnits\" placeholder=\"0\" />\n    </section>\n  </fieldset>\n  <input value=\"Convert\" type=\"button\" (click)=\"convert()\" />\n</form>\n<section>\n  <h4>Distance {{ targetUnits | number:'1.2-2' }}</h4>\n</section>\n```\n\n## 2.2 Implementaciones\n\nEl `CultureConverterComponent` depende de `CultureConverterService` el cual implementa de forma abstracta la interfaz `CultureConverter`. Pero eso no es para nada funcional. Vamos a crear dos implementaciones específicas para Europa y USA. Estas clases concretas se apoyarán en el anteriormente creado `CalculatorService` que necesita algo más de código.\n\n```typescript\nexport class CalculatorService {\n  constructor() {}\n\n  public fromKilometersToMiles = kilometers => kilometers * 0.62137;\n  public fromMilesToKilometers = miles => miles * 1.609;\n  public fromCelsiusToFarenheit = celsius => celsius * (9 / 5) + 32;\n  public fromFarenheitToCelsius = farenheit => (farenheit - 32) * (5 / 9);\n}\n```\n\nY aquí están las dos servicios concretos.\n\n```typescript\n@Injectable()\nexport class EuropeConverterService implements ICultureConverter {\n  sourceCulture = 'USA';\n  targetCulture = 'Europe';\n\n  constructor(private converterService: CalculatorService) {}\n\n  public convertDistance = this.converterService.fromMilesToKilometers;\n  public convertTemperature = this.converterService.fromFahrenheitToCelsius;\n}\n```\n\n```typescript\n@Injectable()\nexport class UsaConverterService implements ICultureConverter {\n  sourceCulture = 'Europe';\n  targetCulture = 'USA';\n\n  constructor(private converterService: CalculatorService) {}\n\n  public convertDistance = this.converterService.fromKilometersToMiles;\n  public convertTemperature = this.converterService.fromCelsiusToFahrenheit;\n}\n```\n\n## 2.3 Provisión manual\n\nPor ejemplo si queremos utilizar la implementación concreta de USA lo indicamos en el módulo que lo consuma.\n\n```typescript\n{\n  providers: [\n    {\n      provide: CultureConverterService,\n      useClass: UsaConverterService,\n    },\n  ];\n}\n```\n\nEl componente reclama una instancia de `CultureConverterService` y le damos otra con la misma interfaz. De esta forma podríamos tener módulos distintos, cada uno con su propia estrategia de conversión.\n\n## 2.4 Factoría\n\nUna situación muy común es poder elegir dinámicamente la implementación concreta. Para ello necesitamos una función factoría que con alguna lógica escoja la estrategia concreta.\n\n```typescript\nconst cultureFactory = (converterService: ConverterService) => {\n  if (environment.unitsCulture === 'metric') {\n    return new EuropeConverterService(converterService);\n  } else {\n    return new UsaConverterService(converterService);\n  }\n};\n{\n  providers: [\n    {\n      provide: CultureConverterService,\n      useFactory: cultureFactory,\n      deps: [CalculatorService],\n    },\n  ];\n}\n```\n\nDe esta forma la aplicación se comportará distinto en función de una variable de entorno.\n\nYa tenemos la aplicación mucho mejor estructurada, pero el almacén de datos es mejorable. Se mantienen los datos _hard-coded_, muy incómodo para actualizar; y en memoria, poco fiable y volátil. Lo más habitual es guardar y recuperar la información en un servidor _http_. Sigue esta serie para añadir [Comunicaciones HTTP en Angular](../comunicaciones-http-en-Angular/) mientras aprendes a programar con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"servicios-inyectables-en-Angular","published":1,"updated":"2019-08-05T11:16:26.274Z","_id":"cjyh5p4ay000g18s30vjgu4b3","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-5_inject.png\" alt=\"servicios-inyectables-en-Angular\"></p><p>La presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. <strong>La lógica y los datos tienen su lugar en servicios compartidos</strong>.</p><p>Para que los componentes consuman los servicios de forma controlada tenemos proveedores <em>inyectables</em> en la librería <code>@angular/core</code> con los que realizar <strong>la inyección de dependencias</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a>. Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/5-inject/converter\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/5-inject</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-Inyeccion-de-dependencias\"><a href=\"#1-Inyeccion-de-dependencias\" class=\"headerlink\" title=\"1. Inyección de dependencias\"></a>1. Inyección de dependencias</h1><p>Como casi todo en Angular, <strong>los servicios son clases TypeScript</strong>. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.</p><p>Este sistema se basa en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona la <strong><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\" target=\"_blank\" rel=\"noopener\">Dependency Injection</a> en Angular</strong>.</p><p>Como demostración vamos a trabajar con un par de utilidades para conversión de unidades. Crearé un módulo y un componente en el que visualizarlo.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m 5-inject/converter --routing true</span><br><span class=\"line\">ng g c 5-inject/converter/converter</span><br></pre></td></tr></table></figure><h2 id=\"1-1-Generacion-de-servicios\"><a href=\"#1-1-Generacion-de-servicios\" class=\"headerlink\" title=\"1.1 Generación de servicios\"></a>1.1 Generación de servicios</h2><p>La particularidad de las clases de servicios está en su decorador: <code>@Injectable()</code>. Esta función viene en el <code>@angular/core</code> e <strong>indica que esta clase puede ser inyectada</strong> dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios. Estos son ejemplos de instrucciones para crear un <em>service</em>.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s 5-inject/converter/calculator</span><br></pre></td></tr></table></figure><p>El resultado es el fichero <code>calculator.service.ts</code> con su decorador que toma una <em>class</em> normal y produce algo <em>injectable</em>. Veamos una implementación mínima:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CalculatorService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromKilometersToMiles = <span class=\"function\"><span class=\"params\">kilometers</span> =&gt;</span> kilometers * <span class=\"number\">0.62137</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ahora tienes centralizado en este servicio la lógica de datos que tenemos hasta el momento. Los demás componentes la podrán utilizar.</p><h2 id=\"1-2-Consumo-de-dependencias\"><a href=\"#1-2-Consumo-de-dependencias\" class=\"headerlink\" title=\"1.2 Consumo de dependencias\"></a>1.2 Consumo de dependencias</h2><p>Declarar y decorar la clase no es suficiente para poder reclamarla. Necesitas <strong>registrarla como un proveedor en algún módulo</strong>. Desde Angular 6 los servicios se auto-proveen en el módulo raíz mediante la configuración <code>providedIn: &#39;root&#39;</code> de su decorador.</p><blockquote><p>Esto es útil y cómodo en una gran cantidad de casos. El módulo raíz es visible para toda la aplicación de forma que cualquier componente puede reclamar un servicio suyo sin problema. Excepto que el problema sea el tamaño. El módulo raíz se carga al arrancar y todas sus referencias van el <em>bundle</em> principal. Si queremos repartir el peso debemos llevar ciertos servicios al módulo funcional que los necesite.</p></blockquote><p>Vamos a consumir este servicio en el <code>converter.component.ts</code>. Al consumo de los servicios inyectables se le conoce como <em>dependencia</em>. Cada componente o servicio puede <strong>declarar en su constructor sus dependencias</strong> hacia servicios inyectables. El convenio exige que se especifique el tipo esperado</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConverterComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> kilometers = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> miles: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> calculatorService: CalculatorService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.convert();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> convert() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.miles = <span class=\"keyword\">this</span>.calculatorService.fromKilometersToMiles(<span class=\"keyword\">this</span>.kilometers);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Agregar el modificador de alcance <code>private</code> o <code>public</code> en la declaración de argumentos hace que <em>TypeScript</em> genere una propiedad inicializada con el valor recibido. Es azúcar sintáctico para no tener que declarar la propiedad y asignarle el valor del argumento manualmente. En resumen, los <a href=\"https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords/\" target=\"_blank\" rel=\"noopener\">constructores en TypeScrip</a> admiten argumentos que transforman en propiedades. Mantenemos privado el <code>converterService</code> para evitar su uso desde la vista.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Distance Converter.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>From Europe to USA<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"kilometers\"</span>&gt;</span>Kilometers<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"kilometers\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"kilometers\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Convert\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"convert()\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>&#123;&#123; miles | number:'1.2-2' &#125;&#125; miles<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"2-Inversion-del-control\"><a href=\"#2-Inversion-del-control\" class=\"headerlink\" title=\"2. Inversión del control\"></a>2. Inversión del control</h1><p>Un concepto íntimamente relacionado con la inyección de dependencias es el de <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\"><strong>Inversion of Control</strong></a>. El componente dependiente expresa sus necesidades, pero es el <em>framework</em> el que en última instancia decide lo que recibirá. Vemos entonces que <strong>el invocado cede el control al invocador</strong>.</p><p>Cuando proveemos un servicio en Angular, el comportamiento por defecto es el de proveer un <em>singleton</em> pero hay más opciones. Si se usa el objeto <code>provider</code> con <code>useClass</code> , <code>useValue</code> y <code>useFactory</code> podemos controlar el proceso de inyección.</p><p>Se crea un <a href=\"https://es.wikipedia.org/wiki/Singleton\" target=\"_blank\" rel=\"noopener\"><em>singleton</em></a> por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Si va a ser compartido gana la opción de auto proveerlo en el raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.</p><p>En un módulo cualquiera, siempre podríamos agregar un servicio a su array de <em>providers</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [...],</span><br><span class=\"line\">  imports: [...],</span><br><span class=\"line\">  providers: [ CalculatorService ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>Pero siempre será <strong>una instancia única por módulo</strong>. Si un <em>singleton</em> no es lo adecuado, entonces puedes proveer el mismo servicio en distintos módulos. De esa forma se creará una instancia distinta para cada uno. Si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.</p><blockquote><p>Incluso es posible usar el array <code>providers:[]</code> en la decoración de un componente o de otro servicio. Haciendo así aún más granular la elección de instancia.</p></blockquote><p>Veamos un ejemplo extendiendo el problema del conversor de unidades de forma que se pueda escoger una <strong>estrategia</strong> de conversión en base a una cultura concreta. Para empezar necesitamos una interfaz, un servicio base que la implemente y un componente que lo consuma.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g interface 5-inject/converter/i-culture-converter</span><br><span class=\"line\">ng g service 5-inject/converter/culture-converter</span><br><span class=\"line\">ng g component 5-inject/converter/culture-converter</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> ICultureConverter &#123;</span><br><span class=\"line\">  sourceCulture: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  targetCulture: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  convertDistance: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  convertTemperature: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> CultureConverterService <span class=\"keyword\">implements</span> ICultureConverter &#123;</span><br><span class=\"line\">  sourceCulture: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  targetCulture: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  convertDistance: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  convertTemperature: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CultureConverterComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> source: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> target: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> sourceUnits = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> targetUnits: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> cultureConverterService:CultureConverterService</span>)&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.source = <span class=\"keyword\">this</span>.cultureConverterService.sourceCulture;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target = <span class=\"keyword\">this</span>.cultureConverterService.targetCulture;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.convert();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convert() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.targetUnits = <span class=\"keyword\">this</span>.cultureConverterService.convertDistance(<span class=\"keyword\">this</span>.sourceUnits);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Culture Converter.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>From &#123;&#123; source &#125;&#125; to &#123;&#123; target &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"sourceUnits\"</span>&gt;</span>Distance<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sourceUnits\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"sourceUnits\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Convert\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"convert()\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Distance &#123;&#123; targetUnits | number:'1.2-2' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"2-2-Implementaciones\"><a href=\"#2-2-Implementaciones\" class=\"headerlink\" title=\"2.2 Implementaciones\"></a>2.2 Implementaciones</h2><p>El <code>CultureConverterComponent</code> depende de <code>CultureConverterService</code> el cual implementa de forma abstracta la interfaz <code>CultureConverter</code>. Pero eso no es para nada funcional. Vamos a crear dos implementaciones específicas para Europa y USA. Estas clases concretas se apoyarán en el anteriormente creado <code>CalculatorService</code> que necesita algo más de código.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CalculatorService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromKilometersToMiles = <span class=\"function\"><span class=\"params\">kilometers</span> =&gt;</span> kilometers * <span class=\"number\">0.62137</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromMilesToKilometers = <span class=\"function\"><span class=\"params\">miles</span> =&gt;</span> miles * <span class=\"number\">1.609</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromCelsiusToFarenheit = <span class=\"function\"><span class=\"params\">celsius</span> =&gt;</span> celsius * (<span class=\"number\">9</span> / <span class=\"number\">5</span>) + <span class=\"number\">32</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromFarenheitToCelsius = <span class=\"function\"><span class=\"params\">farenheit</span> =&gt;</span> (farenheit - <span class=\"number\">32</span>) * (<span class=\"number\">5</span> / <span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y aquí están las dos servicios concretos.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> EuropeConverterService <span class=\"keyword\">implements</span> ICultureConverter &#123;</span><br><span class=\"line\">  sourceCulture = <span class=\"string\">'USA'</span>;</span><br><span class=\"line\">  targetCulture = <span class=\"string\">'Europe'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> converterService: CalculatorService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertDistance = <span class=\"keyword\">this</span>.converterService.fromMilesToKilometers;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertTemperature = <span class=\"keyword\">this</span>.converterService.fromFahrenheitToCelsius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UsaConverterService <span class=\"keyword\">implements</span> ICultureConverter &#123;</span><br><span class=\"line\">  sourceCulture = <span class=\"string\">'Europe'</span>;</span><br><span class=\"line\">  targetCulture = <span class=\"string\">'USA'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> converterService: CalculatorService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertDistance = <span class=\"keyword\">this</span>.converterService.fromKilometersToMiles;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertTemperature = <span class=\"keyword\">this</span>.converterService.fromCelsiusToFahrenheit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-3-Provision-manual\"><a href=\"#2-3-Provision-manual\" class=\"headerlink\" title=\"2.3 Provisión manual\"></a>2.3 Provisión manual</h2><p>Por ejemplo si queremos utilizar la implementación concreta de USA lo indicamos en el módulo que lo consuma.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: CultureConverterService,</span><br><span class=\"line\">      useClass: UsaConverterService,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>El componente reclama una instancia de <code>CultureConverterService</code> y le damos otra con la misma interfaz. De esta forma podríamos tener módulos distintos, cada uno con su propia estrategia de conversión.</p><h2 id=\"2-4-Factoria\"><a href=\"#2-4-Factoria\" class=\"headerlink\" title=\"2.4 Factoría\"></a>2.4 Factoría</h2><p>Una situación muy común es poder elegir dinámicamente la implementación concreta. Para ello necesitamos una función factoría que con alguna lógica escoja la estrategia concreta.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cultureFactory = <span class=\"function\">(<span class=\"params\">converterService: ConverterService</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (environment.unitsCulture === <span class=\"string\">'metric'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EuropeConverterService(converterService);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UsaConverterService(converterService);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: CultureConverterService,</span><br><span class=\"line\">      useFactory: cultureFactory,</span><br><span class=\"line\">      deps: [CalculatorService],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>De esta forma la aplicación se comportará distinto en función de una variable de entorno.</p><p>Ya tenemos la aplicación mucho mejor estructurada, pero el almacén de datos es mejorable. Se mantienen los datos <em>hard-coded</em>, muy incómodo para actualizar; y en memoria, poco fiable y volátil. Lo más habitual es guardar y recuperar la información en un servidor <em>http</em>. Sigue esta serie para añadir <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a> mientras aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-5_inject.png\" alt=\"servicios-inyectables-en-Angular\"></p><p>La presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. <strong>La lógica y los datos tienen su lugar en servicios compartidos</strong>.</p><p>Para que los componentes consuman los servicios de forma controlada tenemos proveedores <em>inyectables</em> en la librería <code>@angular/core</code> con los que realizar <strong>la inyección de dependencias</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../flujo-de-datos-entre-componentes-angular/\">Flujo de datos entre componentes Angular</a>. Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/5-inject/converter\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/5-inject</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-Inyeccion-de-dependencias\"><a href=\"#1-Inyeccion-de-dependencias\" class=\"headerlink\" title=\"1. Inyección de dependencias\"></a>1. Inyección de dependencias</h1><p>Como casi todo en Angular, <strong>los servicios son clases TypeScript</strong>. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.</p><p>Este sistema se basa en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona la <strong><a href=\"https://es.wikipedia.org/wiki/Inyecci%C3%B3n_de_dependencias\" target=\"_blank\" rel=\"noopener\">Dependency Injection</a> en Angular</strong>.</p><p>Como demostración vamos a trabajar con un par de utilidades para conversión de unidades. Crearé un módulo y un componente en el que visualizarlo.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m 5-inject/converter --routing true</span><br><span class=\"line\">ng g c 5-inject/converter/converter</span><br></pre></td></tr></table></figure><h2 id=\"1-1-Generacion-de-servicios\"><a href=\"#1-1-Generacion-de-servicios\" class=\"headerlink\" title=\"1.1 Generación de servicios\"></a>1.1 Generación de servicios</h2><p>La particularidad de las clases de servicios está en su decorador: <code>@Injectable()</code>. Esta función viene en el <code>@angular/core</code> e <strong>indica que esta clase puede ser inyectada</strong> dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios. Estos son ejemplos de instrucciones para crear un <em>service</em>.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s 5-inject/converter/calculator</span><br></pre></td></tr></table></figure><p>El resultado es el fichero <code>calculator.service.ts</code> con su decorador que toma una <em>class</em> normal y produce algo <em>injectable</em>. Veamos una implementación mínima:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CalculatorService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromKilometersToMiles = <span class=\"function\"><span class=\"params\">kilometers</span> =&gt;</span> kilometers * <span class=\"number\">0.62137</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ahora tienes centralizado en este servicio la lógica de datos que tenemos hasta el momento. Los demás componentes la podrán utilizar.</p><h2 id=\"1-2-Consumo-de-dependencias\"><a href=\"#1-2-Consumo-de-dependencias\" class=\"headerlink\" title=\"1.2 Consumo de dependencias\"></a>1.2 Consumo de dependencias</h2><p>Declarar y decorar la clase no es suficiente para poder reclamarla. Necesitas <strong>registrarla como un proveedor en algún módulo</strong>. Desde Angular 6 los servicios se auto-proveen en el módulo raíz mediante la configuración <code>providedIn: &#39;root&#39;</code> de su decorador.</p><blockquote><p>Esto es útil y cómodo en una gran cantidad de casos. El módulo raíz es visible para toda la aplicación de forma que cualquier componente puede reclamar un servicio suyo sin problema. Excepto que el problema sea el tamaño. El módulo raíz se carga al arrancar y todas sus referencias van el <em>bundle</em> principal. Si queremos repartir el peso debemos llevar ciertos servicios al módulo funcional que los necesite.</p></blockquote><p>Vamos a consumir este servicio en el <code>converter.component.ts</code>. Al consumo de los servicios inyectables se le conoce como <em>dependencia</em>. Cada componente o servicio puede <strong>declarar en su constructor sus dependencias</strong> hacia servicios inyectables. El convenio exige que se especifique el tipo esperado</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConverterComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> kilometers = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> miles: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> calculatorService: CalculatorService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.convert();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> convert() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.miles = <span class=\"keyword\">this</span>.calculatorService.fromKilometersToMiles(<span class=\"keyword\">this</span>.kilometers);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Agregar el modificador de alcance <code>private</code> o <code>public</code> en la declaración de argumentos hace que <em>TypeScript</em> genere una propiedad inicializada con el valor recibido. Es azúcar sintáctico para no tener que declarar la propiedad y asignarle el valor del argumento manualmente. En resumen, los <a href=\"https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords/\" target=\"_blank\" rel=\"noopener\">constructores en TypeScrip</a> admiten argumentos que transforman en propiedades. Mantenemos privado el <code>converterService</code> para evitar su uso desde la vista.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Distance Converter.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>From Europe to USA<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"kilometers\"</span>&gt;</span>Kilometers<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"kilometers\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"kilometers\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Convert\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"convert()\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>&#123;&#123; miles | number:'1.2-2' &#125;&#125; miles<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"2-Inversion-del-control\"><a href=\"#2-Inversion-del-control\" class=\"headerlink\" title=\"2. Inversión del control\"></a>2. Inversión del control</h1><p>Un concepto íntimamente relacionado con la inyección de dependencias es el de <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\"><strong>Inversion of Control</strong></a>. El componente dependiente expresa sus necesidades, pero es el <em>framework</em> el que en última instancia decide lo que recibirá. Vemos entonces que <strong>el invocado cede el control al invocador</strong>.</p><p>Cuando proveemos un servicio en Angular, el comportamiento por defecto es el de proveer un <em>singleton</em> pero hay más opciones. Si se usa el objeto <code>provider</code> con <code>useClass</code> , <code>useValue</code> y <code>useFactory</code> podemos controlar el proceso de inyección.</p><p>Se crea un <a href=\"https://es.wikipedia.org/wiki/Singleton\" target=\"_blank\" rel=\"noopener\"><em>singleton</em></a> por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Si va a ser compartido gana la opción de auto proveerlo en el raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.</p><p>En un módulo cualquiera, siempre podríamos agregar un servicio a su array de <em>providers</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [...],</span><br><span class=\"line\">  imports: [...],</span><br><span class=\"line\">  providers: [ CalculatorService ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>Pero siempre será <strong>una instancia única por módulo</strong>. Si un <em>singleton</em> no es lo adecuado, entonces puedes proveer el mismo servicio en distintos módulos. De esa forma se creará una instancia distinta para cada uno. Si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.</p><blockquote><p>Incluso es posible usar el array <code>providers:[]</code> en la decoración de un componente o de otro servicio. Haciendo así aún más granular la elección de instancia.</p></blockquote><p>Veamos un ejemplo extendiendo el problema del conversor de unidades de forma que se pueda escoger una <strong>estrategia</strong> de conversión en base a una cultura concreta. Para empezar necesitamos una interfaz, un servicio base que la implemente y un componente que lo consuma.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g interface 5-inject/converter/i-culture-converter</span><br><span class=\"line\">ng g service 5-inject/converter/culture-converter</span><br><span class=\"line\">ng g component 5-inject/converter/culture-converter</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> ICultureConverter &#123;</span><br><span class=\"line\">  sourceCulture: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  targetCulture: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  convertDistance: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  convertTemperature: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> CultureConverterService <span class=\"keyword\">implements</span> ICultureConverter &#123;</span><br><span class=\"line\">  sourceCulture: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  targetCulture: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  convertDistance: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  convertTemperature: <span class=\"function\">(<span class=\"params\">source: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CultureConverterComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> source: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> target: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> sourceUnits = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> targetUnits: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> cultureConverterService:CultureConverterService</span>)&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.source = <span class=\"keyword\">this</span>.cultureConverterService.sourceCulture;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target = <span class=\"keyword\">this</span>.cultureConverterService.targetCulture;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.convert();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convert() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.targetUnits = <span class=\"keyword\">this</span>.cultureConverterService.convertDistance(<span class=\"keyword\">this</span>.sourceUnits);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Culture Converter.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>From &#123;&#123; source &#125;&#125; to &#123;&#123; target &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"sourceUnits\"</span>&gt;</span>Distance<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sourceUnits\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"sourceUnits\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Convert\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"convert()\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Distance &#123;&#123; targetUnits | number:'1.2-2' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"2-2-Implementaciones\"><a href=\"#2-2-Implementaciones\" class=\"headerlink\" title=\"2.2 Implementaciones\"></a>2.2 Implementaciones</h2><p>El <code>CultureConverterComponent</code> depende de <code>CultureConverterService</code> el cual implementa de forma abstracta la interfaz <code>CultureConverter</code>. Pero eso no es para nada funcional. Vamos a crear dos implementaciones específicas para Europa y USA. Estas clases concretas se apoyarán en el anteriormente creado <code>CalculatorService</code> que necesita algo más de código.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CalculatorService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromKilometersToMiles = <span class=\"function\"><span class=\"params\">kilometers</span> =&gt;</span> kilometers * <span class=\"number\">0.62137</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromMilesToKilometers = <span class=\"function\"><span class=\"params\">miles</span> =&gt;</span> miles * <span class=\"number\">1.609</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromCelsiusToFarenheit = <span class=\"function\"><span class=\"params\">celsius</span> =&gt;</span> celsius * (<span class=\"number\">9</span> / <span class=\"number\">5</span>) + <span class=\"number\">32</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> fromFarenheitToCelsius = <span class=\"function\"><span class=\"params\">farenheit</span> =&gt;</span> (farenheit - <span class=\"number\">32</span>) * (<span class=\"number\">5</span> / <span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y aquí están las dos servicios concretos.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> EuropeConverterService <span class=\"keyword\">implements</span> ICultureConverter &#123;</span><br><span class=\"line\">  sourceCulture = <span class=\"string\">'USA'</span>;</span><br><span class=\"line\">  targetCulture = <span class=\"string\">'Europe'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> converterService: CalculatorService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertDistance = <span class=\"keyword\">this</span>.converterService.fromMilesToKilometers;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertTemperature = <span class=\"keyword\">this</span>.converterService.fromFahrenheitToCelsius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UsaConverterService <span class=\"keyword\">implements</span> ICultureConverter &#123;</span><br><span class=\"line\">  sourceCulture = <span class=\"string\">'Europe'</span>;</span><br><span class=\"line\">  targetCulture = <span class=\"string\">'USA'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> converterService: CalculatorService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertDistance = <span class=\"keyword\">this</span>.converterService.fromKilometersToMiles;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> convertTemperature = <span class=\"keyword\">this</span>.converterService.fromCelsiusToFahrenheit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-3-Provision-manual\"><a href=\"#2-3-Provision-manual\" class=\"headerlink\" title=\"2.3 Provisión manual\"></a>2.3 Provisión manual</h2><p>Por ejemplo si queremos utilizar la implementación concreta de USA lo indicamos en el módulo que lo consuma.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: CultureConverterService,</span><br><span class=\"line\">      useClass: UsaConverterService,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>El componente reclama una instancia de <code>CultureConverterService</code> y le damos otra con la misma interfaz. De esta forma podríamos tener módulos distintos, cada uno con su propia estrategia de conversión.</p><h2 id=\"2-4-Factoria\"><a href=\"#2-4-Factoria\" class=\"headerlink\" title=\"2.4 Factoría\"></a>2.4 Factoría</h2><p>Una situación muy común es poder elegir dinámicamente la implementación concreta. Para ello necesitamos una función factoría que con alguna lógica escoja la estrategia concreta.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cultureFactory = <span class=\"function\">(<span class=\"params\">converterService: ConverterService</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (environment.unitsCulture === <span class=\"string\">'metric'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EuropeConverterService(converterService);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UsaConverterService(converterService);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: CultureConverterService,</span><br><span class=\"line\">      useFactory: cultureFactory,</span><br><span class=\"line\">      deps: [CalculatorService],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>De esta forma la aplicación se comportará distinto en función de una variable de entorno.</p><p>Ya tenemos la aplicación mucho mejor estructurada, pero el almacén de datos es mejorable. Se mantienen los datos <em>hard-coded</em>, muy incómodo para actualizar; y en memoria, poco fiable y volátil. Lo más habitual es guardar y recuperar la información en un servidor <em>http</em>. Sigue esta serie para añadir <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones HTTP en Angular</a> mientras aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Comunicaciones http en Angular","date":"2019-02-28T13:06:00.000Z","thumbnail":"/css/images/angular-6_http.png","_content":"\n![comunicaciones-http-en-Angular](/images/tutorial-angular-6_http.png)\n\nLas comunicaciones _http_ son una pieza fundamental del desarrollo web, y en **Angular** siempre han sido potentes y fáciles. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas... y además la librería *RxJS* y sus *streams* son intimidantes para los novatos.\n\nPero en la versión Angular 8 **consumir un servicio REST** puede ser cosa de niños si aprendes a jugar con los _observables_ y los servicios de la librería `@angular/common/http`. Conseguirás realizar **comunicaciones http asíncronas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/). Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST usando las tecnologías de Angular Http.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/6-http](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/6-http/rates)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n# 1. El servicio HttpClient\n\nComo demostración vamos a consumir un API pública con datos de [cotización de monedas](https://exchangeratesapi.io/). Crearé un módulo y un componente en el que visualizar las divisas y después las transformaremos para guardarlas en un servicio propio.\n\n```shell\nng g m 6-http/rates --routing true\nng g c 6-http/rates/rates\n```\n\n## 1.1 Importación y declaración de servicios\n\nLa librería `@angular/common/http` trae el módulo `HttpClientModule` con el servicio inyectable `HttpClient`. Lo primero es importar dicho módulo.\n\n```typescript\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [RatesComponent],\n  imports: [HttpClientModule]\n})\nexport class RatesModule { }\n```\n\nEn tu componente tienes que reclamar la dependencia al servicio para poder usarla. Atención a la importación pues hay más clases con el nombre `HttpClient`. Debe quedar algo así:\n\n```typescript\nimport { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-rates',\n  templateUrl: './rates.component.html',\n  styles: []\n})\nexport class RatesComponent implements OnInit {\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {}\n}\n```\n\nA partir de este momento sólo queda invocar los métodos REST en la propiedad `this.http`.\n\n## 1.2 Obtención de datos\n\nPara cada verbo _http_ tenemos su método en el servicio `HttpClient`. Su primer parámetro será la *url* a la que invocar. Empecemos por el `get` que automáticamente solicita y devuelve objetos _JSON_ desde un API. Por ejemplo para obtener [las últimas cotizaciones de las principales divisas](https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CHF,JPY) lo haremos así:\n\n\n```typescript\nexport class RatesComponent implements OnInit {\n  private urlapi\n    = 'https://api.exchangeratesapi.io/latest';\n  public currentEuroRates: any = null;\n\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {\n    this.getCurrentEuroRates();\n  }\n\n  private getCurrentEuroRates() {\n    const currencies = 'USD,GBP,CHF,JPY';\n    const url = `${this.urlapi}?symbols=${currencies}`;\n    this.httpClient\n      .get(url)\n      .subscribe(apiData => (this.currentEuroRates = apiData));\n  }\n}\n```\n\n> El método _get_ retorna un objeto observable. Los observables _http_ han de consumirse mediante el método _subscribe_ para que realmente se lancen. Dicho método _subscribe_ admite hasta tres _callbacks_: `susbcribe(data, err, end)` para que se ejecuten en respuesta a eventos. En este ejemplo solo hemos usado el primero.\n\nLa presentación en la vista sólo tiene que acceder a la propiedad dónde se hayan cargado las respuestas tratadas en el _callback_ de la suscripción.\n\n```html\n<h2> Currency Rates. </h2>\n<h3> From Euro to the world </h3>\n<pre>{{ currentEuroRates | json }}</pre>\n```\n\n\n## 1.3 Envío de datos\n\nSupongamos que, una vez recibidas las cotizaciones, pretendemos transformarlas y almacenarlas en otro servicio. Por ejemplo un objeto para cada día y moneda. El envío en este caso será con el método _post_ al que se le pasará la ruta del _end point_ y el objeto _payload_ que se enviará al servidor.\n\nVamos a agregar una propiedad y un par de métodos al `rates-component.ts`. La idea es obtener un array de cotizaciones aa partir del objeto previo, y guardarla una por una.\n\n```typescript\nexport class RatesComponent implements OnInit {\n  private ratesByDateApi = 'https://api-base.herokuapp.com/api/pub/rates';\n\n  public postRatesByDate() {\n    const ratesByDate: RateByDate[] = this.transformExchangeRates();\n    ratesByDate.forEach(rate =>\n      this.httpClient.post<RateByDate>(this.ratesByDateApi, rate).subscribe()\n    );\n  }\n\n  private transformExchangeRates(): RateByDate[] {\n    const currentDate = this.currentEuroRates.date;\n    const currentRates = this.currentEuroRates.rates;\n    const ratesByDate = Object.keys(currentRates).map((keyRate: string) => ({\n      date: currentDate,\n      currency: keyRate,\n      euros: currentRates[keyRate]\n    }));\n    return ratesByDate;\n  }\n}\n```\n> Atención a los métodos `subscribe()`. Aunque vayan vacíos son imprescindibles para que se ejecute la llamada.\n\nEn la vista no hay gran cosa que hacer, salvo agregarle un botón para iniciar el proceso:\n\n```html\n<input value=\"Save Rates\" type=\"button\" (click)=\"postRatesByDate()\" />\n```\n\n## 1.4 Actualización de datos\n\nUn par de ejemplo más para acabar de entender la mecánica básica de `HttpClient`. Podemos fijar el tipo de datos esperado en cualquier llamada. De hecho es recomendable que tengas un interfaz para cada respuesta esperada.\n\nEn este tutorial no se ha hecho y no quedamos con el `any`, pero al menos distinguimos entre objetos y arrays. Esto es lo que añado al `RatesComponent` para que muestre los datos guardados en mi API.\n\n```typescript\nexport class RatesComponent implements OnInit {\n private ratesByDateApi = 'https://api-base.herokuapp.com/api/pub/rates';\n public ratesByDate: RateByDate[] = null;\n\n\n public getRatesByDate() {\n    this.httpClient\n      .get<RateByDate[]>(this.ratesByDateApi)\n      .subscribe(apiResult => (this.ratesByDate = apiResult));\n  }\n}\n```\nY en la vista, un nuevo botón y una nueva expresión.\n\n```html\n<input value=\"Refresh\" type=\"button\" (click)=\"getRatesByDate()\" />\n<pre>{{ myRates | json }}</pre>\n```\n\nPor último, en plan repaso, un ejemplo de método para borrar.\n\n```typescript\n  public deleteRatesByDate() {\n    this.httpClient.delete(this.ratesByDateApi).subscribe();\n  }\n```\nY su botón en en la vista.\n\n```html\n<input value=\"Delete Rates\" type=\"button\" (click)=\"deleteRatesByDate()\" />\n```\n\nY hasta aquí lo básico de comunicaciones *http*. ¿Fácil verdad?. Pero la vida real raramente es tan sencilla. Si quieres enfrentarte a algo más duro debes prepararte y dominar los observables *RxJS*.\n\nLo que viene a partir de ahora requerirá tiempo y concentración. Si continúas adelante esto ya no será *your grandpa´s http anymore*.\n\n# 2 Observables\n\nLas **comunicaciones** entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.\n\nEsta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones _AJAX_ basadas en el paso de funciones _callback_. La aparición de las _promises_ mejoró la claridad del código, y ahora con los _Observables_ tenemos además una gran potencia para manipular la **información asíncrona**.\n\n> El patrón `Observable` fue implementado por Microsoft en la librería [_Reactive Extensions_](http://reactivex.io/intro.html) más conocida como `RxJs`. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.\n\nLo primero es importar el código, de forma similar a cualquier otra clase o función. Por ejemplo para empezar basta con `import { Observable } from \"rxjs/Observable\";`. Tendremos la clase usada por angular para observar el respuesta *http*.\n\nPero esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan el tipo esperado `: Observable<MyClass>`, o si no saben que tipo esperar se conforman con `: Observable<any>`.\n\nEn cualquier caso, **toda operación asíncrona retornará una instancia observable** a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine.\nAunque a veces no se verá el _subscribe_...\n\n## 2.1 Async\n\nPara probar otras formas de presentar datos recibidos desde un API, voy a crear un nuevo componente. El `ObseratesComponent`, mezcla de _observables_ y _rates_.\n\n```shell\nng g c 6-http/rates/obserates\n```\n\nY en su vista HTML usaré una función propia de Angular llamada `async`. Dicha función actúa como un _pipe_ en una expresión. Igual que el `| json`. Pero a su izquierda espera que le den algo a lo que suscribirse; espera un observable.\n\n```html\n<h2> Currency Observable Rates. </h2>\n<h3> From Euro to the $ world </h3>\n<pre>{{ currentEuroRates$ | async | json }}</pre>}\n```\n\nEn este caso uso la propiedad `currentEuroRates$` finalizada en **$** por convenio. Esa propiedad se rellena en el controlador con el método `get`, no con los datos futuros, si no con el propio _observable_.\n\n```typeScript\nprivate ratesApi\n  = 'https://api.exchangeratesapi.io/latest';\npublic currentEuroRates$: Observable<any> = null;\n\nconstructor(private httpClient: HttpClient) {}\n\nngOnInit() {\n  this.getCurrentEuroRates();\n}\n\nprivate getCurrentEuroRates() {\n  const currencies = 'USD,GBP,CHF,JPY';\n  const url = `${this.ratesApi}?symbols=${currencies}`;\n  this.currentEuroRates$ = this.httpClient.get(url);\n}\n```\n> Al utilizar el _pipe async_ ya no es necesaria la suscripción en código. La propia función del framework se ocupa de ello. Por tanto la llamada se realiza igualmente aunque no veamos la suscripción.\n\nEsta es la manera recomendada de consumir datos desde un API. Definir la llamada en el controlador y pasarle el observable a la vista para que lo muestre cuando obtenga los datos.\n\n\n## 2.2 Pipe\n\n### Tuberías en RxJS .pipe()\n\nLos datos devueltos raramente vienen en el formato preciso para usar en la vista. Con frecuencia hay que transformarlos al vuelo en cuanto se reciben. Recordemos que ***HttpClient* no devuelve los datos tal cual sino un *stream* de estados** de dichos datos. La manipulación será sobre el *stream* no directamente sobre los datos; y, claro, para manipular un torrente hay que encauzarlo en tuberías.\n\nAquí es donde aparece el método `.pipe(operator1, operator2...)` aplicado a un observable. Suele hacerse en lugar, o antes, del `.susbcribe(okCallback, errCallback)`. Este método canaliza una serie de operadores predefinidos que manipulan el chorro de estados observados.\n\nEl operador más utilizado es `map(sourceStream => targetStream)`. Este operador recibe una función *callBack* que será invocada ante cada dato recibido. Esa función tienen que retornar un valor para sustituir al actual y así transformar el contenido del chorro.\n\n```typescript\npublic myRates$: Observable<MyRate[]> = null;\nprivate getCurrentEuroRates() {\n  const url = `${this.ratesApi}?symbols=USD,GBP,CHF,JPY`;\n  this.currentEuroRates$ = this.httpClient.get<ExchangeRates>(url);\n  this.ratesByDate$ = this.currentEuroRates$.pipe(map(this.transformData));\n}\nprivate transformData(exchangeRates: ExchangeRates): RateByDate[] {\n  const currentDate = exchangeRates.date;\n  const currentRates = exchangeRates.rates;\n  const ratesByDate = Object.keys(currentRates).map((keyRate: string) => ({\n    date: currentDate,\n    currency: keyRate,\n    euros: currentRates[keyRate]\n  }));\n  return ratesByDate;\n}\n```\n\n> En este ejemplo partimos de nuevo de un objeto recibido y lo queremos ver como un *array* de objetos. Para ello lo transformamos usado el operador `map`. Este operador ha de importarse de `rxjs/operators` y aplicarse a un observable dentro de su método `.pipe()`. Es el más sencillo y uno de los más utilizados: recibe y emite datos dentro de un stream de eventos observables. Nada que ver, salvo el nombre, con la sencilla función `array.map(callback)`, que recibe y devuelve datos estáticos.\n\n```html\n<pre>{{ ratesByDate$ | async | json }}</pre>\n```\nPor lo demás el consumo se hace igual... pero... tendremos que ver más operadores para solucionar algunos inconvenientes.\n\n## 2.3 Operators\n\nEl código anterior funciona, pero resulta que al haber dos funciones async suscritas provoca que la llamada original se realice dos veces. esto es así porque el segundo observable `ratesByDate$` es una canalización del primero `currentEuroRates$`.\n\nEstos y oros problemas se solucionan usando operadores. Vamos a conocer un par de ellos más y veremos como `pipe(op1, op2,  opn)` los ejecuta a todos en orden.\n\nEl operador `share()` permite compartir el resultado de una primera llamada con subsiguientes suscriptores. Evitando de ese modo la repetición de costosas peticiones http.\n\n```typescript\nprivate getCurrentEuroRates() {\nconst url = `${this.ratesApi}?symbols=USD,GBP,CHF,JPY`;\n  this.currentEuroRates$ = this.httpClient.get(url)\n      .pipe(share());\n  this.ratesByDate$ = this.currentEuroRates$\n      .pipe(\n        tap(d=>console.log(d)),\n        map(this.transformData),\n        tap(t=>console.log(t))\n      );\n}\n```\n\n> El operador `tap(callback)` es similar en nombre al `map()`. Pero la gran diferencia es que está pensado para no manipular los datos que recibe. Los usa y puede causar otros efectos colaterales, pero nunca modifica el propio stream. Es muy utilizado para inspeccionar o auditar el flujo de otros operadores.\n\n\nReconozco que en un primer vistazo este código pueda resultar complejo. Tómate tu tiempo. Fíjate en los datos de entrada y salida de cada función. Esto es solo el principio del trabajo con la librería *RxJS* y la manipulación de *streams de eventos observables*.\n\n# 3. Interceptores\n\nLos interceptores tienen un nombre intimidante pero un propósito sencillo y muy útil: **interceptar todas las comunicaciones http** y ejecutar código personalizado para cada uno. Por ejemplo un gestor centralizado de errores http o el control de los tokens de seguridad de la aplicación.\n\nPero antes de eso habrá que aprender unos conceptos básicos. Vamos a ver un ejemplo sencillo que audite todas las llamadas http. Todo empieza con un servicio:\n\n```console\nng g s rates/AuditInterceptor\n```\n\n## 3.1 La interfaz HttpInterceptor\n\nAl servicio genérico recién creado hay que hacerle cumplir una interfaz `HttpInterceptor` que viene con `HttpClientModule`. Esta interfaz solo necesita un método, el `intercept(req, next)` pero sus tipos e implementación mínima la hacen complicada de entender a la primera.\n\n```typescript\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest }\n  from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuditInterceptorService implements HttpInterceptor {\n  public intercept( req: HttpRequest<any>, next: HttpHandler )\n    : Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n\n  constructor() { }\n}\n```\n\nTodo este código para nada. Porque eso es lo que hace, nada. Eso sí, tampoco rompe ni bloquea nada. Vayamos por partes, primero los parámetros, luego el tipo de la respuesta y por último la implementación\n\n- `req: HttpRequest<any>`  puntero a la petición en curso\n- `next: HttpHandler`  puntero a la siguiente función que maneje la petición\n- `: Observable<HttpEvent<any>>` retornamos un stream de eventos http para cada petición\n- `return next.handle(req);`  que el siguiente procese la petición, sin hacerle nada en absoluto\n\n> Para entenderlo mejor puede ser útil la siguiente analogía. Cuando usas httpClient.get() es como si pides algo a Amazon y te suscribes, es decir esperas el paquete. Pasado el tiempo el paquete llegará o no llegará, pero ya no lo gestionas tú. Con los interceptores es como si espiases cada proceso de tu pedido: stock, picking, packaging, shipping... Cada pedido es tratado en una sucesión de eventos. Con un interceptor observas !todos los eventos de todos los pedidos!\n\n## 3.2 Inversión del control vía token\n\nTenemos un servicio que cumple una interfaz compleja. Pero dicho servicio debe ser proveído en algún módulo antes de ser reclamado como dependencias por alguien. Pero ¿por quién?\n\nTécnicamente lo necesita el propio `HttpClient` del framework. Pero, obviamente, no pueden reclamar por tipo una clase que acabo de inventarme yo. Adelante con la **inversión del control**.\n\nRealmente `HttpClient` depende de algo que por convenio llaman token de tipo `HTTP_INTERCEPTORS`. Nuestro trabajo consiste en que cuando reclame su dependencia, le demos la nuestra. El típico gato por liebre. Así en nuestro módulo pondremos la siguiente configuración.\n\n```TypeScript\nproviders: [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuditInterceptorService,\n    multi: true\n  }\n]\n```\nEl parámetro `multi:true` en este caso le indica que puede haber más de un interceptor. Concretamente debe añadirlo a la lista y admitir más. Hecho esto, sobraría el `providedIn: 'root'` autogenerado en el decorador del servicio.\n\n## 3.3 Un auditor de llamadas\n\nPues ya estamos listos para aportar algo de funcionalidad. Nuestro objetivo es escribir en el _log_ un texto para cada llamada terminada y el tiempo que le tomó. La idea es aprovechar que todo es un _stream_ observable y canalizarlo en una tubería con una serie de operadores.\n\n```Typescript\nexport class AuditInterceptorService implements HttpInterceptor {\n  constructor() {}\n\n  public intercept(req: HttpRequest<any>, next: HttpHandler){\n    const started = Date.now();\n    return next.handle(req).pipe(\n      filter((event: HttpEvent<any>) => event instanceof HttpResponse),\n      tap((resp: HttpResponse<any>) => this.auditEvent(resp, started))\n    );\n  }\n\n  private auditEvent(resp: HttpResponse<any>, started: number) {\n    const elapsedMs = Date.now() - started;\n    const eventMessage = resp.statusText + ' on ' + resp.url;\n    const message = eventMessage + ' in ' + elapsedMs + 'ms';\n    console.log(message);\n  }\n}\n```\n\nEl operador `filter(any=>bool)` se usa para descartar eventos que no cumplan unos criterios. En mi caso sólo me interesan los eventos de recepción de la petición, y no necesito los intermedios. Uso de nuevo el `tap(callback)` para hacer cosas con los datos sin modificarlos en absoluto. En este caso los envío al método `auditEvent` para que lo saque por consola. Listo: un auditor para todas las llamadas.\n\nYa tenemos el programa comunicado por _http_ con un servidor; aunque por ahora de forma anónima y sin ninguna seguridad. Con el conocimiento actual de los observables, del _httpClient_ y de los interceptores ya estamos cerca de resolverlo. Sigue esta serie para añadirle [vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/) mientras aprendes a programar con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-6-comunicaciones-http-en-angular.md","raw":"---\ntitle: Comunicaciones http en Angular\npermalink: comunicaciones-http-en-Angular\ndate: 2019-02-28 14:06:00\ntags:\n- Angular\n- http\n- RxJS\n- Observables\n- Tutorial\n- Introducción\n- Angular8\n- Angular2\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-6_http.png\n---\n\n![comunicaciones-http-en-Angular](/images/tutorial-angular-6_http.png)\n\nLas comunicaciones _http_ son una pieza fundamental del desarrollo web, y en **Angular** siempre han sido potentes y fáciles. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas... y además la librería *RxJS* y sus *streams* son intimidantes para los novatos.\n\nPero en la versión Angular 8 **consumir un servicio REST** puede ser cosa de niños si aprendes a jugar con los _observables_ y los servicios de la librería `@angular/common/http`. Conseguirás realizar **comunicaciones http asíncronas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Servicios inyectables en Angular](../servicios-inyectables-en-Angular/). Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST usando las tecnologías de Angular Http.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/6-http](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/6-http/rates)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n# 1. El servicio HttpClient\n\nComo demostración vamos a consumir un API pública con datos de [cotización de monedas](https://exchangeratesapi.io/). Crearé un módulo y un componente en el que visualizar las divisas y después las transformaremos para guardarlas en un servicio propio.\n\n```shell\nng g m 6-http/rates --routing true\nng g c 6-http/rates/rates\n```\n\n## 1.1 Importación y declaración de servicios\n\nLa librería `@angular/common/http` trae el módulo `HttpClientModule` con el servicio inyectable `HttpClient`. Lo primero es importar dicho módulo.\n\n```typescript\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [RatesComponent],\n  imports: [HttpClientModule]\n})\nexport class RatesModule { }\n```\n\nEn tu componente tienes que reclamar la dependencia al servicio para poder usarla. Atención a la importación pues hay más clases con el nombre `HttpClient`. Debe quedar algo así:\n\n```typescript\nimport { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-rates',\n  templateUrl: './rates.component.html',\n  styles: []\n})\nexport class RatesComponent implements OnInit {\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {}\n}\n```\n\nA partir de este momento sólo queda invocar los métodos REST en la propiedad `this.http`.\n\n## 1.2 Obtención de datos\n\nPara cada verbo _http_ tenemos su método en el servicio `HttpClient`. Su primer parámetro será la *url* a la que invocar. Empecemos por el `get` que automáticamente solicita y devuelve objetos _JSON_ desde un API. Por ejemplo para obtener [las últimas cotizaciones de las principales divisas](https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CHF,JPY) lo haremos así:\n\n\n```typescript\nexport class RatesComponent implements OnInit {\n  private urlapi\n    = 'https://api.exchangeratesapi.io/latest';\n  public currentEuroRates: any = null;\n\n  constructor(private httpClient: HttpClient) {}\n\n  ngOnInit() {\n    this.getCurrentEuroRates();\n  }\n\n  private getCurrentEuroRates() {\n    const currencies = 'USD,GBP,CHF,JPY';\n    const url = `${this.urlapi}?symbols=${currencies}`;\n    this.httpClient\n      .get(url)\n      .subscribe(apiData => (this.currentEuroRates = apiData));\n  }\n}\n```\n\n> El método _get_ retorna un objeto observable. Los observables _http_ han de consumirse mediante el método _subscribe_ para que realmente se lancen. Dicho método _subscribe_ admite hasta tres _callbacks_: `susbcribe(data, err, end)` para que se ejecuten en respuesta a eventos. En este ejemplo solo hemos usado el primero.\n\nLa presentación en la vista sólo tiene que acceder a la propiedad dónde se hayan cargado las respuestas tratadas en el _callback_ de la suscripción.\n\n```html\n<h2> Currency Rates. </h2>\n<h3> From Euro to the world </h3>\n<pre>{{ currentEuroRates | json }}</pre>\n```\n\n\n## 1.3 Envío de datos\n\nSupongamos que, una vez recibidas las cotizaciones, pretendemos transformarlas y almacenarlas en otro servicio. Por ejemplo un objeto para cada día y moneda. El envío en este caso será con el método _post_ al que se le pasará la ruta del _end point_ y el objeto _payload_ que se enviará al servidor.\n\nVamos a agregar una propiedad y un par de métodos al `rates-component.ts`. La idea es obtener un array de cotizaciones aa partir del objeto previo, y guardarla una por una.\n\n```typescript\nexport class RatesComponent implements OnInit {\n  private ratesByDateApi = 'https://api-base.herokuapp.com/api/pub/rates';\n\n  public postRatesByDate() {\n    const ratesByDate: RateByDate[] = this.transformExchangeRates();\n    ratesByDate.forEach(rate =>\n      this.httpClient.post<RateByDate>(this.ratesByDateApi, rate).subscribe()\n    );\n  }\n\n  private transformExchangeRates(): RateByDate[] {\n    const currentDate = this.currentEuroRates.date;\n    const currentRates = this.currentEuroRates.rates;\n    const ratesByDate = Object.keys(currentRates).map((keyRate: string) => ({\n      date: currentDate,\n      currency: keyRate,\n      euros: currentRates[keyRate]\n    }));\n    return ratesByDate;\n  }\n}\n```\n> Atención a los métodos `subscribe()`. Aunque vayan vacíos son imprescindibles para que se ejecute la llamada.\n\nEn la vista no hay gran cosa que hacer, salvo agregarle un botón para iniciar el proceso:\n\n```html\n<input value=\"Save Rates\" type=\"button\" (click)=\"postRatesByDate()\" />\n```\n\n## 1.4 Actualización de datos\n\nUn par de ejemplo más para acabar de entender la mecánica básica de `HttpClient`. Podemos fijar el tipo de datos esperado en cualquier llamada. De hecho es recomendable que tengas un interfaz para cada respuesta esperada.\n\nEn este tutorial no se ha hecho y no quedamos con el `any`, pero al menos distinguimos entre objetos y arrays. Esto es lo que añado al `RatesComponent` para que muestre los datos guardados en mi API.\n\n```typescript\nexport class RatesComponent implements OnInit {\n private ratesByDateApi = 'https://api-base.herokuapp.com/api/pub/rates';\n public ratesByDate: RateByDate[] = null;\n\n\n public getRatesByDate() {\n    this.httpClient\n      .get<RateByDate[]>(this.ratesByDateApi)\n      .subscribe(apiResult => (this.ratesByDate = apiResult));\n  }\n}\n```\nY en la vista, un nuevo botón y una nueva expresión.\n\n```html\n<input value=\"Refresh\" type=\"button\" (click)=\"getRatesByDate()\" />\n<pre>{{ myRates | json }}</pre>\n```\n\nPor último, en plan repaso, un ejemplo de método para borrar.\n\n```typescript\n  public deleteRatesByDate() {\n    this.httpClient.delete(this.ratesByDateApi).subscribe();\n  }\n```\nY su botón en en la vista.\n\n```html\n<input value=\"Delete Rates\" type=\"button\" (click)=\"deleteRatesByDate()\" />\n```\n\nY hasta aquí lo básico de comunicaciones *http*. ¿Fácil verdad?. Pero la vida real raramente es tan sencilla. Si quieres enfrentarte a algo más duro debes prepararte y dominar los observables *RxJS*.\n\nLo que viene a partir de ahora requerirá tiempo y concentración. Si continúas adelante esto ya no será *your grandpa´s http anymore*.\n\n# 2 Observables\n\nLas **comunicaciones** entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.\n\nEsta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones _AJAX_ basadas en el paso de funciones _callback_. La aparición de las _promises_ mejoró la claridad del código, y ahora con los _Observables_ tenemos además una gran potencia para manipular la **información asíncrona**.\n\n> El patrón `Observable` fue implementado por Microsoft en la librería [_Reactive Extensions_](http://reactivex.io/intro.html) más conocida como `RxJs`. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.\n\nLo primero es importar el código, de forma similar a cualquier otra clase o función. Por ejemplo para empezar basta con `import { Observable } from \"rxjs/Observable\";`. Tendremos la clase usada por angular para observar el respuesta *http*.\n\nPero esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan el tipo esperado `: Observable<MyClass>`, o si no saben que tipo esperar se conforman con `: Observable<any>`.\n\nEn cualquier caso, **toda operación asíncrona retornará una instancia observable** a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine.\nAunque a veces no se verá el _subscribe_...\n\n## 2.1 Async\n\nPara probar otras formas de presentar datos recibidos desde un API, voy a crear un nuevo componente. El `ObseratesComponent`, mezcla de _observables_ y _rates_.\n\n```shell\nng g c 6-http/rates/obserates\n```\n\nY en su vista HTML usaré una función propia de Angular llamada `async`. Dicha función actúa como un _pipe_ en una expresión. Igual que el `| json`. Pero a su izquierda espera que le den algo a lo que suscribirse; espera un observable.\n\n```html\n<h2> Currency Observable Rates. </h2>\n<h3> From Euro to the $ world </h3>\n<pre>{{ currentEuroRates$ | async | json }}</pre>}\n```\n\nEn este caso uso la propiedad `currentEuroRates$` finalizada en **$** por convenio. Esa propiedad se rellena en el controlador con el método `get`, no con los datos futuros, si no con el propio _observable_.\n\n```typeScript\nprivate ratesApi\n  = 'https://api.exchangeratesapi.io/latest';\npublic currentEuroRates$: Observable<any> = null;\n\nconstructor(private httpClient: HttpClient) {}\n\nngOnInit() {\n  this.getCurrentEuroRates();\n}\n\nprivate getCurrentEuroRates() {\n  const currencies = 'USD,GBP,CHF,JPY';\n  const url = `${this.ratesApi}?symbols=${currencies}`;\n  this.currentEuroRates$ = this.httpClient.get(url);\n}\n```\n> Al utilizar el _pipe async_ ya no es necesaria la suscripción en código. La propia función del framework se ocupa de ello. Por tanto la llamada se realiza igualmente aunque no veamos la suscripción.\n\nEsta es la manera recomendada de consumir datos desde un API. Definir la llamada en el controlador y pasarle el observable a la vista para que lo muestre cuando obtenga los datos.\n\n\n## 2.2 Pipe\n\n### Tuberías en RxJS .pipe()\n\nLos datos devueltos raramente vienen en el formato preciso para usar en la vista. Con frecuencia hay que transformarlos al vuelo en cuanto se reciben. Recordemos que ***HttpClient* no devuelve los datos tal cual sino un *stream* de estados** de dichos datos. La manipulación será sobre el *stream* no directamente sobre los datos; y, claro, para manipular un torrente hay que encauzarlo en tuberías.\n\nAquí es donde aparece el método `.pipe(operator1, operator2...)` aplicado a un observable. Suele hacerse en lugar, o antes, del `.susbcribe(okCallback, errCallback)`. Este método canaliza una serie de operadores predefinidos que manipulan el chorro de estados observados.\n\nEl operador más utilizado es `map(sourceStream => targetStream)`. Este operador recibe una función *callBack* que será invocada ante cada dato recibido. Esa función tienen que retornar un valor para sustituir al actual y así transformar el contenido del chorro.\n\n```typescript\npublic myRates$: Observable<MyRate[]> = null;\nprivate getCurrentEuroRates() {\n  const url = `${this.ratesApi}?symbols=USD,GBP,CHF,JPY`;\n  this.currentEuroRates$ = this.httpClient.get<ExchangeRates>(url);\n  this.ratesByDate$ = this.currentEuroRates$.pipe(map(this.transformData));\n}\nprivate transformData(exchangeRates: ExchangeRates): RateByDate[] {\n  const currentDate = exchangeRates.date;\n  const currentRates = exchangeRates.rates;\n  const ratesByDate = Object.keys(currentRates).map((keyRate: string) => ({\n    date: currentDate,\n    currency: keyRate,\n    euros: currentRates[keyRate]\n  }));\n  return ratesByDate;\n}\n```\n\n> En este ejemplo partimos de nuevo de un objeto recibido y lo queremos ver como un *array* de objetos. Para ello lo transformamos usado el operador `map`. Este operador ha de importarse de `rxjs/operators` y aplicarse a un observable dentro de su método `.pipe()`. Es el más sencillo y uno de los más utilizados: recibe y emite datos dentro de un stream de eventos observables. Nada que ver, salvo el nombre, con la sencilla función `array.map(callback)`, que recibe y devuelve datos estáticos.\n\n```html\n<pre>{{ ratesByDate$ | async | json }}</pre>\n```\nPor lo demás el consumo se hace igual... pero... tendremos que ver más operadores para solucionar algunos inconvenientes.\n\n## 2.3 Operators\n\nEl código anterior funciona, pero resulta que al haber dos funciones async suscritas provoca que la llamada original se realice dos veces. esto es así porque el segundo observable `ratesByDate$` es una canalización del primero `currentEuroRates$`.\n\nEstos y oros problemas se solucionan usando operadores. Vamos a conocer un par de ellos más y veremos como `pipe(op1, op2,  opn)` los ejecuta a todos en orden.\n\nEl operador `share()` permite compartir el resultado de una primera llamada con subsiguientes suscriptores. Evitando de ese modo la repetición de costosas peticiones http.\n\n```typescript\nprivate getCurrentEuroRates() {\nconst url = `${this.ratesApi}?symbols=USD,GBP,CHF,JPY`;\n  this.currentEuroRates$ = this.httpClient.get(url)\n      .pipe(share());\n  this.ratesByDate$ = this.currentEuroRates$\n      .pipe(\n        tap(d=>console.log(d)),\n        map(this.transformData),\n        tap(t=>console.log(t))\n      );\n}\n```\n\n> El operador `tap(callback)` es similar en nombre al `map()`. Pero la gran diferencia es que está pensado para no manipular los datos que recibe. Los usa y puede causar otros efectos colaterales, pero nunca modifica el propio stream. Es muy utilizado para inspeccionar o auditar el flujo de otros operadores.\n\n\nReconozco que en un primer vistazo este código pueda resultar complejo. Tómate tu tiempo. Fíjate en los datos de entrada y salida de cada función. Esto es solo el principio del trabajo con la librería *RxJS* y la manipulación de *streams de eventos observables*.\n\n# 3. Interceptores\n\nLos interceptores tienen un nombre intimidante pero un propósito sencillo y muy útil: **interceptar todas las comunicaciones http** y ejecutar código personalizado para cada uno. Por ejemplo un gestor centralizado de errores http o el control de los tokens de seguridad de la aplicación.\n\nPero antes de eso habrá que aprender unos conceptos básicos. Vamos a ver un ejemplo sencillo que audite todas las llamadas http. Todo empieza con un servicio:\n\n```console\nng g s rates/AuditInterceptor\n```\n\n## 3.1 La interfaz HttpInterceptor\n\nAl servicio genérico recién creado hay que hacerle cumplir una interfaz `HttpInterceptor` que viene con `HttpClientModule`. Esta interfaz solo necesita un método, el `intercept(req, next)` pero sus tipos e implementación mínima la hacen complicada de entender a la primera.\n\n```typescript\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest }\n  from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuditInterceptorService implements HttpInterceptor {\n  public intercept( req: HttpRequest<any>, next: HttpHandler )\n    : Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n\n  constructor() { }\n}\n```\n\nTodo este código para nada. Porque eso es lo que hace, nada. Eso sí, tampoco rompe ni bloquea nada. Vayamos por partes, primero los parámetros, luego el tipo de la respuesta y por último la implementación\n\n- `req: HttpRequest<any>`  puntero a la petición en curso\n- `next: HttpHandler`  puntero a la siguiente función que maneje la petición\n- `: Observable<HttpEvent<any>>` retornamos un stream de eventos http para cada petición\n- `return next.handle(req);`  que el siguiente procese la petición, sin hacerle nada en absoluto\n\n> Para entenderlo mejor puede ser útil la siguiente analogía. Cuando usas httpClient.get() es como si pides algo a Amazon y te suscribes, es decir esperas el paquete. Pasado el tiempo el paquete llegará o no llegará, pero ya no lo gestionas tú. Con los interceptores es como si espiases cada proceso de tu pedido: stock, picking, packaging, shipping... Cada pedido es tratado en una sucesión de eventos. Con un interceptor observas !todos los eventos de todos los pedidos!\n\n## 3.2 Inversión del control vía token\n\nTenemos un servicio que cumple una interfaz compleja. Pero dicho servicio debe ser proveído en algún módulo antes de ser reclamado como dependencias por alguien. Pero ¿por quién?\n\nTécnicamente lo necesita el propio `HttpClient` del framework. Pero, obviamente, no pueden reclamar por tipo una clase que acabo de inventarme yo. Adelante con la **inversión del control**.\n\nRealmente `HttpClient` depende de algo que por convenio llaman token de tipo `HTTP_INTERCEPTORS`. Nuestro trabajo consiste en que cuando reclame su dependencia, le demos la nuestra. El típico gato por liebre. Así en nuestro módulo pondremos la siguiente configuración.\n\n```TypeScript\nproviders: [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuditInterceptorService,\n    multi: true\n  }\n]\n```\nEl parámetro `multi:true` en este caso le indica que puede haber más de un interceptor. Concretamente debe añadirlo a la lista y admitir más. Hecho esto, sobraría el `providedIn: 'root'` autogenerado en el decorador del servicio.\n\n## 3.3 Un auditor de llamadas\n\nPues ya estamos listos para aportar algo de funcionalidad. Nuestro objetivo es escribir en el _log_ un texto para cada llamada terminada y el tiempo que le tomó. La idea es aprovechar que todo es un _stream_ observable y canalizarlo en una tubería con una serie de operadores.\n\n```Typescript\nexport class AuditInterceptorService implements HttpInterceptor {\n  constructor() {}\n\n  public intercept(req: HttpRequest<any>, next: HttpHandler){\n    const started = Date.now();\n    return next.handle(req).pipe(\n      filter((event: HttpEvent<any>) => event instanceof HttpResponse),\n      tap((resp: HttpResponse<any>) => this.auditEvent(resp, started))\n    );\n  }\n\n  private auditEvent(resp: HttpResponse<any>, started: number) {\n    const elapsedMs = Date.now() - started;\n    const eventMessage = resp.statusText + ' on ' + resp.url;\n    const message = eventMessage + ' in ' + elapsedMs + 'ms';\n    console.log(message);\n  }\n}\n```\n\nEl operador `filter(any=>bool)` se usa para descartar eventos que no cumplan unos criterios. En mi caso sólo me interesan los eventos de recepción de la petición, y no necesito los intermedios. Uso de nuevo el `tap(callback)` para hacer cosas con los datos sin modificarlos en absoluto. En este caso los envío al método `auditEvent` para que lo saque por consola. Listo: un auditor para todas las llamadas.\n\nYa tenemos el programa comunicado por _http_ con un servidor; aunque por ahora de forma anónima y sin ninguna seguridad. Con el conocimiento actual de los observables, del _httpClient_ y de los interceptores ya estamos cerca de resolverlo. Sigue esta serie para añadirle [vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/) mientras aprendes a programar con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"comunicaciones-http-en-Angular","published":1,"updated":"2019-08-05T11:37:44.362Z","_id":"cjyh5p4b0000h18s3ng15z9l3","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-6_http.png\" alt=\"comunicaciones-http-en-Angular\"></p><p>Las comunicaciones <em>http</em> son una pieza fundamental del desarrollo web, y en <strong>Angular</strong> siempre han sido potentes y fáciles. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas… y además la librería <em>RxJS</em> y sus <em>streams</em> son intimidantes para los novatos.</p><p>Pero en la versión Angular 8 <strong>consumir un servicio REST</strong> puede ser cosa de niños si aprendes a jugar con los <em>observables</em> y los servicios de la librería <code>@angular/common/http</code>. Conseguirás realizar <strong>comunicaciones http asíncronas en Angular</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a>. Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST usando las tecnologías de Angular Http.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/6-http/rates\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/6-http</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-El-servicio-HttpClient\"><a href=\"#1-El-servicio-HttpClient\" class=\"headerlink\" title=\"1. El servicio HttpClient\"></a>1. El servicio HttpClient</h1><p>Como demostración vamos a consumir un API pública con datos de <a href=\"https://exchangeratesapi.io/\" target=\"_blank\" rel=\"noopener\">cotización de monedas</a>. Crearé un módulo y un componente en el que visualizar las divisas y después las transformaremos para guardarlas en un servicio propio.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m 6-http/rates --routing true</span><br><span class=\"line\">ng g c 6-http/rates/rates</span><br></pre></td></tr></table></figure><h2 id=\"1-1-Importacion-y-declaracion-de-servicios\"><a href=\"#1-1-Importacion-y-declaracion-de-servicios\" class=\"headerlink\" title=\"1.1 Importación y declaración de servicios\"></a>1.1 Importación y declaración de servicios</h2><p>La librería <code>@angular/common/http</code> trae el módulo <code>HttpClientModule</code> con el servicio inyectable <code>HttpClient</code>. Lo primero es importar dicho módulo.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClientModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [RatesComponent],</span><br><span class=\"line\">  imports: [HttpClientModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>En tu componente tienes que reclamar la dependencia al servicio para poder usarla. Atención a la importación pues hay más clases con el nombre <code>HttpClient</code>. Debe quedar algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-rates'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./rates.component.html'</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>A partir de este momento sólo queda invocar los métodos REST en la propiedad <code>this.http</code>.</p><h2 id=\"1-2-Obtencion-de-datos\"><a href=\"#1-2-Obtencion-de-datos\" class=\"headerlink\" title=\"1.2 Obtención de datos\"></a>1.2 Obtención de datos</h2><p>Para cada verbo <em>http</em> tenemos su método en el servicio <code>HttpClient</code>. Su primer parámetro será la <em>url</em> a la que invocar. Empecemos por el <code>get</code> que automáticamente solicita y devuelve objetos <em>JSON</em> desde un API. Por ejemplo para obtener <a href=\"https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CHF,JPY\" target=\"_blank\" rel=\"noopener\">las últimas cotizaciones de las principales divisas</a> lo haremos así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> urlapi</span><br><span class=\"line\">    = <span class=\"string\">'https://api.exchangeratesapi.io/latest'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> currentEuroRates: <span class=\"built_in\">any</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getCurrentEuroRates();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getCurrentEuroRates() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currencies = <span class=\"string\">'USD,GBP,CHF,JPY'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;this.urlapi&#125;</span>?symbols=<span class=\"subst\">$&#123;currencies&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.httpClient</span><br><span class=\"line\">      .get(url)</span><br><span class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">apiData</span> =&gt;</span> (<span class=\"keyword\">this</span>.currentEuroRates = apiData));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El método <em>get</em> retorna un objeto observable. Los observables <em>http</em> han de consumirse mediante el método <em>subscribe</em> para que realmente se lancen. Dicho método <em>subscribe</em> admite hasta tres <em>callbacks</em>: <code>susbcribe(data, err, end)</code> para que se ejecuten en respuesta a eventos. En este ejemplo solo hemos usado el primero.</p></blockquote><p>La presentación en la vista sólo tiene que acceder a la propiedad dónde se hayan cargado las respuestas tratadas en el <em>callback</em> de la suscripción.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Currency Rates. <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> From Euro to the world <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; currentEuroRates | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"1-3-Envio-de-datos\"><a href=\"#1-3-Envio-de-datos\" class=\"headerlink\" title=\"1.3 Envío de datos\"></a>1.3 Envío de datos</h2><p>Supongamos que, una vez recibidas las cotizaciones, pretendemos transformarlas y almacenarlas en otro servicio. Por ejemplo un objeto para cada día y moneda. El envío en este caso será con el método <em>post</em> al que se le pasará la ruta del <em>end point</em> y el objeto <em>payload</em> que se enviará al servidor.</p><p>Vamos a agregar una propiedad y un par de métodos al <code>rates-component.ts</code>. La idea es obtener un array de cotizaciones aa partir del objeto previo, y guardarla una por una.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ratesByDateApi = <span class=\"string\">'https://api-base.herokuapp.com/api/pub/rates'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> postRatesByDate() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ratesByDate: RateByDate[] = <span class=\"keyword\">this</span>.transformExchangeRates();</span><br><span class=\"line\">    ratesByDate.forEach(<span class=\"function\"><span class=\"params\">rate</span> =&gt;</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.httpClient.post&lt;RateByDate&gt;(<span class=\"keyword\">this</span>.ratesByDateApi, rate).subscribe()</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> transformExchangeRates(): RateByDate[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentDate = <span class=\"keyword\">this</span>.currentEuroRates.date;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentRates = <span class=\"keyword\">this</span>.currentEuroRates.rates;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ratesByDate = <span class=\"built_in\">Object</span>.keys(currentRates).map(<span class=\"function\">(<span class=\"params\">keyRate: <span class=\"built_in\">string</span></span>) =&gt;</span> (&#123;</span><br><span class=\"line\">      date: currentDate,</span><br><span class=\"line\">      currency: keyRate,</span><br><span class=\"line\">      euros: currentRates[keyRate]</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ratesByDate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Atención a los métodos <code>subscribe()</code>. Aunque vayan vacíos son imprescindibles para que se ejecute la llamada.</p></blockquote><p>En la vista no hay gran cosa que hacer, salvo agregarle un botón para iniciar el proceso:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Save Rates\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"postRatesByDate()\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"1-4-Actualizacion-de-datos\"><a href=\"#1-4-Actualizacion-de-datos\" class=\"headerlink\" title=\"1.4 Actualización de datos\"></a>1.4 Actualización de datos</h2><p>Un par de ejemplo más para acabar de entender la mecánica básica de <code>HttpClient</code>. Podemos fijar el tipo de datos esperado en cualquier llamada. De hecho es recomendable que tengas un interfaz para cada respuesta esperada.</p><p>En este tutorial no se ha hecho y no quedamos con el <code>any</code>, pero al menos distinguimos entre objetos y arrays. Esto es lo que añado al <code>RatesComponent</code> para que muestre los datos guardados en mi API.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> ratesByDateApi = <span class=\"string\">'https://api-base.herokuapp.com/api/pub/rates'</span>;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> ratesByDate: RateByDate[] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> getRatesByDate() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.httpClient</span><br><span class=\"line\">      .get&lt;RateByDate[]&gt;(<span class=\"keyword\">this</span>.ratesByDateApi)</span><br><span class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">apiResult</span> =&gt;</span> (<span class=\"keyword\">this</span>.ratesByDate = apiResult));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y en la vista, un nuevo botón y una nueva expresión.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Refresh\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"getRatesByDate()\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; myRates | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Por último, en plan repaso, un ejemplo de método para borrar.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> deleteRatesByDate() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpClient.delete(<span class=\"keyword\">this</span>.ratesByDateApi).subscribe();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y su botón en en la vista.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Delete Rates\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteRatesByDate()\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Y hasta aquí lo básico de comunicaciones <em>http</em>. ¿Fácil verdad?. Pero la vida real raramente es tan sencilla. Si quieres enfrentarte a algo más duro debes prepararte y dominar los observables <em>RxJS</em>.</p><p>Lo que viene a partir de ahora requerirá tiempo y concentración. Si continúas adelante esto ya no será <em>your grandpa´s http anymore</em>.</p><h1 id=\"2-Observables\"><a href=\"#2-Observables\" class=\"headerlink\" title=\"2 Observables\"></a>2 Observables</h1><p>Las <strong>comunicaciones</strong> entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.</p><p>Esta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones <em>AJAX</em> basadas en el paso de funciones <em>callback</em>. La aparición de las <em>promises</em> mejoró la claridad del código, y ahora con los <em>Observables</em> tenemos además una gran potencia para manipular la <strong>información asíncrona</strong>.</p><blockquote><p>El patrón <code>Observable</code> fue implementado por Microsoft en la librería <a href=\"http://reactivex.io/intro.html\" target=\"_blank\" rel=\"noopener\"><em>Reactive Extensions</em></a> más conocida como <code>RxJs</code>. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.</p></blockquote><p>Lo primero es importar el código, de forma similar a cualquier otra clase o función. Por ejemplo para empezar basta con <code>import { Observable } from &quot;rxjs/Observable&quot;;</code>. Tendremos la clase usada por angular para observar el respuesta <em>http</em>.</p><p>Pero esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan el tipo esperado <code>: Observable&lt;MyClass&gt;</code>, o si no saben que tipo esperar se conforman con <code>: Observable&lt;any&gt;</code>.</p><p>En cualquier caso, <strong>toda operación asíncrona retornará una instancia observable</strong> a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine.<br>Aunque a veces no se verá el <em>subscribe</em>…</p><h2 id=\"2-1-Async\"><a href=\"#2-1-Async\" class=\"headerlink\" title=\"2.1 Async\"></a>2.1 Async</h2><p>Para probar otras formas de presentar datos recibidos desde un API, voy a crear un nuevo componente. El <code>ObseratesComponent</code>, mezcla de <em>observables</em> y <em>rates</em>.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c 6-http/rates/obserates</span><br></pre></td></tr></table></figure><p>Y en su vista HTML usaré una función propia de Angular llamada <code>async</code>. Dicha función actúa como un <em>pipe</em> en una expresión. Igual que el <code>| json</code>. Pero a su izquierda espera que le den algo a lo que suscribirse; espera un observable.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Currency Observable Rates. <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> From Euro to the $ world <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; currentEuroRates$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span>&#125;</span><br></pre></td></tr></table></figure><p>En este caso uso la propiedad <code>currentEuroRates$</code> finalizada en <strong>$</strong> por convenio. Esa propiedad se rellena en el controlador con el método <code>get</code>, no con los datos futuros, si no con el propio <em>observable</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ratesApi</span><br><span class=\"line\">  = <span class=\"string\">'https://api.exchangeratesapi.io/latest'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> currentEuroRates$: Observable&lt;<span class=\"built_in\">any</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getCurrentEuroRates();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> getCurrentEuroRates() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currencies = <span class=\"string\">'USD,GBP,CHF,JPY'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;this.ratesApi&#125;</span>?symbols=<span class=\"subst\">$&#123;currencies&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.currentEuroRates$ = <span class=\"keyword\">this</span>.httpClient.get(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Al utilizar el <em>pipe async</em> ya no es necesaria la suscripción en código. La propia función del framework se ocupa de ello. Por tanto la llamada se realiza igualmente aunque no veamos la suscripción.</p></blockquote><p>Esta es la manera recomendada de consumir datos desde un API. Definir la llamada en el controlador y pasarle el observable a la vista para que lo muestre cuando obtenga los datos.</p><h2 id=\"2-2-Pipe\"><a href=\"#2-2-Pipe\" class=\"headerlink\" title=\"2.2 Pipe\"></a>2.2 Pipe</h2><h3 id=\"Tuberias-en-RxJS-pipe\"><a href=\"#Tuberias-en-RxJS-pipe\" class=\"headerlink\" title=\"Tuberías en RxJS .pipe()\"></a>Tuberías en RxJS .pipe()</h3><p>Los datos devueltos raramente vienen en el formato preciso para usar en la vista. Con frecuencia hay que transformarlos al vuelo en cuanto se reciben. Recordemos que <strong><em>HttpClient</em> no devuelve los datos tal cual sino un <em>stream</em> de estados</strong> de dichos datos. La manipulación será sobre el <em>stream</em> no directamente sobre los datos; y, claro, para manipular un torrente hay que encauzarlo en tuberías.</p><p>Aquí es donde aparece el método <code>.pipe(operator1, operator2...)</code> aplicado a un observable. Suele hacerse en lugar, o antes, del <code>.susbcribe(okCallback, errCallback)</code>. Este método canaliza una serie de operadores predefinidos que manipulan el chorro de estados observados.</p><p>El operador más utilizado es <code>map(sourceStream =&gt; targetStream)</code>. Este operador recibe una función <em>callBack</em> que será invocada ante cada dato recibido. Esa función tienen que retornar un valor para sustituir al actual y así transformar el contenido del chorro.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> myRates$: Observable&lt;MyRate[]&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> getCurrentEuroRates() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;this.ratesApi&#125;</span>?symbols=USD,GBP,CHF,JPY`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.currentEuroRates$ = <span class=\"keyword\">this</span>.httpClient.get&lt;ExchangeRates&gt;(url);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ratesByDate$ = <span class=\"keyword\">this</span>.currentEuroRates$.pipe(map(<span class=\"keyword\">this</span>.transformData));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> transformData(exchangeRates: ExchangeRates): RateByDate[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentDate = exchangeRates.date;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentRates = exchangeRates.rates;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ratesByDate = <span class=\"built_in\">Object</span>.keys(currentRates).map(<span class=\"function\">(<span class=\"params\">keyRate: <span class=\"built_in\">string</span></span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    date: currentDate,</span><br><span class=\"line\">    currency: keyRate,</span><br><span class=\"line\">    euros: currentRates[keyRate]</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ratesByDate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>En este ejemplo partimos de nuevo de un objeto recibido y lo queremos ver como un <em>array</em> de objetos. Para ello lo transformamos usado el operador <code>map</code>. Este operador ha de importarse de <code>rxjs/operators</code> y aplicarse a un observable dentro de su método <code>.pipe()</code>. Es el más sencillo y uno de los más utilizados: recibe y emite datos dentro de un stream de eventos observables. Nada que ver, salvo el nombre, con la sencilla función <code>array.map(callback)</code>, que recibe y devuelve datos estáticos.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; ratesByDate$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Por lo demás el consumo se hace igual… pero… tendremos que ver más operadores para solucionar algunos inconvenientes.</p><h2 id=\"2-3-Operators\"><a href=\"#2-3-Operators\" class=\"headerlink\" title=\"2.3 Operators\"></a>2.3 Operators</h2><p>El código anterior funciona, pero resulta que al haber dos funciones async suscritas provoca que la llamada original se realice dos veces. esto es así porque el segundo observable <code>ratesByDate$</code> es una canalización del primero <code>currentEuroRates$</code>.</p><p>Estos y oros problemas se solucionan usando operadores. Vamos a conocer un par de ellos más y veremos como <code>pipe(op1, op2, opn)</code> los ejecuta a todos en orden.</p><p>El operador <code>share()</code> permite compartir el resultado de una primera llamada con subsiguientes suscriptores. Evitando de ese modo la repetición de costosas peticiones http.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> getCurrentEuroRates() &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;this.ratesApi&#125;</span>?symbols=USD,GBP,CHF,JPY`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.currentEuroRates$ = <span class=\"keyword\">this</span>.httpClient.get(url)</span><br><span class=\"line\">      .pipe(share());</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ratesByDate$ = <span class=\"keyword\">this</span>.currentEuroRates$</span><br><span class=\"line\">      .pipe(</span><br><span class=\"line\">        tap(<span class=\"function\"><span class=\"params\">d</span>=&gt;</span><span class=\"built_in\">console</span>.log(d)),</span><br><span class=\"line\">        map(<span class=\"keyword\">this</span>.transformData),</span><br><span class=\"line\">        tap(<span class=\"function\"><span class=\"params\">t</span>=&gt;</span><span class=\"built_in\">console</span>.log(t))</span><br><span class=\"line\">      );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El operador <code>tap(callback)</code> es similar en nombre al <code>map()</code>. Pero la gran diferencia es que está pensado para no manipular los datos que recibe. Los usa y puede causar otros efectos colaterales, pero nunca modifica el propio stream. Es muy utilizado para inspeccionar o auditar el flujo de otros operadores.</p></blockquote><p>Reconozco que en un primer vistazo este código pueda resultar complejo. Tómate tu tiempo. Fíjate en los datos de entrada y salida de cada función. Esto es solo el principio del trabajo con la librería <em>RxJS</em> y la manipulación de <em>streams de eventos observables</em>.</p><h1 id=\"3-Interceptores\"><a href=\"#3-Interceptores\" class=\"headerlink\" title=\"3. Interceptores\"></a>3. Interceptores</h1><p>Los interceptores tienen un nombre intimidante pero un propósito sencillo y muy útil: <strong>interceptar todas las comunicaciones http</strong> y ejecutar código personalizado para cada uno. Por ejemplo un gestor centralizado de errores http o el control de los tokens de seguridad de la aplicación.</p><p>Pero antes de eso habrá que aprender unos conceptos básicos. Vamos a ver un ejemplo sencillo que audite todas las llamadas http. Todo empieza con un servicio:</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s rates/AuditInterceptor</span><br></pre></td></tr></table></figure><h2 id=\"3-1-La-interfaz-HttpInterceptor\"><a href=\"#3-1-La-interfaz-HttpInterceptor\" class=\"headerlink\" title=\"3.1 La interfaz HttpInterceptor\"></a>3.1 La interfaz HttpInterceptor</h2><p>Al servicio genérico recién creado hay que hacerle cumplir una interfaz <code>HttpInterceptor</code> que viene con <code>HttpClientModule</code>. Esta interfaz solo necesita un método, el <code>intercept(req, next)</code> pero sus tipos e implementación mínima la hacen complicada de entender a la primera.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpEvent, HttpHandler, HttpInterceptor, HttpRequest &#125;</span><br><span class=\"line\">  <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuditInterceptorService <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> intercept( req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler )</span><br><span class=\"line\">    : Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(req);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Todo este código para nada. Porque eso es lo que hace, nada. Eso sí, tampoco rompe ni bloquea nada. Vayamos por partes, primero los parámetros, luego el tipo de la respuesta y por último la implementación</p><ul><li><code>req: HttpRequest&lt;any&gt;</code> puntero a la petición en curso</li><li><code>next: HttpHandler</code> puntero a la siguiente función que maneje la petición</li><li><code>: Observable&lt;HttpEvent&lt;any&gt;&gt;</code> retornamos un stream de eventos http para cada petición</li><li><code>return next.handle(req);</code> que el siguiente procese la petición, sin hacerle nada en absoluto</li></ul><blockquote><p>Para entenderlo mejor puede ser útil la siguiente analogía. Cuando usas httpClient.get() es como si pides algo a Amazon y te suscribes, es decir esperas el paquete. Pasado el tiempo el paquete llegará o no llegará, pero ya no lo gestionas tú. Con los interceptores es como si espiases cada proceso de tu pedido: stock, picking, packaging, shipping… Cada pedido es tratado en una sucesión de eventos. Con un interceptor observas !todos los eventos de todos los pedidos!</p></blockquote><h2 id=\"3-2-Inversion-del-control-via-token\"><a href=\"#3-2-Inversion-del-control-via-token\" class=\"headerlink\" title=\"3.2 Inversión del control vía token\"></a>3.2 Inversión del control vía token</h2><p>Tenemos un servicio que cumple una interfaz compleja. Pero dicho servicio debe ser proveído en algún módulo antes de ser reclamado como dependencias por alguien. Pero ¿por quién?</p><p>Técnicamente lo necesita el propio <code>HttpClient</code> del framework. Pero, obviamente, no pueden reclamar por tipo una clase que acabo de inventarme yo. Adelante con la <strong>inversión del control</strong>.</p><p>Realmente <code>HttpClient</code> depende de algo que por convenio llaman token de tipo <code>HTTP_INTERCEPTORS</code>. Nuestro trabajo consiste en que cuando reclame su dependencia, le demos la nuestra. El típico gato por liebre. Así en nuestro módulo pondremos la siguiente configuración.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">providers: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    provide: HTTP_INTERCEPTORS,</span><br><span class=\"line\">    useClass: AuditInterceptorService,</span><br><span class=\"line\">    multi: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><p>El parámetro <code>multi:true</code> en este caso le indica que puede haber más de un interceptor. Concretamente debe añadirlo a la lista y admitir más. Hecho esto, sobraría el <code>providedIn: &#39;root&#39;</code> autogenerado en el decorador del servicio.</p><h2 id=\"3-3-Un-auditor-de-llamadas\"><a href=\"#3-3-Un-auditor-de-llamadas\" class=\"headerlink\" title=\"3.3 Un auditor de llamadas\"></a>3.3 Un auditor de llamadas</h2><p>Pues ya estamos listos para aportar algo de funcionalidad. Nuestro objetivo es escribir en el <em>log</em> un texto para cada llamada terminada y el tiempo que le tomó. La idea es aprovechar que todo es un <em>stream</em> observable y canalizarlo en una tubería con una serie de operadores.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuditInterceptorService <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> started = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(req).pipe(</span><br><span class=\"line\">      filter(<span class=\"function\">(<span class=\"params\">event: HttpEvent&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> event <span class=\"keyword\">instanceof</span> HttpResponse),</span><br><span class=\"line\">      tap(<span class=\"function\">(<span class=\"params\">resp: HttpResponse&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> <span class=\"keyword\">this</span>.auditEvent(resp, started))</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> auditEvent(resp: HttpResponse&lt;<span class=\"built_in\">any</span>&gt;, started: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> elapsedMs = <span class=\"built_in\">Date</span>.now() - started;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventMessage = resp.statusText + <span class=\"string\">' on '</span> + resp.url;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = eventMessage + <span class=\"string\">' in '</span> + elapsedMs + <span class=\"string\">'ms'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>El operador <code>filter(any=&gt;bool)</code> se usa para descartar eventos que no cumplan unos criterios. En mi caso sólo me interesan los eventos de recepción de la petición, y no necesito los intermedios. Uso de nuevo el <code>tap(callback)</code> para hacer cosas con los datos sin modificarlos en absoluto. En este caso los envío al método <code>auditEvent</code> para que lo saque por consola. Listo: un auditor para todas las llamadas.</p><p>Ya tenemos el programa comunicado por <em>http</em> con un servidor; aunque por ahora de forma anónima y sin ninguna seguridad. Con el conocimiento actual de los observables, del <em>httpClient</em> y de los interceptores ya estamos cerca de resolverlo. Sigue esta serie para añadirle <a href=\"../vigilancia-y-seguridad-en-Angular/\">vigilancia y seguridad en Angular</a> mientras aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-6_http.png\" alt=\"comunicaciones-http-en-Angular\"></p><p>Las comunicaciones <em>http</em> son una pieza fundamental del desarrollo web, y en <strong>Angular</strong> siempre han sido potentes y fáciles. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas… y además la librería <em>RxJS</em> y sus <em>streams</em> son intimidantes para los novatos.</p><p>Pero en la versión Angular 8 <strong>consumir un servicio REST</strong> puede ser cosa de niños si aprendes a jugar con los <em>observables</em> y los servicios de la librería <code>@angular/common/http</code>. Conseguirás realizar <strong>comunicaciones http asíncronas en Angular</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../servicios-inyectables-en-Angular/\">Servicios inyectables en Angular</a>. Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST usando las tecnologías de Angular Http.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/6-http/rates\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/6-http</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-El-servicio-HttpClient\"><a href=\"#1-El-servicio-HttpClient\" class=\"headerlink\" title=\"1. El servicio HttpClient\"></a>1. El servicio HttpClient</h1><p>Como demostración vamos a consumir un API pública con datos de <a href=\"https://exchangeratesapi.io/\" target=\"_blank\" rel=\"noopener\">cotización de monedas</a>. Crearé un módulo y un componente en el que visualizar las divisas y después las transformaremos para guardarlas en un servicio propio.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m 6-http/rates --routing true</span><br><span class=\"line\">ng g c 6-http/rates/rates</span><br></pre></td></tr></table></figure><h2 id=\"1-1-Importacion-y-declaracion-de-servicios\"><a href=\"#1-1-Importacion-y-declaracion-de-servicios\" class=\"headerlink\" title=\"1.1 Importación y declaración de servicios\"></a>1.1 Importación y declaración de servicios</h2><p>La librería <code>@angular/common/http</code> trae el módulo <code>HttpClientModule</code> con el servicio inyectable <code>HttpClient</code>. Lo primero es importar dicho módulo.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClientModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [RatesComponent],</span><br><span class=\"line\">  imports: [HttpClientModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>En tu componente tienes que reclamar la dependencia al servicio para poder usarla. Atención a la importación pues hay más clases con el nombre <code>HttpClient</code>. Debe quedar algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-rates'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./rates.component.html'</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>A partir de este momento sólo queda invocar los métodos REST en la propiedad <code>this.http</code>.</p><h2 id=\"1-2-Obtencion-de-datos\"><a href=\"#1-2-Obtencion-de-datos\" class=\"headerlink\" title=\"1.2 Obtención de datos\"></a>1.2 Obtención de datos</h2><p>Para cada verbo <em>http</em> tenemos su método en el servicio <code>HttpClient</code>. Su primer parámetro será la <em>url</em> a la que invocar. Empecemos por el <code>get</code> que automáticamente solicita y devuelve objetos <em>JSON</em> desde un API. Por ejemplo para obtener <a href=\"https://api.exchangeratesapi.io/latest?symbols=USD,GBP,CHF,JPY\" target=\"_blank\" rel=\"noopener\">las últimas cotizaciones de las principales divisas</a> lo haremos así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> urlapi</span><br><span class=\"line\">    = <span class=\"string\">'https://api.exchangeratesapi.io/latest'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> currentEuroRates: <span class=\"built_in\">any</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getCurrentEuroRates();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getCurrentEuroRates() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currencies = <span class=\"string\">'USD,GBP,CHF,JPY'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;this.urlapi&#125;</span>?symbols=<span class=\"subst\">$&#123;currencies&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.httpClient</span><br><span class=\"line\">      .get(url)</span><br><span class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">apiData</span> =&gt;</span> (<span class=\"keyword\">this</span>.currentEuroRates = apiData));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El método <em>get</em> retorna un objeto observable. Los observables <em>http</em> han de consumirse mediante el método <em>subscribe</em> para que realmente se lancen. Dicho método <em>subscribe</em> admite hasta tres <em>callbacks</em>: <code>susbcribe(data, err, end)</code> para que se ejecuten en respuesta a eventos. En este ejemplo solo hemos usado el primero.</p></blockquote><p>La presentación en la vista sólo tiene que acceder a la propiedad dónde se hayan cargado las respuestas tratadas en el <em>callback</em> de la suscripción.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Currency Rates. <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> From Euro to the world <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; currentEuroRates | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"1-3-Envio-de-datos\"><a href=\"#1-3-Envio-de-datos\" class=\"headerlink\" title=\"1.3 Envío de datos\"></a>1.3 Envío de datos</h2><p>Supongamos que, una vez recibidas las cotizaciones, pretendemos transformarlas y almacenarlas en otro servicio. Por ejemplo un objeto para cada día y moneda. El envío en este caso será con el método <em>post</em> al que se le pasará la ruta del <em>end point</em> y el objeto <em>payload</em> que se enviará al servidor.</p><p>Vamos a agregar una propiedad y un par de métodos al <code>rates-component.ts</code>. La idea es obtener un array de cotizaciones aa partir del objeto previo, y guardarla una por una.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ratesByDateApi = <span class=\"string\">'https://api-base.herokuapp.com/api/pub/rates'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> postRatesByDate() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ratesByDate: RateByDate[] = <span class=\"keyword\">this</span>.transformExchangeRates();</span><br><span class=\"line\">    ratesByDate.forEach(<span class=\"function\"><span class=\"params\">rate</span> =&gt;</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.httpClient.post&lt;RateByDate&gt;(<span class=\"keyword\">this</span>.ratesByDateApi, rate).subscribe()</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> transformExchangeRates(): RateByDate[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentDate = <span class=\"keyword\">this</span>.currentEuroRates.date;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentRates = <span class=\"keyword\">this</span>.currentEuroRates.rates;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ratesByDate = <span class=\"built_in\">Object</span>.keys(currentRates).map(<span class=\"function\">(<span class=\"params\">keyRate: <span class=\"built_in\">string</span></span>) =&gt;</span> (&#123;</span><br><span class=\"line\">      date: currentDate,</span><br><span class=\"line\">      currency: keyRate,</span><br><span class=\"line\">      euros: currentRates[keyRate]</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ratesByDate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Atención a los métodos <code>subscribe()</code>. Aunque vayan vacíos son imprescindibles para que se ejecute la llamada.</p></blockquote><p>En la vista no hay gran cosa que hacer, salvo agregarle un botón para iniciar el proceso:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Save Rates\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"postRatesByDate()\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"1-4-Actualizacion-de-datos\"><a href=\"#1-4-Actualizacion-de-datos\" class=\"headerlink\" title=\"1.4 Actualización de datos\"></a>1.4 Actualización de datos</h2><p>Un par de ejemplo más para acabar de entender la mecánica básica de <code>HttpClient</code>. Podemos fijar el tipo de datos esperado en cualquier llamada. De hecho es recomendable que tengas un interfaz para cada respuesta esperada.</p><p>En este tutorial no se ha hecho y no quedamos con el <code>any</code>, pero al menos distinguimos entre objetos y arrays. Esto es lo que añado al <code>RatesComponent</code> para que muestre los datos guardados en mi API.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RatesComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> ratesByDateApi = <span class=\"string\">'https://api-base.herokuapp.com/api/pub/rates'</span>;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> ratesByDate: RateByDate[] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> getRatesByDate() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.httpClient</span><br><span class=\"line\">      .get&lt;RateByDate[]&gt;(<span class=\"keyword\">this</span>.ratesByDateApi)</span><br><span class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">apiResult</span> =&gt;</span> (<span class=\"keyword\">this</span>.ratesByDate = apiResult));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y en la vista, un nuevo botón y una nueva expresión.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Refresh\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"getRatesByDate()\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; myRates | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Por último, en plan repaso, un ejemplo de método para borrar.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> deleteRatesByDate() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpClient.delete(<span class=\"keyword\">this</span>.ratesByDateApi).subscribe();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y su botón en en la vista.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Delete Rates\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"deleteRatesByDate()\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Y hasta aquí lo básico de comunicaciones <em>http</em>. ¿Fácil verdad?. Pero la vida real raramente es tan sencilla. Si quieres enfrentarte a algo más duro debes prepararte y dominar los observables <em>RxJS</em>.</p><p>Lo que viene a partir de ahora requerirá tiempo y concentración. Si continúas adelante esto ya no será <em>your grandpa´s http anymore</em>.</p><h1 id=\"2-Observables\"><a href=\"#2-Observables\" class=\"headerlink\" title=\"2 Observables\"></a>2 Observables</h1><p>Las <strong>comunicaciones</strong> entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.</p><p>Esta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones <em>AJAX</em> basadas en el paso de funciones <em>callback</em>. La aparición de las <em>promises</em> mejoró la claridad del código, y ahora con los <em>Observables</em> tenemos además una gran potencia para manipular la <strong>información asíncrona</strong>.</p><blockquote><p>El patrón <code>Observable</code> fue implementado por Microsoft en la librería <a href=\"http://reactivex.io/intro.html\" target=\"_blank\" rel=\"noopener\"><em>Reactive Extensions</em></a> más conocida como <code>RxJs</code>. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.</p></blockquote><p>Lo primero es importar el código, de forma similar a cualquier otra clase o función. Por ejemplo para empezar basta con <code>import { Observable } from &quot;rxjs/Observable&quot;;</code>. Tendremos la clase usada por angular para observar el respuesta <em>http</em>.</p><p>Pero esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan el tipo esperado <code>: Observable&lt;MyClass&gt;</code>, o si no saben que tipo esperar se conforman con <code>: Observable&lt;any&gt;</code>.</p><p>En cualquier caso, <strong>toda operación asíncrona retornará una instancia observable</strong> a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine.<br>Aunque a veces no se verá el <em>subscribe</em>…</p><h2 id=\"2-1-Async\"><a href=\"#2-1-Async\" class=\"headerlink\" title=\"2.1 Async\"></a>2.1 Async</h2><p>Para probar otras formas de presentar datos recibidos desde un API, voy a crear un nuevo componente. El <code>ObseratesComponent</code>, mezcla de <em>observables</em> y <em>rates</em>.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c 6-http/rates/obserates</span><br></pre></td></tr></table></figure><p>Y en su vista HTML usaré una función propia de Angular llamada <code>async</code>. Dicha función actúa como un <em>pipe</em> en una expresión. Igual que el <code>| json</code>. Pero a su izquierda espera que le den algo a lo que suscribirse; espera un observable.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span> Currency Observable Rates. <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span> From Euro to the $ world <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; currentEuroRates$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span>&#125;</span><br></pre></td></tr></table></figure><p>En este caso uso la propiedad <code>currentEuroRates$</code> finalizada en <strong>$</strong> por convenio. Esa propiedad se rellena en el controlador con el método <code>get</code>, no con los datos futuros, si no con el propio <em>observable</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ratesApi</span><br><span class=\"line\">  = <span class=\"string\">'https://api.exchangeratesapi.io/latest'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> currentEuroRates$: Observable&lt;<span class=\"built_in\">any</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> httpClient: HttpClient</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getCurrentEuroRates();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> getCurrentEuroRates() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currencies = <span class=\"string\">'USD,GBP,CHF,JPY'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;this.ratesApi&#125;</span>?symbols=<span class=\"subst\">$&#123;currencies&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.currentEuroRates$ = <span class=\"keyword\">this</span>.httpClient.get(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Al utilizar el <em>pipe async</em> ya no es necesaria la suscripción en código. La propia función del framework se ocupa de ello. Por tanto la llamada se realiza igualmente aunque no veamos la suscripción.</p></blockquote><p>Esta es la manera recomendada de consumir datos desde un API. Definir la llamada en el controlador y pasarle el observable a la vista para que lo muestre cuando obtenga los datos.</p><h2 id=\"2-2-Pipe\"><a href=\"#2-2-Pipe\" class=\"headerlink\" title=\"2.2 Pipe\"></a>2.2 Pipe</h2><h3 id=\"Tuberias-en-RxJS-pipe\"><a href=\"#Tuberias-en-RxJS-pipe\" class=\"headerlink\" title=\"Tuberías en RxJS .pipe()\"></a>Tuberías en RxJS .pipe()</h3><p>Los datos devueltos raramente vienen en el formato preciso para usar en la vista. Con frecuencia hay que transformarlos al vuelo en cuanto se reciben. Recordemos que <strong><em>HttpClient</em> no devuelve los datos tal cual sino un <em>stream</em> de estados</strong> de dichos datos. La manipulación será sobre el <em>stream</em> no directamente sobre los datos; y, claro, para manipular un torrente hay que encauzarlo en tuberías.</p><p>Aquí es donde aparece el método <code>.pipe(operator1, operator2...)</code> aplicado a un observable. Suele hacerse en lugar, o antes, del <code>.susbcribe(okCallback, errCallback)</code>. Este método canaliza una serie de operadores predefinidos que manipulan el chorro de estados observados.</p><p>El operador más utilizado es <code>map(sourceStream =&gt; targetStream)</code>. Este operador recibe una función <em>callBack</em> que será invocada ante cada dato recibido. Esa función tienen que retornar un valor para sustituir al actual y así transformar el contenido del chorro.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> myRates$: Observable&lt;MyRate[]&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> getCurrentEuroRates() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;this.ratesApi&#125;</span>?symbols=USD,GBP,CHF,JPY`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.currentEuroRates$ = <span class=\"keyword\">this</span>.httpClient.get&lt;ExchangeRates&gt;(url);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ratesByDate$ = <span class=\"keyword\">this</span>.currentEuroRates$.pipe(map(<span class=\"keyword\">this</span>.transformData));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> transformData(exchangeRates: ExchangeRates): RateByDate[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentDate = exchangeRates.date;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentRates = exchangeRates.rates;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ratesByDate = <span class=\"built_in\">Object</span>.keys(currentRates).map(<span class=\"function\">(<span class=\"params\">keyRate: <span class=\"built_in\">string</span></span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    date: currentDate,</span><br><span class=\"line\">    currency: keyRate,</span><br><span class=\"line\">    euros: currentRates[keyRate]</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ratesByDate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>En este ejemplo partimos de nuevo de un objeto recibido y lo queremos ver como un <em>array</em> de objetos. Para ello lo transformamos usado el operador <code>map</code>. Este operador ha de importarse de <code>rxjs/operators</code> y aplicarse a un observable dentro de su método <code>.pipe()</code>. Es el más sencillo y uno de los más utilizados: recibe y emite datos dentro de un stream de eventos observables. Nada que ver, salvo el nombre, con la sencilla función <code>array.map(callback)</code>, que recibe y devuelve datos estáticos.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; ratesByDate$ | async | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Por lo demás el consumo se hace igual… pero… tendremos que ver más operadores para solucionar algunos inconvenientes.</p><h2 id=\"2-3-Operators\"><a href=\"#2-3-Operators\" class=\"headerlink\" title=\"2.3 Operators\"></a>2.3 Operators</h2><p>El código anterior funciona, pero resulta que al haber dos funciones async suscritas provoca que la llamada original se realice dos veces. esto es así porque el segundo observable <code>ratesByDate$</code> es una canalización del primero <code>currentEuroRates$</code>.</p><p>Estos y oros problemas se solucionan usando operadores. Vamos a conocer un par de ellos más y veremos como <code>pipe(op1, op2, opn)</code> los ejecuta a todos en orden.</p><p>El operador <code>share()</code> permite compartir el resultado de una primera llamada con subsiguientes suscriptores. Evitando de ese modo la repetición de costosas peticiones http.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> getCurrentEuroRates() &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;this.ratesApi&#125;</span>?symbols=USD,GBP,CHF,JPY`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.currentEuroRates$ = <span class=\"keyword\">this</span>.httpClient.get(url)</span><br><span class=\"line\">      .pipe(share());</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.ratesByDate$ = <span class=\"keyword\">this</span>.currentEuroRates$</span><br><span class=\"line\">      .pipe(</span><br><span class=\"line\">        tap(<span class=\"function\"><span class=\"params\">d</span>=&gt;</span><span class=\"built_in\">console</span>.log(d)),</span><br><span class=\"line\">        map(<span class=\"keyword\">this</span>.transformData),</span><br><span class=\"line\">        tap(<span class=\"function\"><span class=\"params\">t</span>=&gt;</span><span class=\"built_in\">console</span>.log(t))</span><br><span class=\"line\">      );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El operador <code>tap(callback)</code> es similar en nombre al <code>map()</code>. Pero la gran diferencia es que está pensado para no manipular los datos que recibe. Los usa y puede causar otros efectos colaterales, pero nunca modifica el propio stream. Es muy utilizado para inspeccionar o auditar el flujo de otros operadores.</p></blockquote><p>Reconozco que en un primer vistazo este código pueda resultar complejo. Tómate tu tiempo. Fíjate en los datos de entrada y salida de cada función. Esto es solo el principio del trabajo con la librería <em>RxJS</em> y la manipulación de <em>streams de eventos observables</em>.</p><h1 id=\"3-Interceptores\"><a href=\"#3-Interceptores\" class=\"headerlink\" title=\"3. Interceptores\"></a>3. Interceptores</h1><p>Los interceptores tienen un nombre intimidante pero un propósito sencillo y muy útil: <strong>interceptar todas las comunicaciones http</strong> y ejecutar código personalizado para cada uno. Por ejemplo un gestor centralizado de errores http o el control de los tokens de seguridad de la aplicación.</p><p>Pero antes de eso habrá que aprender unos conceptos básicos. Vamos a ver un ejemplo sencillo que audite todas las llamadas http. Todo empieza con un servicio:</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s rates/AuditInterceptor</span><br></pre></td></tr></table></figure><h2 id=\"3-1-La-interfaz-HttpInterceptor\"><a href=\"#3-1-La-interfaz-HttpInterceptor\" class=\"headerlink\" title=\"3.1 La interfaz HttpInterceptor\"></a>3.1 La interfaz HttpInterceptor</h2><p>Al servicio genérico recién creado hay que hacerle cumplir una interfaz <code>HttpInterceptor</code> que viene con <code>HttpClientModule</code>. Esta interfaz solo necesita un método, el <code>intercept(req, next)</code> pero sus tipos e implementación mínima la hacen complicada de entender a la primera.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpEvent, HttpHandler, HttpInterceptor, HttpRequest &#125;</span><br><span class=\"line\">  <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuditInterceptorService <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> intercept( req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler )</span><br><span class=\"line\">    : Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(req);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Todo este código para nada. Porque eso es lo que hace, nada. Eso sí, tampoco rompe ni bloquea nada. Vayamos por partes, primero los parámetros, luego el tipo de la respuesta y por último la implementación</p><ul><li><code>req: HttpRequest&lt;any&gt;</code> puntero a la petición en curso</li><li><code>next: HttpHandler</code> puntero a la siguiente función que maneje la petición</li><li><code>: Observable&lt;HttpEvent&lt;any&gt;&gt;</code> retornamos un stream de eventos http para cada petición</li><li><code>return next.handle(req);</code> que el siguiente procese la petición, sin hacerle nada en absoluto</li></ul><blockquote><p>Para entenderlo mejor puede ser útil la siguiente analogía. Cuando usas httpClient.get() es como si pides algo a Amazon y te suscribes, es decir esperas el paquete. Pasado el tiempo el paquete llegará o no llegará, pero ya no lo gestionas tú. Con los interceptores es como si espiases cada proceso de tu pedido: stock, picking, packaging, shipping… Cada pedido es tratado en una sucesión de eventos. Con un interceptor observas !todos los eventos de todos los pedidos!</p></blockquote><h2 id=\"3-2-Inversion-del-control-via-token\"><a href=\"#3-2-Inversion-del-control-via-token\" class=\"headerlink\" title=\"3.2 Inversión del control vía token\"></a>3.2 Inversión del control vía token</h2><p>Tenemos un servicio que cumple una interfaz compleja. Pero dicho servicio debe ser proveído en algún módulo antes de ser reclamado como dependencias por alguien. Pero ¿por quién?</p><p>Técnicamente lo necesita el propio <code>HttpClient</code> del framework. Pero, obviamente, no pueden reclamar por tipo una clase que acabo de inventarme yo. Adelante con la <strong>inversión del control</strong>.</p><p>Realmente <code>HttpClient</code> depende de algo que por convenio llaman token de tipo <code>HTTP_INTERCEPTORS</code>. Nuestro trabajo consiste en que cuando reclame su dependencia, le demos la nuestra. El típico gato por liebre. Así en nuestro módulo pondremos la siguiente configuración.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">providers: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    provide: HTTP_INTERCEPTORS,</span><br><span class=\"line\">    useClass: AuditInterceptorService,</span><br><span class=\"line\">    multi: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><p>El parámetro <code>multi:true</code> en este caso le indica que puede haber más de un interceptor. Concretamente debe añadirlo a la lista y admitir más. Hecho esto, sobraría el <code>providedIn: &#39;root&#39;</code> autogenerado en el decorador del servicio.</p><h2 id=\"3-3-Un-auditor-de-llamadas\"><a href=\"#3-3-Un-auditor-de-llamadas\" class=\"headerlink\" title=\"3.3 Un auditor de llamadas\"></a>3.3 Un auditor de llamadas</h2><p>Pues ya estamos listos para aportar algo de funcionalidad. Nuestro objetivo es escribir en el <em>log</em> un texto para cada llamada terminada y el tiempo que le tomó. La idea es aprovechar que todo es un <em>stream</em> observable y canalizarlo en una tubería con una serie de operadores.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuditInterceptorService <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> started = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(req).pipe(</span><br><span class=\"line\">      filter(<span class=\"function\">(<span class=\"params\">event: HttpEvent&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> event <span class=\"keyword\">instanceof</span> HttpResponse),</span><br><span class=\"line\">      tap(<span class=\"function\">(<span class=\"params\">resp: HttpResponse&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> <span class=\"keyword\">this</span>.auditEvent(resp, started))</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> auditEvent(resp: HttpResponse&lt;<span class=\"built_in\">any</span>&gt;, started: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> elapsedMs = <span class=\"built_in\">Date</span>.now() - started;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventMessage = resp.statusText + <span class=\"string\">' on '</span> + resp.url;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = eventMessage + <span class=\"string\">' in '</span> + elapsedMs + <span class=\"string\">'ms'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>El operador <code>filter(any=&gt;bool)</code> se usa para descartar eventos que no cumplan unos criterios. En mi caso sólo me interesan los eventos de recepción de la petición, y no necesito los intermedios. Uso de nuevo el <code>tap(callback)</code> para hacer cosas con los datos sin modificarlos en absoluto. En este caso los envío al método <code>auditEvent</code> para que lo saque por consola. Listo: un auditor para todas las llamadas.</p><p>Ya tenemos el programa comunicado por <em>http</em> con un servidor; aunque por ahora de forma anónima y sin ninguna seguridad. Con el conocimiento actual de los observables, del <em>httpClient</em> y de los interceptores ya estamos cerca de resolverlo. Sigue esta serie para añadirle <a href=\"../vigilancia-y-seguridad-en-Angular/\">vigilancia y seguridad en Angular</a> mientras aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Vigilancia y seguridad en Angular","date":"2019-03-06T17:49:27.000Z","thumbnail":"/css/images/angular-7_watch.png","_content":"\n![vigilancia-y-seguridad-en-Angular](/images/tutorial-angular-7_watch.png)\n\nLa **vigilancia** de los datos y la información en tiempo real al usuario son dos pilares del desarrollo con Angular en el lado del navegador. La **seguridad** de los datos realmente es una responsabilidad compartida entre el servidor y el cliente.\n\nVeremos ambos aspectos del desarrollo, pues están muy relacionados con la programación asíncrona y el dominio de los observables. Sentaremos las bases para unas **comunicaciones seguras y fluidas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Comunicaciones http en Angular](../comunicaciones-http-en-Angular/). Al finalizar tendrás una aplicación que comunica a los usuarios cualquier información relevante y que gestiona de forma centralizada las respuestas de un servicio REST.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/7-watch](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/7-watch/notifications)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n# 1. Observables para monitorizar datos\n\nHemos visto varias técnicas para comunicar información dentro de una aplicación Angular. Empezamos por conocer el [flujo entre componentes](../flujo-de-datos-entre-componentes-angular/) de una misma rama del DOM. También enviamos datos en los [parámetros de una ruta](../paginas-y-rutas-angular-spa/). Y obviamente podemos usar [un servicio común](../servicios-inyectables-en-Angular/) para guardar información compartida. Pero en este caso, ¿Cuándo se actualiza? ¿Cómo saber si ha cambiado?. Lo resolveremos con `Observables`.\n\nPara ilustrar este tema vamos a crear un sencillo sistema de notificaciones que informe al usuario. Empezaremos creando un módulo para los propósitos de este laboratorio.\n\n```console\nng g m notifications --routing true\nng g c notifications/sender\nng g c notifications/receiver\n```\n\nLo apuntamos al enrutador global `app-routing.module.ts` y asignamos las rutas locales\n\n```typescript\n{\n  path: 'notifications',\n  loadChildren: () => import('./7-watch/notifications/notifications.module').then(m => m.NotificationsModule)\n},\n```\n```typescript\nconst routes: Routes = [\n  {\n    path: 'sender',\n    component: SenderComponent\n  },\n  {\n    path: 'receiver',\n    component: ReceiverComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'sender'\n  }\n];\n```\n\nPor último un enlace en el menú principal `header.component.html` y ya estamos listos para enviar y recibir desde dos componente desacoplados.\n\n```html\n<a routerLink=\"notifications\" class=\"button\">Notifications</a>\n```\n\nPero antes un poco más de observables.\n\n## 1.1 Productores de observables\n\nLa librería [RxJS](https://www.learnrxjs.io/) es enorme y Angular hace un uso extenso de ella. En este tutorial [se ha visto desde el punto de vista del consumidor](../comunicaciones-http-en-Angular). Es decir, nos hemos suscrito a fuentes observables. Para avanzar tendremos que poder emitir, o mejor dicho producir, información.\n\n### Of y from\n\nLos constructores más sencillos de la librería son **funciones que emiten valores estáticos** o secuencias a intervalos regulares. Para familiarizarte con ellos te propongo que juegues con código como este:\n\n```typescript\nvalue$ = of(new Date().getMilliseconds());\nvalue$.subscribe(r=> console.log(r));\nstream$ = from([1, 'two', '***']);\nstream$.subscribe(r=> console.log(r));\nlist$ = of(['N', 'S', 'E', 'W']);\nlist$.subscribe(r=> console.log(r));\n```\n\n### Subject y BehaviorSubject\n\nLos anteriores constructores se basan en datos estáticos. Resuelvan algunas situaciones, pero necesitamos algo que emita **cambios dinámicos**. Y eso se realiza con los _Subjects_, una especie de emisores temáticos a los que suscribirse.\n\nHay varios tipos pero para empezar nos vamos a fijar en dos: el `Subject()` y el `BehaviorSubject(initialData)`. La diferencia es que el primero sólo emite las cosas según ocurren. Si alguien se suscribe tarde no conocerá el pasado. Esto suele generar problemas de sincronización. El _Behavior_ en cambio notifica el último valor conocido a cualquiera que se suscriba. De esa forma no importa si te suscribes antes o después de la obtención de un dato.\n\nJuega con el siguiente ejemplo:\n\n```typescript\nconst data = {name:'', value:0};\n\nconst need_sync$ = new Subject<any>();\n// on time\nneed_sync.subscribe(r=> console.log(r));\nneed_sync.next(data);\n// too late\nneed_sync.subscribe(r=> console.log(r));\n\nconst no_hurry$ = new BehaviorSubject<any>(this.data);\n// its ok\nno_hurry.subscribe(r=> console.log(r));\nno_hurry.next(data);\n// its also ok\nno_hurry.subscribe(r=> console.log(r));\n```\n\n## 1.2 Un Store de notificaciones\n\nUsaremos el `BehaviorSubject` como notificador principal entre componentes de Angular. Por ejemplo podemos montar un sistema de notificaciones sencillo. Empecemos por crear un servicio:\n\n```console\nng g s notifications/notificationsStore\n```\n\n> Para adaptarnos a la nomenclatura usada por patrones de gestión de estado más avanzados como es **Redux**, usaré el siguiente convenio: _Store_ como almacén, _select$()_ como publicador de cambios observable y _dispatch_ como encargado de procesar una acción de cambio de estado.\n\n```typescript\nexport class NotificationsStoreService {\n  private notifications = [];\n  private notifications$ = new BehaviorSubject<any[]>([]);\n\n  constructor() {}\n\n  public select = () => [...this.notifications];\n  public select$ = () => this.notifications$.asObservable();\n\n  public dispatch(notification) {\n    this.notifications.push({ ...notification });\n    this.notifications$.next(this.select());\n  }\n}\n```\n\nEste servicio es la implementación más sencilla posible de un gestor de estados. Cabe destacar que :\n\n- Mantienen el estado privado para evitar manipulaciones\n- Recibe de forma controlada las acciones de cambio\n- Emite clones del estado\n- Expone observables para que se suscriban los interesados.\n\n\n## 1.3 Desacoplados pero conectados\n\nUna vez que hemos centralizado el control de cambios de una parte de la aplicación, es hora de que lo usen los componentes o servicios involucrados. Solo necesitan recibir la instancia vía dependencia. **No hay más acoplamiento entre emisores y receptores.**\n\n### Emisión\n\nVeamos un ejemplo, un tanto forzado,  consistente en dos componentes que se comunican sin conocerse. Esta es la vista con un formulario para enviar mensajes\n\n```html\n<h2>\n  Notes sender\n</h2>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"note\">Note</label>\n      <input name=\"note\"\n             [(ngModel)]=\"notification.note\" />\n    </section>\n  </fieldset>\n  <button (click)=\"send()\">Send</button>\n</form>\n<a [routerLink]=\"['../receiver']\">Go to receiver</a>\n```\n\nLa parte interesante está en el controlador. Dependencia y uso del servicio del almacén de notificaciones\n\n```typescript\nexport class SenderComponent implements OnInit {\n  public notification = {note:''};\n\n  constructor(private notificationsStore: NotificationsStoreService) {}\n\n  ngOnInit() {}\n\n  public send() {\n    this.notificationsStore.dispatch(this.notification.note);\n  }\n}\n```\n\n### Recepción\n\nLa recepción es igual de sencilla. En la vista pondremos un listado de notificaciones que se alimenta de un array emitido por un observable.\n\n```html\n<h2>\n  Notes receiver\n</h2>\n<ul>\n  <li *ngFor=\"let notification of notifications$ | async\">{{ notification | json }}</li>\n</ul>\n<a [routerLink]=\"['../sender']\">Go to sender</a>\n```\n\nY en el controlador reclamamos la misma dependencia para el uso del servicio del almacén de notificaciones.\n\n```typescript\nexport class ReceiverComponent implements OnInit {\n  public notifications$;\n\n  constructor(private notificationsStore: NotificationsStoreService) {}\n\n  ngOnInit() {\n    this.notifications$ = this.notificationsStore.select$();\n  }\n}\n```\n\nEs importante recalcar que **no importa el orden de suscripción**. Estos dos componentes podrían _vivir_ en módulos distintos, verse en la misma página o inicializarse en cualquier orden... El receptor se entera siempre de todos los cambios; y además recibe el último estado conocido nada más suscribirse.\n\n# 2. Interceptores para gestionar errores\n\nHemos conocido a los interceptores y vemos su potencial para manipular las respuestas de una API. Quizá uno de los usos más frecuentes se el de **centralizar la gestión de errores**. Veamos como hacerlo usando el conocimiento de los observables.\n\nPara empezar hay que generar un servicio...\n\n```\nng g s notifications/errorInterceptor\n\n```\nluego hay que hacerle cumplir la interfaz `HttpInterceptor`...\n\n```typescript\nexport class ErrorInterceptorService implements HttpInterceptor {\n  constructor() {}\n\n  public intercept(req: HttpRequest<any>, next: HttpHandler)\n    : Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n}\n```\ny para finalizar lo proveemos hacia el `HttpClient` invirtiendo el control.\n\n```typescript\n@NgModule({\n  declarations: [SenderComponent, ReceiverComponent],\n  imports: [\n    CommonModule,\n    NotificationsRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ErrorInterceptorService,\n      multi: true\n    }\n  ]\n})\nexport class NotificationsModule {}\n```\n\n## 2.1 El operador catchError\n\nVolvemos a los observables y los operadores canalizables en `.pipe()`. Durante su ejecución un _stream_ de observables puede emitir valores correctos, una señal de finalización... y cómo no, errores. El método `.subscribe(ok, err, end)` y operadores como `.map(ok, err, end)` admiten hasta tres _callbacks_ que se llamarán según los tipos de sucesos descritos. Pero para tratar el caso concreto de los errores vamos a ver el operador `catchError()`.\n\nPor ejemplo durante la intercepción de respuestas podemos realizar una función específica al recibir un código de error. Dadas estas tres alternativas, escogeremos según la intención o la tecnología que más nos guste.\n\n```typescript\npublic intercept(req, next) {\n   // implementación con .tap()\n   return next.handle(req).pipe(tap(null, err=>console.log(err)));\n   // implementación con catchError retornando nulo\n   return next.handle(req).pipe(catchError(err => of(null)));\n   // implementación con catchError re-lanzando el error\n   return next.handle(req).pipe(catchError(err => throwError(err)));\n}\n```\n\n## 2.2 Gestión centralizada de errores\n\nQuizás una de las más usadas sea auditar el error y reenviarlo al llamante original por si quiere hacer algo más con el mismo.\n\n```typescript\npublic intercept(req, next) {\n  return next.handle(req).pipe(catchError(this.handleError));\n}\n\nprivate handleError(err) {\n  const unauthorized_code = 401;\n  let userMessage = 'Fatal error';\n  if (err instanceof HttpErrorResponse) {\n    if (err.status === unauthorized_code) {\n      userMessage = 'Authorization needed';\n    } else {\n      userMessage = 'Comunications error';\n    }\n  }\n  console.log(userMessage);\n  return throwError(err);\n}\n```\n\nPero aún mejor que solo escribir en el _log_, sería avisar al usuario; ¿pero dónde y cómo?\n\n# 3. Un notificador de problemas\n\nLa idea es usar el `NotificationsStoreService` desde el interceptor para... en fin, notificar que ha habido un error.\n\n## 3.1 Emisión mediante el Store\n\n```typescript\n// dependencia en el constructor\nconstructor(private notificationsStore: NotificationsStoreService) {}\n\npublic intercept(req, next) {\n  // Ojo al .bind(this), necesario para no perder el contexto\n  return next.handle(req).pipe(catchError(this.handleError.bind(this)));\n}\n\nprivate handleError(err) {\n  let userMessage = 'Fatal error';\n  // emisión de la notificación\n  this.notificationsStoreService.dispatch({ note: userMessage });\n  return throwError(err);\n}\n```\n\n\n## 3.2 Recepción desacoplada del interceptor\n\nY ahora ya sólo queda suscribirse a los eventos y mostrarlos al usuario. Por ejemplo, desde el `ReceiverComponent`, podemos lanzar llamadas que sabemos que darán problemas y esperar pacientemente el fallo para mostrarlo al usuario.\n\n```html\n<button (click)=\"forceError()\">Force http Error</button>\n```\n\n```TypeScript\npublic forceError() {\n  const privateUrl = 'https://api-base.herokuapp.com/api/priv/secrets';\n  this.httpClient.get(privateUrl).subscribe();\n  const notFoundUrl = 'https://api-base.herokuapp.com/api/pub/items/9';\n  this.httpClient.get(notFoundUrl).subscribe();\n}\n```\n\nTenemos ahora a nuestro usuario puntualmente informado de todo lo que sucede. Hemos utilizado **patrones de arquitectura de software** como el observable y la inversión del control. El resultado es una serie de componentes y servicios poco acoplados que intercambian información en tiempo real.\n\nPero hay temas más avanzados con los que continuar. Sigue esta serie para introducir más temas de seguridad y crear tus [formularios reactivos con Angular](../formularios-reactivos-con-Angular/) mientras aprendes a programar con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-7-Vigilancia-y-seguridad-en-Angular.md","raw":"---\ntitle: Vigilancia y seguridad en Angular\npermalink: vigilancia-y-seguridad-en-Angular\ndate: 2019-03-06 18:49:27\ntags:\n- Angular\n- http\n- Observables\n- Tutorial\n- Introducción\n- Angular8\n- Angular2\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-7_watch.png\n---\n\n![vigilancia-y-seguridad-en-Angular](/images/tutorial-angular-7_watch.png)\n\nLa **vigilancia** de los datos y la información en tiempo real al usuario son dos pilares del desarrollo con Angular en el lado del navegador. La **seguridad** de los datos realmente es una responsabilidad compartida entre el servidor y el cliente.\n\nVeremos ambos aspectos del desarrollo, pues están muy relacionados con la programación asíncrona y el dominio de los observables. Sentaremos las bases para unas **comunicaciones seguras y fluidas en Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Comunicaciones http en Angular](../comunicaciones-http-en-Angular/). Al finalizar tendrás una aplicación que comunica a los usuarios cualquier información relevante y que gestiona de forma centralizada las respuestas de un servicio REST.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/7-watch](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/7-watch/notifications)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n# 1. Observables para monitorizar datos\n\nHemos visto varias técnicas para comunicar información dentro de una aplicación Angular. Empezamos por conocer el [flujo entre componentes](../flujo-de-datos-entre-componentes-angular/) de una misma rama del DOM. También enviamos datos en los [parámetros de una ruta](../paginas-y-rutas-angular-spa/). Y obviamente podemos usar [un servicio común](../servicios-inyectables-en-Angular/) para guardar información compartida. Pero en este caso, ¿Cuándo se actualiza? ¿Cómo saber si ha cambiado?. Lo resolveremos con `Observables`.\n\nPara ilustrar este tema vamos a crear un sencillo sistema de notificaciones que informe al usuario. Empezaremos creando un módulo para los propósitos de este laboratorio.\n\n```console\nng g m notifications --routing true\nng g c notifications/sender\nng g c notifications/receiver\n```\n\nLo apuntamos al enrutador global `app-routing.module.ts` y asignamos las rutas locales\n\n```typescript\n{\n  path: 'notifications',\n  loadChildren: () => import('./7-watch/notifications/notifications.module').then(m => m.NotificationsModule)\n},\n```\n```typescript\nconst routes: Routes = [\n  {\n    path: 'sender',\n    component: SenderComponent\n  },\n  {\n    path: 'receiver',\n    component: ReceiverComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'sender'\n  }\n];\n```\n\nPor último un enlace en el menú principal `header.component.html` y ya estamos listos para enviar y recibir desde dos componente desacoplados.\n\n```html\n<a routerLink=\"notifications\" class=\"button\">Notifications</a>\n```\n\nPero antes un poco más de observables.\n\n## 1.1 Productores de observables\n\nLa librería [RxJS](https://www.learnrxjs.io/) es enorme y Angular hace un uso extenso de ella. En este tutorial [se ha visto desde el punto de vista del consumidor](../comunicaciones-http-en-Angular). Es decir, nos hemos suscrito a fuentes observables. Para avanzar tendremos que poder emitir, o mejor dicho producir, información.\n\n### Of y from\n\nLos constructores más sencillos de la librería son **funciones que emiten valores estáticos** o secuencias a intervalos regulares. Para familiarizarte con ellos te propongo que juegues con código como este:\n\n```typescript\nvalue$ = of(new Date().getMilliseconds());\nvalue$.subscribe(r=> console.log(r));\nstream$ = from([1, 'two', '***']);\nstream$.subscribe(r=> console.log(r));\nlist$ = of(['N', 'S', 'E', 'W']);\nlist$.subscribe(r=> console.log(r));\n```\n\n### Subject y BehaviorSubject\n\nLos anteriores constructores se basan en datos estáticos. Resuelvan algunas situaciones, pero necesitamos algo que emita **cambios dinámicos**. Y eso se realiza con los _Subjects_, una especie de emisores temáticos a los que suscribirse.\n\nHay varios tipos pero para empezar nos vamos a fijar en dos: el `Subject()` y el `BehaviorSubject(initialData)`. La diferencia es que el primero sólo emite las cosas según ocurren. Si alguien se suscribe tarde no conocerá el pasado. Esto suele generar problemas de sincronización. El _Behavior_ en cambio notifica el último valor conocido a cualquiera que se suscriba. De esa forma no importa si te suscribes antes o después de la obtención de un dato.\n\nJuega con el siguiente ejemplo:\n\n```typescript\nconst data = {name:'', value:0};\n\nconst need_sync$ = new Subject<any>();\n// on time\nneed_sync.subscribe(r=> console.log(r));\nneed_sync.next(data);\n// too late\nneed_sync.subscribe(r=> console.log(r));\n\nconst no_hurry$ = new BehaviorSubject<any>(this.data);\n// its ok\nno_hurry.subscribe(r=> console.log(r));\nno_hurry.next(data);\n// its also ok\nno_hurry.subscribe(r=> console.log(r));\n```\n\n## 1.2 Un Store de notificaciones\n\nUsaremos el `BehaviorSubject` como notificador principal entre componentes de Angular. Por ejemplo podemos montar un sistema de notificaciones sencillo. Empecemos por crear un servicio:\n\n```console\nng g s notifications/notificationsStore\n```\n\n> Para adaptarnos a la nomenclatura usada por patrones de gestión de estado más avanzados como es **Redux**, usaré el siguiente convenio: _Store_ como almacén, _select$()_ como publicador de cambios observable y _dispatch_ como encargado de procesar una acción de cambio de estado.\n\n```typescript\nexport class NotificationsStoreService {\n  private notifications = [];\n  private notifications$ = new BehaviorSubject<any[]>([]);\n\n  constructor() {}\n\n  public select = () => [...this.notifications];\n  public select$ = () => this.notifications$.asObservable();\n\n  public dispatch(notification) {\n    this.notifications.push({ ...notification });\n    this.notifications$.next(this.select());\n  }\n}\n```\n\nEste servicio es la implementación más sencilla posible de un gestor de estados. Cabe destacar que :\n\n- Mantienen el estado privado para evitar manipulaciones\n- Recibe de forma controlada las acciones de cambio\n- Emite clones del estado\n- Expone observables para que se suscriban los interesados.\n\n\n## 1.3 Desacoplados pero conectados\n\nUna vez que hemos centralizado el control de cambios de una parte de la aplicación, es hora de que lo usen los componentes o servicios involucrados. Solo necesitan recibir la instancia vía dependencia. **No hay más acoplamiento entre emisores y receptores.**\n\n### Emisión\n\nVeamos un ejemplo, un tanto forzado,  consistente en dos componentes que se comunican sin conocerse. Esta es la vista con un formulario para enviar mensajes\n\n```html\n<h2>\n  Notes sender\n</h2>\n<form>\n  <fieldset>\n    <section>\n      <label for=\"note\">Note</label>\n      <input name=\"note\"\n             [(ngModel)]=\"notification.note\" />\n    </section>\n  </fieldset>\n  <button (click)=\"send()\">Send</button>\n</form>\n<a [routerLink]=\"['../receiver']\">Go to receiver</a>\n```\n\nLa parte interesante está en el controlador. Dependencia y uso del servicio del almacén de notificaciones\n\n```typescript\nexport class SenderComponent implements OnInit {\n  public notification = {note:''};\n\n  constructor(private notificationsStore: NotificationsStoreService) {}\n\n  ngOnInit() {}\n\n  public send() {\n    this.notificationsStore.dispatch(this.notification.note);\n  }\n}\n```\n\n### Recepción\n\nLa recepción es igual de sencilla. En la vista pondremos un listado de notificaciones que se alimenta de un array emitido por un observable.\n\n```html\n<h2>\n  Notes receiver\n</h2>\n<ul>\n  <li *ngFor=\"let notification of notifications$ | async\">{{ notification | json }}</li>\n</ul>\n<a [routerLink]=\"['../sender']\">Go to sender</a>\n```\n\nY en el controlador reclamamos la misma dependencia para el uso del servicio del almacén de notificaciones.\n\n```typescript\nexport class ReceiverComponent implements OnInit {\n  public notifications$;\n\n  constructor(private notificationsStore: NotificationsStoreService) {}\n\n  ngOnInit() {\n    this.notifications$ = this.notificationsStore.select$();\n  }\n}\n```\n\nEs importante recalcar que **no importa el orden de suscripción**. Estos dos componentes podrían _vivir_ en módulos distintos, verse en la misma página o inicializarse en cualquier orden... El receptor se entera siempre de todos los cambios; y además recibe el último estado conocido nada más suscribirse.\n\n# 2. Interceptores para gestionar errores\n\nHemos conocido a los interceptores y vemos su potencial para manipular las respuestas de una API. Quizá uno de los usos más frecuentes se el de **centralizar la gestión de errores**. Veamos como hacerlo usando el conocimiento de los observables.\n\nPara empezar hay que generar un servicio...\n\n```\nng g s notifications/errorInterceptor\n\n```\nluego hay que hacerle cumplir la interfaz `HttpInterceptor`...\n\n```typescript\nexport class ErrorInterceptorService implements HttpInterceptor {\n  constructor() {}\n\n  public intercept(req: HttpRequest<any>, next: HttpHandler)\n    : Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n}\n```\ny para finalizar lo proveemos hacia el `HttpClient` invirtiendo el control.\n\n```typescript\n@NgModule({\n  declarations: [SenderComponent, ReceiverComponent],\n  imports: [\n    CommonModule,\n    NotificationsRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ErrorInterceptorService,\n      multi: true\n    }\n  ]\n})\nexport class NotificationsModule {}\n```\n\n## 2.1 El operador catchError\n\nVolvemos a los observables y los operadores canalizables en `.pipe()`. Durante su ejecución un _stream_ de observables puede emitir valores correctos, una señal de finalización... y cómo no, errores. El método `.subscribe(ok, err, end)` y operadores como `.map(ok, err, end)` admiten hasta tres _callbacks_ que se llamarán según los tipos de sucesos descritos. Pero para tratar el caso concreto de los errores vamos a ver el operador `catchError()`.\n\nPor ejemplo durante la intercepción de respuestas podemos realizar una función específica al recibir un código de error. Dadas estas tres alternativas, escogeremos según la intención o la tecnología que más nos guste.\n\n```typescript\npublic intercept(req, next) {\n   // implementación con .tap()\n   return next.handle(req).pipe(tap(null, err=>console.log(err)));\n   // implementación con catchError retornando nulo\n   return next.handle(req).pipe(catchError(err => of(null)));\n   // implementación con catchError re-lanzando el error\n   return next.handle(req).pipe(catchError(err => throwError(err)));\n}\n```\n\n## 2.2 Gestión centralizada de errores\n\nQuizás una de las más usadas sea auditar el error y reenviarlo al llamante original por si quiere hacer algo más con el mismo.\n\n```typescript\npublic intercept(req, next) {\n  return next.handle(req).pipe(catchError(this.handleError));\n}\n\nprivate handleError(err) {\n  const unauthorized_code = 401;\n  let userMessage = 'Fatal error';\n  if (err instanceof HttpErrorResponse) {\n    if (err.status === unauthorized_code) {\n      userMessage = 'Authorization needed';\n    } else {\n      userMessage = 'Comunications error';\n    }\n  }\n  console.log(userMessage);\n  return throwError(err);\n}\n```\n\nPero aún mejor que solo escribir en el _log_, sería avisar al usuario; ¿pero dónde y cómo?\n\n# 3. Un notificador de problemas\n\nLa idea es usar el `NotificationsStoreService` desde el interceptor para... en fin, notificar que ha habido un error.\n\n## 3.1 Emisión mediante el Store\n\n```typescript\n// dependencia en el constructor\nconstructor(private notificationsStore: NotificationsStoreService) {}\n\npublic intercept(req, next) {\n  // Ojo al .bind(this), necesario para no perder el contexto\n  return next.handle(req).pipe(catchError(this.handleError.bind(this)));\n}\n\nprivate handleError(err) {\n  let userMessage = 'Fatal error';\n  // emisión de la notificación\n  this.notificationsStoreService.dispatch({ note: userMessage });\n  return throwError(err);\n}\n```\n\n\n## 3.2 Recepción desacoplada del interceptor\n\nY ahora ya sólo queda suscribirse a los eventos y mostrarlos al usuario. Por ejemplo, desde el `ReceiverComponent`, podemos lanzar llamadas que sabemos que darán problemas y esperar pacientemente el fallo para mostrarlo al usuario.\n\n```html\n<button (click)=\"forceError()\">Force http Error</button>\n```\n\n```TypeScript\npublic forceError() {\n  const privateUrl = 'https://api-base.herokuapp.com/api/priv/secrets';\n  this.httpClient.get(privateUrl).subscribe();\n  const notFoundUrl = 'https://api-base.herokuapp.com/api/pub/items/9';\n  this.httpClient.get(notFoundUrl).subscribe();\n}\n```\n\nTenemos ahora a nuestro usuario puntualmente informado de todo lo que sucede. Hemos utilizado **patrones de arquitectura de software** como el observable y la inversión del control. El resultado es una serie de componentes y servicios poco acoplados que intercambian información en tiempo real.\n\nPero hay temas más avanzados con los que continuar. Sigue esta serie para introducir más temas de seguridad y crear tus [formularios reactivos con Angular](../formularios-reactivos-con-Angular/) mientras aprendes a programar con Angular.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"vigilancia-y-seguridad-en-Angular","published":1,"updated":"2019-08-05T15:00:15.758Z","_id":"cjyh5p4b1000i18s3espxcwpc","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-7_watch.png\" alt=\"vigilancia-y-seguridad-en-Angular\"></p><p>La <strong>vigilancia</strong> de los datos y la información en tiempo real al usuario son dos pilares del desarrollo con Angular en el lado del navegador. La <strong>seguridad</strong> de los datos realmente es una responsabilidad compartida entre el servidor y el cliente.</p><p>Veremos ambos aspectos del desarrollo, pues están muy relacionados con la programación asíncrona y el dominio de los observables. Sentaremos las bases para unas <strong>comunicaciones seguras y fluidas en Angular</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones http en Angular</a>. Al finalizar tendrás una aplicación que comunica a los usuarios cualquier información relevante y que gestiona de forma centralizada las respuestas de un servicio REST.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/7-watch/notifications\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/7-watch</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-Observables-para-monitorizar-datos\"><a href=\"#1-Observables-para-monitorizar-datos\" class=\"headerlink\" title=\"1. Observables para monitorizar datos\"></a>1. Observables para monitorizar datos</h1><p>Hemos visto varias técnicas para comunicar información dentro de una aplicación Angular. Empezamos por conocer el <a href=\"../flujo-de-datos-entre-componentes-angular/\">flujo entre componentes</a> de una misma rama del DOM. También enviamos datos en los <a href=\"../paginas-y-rutas-angular-spa/\">parámetros de una ruta</a>. Y obviamente podemos usar <a href=\"../servicios-inyectables-en-Angular/\">un servicio común</a> para guardar información compartida. Pero en este caso, ¿Cuándo se actualiza? ¿Cómo saber si ha cambiado?. Lo resolveremos con <code>Observables</code>.</p><p>Para ilustrar este tema vamos a crear un sencillo sistema de notificaciones que informe al usuario. Empezaremos creando un módulo para los propósitos de este laboratorio.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m notifications --routing true</span><br><span class=\"line\">ng g c notifications/sender</span><br><span class=\"line\">ng g c notifications/receiver</span><br></pre></td></tr></table></figure><p>Lo apuntamos al enrutador global <code>app-routing.module.ts</code> y asignamos las rutas locales</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">'notifications'</span>,</span><br><span class=\"line\">  loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./7-watch/notifications/notifications.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.NotificationsModule)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'sender'</span>,</span><br><span class=\"line\">    component: SenderComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'receiver'</span>,</span><br><span class=\"line\">    component: ReceiverComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'sender'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>Por último un enlace en el menú principal <code>header.component.html</code> y ya estamos listos para enviar y recibir desde dos componente desacoplados.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"notifications\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span>Notifications<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Pero antes un poco más de observables.</p><h2 id=\"1-1-Productores-de-observables\"><a href=\"#1-1-Productores-de-observables\" class=\"headerlink\" title=\"1.1 Productores de observables\"></a>1.1 Productores de observables</h2><p>La librería <a href=\"https://www.learnrxjs.io/\" target=\"_blank\" rel=\"noopener\">RxJS</a> es enorme y Angular hace un uso extenso de ella. En este tutorial <a href=\"../comunicaciones-http-en-Angular\">se ha visto desde el punto de vista del consumidor</a>. Es decir, nos hemos suscrito a fuentes observables. Para avanzar tendremos que poder emitir, o mejor dicho producir, información.</p><h3 id=\"Of-y-from\"><a href=\"#Of-y-from\" class=\"headerlink\" title=\"Of y from\"></a>Of y from</h3><p>Los constructores más sencillos de la librería son <strong>funciones que emiten valores estáticos</strong> o secuencias a intervalos regulares. Para familiarizarte con ellos te propongo que juegues con código como este:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value$ = of(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMilliseconds());</span><br><span class=\"line\">value$.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\">stream$ = <span class=\"keyword\">from</span>([<span class=\"number\">1</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'***'</span>]);</span><br><span class=\"line\">stream$.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\">list$ = of([<span class=\"string\">'N'</span>, <span class=\"string\">'S'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'W'</span>]);</span><br><span class=\"line\">list$.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br></pre></td></tr></table></figure><h3 id=\"Subject-y-BehaviorSubject\"><a href=\"#Subject-y-BehaviorSubject\" class=\"headerlink\" title=\"Subject y BehaviorSubject\"></a>Subject y BehaviorSubject</h3><p>Los anteriores constructores se basan en datos estáticos. Resuelvan algunas situaciones, pero necesitamos algo que emita <strong>cambios dinámicos</strong>. Y eso se realiza con los <em>Subjects</em>, una especie de emisores temáticos a los que suscribirse.</p><p>Hay varios tipos pero para empezar nos vamos a fijar en dos: el <code>Subject()</code> y el <code>BehaviorSubject(initialData)</code>. La diferencia es que el primero sólo emite las cosas según ocurren. Si alguien se suscribe tarde no conocerá el pasado. Esto suele generar problemas de sincronización. El <em>Behavior</em> en cambio notifica el último valor conocido a cualquiera que se suscriba. De esa forma no importa si te suscribes antes o después de la obtención de un dato.</p><p>Juega con el siguiente ejemplo:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;name:<span class=\"string\">''</span>, value:<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> need_sync$ = <span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\"><span class=\"comment\">// on time</span></span><br><span class=\"line\">need_sync.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\">need_sync.next(data);</span><br><span class=\"line\"><span class=\"comment\">// too late</span></span><br><span class=\"line\">need_sync.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> no_hurry$ = <span class=\"keyword\">new</span> BehaviorSubject&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"keyword\">this</span>.data);</span><br><span class=\"line\"><span class=\"comment\">// its ok</span></span><br><span class=\"line\">no_hurry.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\">no_hurry.next(data);</span><br><span class=\"line\"><span class=\"comment\">// its also ok</span></span><br><span class=\"line\">no_hurry.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br></pre></td></tr></table></figure><h2 id=\"1-2-Un-Store-de-notificaciones\"><a href=\"#1-2-Un-Store-de-notificaciones\" class=\"headerlink\" title=\"1.2 Un Store de notificaciones\"></a>1.2 Un Store de notificaciones</h2><p>Usaremos el <code>BehaviorSubject</code> como notificador principal entre componentes de Angular. Por ejemplo podemos montar un sistema de notificaciones sencillo. Empecemos por crear un servicio:</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s notifications/notificationsStore</span><br></pre></td></tr></table></figure><blockquote><p>Para adaptarnos a la nomenclatura usada por patrones de gestión de estado más avanzados como es <strong>Redux</strong>, usaré el siguiente convenio: <em>Store</em> como almacén, <em>select$()</em> como publicador de cambios observable y <em>dispatch</em> como encargado de procesar una acción de cambio de estado.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NotificationsStoreService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> notifications = [];</span><br><span class=\"line\">  <span class=\"keyword\">private</span> notifications$ = <span class=\"keyword\">new</span> BehaviorSubject&lt;<span class=\"built_in\">any</span>[]&gt;([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> select = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [...this.notifications];</span><br><span class=\"line\">  <span class=\"keyword\">public</span> select$ = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.notifications$.asObservable();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> dispatch(notification) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notifications.push(&#123; ...notification &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notifications$.next(<span class=\"keyword\">this</span>.select());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Este servicio es la implementación más sencilla posible de un gestor de estados. Cabe destacar que :</p><ul><li>Mantienen el estado privado para evitar manipulaciones</li><li>Recibe de forma controlada las acciones de cambio</li><li>Emite clones del estado</li><li>Expone observables para que se suscriban los interesados.</li></ul><h2 id=\"1-3-Desacoplados-pero-conectados\"><a href=\"#1-3-Desacoplados-pero-conectados\" class=\"headerlink\" title=\"1.3 Desacoplados pero conectados\"></a>1.3 Desacoplados pero conectados</h2><p>Una vez que hemos centralizado el control de cambios de una parte de la aplicación, es hora de que lo usen los componentes o servicios involucrados. Solo necesitan recibir la instancia vía dependencia. <strong>No hay más acoplamiento entre emisores y receptores.</strong></p><h3 id=\"Emision\"><a href=\"#Emision\" class=\"headerlink\" title=\"Emisión\"></a>Emisión</h3><p>Veamos un ejemplo, un tanto forzado, consistente en dos componentes que se comunican sin conocerse. Esta es la vista con un formulario para enviar mensajes</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  Notes sender</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"note\"</span>&gt;</span>Note<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"note\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"notification.note\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"send()\"</span>&gt;</span>Send<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['../receiver']\"</span>&gt;</span>Go to receiver<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>La parte interesante está en el controlador. Dependencia y uso del servicio del almacén de notificaciones</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SenderComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> notification = &#123;note:<span class=\"string\">''</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> notificationsStore: NotificationsStoreService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> send() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notificationsStore.dispatch(<span class=\"keyword\">this</span>.notification.note);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"Recepcion\"><a href=\"#Recepcion\" class=\"headerlink\" title=\"Recepción\"></a>Recepción</h3><p>La recepción es igual de sencilla. En la vista pondremos un listado de notificaciones que se alimenta de un array emitido por un observable.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  Notes receiver</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let notification of notifications$ | async\"</span>&gt;</span>&#123;&#123; notification | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['../sender']\"</span>&gt;</span>Go to sender<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Y en el controlador reclamamos la misma dependencia para el uso del servicio del almacén de notificaciones.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ReceiverComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> notifications$;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> notificationsStore: NotificationsStoreService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notifications$ = <span class=\"keyword\">this</span>.notificationsStore.select$();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Es importante recalcar que <strong>no importa el orden de suscripción</strong>. Estos dos componentes podrían <em>vivir</em> en módulos distintos, verse en la misma página o inicializarse en cualquier orden… El receptor se entera siempre de todos los cambios; y además recibe el último estado conocido nada más suscribirse.</p><h1 id=\"2-Interceptores-para-gestionar-errores\"><a href=\"#2-Interceptores-para-gestionar-errores\" class=\"headerlink\" title=\"2. Interceptores para gestionar errores\"></a>2. Interceptores para gestionar errores</h1><p>Hemos conocido a los interceptores y vemos su potencial para manipular las respuestas de una API. Quizá uno de los usos más frecuentes se el de <strong>centralizar la gestión de errores</strong>. Veamos como hacerlo usando el conocimiento de los observables.</p><p>Para empezar hay que generar un servicio…</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s notifications/errorInterceptor</span><br></pre></td></tr></table></figure><p>luego hay que hacerle cumplir la interfaz <code>HttpInterceptor</code>…</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ErrorInterceptorService <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler)</span><br><span class=\"line\">    : Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(req);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>y para finalizar lo proveemos hacia el <code>HttpClient</code> invirtiendo el control.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [SenderComponent, ReceiverComponent],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    CommonModule,</span><br><span class=\"line\">    NotificationsRoutingModule,</span><br><span class=\"line\">    HttpClientModule,</span><br><span class=\"line\">    FormsModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: HTTP_INTERCEPTORS,</span><br><span class=\"line\">      useClass: ErrorInterceptorService,</span><br><span class=\"line\">      multi: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NotificationsModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-1-El-operador-catchError\"><a href=\"#2-1-El-operador-catchError\" class=\"headerlink\" title=\"2.1 El operador catchError\"></a>2.1 El operador catchError</h2><p>Volvemos a los observables y los operadores canalizables en <code>.pipe()</code>. Durante su ejecución un <em>stream</em> de observables puede emitir valores correctos, una señal de finalización… y cómo no, errores. El método <code>.subscribe(ok, err, end)</code> y operadores como <code>.map(ok, err, end)</code> admiten hasta tres <em>callbacks</em> que se llamarán según los tipos de sucesos descritos. Pero para tratar el caso concreto de los errores vamos a ver el operador <code>catchError()</code>.</p><p>Por ejemplo durante la intercepción de respuestas podemos realizar una función específica al recibir un código de error. Dadas estas tres alternativas, escogeremos según la intención o la tecnología que más nos guste.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> intercept(req, next) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// implementación con .tap()</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> next.handle(req).pipe(tap(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(err)));</span><br><span class=\"line\">   <span class=\"comment\">// implementación con catchError retornando nulo</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> of(<span class=\"literal\">null</span>)));</span><br><span class=\"line\">   <span class=\"comment\">// implementación con catchError re-lanzando el error</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> throwError(err)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Gestion-centralizada-de-errores\"><a href=\"#2-2-Gestion-centralizada-de-errores\" class=\"headerlink\" title=\"2.2 Gestión centralizada de errores\"></a>2.2 Gestión centralizada de errores</h2><p>Quizás una de las más usadas sea auditar el error y reenviarlo al llamante original por si quiere hacer algo más con el mismo.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> intercept(req, next) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"keyword\">this</span>.handleError));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> handleError(err) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> unauthorized_code = <span class=\"number\">401</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> userMessage = <span class=\"string\">'Fatal error'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> HttpErrorResponse) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err.status === unauthorized_code) &#123;</span><br><span class=\"line\">      userMessage = <span class=\"string\">'Authorization needed'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      userMessage = <span class=\"string\">'Comunications error'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(userMessage);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> throwError(err);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Pero aún mejor que solo escribir en el <em>log</em>, sería avisar al usuario; ¿pero dónde y cómo?</p><h1 id=\"3-Un-notificador-de-problemas\"><a href=\"#3-Un-notificador-de-problemas\" class=\"headerlink\" title=\"3. Un notificador de problemas\"></a>3. Un notificador de problemas</h1><p>La idea es usar el <code>NotificationsStoreService</code> desde el interceptor para… en fin, notificar que ha habido un error.</p><h2 id=\"3-1-Emision-mediante-el-Store\"><a href=\"#3-1-Emision-mediante-el-Store\" class=\"headerlink\" title=\"3.1 Emisión mediante el Store\"></a>3.1 Emisión mediante el Store</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dependencia en el constructor</span></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> notificationsStore: NotificationsStoreService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> intercept(req, next) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Ojo al .bind(this), necesario para no perder el contexto</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"keyword\">this</span>.handleError.bind(<span class=\"keyword\">this</span>)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> handleError(err) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> userMessage = <span class=\"string\">'Fatal error'</span>;</span><br><span class=\"line\">  <span class=\"comment\">// emisión de la notificación</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.notificationsStoreService.dispatch(&#123; note: userMessage &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> throwError(err);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"3-2-Recepcion-desacoplada-del-interceptor\"><a href=\"#3-2-Recepcion-desacoplada-del-interceptor\" class=\"headerlink\" title=\"3.2 Recepción desacoplada del interceptor\"></a>3.2 Recepción desacoplada del interceptor</h2><p>Y ahora ya sólo queda suscribirse a los eventos y mostrarlos al usuario. Por ejemplo, desde el <code>ReceiverComponent</code>, podemos lanzar llamadas que sabemos que darán problemas y esperar pacientemente el fallo para mostrarlo al usuario.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"forceError()\"</span>&gt;</span>Force http Error<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> forceError() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> privateUrl = <span class=\"string\">'https://api-base.herokuapp.com/api/priv/secrets'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpClient.get(privateUrl).subscribe();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> notFoundUrl = <span class=\"string\">'https://api-base.herokuapp.com/api/pub/items/9'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpClient.get(notFoundUrl).subscribe();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Tenemos ahora a nuestro usuario puntualmente informado de todo lo que sucede. Hemos utilizado <strong>patrones de arquitectura de software</strong> como el observable y la inversión del control. El resultado es una serie de componentes y servicios poco acoplados que intercambian información en tiempo real.</p><p>Pero hay temas más avanzados con los que continuar. Sigue esta serie para introducir más temas de seguridad y crear tus <a href=\"../formularios-reactivos-con-Angular/\">formularios reactivos con Angular</a> mientras aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-7_watch.png\" alt=\"vigilancia-y-seguridad-en-Angular\"></p><p>La <strong>vigilancia</strong> de los datos y la información en tiempo real al usuario son dos pilares del desarrollo con Angular en el lado del navegador. La <strong>seguridad</strong> de los datos realmente es una responsabilidad compartida entre el servidor y el cliente.</p><p>Veremos ambos aspectos del desarrollo, pues están muy relacionados con la programación asíncrona y el dominio de los observables. Sentaremos las bases para unas <strong>comunicaciones seguras y fluidas en Angular</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../comunicaciones-http-en-Angular/\">Comunicaciones http en Angular</a>. Al finalizar tendrás una aplicación que comunica a los usuarios cualquier información relevante y que gestiona de forma centralizada las respuestas de un servicio REST.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/7-watch/notifications\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/7-watch</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-Observables-para-monitorizar-datos\"><a href=\"#1-Observables-para-monitorizar-datos\" class=\"headerlink\" title=\"1. Observables para monitorizar datos\"></a>1. Observables para monitorizar datos</h1><p>Hemos visto varias técnicas para comunicar información dentro de una aplicación Angular. Empezamos por conocer el <a href=\"../flujo-de-datos-entre-componentes-angular/\">flujo entre componentes</a> de una misma rama del DOM. También enviamos datos en los <a href=\"../paginas-y-rutas-angular-spa/\">parámetros de una ruta</a>. Y obviamente podemos usar <a href=\"../servicios-inyectables-en-Angular/\">un servicio común</a> para guardar información compartida. Pero en este caso, ¿Cuándo se actualiza? ¿Cómo saber si ha cambiado?. Lo resolveremos con <code>Observables</code>.</p><p>Para ilustrar este tema vamos a crear un sencillo sistema de notificaciones que informe al usuario. Empezaremos creando un módulo para los propósitos de este laboratorio.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m notifications --routing true</span><br><span class=\"line\">ng g c notifications/sender</span><br><span class=\"line\">ng g c notifications/receiver</span><br></pre></td></tr></table></figure><p>Lo apuntamos al enrutador global <code>app-routing.module.ts</code> y asignamos las rutas locales</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">'notifications'</span>,</span><br><span class=\"line\">  loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./7-watch/notifications/notifications.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.NotificationsModule)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'sender'</span>,</span><br><span class=\"line\">    component: SenderComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'receiver'</span>,</span><br><span class=\"line\">    component: ReceiverComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'sender'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>Por último un enlace en el menú principal <code>header.component.html</code> y ya estamos listos para enviar y recibir desde dos componente desacoplados.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"notifications\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span>Notifications<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Pero antes un poco más de observables.</p><h2 id=\"1-1-Productores-de-observables\"><a href=\"#1-1-Productores-de-observables\" class=\"headerlink\" title=\"1.1 Productores de observables\"></a>1.1 Productores de observables</h2><p>La librería <a href=\"https://www.learnrxjs.io/\" target=\"_blank\" rel=\"noopener\">RxJS</a> es enorme y Angular hace un uso extenso de ella. En este tutorial <a href=\"../comunicaciones-http-en-Angular\">se ha visto desde el punto de vista del consumidor</a>. Es decir, nos hemos suscrito a fuentes observables. Para avanzar tendremos que poder emitir, o mejor dicho producir, información.</p><h3 id=\"Of-y-from\"><a href=\"#Of-y-from\" class=\"headerlink\" title=\"Of y from\"></a>Of y from</h3><p>Los constructores más sencillos de la librería son <strong>funciones que emiten valores estáticos</strong> o secuencias a intervalos regulares. Para familiarizarte con ellos te propongo que juegues con código como este:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value$ = of(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getMilliseconds());</span><br><span class=\"line\">value$.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\">stream$ = <span class=\"keyword\">from</span>([<span class=\"number\">1</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'***'</span>]);</span><br><span class=\"line\">stream$.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\">list$ = of([<span class=\"string\">'N'</span>, <span class=\"string\">'S'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'W'</span>]);</span><br><span class=\"line\">list$.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br></pre></td></tr></table></figure><h3 id=\"Subject-y-BehaviorSubject\"><a href=\"#Subject-y-BehaviorSubject\" class=\"headerlink\" title=\"Subject y BehaviorSubject\"></a>Subject y BehaviorSubject</h3><p>Los anteriores constructores se basan en datos estáticos. Resuelvan algunas situaciones, pero necesitamos algo que emita <strong>cambios dinámicos</strong>. Y eso se realiza con los <em>Subjects</em>, una especie de emisores temáticos a los que suscribirse.</p><p>Hay varios tipos pero para empezar nos vamos a fijar en dos: el <code>Subject()</code> y el <code>BehaviorSubject(initialData)</code>. La diferencia es que el primero sólo emite las cosas según ocurren. Si alguien se suscribe tarde no conocerá el pasado. Esto suele generar problemas de sincronización. El <em>Behavior</em> en cambio notifica el último valor conocido a cualquiera que se suscriba. De esa forma no importa si te suscribes antes o después de la obtención de un dato.</p><p>Juega con el siguiente ejemplo:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;name:<span class=\"string\">''</span>, value:<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> need_sync$ = <span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\"><span class=\"comment\">// on time</span></span><br><span class=\"line\">need_sync.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\">need_sync.next(data);</span><br><span class=\"line\"><span class=\"comment\">// too late</span></span><br><span class=\"line\">need_sync.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> no_hurry$ = <span class=\"keyword\">new</span> BehaviorSubject&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"keyword\">this</span>.data);</span><br><span class=\"line\"><span class=\"comment\">// its ok</span></span><br><span class=\"line\">no_hurry.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br><span class=\"line\">no_hurry.next(data);</span><br><span class=\"line\"><span class=\"comment\">// its also ok</span></span><br><span class=\"line\">no_hurry.subscribe(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span> <span class=\"built_in\">console</span>.log(r));</span><br></pre></td></tr></table></figure><h2 id=\"1-2-Un-Store-de-notificaciones\"><a href=\"#1-2-Un-Store-de-notificaciones\" class=\"headerlink\" title=\"1.2 Un Store de notificaciones\"></a>1.2 Un Store de notificaciones</h2><p>Usaremos el <code>BehaviorSubject</code> como notificador principal entre componentes de Angular. Por ejemplo podemos montar un sistema de notificaciones sencillo. Empecemos por crear un servicio:</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s notifications/notificationsStore</span><br></pre></td></tr></table></figure><blockquote><p>Para adaptarnos a la nomenclatura usada por patrones de gestión de estado más avanzados como es <strong>Redux</strong>, usaré el siguiente convenio: <em>Store</em> como almacén, <em>select$()</em> como publicador de cambios observable y <em>dispatch</em> como encargado de procesar una acción de cambio de estado.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NotificationsStoreService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> notifications = [];</span><br><span class=\"line\">  <span class=\"keyword\">private</span> notifications$ = <span class=\"keyword\">new</span> BehaviorSubject&lt;<span class=\"built_in\">any</span>[]&gt;([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> select = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [...this.notifications];</span><br><span class=\"line\">  <span class=\"keyword\">public</span> select$ = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.notifications$.asObservable();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> dispatch(notification) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notifications.push(&#123; ...notification &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notifications$.next(<span class=\"keyword\">this</span>.select());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Este servicio es la implementación más sencilla posible de un gestor de estados. Cabe destacar que :</p><ul><li>Mantienen el estado privado para evitar manipulaciones</li><li>Recibe de forma controlada las acciones de cambio</li><li>Emite clones del estado</li><li>Expone observables para que se suscriban los interesados.</li></ul><h2 id=\"1-3-Desacoplados-pero-conectados\"><a href=\"#1-3-Desacoplados-pero-conectados\" class=\"headerlink\" title=\"1.3 Desacoplados pero conectados\"></a>1.3 Desacoplados pero conectados</h2><p>Una vez que hemos centralizado el control de cambios de una parte de la aplicación, es hora de que lo usen los componentes o servicios involucrados. Solo necesitan recibir la instancia vía dependencia. <strong>No hay más acoplamiento entre emisores y receptores.</strong></p><h3 id=\"Emision\"><a href=\"#Emision\" class=\"headerlink\" title=\"Emisión\"></a>Emisión</h3><p>Veamos un ejemplo, un tanto forzado, consistente en dos componentes que se comunican sin conocerse. Esta es la vista con un formulario para enviar mensajes</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  Notes sender</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"note\"</span>&gt;</span>Note<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"note\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"notification.note\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"send()\"</span>&gt;</span>Send<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['../receiver']\"</span>&gt;</span>Go to receiver<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>La parte interesante está en el controlador. Dependencia y uso del servicio del almacén de notificaciones</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SenderComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> notification = &#123;note:<span class=\"string\">''</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> notificationsStore: NotificationsStoreService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> send() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notificationsStore.dispatch(<span class=\"keyword\">this</span>.notification.note);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"Recepcion\"><a href=\"#Recepcion\" class=\"headerlink\" title=\"Recepción\"></a>Recepción</h3><p>La recepción es igual de sencilla. En la vista pondremos un listado de notificaciones que se alimenta de un array emitido por un observable.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  Notes receiver</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let notification of notifications$ | async\"</span>&gt;</span>&#123;&#123; notification | json &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['../sender']\"</span>&gt;</span>Go to sender<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Y en el controlador reclamamos la misma dependencia para el uso del servicio del almacén de notificaciones.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ReceiverComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> notifications$;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> notificationsStore: NotificationsStoreService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.notifications$ = <span class=\"keyword\">this</span>.notificationsStore.select$();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Es importante recalcar que <strong>no importa el orden de suscripción</strong>. Estos dos componentes podrían <em>vivir</em> en módulos distintos, verse en la misma página o inicializarse en cualquier orden… El receptor se entera siempre de todos los cambios; y además recibe el último estado conocido nada más suscribirse.</p><h1 id=\"2-Interceptores-para-gestionar-errores\"><a href=\"#2-Interceptores-para-gestionar-errores\" class=\"headerlink\" title=\"2. Interceptores para gestionar errores\"></a>2. Interceptores para gestionar errores</h1><p>Hemos conocido a los interceptores y vemos su potencial para manipular las respuestas de una API. Quizá uno de los usos más frecuentes se el de <strong>centralizar la gestión de errores</strong>. Veamos como hacerlo usando el conocimiento de los observables.</p><p>Para empezar hay que generar un servicio…</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s notifications/errorInterceptor</span><br></pre></td></tr></table></figure><p>luego hay que hacerle cumplir la interfaz <code>HttpInterceptor</code>…</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ErrorInterceptorService <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler)</span><br><span class=\"line\">    : Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(req);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>y para finalizar lo proveemos hacia el <code>HttpClient</code> invirtiendo el control.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [SenderComponent, ReceiverComponent],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    CommonModule,</span><br><span class=\"line\">    NotificationsRoutingModule,</span><br><span class=\"line\">    HttpClientModule,</span><br><span class=\"line\">    FormsModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: HTTP_INTERCEPTORS,</span><br><span class=\"line\">      useClass: ErrorInterceptorService,</span><br><span class=\"line\">      multi: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NotificationsModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-1-El-operador-catchError\"><a href=\"#2-1-El-operador-catchError\" class=\"headerlink\" title=\"2.1 El operador catchError\"></a>2.1 El operador catchError</h2><p>Volvemos a los observables y los operadores canalizables en <code>.pipe()</code>. Durante su ejecución un <em>stream</em> de observables puede emitir valores correctos, una señal de finalización… y cómo no, errores. El método <code>.subscribe(ok, err, end)</code> y operadores como <code>.map(ok, err, end)</code> admiten hasta tres <em>callbacks</em> que se llamarán según los tipos de sucesos descritos. Pero para tratar el caso concreto de los errores vamos a ver el operador <code>catchError()</code>.</p><p>Por ejemplo durante la intercepción de respuestas podemos realizar una función específica al recibir un código de error. Dadas estas tres alternativas, escogeremos según la intención o la tecnología que más nos guste.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> intercept(req, next) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// implementación con .tap()</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> next.handle(req).pipe(tap(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(err)));</span><br><span class=\"line\">   <span class=\"comment\">// implementación con catchError retornando nulo</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> of(<span class=\"literal\">null</span>)));</span><br><span class=\"line\">   <span class=\"comment\">// implementación con catchError re-lanzando el error</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> throwError(err)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Gestion-centralizada-de-errores\"><a href=\"#2-2-Gestion-centralizada-de-errores\" class=\"headerlink\" title=\"2.2 Gestión centralizada de errores\"></a>2.2 Gestión centralizada de errores</h2><p>Quizás una de las más usadas sea auditar el error y reenviarlo al llamante original por si quiere hacer algo más con el mismo.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> intercept(req, next) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"keyword\">this</span>.handleError));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> handleError(err) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> unauthorized_code = <span class=\"number\">401</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> userMessage = <span class=\"string\">'Fatal error'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> HttpErrorResponse) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err.status === unauthorized_code) &#123;</span><br><span class=\"line\">      userMessage = <span class=\"string\">'Authorization needed'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      userMessage = <span class=\"string\">'Comunications error'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(userMessage);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> throwError(err);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Pero aún mejor que solo escribir en el <em>log</em>, sería avisar al usuario; ¿pero dónde y cómo?</p><h1 id=\"3-Un-notificador-de-problemas\"><a href=\"#3-Un-notificador-de-problemas\" class=\"headerlink\" title=\"3. Un notificador de problemas\"></a>3. Un notificador de problemas</h1><p>La idea es usar el <code>NotificationsStoreService</code> desde el interceptor para… en fin, notificar que ha habido un error.</p><h2 id=\"3-1-Emision-mediante-el-Store\"><a href=\"#3-1-Emision-mediante-el-Store\" class=\"headerlink\" title=\"3.1 Emisión mediante el Store\"></a>3.1 Emisión mediante el Store</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dependencia en el constructor</span></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> notificationsStore: NotificationsStoreService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> intercept(req, next) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Ojo al .bind(this), necesario para no perder el contexto</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"keyword\">this</span>.handleError.bind(<span class=\"keyword\">this</span>)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> handleError(err) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> userMessage = <span class=\"string\">'Fatal error'</span>;</span><br><span class=\"line\">  <span class=\"comment\">// emisión de la notificación</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.notificationsStoreService.dispatch(&#123; note: userMessage &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> throwError(err);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"3-2-Recepcion-desacoplada-del-interceptor\"><a href=\"#3-2-Recepcion-desacoplada-del-interceptor\" class=\"headerlink\" title=\"3.2 Recepción desacoplada del interceptor\"></a>3.2 Recepción desacoplada del interceptor</h2><p>Y ahora ya sólo queda suscribirse a los eventos y mostrarlos al usuario. Por ejemplo, desde el <code>ReceiverComponent</code>, podemos lanzar llamadas que sabemos que darán problemas y esperar pacientemente el fallo para mostrarlo al usuario.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"forceError()\"</span>&gt;</span>Force http Error<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> forceError() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> privateUrl = <span class=\"string\">'https://api-base.herokuapp.com/api/priv/secrets'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpClient.get(privateUrl).subscribe();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> notFoundUrl = <span class=\"string\">'https://api-base.herokuapp.com/api/pub/items/9'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpClient.get(notFoundUrl).subscribe();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Tenemos ahora a nuestro usuario puntualmente informado de todo lo que sucede. Hemos utilizado <strong>patrones de arquitectura de software</strong> como el observable y la inversión del control. El resultado es una serie de componentes y servicios poco acoplados que intercambian información en tiempo real.</p><p>Pero hay temas más avanzados con los que continuar. Sigue esta serie para introducir más temas de seguridad y crear tus <a href=\"../formularios-reactivos-con-Angular/\">formularios reactivos con Angular</a> mientras aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Formularios reactivos con Angular","date":"2019-03-12T09:59:27.000Z","thumbnail":"/css/images/angular-8_reactive.png","_content":"\n![formularios-reactivos-con-Angular](/images/tutorial-angular-8_reactive.png)\n\nEl **doble enlace automático** entre elementos *html* y propiedades de objetos fue el primer gran éxito de **Angular**. Ese _doble-binding_ facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.\n\nLa solución en Angular 8 pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo `ReactiveFormsModule` que viene en la librería `@angular/forms` permiten programar **formularios reactivos conducidos por el código**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/). Al finalizar tendrás una aplicación con formularios _model driven_ fáciles de mantener y validar.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/8-reactive](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/8-reactive/security)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n\n# 1 Desacople entre vista y modelo\n\nLa directiva `[(ngModel)]=\"model.property\"` con su popular _banana in a box_ establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.\n\nSe pueden establecer validaciones y configurar los eventos que disparan las actualizaciones; pero todo ello usando más y más atributos y directivas en la plantilla. Son los formularios _template driven_ que degeneran en un *html* farragoso y difícil de mantener.\n\n> Vamos a crear un formulario de registro de usuarios usando los formularios _model driven_. Para ello voy a crear el módulo _security_ con el componente _register_ y los engancharé a la ruta _security/register_.\n\nEl módulo de seguridad y su configuración lazy en el raíz:\n\n```console\nng g m security --routing true\nng g c security/register\n```\n\n```typescript\n{\n  path: 'security',\n  loadChildren: () => import('./8-reactive/security/security.module').then(m => m.SecurityModule)\n},\n```\nEl componente de registro y su ruta asignada:\n\n```typescript\nconst routes: Routes = [\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'register'\n  }\n];\n```\n\n```html\n<a routerLink=\"security/register\" class=\"button\">Register</a>\n```\n\n## 1.1 Form Builder\n\nEntra en acción el  `FormBuilder`, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un `FormGroup`, (un grupo de controles) que realiza un seguimiento del valor y estado de cambio y validez de los datos.\n\nPara poder usarlo tenemos que importar el módulo de Angular en el que viene declarado, el `ReactiveFormModule`.\n\n```typescript\nimport { ReactiveFormsModule } from '@angular/forms';\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    SecurityRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class SecurityModule { }\n```\n\nVeamos un ejemplo mínimo de su declaración en `register.component.ts`.\n\n```typescript\nexport class RegisterComponent implements OnInit {\n  public formGroup: FormGroup;\n\n  constructor( private formBuilder: FormBuilder ) { }\n\n  public ngOnInit() {\n    this.buildForm();\n  }\n  private buildForm(){\n    this.formGroup = this.formBuilder.group({});\n  }\n}\n```\n## 1.2 Form control\n\nEl formulario se define como un **grupo de controles**. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control.\n\n```typescript\nprivate buildForm() {\n  const dateLength = 10;\n  const today = new Date().toISOString().substring(0, dateLength);\n  const name = 'JOHN DOE';\n  this.formGroup = this.formBuilder.group({\n    registeredOn: today,\n    name: name.toLowerCase(),\n    email: 'john@angular.io',\n    password: ''\n  });\n}\n```\n\nComo ves, es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario; sin necesidad de cambiar los datos de base.\n\n## 1.3 Form view\n\nMientras tanto en la vista html... Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una **mayor limpieza en la vista**. Lo único necesario será asignar por nombre el elemento html con el control _typescript_ que lo gestionará.\n\n>Para ello usaremos dos directivas que vienen dentro del módulo _reactivo_ son `[formGroup]=\"objetoFormulario\"` para el formulario en su conjunto, y `formControlName=\"nombreDelControl\"` para cada control.\n\n```html\n<form [formGroup]=\"formGroup\">\n  <label for=\"registeredOn\">Registered On</label>\n  <input name=\"registeredOn\"\n        formControlName=\"registeredOn\"\n        type=\"date\" />\n  <label for=\"name\">Name</label>\n  <input name=\"name\"\n        formControlName=\"name\"\n        type=\"text\" />\n  <label for=\"email\">E-mail</label>\n  <input name=\"email\"\n        formControlName=\"email\"\n        type=\"email\" />\n  <label for=\"password\">Password</label>\n  <input name=\"password\"\n        formControlName=\"password\"\n        type=\"password\" />\n</form>\n```\n\n# 2 Validación y estados\n\nLa validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer **frente de defensa ante errores de usuarios**; ya sean involuntarios o deliberados.\n\nDichas validaciones se solían realizar agregando atributos html tales como el archiconocido `required`. Pero todo eso ahora se traslada a la configuración de cada control, donde podrás establecer una o varias reglas de validación sin mancharte con html.\n\n## 2.1 Validadores predefinidos y personalizados\n\nDe nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas que vienen predefinidas como funciones en el objeto `Validators` del _framework_.\n\n```typescript\nprivate buildForm() {\n  const dateLength = 10;\n  const today = new Date().toISOString().substring(0, dateLength);\n  const name = 'JOHN DOE';\n  const minPassLength = 4;\n  this.formGroup = this.formBuilder.group({\n    registeredOn: today,\n    name: [name.toLowerCase(), Validators.required],\n    email: ['john@angular.io', [\n      Validators.required, Validators.email\n    ]],\n    password: ['', [\n      Validators.required, Validators.minLength(minPassLength)\n    ]]\n  });\n}\n```\n\nA estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.\n\nPor ejemplo podemos agregar una validación específica a las contraseñas\n\n```typescript\npassword: ['', [\n  Validators.required,\n  Validators.minLength(minPassLength),\n  this.validatePassword\n]]\n```\nLo único que se necesita es una función que recibe como argumento el control a validar. El resultado debe ser un `null` si todo va bien. Y cualquier otra cosa en caso de fallo. Te muestro una propuesta para que puedas crear tus propios validadores.\n\n```typescript\nprivate validatePassword(control: AbstractControl) {\n  const password = control.value;\n  let error = null;\n  if (!password.includes('$')) {\n    error = { ...error, dollar: 'needs a dollar symbol' };\n  }\n  if (!parseFloat(password[0])) {\n    error = { ...error, number: 'must start with a number' };\n  }\n  return error;\n}\n```\n\n## 2.2 Estados de cambio y validación\n\nUna vez establecidas las reglas, es hora de aplicarlas y avisar al usuario en caso de que se incumplan. Los formularios y controles reactivos están gestionados por **máquinas de estados** que determinan en todo momento la situación de cada control y del formulario en si mismo.\n\n### 2.2.1 Estados de validación\n\nAl establecer una o más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.\n\nLa máquina de estados de validación contempla los siguientes estados mutuamente excluyentes:\n\n- **VALID**: el control ha pasado todos los chequeos\n- **INVALID**: el control ha fallado al menos en una regla.\n- **PENDING**: el control está en medio de un proceso de validación\n- **DISABLED**: el control está desactivado y exento de validación\n\nCuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad `errors` que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.\n\n### 2.2.2 Estados de modificación\n\nLos controles, y el formulario, se someten a otra máquina de estados que monitoriza el valor del control y sus cambios.\n\nLa máquina de estados de cambio contempla entre otros los siguientes:\n\n- **PRINSTINE**: el valor del control no ha sido cambiado por el usuario\n- **DIRTY**: el usuario ha modificado el valor del control.\n- **TOUCHED**: el usuario ha tocado el control lanzando un evento `blur` al salir.\n- **UNTOUCHED**: el usuario no ha tocado y salido del control lanzando ningún evento `blur`.\n\nComo en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.\n\nVeamos su aplicación primero en el caso general del formulario. Uno de los usos más inmediatos es deshabilitar el botón de envío cuando la validación de algún control falla.\n\n```html\n<button (click)=\"register()\"\n    [disabled]=\"formGroup.invalid\">Register me!</button>\n```\n\n> Por cierto, este sistema de gestión de los controles del formulario oculta la parte más valiosa (el valor que se pretende almacenar) en la propiedad `value` del formulario. Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.\n\n```typescript\npublic register() {\n  const user = this.formGroup.value;\n  console.log(user);\n}\n```\n\nLa validación particular para cada control permite informar al usuario del fallo concreto. Es una **buena práctica de usabilidad** el esperar a que edite un control antes de mostrarle el fallo. Y también es muy habitual usar la misma estrategia para cada control.\n\nLo que no queremos es llevar de vuelta la lógica a la vista; así que lo recomendado es crear una **función auxiliar para mostrar los errores** de validación.\n\n```typescript\npublic getError(controlName: string): string {\n  let error = '';\n  const control = this.formGroup.get(controlName);\n  if (control.touched && control.errors != null) {\n    error = JSON.stringify(control.errors);\n  }\n  return error;\n}\n```\nEn la vista colocaremos adecuadamente los mensajes para facilitarle la corrección al usuario.\n\n```html\n<span>{{ getError('name')}}</span>\n<span>{{ getError('email')}}</span>\n<span>{{ getError('password')}}</span>\n```\n\nYa tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. Como resumen podemos decir que vamos a programar más en TypeScript que en Html. La ventaja del desacople es que podremos controlar lo que enviamos y recibimos de la vista. Así se pueden aplicar formatos, validaciones y transformaciones entre lo que presentamos y lo que enviamos hacia los servicios.\n\n# 3. Un gestor de credenciales\n\nVamos a provechar el conocimiento sobre _Interceptores_ y _Observables_ para montar un pequeño sistema de gestión de credenciales. La idea es detectar respuestas a llamadas no autenticadas y redirigir al usuario a nuestra pantalla de registro.\n\nSi el usuario se registra correctamente recibiremos un _token_ que lo identifica. Lo que haremos será guardarlo y usarlo en el resto de las llamadas.\n\n## 3.1 Detección y redirección de intrusos\n\nEmpezaré por crea un servicio para el interceptor de fallos de seguridad y un componente que invocará deliberadamente a un API protegida.\n\n```console\nng g s security/auth-interceptor\nng g c security/secret\n```\n\nAl componente _secret_ le asignaremos la ruta _security/secret_\n\n```html\n  <a routerLink=\"security/register\" class=\"button\">Register</a>\n```\n\n```typescript\nconst routes: Routes = [\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: 'secret',\n    component: SecretComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'secret'\n  }\n];\n```\nEn cuanto al interceptor, haremos como ya hemos visto en el tema [7-watch](../vigilancia-y-seguridad-en-Angular/). Lo primero será proveerlo invirtiendo el control que nos cede el `HttpClient`.\n\n```typescript\n@NgModule({\n  declarations: [RegisterComponent, SecretComponent],\n  imports: [CommonModule, SecurityRoutingModule, ReactiveFormsModule, HttpClientModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptorService,\n      multi: true\n    }\n  ]\n})\nexport class SecurityModule {}\n```\n\nLuego codificaré la implementación de la interfaz `HttpInterceptor`. En este caso me interesan las respuestas con **error 401**. Emplearé el `Router` de Angular para obligar al usuario a visitar la página de registro cuando esto ocurra.\n\n```typescript\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(private router: Router) {}\n\n  public intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(catchError(this.handleError.bind(this)));\n  }\n  private handleError(err) {\n    const unauthorized_code = 401;\n    if (err instanceof HttpErrorResponse) {\n      if (err.status === unauthorized_code) {\n        this.router.navigate(['security/register']);\n      }\n    }\n    return throwError(err);\n  }\n}\n```\n\n## 3.2 Almacenamiento y uso del token\n\nAntes de nada volveremos al tema de los observables y su uso como **intermediarios entre objetos desacoplados**. Para ello crearé un servicio para almacenar y distribuir el _token_ de identificación de usuarios.\n\n```console\nng g s security/token_store\n```\n\n```typescript\nexport class TokenStoreService {\n  private token = '';\n  private token$ = new BehaviorSubject<string>('');\n\n  constructor() {}\n\n  public select$ = () => this.token$.asObservable();\n  public dispatch(token) {\n    this.token = token;\n    this.token$.next(this.token);\n  }\n}\n```\n\nDe vuelta en el componente `RegisterComponent`. Tenemos que enviar las credenciales al API para su aceptación. Si todo va bien, nos devolverán un _token_ que identifica al usuario. Es momento de usar al `TokenStore` para transmitir la noticia por toda la aplicación.\n\n```typescript\npublic register() {\n  const url = 'https://api-base.herokuapp.com/api/pub/credentials/registration';\n  const user = this.formGroup.value;\n  this.httpClient.post<any>(url, user)\n    .subscribe(res => this.tokenStore.dispatch(res.token));\n}\n```\n\n---\n\nPor último volvemos al `AuthInterceptorService` en el que nos suscribiremos a los cambios acerca del _token_.\n\n```typescript\nprivate token = '';\nconstructor(private router: Router, private tokenStore: TokenStoreService) {\n  this.tokenStore.select$()\n    .subscribe(token => (this.token = token));\n}\n```\n\nY lo usaremos en las cabeceras de todas las llamadas.\n\n\n```typescript\npublic intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n  const authHeader = { Authorization: 'bearer ' + this.token };\n  const authReq = req.clone({ setHeaders: authHeader });\n  return next.handle(authReq)\n    .pipe(catchError(this.handleError.bind(this)));\n}\n```\n\nYa sabes lo básico de Angular; pero puedes usar mucho más conociendo su ecosistema. Sigue esta serie para agregar librerías y usar los esquemas de  [Material Design y CLI de Angular](../Material-Design-y-CLI-de-Angular/) mientras aprendes a programar con Angular.\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-8-Formularios-reactivos-con-Angular.md","raw":"---\ntitle: Formularios reactivos con Angular\npermalink: formularios-reactivos-con-Angular\ndate: 2019-03-12 10:59:27\ntags:\n- Angular\n- Angular8\n- Angular2\n- reactiveForms\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-8_reactive.png\n---\n\n![formularios-reactivos-con-Angular](/images/tutorial-angular-8_reactive.png)\n\nEl **doble enlace automático** entre elementos *html* y propiedades de objetos fue el primer gran éxito de **Angular**. Ese _doble-binding_ facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.\n\nLa solución en Angular 8 pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo `ReactiveFormsModule` que viene en la librería `@angular/forms` permiten programar **formularios reactivos conducidos por el código**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Vigilancia y seguridad en Angular](../vigilancia-y-seguridad-en-Angular/). Al finalizar tendrás una aplicación con formularios _model driven_ fáciles de mantener y validar.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/8-reactive](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/8-reactive/security)\n>\n> > Tienes una versión desplegada operativa para probar [Angular Basic](https://academiabinaria.github.io/angular-basic/)\n\n\n# 1 Desacople entre vista y modelo\n\nLa directiva `[(ngModel)]=\"model.property\"` con su popular _banana in a box_ establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.\n\nSe pueden establecer validaciones y configurar los eventos que disparan las actualizaciones; pero todo ello usando más y más atributos y directivas en la plantilla. Son los formularios _template driven_ que degeneran en un *html* farragoso y difícil de mantener.\n\n> Vamos a crear un formulario de registro de usuarios usando los formularios _model driven_. Para ello voy a crear el módulo _security_ con el componente _register_ y los engancharé a la ruta _security/register_.\n\nEl módulo de seguridad y su configuración lazy en el raíz:\n\n```console\nng g m security --routing true\nng g c security/register\n```\n\n```typescript\n{\n  path: 'security',\n  loadChildren: () => import('./8-reactive/security/security.module').then(m => m.SecurityModule)\n},\n```\nEl componente de registro y su ruta asignada:\n\n```typescript\nconst routes: Routes = [\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'register'\n  }\n];\n```\n\n```html\n<a routerLink=\"security/register\" class=\"button\">Register</a>\n```\n\n## 1.1 Form Builder\n\nEntra en acción el  `FormBuilder`, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un `FormGroup`, (un grupo de controles) que realiza un seguimiento del valor y estado de cambio y validez de los datos.\n\nPara poder usarlo tenemos que importar el módulo de Angular en el que viene declarado, el `ReactiveFormModule`.\n\n```typescript\nimport { ReactiveFormsModule } from '@angular/forms';\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    SecurityRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class SecurityModule { }\n```\n\nVeamos un ejemplo mínimo de su declaración en `register.component.ts`.\n\n```typescript\nexport class RegisterComponent implements OnInit {\n  public formGroup: FormGroup;\n\n  constructor( private formBuilder: FormBuilder ) { }\n\n  public ngOnInit() {\n    this.buildForm();\n  }\n  private buildForm(){\n    this.formGroup = this.formBuilder.group({});\n  }\n}\n```\n## 1.2 Form control\n\nEl formulario se define como un **grupo de controles**. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control.\n\n```typescript\nprivate buildForm() {\n  const dateLength = 10;\n  const today = new Date().toISOString().substring(0, dateLength);\n  const name = 'JOHN DOE';\n  this.formGroup = this.formBuilder.group({\n    registeredOn: today,\n    name: name.toLowerCase(),\n    email: 'john@angular.io',\n    password: ''\n  });\n}\n```\n\nComo ves, es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario; sin necesidad de cambiar los datos de base.\n\n## 1.3 Form view\n\nMientras tanto en la vista html... Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una **mayor limpieza en la vista**. Lo único necesario será asignar por nombre el elemento html con el control _typescript_ que lo gestionará.\n\n>Para ello usaremos dos directivas que vienen dentro del módulo _reactivo_ son `[formGroup]=\"objetoFormulario\"` para el formulario en su conjunto, y `formControlName=\"nombreDelControl\"` para cada control.\n\n```html\n<form [formGroup]=\"formGroup\">\n  <label for=\"registeredOn\">Registered On</label>\n  <input name=\"registeredOn\"\n        formControlName=\"registeredOn\"\n        type=\"date\" />\n  <label for=\"name\">Name</label>\n  <input name=\"name\"\n        formControlName=\"name\"\n        type=\"text\" />\n  <label for=\"email\">E-mail</label>\n  <input name=\"email\"\n        formControlName=\"email\"\n        type=\"email\" />\n  <label for=\"password\">Password</label>\n  <input name=\"password\"\n        formControlName=\"password\"\n        type=\"password\" />\n</form>\n```\n\n# 2 Validación y estados\n\nLa validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer **frente de defensa ante errores de usuarios**; ya sean involuntarios o deliberados.\n\nDichas validaciones se solían realizar agregando atributos html tales como el archiconocido `required`. Pero todo eso ahora se traslada a la configuración de cada control, donde podrás establecer una o varias reglas de validación sin mancharte con html.\n\n## 2.1 Validadores predefinidos y personalizados\n\nDe nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas que vienen predefinidas como funciones en el objeto `Validators` del _framework_.\n\n```typescript\nprivate buildForm() {\n  const dateLength = 10;\n  const today = new Date().toISOString().substring(0, dateLength);\n  const name = 'JOHN DOE';\n  const minPassLength = 4;\n  this.formGroup = this.formBuilder.group({\n    registeredOn: today,\n    name: [name.toLowerCase(), Validators.required],\n    email: ['john@angular.io', [\n      Validators.required, Validators.email\n    ]],\n    password: ['', [\n      Validators.required, Validators.minLength(minPassLength)\n    ]]\n  });\n}\n```\n\nA estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.\n\nPor ejemplo podemos agregar una validación específica a las contraseñas\n\n```typescript\npassword: ['', [\n  Validators.required,\n  Validators.minLength(minPassLength),\n  this.validatePassword\n]]\n```\nLo único que se necesita es una función que recibe como argumento el control a validar. El resultado debe ser un `null` si todo va bien. Y cualquier otra cosa en caso de fallo. Te muestro una propuesta para que puedas crear tus propios validadores.\n\n```typescript\nprivate validatePassword(control: AbstractControl) {\n  const password = control.value;\n  let error = null;\n  if (!password.includes('$')) {\n    error = { ...error, dollar: 'needs a dollar symbol' };\n  }\n  if (!parseFloat(password[0])) {\n    error = { ...error, number: 'must start with a number' };\n  }\n  return error;\n}\n```\n\n## 2.2 Estados de cambio y validación\n\nUna vez establecidas las reglas, es hora de aplicarlas y avisar al usuario en caso de que se incumplan. Los formularios y controles reactivos están gestionados por **máquinas de estados** que determinan en todo momento la situación de cada control y del formulario en si mismo.\n\n### 2.2.1 Estados de validación\n\nAl establecer una o más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.\n\nLa máquina de estados de validación contempla los siguientes estados mutuamente excluyentes:\n\n- **VALID**: el control ha pasado todos los chequeos\n- **INVALID**: el control ha fallado al menos en una regla.\n- **PENDING**: el control está en medio de un proceso de validación\n- **DISABLED**: el control está desactivado y exento de validación\n\nCuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad `errors` que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.\n\n### 2.2.2 Estados de modificación\n\nLos controles, y el formulario, se someten a otra máquina de estados que monitoriza el valor del control y sus cambios.\n\nLa máquina de estados de cambio contempla entre otros los siguientes:\n\n- **PRINSTINE**: el valor del control no ha sido cambiado por el usuario\n- **DIRTY**: el usuario ha modificado el valor del control.\n- **TOUCHED**: el usuario ha tocado el control lanzando un evento `blur` al salir.\n- **UNTOUCHED**: el usuario no ha tocado y salido del control lanzando ningún evento `blur`.\n\nComo en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.\n\nVeamos su aplicación primero en el caso general del formulario. Uno de los usos más inmediatos es deshabilitar el botón de envío cuando la validación de algún control falla.\n\n```html\n<button (click)=\"register()\"\n    [disabled]=\"formGroup.invalid\">Register me!</button>\n```\n\n> Por cierto, este sistema de gestión de los controles del formulario oculta la parte más valiosa (el valor que se pretende almacenar) en la propiedad `value` del formulario. Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.\n\n```typescript\npublic register() {\n  const user = this.formGroup.value;\n  console.log(user);\n}\n```\n\nLa validación particular para cada control permite informar al usuario del fallo concreto. Es una **buena práctica de usabilidad** el esperar a que edite un control antes de mostrarle el fallo. Y también es muy habitual usar la misma estrategia para cada control.\n\nLo que no queremos es llevar de vuelta la lógica a la vista; así que lo recomendado es crear una **función auxiliar para mostrar los errores** de validación.\n\n```typescript\npublic getError(controlName: string): string {\n  let error = '';\n  const control = this.formGroup.get(controlName);\n  if (control.touched && control.errors != null) {\n    error = JSON.stringify(control.errors);\n  }\n  return error;\n}\n```\nEn la vista colocaremos adecuadamente los mensajes para facilitarle la corrección al usuario.\n\n```html\n<span>{{ getError('name')}}</span>\n<span>{{ getError('email')}}</span>\n<span>{{ getError('password')}}</span>\n```\n\nYa tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. Como resumen podemos decir que vamos a programar más en TypeScript que en Html. La ventaja del desacople es que podremos controlar lo que enviamos y recibimos de la vista. Así se pueden aplicar formatos, validaciones y transformaciones entre lo que presentamos y lo que enviamos hacia los servicios.\n\n# 3. Un gestor de credenciales\n\nVamos a provechar el conocimiento sobre _Interceptores_ y _Observables_ para montar un pequeño sistema de gestión de credenciales. La idea es detectar respuestas a llamadas no autenticadas y redirigir al usuario a nuestra pantalla de registro.\n\nSi el usuario se registra correctamente recibiremos un _token_ que lo identifica. Lo que haremos será guardarlo y usarlo en el resto de las llamadas.\n\n## 3.1 Detección y redirección de intrusos\n\nEmpezaré por crea un servicio para el interceptor de fallos de seguridad y un componente que invocará deliberadamente a un API protegida.\n\n```console\nng g s security/auth-interceptor\nng g c security/secret\n```\n\nAl componente _secret_ le asignaremos la ruta _security/secret_\n\n```html\n  <a routerLink=\"security/register\" class=\"button\">Register</a>\n```\n\n```typescript\nconst routes: Routes = [\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: 'secret',\n    component: SecretComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'secret'\n  }\n];\n```\nEn cuanto al interceptor, haremos como ya hemos visto en el tema [7-watch](../vigilancia-y-seguridad-en-Angular/). Lo primero será proveerlo invirtiendo el control que nos cede el `HttpClient`.\n\n```typescript\n@NgModule({\n  declarations: [RegisterComponent, SecretComponent],\n  imports: [CommonModule, SecurityRoutingModule, ReactiveFormsModule, HttpClientModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptorService,\n      multi: true\n    }\n  ]\n})\nexport class SecurityModule {}\n```\n\nLuego codificaré la implementación de la interfaz `HttpInterceptor`. En este caso me interesan las respuestas con **error 401**. Emplearé el `Router` de Angular para obligar al usuario a visitar la página de registro cuando esto ocurra.\n\n```typescript\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(private router: Router) {}\n\n  public intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(catchError(this.handleError.bind(this)));\n  }\n  private handleError(err) {\n    const unauthorized_code = 401;\n    if (err instanceof HttpErrorResponse) {\n      if (err.status === unauthorized_code) {\n        this.router.navigate(['security/register']);\n      }\n    }\n    return throwError(err);\n  }\n}\n```\n\n## 3.2 Almacenamiento y uso del token\n\nAntes de nada volveremos al tema de los observables y su uso como **intermediarios entre objetos desacoplados**. Para ello crearé un servicio para almacenar y distribuir el _token_ de identificación de usuarios.\n\n```console\nng g s security/token_store\n```\n\n```typescript\nexport class TokenStoreService {\n  private token = '';\n  private token$ = new BehaviorSubject<string>('');\n\n  constructor() {}\n\n  public select$ = () => this.token$.asObservable();\n  public dispatch(token) {\n    this.token = token;\n    this.token$.next(this.token);\n  }\n}\n```\n\nDe vuelta en el componente `RegisterComponent`. Tenemos que enviar las credenciales al API para su aceptación. Si todo va bien, nos devolverán un _token_ que identifica al usuario. Es momento de usar al `TokenStore` para transmitir la noticia por toda la aplicación.\n\n```typescript\npublic register() {\n  const url = 'https://api-base.herokuapp.com/api/pub/credentials/registration';\n  const user = this.formGroup.value;\n  this.httpClient.post<any>(url, user)\n    .subscribe(res => this.tokenStore.dispatch(res.token));\n}\n```\n\n---\n\nPor último volvemos al `AuthInterceptorService` en el que nos suscribiremos a los cambios acerca del _token_.\n\n```typescript\nprivate token = '';\nconstructor(private router: Router, private tokenStore: TokenStoreService) {\n  this.tokenStore.select$()\n    .subscribe(token => (this.token = token));\n}\n```\n\nY lo usaremos en las cabeceras de todas las llamadas.\n\n\n```typescript\npublic intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n  const authHeader = { Authorization: 'bearer ' + this.token };\n  const authReq = req.clone({ setHeaders: authHeader });\n  return next.handle(authReq)\n    .pipe(catchError(this.handleError.bind(this)));\n}\n```\n\nYa sabes lo básico de Angular; pero puedes usar mucho más conociendo su ecosistema. Sigue esta serie para agregar librerías y usar los esquemas de  [Material Design y CLI de Angular](../Material-Design-y-CLI-de-Angular/) mientras aprendes a programar con Angular.\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"formularios-reactivos-con-Angular","published":1,"updated":"2019-08-05T15:01:13.403Z","_id":"cjyh5p4b3000j18s3u6kblugv","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-8_reactive.png\" alt=\"formularios-reactivos-con-Angular\"></p><p>El <strong>doble enlace automático</strong> entre elementos <em>html</em> y propiedades de objetos fue el primer gran éxito de <strong>Angular</strong>. Ese <em>doble-binding</em> facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.</p><p>La solución en Angular 8 pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo <code>ReactiveFormsModule</code> que viene en la librería <code>@angular/forms</code> permiten programar <strong>formularios reactivos conducidos por el código</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../vigilancia-y-seguridad-en-Angular/\">Vigilancia y seguridad en Angular</a>. Al finalizar tendrás una aplicación con formularios <em>model driven</em> fáciles de mantener y validar.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/8-reactive/security\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/8-reactive</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-Desacople-entre-vista-y-modelo\"><a href=\"#1-Desacople-entre-vista-y-modelo\" class=\"headerlink\" title=\"1 Desacople entre vista y modelo\"></a>1 Desacople entre vista y modelo</h1><p>La directiva <code>[(ngModel)]=&quot;model.property&quot;</code> con su popular <em>banana in a box</em> establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.</p><p>Se pueden establecer validaciones y configurar los eventos que disparan las actualizaciones; pero todo ello usando más y más atributos y directivas en la plantilla. Son los formularios <em>template driven</em> que degeneran en un <em>html</em> farragoso y difícil de mantener.</p><blockquote><p>Vamos a crear un formulario de registro de usuarios usando los formularios <em>model driven</em>. Para ello voy a crear el módulo <em>security</em> con el componente <em>register</em> y los engancharé a la ruta <em>security/register</em>.</p></blockquote><p>El módulo de seguridad y su configuración lazy en el raíz:</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m security --routing true</span><br><span class=\"line\">ng g c security/register</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">'security'</span>,</span><br><span class=\"line\">  loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./8-reactive/security/security.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.SecurityModule)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><p>El componente de registro y su ruta asignada:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'register'</span>,</span><br><span class=\"line\">    component: RegisterComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'register'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"security/register\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"1-1-Form-Builder\"><a href=\"#1-1-Form-Builder\" class=\"headerlink\" title=\"1.1 Form Builder\"></a>1.1 Form Builder</h2><p>Entra en acción el <code>FormBuilder</code>, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un <code>FormGroup</code>, (un grupo de controles) que realiza un seguimiento del valor y estado de cambio y validez de los datos.</p><p>Para poder usarlo tenemos que importar el módulo de Angular en el que viene declarado, el <code>ReactiveFormModule</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ReactiveFormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [RegisterComponent],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    CommonModule,</span><br><span class=\"line\">    SecurityRoutingModule,</span><br><span class=\"line\">    ReactiveFormsModule</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SecurityModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>Veamos un ejemplo mínimo de su declaración en <code>register.component.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RegisterComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> formGroup: FormGroup;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> formBuilder: FormBuilder </span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.buildForm();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> buildForm()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.formGroup = <span class=\"keyword\">this</span>.formBuilder.group(&#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"1-2-Form-control\"><a href=\"#1-2-Form-control\" class=\"headerlink\" title=\"1.2 Form control\"></a>1.2 Form control</h2><p>El formulario se define como un <strong>grupo de controles</strong>. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> buildForm() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dateLength = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().substring(<span class=\"number\">0</span>, dateLength);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">'JOHN DOE'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formGroup = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</span><br><span class=\"line\">    registeredOn: today,</span><br><span class=\"line\">    name: name.toLowerCase(),</span><br><span class=\"line\">    email: <span class=\"string\">'john@angular.io'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Como ves, es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario; sin necesidad de cambiar los datos de base.</p><h2 id=\"1-3-Form-view\"><a href=\"#1-3-Form-view\" class=\"headerlink\" title=\"1.3 Form view\"></a>1.3 Form view</h2><p>Mientras tanto en la vista html… Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una <strong>mayor limpieza en la vista</strong>. Lo único necesario será asignar por nombre el elemento html con el control <em>typescript</em> que lo gestionará.</p><blockquote><p>Para ello usaremos dos directivas que vienen dentro del módulo <em>reactivo</em> son <code>[formGroup]=&quot;objetoFormulario&quot;</code> para el formulario en su conjunto, y <code>formControlName=&quot;nombreDelControl&quot;</code> para cada control.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"formGroup\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"registeredOn\"</span>&gt;</span>Registered On<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"registeredOn\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"registeredOn\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"email\"</span>&gt;</span>E-mail<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"email\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"2-Validacion-y-estados\"><a href=\"#2-Validacion-y-estados\" class=\"headerlink\" title=\"2 Validación y estados\"></a>2 Validación y estados</h1><p>La validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer <strong>frente de defensa ante errores de usuarios</strong>; ya sean involuntarios o deliberados.</p><p>Dichas validaciones se solían realizar agregando atributos html tales como el archiconocido <code>required</code>. Pero todo eso ahora se traslada a la configuración de cada control, donde podrás establecer una o varias reglas de validación sin mancharte con html.</p><h2 id=\"2-1-Validadores-predefinidos-y-personalizados\"><a href=\"#2-1-Validadores-predefinidos-y-personalizados\" class=\"headerlink\" title=\"2.1 Validadores predefinidos y personalizados\"></a>2.1 Validadores predefinidos y personalizados</h2><p>De nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas que vienen predefinidas como funciones en el objeto <code>Validators</code> del <em>framework</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> buildForm() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dateLength = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().substring(<span class=\"number\">0</span>, dateLength);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">'JOHN DOE'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> minPassLength = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formGroup = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</span><br><span class=\"line\">    registeredOn: today,</span><br><span class=\"line\">    name: [name.toLowerCase(), Validators.required],</span><br><span class=\"line\">    email: [<span class=\"string\">'john@angular.io'</span>, [</span><br><span class=\"line\">      Validators.required, Validators.email</span><br><span class=\"line\">    ]],</span><br><span class=\"line\">    password: [<span class=\"string\">''</span>, [</span><br><span class=\"line\">      Validators.required, Validators.minLength(minPassLength)</span><br><span class=\"line\">    ]]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>A estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.</p><p>Por ejemplo podemos agregar una validación específica a las contraseñas</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">password: [<span class=\"string\">''</span>, [</span><br><span class=\"line\">  Validators.required,</span><br><span class=\"line\">  Validators.minLength(minPassLength),</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.validatePassword</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure><p>Lo único que se necesita es una función que recibe como argumento el control a validar. El resultado debe ser un <code>null</code> si todo va bien. Y cualquier otra cosa en caso de fallo. Te muestro una propuesta para que puedas crear tus propios validadores.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> validatePassword(control: AbstractControl) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> password = control.value;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!password.includes(<span class=\"string\">'$'</span>)) &#123;</span><br><span class=\"line\">    error = &#123; ...error, dollar: <span class=\"string\">'needs a dollar symbol'</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">parseFloat</span>(password[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">    error = &#123; ...error, <span class=\"built_in\">number</span>: <span class=\"string\">'must start with a number'</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Estados-de-cambio-y-validacion\"><a href=\"#2-2-Estados-de-cambio-y-validacion\" class=\"headerlink\" title=\"2.2 Estados de cambio y validación\"></a>2.2 Estados de cambio y validación</h2><p>Una vez establecidas las reglas, es hora de aplicarlas y avisar al usuario en caso de que se incumplan. Los formularios y controles reactivos están gestionados por <strong>máquinas de estados</strong> que determinan en todo momento la situación de cada control y del formulario en si mismo.</p><h3 id=\"2-2-1-Estados-de-validacion\"><a href=\"#2-2-1-Estados-de-validacion\" class=\"headerlink\" title=\"2.2.1 Estados de validación\"></a>2.2.1 Estados de validación</h3><p>Al establecer una o más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.</p><p>La máquina de estados de validación contempla los siguientes estados mutuamente excluyentes:</p><ul><li><strong>VALID</strong>: el control ha pasado todos los chequeos</li><li><strong>INVALID</strong>: el control ha fallado al menos en una regla.</li><li><strong>PENDING</strong>: el control está en medio de un proceso de validación</li><li><strong>DISABLED</strong>: el control está desactivado y exento de validación</li></ul><p>Cuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad <code>errors</code> que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.</p><h3 id=\"2-2-2-Estados-de-modificacion\"><a href=\"#2-2-2-Estados-de-modificacion\" class=\"headerlink\" title=\"2.2.2 Estados de modificación\"></a>2.2.2 Estados de modificación</h3><p>Los controles, y el formulario, se someten a otra máquina de estados que monitoriza el valor del control y sus cambios.</p><p>La máquina de estados de cambio contempla entre otros los siguientes:</p><ul><li><strong>PRINSTINE</strong>: el valor del control no ha sido cambiado por el usuario</li><li><strong>DIRTY</strong>: el usuario ha modificado el valor del control.</li><li><strong>TOUCHED</strong>: el usuario ha tocado el control lanzando un evento <code>blur</code> al salir.</li><li><strong>UNTOUCHED</strong>: el usuario no ha tocado y salido del control lanzando ningún evento <code>blur</code>.</li></ul><p>Como en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.</p><p>Veamos su aplicación primero en el caso general del formulario. Uno de los usos más inmediatos es deshabilitar el botón de envío cuando la validación de algún control falla.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"register()\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"formGroup.invalid\"</span>&gt;</span>Register me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Por cierto, este sistema de gestión de los controles del formulario oculta la parte más valiosa (el valor que se pretende almacenar) en la propiedad <code>value</code> del formulario. Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> register() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.formGroup.value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>La validación particular para cada control permite informar al usuario del fallo concreto. Es una <strong>buena práctica de usabilidad</strong> el esperar a que edite un control antes de mostrarle el fallo. Y también es muy habitual usar la misma estrategia para cada control.</p><p>Lo que no queremos es llevar de vuelta la lógica a la vista; así que lo recomendado es crear una <strong>función auxiliar para mostrar los errores</strong> de validación.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> getError(controlName: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> control = <span class=\"keyword\">this</span>.formGroup.get(controlName);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (control.touched &amp;&amp; control.errors != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    error = <span class=\"built_in\">JSON</span>.stringify(control.errors);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>En la vista colocaremos adecuadamente los mensajes para facilitarle la corrección al usuario.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError('name')&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError('email')&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError('password')&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ya tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. Como resumen podemos decir que vamos a programar más en TypeScript que en Html. La ventaja del desacople es que podremos controlar lo que enviamos y recibimos de la vista. Así se pueden aplicar formatos, validaciones y transformaciones entre lo que presentamos y lo que enviamos hacia los servicios.</p><h1 id=\"3-Un-gestor-de-credenciales\"><a href=\"#3-Un-gestor-de-credenciales\" class=\"headerlink\" title=\"3. Un gestor de credenciales\"></a>3. Un gestor de credenciales</h1><p>Vamos a provechar el conocimiento sobre <em>Interceptores</em> y <em>Observables</em> para montar un pequeño sistema de gestión de credenciales. La idea es detectar respuestas a llamadas no autenticadas y redirigir al usuario a nuestra pantalla de registro.</p><p>Si el usuario se registra correctamente recibiremos un <em>token</em> que lo identifica. Lo que haremos será guardarlo y usarlo en el resto de las llamadas.</p><h2 id=\"3-1-Deteccion-y-redireccion-de-intrusos\"><a href=\"#3-1-Deteccion-y-redireccion-de-intrusos\" class=\"headerlink\" title=\"3.1 Detección y redirección de intrusos\"></a>3.1 Detección y redirección de intrusos</h2><p>Empezaré por crea un servicio para el interceptor de fallos de seguridad y un componente que invocará deliberadamente a un API protegida.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s security/auth-interceptor</span><br><span class=\"line\">ng g c security/secret</span><br></pre></td></tr></table></figure><p>Al componente <em>secret</em> le asignaremos la ruta <em>security/secret</em></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"security/register\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'register'</span>,</span><br><span class=\"line\">    component: RegisterComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'secret'</span>,</span><br><span class=\"line\">    component: SecretComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'secret'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>En cuanto al interceptor, haremos como ya hemos visto en el tema <a href=\"../vigilancia-y-seguridad-en-Angular/\">7-watch</a>. Lo primero será proveerlo invirtiendo el control que nos cede el <code>HttpClient</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [RegisterComponent, SecretComponent],</span><br><span class=\"line\">  imports: [CommonModule, SecurityRoutingModule, ReactiveFormsModule, HttpClientModule],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: HTTP_INTERCEPTORS,</span><br><span class=\"line\">      useClass: AuthInterceptorService,</span><br><span class=\"line\">      multi: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SecurityModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Luego codificaré la implementación de la interfaz <code>HttpInterceptor</code>. En este caso me interesan las respuestas con <strong>error 401</strong>. Emplearé el <code>Router</code> de Angular para obligar al usuario a visitar la página de registro cuando esto ocurra.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuthInterceptorService <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"keyword\">this</span>.handleError.bind(<span class=\"keyword\">this</span>)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> handleError(err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> unauthorized_code = <span class=\"number\">401</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> HttpErrorResponse) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err.status === unauthorized_code) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'security/register'</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> throwError(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"3-2-Almacenamiento-y-uso-del-token\"><a href=\"#3-2-Almacenamiento-y-uso-del-token\" class=\"headerlink\" title=\"3.2 Almacenamiento y uso del token\"></a>3.2 Almacenamiento y uso del token</h2><p>Antes de nada volveremos al tema de los observables y su uso como <strong>intermediarios entre objetos desacoplados</strong>. Para ello crearé un servicio para almacenar y distribuir el <em>token</em> de identificación de usuarios.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s security/token_store</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TokenStoreService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> token = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> token$ = <span class=\"keyword\">new</span> BehaviorSubject&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> select$ = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.token$.asObservable();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> dispatch(token) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token = token;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token$.next(<span class=\"keyword\">this</span>.token);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>De vuelta en el componente <code>RegisterComponent</code>. Tenemos que enviar las credenciales al API para su aceptación. Si todo va bien, nos devolverán un <em>token</em> que identifica al usuario. Es momento de usar al <code>TokenStore</code> para transmitir la noticia por toda la aplicación.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> register() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">'https://api-base.herokuapp.com/api/pub/credentials/registration'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.formGroup.value;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpClient.post&lt;<span class=\"built_in\">any</span>&gt;(url, user)</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"keyword\">this</span>.tokenStore.dispatch(res.token));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><p>Por último volvemos al <code>AuthInterceptorService</code> en el que nos suscribiremos a los cambios acerca del <em>token</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> token = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router, <span class=\"keyword\">private</span> tokenStore: TokenStoreService</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tokenStore.select$()</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">token</span> =&gt;</span> (<span class=\"keyword\">this</span>.token = token));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y lo usaremos en las cabeceras de todas las llamadas.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> authHeader = &#123; Authorization: <span class=\"string\">'bearer '</span> + <span class=\"keyword\">this</span>.token &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> authReq = req.clone(&#123; setHeaders: authHeader &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> next.handle(authReq)</span><br><span class=\"line\">    .pipe(catchError(<span class=\"keyword\">this</span>.handleError.bind(<span class=\"keyword\">this</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ya sabes lo básico de Angular; pero puedes usar mucho más conociendo su ecosistema. Sigue esta serie para agregar librerías y usar los esquemas de <a href=\"../Material-Design-y-CLI-de-Angular/\">Material Design y CLI de Angular</a> mientras aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-8_reactive.png\" alt=\"formularios-reactivos-con-Angular\"></p><p>El <strong>doble enlace automático</strong> entre elementos <em>html</em> y propiedades de objetos fue el primer gran éxito de <strong>Angular</strong>. Ese <em>doble-binding</em> facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.</p><p>La solución en Angular 8 pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo <code>ReactiveFormsModule</code> que viene en la librería <code>@angular/forms</code> permiten programar <strong>formularios reactivos conducidos por el código</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../vigilancia-y-seguridad-en-Angular/\">Vigilancia y seguridad en Angular</a>. Al finalizar tendrás una aplicación con formularios <em>model driven</em> fáciles de mantener y validar.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/8-reactive/security\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/8-reactive</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/\" target=\"_blank\" rel=\"noopener\">Angular Basic</a></p></blockquote></blockquote><h1 id=\"1-Desacople-entre-vista-y-modelo\"><a href=\"#1-Desacople-entre-vista-y-modelo\" class=\"headerlink\" title=\"1 Desacople entre vista y modelo\"></a>1 Desacople entre vista y modelo</h1><p>La directiva <code>[(ngModel)]=&quot;model.property&quot;</code> con su popular <em>banana in a box</em> establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.</p><p>Se pueden establecer validaciones y configurar los eventos que disparan las actualizaciones; pero todo ello usando más y más atributos y directivas en la plantilla. Son los formularios <em>template driven</em> que degeneran en un <em>html</em> farragoso y difícil de mantener.</p><blockquote><p>Vamos a crear un formulario de registro de usuarios usando los formularios <em>model driven</em>. Para ello voy a crear el módulo <em>security</em> con el componente <em>register</em> y los engancharé a la ruta <em>security/register</em>.</p></blockquote><p>El módulo de seguridad y su configuración lazy en el raíz:</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m security --routing true</span><br><span class=\"line\">ng g c security/register</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">'security'</span>,</span><br><span class=\"line\">  loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./8-reactive/security/security.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.SecurityModule)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><p>El componente de registro y su ruta asignada:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'register'</span>,</span><br><span class=\"line\">    component: RegisterComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'register'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"security/register\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"1-1-Form-Builder\"><a href=\"#1-1-Form-Builder\" class=\"headerlink\" title=\"1.1 Form Builder\"></a>1.1 Form Builder</h2><p>Entra en acción el <code>FormBuilder</code>, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un <code>FormGroup</code>, (un grupo de controles) que realiza un seguimiento del valor y estado de cambio y validez de los datos.</p><p>Para poder usarlo tenemos que importar el módulo de Angular en el que viene declarado, el <code>ReactiveFormModule</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ReactiveFormsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/forms'</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [RegisterComponent],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    CommonModule,</span><br><span class=\"line\">    SecurityRoutingModule,</span><br><span class=\"line\">    ReactiveFormsModule</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SecurityModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>Veamos un ejemplo mínimo de su declaración en <code>register.component.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RegisterComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> formGroup: FormGroup;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"> <span class=\"keyword\">private</span> formBuilder: FormBuilder </span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.buildForm();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> buildForm()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.formGroup = <span class=\"keyword\">this</span>.formBuilder.group(&#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"1-2-Form-control\"><a href=\"#1-2-Form-control\" class=\"headerlink\" title=\"1.2 Form control\"></a>1.2 Form control</h2><p>El formulario se define como un <strong>grupo de controles</strong>. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> buildForm() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dateLength = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().substring(<span class=\"number\">0</span>, dateLength);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">'JOHN DOE'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formGroup = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</span><br><span class=\"line\">    registeredOn: today,</span><br><span class=\"line\">    name: name.toLowerCase(),</span><br><span class=\"line\">    email: <span class=\"string\">'john@angular.io'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Como ves, es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario; sin necesidad de cambiar los datos de base.</p><h2 id=\"1-3-Form-view\"><a href=\"#1-3-Form-view\" class=\"headerlink\" title=\"1.3 Form view\"></a>1.3 Form view</h2><p>Mientras tanto en la vista html… Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una <strong>mayor limpieza en la vista</strong>. Lo único necesario será asignar por nombre el elemento html con el control <em>typescript</em> que lo gestionará.</p><blockquote><p>Para ello usaremos dos directivas que vienen dentro del módulo <em>reactivo</em> son <code>[formGroup]=&quot;objetoFormulario&quot;</code> para el formulario en su conjunto, y <code>formControlName=&quot;nombreDelControl&quot;</code> para cada control.</p></blockquote><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">\"formGroup\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"registeredOn\"</span>&gt;</span>Registered On<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"registeredOn\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"registeredOn\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"name\"</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"email\"</span>&gt;</span>E-mail<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"email\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">formControlName</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"2-Validacion-y-estados\"><a href=\"#2-Validacion-y-estados\" class=\"headerlink\" title=\"2 Validación y estados\"></a>2 Validación y estados</h1><p>La validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer <strong>frente de defensa ante errores de usuarios</strong>; ya sean involuntarios o deliberados.</p><p>Dichas validaciones se solían realizar agregando atributos html tales como el archiconocido <code>required</code>. Pero todo eso ahora se traslada a la configuración de cada control, donde podrás establecer una o varias reglas de validación sin mancharte con html.</p><h2 id=\"2-1-Validadores-predefinidos-y-personalizados\"><a href=\"#2-1-Validadores-predefinidos-y-personalizados\" class=\"headerlink\" title=\"2.1 Validadores predefinidos y personalizados\"></a>2.1 Validadores predefinidos y personalizados</h2><p>De nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas que vienen predefinidas como funciones en el objeto <code>Validators</code> del <em>framework</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> buildForm() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dateLength = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().substring(<span class=\"number\">0</span>, dateLength);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">'JOHN DOE'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> minPassLength = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.formGroup = <span class=\"keyword\">this</span>.formBuilder.group(&#123;</span><br><span class=\"line\">    registeredOn: today,</span><br><span class=\"line\">    name: [name.toLowerCase(), Validators.required],</span><br><span class=\"line\">    email: [<span class=\"string\">'john@angular.io'</span>, [</span><br><span class=\"line\">      Validators.required, Validators.email</span><br><span class=\"line\">    ]],</span><br><span class=\"line\">    password: [<span class=\"string\">''</span>, [</span><br><span class=\"line\">      Validators.required, Validators.minLength(minPassLength)</span><br><span class=\"line\">    ]]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>A estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.</p><p>Por ejemplo podemos agregar una validación específica a las contraseñas</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">password: [<span class=\"string\">''</span>, [</span><br><span class=\"line\">  Validators.required,</span><br><span class=\"line\">  Validators.minLength(minPassLength),</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.validatePassword</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure><p>Lo único que se necesita es una función que recibe como argumento el control a validar. El resultado debe ser un <code>null</code> si todo va bien. Y cualquier otra cosa en caso de fallo. Te muestro una propuesta para que puedas crear tus propios validadores.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> validatePassword(control: AbstractControl) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> password = control.value;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!password.includes(<span class=\"string\">'$'</span>)) &#123;</span><br><span class=\"line\">    error = &#123; ...error, dollar: <span class=\"string\">'needs a dollar symbol'</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">parseFloat</span>(password[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">    error = &#123; ...error, <span class=\"built_in\">number</span>: <span class=\"string\">'must start with a number'</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Estados-de-cambio-y-validacion\"><a href=\"#2-2-Estados-de-cambio-y-validacion\" class=\"headerlink\" title=\"2.2 Estados de cambio y validación\"></a>2.2 Estados de cambio y validación</h2><p>Una vez establecidas las reglas, es hora de aplicarlas y avisar al usuario en caso de que se incumplan. Los formularios y controles reactivos están gestionados por <strong>máquinas de estados</strong> que determinan en todo momento la situación de cada control y del formulario en si mismo.</p><h3 id=\"2-2-1-Estados-de-validacion\"><a href=\"#2-2-1-Estados-de-validacion\" class=\"headerlink\" title=\"2.2.1 Estados de validación\"></a>2.2.1 Estados de validación</h3><p>Al establecer una o más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.</p><p>La máquina de estados de validación contempla los siguientes estados mutuamente excluyentes:</p><ul><li><strong>VALID</strong>: el control ha pasado todos los chequeos</li><li><strong>INVALID</strong>: el control ha fallado al menos en una regla.</li><li><strong>PENDING</strong>: el control está en medio de un proceso de validación</li><li><strong>DISABLED</strong>: el control está desactivado y exento de validación</li></ul><p>Cuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad <code>errors</code> que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.</p><h3 id=\"2-2-2-Estados-de-modificacion\"><a href=\"#2-2-2-Estados-de-modificacion\" class=\"headerlink\" title=\"2.2.2 Estados de modificación\"></a>2.2.2 Estados de modificación</h3><p>Los controles, y el formulario, se someten a otra máquina de estados que monitoriza el valor del control y sus cambios.</p><p>La máquina de estados de cambio contempla entre otros los siguientes:</p><ul><li><strong>PRINSTINE</strong>: el valor del control no ha sido cambiado por el usuario</li><li><strong>DIRTY</strong>: el usuario ha modificado el valor del control.</li><li><strong>TOUCHED</strong>: el usuario ha tocado el control lanzando un evento <code>blur</code> al salir.</li><li><strong>UNTOUCHED</strong>: el usuario no ha tocado y salido del control lanzando ningún evento <code>blur</code>.</li></ul><p>Como en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.</p><p>Veamos su aplicación primero en el caso general del formulario. Uno de los usos más inmediatos es deshabilitar el botón de envío cuando la validación de algún control falla.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"register()\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">disabled</span>]=<span class=\"string\">\"formGroup.invalid\"</span>&gt;</span>Register me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Por cierto, este sistema de gestión de los controles del formulario oculta la parte más valiosa (el valor que se pretende almacenar) en la propiedad <code>value</code> del formulario. Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> register() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.formGroup.value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>La validación particular para cada control permite informar al usuario del fallo concreto. Es una <strong>buena práctica de usabilidad</strong> el esperar a que edite un control antes de mostrarle el fallo. Y también es muy habitual usar la misma estrategia para cada control.</p><p>Lo que no queremos es llevar de vuelta la lógica a la vista; así que lo recomendado es crear una <strong>función auxiliar para mostrar los errores</strong> de validación.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> getError(controlName: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> error = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> control = <span class=\"keyword\">this</span>.formGroup.get(controlName);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (control.touched &amp;&amp; control.errors != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    error = <span class=\"built_in\">JSON</span>.stringify(control.errors);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>En la vista colocaremos adecuadamente los mensajes para facilitarle la corrección al usuario.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError('name')&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError('email')&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; getError('password')&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ya tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada. Como resumen podemos decir que vamos a programar más en TypeScript que en Html. La ventaja del desacople es que podremos controlar lo que enviamos y recibimos de la vista. Así se pueden aplicar formatos, validaciones y transformaciones entre lo que presentamos y lo que enviamos hacia los servicios.</p><h1 id=\"3-Un-gestor-de-credenciales\"><a href=\"#3-Un-gestor-de-credenciales\" class=\"headerlink\" title=\"3. Un gestor de credenciales\"></a>3. Un gestor de credenciales</h1><p>Vamos a provechar el conocimiento sobre <em>Interceptores</em> y <em>Observables</em> para montar un pequeño sistema de gestión de credenciales. La idea es detectar respuestas a llamadas no autenticadas y redirigir al usuario a nuestra pantalla de registro.</p><p>Si el usuario se registra correctamente recibiremos un <em>token</em> que lo identifica. Lo que haremos será guardarlo y usarlo en el resto de las llamadas.</p><h2 id=\"3-1-Deteccion-y-redireccion-de-intrusos\"><a href=\"#3-1-Deteccion-y-redireccion-de-intrusos\" class=\"headerlink\" title=\"3.1 Detección y redirección de intrusos\"></a>3.1 Detección y redirección de intrusos</h2><p>Empezaré por crea un servicio para el interceptor de fallos de seguridad y un componente que invocará deliberadamente a un API protegida.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s security/auth-interceptor</span><br><span class=\"line\">ng g c security/secret</span><br></pre></td></tr></table></figure><p>Al componente <em>secret</em> le asignaremos la ruta <em>security/secret</em></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"security/register\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'register'</span>,</span><br><span class=\"line\">    component: RegisterComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'secret'</span>,</span><br><span class=\"line\">    component: SecretComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'secret'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>En cuanto al interceptor, haremos como ya hemos visto en el tema <a href=\"../vigilancia-y-seguridad-en-Angular/\">7-watch</a>. Lo primero será proveerlo invirtiendo el control que nos cede el <code>HttpClient</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [RegisterComponent, SecretComponent],</span><br><span class=\"line\">  imports: [CommonModule, SecurityRoutingModule, ReactiveFormsModule, HttpClientModule],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: HTTP_INTERCEPTORS,</span><br><span class=\"line\">      useClass: AuthInterceptorService,</span><br><span class=\"line\">      multi: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SecurityModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Luego codificaré la implementación de la interfaz <code>HttpInterceptor</code>. En este caso me interesan las respuestas con <strong>error 401</strong>. Emplearé el <code>Router</code> de Angular para obligar al usuario a visitar la página de registro cuando esto ocurra.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuthInterceptorService <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(req).pipe(catchError(<span class=\"keyword\">this</span>.handleError.bind(<span class=\"keyword\">this</span>)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> handleError(err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> unauthorized_code = <span class=\"number\">401</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> HttpErrorResponse) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err.status === unauthorized_code) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.router.navigate([<span class=\"string\">'security/register'</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> throwError(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"3-2-Almacenamiento-y-uso-del-token\"><a href=\"#3-2-Almacenamiento-y-uso-del-token\" class=\"headerlink\" title=\"3.2 Almacenamiento y uso del token\"></a>3.2 Almacenamiento y uso del token</h2><p>Antes de nada volveremos al tema de los observables y su uso como <strong>intermediarios entre objetos desacoplados</strong>. Para ello crearé un servicio para almacenar y distribuir el <em>token</em> de identificación de usuarios.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g s security/token_store</span><br></pre></td></tr></table></figure><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TokenStoreService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> token = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> token$ = <span class=\"keyword\">new</span> BehaviorSubject&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> select$ = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.token$.asObservable();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> dispatch(token) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token = token;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token$.next(<span class=\"keyword\">this</span>.token);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>De vuelta en el componente <code>RegisterComponent</code>. Tenemos que enviar las credenciales al API para su aceptación. Si todo va bien, nos devolverán un <em>token</em> que identifica al usuario. Es momento de usar al <code>TokenStore</code> para transmitir la noticia por toda la aplicación.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> register() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">'https://api-base.herokuapp.com/api/pub/credentials/registration'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.formGroup.value;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.httpClient.post&lt;<span class=\"built_in\">any</span>&gt;(url, user)</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"keyword\">this</span>.tokenStore.dispatch(res.token));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><hr><p>Por último volvemos al <code>AuthInterceptorService</code> en el que nos suscribiremos a los cambios acerca del <em>token</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> token = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router, <span class=\"keyword\">private</span> tokenStore: TokenStoreService</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tokenStore.select$()</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"params\">token</span> =&gt;</span> (<span class=\"keyword\">this</span>.token = token));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y lo usaremos en las cabeceras de todas las llamadas.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> authHeader = &#123; Authorization: <span class=\"string\">'bearer '</span> + <span class=\"keyword\">this</span>.token &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> authReq = req.clone(&#123; setHeaders: authHeader &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> next.handle(authReq)</span><br><span class=\"line\">    .pipe(catchError(<span class=\"keyword\">this</span>.handleError.bind(<span class=\"keyword\">this</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ya sabes lo básico de Angular; pero puedes usar mucho más conociendo su ecosistema. Sigue esta serie para agregar librerías y usar los esquemas de <a href=\"../Material-Design-y-CLI-de-Angular/\">Material Design y CLI de Angular</a> mientras aprendes a programar con Angular.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Material Design y CLI de Angular","date":"2019-03-14T17:59:27.000Z","thumbnail":"/css/images/angular-9_material.png","_content":"\n![Material-Design-y-CLI-de-Angular](/images/tutorial-angular-9_material.png)\n\nEl _ecosistema_ de Angular está repleto de librerías para desarrolladores profesionales. Algunas hacen uso de los **schematics**, y entre ellas destaca [Angular Material](https://material.angular.io/). Esta implementación de la casa de la guía de diseño _Material Design_ de Google usa las capacidades de estas plantillas del CLI que permiten agregar librerías y generar código.\n\nUn programador Angular debe **dominar el CLI** y debe conocer los beneficios que aporta un repositorio de multi-proyecto. Hay escenarios complejos muy adecuaos para estos _mono-repos_. Pero con el CLI es muy sencillo crear y usar nuevas aplicaciones dentro de un repositorio.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Formularios reactivos con Angular](../formularios-reactivos-con-Angular/). Al finalizar tendrás, en el mismo repositorio, una nueva aplicación con la apariencia y usabilidad de _Material design_.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/projects/schemat/](https://github.com/AcademiaBinaria/angular-basic/tree/master/projects/schemat)\n>\n> > Tienes una versión desplegada operativa para probar [Schemat](https://academiabinaria.github.io/angular-basic/schemat/)\n\n# 1. Repositorio multi-proyecto\n\nEl primer comando que se usa al empezar con angular es `ng new mi-aplicacion`. Desde ese momento tu mundo es la carpeta `/src` en la que se genera el código y en la que vas a desarrollar.\n\nPero con el tiempo, ciertos proyectos crecen y hay que dividirlos. O quizás surjan aplicaciones hermanas. Angular CLI permite disponer de más de un proyecto **compartiendo repositorio y configuración**.\n\n## 1.1 Carpetas src y projects\n\nDado un repositorio inicial, para agregar una nueva aplicación usaremos el viejo comando _generate_. Por ejemplo voy a crear una aplicación en la que usar las capacidades de los **schematics** y de **material**; la llamaré _schemat_\n\n```console\nng g application schemat --routing\n```\n\nEsta aplicación comparte la configuración básica de `angular.json` y las dependencias y scripts de `package.json`. Su código específico va en la carpeta `projects` destinada a los nuevos proyectos generados tras haber creado el repo inicial.\n\n\n## 1.2 Compilación multi - proyecto\n\nA partir de ahora cada comando del CLI debería ir asociado a un proyecto concreto. Digo debería porque an `angular.json` puedes establecer un proyecto por defecto, que si no dices lo contrario será el inicial.\n\nPero, es buena práctica crear scripts específicos en el `package.json` para iniciar y compilar cada proyecto.\n\n```\n\"start:schemat\": \"ng serve schemat --aot -o --port 4271\",\n\"build:prod:schemat\": \"ng build schemat --prod\",\n```\n\n# 2. Instalación y configuración de Material\n\nPor muchas funcionalidades que aporte un _framework_ como Angular, siempre necesitaremos echar mano de alguna **librería de terceros**. Normalmente eso implica instalarla con _npm_, importar sus módulos en Angular y en ocasiones alguna configuración extra.\n\nPero algunos proyectos ha adoptado la librería _schematics_ para facilitar la adopción de sus librerías. Es el caso de **Angular Material**.\n\n## 2.1 Agregar dependencias con schematics\n\nPara agregar _Material_ un proyecto basta con usar el comando `add` del CLI.\n\n```console\nng add @angular/material --project=schemat\n```\n\nEsto instalará y anotará la dependencia de `@angular/material` y otros paquetes necesarios. Pero además los registrará en `AppModule` y lo configurará.\n\n## 2.2 Estilos, iconos y temas básicos\n\nEn el `index.html` se insertarán los enlaces a las hojas de estilos con fuentes e iconos. En el `styles.css` podremos importar el tema de _Material_ que nos guste.\n\n```css\n@import '~@angular/material/prebuilt-themes/indigo-pink.css';\n```\n\n# 3. Componentes básicos\n\n**Angular Material** es mucho más que un _css_. El proyecto te ofrece más de una docena de componentes visuales para crear páginas web de aspecto y comportamiento profesional.\n\nPor si fuera poco, ofrece sus propias plantillas de _schematics_, de forma que podemos crear pantallas con el CLI y luego trabajar sobre ellas.\n\n## 3.1 Navegación y layout\n\nPara empezar vamos a crear el armazón de la aplicación, con su menú y su espacio para cargar contenido. Después pondremos la primera piedra con un dashboard en la raíz de la web.\n\n### 3.1.1 Navegación\n\nAl control que hará de _shell_ le llaman `nav` por sus capacidades de navegación. Lo usaremos para generar un componente. La novedad será que la plantilla a partir de la cual se crea no viene por defecto y tenemos que especificarla con más detalle.\n\n``` console\nng g @angular/material:nav shell --project=schemat\n```\nEL resultado es un componente normal, muy adecuado para sustituir todo lo pre-generado por el cli en`app.component.html`\n\n```html\n<app-shell></app-shell>\n```\n\n### 3.1.2 Dashboard\n\nPara la ruta raíz elegí un cuadro de mando. De nuevo es una generación a partir de una plantilla específica. En este caso le he llamado `Home`.\n\n``` console\nng g @angular/material:dashboard home --project=schemat\n```\n\nAsociamos el componente a la ruta en `app-routing`\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent\n  }\n];\n```\nY le buscamos un lugar tanto al enlace como al `RouterOutlet` en el previamente generado `shell.component.html`.\n\n```html\n<a mat-list-item [routerLink]=\"['/']\">Home</a>\n<!-- Add Content Here -->\n<router-outlet></router-outlet>\n```\n\n## 3.2 Componentes básicos\n\nPor supuesto que una librería de esta envergadura tienen soluciones para todo tipo de situaciones visuales. Para las más comunes incluso ofrecen una plantilla en sus _schematics_ que permite generar prototipos funcionales de formularios, tablas y hasta árboles.\n\n### 3.2.1 Formularios\n\nPuedes generar un **formulario** para crear contactos y después modificarlo o usarlo como guía para crear cualquier otro.\n\n``` console\nng g @angular/material:address-form contact --project=schemat\n```\n\n### 3.2.2 Tablas\n\nTambién nos muestran cómo hacer **listados**, con datos de ejemplo incluidos.\n\n``` console\nng g @angular/material:table elements --project=schemat\n```\nEl ejemplo permite además ver los datos en páginas y configurar su comportamiento.\n\n```html\n<mat-paginator #paginator\n    [length]=\"dataSource.data.length\"\n    [pageIndex]=\"0\"\n    [pageSize]=\"5\"\n    [pageSizeOptions]=\"[5, 10, 15, 20]\">\n</mat-paginator>\n```\n### 3.2.3 Árboles\n\nTermino con un ejemplo de algo reciente, **el árbol**. Este componente se resistió pero por petición popular acabaron integrándolo y ahora puedes mostrar datos jerárquicos como más les gusta a los usuarios: en forma de árboles.\n\n``` console\nng g @angular/material:tree source --project=schemat\n```\nPor supuesto que hay más opciones, todas bien explicadas en la [documentación de Angular Material](https://material.angular.io/components/categories). Es una solución muy recomendable para aplicaciones de gestión, o simplemente para que se vean muy bien en Android y recuerden al _look and feel_ de todo lo que hace Google.\n\nCon este conocimiento finalizas tu [introducción a Angular](../tag/Introduccion/).  En el tutorial avanzado aprenderás más cosas para programar con Angular 7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-9-Material-Design-y-CLI-de-Angular.md","raw":"---\ntitle: Material Design y CLI de Angular\npermalink: Material-Design-y-CLI-de-Angular\ndate: 2019-03-14 18:59:27\ntags:\n- Angular\n- Angular7\n- Angular2\n- material\n- Tutorial\n- Introducción\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-9_material.png\n---\n\n![Material-Design-y-CLI-de-Angular](/images/tutorial-angular-9_material.png)\n\nEl _ecosistema_ de Angular está repleto de librerías para desarrolladores profesionales. Algunas hacen uso de los **schematics**, y entre ellas destaca [Angular Material](https://material.angular.io/). Esta implementación de la casa de la guía de diseño _Material Design_ de Google usa las capacidades de estas plantillas del CLI que permiten agregar librerías y generar código.\n\nUn programador Angular debe **dominar el CLI** y debe conocer los beneficios que aporta un repositorio de multi-proyecto. Hay escenarios complejos muy adecuaos para estos _mono-repos_. Pero con el CLI es muy sencillo crear y usar nuevas aplicaciones dentro de un repositorio.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Formularios reactivos con Angular](../formularios-reactivos-con-Angular/). Al finalizar tendrás, en el mismo repositorio, una nueva aplicación con la apariencia y usabilidad de _Material design_.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/projects/schemat/](https://github.com/AcademiaBinaria/angular-basic/tree/master/projects/schemat)\n>\n> > Tienes una versión desplegada operativa para probar [Schemat](https://academiabinaria.github.io/angular-basic/schemat/)\n\n# 1. Repositorio multi-proyecto\n\nEl primer comando que se usa al empezar con angular es `ng new mi-aplicacion`. Desde ese momento tu mundo es la carpeta `/src` en la que se genera el código y en la que vas a desarrollar.\n\nPero con el tiempo, ciertos proyectos crecen y hay que dividirlos. O quizás surjan aplicaciones hermanas. Angular CLI permite disponer de más de un proyecto **compartiendo repositorio y configuración**.\n\n## 1.1 Carpetas src y projects\n\nDado un repositorio inicial, para agregar una nueva aplicación usaremos el viejo comando _generate_. Por ejemplo voy a crear una aplicación en la que usar las capacidades de los **schematics** y de **material**; la llamaré _schemat_\n\n```console\nng g application schemat --routing\n```\n\nEsta aplicación comparte la configuración básica de `angular.json` y las dependencias y scripts de `package.json`. Su código específico va en la carpeta `projects` destinada a los nuevos proyectos generados tras haber creado el repo inicial.\n\n\n## 1.2 Compilación multi - proyecto\n\nA partir de ahora cada comando del CLI debería ir asociado a un proyecto concreto. Digo debería porque an `angular.json` puedes establecer un proyecto por defecto, que si no dices lo contrario será el inicial.\n\nPero, es buena práctica crear scripts específicos en el `package.json` para iniciar y compilar cada proyecto.\n\n```\n\"start:schemat\": \"ng serve schemat --aot -o --port 4271\",\n\"build:prod:schemat\": \"ng build schemat --prod\",\n```\n\n# 2. Instalación y configuración de Material\n\nPor muchas funcionalidades que aporte un _framework_ como Angular, siempre necesitaremos echar mano de alguna **librería de terceros**. Normalmente eso implica instalarla con _npm_, importar sus módulos en Angular y en ocasiones alguna configuración extra.\n\nPero algunos proyectos ha adoptado la librería _schematics_ para facilitar la adopción de sus librerías. Es el caso de **Angular Material**.\n\n## 2.1 Agregar dependencias con schematics\n\nPara agregar _Material_ un proyecto basta con usar el comando `add` del CLI.\n\n```console\nng add @angular/material --project=schemat\n```\n\nEsto instalará y anotará la dependencia de `@angular/material` y otros paquetes necesarios. Pero además los registrará en `AppModule` y lo configurará.\n\n## 2.2 Estilos, iconos y temas básicos\n\nEn el `index.html` se insertarán los enlaces a las hojas de estilos con fuentes e iconos. En el `styles.css` podremos importar el tema de _Material_ que nos guste.\n\n```css\n@import '~@angular/material/prebuilt-themes/indigo-pink.css';\n```\n\n# 3. Componentes básicos\n\n**Angular Material** es mucho más que un _css_. El proyecto te ofrece más de una docena de componentes visuales para crear páginas web de aspecto y comportamiento profesional.\n\nPor si fuera poco, ofrece sus propias plantillas de _schematics_, de forma que podemos crear pantallas con el CLI y luego trabajar sobre ellas.\n\n## 3.1 Navegación y layout\n\nPara empezar vamos a crear el armazón de la aplicación, con su menú y su espacio para cargar contenido. Después pondremos la primera piedra con un dashboard en la raíz de la web.\n\n### 3.1.1 Navegación\n\nAl control que hará de _shell_ le llaman `nav` por sus capacidades de navegación. Lo usaremos para generar un componente. La novedad será que la plantilla a partir de la cual se crea no viene por defecto y tenemos que especificarla con más detalle.\n\n``` console\nng g @angular/material:nav shell --project=schemat\n```\nEL resultado es un componente normal, muy adecuado para sustituir todo lo pre-generado por el cli en`app.component.html`\n\n```html\n<app-shell></app-shell>\n```\n\n### 3.1.2 Dashboard\n\nPara la ruta raíz elegí un cuadro de mando. De nuevo es una generación a partir de una plantilla específica. En este caso le he llamado `Home`.\n\n``` console\nng g @angular/material:dashboard home --project=schemat\n```\n\nAsociamos el componente a la ruta en `app-routing`\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent\n  }\n];\n```\nY le buscamos un lugar tanto al enlace como al `RouterOutlet` en el previamente generado `shell.component.html`.\n\n```html\n<a mat-list-item [routerLink]=\"['/']\">Home</a>\n<!-- Add Content Here -->\n<router-outlet></router-outlet>\n```\n\n## 3.2 Componentes básicos\n\nPor supuesto que una librería de esta envergadura tienen soluciones para todo tipo de situaciones visuales. Para las más comunes incluso ofrecen una plantilla en sus _schematics_ que permite generar prototipos funcionales de formularios, tablas y hasta árboles.\n\n### 3.2.1 Formularios\n\nPuedes generar un **formulario** para crear contactos y después modificarlo o usarlo como guía para crear cualquier otro.\n\n``` console\nng g @angular/material:address-form contact --project=schemat\n```\n\n### 3.2.2 Tablas\n\nTambién nos muestran cómo hacer **listados**, con datos de ejemplo incluidos.\n\n``` console\nng g @angular/material:table elements --project=schemat\n```\nEl ejemplo permite además ver los datos en páginas y configurar su comportamiento.\n\n```html\n<mat-paginator #paginator\n    [length]=\"dataSource.data.length\"\n    [pageIndex]=\"0\"\n    [pageSize]=\"5\"\n    [pageSizeOptions]=\"[5, 10, 15, 20]\">\n</mat-paginator>\n```\n### 3.2.3 Árboles\n\nTermino con un ejemplo de algo reciente, **el árbol**. Este componente se resistió pero por petición popular acabaron integrándolo y ahora puedes mostrar datos jerárquicos como más les gusta a los usuarios: en forma de árboles.\n\n``` console\nng g @angular/material:tree source --project=schemat\n```\nPor supuesto que hay más opciones, todas bien explicadas en la [documentación de Angular Material](https://material.angular.io/components/categories). Es una solución muy recomendable para aplicaciones de gestión, o simplemente para que se vean muy bien en Android y recuerden al _look and feel_ de todo lo que hace Google.\n\nCon este conocimiento finalizas tu [introducción a Angular](../tag/Introduccion/).  En el tutorial avanzado aprenderás más cosas para programar con Angular 7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"Material-Design-y-CLI-de-Angular","published":1,"updated":"2019-03-20T16:11:09.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4b3000k18s3oxjwenyf","content":"<p><img src=\"/images/tutorial-angular-9_material.png\" alt=\"Material-Design-y-CLI-de-Angular\"></p><p>El <em>ecosistema</em> de Angular está repleto de librerías para desarrolladores profesionales. Algunas hacen uso de los <strong>schematics</strong>, y entre ellas destaca <a href=\"https://material.angular.io/\" target=\"_blank\" rel=\"noopener\">Angular Material</a>. Esta implementación de la casa de la guía de diseño <em>Material Design</em> de Google usa las capacidades de estas plantillas del CLI que permiten agregar librerías y generar código.</p><p>Un programador Angular debe <strong>dominar el CLI</strong> y debe conocer los beneficios que aporta un repositorio de multi-proyecto. Hay escenarios complejos muy adecuaos para estos <em>mono-repos</em>. Pero con el CLI es muy sencillo crear y usar nuevas aplicaciones dentro de un repositorio.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../formularios-reactivos-con-Angular/\">Formularios reactivos con Angular</a>. Al finalizar tendrás, en el mismo repositorio, una nueva aplicación con la apariencia y usabilidad de <em>Material design</em>.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/projects/schemat\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/projects/schemat/</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/schemat/\" target=\"_blank\" rel=\"noopener\">Schemat</a></p></blockquote></blockquote><h1 id=\"1-Repositorio-multi-proyecto\"><a href=\"#1-Repositorio-multi-proyecto\" class=\"headerlink\" title=\"1. Repositorio multi-proyecto\"></a>1. Repositorio multi-proyecto</h1><p>El primer comando que se usa al empezar con angular es <code>ng new mi-aplicacion</code>. Desde ese momento tu mundo es la carpeta <code>/src</code> en la que se genera el código y en la que vas a desarrollar.</p><p>Pero con el tiempo, ciertos proyectos crecen y hay que dividirlos. O quizás surjan aplicaciones hermanas. Angular CLI permite disponer de más de un proyecto <strong>compartiendo repositorio y configuración</strong>.</p><h2 id=\"1-1-Carpetas-src-y-projects\"><a href=\"#1-1-Carpetas-src-y-projects\" class=\"headerlink\" title=\"1.1 Carpetas src y projects\"></a>1.1 Carpetas src y projects</h2><p>Dado un repositorio inicial, para agregar una nueva aplicación usaremos el viejo comando <em>generate</em>. Por ejemplo voy a crear una aplicación en la que usar las capacidades de los <strong>schematics</strong> y de <strong>material</strong>; la llamaré <em>schemat</em></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g application schemat --routing</span><br></pre></td></tr></table></figure><p>Esta aplicación comparte la configuración básica de <code>angular.json</code> y las dependencias y scripts de <code>package.json</code>. Su código específico va en la carpeta <code>projects</code> destinada a los nuevos proyectos generados tras haber creado el repo inicial.</p><h2 id=\"1-2-Compilacion-multi-proyecto\"><a href=\"#1-2-Compilacion-multi-proyecto\" class=\"headerlink\" title=\"1.2 Compilación multi - proyecto\"></a>1.2 Compilación multi - proyecto</h2><p>A partir de ahora cada comando del CLI debería ir asociado a un proyecto concreto. Digo debería porque an <code>angular.json</code> puedes establecer un proyecto por defecto, que si no dices lo contrario será el inicial.</p><p>Pero, es buena práctica crear scripts específicos en el <code>package.json</code> para iniciar y compilar cada proyecto.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start:schemat&quot;: &quot;ng serve schemat --aot -o --port 4271&quot;,</span><br><span class=\"line\">&quot;build:prod:schemat&quot;: &quot;ng build schemat --prod&quot;,</span><br></pre></td></tr></table></figure><h1 id=\"2-Instalacion-y-configuracion-de-Material\"><a href=\"#2-Instalacion-y-configuracion-de-Material\" class=\"headerlink\" title=\"2. Instalación y configuración de Material\"></a>2. Instalación y configuración de Material</h1><p>Por muchas funcionalidades que aporte un <em>framework</em> como Angular, siempre necesitaremos echar mano de alguna <strong>librería de terceros</strong>. Normalmente eso implica instalarla con <em>npm</em>, importar sus módulos en Angular y en ocasiones alguna configuración extra.</p><p>Pero algunos proyectos ha adoptado la librería <em>schematics</em> para facilitar la adopción de sus librerías. Es el caso de <strong>Angular Material</strong>.</p><h2 id=\"2-1-Agregar-dependencias-con-schematics\"><a href=\"#2-1-Agregar-dependencias-con-schematics\" class=\"headerlink\" title=\"2.1 Agregar dependencias con schematics\"></a>2.1 Agregar dependencias con schematics</h2><p>Para agregar <em>Material</em> un proyecto basta con usar el comando <code>add</code> del CLI.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @angular/material --project=schemat</span><br></pre></td></tr></table></figure><p>Esto instalará y anotará la dependencia de <code>@angular/material</code> y otros paquetes necesarios. Pero además los registrará en <code>AppModule</code> y lo configurará.</p><h2 id=\"2-2-Estilos-iconos-y-temas-basicos\"><a href=\"#2-2-Estilos-iconos-y-temas-basicos\" class=\"headerlink\" title=\"2.2 Estilos, iconos y temas básicos\"></a>2.2 Estilos, iconos y temas básicos</h2><p>En el <code>index.html</code> se insertarán los enlaces a las hojas de estilos con fuentes e iconos. En el <code>styles.css</code> podremos importar el tema de <em>Material</em> que nos guste.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'~@angular/material/prebuilt-themes/indigo-pink.css'</span>;</span><br></pre></td></tr></table></figure><h1 id=\"3-Componentes-basicos\"><a href=\"#3-Componentes-basicos\" class=\"headerlink\" title=\"3. Componentes básicos\"></a>3. Componentes básicos</h1><p><strong>Angular Material</strong> es mucho más que un <em>css</em>. El proyecto te ofrece más de una docena de componentes visuales para crear páginas web de aspecto y comportamiento profesional.</p><p>Por si fuera poco, ofrece sus propias plantillas de <em>schematics</em>, de forma que podemos crear pantallas con el CLI y luego trabajar sobre ellas.</p><h2 id=\"3-1-Navegacion-y-layout\"><a href=\"#3-1-Navegacion-y-layout\" class=\"headerlink\" title=\"3.1 Navegación y layout\"></a>3.1 Navegación y layout</h2><p>Para empezar vamos a crear el armazón de la aplicación, con su menú y su espacio para cargar contenido. Después pondremos la primera piedra con un dashboard en la raíz de la web.</p><h3 id=\"3-1-1-Navegacion\"><a href=\"#3-1-1-Navegacion\" class=\"headerlink\" title=\"3.1.1 Navegación\"></a>3.1.1 Navegación</h3><p>Al control que hará de <em>shell</em> le llaman <code>nav</code> por sus capacidades de navegación. Lo usaremos para generar un componente. La novedad será que la plantilla a partir de la cual se crea no viene por defecto y tenemos que especificarla con más detalle.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:nav shell --project=schemat</span><br></pre></td></tr></table></figure><p>EL resultado es un componente normal, muy adecuado para sustituir todo lo pre-generado por el cli en<code>app.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-shell</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-shell</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"3-1-2-Dashboard\"><a href=\"#3-1-2-Dashboard\" class=\"headerlink\" title=\"3.1.2 Dashboard\"></a>3.1.2 Dashboard</h3><p>Para la ruta raíz elegí un cuadro de mando. De nuevo es una generación a partir de una plantilla específica. En este caso le he llamado <code>Home</code>.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:dashboard home --project=schemat</span><br></pre></td></tr></table></figure><p>Asociamos el componente a la ruta en <code>app-routing</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">''</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>Y le buscamos un lugar tanto al enlace como al <code>RouterOutlet</code> en el previamente generado <code>shell.component.html</code>.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">mat-list-item</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/']\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Add Content Here --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"3-2-Componentes-basicos\"><a href=\"#3-2-Componentes-basicos\" class=\"headerlink\" title=\"3.2 Componentes básicos\"></a>3.2 Componentes básicos</h2><p>Por supuesto que una librería de esta envergadura tienen soluciones para todo tipo de situaciones visuales. Para las más comunes incluso ofrecen una plantilla en sus <em>schematics</em> que permite generar prototipos funcionales de formularios, tablas y hasta árboles.</p><h3 id=\"3-2-1-Formularios\"><a href=\"#3-2-1-Formularios\" class=\"headerlink\" title=\"3.2.1 Formularios\"></a>3.2.1 Formularios</h3><p>Puedes generar un <strong>formulario</strong> para crear contactos y después modificarlo o usarlo como guía para crear cualquier otro.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:address-form contact --project=schemat</span><br></pre></td></tr></table></figure><h3 id=\"3-2-2-Tablas\"><a href=\"#3-2-2-Tablas\" class=\"headerlink\" title=\"3.2.2 Tablas\"></a>3.2.2 Tablas</h3><p>También nos muestran cómo hacer <strong>listados</strong>, con datos de ejemplo incluidos.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:table elements --project=schemat</span><br></pre></td></tr></table></figure><p>El ejemplo permite además ver los datos en páginas y configurar su comportamiento.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mat-paginator</span> #<span class=\"attr\">paginator</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">length</span>]=<span class=\"string\">\"dataSource.data.length\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageIndex</span>]=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageSize</span>]=<span class=\"string\">\"5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageSizeOptions</span>]=<span class=\"string\">\"[5, 10, 15, 20]\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mat-paginator</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"3-2-3-Arboles\"><a href=\"#3-2-3-Arboles\" class=\"headerlink\" title=\"3.2.3 Árboles\"></a>3.2.3 Árboles</h3><p>Termino con un ejemplo de algo reciente, <strong>el árbol</strong>. Este componente se resistió pero por petición popular acabaron integrándolo y ahora puedes mostrar datos jerárquicos como más les gusta a los usuarios: en forma de árboles.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:tree source --project=schemat</span><br></pre></td></tr></table></figure><p>Por supuesto que hay más opciones, todas bien explicadas en la <a href=\"https://material.angular.io/components/categories\" target=\"_blank\" rel=\"noopener\">documentación de Angular Material</a>. Es una solución muy recomendable para aplicaciones de gestión, o simplemente para que se vean muy bien en Android y recuerden al <em>look and feel</em> de todo lo que hace Google.</p><p>Con este conocimiento finalizas tu <a href=\"../tag/Introduccion/\">introducción a Angular</a>. En el tutorial avanzado aprenderás más cosas para programar con Angular 7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-9_material.png\" alt=\"Material-Design-y-CLI-de-Angular\"></p><p>El <em>ecosistema</em> de Angular está repleto de librerías para desarrolladores profesionales. Algunas hacen uso de los <strong>schematics</strong>, y entre ellas destaca <a href=\"https://material.angular.io/\" target=\"_blank\" rel=\"noopener\">Angular Material</a>. Esta implementación de la casa de la guía de diseño <em>Material Design</em> de Google usa las capacidades de estas plantillas del CLI que permiten agregar librerías y generar código.</p><p>Un programador Angular debe <strong>dominar el CLI</strong> y debe conocer los beneficios que aporta un repositorio de multi-proyecto. Hay escenarios complejos muy adecuaos para estos <em>mono-repos</em>. Pero con el CLI es muy sencillo crear y usar nuevas aplicaciones dentro de un repositorio.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../formularios-reactivos-con-Angular/\">Formularios reactivos con Angular</a>. Al finalizar tendrás, en el mismo repositorio, una nueva aplicación con la apariencia y usabilidad de <em>Material design</em>.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/projects/schemat\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/projects/schemat/</a></p><blockquote><p>Tienes una versión desplegada operativa para probar <a href=\"https://academiabinaria.github.io/angular-basic/schemat/\" target=\"_blank\" rel=\"noopener\">Schemat</a></p></blockquote></blockquote><h1 id=\"1-Repositorio-multi-proyecto\"><a href=\"#1-Repositorio-multi-proyecto\" class=\"headerlink\" title=\"1. Repositorio multi-proyecto\"></a>1. Repositorio multi-proyecto</h1><p>El primer comando que se usa al empezar con angular es <code>ng new mi-aplicacion</code>. Desde ese momento tu mundo es la carpeta <code>/src</code> en la que se genera el código y en la que vas a desarrollar.</p><p>Pero con el tiempo, ciertos proyectos crecen y hay que dividirlos. O quizás surjan aplicaciones hermanas. Angular CLI permite disponer de más de un proyecto <strong>compartiendo repositorio y configuración</strong>.</p><h2 id=\"1-1-Carpetas-src-y-projects\"><a href=\"#1-1-Carpetas-src-y-projects\" class=\"headerlink\" title=\"1.1 Carpetas src y projects\"></a>1.1 Carpetas src y projects</h2><p>Dado un repositorio inicial, para agregar una nueva aplicación usaremos el viejo comando <em>generate</em>. Por ejemplo voy a crear una aplicación en la que usar las capacidades de los <strong>schematics</strong> y de <strong>material</strong>; la llamaré <em>schemat</em></p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g application schemat --routing</span><br></pre></td></tr></table></figure><p>Esta aplicación comparte la configuración básica de <code>angular.json</code> y las dependencias y scripts de <code>package.json</code>. Su código específico va en la carpeta <code>projects</code> destinada a los nuevos proyectos generados tras haber creado el repo inicial.</p><h2 id=\"1-2-Compilacion-multi-proyecto\"><a href=\"#1-2-Compilacion-multi-proyecto\" class=\"headerlink\" title=\"1.2 Compilación multi - proyecto\"></a>1.2 Compilación multi - proyecto</h2><p>A partir de ahora cada comando del CLI debería ir asociado a un proyecto concreto. Digo debería porque an <code>angular.json</code> puedes establecer un proyecto por defecto, que si no dices lo contrario será el inicial.</p><p>Pero, es buena práctica crear scripts específicos en el <code>package.json</code> para iniciar y compilar cada proyecto.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;start:schemat&quot;: &quot;ng serve schemat --aot -o --port 4271&quot;,</span><br><span class=\"line\">&quot;build:prod:schemat&quot;: &quot;ng build schemat --prod&quot;,</span><br></pre></td></tr></table></figure><h1 id=\"2-Instalacion-y-configuracion-de-Material\"><a href=\"#2-Instalacion-y-configuracion-de-Material\" class=\"headerlink\" title=\"2. Instalación y configuración de Material\"></a>2. Instalación y configuración de Material</h1><p>Por muchas funcionalidades que aporte un <em>framework</em> como Angular, siempre necesitaremos echar mano de alguna <strong>librería de terceros</strong>. Normalmente eso implica instalarla con <em>npm</em>, importar sus módulos en Angular y en ocasiones alguna configuración extra.</p><p>Pero algunos proyectos ha adoptado la librería <em>schematics</em> para facilitar la adopción de sus librerías. Es el caso de <strong>Angular Material</strong>.</p><h2 id=\"2-1-Agregar-dependencias-con-schematics\"><a href=\"#2-1-Agregar-dependencias-con-schematics\" class=\"headerlink\" title=\"2.1 Agregar dependencias con schematics\"></a>2.1 Agregar dependencias con schematics</h2><p>Para agregar <em>Material</em> un proyecto basta con usar el comando <code>add</code> del CLI.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @angular/material --project=schemat</span><br></pre></td></tr></table></figure><p>Esto instalará y anotará la dependencia de <code>@angular/material</code> y otros paquetes necesarios. Pero además los registrará en <code>AppModule</code> y lo configurará.</p><h2 id=\"2-2-Estilos-iconos-y-temas-basicos\"><a href=\"#2-2-Estilos-iconos-y-temas-basicos\" class=\"headerlink\" title=\"2.2 Estilos, iconos y temas básicos\"></a>2.2 Estilos, iconos y temas básicos</h2><p>En el <code>index.html</code> se insertarán los enlaces a las hojas de estilos con fuentes e iconos. En el <code>styles.css</code> podremos importar el tema de <em>Material</em> que nos guste.</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'~@angular/material/prebuilt-themes/indigo-pink.css'</span>;</span><br></pre></td></tr></table></figure><h1 id=\"3-Componentes-basicos\"><a href=\"#3-Componentes-basicos\" class=\"headerlink\" title=\"3. Componentes básicos\"></a>3. Componentes básicos</h1><p><strong>Angular Material</strong> es mucho más que un <em>css</em>. El proyecto te ofrece más de una docena de componentes visuales para crear páginas web de aspecto y comportamiento profesional.</p><p>Por si fuera poco, ofrece sus propias plantillas de <em>schematics</em>, de forma que podemos crear pantallas con el CLI y luego trabajar sobre ellas.</p><h2 id=\"3-1-Navegacion-y-layout\"><a href=\"#3-1-Navegacion-y-layout\" class=\"headerlink\" title=\"3.1 Navegación y layout\"></a>3.1 Navegación y layout</h2><p>Para empezar vamos a crear el armazón de la aplicación, con su menú y su espacio para cargar contenido. Después pondremos la primera piedra con un dashboard en la raíz de la web.</p><h3 id=\"3-1-1-Navegacion\"><a href=\"#3-1-1-Navegacion\" class=\"headerlink\" title=\"3.1.1 Navegación\"></a>3.1.1 Navegación</h3><p>Al control que hará de <em>shell</em> le llaman <code>nav</code> por sus capacidades de navegación. Lo usaremos para generar un componente. La novedad será que la plantilla a partir de la cual se crea no viene por defecto y tenemos que especificarla con más detalle.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:nav shell --project=schemat</span><br></pre></td></tr></table></figure><p>EL resultado es un componente normal, muy adecuado para sustituir todo lo pre-generado por el cli en<code>app.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-shell</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-shell</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"3-1-2-Dashboard\"><a href=\"#3-1-2-Dashboard\" class=\"headerlink\" title=\"3.1.2 Dashboard\"></a>3.1.2 Dashboard</h3><p>Para la ruta raíz elegí un cuadro de mando. De nuevo es una generación a partir de una plantilla específica. En este caso le he llamado <code>Home</code>.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:dashboard home --project=schemat</span><br></pre></td></tr></table></figure><p>Asociamos el componente a la ruta en <code>app-routing</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">''</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p>Y le buscamos un lugar tanto al enlace como al <code>RouterOutlet</code> en el previamente generado <code>shell.component.html</code>.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">mat-list-item</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">\"['/']\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Add Content Here --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"3-2-Componentes-basicos\"><a href=\"#3-2-Componentes-basicos\" class=\"headerlink\" title=\"3.2 Componentes básicos\"></a>3.2 Componentes básicos</h2><p>Por supuesto que una librería de esta envergadura tienen soluciones para todo tipo de situaciones visuales. Para las más comunes incluso ofrecen una plantilla en sus <em>schematics</em> que permite generar prototipos funcionales de formularios, tablas y hasta árboles.</p><h3 id=\"3-2-1-Formularios\"><a href=\"#3-2-1-Formularios\" class=\"headerlink\" title=\"3.2.1 Formularios\"></a>3.2.1 Formularios</h3><p>Puedes generar un <strong>formulario</strong> para crear contactos y después modificarlo o usarlo como guía para crear cualquier otro.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:address-form contact --project=schemat</span><br></pre></td></tr></table></figure><h3 id=\"3-2-2-Tablas\"><a href=\"#3-2-2-Tablas\" class=\"headerlink\" title=\"3.2.2 Tablas\"></a>3.2.2 Tablas</h3><p>También nos muestran cómo hacer <strong>listados</strong>, con datos de ejemplo incluidos.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:table elements --project=schemat</span><br></pre></td></tr></table></figure><p>El ejemplo permite además ver los datos en páginas y configurar su comportamiento.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mat-paginator</span> #<span class=\"attr\">paginator</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">length</span>]=<span class=\"string\">\"dataSource.data.length\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageIndex</span>]=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageSize</span>]=<span class=\"string\">\"5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    [<span class=\"attr\">pageSizeOptions</span>]=<span class=\"string\">\"[5, 10, 15, 20]\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mat-paginator</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"3-2-3-Arboles\"><a href=\"#3-2-3-Arboles\" class=\"headerlink\" title=\"3.2.3 Árboles\"></a>3.2.3 Árboles</h3><p>Termino con un ejemplo de algo reciente, <strong>el árbol</strong>. Este componente se resistió pero por petición popular acabaron integrándolo y ahora puedes mostrar datos jerárquicos como más les gusta a los usuarios: en forma de árboles.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g @angular/material:tree source --project=schemat</span><br></pre></td></tr></table></figure><p>Por supuesto que hay más opciones, todas bien explicadas en la <a href=\"https://material.angular.io/components/categories\" target=\"_blank\" rel=\"noopener\">documentación de Angular Material</a>. Es una solución muy recomendable para aplicaciones de gestión, o simplemente para que se vean muy bien en Android y recuerden al <em>look and feel</em> de todo lo que hace Google.</p><p>Con este conocimiento finalizas tu <a href=\"../tag/Introduccion/\">introducción a Angular</a>. En el tutorial avanzado aprenderás más cosas para programar con Angular 7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"El patrón Redux con NgRx en Angular","date":"2018-10-08T10:50:27.000Z","thumbnail":"/css/images/angular-a_redux.png","_content":"\n![el-patron-redux-con-ngrx-en-angular](/images/tutorial-angular-a_redux.png)\n\nLe pasa a todas las aplicaciones. Crecen y crecen en funcionalidad y complejidad. En Angular estamos preparados para modularizar, componentizar e inyectar servicios. Pero con grandes aplicaciones, o con grandes equipos, parece que nada es suficiente. Se necesita una **gestión del estado centralizada** como la del patrón Redux.\n\n**Redux no hace rápido lo simple, sino mantenible lo complejo**. Y si tienes delante un desarrollo complejo, te recomiendo que uses *NgRX*; la solución estándar para implementar **Redux con Angular**.\n\n\n<!-- more -->\n\nPartiendo del código tal cómo quedó en [Detección del cambio en Angular](../deteccion-del-cambio-en-Angular/). Al finalizar tendrás una aplicación que gestiona centralizadamente los cambios, que permite conocer qué ocurrió y predecir lo que ocurrirá.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/AutoBot/a-redux](https://github.com/AcademiaBinaria/autobot/tree/a-redux)\n\n\n# 1 El patrón Redux\n\nRedux es como una base de datos, es en un almacén para el estado de la aplicación. Pero un almacén que gestiona sus cambios de manera predictiva. Combina dos patrones: *Action* para el envío de comandos para actualizar el estado del almacén; y *Observable* para la subscripción a cambios en el estado del almacén. **Desacopla los emisores de acciones de los receptores de cambios** en los datos.\n\nPara lograrlo tendremos que cumplir una serie de principios y utilizar unos elementos predefinidos. Esto introduce capas de abstracción y burocracia que inicialmente complican el desarrollo. Pero a medio plazo harán que mantener la aplicación sea mucho más sencillo y seguro.\n\n## 1.1 Principios de Redux\n\nTenemos tres principios básicos que cumplir:\n\n- **Single Source Of Truth**: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.\n- **Read Only State**: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.\n- **Changes By Pure Functions**: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.\n\n## 1.2 Elementos de Redux\n\nEstos son los artificios fundamentales que incorporaremos a nuestro desarrollo:\n\n- **Store**: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.\n- **State**: Árbol de objetos que contienen la única copia válida de la información. Representa el valor del almacén en un momento determinado.\n- **Actions**: Objetos identificados por un tipo y cargados con un *payload*. Transmiten una intención de mutación sobre el estado del *store*.\n- **Reducers** : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Clonan el estado, realizan los cambios oportunos y devuelven el estado mutado.\n\n\n- **Actions**: Objetos identificados por un tipo y cargados con un *payload*. Transmiten una intención de mutación sobre el estado del almacén. Tomados del patrón comando.\n- **Reducers** : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Toman el estado, realizan los cambios oportunos y devuelven el estado mutado.\n- **Effects** : Los reductores, como funciones puras, no pueden tener efectos secundarios. Es decir: depender o cambiar algo del entorno. Esto debería hacerse antes o después del cambio. En algo que aquí por ahora no usaremos: los efectos.\n\n> Los funciones reductoras, al ser puras, mezclan la programación funcional con la orientada a objetos. Un reto pero también una demostración de la coexistencia de paradigmas en un mismo desarrollo.\n\n\n# 2 NgRx\n\nNgRx es el estándar de facto para implementar Redux en Angular. Está basada en *RxJS* y es una librería modular con todo lo necesario para crear grandes aplicaciones. Esto son los módulos que la componen:\n\n- **store**: Es el módulo principal con el administrador del estado centralizado y reactivo.\n- **store-devtools**: Instrumentación para depurar desde el navegador. Vale su peso en oro.\n- **router-Store** : Almacena el estado del *router* de Angular en el *store*, tratando cada evento como una acción Redux.\n- **effects**: Los reductores son funciones puras sin efectos colaterales. Este módulo es la solución para comandos asíncronos.\n- **schematics, entity, ngrx-data**: Son otros módulos opcionales con ayudas y plantillas de NgRX.\n\n## 2.1 Instalación y configuración\n\nPara agregar *NgRx* a un app te propongo la siguiente receta de comandos. Además de esto tendrás que instalar en tu navegador las herramientas de diagnóstico [Redux DevTools](http://extension.remotedev.io/).\n\n```shell\nnpm i @angular-devkit/schematics --save-dev\nnpm i @ngrx/schematics --save-dev\nng config cli.defaultCollection @ngrx/schematics\nnpm i @ngrx/store --save\nnpm i @ngrx/store-devtools --save\nng g st RootState --root -m app.module.ts --spec false\nnpm install @ngrx/router-store --save\n```\nCon esto habrás instalado y configurado NgRx en tu app. Completa tu módulo principal para que tenga algo así:\n\n```typescript\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    StoreModule.forRoot(rootReducers, { metaReducers }),\n    StoreRouterConnectingModule.forRoot({ stateKey: 'router' }),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n  ]\n})\nexport class AppModule {}\n```\n\n> El código generado por `@ngrx/schematics` no es para todos los gustos. Tómalo como un punto de partida y crea la estructura que mejor te encaje. En [Autobot](https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/core/store/state) he empezado por llevarlo todo al `CoreModule` y guardarlo en una carpeta propia convenientemente nombrada `store/state`. Veámosla en detalle.\n\n## 2.2 State y reducers, los cambios de estado mediante reductores\n\nEl estado en *redux* es un objeto tipado a partir de una interfaz, normalmente llamada `State` a secas, aunque yo prefiero identificarla como `RootState`. Tendrá propiedades para almacenar objetos más o menos complejos. Cada propiedad tendrá su propio tipo complejo y será gestionada por una función reductora específica. Se necesita un proceso de mapeo que asigne la función reductora a cada propiedad del estado raíz. Eso es lo que hace este código:\n\n```typescript\nexport interface RootState {\n  router: any;\n  global: GlobalState;\n  cars: CarsState;\n}\n\nexport const rootReducers: ActionReducerMap<RootState> = {\n  router: routerReducer,\n  global: globalreducer,\n  cars: carsReducer\n};\n```\n\nLas funciones reductoras pueden estar en cualquier fichero. Son puras y no deben ser incluidas en ninguna clase. Normalmente tendrás un fichero para cada reductor. El del *router* ya viene hecho por NgRx, todos los demás son cosa tuya. Por ejemplo este es el reductor sobre la propiedad `global: GlobalState`.\n\n```typescript\nexport function globalReducer(state = initialState, action: GlobalActions): GlobalState {\n  switch (action.type) {\n    case GlobalActionTypes.SendUserMessage:\n      return { ...state, userMessage: action.payload };\n    case GlobalActionTypes.IsLoginNeeded:\n      return { ...state, loginNeeded: action.payload };\n    case GlobalActionTypes.StoreToken:\n      return { ...state, token: action.payload };\n    default:\n      return state;\n  }\n}\n```\n\nComo puedes ver esta función recibe dos argumento: el estado y la acción que pretende mutarlo. **La acción es un objeto** con dos propiedades. La primera y obligatoria es el tipo y sirve para escoger la lógica que se aplicará. La otra, opcional, es el `payload` que actúa como argumento de la acción. El reductor no puede usar nada más que estos argumentos: **state y action**. Y por ser puro no puede mutar ninguno, por tanto tiene que clonar el estado recibido antes de aplicarle cualquier cambio. Una vez efectuado el cambio, usando el *payload* si es preciso, devolverá el clon mutado.\n\n## 2.3 Actions, las acciones permitidas\n\nEl patrón Redux no obliga a grandes cosas respecto a cómo implementar las acciones. Lo único que de verdad necesitas es crear objetos con una propiedad obligatoria `type` y otra opcional `payoload`.\n\nPero en NgRX han decidido aprovechar al máximo las capacidades del *TypeScript* y proponen usar un código fuertemente tipado. Para empezar crean un `enum` que detalla los posible tipos de una acción y les asigna un texto para que luzcan y faciliten su búsqueda en *logs*.\n\n```typescript\nexport enum GlobalActionTypes {\n  SendUserMessage = '[Global] Show Message',\n  IsLoginNeeded = '[Auth] Is Login Needed',\n  StoreToken = '[Auth] Store Token'\n}\n```\n\nY claro, en un ambiente tipado, la acción será una clase que ha de cumplir una interfaz. En dicha clase queda ya predeterminado su tipo de acción; y por supuesto que permiten fijar el tipo de datos de la `payload`. Todo ello genera un código como el siguiente.\n\n```typescript\nexport class SendUserMesage implements Action {\n  readonly type = GlobalActionTypes.SendUserMessage;\n  constructor(public payload: string) {}\n}\n```\n\nPara terminar, y ya que habremos de crear un buen número de clases para las acciones, también nos propone exprimir *TypeScript* para crear un tipo combinado que ofrezca a los consumidores el plantel completo y delimitado de acciones posibles.\n\n```typescript\nexport type GlobalActions = SendUserMesage | IsLoginNeeded | StoreToken;\n```\n\nEs normal que al principio todo este *boilerplate* te parezca un exceso. Pero entre las plantillas, los *snippets* y el *copy and paste* no es tan trabajoso como pudiera parecer. A cambio tienes un código robusto y explícitamente detallado.\n\n## 2.4 Dispatch y Select, despacho de acciones y selección de cambios\n\nDesde el resto del código **la comunicación con este estado centralizado se realizará por dos conductos oficiales : Dispatch y Select**. El primero es un método que recibe como único parámetro una instancia de una acción. Dicha instancia lleva implícito el tipo y puede ir rellena de una *payload*. Así es como se envían los cambios hacia el almacén.\n\n```typescript\nconstructor(private store: Store<RootState>) {\n  this.store.dispatch(new SendUserMesage('Tutorial Angular en Español'));\n}\n```\n\nNo esperamos respuesta de este método. Es un mundo de *fire and forget*. Pero en cualquier otro lugar o lugares de nuestro código podremos recibir notificaciones de cualquier cambio que se haya producido. De forma desacoplada podremos recibir el mensaje con una simple subscripción *RxJS*.\n\n```typescript\nthis.store\n  .select('global', 'userMessage')\n  .subscribe(userMessage: string => console.log(userMessage));\n```\n\nA este método de consulta asíncrona se le envía un argumento con múltiples sobrecargas llamado *selector*. En este caso está formado por dos claves que apuntan a una propiedad concreta en la que estoy interesado: `global.userMessage`.\n\nCon esto tenemos una primera implementación del patrón Redux en Angular usando NgRx. Pero aún hay más.\n\n# 3 Efectos y módulos funcionales\n\nLas funciones reductoras, como ya se ha dicho, deben ser puras. La idea es que puedan ser auditadas, re-ejecutadas y testeadas sin que necesiten servicios externos ni causen efectos colaterales. Y esto es un problema con la cantidad de **ejecuciones asíncronas en las aplicaciones web**. Cualquier tentación de lanzar una llamada *AJAX* dentro de un reductor debe ser elimindad de inmediato.\n\n> Dos razones: por un lado en Angular se necesita invocar al *httpClient* de alguna manera para realizar la llamada *AJAX*. Y, ya que la función no pertenece a ninguna clase, no puede haber constructor que reclame la inyección de dicho servicio. Tampoco las funciones puras tienen permitido usar nada que no venga entre sus argumentos. Por otra parte las funciones puras han de ser predecibles, y una llamada a un servidor remoto no es en absoluto predecible. Puede pasarle de todo, así que los reductores no son país para procesos asíncronos.\n\nLa solución que proponen *NgRX* es usar un artificio llamado efecto, porque será encargado de **los efectos secundarios que provocan las las instrucciones asíncronas**. De una forma simplista, diremos que las acciones asíncronas se multiplicarán por tres. El comando que genera la llamada, y los dos potenciales eventos con la respuesta correcta o el error.\n\nPara manejarlo todo incluyen en la librería el módulo `EffectsModule` que ha de registrarse junto al `StoreModule`. Desde ese momento *NgRX* activa un sistema de seguimiento que trata las acciones como un stream de *RxJS* y permite subscribirse a la invocación de dichas acciones y tratarlas adecuadamente. Una vez más, aprovechan las características del *TypeScript* y hacen uso de los decoradores para definir las funciones que responderán a la ejecución de las acciones.\n\n## 3.1 @Effect(), efectos secundarios\n\nEl decorador `@Effect()` se aplica a propiedades de servicios estándar de Angular. *NgRX* invoca esas funciones ante cada acción despachada, así que lo primero que debemos hacer es aplicar un filtro para quedarnos con las acciones del tipo que nos interese. El que lanzará la llamada `http`.\n\n> Todo el trabajo se realizará con *streams* y requiere de un conocimiento previo de la librería *RxJS* y de la mecánica de su método `pipe` y sus operadores reactivos.\n\nCuando llegue una de esas acciones realizaremos la llamada asíncrona sin complejos. Recordemos que un efecto forma parte de un servicio inyectable de Angular. No tienen ninguna restricción funcional por parte de Redux. Obviamente la respuesta debe ser capturada y tratada según haya sido correcta o no.\n\nSi recibimos una respuesta válida podremos retornar directamente una nueva acción que actualice el estado con los datos recibidos. En cambio si ha habido un error, habrá que reactivar el *stream* con un nuevo observable que emita la acción que procesará el error.\n\n```typescript\n@Effect()\nconstructor(private actions$: Actions, private cars: CarsService) {}\n\npublic loadCarsEffect$: Observable<CarsActions> = this.actions$.pipe(\n  ofType<LoadCars>(CarsActionTypes.LoadCars),\n  mergeMap(() =>\n    this.cars.getCars$().pipe(\n      map((cars: Car[]) => new LoadCarsOK(cars)),\n      catchError(err => of(new LoadCarsError('Error loading cars')))\n    )\n  )\n);\n```\n\nTómate el tiempo necesario para comprender este código. Especialmente los operadores `ofType` de *NgRX* y el `mergeMap` de *RxJS*. Fíjate bien en los tipos de los datos recibidos y devueltos. El efecto trata con observables de acciones. Recibe una y devuelve otra que puede ser de alguno de los otros dos tipos previstos. En el caso correcto se cambia una acción por otra, en otro caso se crea un nuevo observable mediante el constructor `of()` antes del retorno.\n\n> Para un ejemplo más completo de estos conceptos explora la implementación en el proyecto Autobot. El [RootStore](https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/core) hace uso de efectos en la carpeta `store/state/cars`.\n\n## 3.2 Feature, módulos funcionales\n\nYa que Redux está especialmente indicado en grandes aplicaciones pero manteniendo un estado centralizado, es fácil que acabemos con un módulo raíz demasiado pesado que ralentice el inicio de la aplicación. Para adaptar la gestión central a un entorno con módulos cargado con  *lazyloading* necesitamos una última ayuda, de la mano de `FeatureModule`.\n\nEsencialmente es una nuevo *store* supeditado al principal pero que no se define, y por tanto no pesa, hasta que no es necesario. En Autobot el [CarModule](https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/car) es un buen ejemplo de *store* cargado de forma dinámica como una `Feature`.\n\nYa tienes los conocimientos para gestionar de manera centralizada, auditable y predecible el estado de tus programas. El patrón Redux lucirá más cuanto más grande y compleja sea tu aplicación.\n\nContinúa tu formación avanzada para crear aplicaciones [PWA, entre la web y las apps con Angular](../pwa-entre-la-web-y-las-apps-con-angular) y verás como aprendes a programar con Angular 7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-old-adv-a-El-patron-Redux-con-NgRx-en-Angular.md","raw":"---\ntitle: El patrón Redux con NgRx en Angular\npermalink: el-patron-redux-con-ngrx-en-angular\ndate: 2018-10-08 12:50:27\ntags:\n- Angular\n- Angular7\n- Angular2\n- Redux\n- NgRx\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-a_redux.png\n---\n\n![el-patron-redux-con-ngrx-en-angular](/images/tutorial-angular-a_redux.png)\n\nLe pasa a todas las aplicaciones. Crecen y crecen en funcionalidad y complejidad. En Angular estamos preparados para modularizar, componentizar e inyectar servicios. Pero con grandes aplicaciones, o con grandes equipos, parece que nada es suficiente. Se necesita una **gestión del estado centralizada** como la del patrón Redux.\n\n**Redux no hace rápido lo simple, sino mantenible lo complejo**. Y si tienes delante un desarrollo complejo, te recomiendo que uses *NgRX*; la solución estándar para implementar **Redux con Angular**.\n\n\n<!-- more -->\n\nPartiendo del código tal cómo quedó en [Detección del cambio en Angular](../deteccion-del-cambio-en-Angular/). Al finalizar tendrás una aplicación que gestiona centralizadamente los cambios, que permite conocer qué ocurrió y predecir lo que ocurrirá.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/AutoBot/a-redux](https://github.com/AcademiaBinaria/autobot/tree/a-redux)\n\n\n# 1 El patrón Redux\n\nRedux es como una base de datos, es en un almacén para el estado de la aplicación. Pero un almacén que gestiona sus cambios de manera predictiva. Combina dos patrones: *Action* para el envío de comandos para actualizar el estado del almacén; y *Observable* para la subscripción a cambios en el estado del almacén. **Desacopla los emisores de acciones de los receptores de cambios** en los datos.\n\nPara lograrlo tendremos que cumplir una serie de principios y utilizar unos elementos predefinidos. Esto introduce capas de abstracción y burocracia que inicialmente complican el desarrollo. Pero a medio plazo harán que mantener la aplicación sea mucho más sencillo y seguro.\n\n## 1.1 Principios de Redux\n\nTenemos tres principios básicos que cumplir:\n\n- **Single Source Of Truth**: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.\n- **Read Only State**: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.\n- **Changes By Pure Functions**: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.\n\n## 1.2 Elementos de Redux\n\nEstos son los artificios fundamentales que incorporaremos a nuestro desarrollo:\n\n- **Store**: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.\n- **State**: Árbol de objetos que contienen la única copia válida de la información. Representa el valor del almacén en un momento determinado.\n- **Actions**: Objetos identificados por un tipo y cargados con un *payload*. Transmiten una intención de mutación sobre el estado del *store*.\n- **Reducers** : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Clonan el estado, realizan los cambios oportunos y devuelven el estado mutado.\n\n\n- **Actions**: Objetos identificados por un tipo y cargados con un *payload*. Transmiten una intención de mutación sobre el estado del almacén. Tomados del patrón comando.\n- **Reducers** : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Toman el estado, realizan los cambios oportunos y devuelven el estado mutado.\n- **Effects** : Los reductores, como funciones puras, no pueden tener efectos secundarios. Es decir: depender o cambiar algo del entorno. Esto debería hacerse antes o después del cambio. En algo que aquí por ahora no usaremos: los efectos.\n\n> Los funciones reductoras, al ser puras, mezclan la programación funcional con la orientada a objetos. Un reto pero también una demostración de la coexistencia de paradigmas en un mismo desarrollo.\n\n\n# 2 NgRx\n\nNgRx es el estándar de facto para implementar Redux en Angular. Está basada en *RxJS* y es una librería modular con todo lo necesario para crear grandes aplicaciones. Esto son los módulos que la componen:\n\n- **store**: Es el módulo principal con el administrador del estado centralizado y reactivo.\n- **store-devtools**: Instrumentación para depurar desde el navegador. Vale su peso en oro.\n- **router-Store** : Almacena el estado del *router* de Angular en el *store*, tratando cada evento como una acción Redux.\n- **effects**: Los reductores son funciones puras sin efectos colaterales. Este módulo es la solución para comandos asíncronos.\n- **schematics, entity, ngrx-data**: Son otros módulos opcionales con ayudas y plantillas de NgRX.\n\n## 2.1 Instalación y configuración\n\nPara agregar *NgRx* a un app te propongo la siguiente receta de comandos. Además de esto tendrás que instalar en tu navegador las herramientas de diagnóstico [Redux DevTools](http://extension.remotedev.io/).\n\n```shell\nnpm i @angular-devkit/schematics --save-dev\nnpm i @ngrx/schematics --save-dev\nng config cli.defaultCollection @ngrx/schematics\nnpm i @ngrx/store --save\nnpm i @ngrx/store-devtools --save\nng g st RootState --root -m app.module.ts --spec false\nnpm install @ngrx/router-store --save\n```\nCon esto habrás instalado y configurado NgRx en tu app. Completa tu módulo principal para que tenga algo así:\n\n```typescript\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    StoreModule.forRoot(rootReducers, { metaReducers }),\n    StoreRouterConnectingModule.forRoot({ stateKey: 'router' }),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n  ]\n})\nexport class AppModule {}\n```\n\n> El código generado por `@ngrx/schematics` no es para todos los gustos. Tómalo como un punto de partida y crea la estructura que mejor te encaje. En [Autobot](https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/core/store/state) he empezado por llevarlo todo al `CoreModule` y guardarlo en una carpeta propia convenientemente nombrada `store/state`. Veámosla en detalle.\n\n## 2.2 State y reducers, los cambios de estado mediante reductores\n\nEl estado en *redux* es un objeto tipado a partir de una interfaz, normalmente llamada `State` a secas, aunque yo prefiero identificarla como `RootState`. Tendrá propiedades para almacenar objetos más o menos complejos. Cada propiedad tendrá su propio tipo complejo y será gestionada por una función reductora específica. Se necesita un proceso de mapeo que asigne la función reductora a cada propiedad del estado raíz. Eso es lo que hace este código:\n\n```typescript\nexport interface RootState {\n  router: any;\n  global: GlobalState;\n  cars: CarsState;\n}\n\nexport const rootReducers: ActionReducerMap<RootState> = {\n  router: routerReducer,\n  global: globalreducer,\n  cars: carsReducer\n};\n```\n\nLas funciones reductoras pueden estar en cualquier fichero. Son puras y no deben ser incluidas en ninguna clase. Normalmente tendrás un fichero para cada reductor. El del *router* ya viene hecho por NgRx, todos los demás son cosa tuya. Por ejemplo este es el reductor sobre la propiedad `global: GlobalState`.\n\n```typescript\nexport function globalReducer(state = initialState, action: GlobalActions): GlobalState {\n  switch (action.type) {\n    case GlobalActionTypes.SendUserMessage:\n      return { ...state, userMessage: action.payload };\n    case GlobalActionTypes.IsLoginNeeded:\n      return { ...state, loginNeeded: action.payload };\n    case GlobalActionTypes.StoreToken:\n      return { ...state, token: action.payload };\n    default:\n      return state;\n  }\n}\n```\n\nComo puedes ver esta función recibe dos argumento: el estado y la acción que pretende mutarlo. **La acción es un objeto** con dos propiedades. La primera y obligatoria es el tipo y sirve para escoger la lógica que se aplicará. La otra, opcional, es el `payload` que actúa como argumento de la acción. El reductor no puede usar nada más que estos argumentos: **state y action**. Y por ser puro no puede mutar ninguno, por tanto tiene que clonar el estado recibido antes de aplicarle cualquier cambio. Una vez efectuado el cambio, usando el *payload* si es preciso, devolverá el clon mutado.\n\n## 2.3 Actions, las acciones permitidas\n\nEl patrón Redux no obliga a grandes cosas respecto a cómo implementar las acciones. Lo único que de verdad necesitas es crear objetos con una propiedad obligatoria `type` y otra opcional `payoload`.\n\nPero en NgRX han decidido aprovechar al máximo las capacidades del *TypeScript* y proponen usar un código fuertemente tipado. Para empezar crean un `enum` que detalla los posible tipos de una acción y les asigna un texto para que luzcan y faciliten su búsqueda en *logs*.\n\n```typescript\nexport enum GlobalActionTypes {\n  SendUserMessage = '[Global] Show Message',\n  IsLoginNeeded = '[Auth] Is Login Needed',\n  StoreToken = '[Auth] Store Token'\n}\n```\n\nY claro, en un ambiente tipado, la acción será una clase que ha de cumplir una interfaz. En dicha clase queda ya predeterminado su tipo de acción; y por supuesto que permiten fijar el tipo de datos de la `payload`. Todo ello genera un código como el siguiente.\n\n```typescript\nexport class SendUserMesage implements Action {\n  readonly type = GlobalActionTypes.SendUserMessage;\n  constructor(public payload: string) {}\n}\n```\n\nPara terminar, y ya que habremos de crear un buen número de clases para las acciones, también nos propone exprimir *TypeScript* para crear un tipo combinado que ofrezca a los consumidores el plantel completo y delimitado de acciones posibles.\n\n```typescript\nexport type GlobalActions = SendUserMesage | IsLoginNeeded | StoreToken;\n```\n\nEs normal que al principio todo este *boilerplate* te parezca un exceso. Pero entre las plantillas, los *snippets* y el *copy and paste* no es tan trabajoso como pudiera parecer. A cambio tienes un código robusto y explícitamente detallado.\n\n## 2.4 Dispatch y Select, despacho de acciones y selección de cambios\n\nDesde el resto del código **la comunicación con este estado centralizado se realizará por dos conductos oficiales : Dispatch y Select**. El primero es un método que recibe como único parámetro una instancia de una acción. Dicha instancia lleva implícito el tipo y puede ir rellena de una *payload*. Así es como se envían los cambios hacia el almacén.\n\n```typescript\nconstructor(private store: Store<RootState>) {\n  this.store.dispatch(new SendUserMesage('Tutorial Angular en Español'));\n}\n```\n\nNo esperamos respuesta de este método. Es un mundo de *fire and forget*. Pero en cualquier otro lugar o lugares de nuestro código podremos recibir notificaciones de cualquier cambio que se haya producido. De forma desacoplada podremos recibir el mensaje con una simple subscripción *RxJS*.\n\n```typescript\nthis.store\n  .select('global', 'userMessage')\n  .subscribe(userMessage: string => console.log(userMessage));\n```\n\nA este método de consulta asíncrona se le envía un argumento con múltiples sobrecargas llamado *selector*. En este caso está formado por dos claves que apuntan a una propiedad concreta en la que estoy interesado: `global.userMessage`.\n\nCon esto tenemos una primera implementación del patrón Redux en Angular usando NgRx. Pero aún hay más.\n\n# 3 Efectos y módulos funcionales\n\nLas funciones reductoras, como ya se ha dicho, deben ser puras. La idea es que puedan ser auditadas, re-ejecutadas y testeadas sin que necesiten servicios externos ni causen efectos colaterales. Y esto es un problema con la cantidad de **ejecuciones asíncronas en las aplicaciones web**. Cualquier tentación de lanzar una llamada *AJAX* dentro de un reductor debe ser elimindad de inmediato.\n\n> Dos razones: por un lado en Angular se necesita invocar al *httpClient* de alguna manera para realizar la llamada *AJAX*. Y, ya que la función no pertenece a ninguna clase, no puede haber constructor que reclame la inyección de dicho servicio. Tampoco las funciones puras tienen permitido usar nada que no venga entre sus argumentos. Por otra parte las funciones puras han de ser predecibles, y una llamada a un servidor remoto no es en absoluto predecible. Puede pasarle de todo, así que los reductores no son país para procesos asíncronos.\n\nLa solución que proponen *NgRX* es usar un artificio llamado efecto, porque será encargado de **los efectos secundarios que provocan las las instrucciones asíncronas**. De una forma simplista, diremos que las acciones asíncronas se multiplicarán por tres. El comando que genera la llamada, y los dos potenciales eventos con la respuesta correcta o el error.\n\nPara manejarlo todo incluyen en la librería el módulo `EffectsModule` que ha de registrarse junto al `StoreModule`. Desde ese momento *NgRX* activa un sistema de seguimiento que trata las acciones como un stream de *RxJS* y permite subscribirse a la invocación de dichas acciones y tratarlas adecuadamente. Una vez más, aprovechan las características del *TypeScript* y hacen uso de los decoradores para definir las funciones que responderán a la ejecución de las acciones.\n\n## 3.1 @Effect(), efectos secundarios\n\nEl decorador `@Effect()` se aplica a propiedades de servicios estándar de Angular. *NgRX* invoca esas funciones ante cada acción despachada, así que lo primero que debemos hacer es aplicar un filtro para quedarnos con las acciones del tipo que nos interese. El que lanzará la llamada `http`.\n\n> Todo el trabajo se realizará con *streams* y requiere de un conocimiento previo de la librería *RxJS* y de la mecánica de su método `pipe` y sus operadores reactivos.\n\nCuando llegue una de esas acciones realizaremos la llamada asíncrona sin complejos. Recordemos que un efecto forma parte de un servicio inyectable de Angular. No tienen ninguna restricción funcional por parte de Redux. Obviamente la respuesta debe ser capturada y tratada según haya sido correcta o no.\n\nSi recibimos una respuesta válida podremos retornar directamente una nueva acción que actualice el estado con los datos recibidos. En cambio si ha habido un error, habrá que reactivar el *stream* con un nuevo observable que emita la acción que procesará el error.\n\n```typescript\n@Effect()\nconstructor(private actions$: Actions, private cars: CarsService) {}\n\npublic loadCarsEffect$: Observable<CarsActions> = this.actions$.pipe(\n  ofType<LoadCars>(CarsActionTypes.LoadCars),\n  mergeMap(() =>\n    this.cars.getCars$().pipe(\n      map((cars: Car[]) => new LoadCarsOK(cars)),\n      catchError(err => of(new LoadCarsError('Error loading cars')))\n    )\n  )\n);\n```\n\nTómate el tiempo necesario para comprender este código. Especialmente los operadores `ofType` de *NgRX* y el `mergeMap` de *RxJS*. Fíjate bien en los tipos de los datos recibidos y devueltos. El efecto trata con observables de acciones. Recibe una y devuelve otra que puede ser de alguno de los otros dos tipos previstos. En el caso correcto se cambia una acción por otra, en otro caso se crea un nuevo observable mediante el constructor `of()` antes del retorno.\n\n> Para un ejemplo más completo de estos conceptos explora la implementación en el proyecto Autobot. El [RootStore](https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/core) hace uso de efectos en la carpeta `store/state/cars`.\n\n## 3.2 Feature, módulos funcionales\n\nYa que Redux está especialmente indicado en grandes aplicaciones pero manteniendo un estado centralizado, es fácil que acabemos con un módulo raíz demasiado pesado que ralentice el inicio de la aplicación. Para adaptar la gestión central a un entorno con módulos cargado con  *lazyloading* necesitamos una última ayuda, de la mano de `FeatureModule`.\n\nEsencialmente es una nuevo *store* supeditado al principal pero que no se define, y por tanto no pesa, hasta que no es necesario. En Autobot el [CarModule](https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/car) es un buen ejemplo de *store* cargado de forma dinámica como una `Feature`.\n\nYa tienes los conocimientos para gestionar de manera centralizada, auditable y predecible el estado de tus programas. El patrón Redux lucirá más cuanto más grande y compleja sea tu aplicación.\n\nContinúa tu formación avanzada para crear aplicaciones [PWA, entre la web y las apps con Angular](../pwa-entre-la-web-y-las-apps-con-angular) y verás como aprendes a programar con Angular 7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"el-patron-redux-con-ngrx-en-angular","published":1,"updated":"2019-08-02T15:02:25.064Z","_id":"cjyh5p4b6000m18s3ou4s1z2u","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-a_redux.png\" alt=\"el-patron-redux-con-ngrx-en-angular\"></p><p>Le pasa a todas las aplicaciones. Crecen y crecen en funcionalidad y complejidad. En Angular estamos preparados para modularizar, componentizar e inyectar servicios. Pero con grandes aplicaciones, o con grandes equipos, parece que nada es suficiente. Se necesita una <strong>gestión del estado centralizada</strong> como la del patrón Redux.</p><p><strong>Redux no hace rápido lo simple, sino mantenible lo complejo</strong>. Y si tienes delante un desarrollo complejo, te recomiendo que uses <em>NgRX</em>; la solución estándar para implementar <strong>Redux con Angular</strong>.</p><a id=\"more\"></a><p>Partiendo del código tal cómo quedó en <a href=\"../deteccion-del-cambio-en-Angular/\">Detección del cambio en Angular</a>. Al finalizar tendrás una aplicación que gestiona centralizadamente los cambios, que permite conocer qué ocurrió y predecir lo que ocurrirá.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/a-redux\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/a-redux</a></p></blockquote><h1 id=\"1-El-patron-Redux\"><a href=\"#1-El-patron-Redux\" class=\"headerlink\" title=\"1 El patrón Redux\"></a>1 El patrón Redux</h1><p>Redux es como una base de datos, es en un almacén para el estado de la aplicación. Pero un almacén que gestiona sus cambios de manera predictiva. Combina dos patrones: <em>Action</em> para el envío de comandos para actualizar el estado del almacén; y <em>Observable</em> para la subscripción a cambios en el estado del almacén. <strong>Desacopla los emisores de acciones de los receptores de cambios</strong> en los datos.</p><p>Para lograrlo tendremos que cumplir una serie de principios y utilizar unos elementos predefinidos. Esto introduce capas de abstracción y burocracia que inicialmente complican el desarrollo. Pero a medio plazo harán que mantener la aplicación sea mucho más sencillo y seguro.</p><h2 id=\"1-1-Principios-de-Redux\"><a href=\"#1-1-Principios-de-Redux\" class=\"headerlink\" title=\"1.1 Principios de Redux\"></a>1.1 Principios de Redux</h2><p>Tenemos tres principios básicos que cumplir:</p><ul><li><strong>Single Source Of Truth</strong>: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.</li><li><strong>Read Only State</strong>: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.</li><li><strong>Changes By Pure Functions</strong>: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.</li></ul><h2 id=\"1-2-Elementos-de-Redux\"><a href=\"#1-2-Elementos-de-Redux\" class=\"headerlink\" title=\"1.2 Elementos de Redux\"></a>1.2 Elementos de Redux</h2><p>Estos son los artificios fundamentales que incorporaremos a nuestro desarrollo:</p><ul><li><strong>Store</strong>: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.</li><li><strong>State</strong>: Árbol de objetos que contienen la única copia válida de la información. Representa el valor del almacén en un momento determinado.</li><li><strong>Actions</strong>: Objetos identificados por un tipo y cargados con un <em>payload</em>. Transmiten una intención de mutación sobre el estado del <em>store</em>.</li><li><strong>Reducers</strong> : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Clonan el estado, realizan los cambios oportunos y devuelven el estado mutado.</li></ul><ul><li><strong>Actions</strong>: Objetos identificados por un tipo y cargados con un <em>payload</em>. Transmiten una intención de mutación sobre el estado del almacén. Tomados del patrón comando.</li><li><strong>Reducers</strong> : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Toman el estado, realizan los cambios oportunos y devuelven el estado mutado.</li><li><strong>Effects</strong> : Los reductores, como funciones puras, no pueden tener efectos secundarios. Es decir: depender o cambiar algo del entorno. Esto debería hacerse antes o después del cambio. En algo que aquí por ahora no usaremos: los efectos.</li></ul><blockquote><p>Los funciones reductoras, al ser puras, mezclan la programación funcional con la orientada a objetos. Un reto pero también una demostración de la coexistencia de paradigmas en un mismo desarrollo.</p></blockquote><h1 id=\"2-NgRx\"><a href=\"#2-NgRx\" class=\"headerlink\" title=\"2 NgRx\"></a>2 NgRx</h1><p>NgRx es el estándar de facto para implementar Redux en Angular. Está basada en <em>RxJS</em> y es una librería modular con todo lo necesario para crear grandes aplicaciones. Esto son los módulos que la componen:</p><ul><li><strong>store</strong>: Es el módulo principal con el administrador del estado centralizado y reactivo.</li><li><strong>store-devtools</strong>: Instrumentación para depurar desde el navegador. Vale su peso en oro.</li><li><strong>router-Store</strong> : Almacena el estado del <em>router</em> de Angular en el <em>store</em>, tratando cada evento como una acción Redux.</li><li><strong>effects</strong>: Los reductores son funciones puras sin efectos colaterales. Este módulo es la solución para comandos asíncronos.</li><li><strong>schematics, entity, ngrx-data</strong>: Son otros módulos opcionales con ayudas y plantillas de NgRX.</li></ul><h2 id=\"2-1-Instalacion-y-configuracion\"><a href=\"#2-1-Instalacion-y-configuracion\" class=\"headerlink\" title=\"2.1 Instalación y configuración\"></a>2.1 Instalación y configuración</h2><p>Para agregar <em>NgRx</em> a un app te propongo la siguiente receta de comandos. Además de esto tendrás que instalar en tu navegador las herramientas de diagnóstico <a href=\"http://extension.remotedev.io/\" target=\"_blank\" rel=\"noopener\">Redux DevTools</a>.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @angular-devkit/schematics --save-dev</span><br><span class=\"line\">npm i @ngrx/schematics --save-dev</span><br><span class=\"line\">ng config cli.defaultCollection @ngrx/schematics</span><br><span class=\"line\">npm i @ngrx/store --save</span><br><span class=\"line\">npm i @ngrx/store-devtools --save</span><br><span class=\"line\">ng g st RootState --root -m app.module.ts --spec false</span><br><span class=\"line\">npm install @ngrx/router-store --save</span><br></pre></td></tr></table></figure><p>Con esto habrás instalado y configurado NgRx en tu app. Completa tu módulo principal para que tenga algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    CommonModule,</span><br><span class=\"line\">    RouterModule,</span><br><span class=\"line\">    StoreModule.forRoot(rootReducers, &#123; metaReducers &#125;),</span><br><span class=\"line\">    StoreRouterConnectingModule.forRoot(&#123; stateKey: <span class=\"string\">'router'</span> &#125;),</span><br><span class=\"line\">    !environment.production ? StoreDevtoolsModule.instrument() : []</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El código generado por <code>@ngrx/schematics</code> no es para todos los gustos. Tómalo como un punto de partida y crea la estructura que mejor te encaje. En <a href=\"https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/core/store/state\" target=\"_blank\" rel=\"noopener\">Autobot</a> he empezado por llevarlo todo al <code>CoreModule</code> y guardarlo en una carpeta propia convenientemente nombrada <code>store/state</code>. Veámosla en detalle.</p></blockquote><h2 id=\"2-2-State-y-reducers-los-cambios-de-estado-mediante-reductores\"><a href=\"#2-2-State-y-reducers-los-cambios-de-estado-mediante-reductores\" class=\"headerlink\" title=\"2.2 State y reducers, los cambios de estado mediante reductores\"></a>2.2 State y reducers, los cambios de estado mediante reductores</h2><p>El estado en <em>redux</em> es un objeto tipado a partir de una interfaz, normalmente llamada <code>State</code> a secas, aunque yo prefiero identificarla como <code>RootState</code>. Tendrá propiedades para almacenar objetos más o menos complejos. Cada propiedad tendrá su propio tipo complejo y será gestionada por una función reductora específica. Se necesita un proceso de mapeo que asigne la función reductora a cada propiedad del estado raíz. Eso es lo que hace este código:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> RootState &#123;</span><br><span class=\"line\">  router: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  global: GlobalState;</span><br><span class=\"line\">  cars: CarsState;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> rootReducers: ActionReducerMap&lt;RootState&gt; = &#123;</span><br><span class=\"line\">  router: routerReducer,</span><br><span class=\"line\">  global: globalreducer,</span><br><span class=\"line\">  cars: carsReducer</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>Las funciones reductoras pueden estar en cualquier fichero. Son puras y no deben ser incluidas en ninguna clase. Normalmente tendrás un fichero para cada reductor. El del <em>router</em> ya viene hecho por NgRx, todos los demás son cosa tuya. Por ejemplo este es el reductor sobre la propiedad <code>global: GlobalState</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalReducer</span>(<span class=\"params\">state = initialState, action: GlobalActions</span>): <span class=\"title\">GlobalState</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GlobalActionTypes.SendUserMessage:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, userMessage: action.payload &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GlobalActionTypes.IsLoginNeeded:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, loginNeeded: action.payload &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GlobalActionTypes.StoreToken:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, token: action.payload &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Como puedes ver esta función recibe dos argumento: el estado y la acción que pretende mutarlo. <strong>La acción es un objeto</strong> con dos propiedades. La primera y obligatoria es el tipo y sirve para escoger la lógica que se aplicará. La otra, opcional, es el <code>payload</code> que actúa como argumento de la acción. El reductor no puede usar nada más que estos argumentos: <strong>state y action</strong>. Y por ser puro no puede mutar ninguno, por tanto tiene que clonar el estado recibido antes de aplicarle cualquier cambio. Una vez efectuado el cambio, usando el <em>payload</em> si es preciso, devolverá el clon mutado.</p><h2 id=\"2-3-Actions-las-acciones-permitidas\"><a href=\"#2-3-Actions-las-acciones-permitidas\" class=\"headerlink\" title=\"2.3 Actions, las acciones permitidas\"></a>2.3 Actions, las acciones permitidas</h2><p>El patrón Redux no obliga a grandes cosas respecto a cómo implementar las acciones. Lo único que de verdad necesitas es crear objetos con una propiedad obligatoria <code>type</code> y otra opcional <code>payoload</code>.</p><p>Pero en NgRX han decidido aprovechar al máximo las capacidades del <em>TypeScript</em> y proponen usar un código fuertemente tipado. Para empezar crean un <code>enum</code> que detalla los posible tipos de una acción y les asigna un texto para que luzcan y faciliten su búsqueda en <em>logs</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> GlobalActionTypes &#123;</span><br><span class=\"line\">  SendUserMessage = <span class=\"string\">'[Global] Show Message'</span>,</span><br><span class=\"line\">  IsLoginNeeded = <span class=\"string\">'[Auth] Is Login Needed'</span>,</span><br><span class=\"line\">  StoreToken = <span class=\"string\">'[Auth] Store Token'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y claro, en un ambiente tipado, la acción será una clase que ha de cumplir una interfaz. En dicha clase queda ya predeterminado su tipo de acción; y por supuesto que permiten fijar el tipo de datos de la <code>payload</code>. Todo ello genera un código como el siguiente.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SendUserMesage <span class=\"keyword\">implements</span> Action &#123;</span><br><span class=\"line\">  readonly <span class=\"keyword\">type</span> = GlobalActionTypes.SendUserMessage;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> payload: <span class=\"built_in\">string</span></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Para terminar, y ya que habremos de crear un buen número de clases para las acciones, también nos propone exprimir <em>TypeScript</em> para crear un tipo combinado que ofrezca a los consumidores el plantel completo y delimitado de acciones posibles.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> GlobalActions = SendUserMesage | IsLoginNeeded | StoreToken;</span><br></pre></td></tr></table></figure><p>Es normal que al principio todo este <em>boilerplate</em> te parezca un exceso. Pero entre las plantillas, los <em>snippets</em> y el <em>copy and paste</em> no es tan trabajoso como pudiera parecer. A cambio tienes un código robusto y explícitamente detallado.</p><h2 id=\"2-4-Dispatch-y-Select-despacho-de-acciones-y-seleccion-de-cambios\"><a href=\"#2-4-Dispatch-y-Select-despacho-de-acciones-y-seleccion-de-cambios\" class=\"headerlink\" title=\"2.4 Dispatch y Select, despacho de acciones y selección de cambios\"></a>2.4 Dispatch y Select, despacho de acciones y selección de cambios</h2><p>Desde el resto del código <strong>la comunicación con este estado centralizado se realizará por dos conductos oficiales : Dispatch y Select</strong>. El primero es un método que recibe como único parámetro una instancia de una acción. Dicha instancia lleva implícito el tipo y puede ir rellena de una <em>payload</em>. Así es como se envían los cambios hacia el almacén.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> store: Store&lt;RootState&gt;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.store.dispatch(<span class=\"keyword\">new</span> SendUserMesage(<span class=\"string\">'Tutorial Angular en Español'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>No esperamos respuesta de este método. Es un mundo de <em>fire and forget</em>. Pero en cualquier otro lugar o lugares de nuestro código podremos recibir notificaciones de cualquier cambio que se haya producido. De forma desacoplada podremos recibir el mensaje con una simple subscripción <em>RxJS</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.store</span><br><span class=\"line\">  .select(<span class=\"string\">'global'</span>, <span class=\"string\">'userMessage'</span>)</span><br><span class=\"line\">  .subscribe(userMessage: <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"built_in\">console</span>.log(userMessage));</span><br></pre></td></tr></table></figure><p>A este método de consulta asíncrona se le envía un argumento con múltiples sobrecargas llamado <em>selector</em>. En este caso está formado por dos claves que apuntan a una propiedad concreta en la que estoy interesado: <code>global.userMessage</code>.</p><p>Con esto tenemos una primera implementación del patrón Redux en Angular usando NgRx. Pero aún hay más.</p><h1 id=\"3-Efectos-y-modulos-funcionales\"><a href=\"#3-Efectos-y-modulos-funcionales\" class=\"headerlink\" title=\"3 Efectos y módulos funcionales\"></a>3 Efectos y módulos funcionales</h1><p>Las funciones reductoras, como ya se ha dicho, deben ser puras. La idea es que puedan ser auditadas, re-ejecutadas y testeadas sin que necesiten servicios externos ni causen efectos colaterales. Y esto es un problema con la cantidad de <strong>ejecuciones asíncronas en las aplicaciones web</strong>. Cualquier tentación de lanzar una llamada <em>AJAX</em> dentro de un reductor debe ser elimindad de inmediato.</p><blockquote><p>Dos razones: por un lado en Angular se necesita invocar al <em>httpClient</em> de alguna manera para realizar la llamada <em>AJAX</em>. Y, ya que la función no pertenece a ninguna clase, no puede haber constructor que reclame la inyección de dicho servicio. Tampoco las funciones puras tienen permitido usar nada que no venga entre sus argumentos. Por otra parte las funciones puras han de ser predecibles, y una llamada a un servidor remoto no es en absoluto predecible. Puede pasarle de todo, así que los reductores no son país para procesos asíncronos.</p></blockquote><p>La solución que proponen <em>NgRX</em> es usar un artificio llamado efecto, porque será encargado de <strong>los efectos secundarios que provocan las las instrucciones asíncronas</strong>. De una forma simplista, diremos que las acciones asíncronas se multiplicarán por tres. El comando que genera la llamada, y los dos potenciales eventos con la respuesta correcta o el error.</p><p>Para manejarlo todo incluyen en la librería el módulo <code>EffectsModule</code> que ha de registrarse junto al <code>StoreModule</code>. Desde ese momento <em>NgRX</em> activa un sistema de seguimiento que trata las acciones como un stream de <em>RxJS</em> y permite subscribirse a la invocación de dichas acciones y tratarlas adecuadamente. Una vez más, aprovechan las características del <em>TypeScript</em> y hacen uso de los decoradores para definir las funciones que responderán a la ejecución de las acciones.</p><h2 id=\"3-1-Effect-efectos-secundarios\"><a href=\"#3-1-Effect-efectos-secundarios\" class=\"headerlink\" title=\"3.1 @Effect(), efectos secundarios\"></a>3.1 @Effect(), efectos secundarios</h2><p>El decorador <code>@Effect()</code> se aplica a propiedades de servicios estándar de Angular. <em>NgRX</em> invoca esas funciones ante cada acción despachada, así que lo primero que debemos hacer es aplicar un filtro para quedarnos con las acciones del tipo que nos interese. El que lanzará la llamada <code>http</code>.</p><blockquote><p>Todo el trabajo se realizará con <em>streams</em> y requiere de un conocimiento previo de la librería <em>RxJS</em> y de la mecánica de su método <code>pipe</code> y sus operadores reactivos.</p></blockquote><p>Cuando llegue una de esas acciones realizaremos la llamada asíncrona sin complejos. Recordemos que un efecto forma parte de un servicio inyectable de Angular. No tienen ninguna restricción funcional por parte de Redux. Obviamente la respuesta debe ser capturada y tratada según haya sido correcta o no.</p><p>Si recibimos una respuesta válida podremos retornar directamente una nueva acción que actualice el estado con los datos recibidos. En cambio si ha habido un error, habrá que reactivar el <em>stream</em> con un nuevo observable que emita la acción que procesará el error.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Effect</span>()</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> actions$: Actions, <span class=\"keyword\">private</span> cars: CarsService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> loadCarsEffect$: Observable&lt;CarsActions&gt; = <span class=\"keyword\">this</span>.actions$.pipe(</span><br><span class=\"line\">  ofType&lt;LoadCars&gt;(CarsActionTypes.LoadCars),</span><br><span class=\"line\">  mergeMap(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cars.getCars$().pipe(</span><br><span class=\"line\">      map(<span class=\"function\">(<span class=\"params\">cars: Car[]</span>) =&gt;</span> <span class=\"keyword\">new</span> LoadCarsOK(cars)),</span><br><span class=\"line\">      catchError(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> of(<span class=\"keyword\">new</span> LoadCarsError(<span class=\"string\">'Error loading cars'</span>)))</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><p>Tómate el tiempo necesario para comprender este código. Especialmente los operadores <code>ofType</code> de <em>NgRX</em> y el <code>mergeMap</code> de <em>RxJS</em>. Fíjate bien en los tipos de los datos recibidos y devueltos. El efecto trata con observables de acciones. Recibe una y devuelve otra que puede ser de alguno de los otros dos tipos previstos. En el caso correcto se cambia una acción por otra, en otro caso se crea un nuevo observable mediante el constructor <code>of()</code> antes del retorno.</p><blockquote><p>Para un ejemplo más completo de estos conceptos explora la implementación en el proyecto Autobot. El <a href=\"https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/core\" target=\"_blank\" rel=\"noopener\">RootStore</a> hace uso de efectos en la carpeta <code>store/state/cars</code>.</p></blockquote><h2 id=\"3-2-Feature-modulos-funcionales\"><a href=\"#3-2-Feature-modulos-funcionales\" class=\"headerlink\" title=\"3.2 Feature, módulos funcionales\"></a>3.2 Feature, módulos funcionales</h2><p>Ya que Redux está especialmente indicado en grandes aplicaciones pero manteniendo un estado centralizado, es fácil que acabemos con un módulo raíz demasiado pesado que ralentice el inicio de la aplicación. Para adaptar la gestión central a un entorno con módulos cargado con <em>lazyloading</em> necesitamos una última ayuda, de la mano de <code>FeatureModule</code>.</p><p>Esencialmente es una nuevo <em>store</em> supeditado al principal pero que no se define, y por tanto no pesa, hasta que no es necesario. En Autobot el <a href=\"https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/car\" target=\"_blank\" rel=\"noopener\">CarModule</a> es un buen ejemplo de <em>store</em> cargado de forma dinámica como una <code>Feature</code>.</p><p>Ya tienes los conocimientos para gestionar de manera centralizada, auditable y predecible el estado de tus programas. El patrón Redux lucirá más cuanto más grande y compleja sea tu aplicación.</p><p>Continúa tu formación avanzada para crear aplicaciones <a href=\"../pwa-entre-la-web-y-las-apps-con-angular\">PWA, entre la web y las apps con Angular</a> y verás como aprendes a programar con Angular 7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-a_redux.png\" alt=\"el-patron-redux-con-ngrx-en-angular\"></p><p>Le pasa a todas las aplicaciones. Crecen y crecen en funcionalidad y complejidad. En Angular estamos preparados para modularizar, componentizar e inyectar servicios. Pero con grandes aplicaciones, o con grandes equipos, parece que nada es suficiente. Se necesita una <strong>gestión del estado centralizada</strong> como la del patrón Redux.</p><p><strong>Redux no hace rápido lo simple, sino mantenible lo complejo</strong>. Y si tienes delante un desarrollo complejo, te recomiendo que uses <em>NgRX</em>; la solución estándar para implementar <strong>Redux con Angular</strong>.</p>","more":"<p>Partiendo del código tal cómo quedó en <a href=\"../deteccion-del-cambio-en-Angular/\">Detección del cambio en Angular</a>. Al finalizar tendrás una aplicación que gestiona centralizadamente los cambios, que permite conocer qué ocurrió y predecir lo que ocurrirá.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/a-redux\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/a-redux</a></p></blockquote><h1 id=\"1-El-patron-Redux\"><a href=\"#1-El-patron-Redux\" class=\"headerlink\" title=\"1 El patrón Redux\"></a>1 El patrón Redux</h1><p>Redux es como una base de datos, es en un almacén para el estado de la aplicación. Pero un almacén que gestiona sus cambios de manera predictiva. Combina dos patrones: <em>Action</em> para el envío de comandos para actualizar el estado del almacén; y <em>Observable</em> para la subscripción a cambios en el estado del almacén. <strong>Desacopla los emisores de acciones de los receptores de cambios</strong> en los datos.</p><p>Para lograrlo tendremos que cumplir una serie de principios y utilizar unos elementos predefinidos. Esto introduce capas de abstracción y burocracia que inicialmente complican el desarrollo. Pero a medio plazo harán que mantener la aplicación sea mucho más sencillo y seguro.</p><h2 id=\"1-1-Principios-de-Redux\"><a href=\"#1-1-Principios-de-Redux\" class=\"headerlink\" title=\"1.1 Principios de Redux\"></a>1.1 Principios de Redux</h2><p>Tenemos tres principios básicos que cumplir:</p><ul><li><strong>Single Source Of Truth</strong>: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.</li><li><strong>Read Only State</strong>: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.</li><li><strong>Changes By Pure Functions</strong>: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.</li></ul><h2 id=\"1-2-Elementos-de-Redux\"><a href=\"#1-2-Elementos-de-Redux\" class=\"headerlink\" title=\"1.2 Elementos de Redux\"></a>1.2 Elementos de Redux</h2><p>Estos son los artificios fundamentales que incorporaremos a nuestro desarrollo:</p><ul><li><strong>Store</strong>: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.</li><li><strong>State</strong>: Árbol de objetos que contienen la única copia válida de la información. Representa el valor del almacén en un momento determinado.</li><li><strong>Actions</strong>: Objetos identificados por un tipo y cargados con un <em>payload</em>. Transmiten una intención de mutación sobre el estado del <em>store</em>.</li><li><strong>Reducers</strong> : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Clonan el estado, realizan los cambios oportunos y devuelven el estado mutado.</li></ul><ul><li><strong>Actions</strong>: Objetos identificados por un tipo y cargados con un <em>payload</em>. Transmiten una intención de mutación sobre el estado del almacén. Tomados del patrón comando.</li><li><strong>Reducers</strong> : Son funciones puras, que ostentan la exclusividad de poder mutar el estado. Reciben dos argumentos: el estado actual y una acción con su tipo y su carga. Toman el estado, realizan los cambios oportunos y devuelven el estado mutado.</li><li><strong>Effects</strong> : Los reductores, como funciones puras, no pueden tener efectos secundarios. Es decir: depender o cambiar algo del entorno. Esto debería hacerse antes o después del cambio. En algo que aquí por ahora no usaremos: los efectos.</li></ul><blockquote><p>Los funciones reductoras, al ser puras, mezclan la programación funcional con la orientada a objetos. Un reto pero también una demostración de la coexistencia de paradigmas en un mismo desarrollo.</p></blockquote><h1 id=\"2-NgRx\"><a href=\"#2-NgRx\" class=\"headerlink\" title=\"2 NgRx\"></a>2 NgRx</h1><p>NgRx es el estándar de facto para implementar Redux en Angular. Está basada en <em>RxJS</em> y es una librería modular con todo lo necesario para crear grandes aplicaciones. Esto son los módulos que la componen:</p><ul><li><strong>store</strong>: Es el módulo principal con el administrador del estado centralizado y reactivo.</li><li><strong>store-devtools</strong>: Instrumentación para depurar desde el navegador. Vale su peso en oro.</li><li><strong>router-Store</strong> : Almacena el estado del <em>router</em> de Angular en el <em>store</em>, tratando cada evento como una acción Redux.</li><li><strong>effects</strong>: Los reductores son funciones puras sin efectos colaterales. Este módulo es la solución para comandos asíncronos.</li><li><strong>schematics, entity, ngrx-data</strong>: Son otros módulos opcionales con ayudas y plantillas de NgRX.</li></ul><h2 id=\"2-1-Instalacion-y-configuracion\"><a href=\"#2-1-Instalacion-y-configuracion\" class=\"headerlink\" title=\"2.1 Instalación y configuración\"></a>2.1 Instalación y configuración</h2><p>Para agregar <em>NgRx</em> a un app te propongo la siguiente receta de comandos. Además de esto tendrás que instalar en tu navegador las herramientas de diagnóstico <a href=\"http://extension.remotedev.io/\" target=\"_blank\" rel=\"noopener\">Redux DevTools</a>.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @angular-devkit/schematics --save-dev</span><br><span class=\"line\">npm i @ngrx/schematics --save-dev</span><br><span class=\"line\">ng config cli.defaultCollection @ngrx/schematics</span><br><span class=\"line\">npm i @ngrx/store --save</span><br><span class=\"line\">npm i @ngrx/store-devtools --save</span><br><span class=\"line\">ng g st RootState --root -m app.module.ts --spec false</span><br><span class=\"line\">npm install @ngrx/router-store --save</span><br></pre></td></tr></table></figure><p>Con esto habrás instalado y configurado NgRx en tu app. Completa tu módulo principal para que tenga algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    CommonModule,</span><br><span class=\"line\">    RouterModule,</span><br><span class=\"line\">    StoreModule.forRoot(rootReducers, &#123; metaReducers &#125;),</span><br><span class=\"line\">    StoreRouterConnectingModule.forRoot(&#123; stateKey: <span class=\"string\">'router'</span> &#125;),</span><br><span class=\"line\">    !environment.production ? StoreDevtoolsModule.instrument() : []</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El código generado por <code>@ngrx/schematics</code> no es para todos los gustos. Tómalo como un punto de partida y crea la estructura que mejor te encaje. En <a href=\"https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/core/store/state\" target=\"_blank\" rel=\"noopener\">Autobot</a> he empezado por llevarlo todo al <code>CoreModule</code> y guardarlo en una carpeta propia convenientemente nombrada <code>store/state</code>. Veámosla en detalle.</p></blockquote><h2 id=\"2-2-State-y-reducers-los-cambios-de-estado-mediante-reductores\"><a href=\"#2-2-State-y-reducers-los-cambios-de-estado-mediante-reductores\" class=\"headerlink\" title=\"2.2 State y reducers, los cambios de estado mediante reductores\"></a>2.2 State y reducers, los cambios de estado mediante reductores</h2><p>El estado en <em>redux</em> es un objeto tipado a partir de una interfaz, normalmente llamada <code>State</code> a secas, aunque yo prefiero identificarla como <code>RootState</code>. Tendrá propiedades para almacenar objetos más o menos complejos. Cada propiedad tendrá su propio tipo complejo y será gestionada por una función reductora específica. Se necesita un proceso de mapeo que asigne la función reductora a cada propiedad del estado raíz. Eso es lo que hace este código:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> RootState &#123;</span><br><span class=\"line\">  router: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  global: GlobalState;</span><br><span class=\"line\">  cars: CarsState;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> rootReducers: ActionReducerMap&lt;RootState&gt; = &#123;</span><br><span class=\"line\">  router: routerReducer,</span><br><span class=\"line\">  global: globalreducer,</span><br><span class=\"line\">  cars: carsReducer</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>Las funciones reductoras pueden estar en cualquier fichero. Son puras y no deben ser incluidas en ninguna clase. Normalmente tendrás un fichero para cada reductor. El del <em>router</em> ya viene hecho por NgRx, todos los demás son cosa tuya. Por ejemplo este es el reductor sobre la propiedad <code>global: GlobalState</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalReducer</span>(<span class=\"params\">state = initialState, action: GlobalActions</span>): <span class=\"title\">GlobalState</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GlobalActionTypes.SendUserMessage:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, userMessage: action.payload &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GlobalActionTypes.IsLoginNeeded:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, loginNeeded: action.payload &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GlobalActionTypes.StoreToken:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, token: action.payload &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Como puedes ver esta función recibe dos argumento: el estado y la acción que pretende mutarlo. <strong>La acción es un objeto</strong> con dos propiedades. La primera y obligatoria es el tipo y sirve para escoger la lógica que se aplicará. La otra, opcional, es el <code>payload</code> que actúa como argumento de la acción. El reductor no puede usar nada más que estos argumentos: <strong>state y action</strong>. Y por ser puro no puede mutar ninguno, por tanto tiene que clonar el estado recibido antes de aplicarle cualquier cambio. Una vez efectuado el cambio, usando el <em>payload</em> si es preciso, devolverá el clon mutado.</p><h2 id=\"2-3-Actions-las-acciones-permitidas\"><a href=\"#2-3-Actions-las-acciones-permitidas\" class=\"headerlink\" title=\"2.3 Actions, las acciones permitidas\"></a>2.3 Actions, las acciones permitidas</h2><p>El patrón Redux no obliga a grandes cosas respecto a cómo implementar las acciones. Lo único que de verdad necesitas es crear objetos con una propiedad obligatoria <code>type</code> y otra opcional <code>payoload</code>.</p><p>Pero en NgRX han decidido aprovechar al máximo las capacidades del <em>TypeScript</em> y proponen usar un código fuertemente tipado. Para empezar crean un <code>enum</code> que detalla los posible tipos de una acción y les asigna un texto para que luzcan y faciliten su búsqueda en <em>logs</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> GlobalActionTypes &#123;</span><br><span class=\"line\">  SendUserMessage = <span class=\"string\">'[Global] Show Message'</span>,</span><br><span class=\"line\">  IsLoginNeeded = <span class=\"string\">'[Auth] Is Login Needed'</span>,</span><br><span class=\"line\">  StoreToken = <span class=\"string\">'[Auth] Store Token'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y claro, en un ambiente tipado, la acción será una clase que ha de cumplir una interfaz. En dicha clase queda ya predeterminado su tipo de acción; y por supuesto que permiten fijar el tipo de datos de la <code>payload</code>. Todo ello genera un código como el siguiente.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SendUserMesage <span class=\"keyword\">implements</span> Action &#123;</span><br><span class=\"line\">  readonly <span class=\"keyword\">type</span> = GlobalActionTypes.SendUserMessage;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> payload: <span class=\"built_in\">string</span></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Para terminar, y ya que habremos de crear un buen número de clases para las acciones, también nos propone exprimir <em>TypeScript</em> para crear un tipo combinado que ofrezca a los consumidores el plantel completo y delimitado de acciones posibles.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> GlobalActions = SendUserMesage | IsLoginNeeded | StoreToken;</span><br></pre></td></tr></table></figure><p>Es normal que al principio todo este <em>boilerplate</em> te parezca un exceso. Pero entre las plantillas, los <em>snippets</em> y el <em>copy and paste</em> no es tan trabajoso como pudiera parecer. A cambio tienes un código robusto y explícitamente detallado.</p><h2 id=\"2-4-Dispatch-y-Select-despacho-de-acciones-y-seleccion-de-cambios\"><a href=\"#2-4-Dispatch-y-Select-despacho-de-acciones-y-seleccion-de-cambios\" class=\"headerlink\" title=\"2.4 Dispatch y Select, despacho de acciones y selección de cambios\"></a>2.4 Dispatch y Select, despacho de acciones y selección de cambios</h2><p>Desde el resto del código <strong>la comunicación con este estado centralizado se realizará por dos conductos oficiales : Dispatch y Select</strong>. El primero es un método que recibe como único parámetro una instancia de una acción. Dicha instancia lleva implícito el tipo y puede ir rellena de una <em>payload</em>. Así es como se envían los cambios hacia el almacén.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> store: Store&lt;RootState&gt;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.store.dispatch(<span class=\"keyword\">new</span> SendUserMesage(<span class=\"string\">'Tutorial Angular en Español'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>No esperamos respuesta de este método. Es un mundo de <em>fire and forget</em>. Pero en cualquier otro lugar o lugares de nuestro código podremos recibir notificaciones de cualquier cambio que se haya producido. De forma desacoplada podremos recibir el mensaje con una simple subscripción <em>RxJS</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.store</span><br><span class=\"line\">  .select(<span class=\"string\">'global'</span>, <span class=\"string\">'userMessage'</span>)</span><br><span class=\"line\">  .subscribe(userMessage: <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"built_in\">console</span>.log(userMessage));</span><br></pre></td></tr></table></figure><p>A este método de consulta asíncrona se le envía un argumento con múltiples sobrecargas llamado <em>selector</em>. En este caso está formado por dos claves que apuntan a una propiedad concreta en la que estoy interesado: <code>global.userMessage</code>.</p><p>Con esto tenemos una primera implementación del patrón Redux en Angular usando NgRx. Pero aún hay más.</p><h1 id=\"3-Efectos-y-modulos-funcionales\"><a href=\"#3-Efectos-y-modulos-funcionales\" class=\"headerlink\" title=\"3 Efectos y módulos funcionales\"></a>3 Efectos y módulos funcionales</h1><p>Las funciones reductoras, como ya se ha dicho, deben ser puras. La idea es que puedan ser auditadas, re-ejecutadas y testeadas sin que necesiten servicios externos ni causen efectos colaterales. Y esto es un problema con la cantidad de <strong>ejecuciones asíncronas en las aplicaciones web</strong>. Cualquier tentación de lanzar una llamada <em>AJAX</em> dentro de un reductor debe ser elimindad de inmediato.</p><blockquote><p>Dos razones: por un lado en Angular se necesita invocar al <em>httpClient</em> de alguna manera para realizar la llamada <em>AJAX</em>. Y, ya que la función no pertenece a ninguna clase, no puede haber constructor que reclame la inyección de dicho servicio. Tampoco las funciones puras tienen permitido usar nada que no venga entre sus argumentos. Por otra parte las funciones puras han de ser predecibles, y una llamada a un servidor remoto no es en absoluto predecible. Puede pasarle de todo, así que los reductores no son país para procesos asíncronos.</p></blockquote><p>La solución que proponen <em>NgRX</em> es usar un artificio llamado efecto, porque será encargado de <strong>los efectos secundarios que provocan las las instrucciones asíncronas</strong>. De una forma simplista, diremos que las acciones asíncronas se multiplicarán por tres. El comando que genera la llamada, y los dos potenciales eventos con la respuesta correcta o el error.</p><p>Para manejarlo todo incluyen en la librería el módulo <code>EffectsModule</code> que ha de registrarse junto al <code>StoreModule</code>. Desde ese momento <em>NgRX</em> activa un sistema de seguimiento que trata las acciones como un stream de <em>RxJS</em> y permite subscribirse a la invocación de dichas acciones y tratarlas adecuadamente. Una vez más, aprovechan las características del <em>TypeScript</em> y hacen uso de los decoradores para definir las funciones que responderán a la ejecución de las acciones.</p><h2 id=\"3-1-Effect-efectos-secundarios\"><a href=\"#3-1-Effect-efectos-secundarios\" class=\"headerlink\" title=\"3.1 @Effect(), efectos secundarios\"></a>3.1 @Effect(), efectos secundarios</h2><p>El decorador <code>@Effect()</code> se aplica a propiedades de servicios estándar de Angular. <em>NgRX</em> invoca esas funciones ante cada acción despachada, así que lo primero que debemos hacer es aplicar un filtro para quedarnos con las acciones del tipo que nos interese. El que lanzará la llamada <code>http</code>.</p><blockquote><p>Todo el trabajo se realizará con <em>streams</em> y requiere de un conocimiento previo de la librería <em>RxJS</em> y de la mecánica de su método <code>pipe</code> y sus operadores reactivos.</p></blockquote><p>Cuando llegue una de esas acciones realizaremos la llamada asíncrona sin complejos. Recordemos que un efecto forma parte de un servicio inyectable de Angular. No tienen ninguna restricción funcional por parte de Redux. Obviamente la respuesta debe ser capturada y tratada según haya sido correcta o no.</p><p>Si recibimos una respuesta válida podremos retornar directamente una nueva acción que actualice el estado con los datos recibidos. En cambio si ha habido un error, habrá que reactivar el <em>stream</em> con un nuevo observable que emita la acción que procesará el error.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Effect</span>()</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> actions$: Actions, <span class=\"keyword\">private</span> cars: CarsService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> loadCarsEffect$: Observable&lt;CarsActions&gt; = <span class=\"keyword\">this</span>.actions$.pipe(</span><br><span class=\"line\">  ofType&lt;LoadCars&gt;(CarsActionTypes.LoadCars),</span><br><span class=\"line\">  mergeMap(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cars.getCars$().pipe(</span><br><span class=\"line\">      map(<span class=\"function\">(<span class=\"params\">cars: Car[]</span>) =&gt;</span> <span class=\"keyword\">new</span> LoadCarsOK(cars)),</span><br><span class=\"line\">      catchError(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> of(<span class=\"keyword\">new</span> LoadCarsError(<span class=\"string\">'Error loading cars'</span>)))</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><p>Tómate el tiempo necesario para comprender este código. Especialmente los operadores <code>ofType</code> de <em>NgRX</em> y el <code>mergeMap</code> de <em>RxJS</em>. Fíjate bien en los tipos de los datos recibidos y devueltos. El efecto trata con observables de acciones. Recibe una y devuelve otra que puede ser de alguno de los otros dos tipos previstos. En el caso correcto se cambia una acción por otra, en otro caso se crea un nuevo observable mediante el constructor <code>of()</code> antes del retorno.</p><blockquote><p>Para un ejemplo más completo de estos conceptos explora la implementación en el proyecto Autobot. El <a href=\"https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/core\" target=\"_blank\" rel=\"noopener\">RootStore</a> hace uso de efectos en la carpeta <code>store/state/cars</code>.</p></blockquote><h2 id=\"3-2-Feature-modulos-funcionales\"><a href=\"#3-2-Feature-modulos-funcionales\" class=\"headerlink\" title=\"3.2 Feature, módulos funcionales\"></a>3.2 Feature, módulos funcionales</h2><p>Ya que Redux está especialmente indicado en grandes aplicaciones pero manteniendo un estado centralizado, es fácil que acabemos con un módulo raíz demasiado pesado que ralentice el inicio de la aplicación. Para adaptar la gestión central a un entorno con módulos cargado con <em>lazyloading</em> necesitamos una última ayuda, de la mano de <code>FeatureModule</code>.</p><p>Esencialmente es una nuevo <em>store</em> supeditado al principal pero que no se define, y por tanto no pesa, hasta que no es necesario. En Autobot el <a href=\"https://github.com/AcademiaBinaria/autobot/tree/a-redux/src/app/car\" target=\"_blank\" rel=\"noopener\">CarModule</a> es un buen ejemplo de <em>store</em> cargado de forma dinámica como una <code>Feature</code>.</p><p>Ya tienes los conocimientos para gestionar de manera centralizada, auditable y predecible el estado de tus programas. El patrón Redux lucirá más cuanto más grande y compleja sea tu aplicación.</p><p>Continúa tu formación avanzada para crear aplicaciones <a href=\"../pwa-entre-la-web-y-las-apps-con-angular\">PWA, entre la web y las apps con Angular</a> y verás como aprendes a programar con Angular 7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"PWA, Entre la web y las apps con Angular","date":"2018-10-15T10:50:27.000Z","thumbnail":"/css/images/angular-b_pwa.png","_content":"\n![pwa-entre-la-web-y-las-apps-con-angular](/images/tutorial-angular-b_pwa.png)\n\nLas aplicaciones web han evolucionado desde el contenido estático al dinámico, luego al adaptable y ahora se acercan **progresivamente a la experiencia y rendimiento de aplicaciones nativas**. En Angular se incorporan esas capacidades desde el propio *framework*.\n \nMediante la librería `@ngular/pwa` dispondremos de todo lo necesario para ofrecer instalación en escritorio, actualizar la aplicación controladamente, recibir notificaciones del servidor e incluso mejoras en la caché de comunicaciones que pudieran permitir un funcionamiento *offline*.\n\n\n<!-- more -->\n\nPartiendo del código tal cómo quedó en [El patrón Redux con NgRx en Angular](../el-patron-redux-con-ngrx-en-angular/). Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/AutoBot/b-pwa](https://github.com/AcademiaBinaria/autobot/tree/b-pwa)\n\n\n# 1 Las herramientas de la librería PWA\n\nAprovechando las nuevas características del *Angular CLI 7* tenemos el comando `ng add @angular/pwa` que instala los paquetes y configura cualquier aplicación Angular conviertiéndola en una *PWA* básica.\n\nEstos son los actores y ficheros involucrados en este proceso tras la agregación del paquete `pwa`.\n\n- ServiceWorkerModule \n- ./angular.json { \"serviceWorker\": true } \n- ./ngsw-config.json \n- ./src/manifest.json\n- ./src/index.html\n- ./assets/icons/..\n\nCon todo instalado y configurado, querrás probar que funciona. Pero, a primera vista no ocurre nada. **Las características *PWA* están preparadas para funcionar en modo producción**. Así que lo primero será ejecutar el comando `ng build --prod` y lanzar un servidor sobre la carpeta de distribución recién creada.\n\nDe entre los nuevos ficheros que aparecen hay dos que debes conocer especialmente, **el *manifest* y el *service worker***.\n\n## 1.1 El manifest.json\n\nEste sencillo documento acompaña al `index.html` y le da indicaciones al navegador para que trate esta aplicación de menera especial. El fichero en sí contiene una *metadata* con textos descriptivos, colores e iconos para ser usados por el navegador y el sistema operativo y **ofrecerle al usuario que instale la *web* como una *app***. \n\nCasi todo es cosmético, pero merece la pena prestar especial atención a los iconos. Por defecto el *CLI* instala distintas versiones del logo ofical de Angular. Una forma cómoda de sustituirlo por los tuyos es usar la herramienta *ngx-pwa-icons* \n\n```json\n{\n  \"name\": \"Play with cars, learning Angular\",\n  \"short_name\": \"autobot\",\n  \"theme_color\": \"#1976d2\",\n  \"background_color\": \"#fafafa\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/autobot/?utm_source=homescreen\",\n  \"icons\": [\n    {\n      \"src\": \"assets/icons/icon-72x72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\"\n    },\n    ...\n   ]\n} \n```\n\n> Asegúrate de que en la `start_url` apunte a la página de inicio correcta y despliega en modo producción en un servidor seguro con *https*. Pruébalo varias veces en distintos navegadores y verás las distintas experiencias de instalación que ofrecen. \n\n## 1.2 El ngsw-worker.js\n\nEl otro gran fichero, y más importante para los desarrolladores, es **el configurador del *Service Worker***. Cuando un navegador ejecuta un *script* lo hace en *thread* dedicado a la interacción con el usuario y la manipulación del *DOM*. Normalmente ese hilo está muy ocupado, cuando no está saturado. La solución para agilizar los procesos está en usar más *threads*. Presentamos el *worker thread*. \n\nSe le llama así a los hilos creados a partir del principal y que le ayudan en tareas en segundo plano. Esos hilos tienen **prohibido el acceso al DOM, ni lo escuchan ni lo manipulan**. Pero a cambio están muy liberados para realizar cálculos complejos o llamadas a servicios. Se comunican con el *thread* principal a traves de un sencillo protocolo de eventos y subscripciones. \n\nUna de las tareas para las que más se les utiliza es para la gestión inteligente de las comunicaciones. Este fichero viene pre programado para realizar las siguientes **funciones PWA de Angular**: \n\n- Caché de contenido estático para funcionamiento offline \n- Caché de datos dinámicos para mayor velocidad \n- Gestión de instalaciones y versiones \n- Notificaciones de datos push \n\nTodo lo que hay que hacer es configurar estas funciones en un fichero, el `ngsw-config.json`, ya generado con valores por defecto. El *CLI*, durante el proceso de construcción en modo producción, copiará y manipulará los scripts y sus configuraciones. En ejecución, el `ServiceModule` registrará el script en el navegador, se subscribirá a sus eventos y ejecutará lo configurado por el programador en el *json*.   \n\n\n# 2 Comunicaciones y caché\n\n**El service worker de Angular** está especialmente diseñado para hacerse cargo de las comunicaciones con el servidor. Digamos que se convierte en un **interceptor transparente de todas las peticiones http**. Tanto de los ficheros propios de la aplicación como de las comunicaciones de datos. \n\n## 2.1 Descarga y actualización de la aplicación\n\nUna vez descargado el *index.html* con el contenido mínimo de Angular, diríamos que la aplicación se ha instalado y está lista para ejecutarse. A partir de ese momento el *ngsw* toma el control y puede pre descargar ficheros en segundo plano; de forma que **cuando sean reclamados ya estén disponibles** y mejoren la experiencia del usuario.\n\nRutinariamente el servicio se ocupará de consultar novedades en el servidor para mantener los ficheros locales actualizados. Todo ello se configura en la sección `assetGroups` del  `ngsw-config.json`.\n\n```json\n{\n \"assetGroups\": [\n    {\n      \"name\": \"app\",\n      \"installMode\": \"prefetch\",\n      \"updateMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/favicon.ico\",\n          \"/index.html\",\n          \"/*.css\",\n          \"/common*.js\",\n          \"/main*.js\",\n          \"/ngsw*.js\",\n          \"/woker*.js\",\n          \"/polyfills*.js\",\n          \"/runtime*.js\",\n          \"/fontawesome*\"\n        ]\n      }\n    }, {\n      \"name\": \"assets\",\n      \"installMode\": \"lazy\",\n      \"updateMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/assets/logo.png\",\n          \"/assets/icons/**\",\n          \"/*.js\"\n        ]\n      }\n    }],\n}\n```\n\n\n## 2.2 Caché inteligente de datos\n\nEl control de la **recepción de datos dinámicos** es la otra gran tarea del *service worker*. En este caso para tener una caché que acelere la presentación de datos o que incluso permita un funcionamiento *offline*.\n\nMediante **dos estrategias complementarias que tratan de mantener los datos actualizados y disponibles** en todo momento. En este caso configurandolo en los `dataGroups`. \n\n> La idea del *cache-first* es tener el dato ya listo para ser usado cuanto antes. Mientras que con *api-first* se pretende tener la versión más actual posible, y usar la última descargada en caso de problemas o desconexión total.\n\n```json\n{\n dataGroups\": [\n   {\n      \"name\": \"cache-first\",\n      \"urls\":[\n        \"https://academiabinaria.github.io/autobot/assets/data/cars.json\"        \n      ],\n      \"cacheConfig\":{\n        \"strategy\":\"performance\",\n        \"maxSize\":10,\n        \"maxAge\":\"1d\"\n      }\n    }\n    ,{\n      \"name\": \"api-first\",\n      \"urls\":[\n        \"https://api-base.herokuapp.com/api/priv/travels/**\"\n      ],\n      \"cacheConfig\":{\n        \"strategy\" : \"freshness\",\n        \"maxSize\": 100,\n        \"maxAge\" : \"1h\",\n        \"timeout\" : \"5s\"\n      }\n    }\n  ]\n}\n```\n\n\n# 3 Servicios\n\nLa librería `@angular/pwa` publica el módulo `ServiceWorkerModule` que contiene la lógica de registro del *service worker* y dos servicios programables con los que interactuar desde el código de tu aplicación Angular.\n\n## 3.1 Actualización con el SwUpdate\n\nCuando despliegas una nueva versión seguro que estás deseando que los usuarios disfruten cuanto antes de las mejoras o correcciones. Pero en las aplicaciones SPA resulta que **la actualización no es tan inmediata** como pudiera parecer. Al no forzar la recarga del documento en las navegaciones internas, el `index.html` puede residir sin cambios más de lo debido. Confiar en que lo hagan el navegador o el usuario puede no ser una opción.\n\nLa solución PWA es usar el `ServiceWorker` para detectar nuevas versiones en el servidor. Para ello utiliza un sistema propio de *hashes* que le permite comparar la versión descargada y la disponible en el servidor.** Cuando detecta un cambio emite un evento al que te puedes subscribir** usando el servicio `SwUpdate`. En ese momento puedes consultar al usuario, o forzar a lo bestia la recarga ;-).\n\n\n```typescript\nconstructor(private swUpdate: SwUpdate) {\n  if (this.swUpdate.isEnabled) {\n    this.swUpdate.available.subscribe((event: UpdateAvailableEvent) => {\n      if (confirm(`Do you want to update?`)) {\n        window.location.reload();\n      }\n    });\n  }\n}\n```\n\n## 3.2 Notificaciones con el SwPush\n\nUna caracterísitca de las *apps* nativas muy aprecia por los usuarios es la capacidad de mostrar **mensajes recibidos vía *push* por parte del servidor**. Pueden ser avisos, novedades o simple marketing. Pero lo importante es que lo recibe el sistema operativo, la aplicación no necesita estar en marcha y el mensaje se muestra de forma nativa.\n\n> Obviamente para ello hay que involucrar código de servidor y un servicio de mensajería de terceros. Pero la parte Angular del desarrollo es muy sencilla. Consite en registrar al usuario, que voluntariamente decide ser notificado, y luego escuchar los mensajes provenientes en forma de eventos. Todo ello reclamando una dependencia al servicio de notificaciones `constructor(private swPush: SwPush)`.\n\nYa tienes una web que se comporta progresivamente como una App nativa, una *Progressive Web Application*. Las mejoras en rendimiento y experiencia de usuario son recompensa más que suficiente para que le des una oportunidad a las **Angular PWA**.\n\nContinúa tu formación avanzada para crear aplicaciones con mayor [Velocidad y SEO con el SSR de Angular Universal](../velocidad-y-seo-con-el-ssr-de-angular-universal) y verás como aprendes a programar con Angular 7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-old-adv-b-PWA-Entre-la-web-y-las-apps-con-Angular.md","raw":"---\ntitle: PWA, Entre la web y las apps con Angular\npermalink: pwa-entre-la-web-y-las-apps-con-angular\ndate: 2018-10-15 12:50:27\ntags:  \n- Angular\n- Angular7\n- Angular6\n- Angular2\n- PWA\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-b_pwa.png\n---\n\n![pwa-entre-la-web-y-las-apps-con-angular](/images/tutorial-angular-b_pwa.png)\n\nLas aplicaciones web han evolucionado desde el contenido estático al dinámico, luego al adaptable y ahora se acercan **progresivamente a la experiencia y rendimiento de aplicaciones nativas**. En Angular se incorporan esas capacidades desde el propio *framework*.\n \nMediante la librería `@ngular/pwa` dispondremos de todo lo necesario para ofrecer instalación en escritorio, actualizar la aplicación controladamente, recibir notificaciones del servidor e incluso mejoras en la caché de comunicaciones que pudieran permitir un funcionamiento *offline*.\n\n\n<!-- more -->\n\nPartiendo del código tal cómo quedó en [El patrón Redux con NgRx en Angular](../el-patron-redux-con-ngrx-en-angular/). Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/AutoBot/b-pwa](https://github.com/AcademiaBinaria/autobot/tree/b-pwa)\n\n\n# 1 Las herramientas de la librería PWA\n\nAprovechando las nuevas características del *Angular CLI 7* tenemos el comando `ng add @angular/pwa` que instala los paquetes y configura cualquier aplicación Angular conviertiéndola en una *PWA* básica.\n\nEstos son los actores y ficheros involucrados en este proceso tras la agregación del paquete `pwa`.\n\n- ServiceWorkerModule \n- ./angular.json { \"serviceWorker\": true } \n- ./ngsw-config.json \n- ./src/manifest.json\n- ./src/index.html\n- ./assets/icons/..\n\nCon todo instalado y configurado, querrás probar que funciona. Pero, a primera vista no ocurre nada. **Las características *PWA* están preparadas para funcionar en modo producción**. Así que lo primero será ejecutar el comando `ng build --prod` y lanzar un servidor sobre la carpeta de distribución recién creada.\n\nDe entre los nuevos ficheros que aparecen hay dos que debes conocer especialmente, **el *manifest* y el *service worker***.\n\n## 1.1 El manifest.json\n\nEste sencillo documento acompaña al `index.html` y le da indicaciones al navegador para que trate esta aplicación de menera especial. El fichero en sí contiene una *metadata* con textos descriptivos, colores e iconos para ser usados por el navegador y el sistema operativo y **ofrecerle al usuario que instale la *web* como una *app***. \n\nCasi todo es cosmético, pero merece la pena prestar especial atención a los iconos. Por defecto el *CLI* instala distintas versiones del logo ofical de Angular. Una forma cómoda de sustituirlo por los tuyos es usar la herramienta *ngx-pwa-icons* \n\n```json\n{\n  \"name\": \"Play with cars, learning Angular\",\n  \"short_name\": \"autobot\",\n  \"theme_color\": \"#1976d2\",\n  \"background_color\": \"#fafafa\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/autobot/?utm_source=homescreen\",\n  \"icons\": [\n    {\n      \"src\": \"assets/icons/icon-72x72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\"\n    },\n    ...\n   ]\n} \n```\n\n> Asegúrate de que en la `start_url` apunte a la página de inicio correcta y despliega en modo producción en un servidor seguro con *https*. Pruébalo varias veces en distintos navegadores y verás las distintas experiencias de instalación que ofrecen. \n\n## 1.2 El ngsw-worker.js\n\nEl otro gran fichero, y más importante para los desarrolladores, es **el configurador del *Service Worker***. Cuando un navegador ejecuta un *script* lo hace en *thread* dedicado a la interacción con el usuario y la manipulación del *DOM*. Normalmente ese hilo está muy ocupado, cuando no está saturado. La solución para agilizar los procesos está en usar más *threads*. Presentamos el *worker thread*. \n\nSe le llama así a los hilos creados a partir del principal y que le ayudan en tareas en segundo plano. Esos hilos tienen **prohibido el acceso al DOM, ni lo escuchan ni lo manipulan**. Pero a cambio están muy liberados para realizar cálculos complejos o llamadas a servicios. Se comunican con el *thread* principal a traves de un sencillo protocolo de eventos y subscripciones. \n\nUna de las tareas para las que más se les utiliza es para la gestión inteligente de las comunicaciones. Este fichero viene pre programado para realizar las siguientes **funciones PWA de Angular**: \n\n- Caché de contenido estático para funcionamiento offline \n- Caché de datos dinámicos para mayor velocidad \n- Gestión de instalaciones y versiones \n- Notificaciones de datos push \n\nTodo lo que hay que hacer es configurar estas funciones en un fichero, el `ngsw-config.json`, ya generado con valores por defecto. El *CLI*, durante el proceso de construcción en modo producción, copiará y manipulará los scripts y sus configuraciones. En ejecución, el `ServiceModule` registrará el script en el navegador, se subscribirá a sus eventos y ejecutará lo configurado por el programador en el *json*.   \n\n\n# 2 Comunicaciones y caché\n\n**El service worker de Angular** está especialmente diseñado para hacerse cargo de las comunicaciones con el servidor. Digamos que se convierte en un **interceptor transparente de todas las peticiones http**. Tanto de los ficheros propios de la aplicación como de las comunicaciones de datos. \n\n## 2.1 Descarga y actualización de la aplicación\n\nUna vez descargado el *index.html* con el contenido mínimo de Angular, diríamos que la aplicación se ha instalado y está lista para ejecutarse. A partir de ese momento el *ngsw* toma el control y puede pre descargar ficheros en segundo plano; de forma que **cuando sean reclamados ya estén disponibles** y mejoren la experiencia del usuario.\n\nRutinariamente el servicio se ocupará de consultar novedades en el servidor para mantener los ficheros locales actualizados. Todo ello se configura en la sección `assetGroups` del  `ngsw-config.json`.\n\n```json\n{\n \"assetGroups\": [\n    {\n      \"name\": \"app\",\n      \"installMode\": \"prefetch\",\n      \"updateMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/favicon.ico\",\n          \"/index.html\",\n          \"/*.css\",\n          \"/common*.js\",\n          \"/main*.js\",\n          \"/ngsw*.js\",\n          \"/woker*.js\",\n          \"/polyfills*.js\",\n          \"/runtime*.js\",\n          \"/fontawesome*\"\n        ]\n      }\n    }, {\n      \"name\": \"assets\",\n      \"installMode\": \"lazy\",\n      \"updateMode\": \"prefetch\",\n      \"resources\": {\n        \"files\": [\n          \"/assets/logo.png\",\n          \"/assets/icons/**\",\n          \"/*.js\"\n        ]\n      }\n    }],\n}\n```\n\n\n## 2.2 Caché inteligente de datos\n\nEl control de la **recepción de datos dinámicos** es la otra gran tarea del *service worker*. En este caso para tener una caché que acelere la presentación de datos o que incluso permita un funcionamiento *offline*.\n\nMediante **dos estrategias complementarias que tratan de mantener los datos actualizados y disponibles** en todo momento. En este caso configurandolo en los `dataGroups`. \n\n> La idea del *cache-first* es tener el dato ya listo para ser usado cuanto antes. Mientras que con *api-first* se pretende tener la versión más actual posible, y usar la última descargada en caso de problemas o desconexión total.\n\n```json\n{\n dataGroups\": [\n   {\n      \"name\": \"cache-first\",\n      \"urls\":[\n        \"https://academiabinaria.github.io/autobot/assets/data/cars.json\"        \n      ],\n      \"cacheConfig\":{\n        \"strategy\":\"performance\",\n        \"maxSize\":10,\n        \"maxAge\":\"1d\"\n      }\n    }\n    ,{\n      \"name\": \"api-first\",\n      \"urls\":[\n        \"https://api-base.herokuapp.com/api/priv/travels/**\"\n      ],\n      \"cacheConfig\":{\n        \"strategy\" : \"freshness\",\n        \"maxSize\": 100,\n        \"maxAge\" : \"1h\",\n        \"timeout\" : \"5s\"\n      }\n    }\n  ]\n}\n```\n\n\n# 3 Servicios\n\nLa librería `@angular/pwa` publica el módulo `ServiceWorkerModule` que contiene la lógica de registro del *service worker* y dos servicios programables con los que interactuar desde el código de tu aplicación Angular.\n\n## 3.1 Actualización con el SwUpdate\n\nCuando despliegas una nueva versión seguro que estás deseando que los usuarios disfruten cuanto antes de las mejoras o correcciones. Pero en las aplicaciones SPA resulta que **la actualización no es tan inmediata** como pudiera parecer. Al no forzar la recarga del documento en las navegaciones internas, el `index.html` puede residir sin cambios más de lo debido. Confiar en que lo hagan el navegador o el usuario puede no ser una opción.\n\nLa solución PWA es usar el `ServiceWorker` para detectar nuevas versiones en el servidor. Para ello utiliza un sistema propio de *hashes* que le permite comparar la versión descargada y la disponible en el servidor.** Cuando detecta un cambio emite un evento al que te puedes subscribir** usando el servicio `SwUpdate`. En ese momento puedes consultar al usuario, o forzar a lo bestia la recarga ;-).\n\n\n```typescript\nconstructor(private swUpdate: SwUpdate) {\n  if (this.swUpdate.isEnabled) {\n    this.swUpdate.available.subscribe((event: UpdateAvailableEvent) => {\n      if (confirm(`Do you want to update?`)) {\n        window.location.reload();\n      }\n    });\n  }\n}\n```\n\n## 3.2 Notificaciones con el SwPush\n\nUna caracterísitca de las *apps* nativas muy aprecia por los usuarios es la capacidad de mostrar **mensajes recibidos vía *push* por parte del servidor**. Pueden ser avisos, novedades o simple marketing. Pero lo importante es que lo recibe el sistema operativo, la aplicación no necesita estar en marcha y el mensaje se muestra de forma nativa.\n\n> Obviamente para ello hay que involucrar código de servidor y un servicio de mensajería de terceros. Pero la parte Angular del desarrollo es muy sencilla. Consite en registrar al usuario, que voluntariamente decide ser notificado, y luego escuchar los mensajes provenientes en forma de eventos. Todo ello reclamando una dependencia al servicio de notificaciones `constructor(private swPush: SwPush)`.\n\nYa tienes una web que se comporta progresivamente como una App nativa, una *Progressive Web Application*. Las mejoras en rendimiento y experiencia de usuario son recompensa más que suficiente para que le des una oportunidad a las **Angular PWA**.\n\nContinúa tu formación avanzada para crear aplicaciones con mayor [Velocidad y SEO con el SSR de Angular Universal](../velocidad-y-seo-con-el-ssr-de-angular-universal) y verás como aprendes a programar con Angular 7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"pwa-entre-la-web-y-las-apps-con-angular","published":1,"updated":"2019-07-11T14:44:55.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4b6000n18s3vr3upkj1","content":"<p><img src=\"/images/tutorial-angular-b_pwa.png\" alt=\"pwa-entre-la-web-y-las-apps-con-angular\"></p><p>Las aplicaciones web han evolucionado desde el contenido estático al dinámico, luego al adaptable y ahora se acercan <strong>progresivamente a la experiencia y rendimiento de aplicaciones nativas</strong>. En Angular se incorporan esas capacidades desde el propio <em>framework</em>.</p><p>Mediante la librería <code>@ngular/pwa</code> dispondremos de todo lo necesario para ofrecer instalación en escritorio, actualizar la aplicación controladamente, recibir notificaciones del servidor e incluso mejoras en la caché de comunicaciones que pudieran permitir un funcionamiento <em>offline</em>.</p><a id=\"more\"></a><p>Partiendo del código tal cómo quedó en <a href=\"../el-patron-redux-con-ngrx-en-angular/\">El patrón Redux con NgRx en Angular</a>. Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/b-pwa\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/b-pwa</a></p></blockquote><h1 id=\"1-Las-herramientas-de-la-libreria-PWA\"><a href=\"#1-Las-herramientas-de-la-libreria-PWA\" class=\"headerlink\" title=\"1 Las herramientas de la librería PWA\"></a>1 Las herramientas de la librería PWA</h1><p>Aprovechando las nuevas características del <em>Angular CLI 7</em> tenemos el comando <code>ng add @angular/pwa</code> que instala los paquetes y configura cualquier aplicación Angular conviertiéndola en una <em>PWA</em> básica.</p><p>Estos son los actores y ficheros involucrados en este proceso tras la agregación del paquete <code>pwa</code>.</p><ul><li>ServiceWorkerModule</li><li>./angular.json { “serviceWorker”: true }</li><li>./ngsw-config.json</li><li>./src/manifest.json</li><li>./src/index.html</li><li>./assets/icons/..</li></ul><p>Con todo instalado y configurado, querrás probar que funciona. Pero, a primera vista no ocurre nada. <strong>Las características <em>PWA</em> están preparadas para funcionar en modo producción</strong>. Así que lo primero será ejecutar el comando <code>ng build --prod</code> y lanzar un servidor sobre la carpeta de distribución recién creada.</p><p>De entre los nuevos ficheros que aparecen hay dos que debes conocer especialmente, <strong>el <em>manifest</em> y el <em>service worker</em></strong>.</p><h2 id=\"1-1-El-manifest-json\"><a href=\"#1-1-El-manifest-json\" class=\"headerlink\" title=\"1.1 El manifest.json\"></a>1.1 El manifest.json</h2><p>Este sencillo documento acompaña al <code>index.html</code> y le da indicaciones al navegador para que trate esta aplicación de menera especial. El fichero en sí contiene una <em>metadata</em> con textos descriptivos, colores e iconos para ser usados por el navegador y el sistema operativo y <strong>ofrecerle al usuario que instale la <em>web</em> como una <em>app</em></strong>.</p><p>Casi todo es cosmético, pero merece la pena prestar especial atención a los iconos. Por defecto el <em>CLI</em> instala distintas versiones del logo ofical de Angular. Una forma cómoda de sustituirlo por los tuyos es usar la herramienta <em>ngx-pwa-icons</em></p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Play with cars, learning Angular\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"short_name\"</span>: <span class=\"string\">\"autobot\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"theme_color\"</span>: <span class=\"string\">\"#1976d2\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"background_color\"</span>: <span class=\"string\">\"#fafafa\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scope\"</span>: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"/autobot/?utm_source=homescreen\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"assets/icons/icon-72x72.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"72x72\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Asegúrate de que en la <code>start_url</code> apunte a la página de inicio correcta y despliega en modo producción en un servidor seguro con <em>https</em>. Pruébalo varias veces en distintos navegadores y verás las distintas experiencias de instalación que ofrecen.</p></blockquote><h2 id=\"1-2-El-ngsw-worker-js\"><a href=\"#1-2-El-ngsw-worker-js\" class=\"headerlink\" title=\"1.2 El ngsw-worker.js\"></a>1.2 El ngsw-worker.js</h2><p>El otro gran fichero, y más importante para los desarrolladores, es <strong>el configurador del <em>Service Worker</em></strong>. Cuando un navegador ejecuta un <em>script</em> lo hace en <em>thread</em> dedicado a la interacción con el usuario y la manipulación del <em>DOM</em>. Normalmente ese hilo está muy ocupado, cuando no está saturado. La solución para agilizar los procesos está en usar más <em>threads</em>. Presentamos el <em>worker thread</em>.</p><p>Se le llama así a los hilos creados a partir del principal y que le ayudan en tareas en segundo plano. Esos hilos tienen <strong>prohibido el acceso al DOM, ni lo escuchan ni lo manipulan</strong>. Pero a cambio están muy liberados para realizar cálculos complejos o llamadas a servicios. Se comunican con el <em>thread</em> principal a traves de un sencillo protocolo de eventos y subscripciones.</p><p>Una de las tareas para las que más se les utiliza es para la gestión inteligente de las comunicaciones. Este fichero viene pre programado para realizar las siguientes <strong>funciones PWA de Angular</strong>:</p><ul><li>Caché de contenido estático para funcionamiento offline</li><li>Caché de datos dinámicos para mayor velocidad</li><li>Gestión de instalaciones y versiones</li><li>Notificaciones de datos push</li></ul><p>Todo lo que hay que hacer es configurar estas funciones en un fichero, el <code>ngsw-config.json</code>, ya generado con valores por defecto. El <em>CLI</em>, durante el proceso de construcción en modo producción, copiará y manipulará los scripts y sus configuraciones. En ejecución, el <code>ServiceModule</code> registrará el script en el navegador, se subscribirá a sus eventos y ejecutará lo configurado por el programador en el <em>json</em>.</p><h1 id=\"2-Comunicaciones-y-cache\"><a href=\"#2-Comunicaciones-y-cache\" class=\"headerlink\" title=\"2 Comunicaciones y caché\"></a>2 Comunicaciones y caché</h1><p><strong>El service worker de Angular</strong> está especialmente diseñado para hacerse cargo de las comunicaciones con el servidor. Digamos que se convierte en un <strong>interceptor transparente de todas las peticiones http</strong>. Tanto de los ficheros propios de la aplicación como de las comunicaciones de datos.</p><h2 id=\"2-1-Descarga-y-actualizacion-de-la-aplicacion\"><a href=\"#2-1-Descarga-y-actualizacion-de-la-aplicacion\" class=\"headerlink\" title=\"2.1 Descarga y actualización de la aplicación\"></a>2.1 Descarga y actualización de la aplicación</h2><p>Una vez descargado el <em>index.html</em> con el contenido mínimo de Angular, diríamos que la aplicación se ha instalado y está lista para ejecutarse. A partir de ese momento el <em>ngsw</em> toma el control y puede pre descargar ficheros en segundo plano; de forma que <strong>cuando sean reclamados ya estén disponibles</strong> y mejoren la experiencia del usuario.</p><p>Rutinariamente el servicio se ocupará de consultar novedades en el servidor para mantener los ficheros locales actualizados. Todo ello se configura en la sección <code>assetGroups</code> del <code>ngsw-config.json</code>.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attr\">\"assetGroups\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"app\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"installMode\"</span>: <span class=\"string\">\"prefetch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"updateMode\"</span>: <span class=\"string\">\"prefetch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"resources\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"files\"</span>: [</span><br><span class=\"line\">          <span class=\"string\">\"/favicon.ico\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/index.html\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/*.css\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/common*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/main*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/ngsw*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/woker*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/polyfills*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/runtime*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/fontawesome*\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"assets\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"installMode\"</span>: <span class=\"string\">\"lazy\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"updateMode\"</span>: <span class=\"string\">\"prefetch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"resources\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"files\"</span>: [</span><br><span class=\"line\">          <span class=\"string\">\"/assets/logo.png\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/assets/icons/**\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/*.js\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Cache-inteligente-de-datos\"><a href=\"#2-2-Cache-inteligente-de-datos\" class=\"headerlink\" title=\"2.2 Caché inteligente de datos\"></a>2.2 Caché inteligente de datos</h2><p>El control de la <strong>recepción de datos dinámicos</strong> es la otra gran tarea del <em>service worker</em>. En este caso para tener una caché que acelere la presentación de datos o que incluso permita un funcionamiento <em>offline</em>.</p><p>Mediante <strong>dos estrategias complementarias que tratan de mantener los datos actualizados y disponibles</strong> en todo momento. En este caso configurandolo en los <code>dataGroups</code>.</p><blockquote><p>La idea del <em>cache-first</em> es tener el dato ya listo para ser usado cuanto antes. Mientras que con <em>api-first</em> se pretende tener la versión más actual posible, y usar la última descargada en caso de problemas o desconexión total.</p></blockquote><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> dataGroups\": [</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"cache-first\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"urls\"</span>:[</span><br><span class=\"line\">        <span class=\"string\">\"https://academiabinaria.github.io/autobot/assets/data/cars.json\"</span>        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"cacheConfig\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"strategy\"</span>:<span class=\"string\">\"performance\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"maxSize\"</span>:<span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"maxAge\"</span>:<span class=\"string\">\"1d\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ,&#123;</span><br><span class=\"line\">      \"name\": \"api-first\",</span><br><span class=\"line\">      \"urls\":[</span><br><span class=\"line\">        <span class=\"string\">\"https://api-base.herokuapp.com/api/priv/travels/**\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      \"cacheConfig\":&#123;</span><br><span class=\"line\">        \"strategy\" : \"freshness\",</span><br><span class=\"line\">        \"maxSize\": 100,</span><br><span class=\"line\">        \"maxAge\" : \"1h\",</span><br><span class=\"line\">        \"timeout\" : \"5s\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"3-Servicios\"><a href=\"#3-Servicios\" class=\"headerlink\" title=\"3 Servicios\"></a>3 Servicios</h1><p>La librería <code>@angular/pwa</code> publica el módulo <code>ServiceWorkerModule</code> que contiene la lógica de registro del <em>service worker</em> y dos servicios programables con los que interactuar desde el código de tu aplicación Angular.</p><h2 id=\"3-1-Actualizacion-con-el-SwUpdate\"><a href=\"#3-1-Actualizacion-con-el-SwUpdate\" class=\"headerlink\" title=\"3.1 Actualización con el SwUpdate\"></a>3.1 Actualización con el SwUpdate</h2><p>Cuando despliegas una nueva versión seguro que estás deseando que los usuarios disfruten cuanto antes de las mejoras o correcciones. Pero en las aplicaciones SPA resulta que <strong>la actualización no es tan inmediata</strong> como pudiera parecer. Al no forzar la recarga del documento en las navegaciones internas, el <code>index.html</code> puede residir sin cambios más de lo debido. Confiar en que lo hagan el navegador o el usuario puede no ser una opción.</p><p>La solución PWA es usar el <code>ServiceWorker</code> para detectar nuevas versiones en el servidor. Para ello utiliza un sistema propio de <em>hashes</em> que le permite comparar la versión descargada y la disponible en el servidor.** Cuando detecta un cambio emite un evento al que te puedes subscribir** usando el servicio <code>SwUpdate</code>. En ese momento puedes consultar al usuario, o forzar a lo bestia la recarga ;-).</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> swUpdate: SwUpdate</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.swUpdate.isEnabled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.swUpdate.available.subscribe(<span class=\"function\">(<span class=\"params\">event: UpdateAvailableEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (confirm(<span class=\"string\">`Do you want to update?`</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.reload();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"3-2-Notificaciones-con-el-SwPush\"><a href=\"#3-2-Notificaciones-con-el-SwPush\" class=\"headerlink\" title=\"3.2 Notificaciones con el SwPush\"></a>3.2 Notificaciones con el SwPush</h2><p>Una caracterísitca de las <em>apps</em> nativas muy aprecia por los usuarios es la capacidad de mostrar <strong>mensajes recibidos vía <em>push</em> por parte del servidor</strong>. Pueden ser avisos, novedades o simple marketing. Pero lo importante es que lo recibe el sistema operativo, la aplicación no necesita estar en marcha y el mensaje se muestra de forma nativa.</p><blockquote><p>Obviamente para ello hay que involucrar código de servidor y un servicio de mensajería de terceros. Pero la parte Angular del desarrollo es muy sencilla. Consite en registrar al usuario, que voluntariamente decide ser notificado, y luego escuchar los mensajes provenientes en forma de eventos. Todo ello reclamando una dependencia al servicio de notificaciones <code>constructor(private swPush: SwPush)</code>.</p></blockquote><p>Ya tienes una web que se comporta progresivamente como una App nativa, una <em>Progressive Web Application</em>. Las mejoras en rendimiento y experiencia de usuario son recompensa más que suficiente para que le des una oportunidad a las <strong>Angular PWA</strong>.</p><p>Continúa tu formación avanzada para crear aplicaciones con mayor <a href=\"../velocidad-y-seo-con-el-ssr-de-angular-universal\">Velocidad y SEO con el SSR de Angular Universal</a> y verás como aprendes a programar con Angular 7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-b_pwa.png\" alt=\"pwa-entre-la-web-y-las-apps-con-angular\"></p><p>Las aplicaciones web han evolucionado desde el contenido estático al dinámico, luego al adaptable y ahora se acercan <strong>progresivamente a la experiencia y rendimiento de aplicaciones nativas</strong>. En Angular se incorporan esas capacidades desde el propio <em>framework</em>.</p><p>Mediante la librería <code>@ngular/pwa</code> dispondremos de todo lo necesario para ofrecer instalación en escritorio, actualizar la aplicación controladamente, recibir notificaciones del servidor e incluso mejoras en la caché de comunicaciones que pudieran permitir un funcionamiento <em>offline</em>.</p>","more":"<p>Partiendo del código tal cómo quedó en <a href=\"../el-patron-redux-con-ngrx-en-angular/\">El patrón Redux con NgRx en Angular</a>. Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/b-pwa\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/b-pwa</a></p></blockquote><h1 id=\"1-Las-herramientas-de-la-libreria-PWA\"><a href=\"#1-Las-herramientas-de-la-libreria-PWA\" class=\"headerlink\" title=\"1 Las herramientas de la librería PWA\"></a>1 Las herramientas de la librería PWA</h1><p>Aprovechando las nuevas características del <em>Angular CLI 7</em> tenemos el comando <code>ng add @angular/pwa</code> que instala los paquetes y configura cualquier aplicación Angular conviertiéndola en una <em>PWA</em> básica.</p><p>Estos son los actores y ficheros involucrados en este proceso tras la agregación del paquete <code>pwa</code>.</p><ul><li>ServiceWorkerModule</li><li>./angular.json { “serviceWorker”: true }</li><li>./ngsw-config.json</li><li>./src/manifest.json</li><li>./src/index.html</li><li>./assets/icons/..</li></ul><p>Con todo instalado y configurado, querrás probar que funciona. Pero, a primera vista no ocurre nada. <strong>Las características <em>PWA</em> están preparadas para funcionar en modo producción</strong>. Así que lo primero será ejecutar el comando <code>ng build --prod</code> y lanzar un servidor sobre la carpeta de distribución recién creada.</p><p>De entre los nuevos ficheros que aparecen hay dos que debes conocer especialmente, <strong>el <em>manifest</em> y el <em>service worker</em></strong>.</p><h2 id=\"1-1-El-manifest-json\"><a href=\"#1-1-El-manifest-json\" class=\"headerlink\" title=\"1.1 El manifest.json\"></a>1.1 El manifest.json</h2><p>Este sencillo documento acompaña al <code>index.html</code> y le da indicaciones al navegador para que trate esta aplicación de menera especial. El fichero en sí contiene una <em>metadata</em> con textos descriptivos, colores e iconos para ser usados por el navegador y el sistema operativo y <strong>ofrecerle al usuario que instale la <em>web</em> como una <em>app</em></strong>.</p><p>Casi todo es cosmético, pero merece la pena prestar especial atención a los iconos. Por defecto el <em>CLI</em> instala distintas versiones del logo ofical de Angular. Una forma cómoda de sustituirlo por los tuyos es usar la herramienta <em>ngx-pwa-icons</em></p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Play with cars, learning Angular\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"short_name\"</span>: <span class=\"string\">\"autobot\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"theme_color\"</span>: <span class=\"string\">\"#1976d2\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"background_color\"</span>: <span class=\"string\">\"#fafafa\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scope\"</span>: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"/autobot/?utm_source=homescreen\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"assets/icons/icon-72x72.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"72x72\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Asegúrate de que en la <code>start_url</code> apunte a la página de inicio correcta y despliega en modo producción en un servidor seguro con <em>https</em>. Pruébalo varias veces en distintos navegadores y verás las distintas experiencias de instalación que ofrecen.</p></blockquote><h2 id=\"1-2-El-ngsw-worker-js\"><a href=\"#1-2-El-ngsw-worker-js\" class=\"headerlink\" title=\"1.2 El ngsw-worker.js\"></a>1.2 El ngsw-worker.js</h2><p>El otro gran fichero, y más importante para los desarrolladores, es <strong>el configurador del <em>Service Worker</em></strong>. Cuando un navegador ejecuta un <em>script</em> lo hace en <em>thread</em> dedicado a la interacción con el usuario y la manipulación del <em>DOM</em>. Normalmente ese hilo está muy ocupado, cuando no está saturado. La solución para agilizar los procesos está en usar más <em>threads</em>. Presentamos el <em>worker thread</em>.</p><p>Se le llama así a los hilos creados a partir del principal y que le ayudan en tareas en segundo plano. Esos hilos tienen <strong>prohibido el acceso al DOM, ni lo escuchan ni lo manipulan</strong>. Pero a cambio están muy liberados para realizar cálculos complejos o llamadas a servicios. Se comunican con el <em>thread</em> principal a traves de un sencillo protocolo de eventos y subscripciones.</p><p>Una de las tareas para las que más se les utiliza es para la gestión inteligente de las comunicaciones. Este fichero viene pre programado para realizar las siguientes <strong>funciones PWA de Angular</strong>:</p><ul><li>Caché de contenido estático para funcionamiento offline</li><li>Caché de datos dinámicos para mayor velocidad</li><li>Gestión de instalaciones y versiones</li><li>Notificaciones de datos push</li></ul><p>Todo lo que hay que hacer es configurar estas funciones en un fichero, el <code>ngsw-config.json</code>, ya generado con valores por defecto. El <em>CLI</em>, durante el proceso de construcción en modo producción, copiará y manipulará los scripts y sus configuraciones. En ejecución, el <code>ServiceModule</code> registrará el script en el navegador, se subscribirá a sus eventos y ejecutará lo configurado por el programador en el <em>json</em>.</p><h1 id=\"2-Comunicaciones-y-cache\"><a href=\"#2-Comunicaciones-y-cache\" class=\"headerlink\" title=\"2 Comunicaciones y caché\"></a>2 Comunicaciones y caché</h1><p><strong>El service worker de Angular</strong> está especialmente diseñado para hacerse cargo de las comunicaciones con el servidor. Digamos que se convierte en un <strong>interceptor transparente de todas las peticiones http</strong>. Tanto de los ficheros propios de la aplicación como de las comunicaciones de datos.</p><h2 id=\"2-1-Descarga-y-actualizacion-de-la-aplicacion\"><a href=\"#2-1-Descarga-y-actualizacion-de-la-aplicacion\" class=\"headerlink\" title=\"2.1 Descarga y actualización de la aplicación\"></a>2.1 Descarga y actualización de la aplicación</h2><p>Una vez descargado el <em>index.html</em> con el contenido mínimo de Angular, diríamos que la aplicación se ha instalado y está lista para ejecutarse. A partir de ese momento el <em>ngsw</em> toma el control y puede pre descargar ficheros en segundo plano; de forma que <strong>cuando sean reclamados ya estén disponibles</strong> y mejoren la experiencia del usuario.</p><p>Rutinariamente el servicio se ocupará de consultar novedades en el servidor para mantener los ficheros locales actualizados. Todo ello se configura en la sección <code>assetGroups</code> del <code>ngsw-config.json</code>.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"attr\">\"assetGroups\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"app\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"installMode\"</span>: <span class=\"string\">\"prefetch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"updateMode\"</span>: <span class=\"string\">\"prefetch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"resources\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"files\"</span>: [</span><br><span class=\"line\">          <span class=\"string\">\"/favicon.ico\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/index.html\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/*.css\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/common*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/main*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/ngsw*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/woker*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/polyfills*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/runtime*.js\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/fontawesome*\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"assets\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"installMode\"</span>: <span class=\"string\">\"lazy\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"updateMode\"</span>: <span class=\"string\">\"prefetch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"resources\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"files\"</span>: [</span><br><span class=\"line\">          <span class=\"string\">\"/assets/logo.png\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/assets/icons/**\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"/*.js\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Cache-inteligente-de-datos\"><a href=\"#2-2-Cache-inteligente-de-datos\" class=\"headerlink\" title=\"2.2 Caché inteligente de datos\"></a>2.2 Caché inteligente de datos</h2><p>El control de la <strong>recepción de datos dinámicos</strong> es la otra gran tarea del <em>service worker</em>. En este caso para tener una caché que acelere la presentación de datos o que incluso permita un funcionamiento <em>offline</em>.</p><p>Mediante <strong>dos estrategias complementarias que tratan de mantener los datos actualizados y disponibles</strong> en todo momento. En este caso configurandolo en los <code>dataGroups</code>.</p><blockquote><p>La idea del <em>cache-first</em> es tener el dato ya listo para ser usado cuanto antes. Mientras que con <em>api-first</em> se pretende tener la versión más actual posible, y usar la última descargada en caso de problemas o desconexión total.</p></blockquote><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> dataGroups\": [</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"cache-first\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"urls\"</span>:[</span><br><span class=\"line\">        <span class=\"string\">\"https://academiabinaria.github.io/autobot/assets/data/cars.json\"</span>        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"cacheConfig\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"strategy\"</span>:<span class=\"string\">\"performance\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"maxSize\"</span>:<span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"maxAge\"</span>:<span class=\"string\">\"1d\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ,&#123;</span><br><span class=\"line\">      \"name\": \"api-first\",</span><br><span class=\"line\">      \"urls\":[</span><br><span class=\"line\">        <span class=\"string\">\"https://api-base.herokuapp.com/api/priv/travels/**\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      \"cacheConfig\":&#123;</span><br><span class=\"line\">        \"strategy\" : \"freshness\",</span><br><span class=\"line\">        \"maxSize\": 100,</span><br><span class=\"line\">        \"maxAge\" : \"1h\",</span><br><span class=\"line\">        \"timeout\" : \"5s\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"3-Servicios\"><a href=\"#3-Servicios\" class=\"headerlink\" title=\"3 Servicios\"></a>3 Servicios</h1><p>La librería <code>@angular/pwa</code> publica el módulo <code>ServiceWorkerModule</code> que contiene la lógica de registro del <em>service worker</em> y dos servicios programables con los que interactuar desde el código de tu aplicación Angular.</p><h2 id=\"3-1-Actualizacion-con-el-SwUpdate\"><a href=\"#3-1-Actualizacion-con-el-SwUpdate\" class=\"headerlink\" title=\"3.1 Actualización con el SwUpdate\"></a>3.1 Actualización con el SwUpdate</h2><p>Cuando despliegas una nueva versión seguro que estás deseando que los usuarios disfruten cuanto antes de las mejoras o correcciones. Pero en las aplicaciones SPA resulta que <strong>la actualización no es tan inmediata</strong> como pudiera parecer. Al no forzar la recarga del documento en las navegaciones internas, el <code>index.html</code> puede residir sin cambios más de lo debido. Confiar en que lo hagan el navegador o el usuario puede no ser una opción.</p><p>La solución PWA es usar el <code>ServiceWorker</code> para detectar nuevas versiones en el servidor. Para ello utiliza un sistema propio de <em>hashes</em> que le permite comparar la versión descargada y la disponible en el servidor.** Cuando detecta un cambio emite un evento al que te puedes subscribir** usando el servicio <code>SwUpdate</code>. En ese momento puedes consultar al usuario, o forzar a lo bestia la recarga ;-).</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> swUpdate: SwUpdate</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.swUpdate.isEnabled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.swUpdate.available.subscribe(<span class=\"function\">(<span class=\"params\">event: UpdateAvailableEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (confirm(<span class=\"string\">`Do you want to update?`</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.reload();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"3-2-Notificaciones-con-el-SwPush\"><a href=\"#3-2-Notificaciones-con-el-SwPush\" class=\"headerlink\" title=\"3.2 Notificaciones con el SwPush\"></a>3.2 Notificaciones con el SwPush</h2><p>Una caracterísitca de las <em>apps</em> nativas muy aprecia por los usuarios es la capacidad de mostrar <strong>mensajes recibidos vía <em>push</em> por parte del servidor</strong>. Pueden ser avisos, novedades o simple marketing. Pero lo importante es que lo recibe el sistema operativo, la aplicación no necesita estar en marcha y el mensaje se muestra de forma nativa.</p><blockquote><p>Obviamente para ello hay que involucrar código de servidor y un servicio de mensajería de terceros. Pero la parte Angular del desarrollo es muy sencilla. Consite en registrar al usuario, que voluntariamente decide ser notificado, y luego escuchar los mensajes provenientes en forma de eventos. Todo ello reclamando una dependencia al servicio de notificaciones <code>constructor(private swPush: SwPush)</code>.</p></blockquote><p>Ya tienes una web que se comporta progresivamente como una App nativa, una <em>Progressive Web Application</em>. Las mejoras en rendimiento y experiencia de usuario son recompensa más que suficiente para que le des una oportunidad a las <strong>Angular PWA</strong>.</p><p>Continúa tu formación avanzada para crear aplicaciones con mayor <a href=\"../velocidad-y-seo-con-el-ssr-de-angular-universal\">Velocidad y SEO con el SSR de Angular Universal</a> y verás como aprendes a programar con Angular 7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Hola Angular CLI","date":"2019-01-09T11:54:00.000Z","thumbnail":"/css/images/angular-0_cli.png","_content":"\n![hola-angular-cli](/images/tutorial-angular-0_cli.png)\n\n**Angular en su versión 7 es la plataforma perfecta para el desarrollo** profesional de aplicaciones modernas. **El Angular CLI es la herramienta** adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.\n\n<!-- more -->\n\nEl comúnmente conocido como **AngularCLI** o _angular cli_ o _angular-cli_ o _ CLI a secas_ es la herramienta de línea de comandos estándar para **crear, depurar y publicar aplicaciones Angular**. En su actual **versión 7** es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/0-hello](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Instalación de Angular CLI 7\n\nAngular es una plataforma de desarrollo dogmática y llave en mano. Para empezar, como en casi cualquier desarrollo **necesitarás [NodeJS](https://nodejs.org/en/) y su manejador de de paquetes _npm_**. Tenerlos actualizados es un mandamiento básico para un desarrollador web. Comprueba tu versión con el siguiente comando:\n\n```console\nnode -v\n```\n\nEmpieza con una **instalación global** que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.\n\nInstrucciones para instalar Angular CLI.\n\n```console\n$ npm i -g @angular/cli@latest\n$ ng version\n$ ng help\n$ ng new --help\n```\n\n# 2. Crear y ejecutar una aplicación Angular 7\n\nUna vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será `ng new` que te va a **generar toda una aplicación funcional** y las configuraciones necesarias para su depuración, pruebas y ejecución.\n\nComo novedad, en las últimas versiones, el CLI te preguntará por algunas opciones para crear tu aplicación. Eso es porque no todos los desarrollos son iguales. Se puede configurar el tipo, el estilo y muchas más cosas, tanto de forma interactiva como mediante opciones en línea de comandos.\n\nLo más habitual es usar la configuración que viene por defecto, pero también se pueden crear soluciones a medida. Te muestro unos ejemplos para que pruebes y te familiarices con la herramienta. Para más información mira la documentación del comando [ng new](https://angular.io/cli/new).\n\n## 2.1 Normal\n\n```console\nng new normal\ncd normal\nnpm start\n```\n\n## 2.2 Minimalista\n\n```console\nng new minimalista -s -S -t\ncd minimalista\nnpm start\n```\n\n## 2.3 Profesional\n\n```console\nng new profesional -p acme --routing true\ncd profesional\nnpm start\n```\n\n## 2.4 Empresarial\n\n```console\nng new empresarial --create-application false\ncd empresarial\nng generate application compras -p acme --routing true\nnpm start\n```\n\nUna vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de _npm_ para el arranque de cualquier aplicación: `npm start`. Si todo va bien, en unos segundo podrás visitar [http://localhost:4000](http://localhost:4000) para ver en marcha la aplicación. Lo veremos con más detalle en el apartado de configuración.\n\n> ejemplo: La aplicación que sirve de ejemplo a este tutorial fue creada con este comando:\n\n```console\nng new angular-basic --routing true -s -S\n```\n\n# 3. Estructura de una aplicación Angular\n\nUna vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay **una enorme cantidad de ficheros y carpetas**, las buenas son que como verás, casi todo es **configuración e infraestructura**.\n\n## 3.1 Visual Studio Code\n\nPara ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo [VSCode](https://code.visualstudio.com/). Es un **gran editor, gratuito y multiplataforma**. Viene con un terminal integrado y puedes mejorarlo instalando extensiones desde una galería del propio editor.\n\nTe recomiendo instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con _Angular_, se llama [Angular Essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials). Con eso y el [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) verás _Angular en colores_.\n\n## 3.2 Carpetas y Ficheros principales\n\nVolviendo a la **estructura de ficheros y carpetas** te encontrarás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones `.ts`. Son para ficheros [_TypeScript_](https://www.typescriptlang.org/), una evolución del _JavaScript_ con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:\n\n- **angular.json** _: configuración del propio CLI. La madre de todos los configuradores_\n- **package.json** _: dependencias de librerías y scripts_\n- **src/** _: la carpeta donde están los archivos fuentes_\n  - **index.html** _: un fichero HTML índice estándar_\n  - **main.ts** _: fichero TypeScript de arranque de la aplicación_\n  - **app/** _: la carpeta con el código específico de tu aplicación_\n    - **app.module.ts** _: la aplicación es un árbol de módulos, y este es su raíz_\n    - **app.component.ts** _: la página es un árbol de componentes, y este es su raíz_\n    - **app.component.html** _: el componente tiene una parte visual, esta es su vista_\n\nEcha un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.\n\n# 4. Edición\n\nAngular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de **recargar la aplicación en caliente** en cuanto guardas tu trabajo como programador. En esta última versión, la 7, se ha mejorado el proceso y es realmente rápido.\n\nPara probarlo sólo tienes que dejar arrancada la aplicación con el comando `npm start`; **cambiar un fichero de código y comprobar el resultado** en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso _hola mundo_.\n\n## 4.1 Hola Mundo\n\nAbre el fichero `app.component.ts` y busca dentro de él una clase llamada `AppComponent`. Encontrarás que tiene una propiedad `title`. Asígnale el saludo de rigor: `title = 'actibot: hello world ;-)';`. Guarda y comprueba cómo tu navegador **se habrá actualizado automáticamente**.\n\nToda **esta magia depende de una cadena de comandos** que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a [_WebPack_](https://webpack.github.io/), un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.\n\n## 4.2 npm start\n\nEsta es una lista no exhaustiva de lo que sucede.\n\n1. npm start\n2. ng serve\n3. webpack server en http://localhost:4270\n   1. vigilancia de cambios sobre la carpeta src/\n   2. live reload\n   3. compilado de la aplicación\n   4. recarga del navegador\n\nCambia a tu antojo el `app.component.ts` o su hermano `app.component.html` y comprueba los cambios de manera inmediata en tu navegador.\n\n# 5. Configuración\n\nEl CLI 7 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el `package.json` y agregar librerías de terceros.\n\n## 5.1 Package.json\n\nEl `package.json` es el fichero estándar de _npm_ donde se almacenan las **dependencias de terceros**. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de _Angular 7_. Y también las herramientas que necesita el programador, por ejemplo el propio _AngularCLI_;\n\n```json\n{\n  \"dependencies\": {\n    \"@angular/core\": \"^7.2.0\"\n  },\n  \"devDependencies\": {\n    \"@angular/cli\": \"7.2.0\"\n  }\n}\n```\n\nOtro uso del `package.json` es servir de **contenedor de scripts** para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar `npm start` ejecutará el contenido asignado en el fichero _json_, originalmente `ng serve`. Esto lanza el servidor de pruebas con sus opciones por defecto.\n\nPero el **comando [ng serve](https://angular.io/cli/serve)** admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.\n\nOtras configuraciones en producción\n\n```json\n{\n  \"start\": \"ng serve --aot -o --port 4270\"\n}\n```\n\n## 5.2 Estilos y librerías de terceros\n\nLas librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos **algún que otro producto de terceros**. Ya sean utilidades como _[date-fns](https://date-fns.org/)_, librerías gráficas como _[chart.js](http://www.chartjs.org/)_ o la aplicación de estilos y componentes visuales de _frameworks como Bootstrap o MaterialDesign_. Pero todos se instalan de igual forma. Descargándolos con _npm_ y adjuntándolos en el `angular.json`.\n\n> En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama _[MiniCSS](https://minicss.org/)_ y es apropiada para prototipos, pruebas o pequeños proyectos.\n\nSe descargan e instalan de manera estándar.\n\n```console\nnpm install mini.css --save\n```\n\nPara que se incluyan en la distribución hay que ir a la configuración del _CLI_. Entonces se agrega dentro del fichero `.angular.json` a la colección de _styles_ o de _scripts_ que corresponda.\n\n```json\n{\n  \"styles\": [\"src/styles.css\", \"./node_modules/mini.css/dist/mini-default.min.css\"]\n}\n```\n\nEstas colecciones de archivos los usa el _cli_ a través de _webpack_ para incluirlos **minificados y concatenados en un fichero _bundle_ sustituyendo a las clásicas etiquetas html**.Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. De esta forma el fichero `index.html` apenas tendrás que tocarlo, salvo para algunas etiquetas de meta información.\n\n```html\n<meta name=\"description\" content=\"A sample project for learning Angular ;-)\" />\n<meta name=\"keywords\" content=\"Angular Sample Tutorial Ejemplo\" />\n<meta name=\"author\" content=\"Alberto Basalo\" />\n```\n\nUna cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo _MiniCSS_.\n\n## 5.3 Environments\n\nLa carpeta `environments/` contiene dos ficheros, y puede contener más, para cada entorno de distribución necesario. En código siempre importaremos el fichero base, pero durante la compilación el CLI lo sustituirá por el adecuado.\n\n```typescript\ntitle = environment.appName + 'hello world ;-)';\n```\n\n## 5.4 Assets\n\nLos ficheros de la carpeta `assets/` se copian tal cual al despliegue. Es un buen lugar para logos, imágenes y ficheros de datos estáticos.\n\nPor ejemplo, en el `app.component.html` he sustituido la imagen incrustada del Angular con un logo propio.\n\n```html\n<img width=\"100\" src=\"./assets/logo.png\" />\n```\n\n# 6. Angular 7, el CLI 7 y su ecosistema\n\nAlgunos consejos y herramientas útiles que rodean al mundo Angular.\n\nPero si la línea de comandos te suena muy antigua y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto [Angular Console](https://angularconsole.com/) te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.\n\nUna mejora digna de mención es la capacidad de presupuestar tamaños de los ficheros generados. De esa forma podemos controlar el peso y tiempo de descarga de la aplicación.\n\nPara garantizar la limpieza del código conviene usar herramientas como [Prettier](https://prettier.io/) y configurarlas para su compatibilidad con Angular.\n\nLos últimos toques antes de publicar pueden incluir el _script de analytics_ en el `index.html` y ajustes de retro-compatibilidad en el fichero `polyfills.ts`. Luego un comando y listo para publicar en _github pages_.\n\n> Te recomiendo que te familiarices y uses mucho estos _scripts_ en el `package.json` para poder lanzarlos más tarde.\n\n```json\n{\n  \"scripts\": {\n    \"build:prod\": \"ng build --prod\",\n    \"build:pub\": \"ng build --prod --output-path docs --base-href https://academiabinaria.github.io/angular-basic/\",\n    \"e2e\": \"ng e2e\",\n    \"http-server\": \"http-server ./dist/angular-basic/ -c-1 -p4271 -a localhost -o\",\n    \"lint\": \"ng lint\",\n    \"ng\": \"ng\",\n    \"pub\": \"npm run build:pub && npm run push\",\n    \"push\": \"git add * && git commit -m 'pub' && git push\",\n    \"start:prod\": \"npm run build:prod && npm run http-server\",\n    \"start\": \"ng serve --aot -o --port 4270\",\n    \"test\": \"ng test\"\n  }\n}\n```\n\nComprueba las ejecuciones de los distintos _scripts_. Con `npm start` no se generan ficheros físicos. Todos es en memoria para mayor velocidad de re-compilación mientras desarrollas. En cambio `npm run build:prod` creará una carpeta `./dist/angular-basic` en la que dejará los archivos necesarios para ejecución. Por último `npm run pub` los prepara para enviar compilados a la carpeta estándar `./docs` listos para publicarse en las _github pages_.\n\nOtros enlaces de interés sobre el ecosistema Angular.\n\n- [Extensiones Esenciales](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials)\n- [Prettier](https://prettier.io/)\n- [Angular Console](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console)\n- [Angular Material](https://material.angular.io/)\n- [Bootstrap](https://ng-bootstrap.github.io/#/home)\n- [Augury](https://augury.rangle.io/)\n- [Apollo GraphQL](https://www.apollographql.com/docs/)\n- [Ionic](https://ionicframework.com/)\n- [Angular Console](https://angularconsole.com/)\n\nPara complementar tu conocimiento te recomiendo la [documentación de Angular/CLI](https://angular.io/cli) y este artículo avanzado que trata la configuración del CLI en profundidad [Angular CLI under the hood ](https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01)\n\nEsto es sólo el principio, _Angular CLI 7_ puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 7. En el próximo artículo crearemos una [Base para una aplicación Angular](../base-aplicacion-angular/).\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng_0-Hola-Angular-CLI.md","raw":"---\ntitle: Hola Angular CLI\npermalink: hola-angular-cli\ndate: 2019-01-09 12:54:00\ntags:\n  - Angular\n  - CLI\n  - Tutorial\n  - Introducción\n  - Angular7\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-0_cli.png\n---\n\n![hola-angular-cli](/images/tutorial-angular-0_cli.png)\n\n**Angular en su versión 7 es la plataforma perfecta para el desarrollo** profesional de aplicaciones modernas. **El Angular CLI es la herramienta** adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.\n\n<!-- more -->\n\nEl comúnmente conocido como **AngularCLI** o _angular cli_ o _angular-cli_ o _ CLI a secas_ es la herramienta de línea de comandos estándar para **crear, depurar y publicar aplicaciones Angular**. En su actual **versión 7** es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/0-hello](https://github.com/AcademiaBinaria/angular-basic/)\n\n# 1. Instalación de Angular CLI 7\n\nAngular es una plataforma de desarrollo dogmática y llave en mano. Para empezar, como en casi cualquier desarrollo **necesitarás [NodeJS](https://nodejs.org/en/) y su manejador de de paquetes _npm_**. Tenerlos actualizados es un mandamiento básico para un desarrollador web. Comprueba tu versión con el siguiente comando:\n\n```console\nnode -v\n```\n\nEmpieza con una **instalación global** que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.\n\nInstrucciones para instalar Angular CLI.\n\n```console\n$ npm i -g @angular/cli@latest\n$ ng version\n$ ng help\n$ ng new --help\n```\n\n# 2. Crear y ejecutar una aplicación Angular 7\n\nUna vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será `ng new` que te va a **generar toda una aplicación funcional** y las configuraciones necesarias para su depuración, pruebas y ejecución.\n\nComo novedad, en las últimas versiones, el CLI te preguntará por algunas opciones para crear tu aplicación. Eso es porque no todos los desarrollos son iguales. Se puede configurar el tipo, el estilo y muchas más cosas, tanto de forma interactiva como mediante opciones en línea de comandos.\n\nLo más habitual es usar la configuración que viene por defecto, pero también se pueden crear soluciones a medida. Te muestro unos ejemplos para que pruebes y te familiarices con la herramienta. Para más información mira la documentación del comando [ng new](https://angular.io/cli/new).\n\n## 2.1 Normal\n\n```console\nng new normal\ncd normal\nnpm start\n```\n\n## 2.2 Minimalista\n\n```console\nng new minimalista -s -S -t\ncd minimalista\nnpm start\n```\n\n## 2.3 Profesional\n\n```console\nng new profesional -p acme --routing true\ncd profesional\nnpm start\n```\n\n## 2.4 Empresarial\n\n```console\nng new empresarial --create-application false\ncd empresarial\nng generate application compras -p acme --routing true\nnpm start\n```\n\nUna vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de _npm_ para el arranque de cualquier aplicación: `npm start`. Si todo va bien, en unos segundo podrás visitar [http://localhost:4000](http://localhost:4000) para ver en marcha la aplicación. Lo veremos con más detalle en el apartado de configuración.\n\n> ejemplo: La aplicación que sirve de ejemplo a este tutorial fue creada con este comando:\n\n```console\nng new angular-basic --routing true -s -S\n```\n\n# 3. Estructura de una aplicación Angular\n\nUna vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay **una enorme cantidad de ficheros y carpetas**, las buenas son que como verás, casi todo es **configuración e infraestructura**.\n\n## 3.1 Visual Studio Code\n\nPara ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo [VSCode](https://code.visualstudio.com/). Es un **gran editor, gratuito y multiplataforma**. Viene con un terminal integrado y puedes mejorarlo instalando extensiones desde una galería del propio editor.\n\nTe recomiendo instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con _Angular_, se llama [Angular Essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials). Con eso y el [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) verás _Angular en colores_.\n\n## 3.2 Carpetas y Ficheros principales\n\nVolviendo a la **estructura de ficheros y carpetas** te encontrarás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones `.ts`. Son para ficheros [_TypeScript_](https://www.typescriptlang.org/), una evolución del _JavaScript_ con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:\n\n- **angular.json** _: configuración del propio CLI. La madre de todos los configuradores_\n- **package.json** _: dependencias de librerías y scripts_\n- **src/** _: la carpeta donde están los archivos fuentes_\n  - **index.html** _: un fichero HTML índice estándar_\n  - **main.ts** _: fichero TypeScript de arranque de la aplicación_\n  - **app/** _: la carpeta con el código específico de tu aplicación_\n    - **app.module.ts** _: la aplicación es un árbol de módulos, y este es su raíz_\n    - **app.component.ts** _: la página es un árbol de componentes, y este es su raíz_\n    - **app.component.html** _: el componente tiene una parte visual, esta es su vista_\n\nEcha un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.\n\n# 4. Edición\n\nAngular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de **recargar la aplicación en caliente** en cuanto guardas tu trabajo como programador. En esta última versión, la 7, se ha mejorado el proceso y es realmente rápido.\n\nPara probarlo sólo tienes que dejar arrancada la aplicación con el comando `npm start`; **cambiar un fichero de código y comprobar el resultado** en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso _hola mundo_.\n\n## 4.1 Hola Mundo\n\nAbre el fichero `app.component.ts` y busca dentro de él una clase llamada `AppComponent`. Encontrarás que tiene una propiedad `title`. Asígnale el saludo de rigor: `title = 'actibot: hello world ;-)';`. Guarda y comprueba cómo tu navegador **se habrá actualizado automáticamente**.\n\nToda **esta magia depende de una cadena de comandos** que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a [_WebPack_](https://webpack.github.io/), un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.\n\n## 4.2 npm start\n\nEsta es una lista no exhaustiva de lo que sucede.\n\n1. npm start\n2. ng serve\n3. webpack server en http://localhost:4270\n   1. vigilancia de cambios sobre la carpeta src/\n   2. live reload\n   3. compilado de la aplicación\n   4. recarga del navegador\n\nCambia a tu antojo el `app.component.ts` o su hermano `app.component.html` y comprueba los cambios de manera inmediata en tu navegador.\n\n# 5. Configuración\n\nEl CLI 7 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el `package.json` y agregar librerías de terceros.\n\n## 5.1 Package.json\n\nEl `package.json` es el fichero estándar de _npm_ donde se almacenan las **dependencias de terceros**. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de _Angular 7_. Y también las herramientas que necesita el programador, por ejemplo el propio _AngularCLI_;\n\n```json\n{\n  \"dependencies\": {\n    \"@angular/core\": \"^7.2.0\"\n  },\n  \"devDependencies\": {\n    \"@angular/cli\": \"7.2.0\"\n  }\n}\n```\n\nOtro uso del `package.json` es servir de **contenedor de scripts** para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar `npm start` ejecutará el contenido asignado en el fichero _json_, originalmente `ng serve`. Esto lanza el servidor de pruebas con sus opciones por defecto.\n\nPero el **comando [ng serve](https://angular.io/cli/serve)** admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.\n\nOtras configuraciones en producción\n\n```json\n{\n  \"start\": \"ng serve --aot -o --port 4270\"\n}\n```\n\n## 5.2 Estilos y librerías de terceros\n\nLas librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos **algún que otro producto de terceros**. Ya sean utilidades como _[date-fns](https://date-fns.org/)_, librerías gráficas como _[chart.js](http://www.chartjs.org/)_ o la aplicación de estilos y componentes visuales de _frameworks como Bootstrap o MaterialDesign_. Pero todos se instalan de igual forma. Descargándolos con _npm_ y adjuntándolos en el `angular.json`.\n\n> En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama _[MiniCSS](https://minicss.org/)_ y es apropiada para prototipos, pruebas o pequeños proyectos.\n\nSe descargan e instalan de manera estándar.\n\n```console\nnpm install mini.css --save\n```\n\nPara que se incluyan en la distribución hay que ir a la configuración del _CLI_. Entonces se agrega dentro del fichero `.angular.json` a la colección de _styles_ o de _scripts_ que corresponda.\n\n```json\n{\n  \"styles\": [\"src/styles.css\", \"./node_modules/mini.css/dist/mini-default.min.css\"]\n}\n```\n\nEstas colecciones de archivos los usa el _cli_ a través de _webpack_ para incluirlos **minificados y concatenados en un fichero _bundle_ sustituyendo a las clásicas etiquetas html**.Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. De esta forma el fichero `index.html` apenas tendrás que tocarlo, salvo para algunas etiquetas de meta información.\n\n```html\n<meta name=\"description\" content=\"A sample project for learning Angular ;-)\" />\n<meta name=\"keywords\" content=\"Angular Sample Tutorial Ejemplo\" />\n<meta name=\"author\" content=\"Alberto Basalo\" />\n```\n\nUna cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo _MiniCSS_.\n\n## 5.3 Environments\n\nLa carpeta `environments/` contiene dos ficheros, y puede contener más, para cada entorno de distribución necesario. En código siempre importaremos el fichero base, pero durante la compilación el CLI lo sustituirá por el adecuado.\n\n```typescript\ntitle = environment.appName + 'hello world ;-)';\n```\n\n## 5.4 Assets\n\nLos ficheros de la carpeta `assets/` se copian tal cual al despliegue. Es un buen lugar para logos, imágenes y ficheros de datos estáticos.\n\nPor ejemplo, en el `app.component.html` he sustituido la imagen incrustada del Angular con un logo propio.\n\n```html\n<img width=\"100\" src=\"./assets/logo.png\" />\n```\n\n# 6. Angular 7, el CLI 7 y su ecosistema\n\nAlgunos consejos y herramientas útiles que rodean al mundo Angular.\n\nPero si la línea de comandos te suena muy antigua y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto [Angular Console](https://angularconsole.com/) te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.\n\nUna mejora digna de mención es la capacidad de presupuestar tamaños de los ficheros generados. De esa forma podemos controlar el peso y tiempo de descarga de la aplicación.\n\nPara garantizar la limpieza del código conviene usar herramientas como [Prettier](https://prettier.io/) y configurarlas para su compatibilidad con Angular.\n\nLos últimos toques antes de publicar pueden incluir el _script de analytics_ en el `index.html` y ajustes de retro-compatibilidad en el fichero `polyfills.ts`. Luego un comando y listo para publicar en _github pages_.\n\n> Te recomiendo que te familiarices y uses mucho estos _scripts_ en el `package.json` para poder lanzarlos más tarde.\n\n```json\n{\n  \"scripts\": {\n    \"build:prod\": \"ng build --prod\",\n    \"build:pub\": \"ng build --prod --output-path docs --base-href https://academiabinaria.github.io/angular-basic/\",\n    \"e2e\": \"ng e2e\",\n    \"http-server\": \"http-server ./dist/angular-basic/ -c-1 -p4271 -a localhost -o\",\n    \"lint\": \"ng lint\",\n    \"ng\": \"ng\",\n    \"pub\": \"npm run build:pub && npm run push\",\n    \"push\": \"git add * && git commit -m 'pub' && git push\",\n    \"start:prod\": \"npm run build:prod && npm run http-server\",\n    \"start\": \"ng serve --aot -o --port 4270\",\n    \"test\": \"ng test\"\n  }\n}\n```\n\nComprueba las ejecuciones de los distintos _scripts_. Con `npm start` no se generan ficheros físicos. Todos es en memoria para mayor velocidad de re-compilación mientras desarrollas. En cambio `npm run build:prod` creará una carpeta `./dist/angular-basic` en la que dejará los archivos necesarios para ejecución. Por último `npm run pub` los prepara para enviar compilados a la carpeta estándar `./docs` listos para publicarse en las _github pages_.\n\nOtros enlaces de interés sobre el ecosistema Angular.\n\n- [Extensiones Esenciales](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials)\n- [Prettier](https://prettier.io/)\n- [Angular Console](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console)\n- [Angular Material](https://material.angular.io/)\n- [Bootstrap](https://ng-bootstrap.github.io/#/home)\n- [Augury](https://augury.rangle.io/)\n- [Apollo GraphQL](https://www.apollographql.com/docs/)\n- [Ionic](https://ionicframework.com/)\n- [Angular Console](https://angularconsole.com/)\n\nPara complementar tu conocimiento te recomiendo la [documentación de Angular/CLI](https://angular.io/cli) y este artículo avanzado que trata la configuración del CLI en profundidad [Angular CLI under the hood ](https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01)\n\nEsto es sólo el principio, _Angular CLI 7_ puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 7. En el próximo artículo crearemos una [Base para una aplicación Angular](../base-aplicacion-angular/).\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"hola-angular-cli","published":1,"updated":"2019-03-20T16:11:09.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4b7000o18s352qtbsga","content":"<p><img src=\"/images/tutorial-angular-0_cli.png\" alt=\"hola-angular-cli\"></p><p><strong>Angular en su versión 7 es la plataforma perfecta para el desarrollo</strong> profesional de aplicaciones modernas. <strong>El Angular CLI es la herramienta</strong> adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.</p><a id=\"more\"></a><p>El comúnmente conocido como <strong>AngularCLI</strong> o <em>angular cli</em> o <em>angular-cli</em> o _ CLI a secas_ es la herramienta de línea de comandos estándar para <strong>crear, depurar y publicar aplicaciones Angular</strong>. En su actual <strong>versión 7</strong> es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/0-hello</a></p></blockquote><h1 id=\"1-Instalacion-de-Angular-CLI-7\"><a href=\"#1-Instalacion-de-Angular-CLI-7\" class=\"headerlink\" title=\"1. Instalación de Angular CLI 7\"></a>1. Instalación de Angular CLI 7</h1><p>Angular es una plataforma de desarrollo dogmática y llave en mano. Para empezar, como en casi cualquier desarrollo <strong>necesitarás <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">NodeJS</a> y su manejador de de paquetes <em>npm</em></strong>. Tenerlos actualizados es un mandamiento básico para un desarrollador web. Comprueba tu versión con el siguiente comando:</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure><p>Empieza con una <strong>instalación global</strong> que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.</p><p>Instrucciones para instalar Angular CLI.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm i -g @angular/cli@latest</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ng version</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ng <span class=\"built_in\">help</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ng new --<span class=\"built_in\">help</span></span></span><br></pre></td></tr></table></figure><h1 id=\"2-Crear-y-ejecutar-una-aplicacion-Angular-7\"><a href=\"#2-Crear-y-ejecutar-una-aplicacion-Angular-7\" class=\"headerlink\" title=\"2. Crear y ejecutar una aplicación Angular 7\"></a>2. Crear y ejecutar una aplicación Angular 7</h1><p>Una vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será <code>ng new</code> que te va a <strong>generar toda una aplicación funcional</strong> y las configuraciones necesarias para su depuración, pruebas y ejecución.</p><p>Como novedad, en las últimas versiones, el CLI te preguntará por algunas opciones para crear tu aplicación. Eso es porque no todos los desarrollos son iguales. Se puede configurar el tipo, el estilo y muchas más cosas, tanto de forma interactiva como mediante opciones en línea de comandos.</p><p>Lo más habitual es usar la configuración que viene por defecto, pero también se pueden crear soluciones a medida. Te muestro unos ejemplos para que pruebes y te familiarices con la herramienta. Para más información mira la documentación del comando <a href=\"https://angular.io/cli/new\" target=\"_blank\" rel=\"noopener\">ng new</a>.</p><h2 id=\"2-1-Normal\"><a href=\"#2-1-Normal\" class=\"headerlink\" title=\"2.1 Normal\"></a>2.1 Normal</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new normal</span><br><span class=\"line\">cd normal</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Minimalista\"><a href=\"#2-2-Minimalista\" class=\"headerlink\" title=\"2.2 Minimalista\"></a>2.2 Minimalista</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new minimalista -s -S -t</span><br><span class=\"line\">cd minimalista</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><h2 id=\"2-3-Profesional\"><a href=\"#2-3-Profesional\" class=\"headerlink\" title=\"2.3 Profesional\"></a>2.3 Profesional</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new profesional -p acme --routing true</span><br><span class=\"line\">cd profesional</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><h2 id=\"2-4-Empresarial\"><a href=\"#2-4-Empresarial\" class=\"headerlink\" title=\"2.4 Empresarial\"></a>2.4 Empresarial</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new empresarial --create-application false</span><br><span class=\"line\">cd empresarial</span><br><span class=\"line\">ng generate application compras -p acme --routing true</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><p>Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de <em>npm</em> para el arranque de cualquier aplicación: <code>npm start</code>. Si todo va bien, en unos segundo podrás visitar <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> para ver en marcha la aplicación. Lo veremos con más detalle en el apartado de configuración.</p><blockquote><p>ejemplo: La aplicación que sirve de ejemplo a este tutorial fue creada con este comando:</p></blockquote><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new angular-basic --routing true -s -S</span><br></pre></td></tr></table></figure><h1 id=\"3-Estructura-de-una-aplicacion-Angular\"><a href=\"#3-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"3. Estructura de una aplicación Angular\"></a>3. Estructura de una aplicación Angular</h1><p>Una vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay <strong>una enorme cantidad de ficheros y carpetas</strong>, las buenas son que como verás, casi todo es <strong>configuración e infraestructura</strong>.</p><h2 id=\"3-1-Visual-Studio-Code\"><a href=\"#3-1-Visual-Studio-Code\" class=\"headerlink\" title=\"3.1 Visual Studio Code\"></a>3.1 Visual Studio Code</h2><p>Para ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">VSCode</a>. Es un <strong>gran editor, gratuito y multiplataforma</strong>. Viene con un terminal integrado y puedes mejorarlo instalando extensiones desde una galería del propio editor.</p><p>Te recomiendo instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con <em>Angular</em>, se llama <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\" target=\"_blank\" rel=\"noopener\">Angular Essentials</a>. Con eso y el <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"noopener\">Material Icon Theme</a> verás <em>Angular en colores</em>.</p><h2 id=\"3-2-Carpetas-y-Ficheros-principales\"><a href=\"#3-2-Carpetas-y-Ficheros-principales\" class=\"headerlink\" title=\"3.2 Carpetas y Ficheros principales\"></a>3.2 Carpetas y Ficheros principales</h2><p>Volviendo a la <strong>estructura de ficheros y carpetas</strong> te encontrarás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones <code>.ts</code>. Son para ficheros <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\"><em>TypeScript</em></a>, una evolución del <em>JavaScript</em> con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:</p><ul><li><strong>angular.json</strong> <em>: configuración del propio CLI. La madre de todos los configuradores</em></li><li><strong>package.json</strong> <em>: dependencias de librerías y scripts</em></li><li><strong>src/</strong> <em>: la carpeta donde están los archivos fuentes</em><ul><li><strong>index.html</strong> <em>: un fichero HTML índice estándar</em></li><li><strong>main.ts</strong> <em>: fichero TypeScript de arranque de la aplicación</em></li><li><strong>app/</strong> <em>: la carpeta con el código específico de tu aplicación</em><ul><li><strong>app.module.ts</strong> <em>: la aplicación es un árbol de módulos, y este es su raíz</em></li><li><strong>app.component.ts</strong> <em>: la página es un árbol de componentes, y este es su raíz</em></li><li><strong>app.component.html</strong> <em>: el componente tiene una parte visual, esta es su vista</em></li></ul></li></ul></li></ul><p>Echa un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.</p><h1 id=\"4-Edicion\"><a href=\"#4-Edicion\" class=\"headerlink\" title=\"4. Edición\"></a>4. Edición</h1><p>Angular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de <strong>recargar la aplicación en caliente</strong> en cuanto guardas tu trabajo como programador. En esta última versión, la 7, se ha mejorado el proceso y es realmente rápido.</p><p>Para probarlo sólo tienes que dejar arrancada la aplicación con el comando <code>npm start</code>; <strong>cambiar un fichero de código y comprobar el resultado</strong> en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso <em>hola mundo</em>.</p><h2 id=\"4-1-Hola-Mundo\"><a href=\"#4-1-Hola-Mundo\" class=\"headerlink\" title=\"4.1 Hola Mundo\"></a>4.1 Hola Mundo</h2><p>Abre el fichero <code>app.component.ts</code> y busca dentro de él una clase llamada <code>AppComponent</code>. Encontrarás que tiene una propiedad <code>title</code>. Asígnale el saludo de rigor: <code>title = &#39;actibot: hello world ;-)&#39;;</code>. Guarda y comprueba cómo tu navegador <strong>se habrá actualizado automáticamente</strong>.</p><p>Toda <strong>esta magia depende de una cadena de comandos</strong> que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"noopener\"><em>WebPack</em></a>, un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.</p><h2 id=\"4-2-npm-start\"><a href=\"#4-2-npm-start\" class=\"headerlink\" title=\"4.2 npm start\"></a>4.2 npm start</h2><p>Esta es una lista no exhaustiva de lo que sucede.</p><ol><li>npm start</li><li>ng serve</li><li>webpack server en <a href=\"http://localhost:4270\" target=\"_blank\" rel=\"noopener\">http://localhost:4270</a><ol><li>vigilancia de cambios sobre la carpeta src/</li><li>live reload</li><li>compilado de la aplicación</li><li>recarga del navegador</li></ol></li></ol><p>Cambia a tu antojo el <code>app.component.ts</code> o su hermano <code>app.component.html</code> y comprueba los cambios de manera inmediata en tu navegador.</p><h1 id=\"5-Configuracion\"><a href=\"#5-Configuracion\" class=\"headerlink\" title=\"5. Configuración\"></a>5. Configuración</h1><p>El CLI 7 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el <code>package.json</code> y agregar librerías de terceros.</p><h2 id=\"5-1-Package-json\"><a href=\"#5-1-Package-json\" class=\"headerlink\" title=\"5.1 Package.json\"></a>5.1 Package.json</h2><p>El <code>package.json</code> es el fichero estándar de <em>npm</em> donde se almacenan las <strong>dependencias de terceros</strong>. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de <em>Angular 7</em>. Y también las herramientas que necesita el programador, por ejemplo el propio <em>AngularCLI</em>;</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"@angular/core\"</span>: <span class=\"string\">\"^7.2.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"@angular/cli\"</span>: <span class=\"string\">\"7.2.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Otro uso del <code>package.json</code> es servir de <strong>contenedor de scripts</strong> para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar <code>npm start</code> ejecutará el contenido asignado en el fichero <em>json</em>, originalmente <code>ng serve</code>. Esto lanza el servidor de pruebas con sus opciones por defecto.</p><p>Pero el <strong>comando <a href=\"https://angular.io/cli/serve\" target=\"_blank\" rel=\"noopener\">ng serve</a></strong> admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.</p><p>Otras configuraciones en producción</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve --aot -o --port 4270\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"5-2-Estilos-y-librerias-de-terceros\"><a href=\"#5-2-Estilos-y-librerias-de-terceros\" class=\"headerlink\" title=\"5.2 Estilos y librerías de terceros\"></a>5.2 Estilos y librerías de terceros</h2><p>Las librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos <strong>algún que otro producto de terceros</strong>. Ya sean utilidades como <em><a href=\"https://date-fns.org/\" target=\"_blank\" rel=\"noopener\">date-fns</a></em>, librerías gráficas como <em><a href=\"http://www.chartjs.org/\" target=\"_blank\" rel=\"noopener\">chart.js</a></em> o la aplicación de estilos y componentes visuales de <em>frameworks como Bootstrap o MaterialDesign</em>. Pero todos se instalan de igual forma. Descargándolos con <em>npm</em> y adjuntándolos en el <code>angular.json</code>.</p><blockquote><p>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama <em><a href=\"https://minicss.org/\" target=\"_blank\" rel=\"noopener\">MiniCSS</a></em> y es apropiada para prototipos, pruebas o pequeños proyectos.</p></blockquote><p>Se descargan e instalan de manera estándar.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini.css --save</span><br></pre></td></tr></table></figure><p>Para que se incluyan en la distribución hay que ir a la configuración del <em>CLI</em>. Entonces se agrega dentro del fichero <code>.angular.json</code> a la colección de <em>styles</em> o de <em>scripts</em> que corresponda.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"styles\"</span>: [<span class=\"string\">\"src/styles.css\"</span>, <span class=\"string\">\"./node_modules/mini.css/dist/mini-default.min.css\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Estas colecciones de archivos los usa el <em>cli</em> a través de <em>webpack</em> para incluirlos <strong>minificados y concatenados en un fichero <em>bundle</em> sustituyendo a las clásicas etiquetas html</strong>.Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. De esta forma el fichero <code>index.html</code> apenas tendrás que tocarlo, salvo para algunas etiquetas de meta información.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"A sample project for learning Angular ;-)\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Angular Sample Tutorial Ejemplo\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Alberto Basalo\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Una cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo <em>MiniCSS</em>.</p><h2 id=\"5-3-Environments\"><a href=\"#5-3-Environments\" class=\"headerlink\" title=\"5.3 Environments\"></a>5.3 Environments</h2><p>La carpeta <code>environments/</code> contiene dos ficheros, y puede contener más, para cada entorno de distribución necesario. En código siempre importaremos el fichero base, pero durante la compilación el CLI lo sustituirá por el adecuado.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title = environment.appName + <span class=\"string\">'hello world ;-)'</span>;</span><br></pre></td></tr></table></figure><h2 id=\"5-4-Assets\"><a href=\"#5-4-Assets\" class=\"headerlink\" title=\"5.4 Assets\"></a>5.4 Assets</h2><p>Los ficheros de la carpeta <code>assets/</code> se copian tal cual al despliegue. Es un buen lugar para logos, imágenes y ficheros de datos estáticos.</p><p>Por ejemplo, en el <code>app.component.html</code> he sustituido la imagen incrustada del Angular con un logo propio.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"6-Angular-7-el-CLI-7-y-su-ecosistema\"><a href=\"#6-Angular-7-el-CLI-7-y-su-ecosistema\" class=\"headerlink\" title=\"6. Angular 7, el CLI 7 y su ecosistema\"></a>6. Angular 7, el CLI 7 y su ecosistema</h1><p>Algunos consejos y herramientas útiles que rodean al mundo Angular.</p><p>Pero si la línea de comandos te suena muy antigua y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto <a href=\"https://angularconsole.com/\" target=\"_blank\" rel=\"noopener\">Angular Console</a> te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.</p><p>Una mejora digna de mención es la capacidad de presupuestar tamaños de los ficheros generados. De esa forma podemos controlar el peso y tiempo de descarga de la aplicación.</p><p>Para garantizar la limpieza del código conviene usar herramientas como <a href=\"https://prettier.io/\" target=\"_blank\" rel=\"noopener\">Prettier</a> y configurarlas para su compatibilidad con Angular.</p><p>Los últimos toques antes de publicar pueden incluir el <em>script de analytics</em> en el <code>index.html</code> y ajustes de retro-compatibilidad en el fichero <code>polyfills.ts</code>. Luego un comando y listo para publicar en <em>github pages</em>.</p><blockquote><p>Te recomiendo que te familiarices y uses mucho estos <em>scripts</em> en el <code>package.json</code> para poder lanzarlos más tarde.</p></blockquote><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"build:prod\"</span>: <span class=\"string\">\"ng build --prod\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build:pub\"</span>: <span class=\"string\">\"ng build --prod --output-path docs --base-href https://academiabinaria.github.io/angular-basic/\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"e2e\"</span>: <span class=\"string\">\"ng e2e\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"http-server\"</span>: <span class=\"string\">\"http-server ./dist/angular-basic/ -c-1 -p4271 -a localhost -o\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint\"</span>: <span class=\"string\">\"ng lint\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ng\"</span>: <span class=\"string\">\"ng\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pub\"</span>: <span class=\"string\">\"npm run build:pub &amp;&amp; npm run push\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"push\"</span>: <span class=\"string\">\"git add * &amp;&amp; git commit -m 'pub' &amp;&amp; git push\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start:prod\"</span>: <span class=\"string\">\"npm run build:prod &amp;&amp; npm run http-server\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve --aot -o --port 4270\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"ng test\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Comprueba las ejecuciones de los distintos <em>scripts</em>. Con <code>npm start</code> no se generan ficheros físicos. Todos es en memoria para mayor velocidad de re-compilación mientras desarrollas. En cambio <code>npm run build:prod</code> creará una carpeta <code>./dist/angular-basic</code> en la que dejará los archivos necesarios para ejecución. Por último <code>npm run pub</code> los prepara para enviar compilados a la carpeta estándar <code>./docs</code> listos para publicarse en las <em>github pages</em>.</p><p>Otros enlaces de interés sobre el ecosistema Angular.</p><ul><li><a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\" target=\"_blank\" rel=\"noopener\">Extensiones Esenciales</a></li><li><a href=\"https://prettier.io/\" target=\"_blank\" rel=\"noopener\">Prettier</a></li><li><a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\" target=\"_blank\" rel=\"noopener\">Angular Console</a></li><li><a href=\"https://material.angular.io/\" target=\"_blank\" rel=\"noopener\">Angular Material</a></li><li><a href=\"https://ng-bootstrap.github.io/#/home\" target=\"_blank\" rel=\"noopener\">Bootstrap</a></li><li><a href=\"https://augury.rangle.io/\" target=\"_blank\" rel=\"noopener\">Augury</a></li><li><a href=\"https://www.apollographql.com/docs/\" target=\"_blank\" rel=\"noopener\">Apollo GraphQL</a></li><li><a href=\"https://ionicframework.com/\" target=\"_blank\" rel=\"noopener\">Ionic</a></li><li><a href=\"https://angularconsole.com/\" target=\"_blank\" rel=\"noopener\">Angular Console</a></li></ul><p>Para complementar tu conocimiento te recomiendo la <a href=\"https://angular.io/cli\" target=\"_blank\" rel=\"noopener\">documentación de Angular/CLI</a> y este artículo avanzado que trata la configuración del CLI en profundidad <a href=\"https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01\" target=\"_blank\" rel=\"noopener\">Angular CLI under the hood </a></p><p>Esto es sólo el principio, <em>Angular CLI 7</em> puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 7. En el próximo artículo crearemos una <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-0_cli.png\" alt=\"hola-angular-cli\"></p><p><strong>Angular en su versión 7 es la plataforma perfecta para el desarrollo</strong> profesional de aplicaciones modernas. <strong>El Angular CLI es la herramienta</strong> adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.</p>","more":"<p>El comúnmente conocido como <strong>AngularCLI</strong> o <em>angular cli</em> o <em>angular-cli</em> o _ CLI a secas_ es la herramienta de línea de comandos estándar para <strong>crear, depurar y publicar aplicaciones Angular</strong>. En su actual <strong>versión 7</strong> es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/0-hello</a></p></blockquote><h1 id=\"1-Instalacion-de-Angular-CLI-7\"><a href=\"#1-Instalacion-de-Angular-CLI-7\" class=\"headerlink\" title=\"1. Instalación de Angular CLI 7\"></a>1. Instalación de Angular CLI 7</h1><p>Angular es una plataforma de desarrollo dogmática y llave en mano. Para empezar, como en casi cualquier desarrollo <strong>necesitarás <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">NodeJS</a> y su manejador de de paquetes <em>npm</em></strong>. Tenerlos actualizados es un mandamiento básico para un desarrollador web. Comprueba tu versión con el siguiente comando:</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure><p>Empieza con una <strong>instalación global</strong> que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.</p><p>Instrucciones para instalar Angular CLI.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm i -g @angular/cli@latest</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ng version</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ng <span class=\"built_in\">help</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ng new --<span class=\"built_in\">help</span></span></span><br></pre></td></tr></table></figure><h1 id=\"2-Crear-y-ejecutar-una-aplicacion-Angular-7\"><a href=\"#2-Crear-y-ejecutar-una-aplicacion-Angular-7\" class=\"headerlink\" title=\"2. Crear y ejecutar una aplicación Angular 7\"></a>2. Crear y ejecutar una aplicación Angular 7</h1><p>Una vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será <code>ng new</code> que te va a <strong>generar toda una aplicación funcional</strong> y las configuraciones necesarias para su depuración, pruebas y ejecución.</p><p>Como novedad, en las últimas versiones, el CLI te preguntará por algunas opciones para crear tu aplicación. Eso es porque no todos los desarrollos son iguales. Se puede configurar el tipo, el estilo y muchas más cosas, tanto de forma interactiva como mediante opciones en línea de comandos.</p><p>Lo más habitual es usar la configuración que viene por defecto, pero también se pueden crear soluciones a medida. Te muestro unos ejemplos para que pruebes y te familiarices con la herramienta. Para más información mira la documentación del comando <a href=\"https://angular.io/cli/new\" target=\"_blank\" rel=\"noopener\">ng new</a>.</p><h2 id=\"2-1-Normal\"><a href=\"#2-1-Normal\" class=\"headerlink\" title=\"2.1 Normal\"></a>2.1 Normal</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new normal</span><br><span class=\"line\">cd normal</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Minimalista\"><a href=\"#2-2-Minimalista\" class=\"headerlink\" title=\"2.2 Minimalista\"></a>2.2 Minimalista</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new minimalista -s -S -t</span><br><span class=\"line\">cd minimalista</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><h2 id=\"2-3-Profesional\"><a href=\"#2-3-Profesional\" class=\"headerlink\" title=\"2.3 Profesional\"></a>2.3 Profesional</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new profesional -p acme --routing true</span><br><span class=\"line\">cd profesional</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><h2 id=\"2-4-Empresarial\"><a href=\"#2-4-Empresarial\" class=\"headerlink\" title=\"2.4 Empresarial\"></a>2.4 Empresarial</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new empresarial --create-application false</span><br><span class=\"line\">cd empresarial</span><br><span class=\"line\">ng generate application compras -p acme --routing true</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><p>Una vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de <em>npm</em> para el arranque de cualquier aplicación: <code>npm start</code>. Si todo va bien, en unos segundo podrás visitar <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> para ver en marcha la aplicación. Lo veremos con más detalle en el apartado de configuración.</p><blockquote><p>ejemplo: La aplicación que sirve de ejemplo a este tutorial fue creada con este comando:</p></blockquote><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new angular-basic --routing true -s -S</span><br></pre></td></tr></table></figure><h1 id=\"3-Estructura-de-una-aplicacion-Angular\"><a href=\"#3-Estructura-de-una-aplicacion-Angular\" class=\"headerlink\" title=\"3. Estructura de una aplicación Angular\"></a>3. Estructura de una aplicación Angular</h1><p>Una vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay <strong>una enorme cantidad de ficheros y carpetas</strong>, las buenas son que como verás, casi todo es <strong>configuración e infraestructura</strong>.</p><h2 id=\"3-1-Visual-Studio-Code\"><a href=\"#3-1-Visual-Studio-Code\" class=\"headerlink\" title=\"3.1 Visual Studio Code\"></a>3.1 Visual Studio Code</h2><p>Para ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">VSCode</a>. Es un <strong>gran editor, gratuito y multiplataforma</strong>. Viene con un terminal integrado y puedes mejorarlo instalando extensiones desde una galería del propio editor.</p><p>Te recomiendo instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con <em>Angular</em>, se llama <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\" target=\"_blank\" rel=\"noopener\">Angular Essentials</a>. Con eso y el <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"noopener\">Material Icon Theme</a> verás <em>Angular en colores</em>.</p><h2 id=\"3-2-Carpetas-y-Ficheros-principales\"><a href=\"#3-2-Carpetas-y-Ficheros-principales\" class=\"headerlink\" title=\"3.2 Carpetas y Ficheros principales\"></a>3.2 Carpetas y Ficheros principales</h2><p>Volviendo a la <strong>estructura de ficheros y carpetas</strong> te encontrarás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones <code>.ts</code>. Son para ficheros <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\"><em>TypeScript</em></a>, una evolución del <em>JavaScript</em> con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:</p><ul><li><strong>angular.json</strong> <em>: configuración del propio CLI. La madre de todos los configuradores</em></li><li><strong>package.json</strong> <em>: dependencias de librerías y scripts</em></li><li><strong>src/</strong> <em>: la carpeta donde están los archivos fuentes</em><ul><li><strong>index.html</strong> <em>: un fichero HTML índice estándar</em></li><li><strong>main.ts</strong> <em>: fichero TypeScript de arranque de la aplicación</em></li><li><strong>app/</strong> <em>: la carpeta con el código específico de tu aplicación</em><ul><li><strong>app.module.ts</strong> <em>: la aplicación es un árbol de módulos, y este es su raíz</em></li><li><strong>app.component.ts</strong> <em>: la página es un árbol de componentes, y este es su raíz</em></li><li><strong>app.component.html</strong> <em>: el componente tiene una parte visual, esta es su vista</em></li></ul></li></ul></li></ul><p>Echa un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.</p><h1 id=\"4-Edicion\"><a href=\"#4-Edicion\" class=\"headerlink\" title=\"4. Edición\"></a>4. Edición</h1><p>Angular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de <strong>recargar la aplicación en caliente</strong> en cuanto guardas tu trabajo como programador. En esta última versión, la 7, se ha mejorado el proceso y es realmente rápido.</p><p>Para probarlo sólo tienes que dejar arrancada la aplicación con el comando <code>npm start</code>; <strong>cambiar un fichero de código y comprobar el resultado</strong> en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso <em>hola mundo</em>.</p><h2 id=\"4-1-Hola-Mundo\"><a href=\"#4-1-Hola-Mundo\" class=\"headerlink\" title=\"4.1 Hola Mundo\"></a>4.1 Hola Mundo</h2><p>Abre el fichero <code>app.component.ts</code> y busca dentro de él una clase llamada <code>AppComponent</code>. Encontrarás que tiene una propiedad <code>title</code>. Asígnale el saludo de rigor: <code>title = &#39;actibot: hello world ;-)&#39;;</code>. Guarda y comprueba cómo tu navegador <strong>se habrá actualizado automáticamente</strong>.</p><p>Toda <strong>esta magia depende de una cadena de comandos</strong> que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"noopener\"><em>WebPack</em></a>, un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.</p><h2 id=\"4-2-npm-start\"><a href=\"#4-2-npm-start\" class=\"headerlink\" title=\"4.2 npm start\"></a>4.2 npm start</h2><p>Esta es una lista no exhaustiva de lo que sucede.</p><ol><li>npm start</li><li>ng serve</li><li>webpack server en <a href=\"http://localhost:4270\" target=\"_blank\" rel=\"noopener\">http://localhost:4270</a><ol><li>vigilancia de cambios sobre la carpeta src/</li><li>live reload</li><li>compilado de la aplicación</li><li>recarga del navegador</li></ol></li></ol><p>Cambia a tu antojo el <code>app.component.ts</code> o su hermano <code>app.component.html</code> y comprueba los cambios de manera inmediata en tu navegador.</p><h1 id=\"5-Configuracion\"><a href=\"#5-Configuracion\" class=\"headerlink\" title=\"5. Configuración\"></a>5. Configuración</h1><p>El CLI 7 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el <code>package.json</code> y agregar librerías de terceros.</p><h2 id=\"5-1-Package-json\"><a href=\"#5-1-Package-json\" class=\"headerlink\" title=\"5.1 Package.json\"></a>5.1 Package.json</h2><p>El <code>package.json</code> es el fichero estándar de <em>npm</em> donde se almacenan las <strong>dependencias de terceros</strong>. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de <em>Angular 7</em>. Y también las herramientas que necesita el programador, por ejemplo el propio <em>AngularCLI</em>;</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"@angular/core\"</span>: <span class=\"string\">\"^7.2.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"@angular/cli\"</span>: <span class=\"string\">\"7.2.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Otro uso del <code>package.json</code> es servir de <strong>contenedor de scripts</strong> para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar <code>npm start</code> ejecutará el contenido asignado en el fichero <em>json</em>, originalmente <code>ng serve</code>. Esto lanza el servidor de pruebas con sus opciones por defecto.</p><p>Pero el <strong>comando <a href=\"https://angular.io/cli/serve\" target=\"_blank\" rel=\"noopener\">ng serve</a></strong> admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.</p><p>Otras configuraciones en producción</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve --aot -o --port 4270\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"5-2-Estilos-y-librerias-de-terceros\"><a href=\"#5-2-Estilos-y-librerias-de-terceros\" class=\"headerlink\" title=\"5.2 Estilos y librerías de terceros\"></a>5.2 Estilos y librerías de terceros</h2><p>Las librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos <strong>algún que otro producto de terceros</strong>. Ya sean utilidades como <em><a href=\"https://date-fns.org/\" target=\"_blank\" rel=\"noopener\">date-fns</a></em>, librerías gráficas como <em><a href=\"http://www.chartjs.org/\" target=\"_blank\" rel=\"noopener\">chart.js</a></em> o la aplicación de estilos y componentes visuales de <em>frameworks como Bootstrap o MaterialDesign</em>. Pero todos se instalan de igual forma. Descargándolos con <em>npm</em> y adjuntándolos en el <code>angular.json</code>.</p><blockquote><p>En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama <em><a href=\"https://minicss.org/\" target=\"_blank\" rel=\"noopener\">MiniCSS</a></em> y es apropiada para prototipos, pruebas o pequeños proyectos.</p></blockquote><p>Se descargan e instalan de manera estándar.</p><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini.css --save</span><br></pre></td></tr></table></figure><p>Para que se incluyan en la distribución hay que ir a la configuración del <em>CLI</em>. Entonces se agrega dentro del fichero <code>.angular.json</code> a la colección de <em>styles</em> o de <em>scripts</em> que corresponda.</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"styles\"</span>: [<span class=\"string\">\"src/styles.css\"</span>, <span class=\"string\">\"./node_modules/mini.css/dist/mini-default.min.css\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Estas colecciones de archivos los usa el <em>cli</em> a través de <em>webpack</em> para incluirlos <strong>minificados y concatenados en un fichero <em>bundle</em> sustituyendo a las clásicas etiquetas html</strong>.Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript. De esta forma el fichero <code>index.html</code> apenas tendrás que tocarlo, salvo para algunas etiquetas de meta información.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"A sample project for learning Angular ;-)\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Angular Sample Tutorial Ejemplo\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Alberto Basalo\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Una cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo <em>MiniCSS</em>.</p><h2 id=\"5-3-Environments\"><a href=\"#5-3-Environments\" class=\"headerlink\" title=\"5.3 Environments\"></a>5.3 Environments</h2><p>La carpeta <code>environments/</code> contiene dos ficheros, y puede contener más, para cada entorno de distribución necesario. En código siempre importaremos el fichero base, pero durante la compilación el CLI lo sustituirá por el adecuado.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title = environment.appName + <span class=\"string\">'hello world ;-)'</span>;</span><br></pre></td></tr></table></figure><h2 id=\"5-4-Assets\"><a href=\"#5-4-Assets\" class=\"headerlink\" title=\"5.4 Assets\"></a>5.4 Assets</h2><p>Los ficheros de la carpeta <code>assets/</code> se copian tal cual al despliegue. Es un buen lugar para logos, imágenes y ficheros de datos estáticos.</p><p>Por ejemplo, en el <code>app.component.html</code> he sustituido la imagen incrustada del Angular con un logo propio.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"6-Angular-7-el-CLI-7-y-su-ecosistema\"><a href=\"#6-Angular-7-el-CLI-7-y-su-ecosistema\" class=\"headerlink\" title=\"6. Angular 7, el CLI 7 y su ecosistema\"></a>6. Angular 7, el CLI 7 y su ecosistema</h1><p>Algunos consejos y herramientas útiles que rodean al mundo Angular.</p><p>Pero si la línea de comandos te suena muy antigua y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto <a href=\"https://angularconsole.com/\" target=\"_blank\" rel=\"noopener\">Angular Console</a> te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.</p><p>Una mejora digna de mención es la capacidad de presupuestar tamaños de los ficheros generados. De esa forma podemos controlar el peso y tiempo de descarga de la aplicación.</p><p>Para garantizar la limpieza del código conviene usar herramientas como <a href=\"https://prettier.io/\" target=\"_blank\" rel=\"noopener\">Prettier</a> y configurarlas para su compatibilidad con Angular.</p><p>Los últimos toques antes de publicar pueden incluir el <em>script de analytics</em> en el <code>index.html</code> y ajustes de retro-compatibilidad en el fichero <code>polyfills.ts</code>. Luego un comando y listo para publicar en <em>github pages</em>.</p><blockquote><p>Te recomiendo que te familiarices y uses mucho estos <em>scripts</em> en el <code>package.json</code> para poder lanzarlos más tarde.</p></blockquote><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"build:prod\"</span>: <span class=\"string\">\"ng build --prod\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build:pub\"</span>: <span class=\"string\">\"ng build --prod --output-path docs --base-href https://academiabinaria.github.io/angular-basic/\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"e2e\"</span>: <span class=\"string\">\"ng e2e\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"http-server\"</span>: <span class=\"string\">\"http-server ./dist/angular-basic/ -c-1 -p4271 -a localhost -o\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint\"</span>: <span class=\"string\">\"ng lint\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ng\"</span>: <span class=\"string\">\"ng\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pub\"</span>: <span class=\"string\">\"npm run build:pub &amp;&amp; npm run push\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"push\"</span>: <span class=\"string\">\"git add * &amp;&amp; git commit -m 'pub' &amp;&amp; git push\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start:prod\"</span>: <span class=\"string\">\"npm run build:prod &amp;&amp; npm run http-server\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"ng serve --aot -o --port 4270\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"ng test\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Comprueba las ejecuciones de los distintos <em>scripts</em>. Con <code>npm start</code> no se generan ficheros físicos. Todos es en memoria para mayor velocidad de re-compilación mientras desarrollas. En cambio <code>npm run build:prod</code> creará una carpeta <code>./dist/angular-basic</code> en la que dejará los archivos necesarios para ejecución. Por último <code>npm run pub</code> los prepara para enviar compilados a la carpeta estándar <code>./docs</code> listos para publicarse en las <em>github pages</em>.</p><p>Otros enlaces de interés sobre el ecosistema Angular.</p><ul><li><a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials\" target=\"_blank\" rel=\"noopener\">Extensiones Esenciales</a></li><li><a href=\"https://prettier.io/\" target=\"_blank\" rel=\"noopener\">Prettier</a></li><li><a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\" target=\"_blank\" rel=\"noopener\">Angular Console</a></li><li><a href=\"https://material.angular.io/\" target=\"_blank\" rel=\"noopener\">Angular Material</a></li><li><a href=\"https://ng-bootstrap.github.io/#/home\" target=\"_blank\" rel=\"noopener\">Bootstrap</a></li><li><a href=\"https://augury.rangle.io/\" target=\"_blank\" rel=\"noopener\">Augury</a></li><li><a href=\"https://www.apollographql.com/docs/\" target=\"_blank\" rel=\"noopener\">Apollo GraphQL</a></li><li><a href=\"https://ionicframework.com/\" target=\"_blank\" rel=\"noopener\">Ionic</a></li><li><a href=\"https://angularconsole.com/\" target=\"_blank\" rel=\"noopener\">Angular Console</a></li></ul><p>Para complementar tu conocimiento te recomiendo la <a href=\"https://angular.io/cli\" target=\"_blank\" rel=\"noopener\">documentación de Angular/CLI</a> y este artículo avanzado que trata la configuración del CLI en profundidad <a href=\"https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01\" target=\"_blank\" rel=\"noopener\">Angular CLI under the hood </a></p><p>Esto es sólo el principio, <em>Angular CLI 7</em> puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 7. En el próximo artículo crearemos una <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Base para una aplicación Angular","date":"2019-01-16T10:57:00.000Z","thumbnail":"/css/images/angular-1_base.png","_content":"\n![base-aplicacion-angular](/images/tutorial-angular-1_base.png)\n\nVamos a crear una **base sobre la que programar una aplicación Angular 8** profesional. Usaremos el _CLI_ para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.\nLa idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: **los módulos y los componentes**.\n\n<!-- more -->\n\nPartimos de la aplicación tal cómo la dejamos en el [Hola Mundo en Angular](../hola-angular-cli/). Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/1-base](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app)\n\n# 1. Módulos\n\nLos módulos son **contenedores para almacenar los componentes y servicios** de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.\n\n## 1.1 Anatomía de un módulo\n\nAntes de usar cualquier módulo hay que conocerlo. En Angular **los módulos de declaran como clases de TypeScript**. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función `@NgModule()` que recibe un objeto como único argumento. En las propiedades de ese objeto es donde se configura el módulo.\n\nMira el módulo `AppModule` original que genera el CLI en el fichero `app.module.ts`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n### 1.1.1 Importación de otros módulos\n\nEl módulo `App` también se conoce como **módulo raíz** porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad `imports:[]`, que es un array de punteros a otros módulos.\n\n> En la situación original el módulo principal depende un módulo _custom_ pre-generado (el `AppRoutingModule` que usarás más adelante) y de otro _del framework_ para la presentación en el navegador (el `BrowserModule`).\n\nVeremos esto con más profundidad en el punto 4.\n\n## 1.2 Generación de módulos\n\nHasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de **crear tu primer módulo**. Para eso usaremos otro comando del _cli_, el `ng generate module`. En una ventana del terminal escribe:\n\n```bash\nng g m core\n```\n\nEsta es la sintaxis abreviada del comando [`ng generate`](https://angular.io/cli/generate) el cual dispone de varios planos de construcción o _blueprints_. El que he usado aquí es el de [`module`](https://angular.io/cli/generate#module-command) para la construcción de módulos.\n\n> Si no te gusta teclear en la terminal, también puedes lanzar estos comandos desde [Angular Console](https://angularconsole.com/)\n\nEl resultado es la creación del fichero `core/core.module.ts` con la declaración y decoración del módulo `CoreModule`.\nEste módulo te servirá de **contenedor para guardar componentes** y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.\n\n```typescript\n@NgModule({\n  imports: [],\n  declarations: []\n})\nexport class CoreModule {}\n```\n\nPor ahora hay que asegurar que **este módulo será importado por el raíz, el AppModule**. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n> El módulo raíz, al igual que como verás más tarde con el componente raíz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.\n\n# 2. Componentes\n\nLos módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. **Los componentes son los bloques básicos de construcción de las páginas web en Angular 7**. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).\n\n> La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero `app.component.ts`. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero o hasta cuatro: (el controlador, con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).\n\n## 2.1 Anatomía de un componente\n\nLos componentes, como el resto de artefactos en Angular, serán **clases TypeScript decoradas** con funciones específicas. En este caso la función es `@Component()` que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent {}\n```\n\n**Los componentes definen nuevas etiquetas HTML** para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página `index.html`. El nombre de la nueva etiqueta se conoce como _selector_. En este caso la propiedad `selector: \"app-root\"` permite el uso de este componente dentro de otro con esta invocación `<app-root></app-root>`. En este caso el componente raíz.\n\n> Particularidades del componente raíz. Su nombre oficial es `AppComponent`, y su selector debería llamarse `app-app`. Pero su _selector real_ es `app-root`, formado a partir del prefijo de la aplicación y su supuesto nombre oficioso. Observa el prefijo `app` que se usará en todos los componentes propios, fue asignado por defecto durante la generación de la aplicación. Puede personalizarse usando el modificador `--prefix` de `ng new` y en distintos ficheros de configuración. Volviendo al componente raíz; está destinado a ser usado en la página principal, en el `index.html`. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array `bootstrap: [AppComponent]`, es ahí donde se incluyen los componentes con la capacidad de lanzar _bootstrap_ la aplicación.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nY en el `index.html`\n\n```html\n<body>\n  <app-root></app-root>\n</body>\n```\n\n**La plantilla representa la parte visual** del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad `template` del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero _html_ y referenciarlo como una ruta relativa en la propiedad `templateUrl`.\n\nLa propiedad **`styles` y su gemela `stylesUrl` permiten asignar estilos** _CSS, SASS o LESS_ al componente. Estos estilos se incrustan durante la compilación en los nodos del _DOM_ generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.\n\nLos estilos, ausentes en este ejemplo, podrían incluirse como un array de cadenas, o llevarse a un fichero propio como en el caso de la vista.\n\n```html\n<div style=\"text-align:center\">\n  <h1>Welcome to {{ title }}!</h1>\n  <img width=\"100\" src=\"./assets/logo.png\" />\n</div>\n...\n```\n\n**En la clase del componente nos encontraremos la implementación de su funcionalidad**. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.\n\nUna aplicación web en Angular se monta como un **árbol de componentes**. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.\n\n## 2.2 Generación de componentes\n\nPara **crear nuevos componentes** vamos a usar de nuevo el comando `generate` del _CLI_ . Pero ahora con los planos para construir un componente. La [sintaxis completa](https://angular.io/cli/generate#component-command) del comando `ng generate component` o abreviadamente `ng g c` permite crear componentes en diversas formas.\n\nCasi **todas las páginas tienen una estructura** similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.\n\nEjecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.\n\n```shell\nng g c core/shell\nng g c core/shell/header\nng g c core/shell/main\nng g c core/shell/footer\n```\n\nFíjate en el componente del fichero `shell.component.ts`. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: `app-shell` y `ShellComponent`. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre `App` no coincide con su selector `root`.\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'app-shell',\n  templateUrl: './shell.component.html',\n  styles: []\n})\nexport class ShellComponent implements OnInit {\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\nY esta es su vista asociada. La cual es de nuevo una composición de otros selectores. Estamos creando un frondoso árbol de componentes.\n\n```html\n<app-header></app-header>\n<app-main></app-main>\n<app-footer></app-footer>\n```\n\n# 3 Visibilidad entre componentes\n\nLa clave del código limpio es **exponer funcionalidad de manera expresiva pero ocultar la implementación**. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la **programación basada en componentes** podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.\n\n## 3.1 Componentes públicos y privados\n\nLos componentes no deciden por sí mismos su **visibilidad**. Cuando un componente es generado se declara en un módulo contenedor en su propiedad `declares:[]`. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero **si quieres usarlo desde fuera tendrás que exportarlo**. Eso se hace en la propiedad `exports:[]` del módulo en el que se crea.\n\nLa exportación debe hacerse a mano incluyendo el componente en el array, o indicarse con el _flag_ `--export` para que lo haga el _cli_. Esto es lo que se ha hecho en el módulo _Core_ para poder exportar el componente `shell`.\n\n```typescript\n@NgModule({\n  declarations: [ShellComponent, HeaderComponent, MainComponent, FooterComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [ShellComponent]\n})\nexport class CoreModule {}\n```\n\n> **Los componentes privados suelen ser sencillos**. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador `--flat` ni siquiera generan carpeta propia.\n\nPor supuesto que `HeaderComponent` necesitará la propiedad `title` y también la moveremos desde `app.component.ts`. Dejando de esa manera el componente raíz en los huesos.\n\n## 3.2 Importación y exportación entre módulos\n\nQue un componente sea público es la primera condición para que se consuma fuera de su módulo. Ahora falta que quién lo quiera usar el selector `<app-shell>` importe su módulo `CoreModule`. Esto lo haremos en el `AppModule` para que lo use el `AppComponent`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nComo regla general, **cuando en una plantilla se incruste otro componente**, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.\n\n> Ahora mismo en `AppComponente` sólo puedo usar a `ShellComponent`, que es el único componente accesible. En `ShellComponent` se pueden usar sus vecinos _Header, Main y Footer_. Es un práctica recomendada el mantener el `AppModule` y el `AppComponent` tan simples como sea posible. Para ello movemos todo lo que podemos al módulo de ayuda `CoreModule` distribuyendo el contenido de `app.component.html` en las plantillas de _Header, Main y Footer_ que corresponda.\n\n### 3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript\n\nSi es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el `app.module.ts` son algo así:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n```\n\nEstas **sentencias de importación son propias del lenguaje** y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros _TypeScript_. La importación se realiza en base a convenios personalizables. Si empieza con `./` entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio `node_modules` y se trata como código de terceros.\n\n> En general no tendrás que preocuparte de estas importaciones físicas, pues el _VSCode_ y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código\n\n# 4. Transitividad y Organización\n\n## 4.1 Transitividad en una cadena de módulos\n\nUn problema que reforzará tu conocimiento sobre el sistema modular surgirá al mover la etiqueta `<router-outlet></router-outlet>` del `app.component.html` al componente _Main_. En su vista `main.component.html` tendrás algo así.\n\n```html\n<h2>Here are some links to help you start:</h2>\n<ul>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://angular.io/tutorial\">Tour of Heroes</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://angular.io/cli\">CLI Documentation</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.angular.io/\">Angular blog</a></h2>\n  </li>\n</ul>\n<router-outlet></router-outlet>\n```\n\nTodo son etiquetas _html_ estándar salvo la última `<router-outlet></router-outlet>`. El propósito de este componte lo veremos en la próxima lección dedicada a enrutado. Pero por ahora más que una ayuda es un dolor de cabeza porque es un desconocido para el módulo `CoreModule`. Resulta que el `RouterOutletComponent` está declarado en un módulo del _framework_ llamado `RouterModule`. Dicho módulo fue importado de manera automática durante la generación del código inicial, pero ¿Dónde?.\n\nComo digo el tema del enrutado es un [capítulo aparte](../paginas-y-rutas-angular-spa/), pero las relaciones de los módulos debes conocerlas cuanto antes. Durante la generación inicial se crearon dos módulos: el `AppModule`, ya estudiado, y su asistente para enrutado `AppRoutingModule`. Este último aún no lo hemos visitado. Su contenido es:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nconst routes: Routes = [];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nObviando la por ahora inútil instrucción `.forRoutes(routes)`, llama la atención que este módulo es dependiente del famoso `RouterModule`, es decir lo importa en su array `imports:[]`. Pero además va y lo exporta haciendo uso de la interesante **propiedad transitiva de los módulos**. Cada módulo puede exportar sus propios componentes o los de terceros. Incluso puede exportar todo un módulo al completo. Al hacerlo así, el `AppRoutingModule` estaba poniendo a disposición del `AppModule` todo el contenido de `RouterModule`, incluido el por ahora fastidioso `RouterOutletComponent`.\n\nPero el módulo _Core_ no importa al _AppRouting_, así que nada sabe de un selector llamado _router-outlet_. Para solucionarlo sólo puedes hacer una cosa: importar al `RouterModule` en el `CoreModule`, que quedará así:\n\n```typescript\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FooterComponent } from './shell/footer/footer.component';\nimport { HeaderComponent } from './shell/header/header.component';\nimport { MainComponent } from './shell/main/main.component';\nimport { ShellComponent } from './shell/shell.component';\n\n@NgModule({\n  declarations: [ShellComponent, HeaderComponent, MainComponent, FooterComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [ShellComponent]\n})\nexport class CoreModule {}\n```\n\n## 4.2 Organización de la aplicación en módulos\n\nTodos los programas tiene partes repetitivas. Los principios de **organización y código limpio** nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.\n\nSon **componentes de infraestructura**. Conviene guardarlos en una carpeta especial. Aquí la he llamado _shared_, pero _tools_, _common_, o _lib_ suelen ser otros nombres habituales. Para reforzar el uso del CLI escribe el siguiente comando que aprovecharemos en el futuro.\n\n```bash\nng g m shared\nng g c shared/now --export=true\n```\n\n```html\n<time>\n  {{ now | date:'long' }}\n</time>\n```\n\n--\n\n```bash\nng g m temporal\nng g c temporal --export=true\n```\n\n```html\n<div>\n  <app-now></app-now>\n</div>\n```\n\n```html\n<main class=\"container \">\n  <router-outlet></router-outlet>\n* <app-temporal></app-temporal>\n</main>\n```\n\n> Por ahora déjalo huérfano, no lo importaremos hasta que tengamos módulos funcionales. Sólo anticiparte que es un módulo dónde se hace mucho uso de la propiedad transitiva del sistema modular de Angular.\n\nEl caso es **distinguir los componentes de infraestructura de los de negocio** o funcionalidad. Los módulos _core_ y _shared_ los trataremos como de infraestructura y todos los demás serán de negocio (aún no tenemos). El primero es para meter cosas de uso único esenciales para la aplicación. El segundo para meter bloques reutilizables durante la construcción de la aplicación. Recuerda que sólo son convenios de arquitectura de software; adáptalos a tus necesidades.\n\n> En esta aplicación hasta ahora no es nada funcional,!y ya tiene seis módulos y siete componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes.\n\n### El bosque de módulos a vista de pájaro\n\n```\nAppModule\n|\n+--AppRoutingModule\n|  |\n|  +--RouterModule\n|\n+--BrowserModule\n|\n+--CoreModule\n   |\n   +--CommonModule\n   |\n   +--RouterModule\n   |\n   +--TemporalModule\n      |\n      +--SharedModule\n\n```\n\n### El bosque de componentes a vista de pájaro\n\n```\nAppComponent\n|\n+--ShellComponent\n   |\n   +--HeaderComponent\n   |\n   +--MainComponent\n   |  |\n   |  +--RouterOutletComponent\n   |  |\n   |  +--TemporalComponent\n   |     |\n   |     +--NowComponent\n   |\n   +--FooterComponent\n\n```\n\nCon esto tendrás una base para una aplicación _Angular 8_. Sigue esta serie para añadirle funcionalidad mediante [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/) mientras aprendes a programar con Angular7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng_1-Base-aplicacion-Angular.md","raw":"---\ntitle: Base para una aplicación Angular\npermalink: base-aplicacion-angular\ndate: 2019-01-16 11:57:00\ntags:\n  - Angular\n  - CLI\n  - Tutorial\n  - Introducción\n  - Angular8\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-1_base.png\n---\n\n![base-aplicacion-angular](/images/tutorial-angular-1_base.png)\n\nVamos a crear una **base sobre la que programar una aplicación Angular 8** profesional. Usaremos el _CLI_ para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.\nLa idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: **los módulos y los componentes**.\n\n<!-- more -->\n\nPartimos de la aplicación tal cómo la dejamos en el [Hola Mundo en Angular](../hola-angular-cli/). Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/1-base](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app)\n\n# 1. Módulos\n\nLos módulos son **contenedores para almacenar los componentes y servicios** de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.\n\n## 1.1 Anatomía de un módulo\n\nAntes de usar cualquier módulo hay que conocerlo. En Angular **los módulos de declaran como clases de TypeScript**. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función `@NgModule()` que recibe un objeto como único argumento. En las propiedades de ese objeto es donde se configura el módulo.\n\nMira el módulo `AppModule` original que genera el CLI en el fichero `app.module.ts`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n### 1.1.1 Importación de otros módulos\n\nEl módulo `App` también se conoce como **módulo raíz** porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad `imports:[]`, que es un array de punteros a otros módulos.\n\n> En la situación original el módulo principal depende un módulo _custom_ pre-generado (el `AppRoutingModule` que usarás más adelante) y de otro _del framework_ para la presentación en el navegador (el `BrowserModule`).\n\nVeremos esto con más profundidad en el punto 4.\n\n## 1.2 Generación de módulos\n\nHasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de **crear tu primer módulo**. Para eso usaremos otro comando del _cli_, el `ng generate module`. En una ventana del terminal escribe:\n\n```bash\nng g m core\n```\n\nEsta es la sintaxis abreviada del comando [`ng generate`](https://angular.io/cli/generate) el cual dispone de varios planos de construcción o _blueprints_. El que he usado aquí es el de [`module`](https://angular.io/cli/generate#module-command) para la construcción de módulos.\n\n> Si no te gusta teclear en la terminal, también puedes lanzar estos comandos desde [Angular Console](https://angularconsole.com/)\n\nEl resultado es la creación del fichero `core/core.module.ts` con la declaración y decoración del módulo `CoreModule`.\nEste módulo te servirá de **contenedor para guardar componentes** y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.\n\n```typescript\n@NgModule({\n  imports: [],\n  declarations: []\n})\nexport class CoreModule {}\n```\n\nPor ahora hay que asegurar que **este módulo será importado por el raíz, el AppModule**. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n> El módulo raíz, al igual que como verás más tarde con el componente raíz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.\n\n# 2. Componentes\n\nLos módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. **Los componentes son los bloques básicos de construcción de las páginas web en Angular 7**. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).\n\n> La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero `app.component.ts`. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero o hasta cuatro: (el controlador, con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).\n\n## 2.1 Anatomía de un componente\n\nLos componentes, como el resto de artefactos en Angular, serán **clases TypeScript decoradas** con funciones específicas. En este caso la función es `@Component()` que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent {}\n```\n\n**Los componentes definen nuevas etiquetas HTML** para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página `index.html`. El nombre de la nueva etiqueta se conoce como _selector_. En este caso la propiedad `selector: \"app-root\"` permite el uso de este componente dentro de otro con esta invocación `<app-root></app-root>`. En este caso el componente raíz.\n\n> Particularidades del componente raíz. Su nombre oficial es `AppComponent`, y su selector debería llamarse `app-app`. Pero su _selector real_ es `app-root`, formado a partir del prefijo de la aplicación y su supuesto nombre oficioso. Observa el prefijo `app` que se usará en todos los componentes propios, fue asignado por defecto durante la generación de la aplicación. Puede personalizarse usando el modificador `--prefix` de `ng new` y en distintos ficheros de configuración. Volviendo al componente raíz; está destinado a ser usado en la página principal, en el `index.html`. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array `bootstrap: [AppComponent]`, es ahí donde se incluyen los componentes con la capacidad de lanzar _bootstrap_ la aplicación.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nY en el `index.html`\n\n```html\n<body>\n  <app-root></app-root>\n</body>\n```\n\n**La plantilla representa la parte visual** del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad `template` del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero _html_ y referenciarlo como una ruta relativa en la propiedad `templateUrl`.\n\nLa propiedad **`styles` y su gemela `stylesUrl` permiten asignar estilos** _CSS, SASS o LESS_ al componente. Estos estilos se incrustan durante la compilación en los nodos del _DOM_ generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.\n\nLos estilos, ausentes en este ejemplo, podrían incluirse como un array de cadenas, o llevarse a un fichero propio como en el caso de la vista.\n\n```html\n<div style=\"text-align:center\">\n  <h1>Welcome to {{ title }}!</h1>\n  <img width=\"100\" src=\"./assets/logo.png\" />\n</div>\n...\n```\n\n**En la clase del componente nos encontraremos la implementación de su funcionalidad**. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.\n\nUna aplicación web en Angular se monta como un **árbol de componentes**. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.\n\n## 2.2 Generación de componentes\n\nPara **crear nuevos componentes** vamos a usar de nuevo el comando `generate` del _CLI_ . Pero ahora con los planos para construir un componente. La [sintaxis completa](https://angular.io/cli/generate#component-command) del comando `ng generate component` o abreviadamente `ng g c` permite crear componentes en diversas formas.\n\nCasi **todas las páginas tienen una estructura** similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.\n\nEjecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.\n\n```shell\nng g c core/shell\nng g c core/shell/header\nng g c core/shell/main\nng g c core/shell/footer\n```\n\nFíjate en el componente del fichero `shell.component.ts`. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: `app-shell` y `ShellComponent`. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre `App` no coincide con su selector `root`.\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'app-shell',\n  templateUrl: './shell.component.html',\n  styles: []\n})\nexport class ShellComponent implements OnInit {\n  constructor() {}\n  ngOnInit() {}\n}\n```\n\nY esta es su vista asociada. La cual es de nuevo una composición de otros selectores. Estamos creando un frondoso árbol de componentes.\n\n```html\n<app-header></app-header>\n<app-main></app-main>\n<app-footer></app-footer>\n```\n\n# 3 Visibilidad entre componentes\n\nLa clave del código limpio es **exponer funcionalidad de manera expresiva pero ocultar la implementación**. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la **programación basada en componentes** podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.\n\n## 3.1 Componentes públicos y privados\n\nLos componentes no deciden por sí mismos su **visibilidad**. Cuando un componente es generado se declara en un módulo contenedor en su propiedad `declares:[]`. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero **si quieres usarlo desde fuera tendrás que exportarlo**. Eso se hace en la propiedad `exports:[]` del módulo en el que se crea.\n\nLa exportación debe hacerse a mano incluyendo el componente en el array, o indicarse con el _flag_ `--export` para que lo haga el _cli_. Esto es lo que se ha hecho en el módulo _Core_ para poder exportar el componente `shell`.\n\n```typescript\n@NgModule({\n  declarations: [ShellComponent, HeaderComponent, MainComponent, FooterComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [ShellComponent]\n})\nexport class CoreModule {}\n```\n\n> **Los componentes privados suelen ser sencillos**. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador `--flat` ni siquiera generan carpeta propia.\n\nPor supuesto que `HeaderComponent` necesitará la propiedad `title` y también la moveremos desde `app.component.ts`. Dejando de esa manera el componente raíz en los huesos.\n\n## 3.2 Importación y exportación entre módulos\n\nQue un componente sea público es la primera condición para que se consuma fuera de su módulo. Ahora falta que quién lo quiera usar el selector `<app-shell>` importe su módulo `CoreModule`. Esto lo haremos en el `AppModule` para que lo use el `AppComponent`.\n\n```typescript\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, CoreModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\nComo regla general, **cuando en una plantilla se incruste otro componente**, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.\n\n> Ahora mismo en `AppComponente` sólo puedo usar a `ShellComponent`, que es el único componente accesible. En `ShellComponent` se pueden usar sus vecinos _Header, Main y Footer_. Es un práctica recomendada el mantener el `AppModule` y el `AppComponent` tan simples como sea posible. Para ello movemos todo lo que podemos al módulo de ayuda `CoreModule` distribuyendo el contenido de `app.component.html` en las plantillas de _Header, Main y Footer_ que corresponda.\n\n### 3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript\n\nSi es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el `app.module.ts` son algo así:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n```\n\nEstas **sentencias de importación son propias del lenguaje** y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros _TypeScript_. La importación se realiza en base a convenios personalizables. Si empieza con `./` entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio `node_modules` y se trata como código de terceros.\n\n> En general no tendrás que preocuparte de estas importaciones físicas, pues el _VSCode_ y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código\n\n# 4. Transitividad y Organización\n\n## 4.1 Transitividad en una cadena de módulos\n\nUn problema que reforzará tu conocimiento sobre el sistema modular surgirá al mover la etiqueta `<router-outlet></router-outlet>` del `app.component.html` al componente _Main_. En su vista `main.component.html` tendrás algo así.\n\n```html\n<h2>Here are some links to help you start:</h2>\n<ul>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://angular.io/tutorial\">Tour of Heroes</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://angular.io/cli\">CLI Documentation</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\" rel=\"noopener\" href=\"https://blog.angular.io/\">Angular blog</a></h2>\n  </li>\n</ul>\n<router-outlet></router-outlet>\n```\n\nTodo son etiquetas _html_ estándar salvo la última `<router-outlet></router-outlet>`. El propósito de este componte lo veremos en la próxima lección dedicada a enrutado. Pero por ahora más que una ayuda es un dolor de cabeza porque es un desconocido para el módulo `CoreModule`. Resulta que el `RouterOutletComponent` está declarado en un módulo del _framework_ llamado `RouterModule`. Dicho módulo fue importado de manera automática durante la generación del código inicial, pero ¿Dónde?.\n\nComo digo el tema del enrutado es un [capítulo aparte](../paginas-y-rutas-angular-spa/), pero las relaciones de los módulos debes conocerlas cuanto antes. Durante la generación inicial se crearon dos módulos: el `AppModule`, ya estudiado, y su asistente para enrutado `AppRoutingModule`. Este último aún no lo hemos visitado. Su contenido es:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nconst routes: Routes = [];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nObviando la por ahora inútil instrucción `.forRoutes(routes)`, llama la atención que este módulo es dependiente del famoso `RouterModule`, es decir lo importa en su array `imports:[]`. Pero además va y lo exporta haciendo uso de la interesante **propiedad transitiva de los módulos**. Cada módulo puede exportar sus propios componentes o los de terceros. Incluso puede exportar todo un módulo al completo. Al hacerlo así, el `AppRoutingModule` estaba poniendo a disposición del `AppModule` todo el contenido de `RouterModule`, incluido el por ahora fastidioso `RouterOutletComponent`.\n\nPero el módulo _Core_ no importa al _AppRouting_, así que nada sabe de un selector llamado _router-outlet_. Para solucionarlo sólo puedes hacer una cosa: importar al `RouterModule` en el `CoreModule`, que quedará así:\n\n```typescript\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FooterComponent } from './shell/footer/footer.component';\nimport { HeaderComponent } from './shell/header/header.component';\nimport { MainComponent } from './shell/main/main.component';\nimport { ShellComponent } from './shell/shell.component';\n\n@NgModule({\n  declarations: [ShellComponent, HeaderComponent, MainComponent, FooterComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [ShellComponent]\n})\nexport class CoreModule {}\n```\n\n## 4.2 Organización de la aplicación en módulos\n\nTodos los programas tiene partes repetitivas. Los principios de **organización y código limpio** nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.\n\nSon **componentes de infraestructura**. Conviene guardarlos en una carpeta especial. Aquí la he llamado _shared_, pero _tools_, _common_, o _lib_ suelen ser otros nombres habituales. Para reforzar el uso del CLI escribe el siguiente comando que aprovecharemos en el futuro.\n\n```bash\nng g m shared\nng g c shared/now --export=true\n```\n\n```html\n<time>\n  {{ now | date:'long' }}\n</time>\n```\n\n--\n\n```bash\nng g m temporal\nng g c temporal --export=true\n```\n\n```html\n<div>\n  <app-now></app-now>\n</div>\n```\n\n```html\n<main class=\"container \">\n  <router-outlet></router-outlet>\n* <app-temporal></app-temporal>\n</main>\n```\n\n> Por ahora déjalo huérfano, no lo importaremos hasta que tengamos módulos funcionales. Sólo anticiparte que es un módulo dónde se hace mucho uso de la propiedad transitiva del sistema modular de Angular.\n\nEl caso es **distinguir los componentes de infraestructura de los de negocio** o funcionalidad. Los módulos _core_ y _shared_ los trataremos como de infraestructura y todos los demás serán de negocio (aún no tenemos). El primero es para meter cosas de uso único esenciales para la aplicación. El segundo para meter bloques reutilizables durante la construcción de la aplicación. Recuerda que sólo son convenios de arquitectura de software; adáptalos a tus necesidades.\n\n> En esta aplicación hasta ahora no es nada funcional,!y ya tiene seis módulos y siete componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes.\n\n### El bosque de módulos a vista de pájaro\n\n```\nAppModule\n|\n+--AppRoutingModule\n|  |\n|  +--RouterModule\n|\n+--BrowserModule\n|\n+--CoreModule\n   |\n   +--CommonModule\n   |\n   +--RouterModule\n   |\n   +--TemporalModule\n      |\n      +--SharedModule\n\n```\n\n### El bosque de componentes a vista de pájaro\n\n```\nAppComponent\n|\n+--ShellComponent\n   |\n   +--HeaderComponent\n   |\n   +--MainComponent\n   |  |\n   |  +--RouterOutletComponent\n   |  |\n   |  +--TemporalComponent\n   |     |\n   |     +--NowComponent\n   |\n   +--FooterComponent\n\n```\n\nCon esto tendrás una base para una aplicación _Angular 8_. Sigue esta serie para añadirle funcionalidad mediante [Páginas y rutas Angular SPA](../paginas-y-rutas-angular-spa/) mientras aprendes a programar con Angular7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"base-aplicacion-angular","published":1,"updated":"2019-08-05T10:49:04.805Z","_id":"cjyh5p4b8000p18s3xo2ndk2y","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-1_base.png\" alt=\"base-aplicacion-angular\"></p><p>Vamos a crear una <strong>base sobre la que programar una aplicación Angular 8</strong> profesional. Usaremos el <em>CLI</em> para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.<br>La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: <strong>los módulos y los componentes</strong>.</p><a id=\"more\"></a><p>Partimos de la aplicación tal cómo la dejamos en el <a href=\"../hola-angular-cli/\">Hola Mundo en Angular</a>. Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/1-base</a></p></blockquote><h1 id=\"1-Modulos\"><a href=\"#1-Modulos\" class=\"headerlink\" title=\"1. Módulos\"></a>1. Módulos</h1><p>Los módulos son <strong>contenedores para almacenar los componentes y servicios</strong> de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.</p><h2 id=\"1-1-Anatomia-de-un-modulo\"><a href=\"#1-1-Anatomia-de-un-modulo\" class=\"headerlink\" title=\"1.1 Anatomía de un módulo\"></a>1.1 Anatomía de un módulo</h2><p>Antes de usar cualquier módulo hay que conocerlo. En Angular <strong>los módulos de declaran como clases de TypeScript</strong>. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función <code>@NgModule()</code> que recibe un objeto como único argumento. En las propiedades de ese objeto es donde se configura el módulo.</p><p>Mira el módulo <code>AppModule</code> original que genera el CLI en el fichero <code>app.module.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, AppRoutingModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id=\"1-1-1-Importacion-de-otros-modulos\"><a href=\"#1-1-1-Importacion-de-otros-modulos\" class=\"headerlink\" title=\"1.1.1 Importación de otros módulos\"></a>1.1.1 Importación de otros módulos</h3><p>El módulo <code>App</code> también se conoce como <strong>módulo raíz</strong> porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad <code>imports:[]</code>, que es un array de punteros a otros módulos.</p><blockquote><p>En la situación original el módulo principal depende un módulo <em>custom</em> pre-generado (el <code>AppRoutingModule</code> que usarás más adelante) y de otro <em>del framework</em> para la presentación en el navegador (el <code>BrowserModule</code>).</p></blockquote><p>Veremos esto con más profundidad en el punto 4.</p><h2 id=\"1-2-Generacion-de-modulos\"><a href=\"#1-2-Generacion-de-modulos\" class=\"headerlink\" title=\"1.2 Generación de módulos\"></a>1.2 Generación de módulos</h2><p>Hasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de <strong>crear tu primer módulo</strong>. Para eso usaremos otro comando del <em>cli</em>, el <code>ng generate module</code>. En una ventana del terminal escribe:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m core</span><br></pre></td></tr></table></figure><p>Esta es la sintaxis abreviada del comando <a href=\"https://angular.io/cli/generate\" target=\"_blank\" rel=\"noopener\"><code>ng generate</code></a> el cual dispone de varios planos de construcción o <em>blueprints</em>. El que he usado aquí es el de <a href=\"https://angular.io/cli/generate#module-command\" target=\"_blank\" rel=\"noopener\"><code>module</code></a> para la construcción de módulos.</p><blockquote><p>Si no te gusta teclear en la terminal, también puedes lanzar estos comandos desde <a href=\"https://angularconsole.com/\" target=\"_blank\" rel=\"noopener\">Angular Console</a></p></blockquote><p>El resultado es la creación del fichero <code>core/core.module.ts</code> con la declaración y decoración del módulo <code>CoreModule</code>.<br>Este módulo te servirá de <strong>contenedor para guardar componentes</strong> y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [],</span><br><span class=\"line\">  declarations: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Por ahora hay que asegurar que <strong>este módulo será importado por el raíz, el AppModule</strong>. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, AppRoutingModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El módulo raíz, al igual que como verás más tarde con el componente raíz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.</p></blockquote><h1 id=\"2-Componentes\"><a href=\"#2-Componentes\" class=\"headerlink\" title=\"2. Componentes\"></a>2. Componentes</h1><p>Los módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. <strong>Los componentes son los bloques básicos de construcción de las páginas web en Angular 7</strong>. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).</p><blockquote><p>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero <code>app.component.ts</code>. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero o hasta cuatro: (el controlador, con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).</p></blockquote><h2 id=\"2-1-Anatomia-de-un-componente\"><a href=\"#2-1-Anatomia-de-un-componente\" class=\"headerlink\" title=\"2.1 Anatomía de un componente\"></a>2.1 Anatomía de un componente</h2><p>Los componentes, como el resto de artefactos en Angular, serán <strong>clases TypeScript decoradas</strong> con funciones específicas. En este caso la función es <code>@Component()</code> que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>Los componentes definen nuevas etiquetas HTML</strong> para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página <code>index.html</code>. El nombre de la nueva etiqueta se conoce como <em>selector</em>. En este caso la propiedad <code>selector: &quot;app-root&quot;</code> permite el uso de este componente dentro de otro con esta invocación <code>&lt;app-root&gt;&lt;/app-root&gt;</code>. En este caso el componente raíz.</p><blockquote><p>Particularidades del componente raíz. Su nombre oficial es <code>AppComponent</code>, y su selector debería llamarse <code>app-app</code>. Pero su <em>selector real</em> es <code>app-root</code>, formado a partir del prefijo de la aplicación y su supuesto nombre oficioso. Observa el prefijo <code>app</code> que se usará en todos los componentes propios, fue asignado por defecto durante la generación de la aplicación. Puede personalizarse usando el modificador <code>--prefix</code> de <code>ng new</code> y en distintos ficheros de configuración. Volviendo al componente raíz; está destinado a ser usado en la página principal, en el <code>index.html</code>. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array <code>bootstrap: [AppComponent]</code>, es ahí donde se incluyen los componentes con la capacidad de lanzar <em>bootstrap</em> la aplicación.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, AppRoutingModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Y en el <code>index.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>La plantilla representa la parte visual</strong> del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad <code>template</code> del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero <em>html</em> y referenciarlo como una ruta relativa en la propiedad <code>templateUrl</code>.</p><p>La propiedad <strong><code>styles</code> y su gemela <code>stylesUrl</code> permiten asignar estilos</strong> <em>CSS, SASS o LESS</em> al componente. Estos estilos se incrustan durante la compilación en los nodos del <em>DOM</em> generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.</p><p>Los estilos, ausentes en este ejemplo, podrían incluirse como un array de cadenas, o llevarse a un fichero propio como en el caso de la vista.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to &#123;&#123; title &#125;&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><p><strong>En la clase del componente nos encontraremos la implementación de su funcionalidad</strong>. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.</p><p>Una aplicación web en Angular se monta como un <strong>árbol de componentes</strong>. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.</p><h2 id=\"2-2-Generacion-de-componentes\"><a href=\"#2-2-Generacion-de-componentes\" class=\"headerlink\" title=\"2.2 Generación de componentes\"></a>2.2 Generación de componentes</h2><p>Para <strong>crear nuevos componentes</strong> vamos a usar de nuevo el comando <code>generate</code> del <em>CLI</em> . Pero ahora con los planos para construir un componente. La <a href=\"https://angular.io/cli/generate#component-command\" target=\"_blank\" rel=\"noopener\">sintaxis completa</a> del comando <code>ng generate component</code> o abreviadamente <code>ng g c</code> permite crear componentes en diversas formas.</p><p>Casi <strong>todas las páginas tienen una estructura</strong> similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.</p><p>Ejecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c core/shell</span><br><span class=\"line\">ng g c core/shell/header</span><br><span class=\"line\">ng g c core/shell/main</span><br><span class=\"line\">ng g c core/shell/footer</span><br></pre></td></tr></table></figure><p>Fíjate en el componente del fichero <code>shell.component.ts</code>. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: <code>app-shell</code> y <code>ShellComponent</code>. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre <code>App</code> no coincide con su selector <code>root</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-shell'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./shell.component.html'</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ShellComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y esta es su vista asociada. La cual es de nuevo una composición de otros selectores. Estamos creando un frondoso árbol de componentes.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-main</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"3-Visibilidad-entre-componentes\"><a href=\"#3-Visibilidad-entre-componentes\" class=\"headerlink\" title=\"3 Visibilidad entre componentes\"></a>3 Visibilidad entre componentes</h1><p>La clave del código limpio es <strong>exponer funcionalidad de manera expresiva pero ocultar la implementación</strong>. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la <strong>programación basada en componentes</strong> podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.</p><h2 id=\"3-1-Componentes-publicos-y-privados\"><a href=\"#3-1-Componentes-publicos-y-privados\" class=\"headerlink\" title=\"3.1 Componentes públicos y privados\"></a>3.1 Componentes públicos y privados</h2><p>Los componentes no deciden por sí mismos su <strong>visibilidad</strong>. Cuando un componente es generado se declara en un módulo contenedor en su propiedad <code>declares:[]</code>. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero <strong>si quieres usarlo desde fuera tendrás que exportarlo</strong>. Eso se hace en la propiedad <code>exports:[]</code> del módulo en el que se crea.</p><p>La exportación debe hacerse a mano incluyendo el componente en el array, o indicarse con el <em>flag</em> <code>--export</code> para que lo haga el <em>cli</em>. Esto es lo que se ha hecho en el módulo <em>Core</em> para poder exportar el componente <code>shell</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [ShellComponent, HeaderComponent, MainComponent, FooterComponent],</span><br><span class=\"line\">  imports: [CommonModule, RouterModule],</span><br><span class=\"line\">  exports: [ShellComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Los componentes privados suelen ser sencillos</strong>. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador <code>--flat</code> ni siquiera generan carpeta propia.</p></blockquote><p>Por supuesto que <code>HeaderComponent</code> necesitará la propiedad <code>title</code> y también la moveremos desde <code>app.component.ts</code>. Dejando de esa manera el componente raíz en los huesos.</p><h2 id=\"3-2-Importacion-y-exportacion-entre-modulos\"><a href=\"#3-2-Importacion-y-exportacion-entre-modulos\" class=\"headerlink\" title=\"3.2 Importación y exportación entre módulos\"></a>3.2 Importación y exportación entre módulos</h2><p>Que un componente sea público es la primera condición para que se consuma fuera de su módulo. Ahora falta que quién lo quiera usar el selector <code>&lt;app-shell&gt;</code> importe su módulo <code>CoreModule</code>. Esto lo haremos en el <code>AppModule</code> para que lo use el <code>AppComponent</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, AppRoutingModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Como regla general, <strong>cuando en una plantilla se incruste otro componente</strong>, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.</p><blockquote><p>Ahora mismo en <code>AppComponente</code> sólo puedo usar a <code>ShellComponent</code>, que es el único componente accesible. En <code>ShellComponent</code> se pueden usar sus vecinos <em>Header, Main y Footer</em>. Es un práctica recomendada el mantener el <code>AppModule</code> y el <code>AppComponent</code> tan simples como sea posible. Para ello movemos todo lo que podemos al módulo de ayuda <code>CoreModule</code> distribuyendo el contenido de <code>app.component.html</code> en las plantillas de <em>Header, Main y Footer</em> que corresponda.</p></blockquote><h3 id=\"3-2-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\"><a href=\"#3-2-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\" class=\"headerlink\" title=\"3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript\"></a>3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript</h3><p>Si es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el <code>app.module.ts</code> son algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app-routing.module'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br></pre></td></tr></table></figure><p>Estas <strong>sentencias de importación son propias del lenguaje</strong> y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros <em>TypeScript</em>. La importación se realiza en base a convenios personalizables. Si empieza con <code>./</code> entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio <code>node_modules</code> y se trata como código de terceros.</p><blockquote><p>En general no tendrás que preocuparte de estas importaciones físicas, pues el <em>VSCode</em> y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código</p></blockquote><h1 id=\"4-Transitividad-y-Organizacion\"><a href=\"#4-Transitividad-y-Organizacion\" class=\"headerlink\" title=\"4. Transitividad y Organización\"></a>4. Transitividad y Organización</h1><h2 id=\"4-1-Transitividad-en-una-cadena-de-modulos\"><a href=\"#4-1-Transitividad-en-una-cadena-de-modulos\" class=\"headerlink\" title=\"4.1 Transitividad en una cadena de módulos\"></a>4.1 Transitividad en una cadena de módulos</h2><p>Un problema que reforzará tu conocimiento sobre el sistema modular surgirá al mover la etiqueta <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> del <code>app.component.html</code> al componente <em>Main</em>. En su vista <code>main.component.html</code> tendrás algo así.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Here are some links to help you start:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://angular.io/tutorial\"</span>&gt;</span>Tour of Heroes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://angular.io/cli\"</span>&gt;</span>CLI Documentation<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://blog.angular.io/\"</span>&gt;</span>Angular blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Todo son etiquetas <em>html</em> estándar salvo la última <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. El propósito de este componte lo veremos en la próxima lección dedicada a enrutado. Pero por ahora más que una ayuda es un dolor de cabeza porque es un desconocido para el módulo <code>CoreModule</code>. Resulta que el <code>RouterOutletComponent</code> está declarado en un módulo del <em>framework</em> llamado <code>RouterModule</code>. Dicho módulo fue importado de manera automática durante la generación del código inicial, pero ¿Dónde?.</p><p>Como digo el tema del enrutado es un <a href=\"../paginas-y-rutas-angular-spa/\">capítulo aparte</a>, pero las relaciones de los módulos debes conocerlas cuanto antes. Durante la generación inicial se crearon dos módulos: el <code>AppModule</code>, ya estudiado, y su asistente para enrutado <code>AppRoutingModule</code>. Este último aún no lo hemos visitado. Su contenido es:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Obviando la por ahora inútil instrucción <code>.forRoutes(routes)</code>, llama la atención que este módulo es dependiente del famoso <code>RouterModule</code>, es decir lo importa en su array <code>imports:[]</code>. Pero además va y lo exporta haciendo uso de la interesante <strong>propiedad transitiva de los módulos</strong>. Cada módulo puede exportar sus propios componentes o los de terceros. Incluso puede exportar todo un módulo al completo. Al hacerlo así, el <code>AppRoutingModule</code> estaba poniendo a disposición del <code>AppModule</code> todo el contenido de <code>RouterModule</code>, incluido el por ahora fastidioso <code>RouterOutletComponent</code>.</p><p>Pero el módulo <em>Core</em> no importa al <em>AppRouting</em>, así que nada sabe de un selector llamado <em>router-outlet</em>. Para solucionarlo sólo puedes hacer una cosa: importar al <code>RouterModule</code> en el <code>CoreModule</code>, que quedará así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; FooterComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./shell/footer/footer.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HeaderComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./shell/header/header.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MainComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./shell/main/main.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ShellComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./shell/shell.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [ShellComponent, HeaderComponent, MainComponent, FooterComponent],</span><br><span class=\"line\">  imports: [CommonModule, RouterModule],</span><br><span class=\"line\">  exports: [ShellComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"4-2-Organizacion-de-la-aplicacion-en-modulos\"><a href=\"#4-2-Organizacion-de-la-aplicacion-en-modulos\" class=\"headerlink\" title=\"4.2 Organización de la aplicación en módulos\"></a>4.2 Organización de la aplicación en módulos</h2><p>Todos los programas tiene partes repetitivas. Los principios de <strong>organización y código limpio</strong> nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.</p><p>Son <strong>componentes de infraestructura</strong>. Conviene guardarlos en una carpeta especial. Aquí la he llamado <em>shared</em>, pero <em>tools</em>, <em>common</em>, o <em>lib</em> suelen ser otros nombres habituales. Para reforzar el uso del CLI escribe el siguiente comando que aprovecharemos en el futuro.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m shared</span><br><span class=\"line\">ng g c shared/now --<span class=\"built_in\">export</span>=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; now | date:'long' &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br></pre></td></tr></table></figure><p>–</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m temporal</span><br><span class=\"line\">ng g c temporal --<span class=\"built_in\">export</span>=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-now</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-now</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">* <span class=\"tag\">&lt;<span class=\"name\">app-temporal</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-temporal</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Por ahora déjalo huérfano, no lo importaremos hasta que tengamos módulos funcionales. Sólo anticiparte que es un módulo dónde se hace mucho uso de la propiedad transitiva del sistema modular de Angular.</p></blockquote><p>El caso es <strong>distinguir los componentes de infraestructura de los de negocio</strong> o funcionalidad. Los módulos <em>core</em> y <em>shared</em> los trataremos como de infraestructura y todos los demás serán de negocio (aún no tenemos). El primero es para meter cosas de uso único esenciales para la aplicación. El segundo para meter bloques reutilizables durante la construcción de la aplicación. Recuerda que sólo son convenios de arquitectura de software; adáptalos a tus necesidades.</p><blockquote><p>En esta aplicación hasta ahora no es nada funcional,!y ya tiene seis módulos y siete componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes.</p></blockquote><h3 id=\"El-bosque-de-modulos-a-vista-de-pajaro\"><a href=\"#El-bosque-de-modulos-a-vista-de-pajaro\" class=\"headerlink\" title=\"El bosque de módulos a vista de pájaro\"></a>El bosque de módulos a vista de pájaro</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--AppRoutingModule</span><br><span class=\"line\">|  |</span><br><span class=\"line\">|  +--RouterModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--BrowserModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--CoreModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--CommonModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--RouterModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--TemporalModule</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +--SharedModule</span><br></pre></td></tr></table></figure><h3 id=\"El-bosque-de-componentes-a-vista-de-pajaro\"><a href=\"#El-bosque-de-componentes-a-vista-de-pajaro\" class=\"headerlink\" title=\"El bosque de componentes a vista de pájaro\"></a>El bosque de componentes a vista de pájaro</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppComponent</span><br><span class=\"line\">|</span><br><span class=\"line\">+--ShellComponent</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--HeaderComponent</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--MainComponent</span><br><span class=\"line\">   |  |</span><br><span class=\"line\">   |  +--RouterOutletComponent</span><br><span class=\"line\">   |  |</span><br><span class=\"line\">   |  +--TemporalComponent</span><br><span class=\"line\">   |     |</span><br><span class=\"line\">   |     +--NowComponent</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--FooterComponent</span><br></pre></td></tr></table></figure><p>Con esto tendrás una base para una aplicación <em>Angular 8</em>. Sigue esta serie para añadirle funcionalidad mediante <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a> mientras aprendes a programar con Angular7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-1_base.png\" alt=\"base-aplicacion-angular\"></p><p>Vamos a crear una <strong>base sobre la que programar una aplicación Angular 8</strong> profesional. Usaremos el <em>CLI</em> para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.<br>La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: <strong>los módulos y los componentes</strong>.</p>","more":"<p>Partimos de la aplicación tal cómo la dejamos en el <a href=\"../hola-angular-cli/\">Hola Mundo en Angular</a>. Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/1-base</a></p></blockquote><h1 id=\"1-Modulos\"><a href=\"#1-Modulos\" class=\"headerlink\" title=\"1. Módulos\"></a>1. Módulos</h1><p>Los módulos son <strong>contenedores para almacenar los componentes y servicios</strong> de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.</p><h2 id=\"1-1-Anatomia-de-un-modulo\"><a href=\"#1-1-Anatomia-de-un-modulo\" class=\"headerlink\" title=\"1.1 Anatomía de un módulo\"></a>1.1 Anatomía de un módulo</h2><p>Antes de usar cualquier módulo hay que conocerlo. En Angular <strong>los módulos de declaran como clases de TypeScript</strong>. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función <code>@NgModule()</code> que recibe un objeto como único argumento. En las propiedades de ese objeto es donde se configura el módulo.</p><p>Mira el módulo <code>AppModule</code> original que genera el CLI en el fichero <code>app.module.ts</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, AppRoutingModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id=\"1-1-1-Importacion-de-otros-modulos\"><a href=\"#1-1-1-Importacion-de-otros-modulos\" class=\"headerlink\" title=\"1.1.1 Importación de otros módulos\"></a>1.1.1 Importación de otros módulos</h3><p>El módulo <code>App</code> también se conoce como <strong>módulo raíz</strong> porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad <code>imports:[]</code>, que es un array de punteros a otros módulos.</p><blockquote><p>En la situación original el módulo principal depende un módulo <em>custom</em> pre-generado (el <code>AppRoutingModule</code> que usarás más adelante) y de otro <em>del framework</em> para la presentación en el navegador (el <code>BrowserModule</code>).</p></blockquote><p>Veremos esto con más profundidad en el punto 4.</p><h2 id=\"1-2-Generacion-de-modulos\"><a href=\"#1-2-Generacion-de-modulos\" class=\"headerlink\" title=\"1.2 Generación de módulos\"></a>1.2 Generación de módulos</h2><p>Hasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de <strong>crear tu primer módulo</strong>. Para eso usaremos otro comando del <em>cli</em>, el <code>ng generate module</code>. En una ventana del terminal escribe:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m core</span><br></pre></td></tr></table></figure><p>Esta es la sintaxis abreviada del comando <a href=\"https://angular.io/cli/generate\" target=\"_blank\" rel=\"noopener\"><code>ng generate</code></a> el cual dispone de varios planos de construcción o <em>blueprints</em>. El que he usado aquí es el de <a href=\"https://angular.io/cli/generate#module-command\" target=\"_blank\" rel=\"noopener\"><code>module</code></a> para la construcción de módulos.</p><blockquote><p>Si no te gusta teclear en la terminal, también puedes lanzar estos comandos desde <a href=\"https://angularconsole.com/\" target=\"_blank\" rel=\"noopener\">Angular Console</a></p></blockquote><p>El resultado es la creación del fichero <code>core/core.module.ts</code> con la declaración y decoración del módulo <code>CoreModule</code>.<br>Este módulo te servirá de <strong>contenedor para guardar componentes</strong> y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [],</span><br><span class=\"line\">  declarations: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Por ahora hay que asegurar que <strong>este módulo será importado por el raíz, el AppModule</strong>. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, AppRoutingModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>El módulo raíz, al igual que como verás más tarde con el componente raíz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.</p></blockquote><h1 id=\"2-Componentes\"><a href=\"#2-Componentes\" class=\"headerlink\" title=\"2. Componentes\"></a>2. Componentes</h1><p>Los módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. <strong>Los componentes son los bloques básicos de construcción de las páginas web en Angular 7</strong>. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).</p><blockquote><p>La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero <code>app.component.ts</code>. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero o hasta cuatro: (el controlador, con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).</p></blockquote><h2 id=\"2-1-Anatomia-de-un-componente\"><a href=\"#2-1-Anatomia-de-un-componente\" class=\"headerlink\" title=\"2.1 Anatomía de un componente\"></a>2.1 Anatomía de un componente</h2><p>Los componentes, como el resto de artefactos en Angular, serán <strong>clases TypeScript decoradas</strong> con funciones específicas. En este caso la función es <code>@Component()</code> que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>Los componentes definen nuevas etiquetas HTML</strong> para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página <code>index.html</code>. El nombre de la nueva etiqueta se conoce como <em>selector</em>. En este caso la propiedad <code>selector: &quot;app-root&quot;</code> permite el uso de este componente dentro de otro con esta invocación <code>&lt;app-root&gt;&lt;/app-root&gt;</code>. En este caso el componente raíz.</p><blockquote><p>Particularidades del componente raíz. Su nombre oficial es <code>AppComponent</code>, y su selector debería llamarse <code>app-app</code>. Pero su <em>selector real</em> es <code>app-root</code>, formado a partir del prefijo de la aplicación y su supuesto nombre oficioso. Observa el prefijo <code>app</code> que se usará en todos los componentes propios, fue asignado por defecto durante la generación de la aplicación. Puede personalizarse usando el modificador <code>--prefix</code> de <code>ng new</code> y en distintos ficheros de configuración. Volviendo al componente raíz; está destinado a ser usado en la página principal, en el <code>index.html</code>. Eso obliga a registrarlo de una manera especial en el módulo raíz. Hay que incluirlo en el array <code>bootstrap: [AppComponent]</code>, es ahí donde se incluyen los componentes con la capacidad de lanzar <em>bootstrap</em> la aplicación.</p></blockquote><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, AppRoutingModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Y en el <code>index.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>La plantilla representa la parte visual</strong> del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad <code>template</code> del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero <em>html</em> y referenciarlo como una ruta relativa en la propiedad <code>templateUrl</code>.</p><p>La propiedad <strong><code>styles</code> y su gemela <code>stylesUrl</code> permiten asignar estilos</strong> <em>CSS, SASS o LESS</em> al componente. Estos estilos se incrustan durante la compilación en los nodos del <em>DOM</em> generado. Son exclusivos del componente y facilitan el diseño y maquetación granular de las aplicaciones.</p><p>Los estilos, ausentes en este ejemplo, podrían incluirse como un array de cadenas, o llevarse a un fichero propio como en el caso de la vista.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to &#123;&#123; title &#125;&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><p><strong>En la clase del componente nos encontraremos la implementación de su funcionalidad</strong>. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.</p><p>Una aplicación web en Angular se monta como un <strong>árbol de componentes</strong>. El componente raíz ya viene creado y convenientemente declarado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.</p><h2 id=\"2-2-Generacion-de-componentes\"><a href=\"#2-2-Generacion-de-componentes\" class=\"headerlink\" title=\"2.2 Generación de componentes\"></a>2.2 Generación de componentes</h2><p>Para <strong>crear nuevos componentes</strong> vamos a usar de nuevo el comando <code>generate</code> del <em>CLI</em> . Pero ahora con los planos para construir un componente. La <a href=\"https://angular.io/cli/generate#component-command\" target=\"_blank\" rel=\"noopener\">sintaxis completa</a> del comando <code>ng generate component</code> o abreviadamente <code>ng g c</code> permite crear componentes en diversas formas.</p><p>Casi <strong>todas las páginas tienen una estructura</strong> similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.</p><p>Ejecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c core/shell</span><br><span class=\"line\">ng g c core/shell/header</span><br><span class=\"line\">ng g c core/shell/main</span><br><span class=\"line\">ng g c core/shell/footer</span><br></pre></td></tr></table></figure><p>Fíjate en el componente del fichero <code>shell.component.ts</code>. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: <code>app-shell</code> y <code>ShellComponent</code>. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre <code>App</code> no coincide con su selector <code>root</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-shell'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./shell.component.html'</span>,</span><br><span class=\"line\">  styles: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ShellComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Y esta es su vista asociada. La cual es de nuevo una composición de otros selectores. Estamos creando un frondoso árbol de componentes.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-main</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"3-Visibilidad-entre-componentes\"><a href=\"#3-Visibilidad-entre-componentes\" class=\"headerlink\" title=\"3 Visibilidad entre componentes\"></a>3 Visibilidad entre componentes</h1><p>La clave del código limpio es <strong>exponer funcionalidad de manera expresiva pero ocultar la implementación</strong>. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la <strong>programación basada en componentes</strong> podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.</p><h2 id=\"3-1-Componentes-publicos-y-privados\"><a href=\"#3-1-Componentes-publicos-y-privados\" class=\"headerlink\" title=\"3.1 Componentes públicos y privados\"></a>3.1 Componentes públicos y privados</h2><p>Los componentes no deciden por sí mismos su <strong>visibilidad</strong>. Cuando un componente es generado se declara en un módulo contenedor en su propiedad <code>declares:[]</code>. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero <strong>si quieres usarlo desde fuera tendrás que exportarlo</strong>. Eso se hace en la propiedad <code>exports:[]</code> del módulo en el que se crea.</p><p>La exportación debe hacerse a mano incluyendo el componente en el array, o indicarse con el <em>flag</em> <code>--export</code> para que lo haga el <em>cli</em>. Esto es lo que se ha hecho en el módulo <em>Core</em> para poder exportar el componente <code>shell</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [ShellComponent, HeaderComponent, MainComponent, FooterComponent],</span><br><span class=\"line\">  imports: [CommonModule, RouterModule],</span><br><span class=\"line\">  exports: [ShellComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Los componentes privados suelen ser sencillos</strong>. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador <code>--flat</code> ni siquiera generan carpeta propia.</p></blockquote><p>Por supuesto que <code>HeaderComponent</code> necesitará la propiedad <code>title</code> y también la moveremos desde <code>app.component.ts</code>. Dejando de esa manera el componente raíz en los huesos.</p><h2 id=\"3-2-Importacion-y-exportacion-entre-modulos\"><a href=\"#3-2-Importacion-y-exportacion-entre-modulos\" class=\"headerlink\" title=\"3.2 Importación y exportación entre módulos\"></a>3.2 Importación y exportación entre módulos</h2><p>Que un componente sea público es la primera condición para que se consuma fuera de su módulo. Ahora falta que quién lo quiera usar el selector <code>&lt;app-shell&gt;</code> importe su módulo <code>CoreModule</code>. Esto lo haremos en el <code>AppModule</code> para que lo use el <code>AppComponent</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [AppComponent],</span><br><span class=\"line\">  imports: [BrowserModule, AppRoutingModule, CoreModule],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Como regla general, <strong>cuando en una plantilla se incruste otro componente</strong>, Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces lo buscará entre los componentes exportados por los módulos que hayan sido importados por el actual contenedor.</p><blockquote><p>Ahora mismo en <code>AppComponente</code> sólo puedo usar a <code>ShellComponent</code>, que es el único componente accesible. En <code>ShellComponent</code> se pueden usar sus vecinos <em>Header, Main y Footer</em>. Es un práctica recomendada el mantener el <code>AppModule</code> y el <code>AppComponent</code> tan simples como sea posible. Para ello movemos todo lo que podemos al módulo de ayuda <code>CoreModule</code> distribuyendo el contenido de <code>app.component.html</code> en las plantillas de <em>Header, Main y Footer</em> que corresponda.</p></blockquote><h3 id=\"3-2-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\"><a href=\"#3-2-1-Dos-mundos-paralelos-imports-de-Angular-e-import-de-TypeScript\" class=\"headerlink\" title=\"3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript\"></a>3.2.1 Dos mundos paralelos: imports de Angular e import de TypeScript</h3><p>Si es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el <code>app.module.ts</code> son algo así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app-routing.module'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br></pre></td></tr></table></figure><p>Estas <strong>sentencias de importación son propias del lenguaje</strong> y nada tienen que ver con Angular. En ellas se indica que este fichero importa el contenido de otros ficheros <em>TypeScript</em>. La importación se realiza en base a convenios personalizables. Si empieza con <code>./</code> entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio <code>node_modules</code> y se trata como código de terceros.</p><blockquote><p>En general no tendrás que preocuparte de estas importaciones físicas, pues el <em>VSCode</em> y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código</p></blockquote><h1 id=\"4-Transitividad-y-Organizacion\"><a href=\"#4-Transitividad-y-Organizacion\" class=\"headerlink\" title=\"4. Transitividad y Organización\"></a>4. Transitividad y Organización</h1><h2 id=\"4-1-Transitividad-en-una-cadena-de-modulos\"><a href=\"#4-1-Transitividad-en-una-cadena-de-modulos\" class=\"headerlink\" title=\"4.1 Transitividad en una cadena de módulos\"></a>4.1 Transitividad en una cadena de módulos</h2><p>Un problema que reforzará tu conocimiento sobre el sistema modular surgirá al mover la etiqueta <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> del <code>app.component.html</code> al componente <em>Main</em>. En su vista <code>main.component.html</code> tendrás algo así.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Here are some links to help you start:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://angular.io/tutorial\"</span>&gt;</span>Tour of Heroes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://angular.io/cli\"</span>&gt;</span>CLI Documentation<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://blog.angular.io/\"</span>&gt;</span>Angular blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Todo son etiquetas <em>html</em> estándar salvo la última <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. El propósito de este componte lo veremos en la próxima lección dedicada a enrutado. Pero por ahora más que una ayuda es un dolor de cabeza porque es un desconocido para el módulo <code>CoreModule</code>. Resulta que el <code>RouterOutletComponent</code> está declarado en un módulo del <em>framework</em> llamado <code>RouterModule</code>. Dicho módulo fue importado de manera automática durante la generación del código inicial, pero ¿Dónde?.</p><p>Como digo el tema del enrutado es un <a href=\"../paginas-y-rutas-angular-spa/\">capítulo aparte</a>, pero las relaciones de los módulos debes conocerlas cuanto antes. Durante la generación inicial se crearon dos módulos: el <code>AppModule</code>, ya estudiado, y su asistente para enrutado <code>AppRoutingModule</code>. Este último aún no lo hemos visitado. Su contenido es:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Obviando la por ahora inútil instrucción <code>.forRoutes(routes)</code>, llama la atención que este módulo es dependiente del famoso <code>RouterModule</code>, es decir lo importa en su array <code>imports:[]</code>. Pero además va y lo exporta haciendo uso de la interesante <strong>propiedad transitiva de los módulos</strong>. Cada módulo puede exportar sus propios componentes o los de terceros. Incluso puede exportar todo un módulo al completo. Al hacerlo así, el <code>AppRoutingModule</code> estaba poniendo a disposición del <code>AppModule</code> todo el contenido de <code>RouterModule</code>, incluido el por ahora fastidioso <code>RouterOutletComponent</code>.</p><p>Pero el módulo <em>Core</em> no importa al <em>AppRouting</em>, así que nada sabe de un selector llamado <em>router-outlet</em>. Para solucionarlo sólo puedes hacer una cosa: importar al <code>RouterModule</code> en el <code>CoreModule</code>, que quedará así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; FooterComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./shell/footer/footer.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HeaderComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./shell/header/header.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MainComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./shell/main/main.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ShellComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./shell/shell.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [ShellComponent, HeaderComponent, MainComponent, FooterComponent],</span><br><span class=\"line\">  imports: [CommonModule, RouterModule],</span><br><span class=\"line\">  exports: [ShellComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CoreModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"4-2-Organizacion-de-la-aplicacion-en-modulos\"><a href=\"#4-2-Organizacion-de-la-aplicacion-en-modulos\" class=\"headerlink\" title=\"4.2 Organización de la aplicación en módulos\"></a>4.2 Organización de la aplicación en módulos</h2><p>Todos los programas tiene partes repetitivas. Los principios de <strong>organización y código limpio</strong> nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.</p><p>Son <strong>componentes de infraestructura</strong>. Conviene guardarlos en una carpeta especial. Aquí la he llamado <em>shared</em>, pero <em>tools</em>, <em>common</em>, o <em>lib</em> suelen ser otros nombres habituales. Para reforzar el uso del CLI escribe el siguiente comando que aprovecharemos en el futuro.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m shared</span><br><span class=\"line\">ng g c shared/now --<span class=\"built_in\">export</span>=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; now | date:'long' &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span></span><br></pre></td></tr></table></figure><p>–</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m temporal</span><br><span class=\"line\">ng g c temporal --<span class=\"built_in\">export</span>=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-now</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-now</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container \"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">* <span class=\"tag\">&lt;<span class=\"name\">app-temporal</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-temporal</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Por ahora déjalo huérfano, no lo importaremos hasta que tengamos módulos funcionales. Sólo anticiparte que es un módulo dónde se hace mucho uso de la propiedad transitiva del sistema modular de Angular.</p></blockquote><p>El caso es <strong>distinguir los componentes de infraestructura de los de negocio</strong> o funcionalidad. Los módulos <em>core</em> y <em>shared</em> los trataremos como de infraestructura y todos los demás serán de negocio (aún no tenemos). El primero es para meter cosas de uso único esenciales para la aplicación. El segundo para meter bloques reutilizables durante la construcción de la aplicación. Recuerda que sólo son convenios de arquitectura de software; adáptalos a tus necesidades.</p><blockquote><p>En esta aplicación hasta ahora no es nada funcional,!y ya tiene seis módulos y siete componentes!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido. Por ahora te permitirá practicar con la creación de módulos y componentes.</p></blockquote><h3 id=\"El-bosque-de-modulos-a-vista-de-pajaro\"><a href=\"#El-bosque-de-modulos-a-vista-de-pajaro\" class=\"headerlink\" title=\"El bosque de módulos a vista de pájaro\"></a>El bosque de módulos a vista de pájaro</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--AppRoutingModule</span><br><span class=\"line\">|  |</span><br><span class=\"line\">|  +--RouterModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--BrowserModule</span><br><span class=\"line\">|</span><br><span class=\"line\">+--CoreModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--CommonModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--RouterModule</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--TemporalModule</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +--SharedModule</span><br></pre></td></tr></table></figure><h3 id=\"El-bosque-de-componentes-a-vista-de-pajaro\"><a href=\"#El-bosque-de-componentes-a-vista-de-pajaro\" class=\"headerlink\" title=\"El bosque de componentes a vista de pájaro\"></a>El bosque de componentes a vista de pájaro</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppComponent</span><br><span class=\"line\">|</span><br><span class=\"line\">+--ShellComponent</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--HeaderComponent</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--MainComponent</span><br><span class=\"line\">   |  |</span><br><span class=\"line\">   |  +--RouterOutletComponent</span><br><span class=\"line\">   |  |</span><br><span class=\"line\">   |  +--TemporalComponent</span><br><span class=\"line\">   |     |</span><br><span class=\"line\">   |     +--NowComponent</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +--FooterComponent</span><br></pre></td></tr></table></figure><p>Con esto tendrás una base para una aplicación <em>Angular 8</em>. Sigue esta serie para añadirle funcionalidad mediante <a href=\"../paginas-y-rutas-angular-spa/\">Páginas y rutas Angular SPA</a> mientras aprendes a programar con Angular7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Páginas y rutas Angular SPA","date":"2019-01-21T12:41:14.000Z","thumbnail":"/css/images/angular-2_spa.png","_content":"\n![paginas-y-rutas-angular-spa](/images/tutorial-angular-2_spa.png)\n\nLas **aplicaciones Angular 8 son conjuntos de páginas enrutadas** en el propio navegador. Son las conocidas _SPA, Single Page Applications_. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.\n\nEn este tutorial aprenderás a crear una Angular SPA fácilmente usando `@angular/router`, **el enrutador de Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Base para una aplicación Angular](../base-aplicacion-angular/). Seguimos usando el concepto de árbol, ahora como analogía de **las rutas y las vistas** asociadas. Al finalizar tendrás una angular SPA con vistas asociadas a sus rutas.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/2-spa](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/2-spa)\n\n# 1. Rutas\n\nAl crear la aplicación hice uso del flag `routing true` en el comando de generación del _CLI_. Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el `AppModule` verdadero módulo raíz, y ahora verás en profundidad a su gemelo: el **módulo de enrutado** `AppRoutingModule` y el uso que hace del `RouterModule`.\n\n## 1.1 RouterModule\n\nEl _Angular Router_ necesita ser importado y configurado. El módulo `AppRoutingModule` cumple dos funciones. Por un lado **importa al `RouterModule`** de Angular, el cual contiene toda la lógica necesaria para enrutar en el navegador. Por otro lado, permite la **definición de rutas** en el array `Routes[]`.\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nconst routes: Routes = [\n  {\n    path: 'heroes',\n    component: HeroesComponent\n  },\n  {\n    path: 'not-found',\n    component: NotFoundComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'not-found'\n  }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nEl array de rutas recibe **objetos ruta** con propiedades de configuración.\n\nLa primera es `path:` en la que se especifica **la dirección** que resuelve, en este caso la ruta vacía o raíz del árbol de rutas. Las otras son opcionales y las veremos poco a poco.\n\n### 1.1.1 Component\n\nVamos a crear un componente donde guardar el contenido que el CLI nos regala de inicio. Los enlaces a las páginas oficiales de Angular y al ejemplo del _Tour Of Heroes_. Para ello crearé el componente HeroesComponent.\n\n```bash\nng g c heroes\n```\n\nLo hago en la carpeta raíz; algo poco aconsejado si queremos tener una estructura escalable. Pero es un buen anti-ejemplo ;-) Su contenido es una copia de la página original creada por Angular.\n\n```html\n<h2>Initial Links to start: </h2>\n<ul>\n  <li>\n    <h2><a target=\"_blank\"\n         rel=\"noopener\"\n         href=\"https://angular.io/tutorial\">Tour of Heroes</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\"\n         rel=\"noopener\"\n         href=\"https://angular.io/cli\">CLI Documentation</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\"\n         rel=\"noopener\"\n         href=\"https://blog.angular.io/\">Angular blog</a></h2>\n  </li>\n</ul>\n```\n\n\nAhora debo decidir qué ruta asociarle... por ejemplo `/heroes`. Eso es lo que se ve en el inicio de la configuración de rutas. Para no perderme lo ideal es tener un nuevo enlace de navegación en el `HeaderComponent`\n\n```html\n<header class=\"sticky\">\n  <a routerLink=\"/\" class=\"logo\"> <span class=\"icon-home\"></span> <span>{{ title }}</span> </a>\n  <a routerLink=\"heroes\" routerLinkActive=\"router-link-active\" class=\"button\">\n    <span> Heroes</span>\n  </a>\n</header>\n```\n\nVayamos casi al final y de paso hagamos algo útil para no volver a perdernos sin remedio. Un detector de rutas no contempladas, y una ruta a dónde redirigir a los usuarios perdidos. Para ello estudiaremos la propiedad `component` que es fundamental pues indica **el componente** que se debe mostrar cuando esta ruta se active.\n\nAsí es cómo funciona el enrutado. Un camino y un componente asociado. La tabla de enrutado se procesa de arriba a abajo y cuando un camino coincide con la ruta actual, se para y se carga el componente.\n\nVamos a crear un componente con la intención de mostrarlo sólo cuando las demás ruta fallen. Se llamará _not found_ Lo creo asociado al `CoreModule` lo cual ayuda a organizar los elementos de la aplicación.\n\n```bash\nng g c core/not-found\n```\n\nYa podemos asociar dicho componente al camino `not-found`. Pero esto es poca cosa. Hay mucho más.\n\n### 1.1.2 RedirectTo\n\nLa configuración de rutas no sólo permite asignar componentes a las direcciones. También se pueden hacer **redirecciones de unas direcciones a otras**. Y por supuesto puede haber **rutas no contempladas o errores** por parte del usuario, los infames `404 Not Found`.\n\n> En este caso cuando se escriba la ruta `/not-foud` se mostrará un componente, el `NotFoundComponent`, cuyo contenido indicará al usuario que se ha perdido. Claro que nadie va voluntariamente a esa ruta. Mediante el `path: '**'` le indico que ante cualquier ruta no contemplada anteriormente se ejecute el comando `redirectTo: 'not-found'`, el cual nos lleva a una ruta conocida con un mensaje bien conocido. _Page Not Found_.\n\nPero ¿Cómo es eso de que se mostrará?, ¿Dónde se cargará?. Presentamos a `<router-outlet>`.\n\n## 1.2 Router Outlet\n\nLa idea general de **una SPA es tener una única página que cargue dinámicamente otras vistas**. Normalmente la página contenedora mantiene el menú de navegación, el pie de página y otras áreas comunes. Y deja un espacio para la carga dinámica. Para ello necesitamos saber **qué componente cargar y dónde mostrarlo**. De esto último se ocupa el _router outlet_ mediante la etiqueta `<router-outlet></router-outlet>`.\n\nEn el `main.component.ts` había un contenido _hard-coded_. Para hacer que el contenido sea dinámico se sustituye por el elemento de Angular `<router-outlet></router-outlet>`. Este elemento del framework inyectará dinámicamente el componente que le corresponda según la ruta activa. El `MainComponent` queda así:\n\n```html\n<main class=\"container\">\n  <router-outlet></router-outlet>\n  <!-- Dynamic content here! -->\n</main>\n```\n\n## 1.3 Router Link\n\nLos enlaces web tradicionalmente se han resuelto con elementos `<a href=\"\"></a>` dónde en su atributo `href` se asociaba la dirección a la cuál navegar ante el click del usuario. **En Angular los enlaces se declaran con un atributo** especial llamado `routerLink`. Este atributo **se compila dando lugar al `href`** oportuno en tiempo de ejecución.\n\nEn el fichero `not-found.component.ts` pon algo así:\n\n```html\n<h1>Not Found</h1>\n<h2>404</h2>\n<a routerLink=\"/\">Go home</a>\n```\n\n> Por ahora la funcionalidad de `routerLink` no mejora en nada a `href`. Pero lo hará. Mientras tanto familiarízate con su sintaxis y... asegúrate de importar `RouterModule` en los módulos en los que lo vayas a usar.\n\nSalgamos de este bucle creando más rutas y más componentes. Pero esta vez con un nueva técnica.\n\n# 2 Lazy Loading\n\nLa web clásica funcionaba con un navegador pidiendo una ruta al servidor. El servidor buscaba o montaba un documento html y se lo devolvía al navegador para que lo renderizase. Una nueva ruta significaba repetir todo ese viaje. Hasta que aparecieron las [Single Page Applications](https://en.wikipedia.org/wiki/Single-page_application). En este caso el código cliente es el responsable del contenido asociado a cada ruta. Y eso es mucha responsabilidad.\n\nLas _webs SPA_ se crearon por una razón que casi acaba con ellas: **la velocidad**. Al realizar el enrutado en el cliente y querer evitar todos los viajes posibles hasta el servidor, se cargó a la única página web con todo el peso de la aplicación. Lo cual la hizo terriblemente lenta en la primera visita de cada usuario.\n\nEl **impacto de la primera visita** en una aplicación de intranet no suele ser un problema grave. Pero en internet esa visita puede ser la primera y si tarda mucho, también será la última. La solución viene de mano del concepto de _lazy loading_ o carga perezosa. Consiste en diferir la carga de la lógica asociada a una dirección hasta el momento en que sea activada dicha ruta. De esa forma, **una página no visitada es una página que no pesa**. Y la carga inicial se hace mucho más liviana.\n\nEn Angular el _lazy loading_ es tan sencillo que ya se recomienda implementarlo por defecto. Para hacerlo conoceremos más comandos del `Router` y algunas herramientas de compilación usadas por el _Angular CLI_.\n\n## 2.1 Webpack y los bundles por ruta\n\nHay que saber que el _Angular CLI_ usa internamente la herramienta de empaquetado _webpack_. La cual recorre el código _TypeScript_ buscando `imports` y empaquetando su contenido en sacos o _bundles_. Luego introduce las referencias a esos _bundles_ en la sección se _scripts_ del index.html, haciendo que se descarguen todos nada más arrancar la aplicación. Esto puede ser muy pesado en aplicaciones grandes. Así que hay que buscar una manera de diferir esa descarga, repartiendo el _bundle_ principal en otros más pequeños que se cargará bajo demanda.\n\nObjetivo: adelgazar el peso del _bundle_ principal, el `main.js`.Para conseguirlo hay que configurar las rutas de forma que no sea necesario importar los componentes a mostrar. Tal como se ha hecho con el `NotFoundComponent`, de hacerlo así con todos, _webpack_ empaquetaría esos componentes como algo necesario... y por tanto serían enviados al navegador en el _bundle_ principal sin que sea seguro su uso. Ese no es el camino, es una excepción para componentes poco pesados y muy utilizados.\n\nLa solución que ofrecen el _cli_ y _webpack_ consiste en **delegar la asignación del componente a otro módulo, pero sin importarlo** hasta que su ruta principal se active.\n\nHe creado unas vistas para ser usadas en las direcciones `/` y `/about`. Los componentes asociados se llaman `HomeComponent` u `AboutComponent`. Se han **declarado pero no exportado** en sus respectivos módulos `HomeModule` y `AboutModule`. No es necesario exportarlos porque no serán reclamados directamente por nuestro código.\n\n```bash\nng g m home --routing true\nng g c home/home\nng g m about --routing true\nng g c about/about\n```\n\nEstos módulos no deben ser importados por el `AppModule`; no queremos saber de su existencia. Para ello emplearemos una función que importe el módulo desde su ruta relativa, sin incluirlo en la sección de _imports_ que procesa _webpack_. Vamos a agregarlo al `app-routing.module.ts` que quedará así.\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./home/home.module').then(m => m.HomeModule)\n  },\n  {\n    path: 'about',\n    loadChildren: () => import('./about/about.module').then(m => m.AboutModule)\n  },\n  {\n    path: 'not-found',\n    component: NotFoundComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'not-found'\n  }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\n> Ojo, esta es una novedad de **Angular 8**. Fíjate que **la dirección del fichero es una cadena de texto** asignada a una función dentro del objeto _route_, en la propiedad `loadChildren:\"\"`.\n\n No se está produciendo ninguna importación en _TypeScript_ como ocurre con el componente `NotFoundComponent`. Con esta información _webpack_ va a generar un _bundle_ específico para cada módulo. Si durante la ejecución se activa la ruta `/` (muy probable porque es la ruta raíz) o la ruta `/about` entonces se descarga ese paquete concreto y se ejecuta su contenido. Mientras tanto, se queda almacenado en el servidor.\n\nEsto hace que la aplicación de Angular pese menos y responda antes, mejorando el tiempo de pintado inicial. La combinación de estas y otras técnicas que veremos en este tutorial sacarán el mejor rendimiento posible a tu aplicación Angular.\n\n## 2.2 El enrutador delegado\n\nYa sabemos que hasta que no se active la ruta `/` o la `/about` no hay que hacer nada. Pero si se activa, entonces se descarga un _bundle_ que contiene un módulo y los componentes necesarios. Sólo falta escoger dentro de ese módulo el componente que se asignará a la ruta.\n\nPara eso al crear los módulos Home y About use el _flag_ `routing true`. Esto hace que se genere un segundo módulo de enrutado. El `HomeRoutingModule` y el `AboutRoutingModule` son prácticamente idénticos al enrutador raíz.\n\n> Digamos que son **enrutadores subordinados** al primero. Sólo se llega aquí si en la ruta principal se ha navegado a una dirección concreta. Se hace notar esa distinción durante el proceso de importación del módulo de Angular `RouterModule`. En el caso principal se pone `imports: [RouterModule.forRoot(routes)]` y en todos los demás `imports: [RouterModule.forChild(routes)]`.\n\nA nivel subordinado, la dirección `path: \"\"` se agrega al `path: \"\"` de su enrutador padre. Cuidado, es un error común repetir el _path_ a nivel hijo. En este caso incluso parece redundante. Pero con _about_ no quedan dudas. En el _root_ lleva `path: \"about\"` y en el _child_ solamente `path: \"\"`.\n\nLa ventaja real de este segundo enrutador es que irá empaquetado en el mismo _bundle_ que el módulo de negocio y sus componentes. Descargando ese peso en el momento que se necesite. Aquí sí que asignaremos un componente concreto: el `HomeComponent` o el `AboutComponent`. Por ejemplo el fichero `home-routing.module.ts` quedará más o menos así:\n\n```typescript\nimport { HomeComponent } from './home/home.component';\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent\n  }\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomeRoutingModule {}\n```\n\n## 2.3 Navegación\n\nAhora que ya tenemos un par de rutas reales, es buen momento para crear un mini menú de navegación. Vayamos al `core/shell/header.component.html` y pongamos algo así:\n\n```html\n<header class=\"sticky\">\n  <a routerLink=\"/\" class=\"logo\"> <span class=\"icon-home\"></span> <span>{{ title }}</span> </a>\n  <a routerLink=\"about\" routerLinkActive=\"router-link-active\" class=\"button\">\n    <img width=\"32\" style=\"vertical-align: -0.5em\" src=\"./assets/logo.png\" /> <span> About us</span>\n  </a>\n</header>\n```\n\n# 3 Rutas anidadas\n\nCuando las interfaces se complican, es habitual que las aplicaciones dispongan de menús de navegación a distintos niveles. Dentro de una misma página podemos querer ver distinto contenido y además reflejarlo en la _URL_. Para resolver esta situación en Angular disponemos de la técnica de las _nested routes_.\n\n> De una manera un tanto forzada la he incluido en la página `/about`. La cual disponen de su propio menú de navegación, y lo que es más importante, su propio `<router-outlet></router-outlet>`.\n\nPara empezar veamos como queda el _html_ del `about.component.ts`. Vamos a dotarlo de dos rutas nuevas `/about/links` y `/about/info`. Cada una mostrará contenido en un componente adecuadamente insertado en el `<router-outlet></router-outlet>` local.\n\n## 3.1 Children\n\nPara repasar conceptos de generación de componentes\n\n```bash\nng g c about/about/links\nng g c about/about/info\n```\n\nPara que funcione empezamos por crear los dos componentes `LinksComponent` e `InfoComponent` de forma rutinaria. Y los asignamos en el `about-routing.module.ts` como subordinados a la ruta principal con el comando `children:[]`. Los caminos se van agregando sobre la ruta principal activa, la `/about`. Esto es así tanto el `routerLink` como el `path` de los `children`.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: AboutComponent,\n    children: [\n      {\n        path: 'links',\n        component: LinksComponent\n      },\n      {\n        path: 'info',\n        component: InfoComponent\n      }\n    ]\n  }\n];\n```\n\n## 3.2 RouterOutlet anidado\n\nLos componentes de las rutas `children` se inyectarán en el `<router-outlet>` del componente contenedor `AboutComponent`. Es como si todo volviese a empezar desde aquí.\n\n```html\n<header class=\"sticky\">\n  <a routerLink=\"links\" class=\"button\"> <span> Tutorial Links</span> </a>\n  <a routerLink=\"info\" class=\"button\"> <span> More Info</span> </a>\n</header>\n<router-outlet></router-outlet>\n```\n\nCon estos conceptos y la combinación de `children, loadChild, component, redirectTo` ... asociadas a `path` podrás configurar tu aplicación y responder a cualquier _URL_ desde la misma y única página `index.html`.\n\n# 4 Parámetros\n\nLas rutas vistas hasta ahora se consideran estáticas pues se han definido usando constantes. Es muy habitual tener **páginas con la misma estructura pero distintos contenidos**. Un blog con sus posts, una tienda con sus productos, o un proyecto con sus tareas... hay miles de ejemplos así.\n\n## 4.1 Variables en la ruta\n\nEse tipo de direcciones se consideran paramétricas, tienen unos segmentos estáticos y otros dinámicos. Estos últimos se definen con parámetros, algo así como **variables dentro de la cadena de la ruta**. Su sintaxis obliga a precederlas de dos puntos. Por ejemplo `countries/:country/cities/:city` resolvería rutas como _countries/usa/cities/new-york_ o _countries/italy/cities/roma_. Rellenando los parámetros `:country` y `:city` con los valores necesarios.\n\n> Esta aplicación no tiene un propósito de negocio concreto. Iremos creando rutas según sea necesario por motivos pedagógicos. Empezaremos con unas páginas destinadas a mostrar los autores del proyecto.\n\nVamos a crear rutas como _/authors/albertobasalo_ o _/authors/johndoe_. Para ello necesitamos el segmento principal _/authors_ y una par de componentes.\n\nVamos a agregar los componentes necesarios como hasta ahora.\n\n```bash\nng g c about/about/authors\nng g c about/about/authors/author\n```\n\nEn las rutas del `about-routing.module.ts` agregamos un nuevos _children paths_\n\n```typescript\n{\n  path: '',  component: AboutComponent,\n  children: [\n    {\n      path: 'links', component: LinksComponent\n    },\n    {\n      path: 'info', component: InfoComponent\n    },\n    {\n      path: 'authors', component: AuthorsComponent\n    },\n    {\n      path: 'authors/:id', component: AuthorComponent\n    }\n  ]\n}\n```\n\nEsta configuración resuelve las rutas `about/links`, `about/info`, `about/authors` y `about/authors/cualquier-otra-cosa`. Y las carga con el componente adecuado. Lo novedoso en el camino `:id`. El prefijo dos puntos indica que es un parámetro. Algo así como una variable en el segundo segmento que se almacenará y será recogido con el arbitrario nombre `id`.\n\nPara mostrar el uso de los nuevos enlaces he agregado el `authors/` al `AboutComponent` y he creado un listado en el `AuthorsComponent`. Familiarízate con las rutas relativas para componer la ruta completa.\n\n```html\n<a routerLink=\"albertobasalo\" class=\"button\"> <span> Alberto Basalo</span> </a>\n<a routerLink=\"johndoe\" class=\"button\"> <span> John Doe</span> </a>\n```\n\nAún más interesante es el componente que muestra cada autor de la lista, el `AuthorComponent`. En este caso fíjate cómo accede a la ruta, cómo obtiene el valor del parámetro y cómo lo usa para mostrarlo en la web.\n\n## 4.2 ActivatedRoute\n\nEl framework _Angular_ trae muchas librerías para facilitar la vida al programador. Sólo hay que saber dónde están y cómo pedirlas. Para ello volvemos a la tecnología escogida, _TypeScript_, que permite las **importaciones y la inyección de dependencias**. Hay un tema dedicado a conocer en profundidad [los servicios inyectables en Angular](https://academia-binaria.com/servicios-inyectables-en-Angular/). Por ahora una breve introducción.\n\nContenido del fichero `author.component.ts` relacionado con la obtención del parámetro de la ruta activa:\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nexport class AuthorComponent implements OnInit {\n  public authorId = '';\n  constructor(activateRoute: ActivatedRoute) {\n    this.authorId = activateRoute.snapshot.params['id'];\n  }\n  ngOnInit() {}\n}\n```\n\nLa instrucción `import { ActivatedRoute } from \"@angular/router\";` pone a disposición del programador el código donde está definida la clase `ActivatedRoute`. Pero no se instancia directamente; en su lugar, se usa como un argumento del constructor de la clase del componente. Ese constructor es invocado por _Angular_, y dinámicamente el propio framework sabe cómo rellenar los argumentos que se pidan en los constructores. Es decir, sabe cómo inyectar instancias en las que dependencias declaradas.\n\nUna vez que han **inyectan las dependencias en el constructor** ya están listas para ser usadas. En concreto `activateRoute` da acceso a métodos y propiedades para trabajar con la ruta activa y poder leer sus parámetros.\n\nObtenidos los datos desde la _URL_, ya se muestran en la vista de forma ya conocida. Fichero `/about/authors/author/author.component.html`\n\n```html\n<h2>Author profile</h2>\n<h3>{{ authorId }}</h3>\n```\n\nCon esto tendrás una aplicación SPA en _Angular_. Sigue esta serie para añadirle [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/) mientras aprendes a programar con Angular8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng_2-Paginas-y-rutas-Angular-SPA.md","raw":"---\ntitle: Páginas y rutas Angular SPA\npermalink: paginas-y-rutas-angular-spa\ndate: 2019-01-21 13:41:14\ntags:\n  - Angular\n  - SPA\n  - Routing\n  - Tutorial\n  - Introducción\n  - Angular8\n  - Angular2\ncategories:\n  - [Tutorial, Angular]\nthumbnail: /css/images/angular-2_spa.png\n---\n\n![paginas-y-rutas-angular-spa](/images/tutorial-angular-2_spa.png)\n\nLas **aplicaciones Angular 8 son conjuntos de páginas enrutadas** en el propio navegador. Son las conocidas _SPA, Single Page Applications_. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.\n\nEn este tutorial aprenderás a crear una Angular SPA fácilmente usando `@angular/router`, **el enrutador de Angular**.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Base para una aplicación Angular](../base-aplicacion-angular/). Seguimos usando el concepto de árbol, ahora como analogía de **las rutas y las vistas** asociadas. Al finalizar tendrás una angular SPA con vistas asociadas a sus rutas.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/angular-basic/2-spa](https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/2-spa)\n\n# 1. Rutas\n\nAl crear la aplicación hice uso del flag `routing true` en el comando de generación del _CLI_. Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el `AppModule` verdadero módulo raíz, y ahora verás en profundidad a su gemelo: el **módulo de enrutado** `AppRoutingModule` y el uso que hace del `RouterModule`.\n\n## 1.1 RouterModule\n\nEl _Angular Router_ necesita ser importado y configurado. El módulo `AppRoutingModule` cumple dos funciones. Por un lado **importa al `RouterModule`** de Angular, el cual contiene toda la lógica necesaria para enrutar en el navegador. Por otro lado, permite la **definición de rutas** en el array `Routes[]`.\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nconst routes: Routes = [\n  {\n    path: 'heroes',\n    component: HeroesComponent\n  },\n  {\n    path: 'not-found',\n    component: NotFoundComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'not-found'\n  }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nEl array de rutas recibe **objetos ruta** con propiedades de configuración.\n\nLa primera es `path:` en la que se especifica **la dirección** que resuelve, en este caso la ruta vacía o raíz del árbol de rutas. Las otras son opcionales y las veremos poco a poco.\n\n### 1.1.1 Component\n\nVamos a crear un componente donde guardar el contenido que el CLI nos regala de inicio. Los enlaces a las páginas oficiales de Angular y al ejemplo del _Tour Of Heroes_. Para ello crearé el componente HeroesComponent.\n\n```bash\nng g c heroes\n```\n\nLo hago en la carpeta raíz; algo poco aconsejado si queremos tener una estructura escalable. Pero es un buen anti-ejemplo ;-) Su contenido es una copia de la página original creada por Angular.\n\n```html\n<h2>Initial Links to start: </h2>\n<ul>\n  <li>\n    <h2><a target=\"_blank\"\n         rel=\"noopener\"\n         href=\"https://angular.io/tutorial\">Tour of Heroes</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\"\n         rel=\"noopener\"\n         href=\"https://angular.io/cli\">CLI Documentation</a></h2>\n  </li>\n  <li>\n    <h2><a target=\"_blank\"\n         rel=\"noopener\"\n         href=\"https://blog.angular.io/\">Angular blog</a></h2>\n  </li>\n</ul>\n```\n\n\nAhora debo decidir qué ruta asociarle... por ejemplo `/heroes`. Eso es lo que se ve en el inicio de la configuración de rutas. Para no perderme lo ideal es tener un nuevo enlace de navegación en el `HeaderComponent`\n\n```html\n<header class=\"sticky\">\n  <a routerLink=\"/\" class=\"logo\"> <span class=\"icon-home\"></span> <span>{{ title }}</span> </a>\n  <a routerLink=\"heroes\" routerLinkActive=\"router-link-active\" class=\"button\">\n    <span> Heroes</span>\n  </a>\n</header>\n```\n\nVayamos casi al final y de paso hagamos algo útil para no volver a perdernos sin remedio. Un detector de rutas no contempladas, y una ruta a dónde redirigir a los usuarios perdidos. Para ello estudiaremos la propiedad `component` que es fundamental pues indica **el componente** que se debe mostrar cuando esta ruta se active.\n\nAsí es cómo funciona el enrutado. Un camino y un componente asociado. La tabla de enrutado se procesa de arriba a abajo y cuando un camino coincide con la ruta actual, se para y se carga el componente.\n\nVamos a crear un componente con la intención de mostrarlo sólo cuando las demás ruta fallen. Se llamará _not found_ Lo creo asociado al `CoreModule` lo cual ayuda a organizar los elementos de la aplicación.\n\n```bash\nng g c core/not-found\n```\n\nYa podemos asociar dicho componente al camino `not-found`. Pero esto es poca cosa. Hay mucho más.\n\n### 1.1.2 RedirectTo\n\nLa configuración de rutas no sólo permite asignar componentes a las direcciones. También se pueden hacer **redirecciones de unas direcciones a otras**. Y por supuesto puede haber **rutas no contempladas o errores** por parte del usuario, los infames `404 Not Found`.\n\n> En este caso cuando se escriba la ruta `/not-foud` se mostrará un componente, el `NotFoundComponent`, cuyo contenido indicará al usuario que se ha perdido. Claro que nadie va voluntariamente a esa ruta. Mediante el `path: '**'` le indico que ante cualquier ruta no contemplada anteriormente se ejecute el comando `redirectTo: 'not-found'`, el cual nos lleva a una ruta conocida con un mensaje bien conocido. _Page Not Found_.\n\nPero ¿Cómo es eso de que se mostrará?, ¿Dónde se cargará?. Presentamos a `<router-outlet>`.\n\n## 1.2 Router Outlet\n\nLa idea general de **una SPA es tener una única página que cargue dinámicamente otras vistas**. Normalmente la página contenedora mantiene el menú de navegación, el pie de página y otras áreas comunes. Y deja un espacio para la carga dinámica. Para ello necesitamos saber **qué componente cargar y dónde mostrarlo**. De esto último se ocupa el _router outlet_ mediante la etiqueta `<router-outlet></router-outlet>`.\n\nEn el `main.component.ts` había un contenido _hard-coded_. Para hacer que el contenido sea dinámico se sustituye por el elemento de Angular `<router-outlet></router-outlet>`. Este elemento del framework inyectará dinámicamente el componente que le corresponda según la ruta activa. El `MainComponent` queda así:\n\n```html\n<main class=\"container\">\n  <router-outlet></router-outlet>\n  <!-- Dynamic content here! -->\n</main>\n```\n\n## 1.3 Router Link\n\nLos enlaces web tradicionalmente se han resuelto con elementos `<a href=\"\"></a>` dónde en su atributo `href` se asociaba la dirección a la cuál navegar ante el click del usuario. **En Angular los enlaces se declaran con un atributo** especial llamado `routerLink`. Este atributo **se compila dando lugar al `href`** oportuno en tiempo de ejecución.\n\nEn el fichero `not-found.component.ts` pon algo así:\n\n```html\n<h1>Not Found</h1>\n<h2>404</h2>\n<a routerLink=\"/\">Go home</a>\n```\n\n> Por ahora la funcionalidad de `routerLink` no mejora en nada a `href`. Pero lo hará. Mientras tanto familiarízate con su sintaxis y... asegúrate de importar `RouterModule` en los módulos en los que lo vayas a usar.\n\nSalgamos de este bucle creando más rutas y más componentes. Pero esta vez con un nueva técnica.\n\n# 2 Lazy Loading\n\nLa web clásica funcionaba con un navegador pidiendo una ruta al servidor. El servidor buscaba o montaba un documento html y se lo devolvía al navegador para que lo renderizase. Una nueva ruta significaba repetir todo ese viaje. Hasta que aparecieron las [Single Page Applications](https://en.wikipedia.org/wiki/Single-page_application). En este caso el código cliente es el responsable del contenido asociado a cada ruta. Y eso es mucha responsabilidad.\n\nLas _webs SPA_ se crearon por una razón que casi acaba con ellas: **la velocidad**. Al realizar el enrutado en el cliente y querer evitar todos los viajes posibles hasta el servidor, se cargó a la única página web con todo el peso de la aplicación. Lo cual la hizo terriblemente lenta en la primera visita de cada usuario.\n\nEl **impacto de la primera visita** en una aplicación de intranet no suele ser un problema grave. Pero en internet esa visita puede ser la primera y si tarda mucho, también será la última. La solución viene de mano del concepto de _lazy loading_ o carga perezosa. Consiste en diferir la carga de la lógica asociada a una dirección hasta el momento en que sea activada dicha ruta. De esa forma, **una página no visitada es una página que no pesa**. Y la carga inicial se hace mucho más liviana.\n\nEn Angular el _lazy loading_ es tan sencillo que ya se recomienda implementarlo por defecto. Para hacerlo conoceremos más comandos del `Router` y algunas herramientas de compilación usadas por el _Angular CLI_.\n\n## 2.1 Webpack y los bundles por ruta\n\nHay que saber que el _Angular CLI_ usa internamente la herramienta de empaquetado _webpack_. La cual recorre el código _TypeScript_ buscando `imports` y empaquetando su contenido en sacos o _bundles_. Luego introduce las referencias a esos _bundles_ en la sección se _scripts_ del index.html, haciendo que se descarguen todos nada más arrancar la aplicación. Esto puede ser muy pesado en aplicaciones grandes. Así que hay que buscar una manera de diferir esa descarga, repartiendo el _bundle_ principal en otros más pequeños que se cargará bajo demanda.\n\nObjetivo: adelgazar el peso del _bundle_ principal, el `main.js`.Para conseguirlo hay que configurar las rutas de forma que no sea necesario importar los componentes a mostrar. Tal como se ha hecho con el `NotFoundComponent`, de hacerlo así con todos, _webpack_ empaquetaría esos componentes como algo necesario... y por tanto serían enviados al navegador en el _bundle_ principal sin que sea seguro su uso. Ese no es el camino, es una excepción para componentes poco pesados y muy utilizados.\n\nLa solución que ofrecen el _cli_ y _webpack_ consiste en **delegar la asignación del componente a otro módulo, pero sin importarlo** hasta que su ruta principal se active.\n\nHe creado unas vistas para ser usadas en las direcciones `/` y `/about`. Los componentes asociados se llaman `HomeComponent` u `AboutComponent`. Se han **declarado pero no exportado** en sus respectivos módulos `HomeModule` y `AboutModule`. No es necesario exportarlos porque no serán reclamados directamente por nuestro código.\n\n```bash\nng g m home --routing true\nng g c home/home\nng g m about --routing true\nng g c about/about\n```\n\nEstos módulos no deben ser importados por el `AppModule`; no queremos saber de su existencia. Para ello emplearemos una función que importe el módulo desde su ruta relativa, sin incluirlo en la sección de _imports_ que procesa _webpack_. Vamos a agregarlo al `app-routing.module.ts` que quedará así.\n\n```typescript\nimport { Routes, RouterModule } from '@angular/router';\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./home/home.module').then(m => m.HomeModule)\n  },\n  {\n    path: 'about',\n    loadChildren: () => import('./about/about.module').then(m => m.AboutModule)\n  },\n  {\n    path: 'not-found',\n    component: NotFoundComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'not-found'\n  }\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\n> Ojo, esta es una novedad de **Angular 8**. Fíjate que **la dirección del fichero es una cadena de texto** asignada a una función dentro del objeto _route_, en la propiedad `loadChildren:\"\"`.\n\n No se está produciendo ninguna importación en _TypeScript_ como ocurre con el componente `NotFoundComponent`. Con esta información _webpack_ va a generar un _bundle_ específico para cada módulo. Si durante la ejecución se activa la ruta `/` (muy probable porque es la ruta raíz) o la ruta `/about` entonces se descarga ese paquete concreto y se ejecuta su contenido. Mientras tanto, se queda almacenado en el servidor.\n\nEsto hace que la aplicación de Angular pese menos y responda antes, mejorando el tiempo de pintado inicial. La combinación de estas y otras técnicas que veremos en este tutorial sacarán el mejor rendimiento posible a tu aplicación Angular.\n\n## 2.2 El enrutador delegado\n\nYa sabemos que hasta que no se active la ruta `/` o la `/about` no hay que hacer nada. Pero si se activa, entonces se descarga un _bundle_ que contiene un módulo y los componentes necesarios. Sólo falta escoger dentro de ese módulo el componente que se asignará a la ruta.\n\nPara eso al crear los módulos Home y About use el _flag_ `routing true`. Esto hace que se genere un segundo módulo de enrutado. El `HomeRoutingModule` y el `AboutRoutingModule` son prácticamente idénticos al enrutador raíz.\n\n> Digamos que son **enrutadores subordinados** al primero. Sólo se llega aquí si en la ruta principal se ha navegado a una dirección concreta. Se hace notar esa distinción durante el proceso de importación del módulo de Angular `RouterModule`. En el caso principal se pone `imports: [RouterModule.forRoot(routes)]` y en todos los demás `imports: [RouterModule.forChild(routes)]`.\n\nA nivel subordinado, la dirección `path: \"\"` se agrega al `path: \"\"` de su enrutador padre. Cuidado, es un error común repetir el _path_ a nivel hijo. En este caso incluso parece redundante. Pero con _about_ no quedan dudas. En el _root_ lleva `path: \"about\"` y en el _child_ solamente `path: \"\"`.\n\nLa ventaja real de este segundo enrutador es que irá empaquetado en el mismo _bundle_ que el módulo de negocio y sus componentes. Descargando ese peso en el momento que se necesite. Aquí sí que asignaremos un componente concreto: el `HomeComponent` o el `AboutComponent`. Por ejemplo el fichero `home-routing.module.ts` quedará más o menos así:\n\n```typescript\nimport { HomeComponent } from './home/home.component';\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent\n  }\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomeRoutingModule {}\n```\n\n## 2.3 Navegación\n\nAhora que ya tenemos un par de rutas reales, es buen momento para crear un mini menú de navegación. Vayamos al `core/shell/header.component.html` y pongamos algo así:\n\n```html\n<header class=\"sticky\">\n  <a routerLink=\"/\" class=\"logo\"> <span class=\"icon-home\"></span> <span>{{ title }}</span> </a>\n  <a routerLink=\"about\" routerLinkActive=\"router-link-active\" class=\"button\">\n    <img width=\"32\" style=\"vertical-align: -0.5em\" src=\"./assets/logo.png\" /> <span> About us</span>\n  </a>\n</header>\n```\n\n# 3 Rutas anidadas\n\nCuando las interfaces se complican, es habitual que las aplicaciones dispongan de menús de navegación a distintos niveles. Dentro de una misma página podemos querer ver distinto contenido y además reflejarlo en la _URL_. Para resolver esta situación en Angular disponemos de la técnica de las _nested routes_.\n\n> De una manera un tanto forzada la he incluido en la página `/about`. La cual disponen de su propio menú de navegación, y lo que es más importante, su propio `<router-outlet></router-outlet>`.\n\nPara empezar veamos como queda el _html_ del `about.component.ts`. Vamos a dotarlo de dos rutas nuevas `/about/links` y `/about/info`. Cada una mostrará contenido en un componente adecuadamente insertado en el `<router-outlet></router-outlet>` local.\n\n## 3.1 Children\n\nPara repasar conceptos de generación de componentes\n\n```bash\nng g c about/about/links\nng g c about/about/info\n```\n\nPara que funcione empezamos por crear los dos componentes `LinksComponent` e `InfoComponent` de forma rutinaria. Y los asignamos en el `about-routing.module.ts` como subordinados a la ruta principal con el comando `children:[]`. Los caminos se van agregando sobre la ruta principal activa, la `/about`. Esto es así tanto el `routerLink` como el `path` de los `children`.\n\n```typescript\nconst routes: Routes = [\n  {\n    path: '',\n    component: AboutComponent,\n    children: [\n      {\n        path: 'links',\n        component: LinksComponent\n      },\n      {\n        path: 'info',\n        component: InfoComponent\n      }\n    ]\n  }\n];\n```\n\n## 3.2 RouterOutlet anidado\n\nLos componentes de las rutas `children` se inyectarán en el `<router-outlet>` del componente contenedor `AboutComponent`. Es como si todo volviese a empezar desde aquí.\n\n```html\n<header class=\"sticky\">\n  <a routerLink=\"links\" class=\"button\"> <span> Tutorial Links</span> </a>\n  <a routerLink=\"info\" class=\"button\"> <span> More Info</span> </a>\n</header>\n<router-outlet></router-outlet>\n```\n\nCon estos conceptos y la combinación de `children, loadChild, component, redirectTo` ... asociadas a `path` podrás configurar tu aplicación y responder a cualquier _URL_ desde la misma y única página `index.html`.\n\n# 4 Parámetros\n\nLas rutas vistas hasta ahora se consideran estáticas pues se han definido usando constantes. Es muy habitual tener **páginas con la misma estructura pero distintos contenidos**. Un blog con sus posts, una tienda con sus productos, o un proyecto con sus tareas... hay miles de ejemplos así.\n\n## 4.1 Variables en la ruta\n\nEse tipo de direcciones se consideran paramétricas, tienen unos segmentos estáticos y otros dinámicos. Estos últimos se definen con parámetros, algo así como **variables dentro de la cadena de la ruta**. Su sintaxis obliga a precederlas de dos puntos. Por ejemplo `countries/:country/cities/:city` resolvería rutas como _countries/usa/cities/new-york_ o _countries/italy/cities/roma_. Rellenando los parámetros `:country` y `:city` con los valores necesarios.\n\n> Esta aplicación no tiene un propósito de negocio concreto. Iremos creando rutas según sea necesario por motivos pedagógicos. Empezaremos con unas páginas destinadas a mostrar los autores del proyecto.\n\nVamos a crear rutas como _/authors/albertobasalo_ o _/authors/johndoe_. Para ello necesitamos el segmento principal _/authors_ y una par de componentes.\n\nVamos a agregar los componentes necesarios como hasta ahora.\n\n```bash\nng g c about/about/authors\nng g c about/about/authors/author\n```\n\nEn las rutas del `about-routing.module.ts` agregamos un nuevos _children paths_\n\n```typescript\n{\n  path: '',  component: AboutComponent,\n  children: [\n    {\n      path: 'links', component: LinksComponent\n    },\n    {\n      path: 'info', component: InfoComponent\n    },\n    {\n      path: 'authors', component: AuthorsComponent\n    },\n    {\n      path: 'authors/:id', component: AuthorComponent\n    }\n  ]\n}\n```\n\nEsta configuración resuelve las rutas `about/links`, `about/info`, `about/authors` y `about/authors/cualquier-otra-cosa`. Y las carga con el componente adecuado. Lo novedoso en el camino `:id`. El prefijo dos puntos indica que es un parámetro. Algo así como una variable en el segundo segmento que se almacenará y será recogido con el arbitrario nombre `id`.\n\nPara mostrar el uso de los nuevos enlaces he agregado el `authors/` al `AboutComponent` y he creado un listado en el `AuthorsComponent`. Familiarízate con las rutas relativas para componer la ruta completa.\n\n```html\n<a routerLink=\"albertobasalo\" class=\"button\"> <span> Alberto Basalo</span> </a>\n<a routerLink=\"johndoe\" class=\"button\"> <span> John Doe</span> </a>\n```\n\nAún más interesante es el componente que muestra cada autor de la lista, el `AuthorComponent`. En este caso fíjate cómo accede a la ruta, cómo obtiene el valor del parámetro y cómo lo usa para mostrarlo en la web.\n\n## 4.2 ActivatedRoute\n\nEl framework _Angular_ trae muchas librerías para facilitar la vida al programador. Sólo hay que saber dónde están y cómo pedirlas. Para ello volvemos a la tecnología escogida, _TypeScript_, que permite las **importaciones y la inyección de dependencias**. Hay un tema dedicado a conocer en profundidad [los servicios inyectables en Angular](https://academia-binaria.com/servicios-inyectables-en-Angular/). Por ahora una breve introducción.\n\nContenido del fichero `author.component.ts` relacionado con la obtención del parámetro de la ruta activa:\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nexport class AuthorComponent implements OnInit {\n  public authorId = '';\n  constructor(activateRoute: ActivatedRoute) {\n    this.authorId = activateRoute.snapshot.params['id'];\n  }\n  ngOnInit() {}\n}\n```\n\nLa instrucción `import { ActivatedRoute } from \"@angular/router\";` pone a disposición del programador el código donde está definida la clase `ActivatedRoute`. Pero no se instancia directamente; en su lugar, se usa como un argumento del constructor de la clase del componente. Ese constructor es invocado por _Angular_, y dinámicamente el propio framework sabe cómo rellenar los argumentos que se pidan en los constructores. Es decir, sabe cómo inyectar instancias en las que dependencias declaradas.\n\nUna vez que han **inyectan las dependencias en el constructor** ya están listas para ser usadas. En concreto `activateRoute` da acceso a métodos y propiedades para trabajar con la ruta activa y poder leer sus parámetros.\n\nObtenidos los datos desde la _URL_, ya se muestran en la vista de forma ya conocida. Fichero `/about/authors/author/author.component.html`\n\n```html\n<h2>Author profile</h2>\n<h3>{{ authorId }}</h3>\n```\n\nCon esto tendrás una aplicación SPA en _Angular_. Sigue esta serie para añadirle [Formularios, tablas y modelos de datos en Angular](../formularios-tablas-y-modelos-de-datos-en-angular/) mientras aprendes a programar con Angular8.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"paginas-y-rutas-angular-spa","published":1,"updated":"2019-07-24T11:16:40.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4b9000q18s3yfbb52wp","content":"<p><img src=\"/images/tutorial-angular-2_spa.png\" alt=\"paginas-y-rutas-angular-spa\"></p><p>Las <strong>aplicaciones Angular 8 son conjuntos de páginas enrutadas</strong> en el propio navegador. Son las conocidas <em>SPA, Single Page Applications</em>. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.</p><p>En este tutorial aprenderás a crear una Angular SPA fácilmente usando <code>@angular/router</code>, <strong>el enrutador de Angular</strong>.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>. Seguimos usando el concepto de árbol, ahora como analogía de <strong>las rutas y las vistas</strong> asociadas. Al finalizar tendrás una angular SPA con vistas asociadas a sus rutas.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/2-spa\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/2-spa</a></p></blockquote><h1 id=\"1-Rutas\"><a href=\"#1-Rutas\" class=\"headerlink\" title=\"1. Rutas\"></a>1. Rutas</h1><p>Al crear la aplicación hice uso del flag <code>routing true</code> en el comando de generación del <em>CLI</em>. Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el <code>AppModule</code> verdadero módulo raíz, y ahora verás en profundidad a su gemelo: el <strong>módulo de enrutado</strong> <code>AppRoutingModule</code> y el uso que hace del <code>RouterModule</code>.</p><h2 id=\"1-1-RouterModule\"><a href=\"#1-1-RouterModule\" class=\"headerlink\" title=\"1.1 RouterModule\"></a>1.1 RouterModule</h2><p>El <em>Angular Router</em> necesita ser importado y configurado. El módulo <code>AppRoutingModule</code> cumple dos funciones. Por un lado <strong>importa al <code>RouterModule</code></strong> de Angular, el cual contiene toda la lógica necesaria para enrutar en el navegador. Por otro lado, permite la <strong>definición de rutas</strong> en el array <code>Routes[]</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'heroes'</span>,</span><br><span class=\"line\">    component: HeroesComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'not-found'</span>,</span><br><span class=\"line\">    component: NotFoundComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'not-found'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>El array de rutas recibe <strong>objetos ruta</strong> con propiedades de configuración.</p><p>La primera es <code>path:</code> en la que se especifica <strong>la dirección</strong> que resuelve, en este caso la ruta vacía o raíz del árbol de rutas. Las otras son opcionales y las veremos poco a poco.</p><h3 id=\"1-1-1-Component\"><a href=\"#1-1-1-Component\" class=\"headerlink\" title=\"1.1.1 Component\"></a>1.1.1 Component</h3><p>Vamos a crear un componente donde guardar el contenido que el CLI nos regala de inicio. Los enlaces a las páginas oficiales de Angular y al ejemplo del <em>Tour Of Heroes</em>. Para ello crearé el componente HeroesComponent.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c heroes</span><br></pre></td></tr></table></figure><p>Lo hago en la carpeta raíz; algo poco aconsejado si queremos tener una estructura escalable. Pero es un buen anti-ejemplo ;-) Su contenido es una copia de la página original creada por Angular.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Initial Links to start: <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">href</span>=<span class=\"string\">\"https://angular.io/tutorial\"</span>&gt;</span>Tour of Heroes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">href</span>=<span class=\"string\">\"https://angular.io/cli\"</span>&gt;</span>CLI Documentation<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">href</span>=<span class=\"string\">\"https://blog.angular.io/\"</span>&gt;</span>Angular blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ahora debo decidir qué ruta asociarle… por ejemplo <code>/heroes</code>. Eso es lo que se ve en el inicio de la configuración de rutas. Para no perderme lo ideal es tener un nuevo enlace de navegación en el <code>HeaderComponent</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sticky\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-home\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"heroes\"</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">\"router-link-active\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Heroes<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vayamos casi al final y de paso hagamos algo útil para no volver a perdernos sin remedio. Un detector de rutas no contempladas, y una ruta a dónde redirigir a los usuarios perdidos. Para ello estudiaremos la propiedad <code>component</code> que es fundamental pues indica <strong>el componente</strong> que se debe mostrar cuando esta ruta se active.</p><p>Así es cómo funciona el enrutado. Un camino y un componente asociado. La tabla de enrutado se procesa de arriba a abajo y cuando un camino coincide con la ruta actual, se para y se carga el componente.</p><p>Vamos a crear un componente con la intención de mostrarlo sólo cuando las demás ruta fallen. Se llamará <em>not found</em> Lo creo asociado al <code>CoreModule</code> lo cual ayuda a organizar los elementos de la aplicación.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c core/not-found</span><br></pre></td></tr></table></figure><p>Ya podemos asociar dicho componente al camino <code>not-found</code>. Pero esto es poca cosa. Hay mucho más.</p><h3 id=\"1-1-2-RedirectTo\"><a href=\"#1-1-2-RedirectTo\" class=\"headerlink\" title=\"1.1.2 RedirectTo\"></a>1.1.2 RedirectTo</h3><p>La configuración de rutas no sólo permite asignar componentes a las direcciones. También se pueden hacer <strong>redirecciones de unas direcciones a otras</strong>. Y por supuesto puede haber <strong>rutas no contempladas o errores</strong> por parte del usuario, los infames <code>404 Not Found</code>.</p><blockquote><p>En este caso cuando se escriba la ruta <code>/not-foud</code> se mostrará un componente, el <code>NotFoundComponent</code>, cuyo contenido indicará al usuario que se ha perdido. Claro que nadie va voluntariamente a esa ruta. Mediante el <code>path: &#39;**&#39;</code> le indico que ante cualquier ruta no contemplada anteriormente se ejecute el comando <code>redirectTo: &#39;not-found&#39;</code>, el cual nos lleva a una ruta conocida con un mensaje bien conocido. <em>Page Not Found</em>.</p></blockquote><p>Pero ¿Cómo es eso de que se mostrará?, ¿Dónde se cargará?. Presentamos a <code>&lt;router-outlet&gt;</code>.</p><h2 id=\"1-2-Router-Outlet\"><a href=\"#1-2-Router-Outlet\" class=\"headerlink\" title=\"1.2 Router Outlet\"></a>1.2 Router Outlet</h2><p>La idea general de <strong>una SPA es tener una única página que cargue dinámicamente otras vistas</strong>. Normalmente la página contenedora mantiene el menú de navegación, el pie de página y otras áreas comunes. Y deja un espacio para la carga dinámica. Para ello necesitamos saber <strong>qué componente cargar y dónde mostrarlo</strong>. De esto último se ocupa el <em>router outlet</em> mediante la etiqueta <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>.</p><p>En el <code>main.component.ts</code> había un contenido <em>hard-coded</em>. Para hacer que el contenido sea dinámico se sustituye por el elemento de Angular <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. Este elemento del framework inyectará dinámicamente el componente que le corresponda según la ruta activa. El <code>MainComponent</code> queda así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Dynamic content here! --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"1-3-Router-Link\"><a href=\"#1-3-Router-Link\" class=\"headerlink\" title=\"1.3 Router Link\"></a>1.3 Router Link</h2><p>Los enlaces web tradicionalmente se han resuelto con elementos <code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code> dónde en su atributo <code>href</code> se asociaba la dirección a la cuál navegar ante el click del usuario. <strong>En Angular los enlaces se declaran con un atributo</strong> especial llamado <code>routerLink</code>. Este atributo <strong>se compila dando lugar al <code>href</code></strong> oportuno en tiempo de ejecución.</p><p>En el fichero <code>not-found.component.ts</code> pon algo así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Not Found<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>404<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/\"</span>&gt;</span>Go home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Por ahora la funcionalidad de <code>routerLink</code> no mejora en nada a <code>href</code>. Pero lo hará. Mientras tanto familiarízate con su sintaxis y… asegúrate de importar <code>RouterModule</code> en los módulos en los que lo vayas a usar.</p></blockquote><p>Salgamos de este bucle creando más rutas y más componentes. Pero esta vez con un nueva técnica.</p><h1 id=\"2-Lazy-Loading\"><a href=\"#2-Lazy-Loading\" class=\"headerlink\" title=\"2 Lazy Loading\"></a>2 Lazy Loading</h1><p>La web clásica funcionaba con un navegador pidiendo una ruta al servidor. El servidor buscaba o montaba un documento html y se lo devolvía al navegador para que lo renderizase. Una nueva ruta significaba repetir todo ese viaje. Hasta que aparecieron las <a href=\"https://en.wikipedia.org/wiki/Single-page_application\" target=\"_blank\" rel=\"noopener\">Single Page Applications</a>. En este caso el código cliente es el responsable del contenido asociado a cada ruta. Y eso es mucha responsabilidad.</p><p>Las <em>webs SPA</em> se crearon por una razón que casi acaba con ellas: <strong>la velocidad</strong>. Al realizar el enrutado en el cliente y querer evitar todos los viajes posibles hasta el servidor, se cargó a la única página web con todo el peso de la aplicación. Lo cual la hizo terriblemente lenta en la primera visita de cada usuario.</p><p>El <strong>impacto de la primera visita</strong> en una aplicación de intranet no suele ser un problema grave. Pero en internet esa visita puede ser la primera y si tarda mucho, también será la última. La solución viene de mano del concepto de <em>lazy loading</em> o carga perezosa. Consiste en diferir la carga de la lógica asociada a una dirección hasta el momento en que sea activada dicha ruta. De esa forma, <strong>una página no visitada es una página que no pesa</strong>. Y la carga inicial se hace mucho más liviana.</p><p>En Angular el <em>lazy loading</em> es tan sencillo que ya se recomienda implementarlo por defecto. Para hacerlo conoceremos más comandos del <code>Router</code> y algunas herramientas de compilación usadas por el <em>Angular CLI</em>.</p><h2 id=\"2-1-Webpack-y-los-bundles-por-ruta\"><a href=\"#2-1-Webpack-y-los-bundles-por-ruta\" class=\"headerlink\" title=\"2.1 Webpack y los bundles por ruta\"></a>2.1 Webpack y los bundles por ruta</h2><p>Hay que saber que el <em>Angular CLI</em> usa internamente la herramienta de empaquetado <em>webpack</em>. La cual recorre el código <em>TypeScript</em> buscando <code>imports</code> y empaquetando su contenido en sacos o <em>bundles</em>. Luego introduce las referencias a esos <em>bundles</em> en la sección se <em>scripts</em> del index.html, haciendo que se descarguen todos nada más arrancar la aplicación. Esto puede ser muy pesado en aplicaciones grandes. Así que hay que buscar una manera de diferir esa descarga, repartiendo el <em>bundle</em> principal en otros más pequeños que se cargará bajo demanda.</p><p>Objetivo: adelgazar el peso del <em>bundle</em> principal, el <code>main.js</code>.Para conseguirlo hay que configurar las rutas de forma que no sea necesario importar los componentes a mostrar. Tal como se ha hecho con el <code>NotFoundComponent</code>, de hacerlo así con todos, <em>webpack</em> empaquetaría esos componentes como algo necesario… y por tanto serían enviados al navegador en el <em>bundle</em> principal sin que sea seguro su uso. Ese no es el camino, es una excepción para componentes poco pesados y muy utilizados.</p><p>La solución que ofrecen el <em>cli</em> y <em>webpack</em> consiste en <strong>delegar la asignación del componente a otro módulo, pero sin importarlo</strong> hasta que su ruta principal se active.</p><p>He creado unas vistas para ser usadas en las direcciones <code>/</code> y <code>/about</code>. Los componentes asociados se llaman <code>HomeComponent</code> u <code>AboutComponent</code>. Se han <strong>declarado pero no exportado</strong> en sus respectivos módulos <code>HomeModule</code> y <code>AboutModule</code>. No es necesario exportarlos porque no serán reclamados directamente por nuestro código.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m home --routing <span class=\"literal\">true</span></span><br><span class=\"line\">ng g c home/home</span><br><span class=\"line\">ng g m about --routing <span class=\"literal\">true</span></span><br><span class=\"line\">ng g c about/about</span><br></pre></td></tr></table></figure><p>Estos módulos no deben ser importados por el <code>AppModule</code>; no queremos saber de su existencia. Para ello emplearemos una función que importe el módulo desde su ruta relativa, sin incluirlo en la sección de <em>imports</em> que procesa <em>webpack</em>. Vamos a agregarlo al <code>app-routing.module.ts</code> que quedará así.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">''</span>,</span><br><span class=\"line\">    loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./home/home.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.HomeModule)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'about'</span>,</span><br><span class=\"line\">    loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./about/about.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.AboutModule)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'not-found'</span>,</span><br><span class=\"line\">    component: NotFoundComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'not-found'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Ojo, esta es una novedad de <strong>Angular 8</strong>. Fíjate que <strong>la dirección del fichero es una cadena de texto</strong> asignada a una función dentro del objeto <em>route</em>, en la propiedad <code>loadChildren:&quot;&quot;</code>.</p></blockquote><p>No se está produciendo ninguna importación en <em>TypeScript</em> como ocurre con el componente <code>NotFoundComponent</code>. Con esta información <em>webpack</em> va a generar un <em>bundle</em> específico para cada módulo. Si durante la ejecución se activa la ruta <code>/</code> (muy probable porque es la ruta raíz) o la ruta <code>/about</code> entonces se descarga ese paquete concreto y se ejecuta su contenido. Mientras tanto, se queda almacenado en el servidor.</p><p>Esto hace que la aplicación de Angular pese menos y responda antes, mejorando el tiempo de pintado inicial. La combinación de estas y otras técnicas que veremos en este tutorial sacarán el mejor rendimiento posible a tu aplicación Angular.</p><h2 id=\"2-2-El-enrutador-delegado\"><a href=\"#2-2-El-enrutador-delegado\" class=\"headerlink\" title=\"2.2 El enrutador delegado\"></a>2.2 El enrutador delegado</h2><p>Ya sabemos que hasta que no se active la ruta <code>/</code> o la <code>/about</code> no hay que hacer nada. Pero si se activa, entonces se descarga un <em>bundle</em> que contiene un módulo y los componentes necesarios. Sólo falta escoger dentro de ese módulo el componente que se asignará a la ruta.</p><p>Para eso al crear los módulos Home y About use el <em>flag</em> <code>routing true</code>. Esto hace que se genere un segundo módulo de enrutado. El <code>HomeRoutingModule</code> y el <code>AboutRoutingModule</code> son prácticamente idénticos al enrutador raíz.</p><blockquote><p>Digamos que son <strong>enrutadores subordinados</strong> al primero. Sólo se llega aquí si en la ruta principal se ha navegado a una dirección concreta. Se hace notar esa distinción durante el proceso de importación del módulo de Angular <code>RouterModule</code>. En el caso principal se pone <code>imports: [RouterModule.forRoot(routes)]</code> y en todos los demás <code>imports: [RouterModule.forChild(routes)]</code>.</p></blockquote><p>A nivel subordinado, la dirección <code>path: &quot;&quot;</code> se agrega al <code>path: &quot;&quot;</code> de su enrutador padre. Cuidado, es un error común repetir el <em>path</em> a nivel hijo. En este caso incluso parece redundante. Pero con <em>about</em> no quedan dudas. En el <em>root</em> lleva <code>path: &quot;about&quot;</code> y en el <em>child</em> solamente <code>path: &quot;&quot;</code>.</p><p>La ventaja real de este segundo enrutador es que irá empaquetado en el mismo <em>bundle</em> que el módulo de negocio y sus componentes. Descargando ese peso en el momento que se necesite. Aquí sí que asignaremos un componente concreto: el <code>HomeComponent</code> o el <code>AboutComponent</code>. Por ejemplo el fichero <code>home-routing.module.ts</code> quedará más o menos así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home/home.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">''</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forChild(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HomeRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-3-Navegacion\"><a href=\"#2-3-Navegacion\" class=\"headerlink\" title=\"2.3 Navegación\"></a>2.3 Navegación</h2><p>Ahora que ya tenemos un par de rutas reales, es buen momento para crear un mini menú de navegación. Vayamos al <code>core/shell/header.component.html</code> y pongamos algo así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sticky\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-home\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"about\"</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">\"router-link-active\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"32\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"vertical-align: -0.5em\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> About us<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"3-Rutas-anidadas\"><a href=\"#3-Rutas-anidadas\" class=\"headerlink\" title=\"3 Rutas anidadas\"></a>3 Rutas anidadas</h1><p>Cuando las interfaces se complican, es habitual que las aplicaciones dispongan de menús de navegación a distintos niveles. Dentro de una misma página podemos querer ver distinto contenido y además reflejarlo en la <em>URL</em>. Para resolver esta situación en Angular disponemos de la técnica de las <em>nested routes</em>.</p><blockquote><p>De una manera un tanto forzada la he incluido en la página <code>/about</code>. La cual disponen de su propio menú de navegación, y lo que es más importante, su propio <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>.</p></blockquote><p>Para empezar veamos como queda el <em>html</em> del <code>about.component.ts</code>. Vamos a dotarlo de dos rutas nuevas <code>/about/links</code> y <code>/about/info</code>. Cada una mostrará contenido en un componente adecuadamente insertado en el <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> local.</p><h2 id=\"3-1-Children\"><a href=\"#3-1-Children\" class=\"headerlink\" title=\"3.1 Children\"></a>3.1 Children</h2><p>Para repasar conceptos de generación de componentes</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c about/about/links</span><br><span class=\"line\">ng g c about/about/info</span><br></pre></td></tr></table></figure><p>Para que funcione empezamos por crear los dos componentes <code>LinksComponent</code> e <code>InfoComponent</code> de forma rutinaria. Y los asignamos en el <code>about-routing.module.ts</code> como subordinados a la ruta principal con el comando <code>children:[]</code>. Los caminos se van agregando sobre la ruta principal activa, la <code>/about</code>. Esto es así tanto el <code>routerLink</code> como el <code>path</code> de los <code>children</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">''</span>,</span><br><span class=\"line\">    component: AboutComponent,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'links'</span>,</span><br><span class=\"line\">        component: LinksComponent</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'info'</span>,</span><br><span class=\"line\">        component: InfoComponent</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><h2 id=\"3-2-RouterOutlet-anidado\"><a href=\"#3-2-RouterOutlet-anidado\" class=\"headerlink\" title=\"3.2 RouterOutlet anidado\"></a>3.2 RouterOutlet anidado</h2><p>Los componentes de las rutas <code>children</code> se inyectarán en el <code>&lt;router-outlet&gt;</code> del componente contenedor <code>AboutComponent</code>. Es como si todo volviese a empezar desde aquí.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sticky\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"links\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Tutorial Links<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> More Info<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Con estos conceptos y la combinación de <code>children, loadChild, component, redirectTo</code> … asociadas a <code>path</code> podrás configurar tu aplicación y responder a cualquier <em>URL</em> desde la misma y única página <code>index.html</code>.</p><h1 id=\"4-Parametros\"><a href=\"#4-Parametros\" class=\"headerlink\" title=\"4 Parámetros\"></a>4 Parámetros</h1><p>Las rutas vistas hasta ahora se consideran estáticas pues se han definido usando constantes. Es muy habitual tener <strong>páginas con la misma estructura pero distintos contenidos</strong>. Un blog con sus posts, una tienda con sus productos, o un proyecto con sus tareas… hay miles de ejemplos así.</p><h2 id=\"4-1-Variables-en-la-ruta\"><a href=\"#4-1-Variables-en-la-ruta\" class=\"headerlink\" title=\"4.1 Variables en la ruta\"></a>4.1 Variables en la ruta</h2><p>Ese tipo de direcciones se consideran paramétricas, tienen unos segmentos estáticos y otros dinámicos. Estos últimos se definen con parámetros, algo así como <strong>variables dentro de la cadena de la ruta</strong>. Su sintaxis obliga a precederlas de dos puntos. Por ejemplo <code>countries/:country/cities/:city</code> resolvería rutas como <em>countries/usa/cities/new-york</em> o <em>countries/italy/cities/roma</em>. Rellenando los parámetros <code>:country</code> y <code>:city</code> con los valores necesarios.</p><blockquote><p>Esta aplicación no tiene un propósito de negocio concreto. Iremos creando rutas según sea necesario por motivos pedagógicos. Empezaremos con unas páginas destinadas a mostrar los autores del proyecto.</p></blockquote><p>Vamos a crear rutas como <em>/authors/albertobasalo</em> o <em>/authors/johndoe</em>. Para ello necesitamos el segmento principal <em>/authors</em> y una par de componentes.</p><p>Vamos a agregar los componentes necesarios como hasta ahora.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c about/about/authors</span><br><span class=\"line\">ng g c about/about/authors/author</span><br></pre></td></tr></table></figure><p>En las rutas del <code>about-routing.module.ts</code> agregamos un nuevos <em>children paths</em></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">''</span>,  component: AboutComponent,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'links'</span>, component: LinksComponent</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'info'</span>, component: InfoComponent</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'authors'</span>, component: AuthorsComponent</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'authors/:id'</span>, component: AuthorComponent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Esta configuración resuelve las rutas <code>about/links</code>, <code>about/info</code>, <code>about/authors</code> y <code>about/authors/cualquier-otra-cosa</code>. Y las carga con el componente adecuado. Lo novedoso en el camino <code>:id</code>. El prefijo dos puntos indica que es un parámetro. Algo así como una variable en el segundo segmento que se almacenará y será recogido con el arbitrario nombre <code>id</code>.</p><p>Para mostrar el uso de los nuevos enlaces he agregado el <code>authors/</code> al <code>AboutComponent</code> y he creado un listado en el <code>AuthorsComponent</code>. Familiarízate con las rutas relativas para componer la ruta completa.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"albertobasalo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Alberto Basalo<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"johndoe\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> John Doe<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Aún más interesante es el componente que muestra cada autor de la lista, el <code>AuthorComponent</code>. En este caso fíjate cómo accede a la ruta, cómo obtiene el valor del parámetro y cómo lo usa para mostrarlo en la web.</p><h2 id=\"4-2-ActivatedRoute\"><a href=\"#4-2-ActivatedRoute\" class=\"headerlink\" title=\"4.2 ActivatedRoute\"></a>4.2 ActivatedRoute</h2><p>El framework <em>Angular</em> trae muchas librerías para facilitar la vida al programador. Sólo hay que saber dónde están y cómo pedirlas. Para ello volvemos a la tecnología escogida, <em>TypeScript</em>, que permite las <strong>importaciones y la inyección de dependencias</strong>. Hay un tema dedicado a conocer en profundidad <a href=\"https://academia-binaria.com/servicios-inyectables-en-Angular/\">los servicios inyectables en Angular</a>. Por ahora una breve introducción.</p><p>Contenido del fichero <code>author.component.ts</code> relacionado con la obtención del parámetro de la ruta activa:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuthorComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> authorId = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">activateRoute: ActivatedRoute</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.authorId = activateRoute.snapshot.params[<span class=\"string\">'id'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>La instrucción <code>import { ActivatedRoute } from &quot;@angular/router&quot;;</code> pone a disposición del programador el código donde está definida la clase <code>ActivatedRoute</code>. Pero no se instancia directamente; en su lugar, se usa como un argumento del constructor de la clase del componente. Ese constructor es invocado por <em>Angular</em>, y dinámicamente el propio framework sabe cómo rellenar los argumentos que se pidan en los constructores. Es decir, sabe cómo inyectar instancias en las que dependencias declaradas.</p><p>Una vez que han <strong>inyectan las dependencias en el constructor</strong> ya están listas para ser usadas. En concreto <code>activateRoute</code> da acceso a métodos y propiedades para trabajar con la ruta activa y poder leer sus parámetros.</p><p>Obtenidos los datos desde la <em>URL</em>, ya se muestran en la vista de forma ya conocida. Fichero <code>/about/authors/author/author.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Author profile<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123; authorId &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Con esto tendrás una aplicación SPA en <em>Angular</em>. Sigue esta serie para añadirle <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a> mientras aprendes a programar con Angular8.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-2_spa.png\" alt=\"paginas-y-rutas-angular-spa\"></p><p>Las <strong>aplicaciones Angular 8 son conjuntos de páginas enrutadas</strong> en el propio navegador. Son las conocidas <em>SPA, Single Page Applications</em>. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.</p><p>En este tutorial aprenderás a crear una Angular SPA fácilmente usando <code>@angular/router</code>, <strong>el enrutador de Angular</strong>.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../base-aplicacion-angular/\">Base para una aplicación Angular</a>. Seguimos usando el concepto de árbol, ahora como analogía de <strong>las rutas y las vistas</strong> asociadas. Al finalizar tendrás una angular SPA con vistas asociadas a sus rutas.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-basic/tree/master/src/app/2-spa\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-basic/2-spa</a></p></blockquote><h1 id=\"1-Rutas\"><a href=\"#1-Rutas\" class=\"headerlink\" title=\"1. Rutas\"></a>1. Rutas</h1><p>Al crear la aplicación hice uso del flag <code>routing true</code> en el comando de generación del <em>CLI</em>. Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el <code>AppModule</code> verdadero módulo raíz, y ahora verás en profundidad a su gemelo: el <strong>módulo de enrutado</strong> <code>AppRoutingModule</code> y el uso que hace del <code>RouterModule</code>.</p><h2 id=\"1-1-RouterModule\"><a href=\"#1-1-RouterModule\" class=\"headerlink\" title=\"1.1 RouterModule\"></a>1.1 RouterModule</h2><p>El <em>Angular Router</em> necesita ser importado y configurado. El módulo <code>AppRoutingModule</code> cumple dos funciones. Por un lado <strong>importa al <code>RouterModule</code></strong> de Angular, el cual contiene toda la lógica necesaria para enrutar en el navegador. Por otro lado, permite la <strong>definición de rutas</strong> en el array <code>Routes[]</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'heroes'</span>,</span><br><span class=\"line\">    component: HeroesComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'not-found'</span>,</span><br><span class=\"line\">    component: NotFoundComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'not-found'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>El array de rutas recibe <strong>objetos ruta</strong> con propiedades de configuración.</p><p>La primera es <code>path:</code> en la que se especifica <strong>la dirección</strong> que resuelve, en este caso la ruta vacía o raíz del árbol de rutas. Las otras son opcionales y las veremos poco a poco.</p><h3 id=\"1-1-1-Component\"><a href=\"#1-1-1-Component\" class=\"headerlink\" title=\"1.1.1 Component\"></a>1.1.1 Component</h3><p>Vamos a crear un componente donde guardar el contenido que el CLI nos regala de inicio. Los enlaces a las páginas oficiales de Angular y al ejemplo del <em>Tour Of Heroes</em>. Para ello crearé el componente HeroesComponent.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c heroes</span><br></pre></td></tr></table></figure><p>Lo hago en la carpeta raíz; algo poco aconsejado si queremos tener una estructura escalable. Pero es un buen anti-ejemplo ;-) Su contenido es una copia de la página original creada por Angular.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Initial Links to start: <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">href</span>=<span class=\"string\">\"https://angular.io/tutorial\"</span>&gt;</span>Tour of Heroes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">href</span>=<span class=\"string\">\"https://angular.io/cli\"</span>&gt;</span>CLI Documentation<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">rel</span>=<span class=\"string\">\"noopener\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">href</span>=<span class=\"string\">\"https://blog.angular.io/\"</span>&gt;</span>Angular blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ahora debo decidir qué ruta asociarle… por ejemplo <code>/heroes</code>. Eso es lo que se ve en el inicio de la configuración de rutas. Para no perderme lo ideal es tener un nuevo enlace de navegación en el <code>HeaderComponent</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sticky\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-home\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"heroes\"</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">\"router-link-active\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Heroes<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vayamos casi al final y de paso hagamos algo útil para no volver a perdernos sin remedio. Un detector de rutas no contempladas, y una ruta a dónde redirigir a los usuarios perdidos. Para ello estudiaremos la propiedad <code>component</code> que es fundamental pues indica <strong>el componente</strong> que se debe mostrar cuando esta ruta se active.</p><p>Así es cómo funciona el enrutado. Un camino y un componente asociado. La tabla de enrutado se procesa de arriba a abajo y cuando un camino coincide con la ruta actual, se para y se carga el componente.</p><p>Vamos a crear un componente con la intención de mostrarlo sólo cuando las demás ruta fallen. Se llamará <em>not found</em> Lo creo asociado al <code>CoreModule</code> lo cual ayuda a organizar los elementos de la aplicación.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c core/not-found</span><br></pre></td></tr></table></figure><p>Ya podemos asociar dicho componente al camino <code>not-found</code>. Pero esto es poca cosa. Hay mucho más.</p><h3 id=\"1-1-2-RedirectTo\"><a href=\"#1-1-2-RedirectTo\" class=\"headerlink\" title=\"1.1.2 RedirectTo\"></a>1.1.2 RedirectTo</h3><p>La configuración de rutas no sólo permite asignar componentes a las direcciones. También se pueden hacer <strong>redirecciones de unas direcciones a otras</strong>. Y por supuesto puede haber <strong>rutas no contempladas o errores</strong> por parte del usuario, los infames <code>404 Not Found</code>.</p><blockquote><p>En este caso cuando se escriba la ruta <code>/not-foud</code> se mostrará un componente, el <code>NotFoundComponent</code>, cuyo contenido indicará al usuario que se ha perdido. Claro que nadie va voluntariamente a esa ruta. Mediante el <code>path: &#39;**&#39;</code> le indico que ante cualquier ruta no contemplada anteriormente se ejecute el comando <code>redirectTo: &#39;not-found&#39;</code>, el cual nos lleva a una ruta conocida con un mensaje bien conocido. <em>Page Not Found</em>.</p></blockquote><p>Pero ¿Cómo es eso de que se mostrará?, ¿Dónde se cargará?. Presentamos a <code>&lt;router-outlet&gt;</code>.</p><h2 id=\"1-2-Router-Outlet\"><a href=\"#1-2-Router-Outlet\" class=\"headerlink\" title=\"1.2 Router Outlet\"></a>1.2 Router Outlet</h2><p>La idea general de <strong>una SPA es tener una única página que cargue dinámicamente otras vistas</strong>. Normalmente la página contenedora mantiene el menú de navegación, el pie de página y otras áreas comunes. Y deja un espacio para la carga dinámica. Para ello necesitamos saber <strong>qué componente cargar y dónde mostrarlo</strong>. De esto último se ocupa el <em>router outlet</em> mediante la etiqueta <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>.</p><p>En el <code>main.component.ts</code> había un contenido <em>hard-coded</em>. Para hacer que el contenido sea dinámico se sustituye por el elemento de Angular <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. Este elemento del framework inyectará dinámicamente el componente que le corresponda según la ruta activa. El <code>MainComponent</code> queda así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Dynamic content here! --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"1-3-Router-Link\"><a href=\"#1-3-Router-Link\" class=\"headerlink\" title=\"1.3 Router Link\"></a>1.3 Router Link</h2><p>Los enlaces web tradicionalmente se han resuelto con elementos <code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code> dónde en su atributo <code>href</code> se asociaba la dirección a la cuál navegar ante el click del usuario. <strong>En Angular los enlaces se declaran con un atributo</strong> especial llamado <code>routerLink</code>. Este atributo <strong>se compila dando lugar al <code>href</code></strong> oportuno en tiempo de ejecución.</p><p>En el fichero <code>not-found.component.ts</code> pon algo así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Not Found<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>404<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/\"</span>&gt;</span>Go home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Por ahora la funcionalidad de <code>routerLink</code> no mejora en nada a <code>href</code>. Pero lo hará. Mientras tanto familiarízate con su sintaxis y… asegúrate de importar <code>RouterModule</code> en los módulos en los que lo vayas a usar.</p></blockquote><p>Salgamos de este bucle creando más rutas y más componentes. Pero esta vez con un nueva técnica.</p><h1 id=\"2-Lazy-Loading\"><a href=\"#2-Lazy-Loading\" class=\"headerlink\" title=\"2 Lazy Loading\"></a>2 Lazy Loading</h1><p>La web clásica funcionaba con un navegador pidiendo una ruta al servidor. El servidor buscaba o montaba un documento html y se lo devolvía al navegador para que lo renderizase. Una nueva ruta significaba repetir todo ese viaje. Hasta que aparecieron las <a href=\"https://en.wikipedia.org/wiki/Single-page_application\" target=\"_blank\" rel=\"noopener\">Single Page Applications</a>. En este caso el código cliente es el responsable del contenido asociado a cada ruta. Y eso es mucha responsabilidad.</p><p>Las <em>webs SPA</em> se crearon por una razón que casi acaba con ellas: <strong>la velocidad</strong>. Al realizar el enrutado en el cliente y querer evitar todos los viajes posibles hasta el servidor, se cargó a la única página web con todo el peso de la aplicación. Lo cual la hizo terriblemente lenta en la primera visita de cada usuario.</p><p>El <strong>impacto de la primera visita</strong> en una aplicación de intranet no suele ser un problema grave. Pero en internet esa visita puede ser la primera y si tarda mucho, también será la última. La solución viene de mano del concepto de <em>lazy loading</em> o carga perezosa. Consiste en diferir la carga de la lógica asociada a una dirección hasta el momento en que sea activada dicha ruta. De esa forma, <strong>una página no visitada es una página que no pesa</strong>. Y la carga inicial se hace mucho más liviana.</p><p>En Angular el <em>lazy loading</em> es tan sencillo que ya se recomienda implementarlo por defecto. Para hacerlo conoceremos más comandos del <code>Router</code> y algunas herramientas de compilación usadas por el <em>Angular CLI</em>.</p><h2 id=\"2-1-Webpack-y-los-bundles-por-ruta\"><a href=\"#2-1-Webpack-y-los-bundles-por-ruta\" class=\"headerlink\" title=\"2.1 Webpack y los bundles por ruta\"></a>2.1 Webpack y los bundles por ruta</h2><p>Hay que saber que el <em>Angular CLI</em> usa internamente la herramienta de empaquetado <em>webpack</em>. La cual recorre el código <em>TypeScript</em> buscando <code>imports</code> y empaquetando su contenido en sacos o <em>bundles</em>. Luego introduce las referencias a esos <em>bundles</em> en la sección se <em>scripts</em> del index.html, haciendo que se descarguen todos nada más arrancar la aplicación. Esto puede ser muy pesado en aplicaciones grandes. Así que hay que buscar una manera de diferir esa descarga, repartiendo el <em>bundle</em> principal en otros más pequeños que se cargará bajo demanda.</p><p>Objetivo: adelgazar el peso del <em>bundle</em> principal, el <code>main.js</code>.Para conseguirlo hay que configurar las rutas de forma que no sea necesario importar los componentes a mostrar. Tal como se ha hecho con el <code>NotFoundComponent</code>, de hacerlo así con todos, <em>webpack</em> empaquetaría esos componentes como algo necesario… y por tanto serían enviados al navegador en el <em>bundle</em> principal sin que sea seguro su uso. Ese no es el camino, es una excepción para componentes poco pesados y muy utilizados.</p><p>La solución que ofrecen el <em>cli</em> y <em>webpack</em> consiste en <strong>delegar la asignación del componente a otro módulo, pero sin importarlo</strong> hasta que su ruta principal se active.</p><p>He creado unas vistas para ser usadas en las direcciones <code>/</code> y <code>/about</code>. Los componentes asociados se llaman <code>HomeComponent</code> u <code>AboutComponent</code>. Se han <strong>declarado pero no exportado</strong> en sus respectivos módulos <code>HomeModule</code> y <code>AboutModule</code>. No es necesario exportarlos porque no serán reclamados directamente por nuestro código.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m home --routing <span class=\"literal\">true</span></span><br><span class=\"line\">ng g c home/home</span><br><span class=\"line\">ng g m about --routing <span class=\"literal\">true</span></span><br><span class=\"line\">ng g c about/about</span><br></pre></td></tr></table></figure><p>Estos módulos no deben ser importados por el <code>AppModule</code>; no queremos saber de su existencia. Para ello emplearemos una función que importe el módulo desde su ruta relativa, sin incluirlo en la sección de <em>imports</em> que procesa <em>webpack</em>. Vamos a agregarlo al <code>app-routing.module.ts</code> que quedará así.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">''</span>,</span><br><span class=\"line\">    loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./home/home.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.HomeModule)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'about'</span>,</span><br><span class=\"line\">    loadChildren: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./about/about.module'</span>).then(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.AboutModule)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'not-found'</span>,</span><br><span class=\"line\">    component: NotFoundComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'**'</span>,</span><br><span class=\"line\">    redirectTo: <span class=\"string\">'not-found'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Ojo, esta es una novedad de <strong>Angular 8</strong>. Fíjate que <strong>la dirección del fichero es una cadena de texto</strong> asignada a una función dentro del objeto <em>route</em>, en la propiedad <code>loadChildren:&quot;&quot;</code>.</p></blockquote><p>No se está produciendo ninguna importación en <em>TypeScript</em> como ocurre con el componente <code>NotFoundComponent</code>. Con esta información <em>webpack</em> va a generar un <em>bundle</em> específico para cada módulo. Si durante la ejecución se activa la ruta <code>/</code> (muy probable porque es la ruta raíz) o la ruta <code>/about</code> entonces se descarga ese paquete concreto y se ejecuta su contenido. Mientras tanto, se queda almacenado en el servidor.</p><p>Esto hace que la aplicación de Angular pese menos y responda antes, mejorando el tiempo de pintado inicial. La combinación de estas y otras técnicas que veremos en este tutorial sacarán el mejor rendimiento posible a tu aplicación Angular.</p><h2 id=\"2-2-El-enrutador-delegado\"><a href=\"#2-2-El-enrutador-delegado\" class=\"headerlink\" title=\"2.2 El enrutador delegado\"></a>2.2 El enrutador delegado</h2><p>Ya sabemos que hasta que no se active la ruta <code>/</code> o la <code>/about</code> no hay que hacer nada. Pero si se activa, entonces se descarga un <em>bundle</em> que contiene un módulo y los componentes necesarios. Sólo falta escoger dentro de ese módulo el componente que se asignará a la ruta.</p><p>Para eso al crear los módulos Home y About use el <em>flag</em> <code>routing true</code>. Esto hace que se genere un segundo módulo de enrutado. El <code>HomeRoutingModule</code> y el <code>AboutRoutingModule</code> son prácticamente idénticos al enrutador raíz.</p><blockquote><p>Digamos que son <strong>enrutadores subordinados</strong> al primero. Sólo se llega aquí si en la ruta principal se ha navegado a una dirección concreta. Se hace notar esa distinción durante el proceso de importación del módulo de Angular <code>RouterModule</code>. En el caso principal se pone <code>imports: [RouterModule.forRoot(routes)]</code> y en todos los demás <code>imports: [RouterModule.forChild(routes)]</code>.</p></blockquote><p>A nivel subordinado, la dirección <code>path: &quot;&quot;</code> se agrega al <code>path: &quot;&quot;</code> de su enrutador padre. Cuidado, es un error común repetir el <em>path</em> a nivel hijo. En este caso incluso parece redundante. Pero con <em>about</em> no quedan dudas. En el <em>root</em> lleva <code>path: &quot;about&quot;</code> y en el <em>child</em> solamente <code>path: &quot;&quot;</code>.</p><p>La ventaja real de este segundo enrutador es que irá empaquetado en el mismo <em>bundle</em> que el módulo de negocio y sus componentes. Descargando ese peso en el momento que se necesite. Aquí sí que asignaremos un componente concreto: el <code>HomeComponent</code> o el <code>AboutComponent</code>. Por ejemplo el fichero <code>home-routing.module.ts</code> quedará más o menos así:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./home/home.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">''</span>,</span><br><span class=\"line\">    component: HomeComponent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [RouterModule.forChild(routes)],</span><br><span class=\"line\">  exports: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HomeRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"2-3-Navegacion\"><a href=\"#2-3-Navegacion\" class=\"headerlink\" title=\"2.3 Navegación\"></a>2.3 Navegación</h2><p>Ahora que ya tenemos un par de rutas reales, es buen momento para crear un mini menú de navegación. Vayamos al <code>core/shell/header.component.html</code> y pongamos algo así:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sticky\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-home\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"about\"</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">\"router-link-active\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"32\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"vertical-align: -0.5em\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> About us<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"3-Rutas-anidadas\"><a href=\"#3-Rutas-anidadas\" class=\"headerlink\" title=\"3 Rutas anidadas\"></a>3 Rutas anidadas</h1><p>Cuando las interfaces se complican, es habitual que las aplicaciones dispongan de menús de navegación a distintos niveles. Dentro de una misma página podemos querer ver distinto contenido y además reflejarlo en la <em>URL</em>. Para resolver esta situación en Angular disponemos de la técnica de las <em>nested routes</em>.</p><blockquote><p>De una manera un tanto forzada la he incluido en la página <code>/about</code>. La cual disponen de su propio menú de navegación, y lo que es más importante, su propio <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>.</p></blockquote><p>Para empezar veamos como queda el <em>html</em> del <code>about.component.ts</code>. Vamos a dotarlo de dos rutas nuevas <code>/about/links</code> y <code>/about/info</code>. Cada una mostrará contenido en un componente adecuadamente insertado en el <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> local.</p><h2 id=\"3-1-Children\"><a href=\"#3-1-Children\" class=\"headerlink\" title=\"3.1 Children\"></a>3.1 Children</h2><p>Para repasar conceptos de generación de componentes</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c about/about/links</span><br><span class=\"line\">ng g c about/about/info</span><br></pre></td></tr></table></figure><p>Para que funcione empezamos por crear los dos componentes <code>LinksComponent</code> e <code>InfoComponent</code> de forma rutinaria. Y los asignamos en el <code>about-routing.module.ts</code> como subordinados a la ruta principal con el comando <code>children:[]</code>. Los caminos se van agregando sobre la ruta principal activa, la <code>/about</code>. Esto es así tanto el <code>routerLink</code> como el <code>path</code> de los <code>children</code>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">''</span>,</span><br><span class=\"line\">    component: AboutComponent,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'links'</span>,</span><br><span class=\"line\">        component: LinksComponent</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'info'</span>,</span><br><span class=\"line\">        component: InfoComponent</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><h2 id=\"3-2-RouterOutlet-anidado\"><a href=\"#3-2-RouterOutlet-anidado\" class=\"headerlink\" title=\"3.2 RouterOutlet anidado\"></a>3.2 RouterOutlet anidado</h2><p>Los componentes de las rutas <code>children</code> se inyectarán en el <code>&lt;router-outlet&gt;</code> del componente contenedor <code>AboutComponent</code>. Es como si todo volviese a empezar desde aquí.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sticky\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"links\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Tutorial Links<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> More Info<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Con estos conceptos y la combinación de <code>children, loadChild, component, redirectTo</code> … asociadas a <code>path</code> podrás configurar tu aplicación y responder a cualquier <em>URL</em> desde la misma y única página <code>index.html</code>.</p><h1 id=\"4-Parametros\"><a href=\"#4-Parametros\" class=\"headerlink\" title=\"4 Parámetros\"></a>4 Parámetros</h1><p>Las rutas vistas hasta ahora se consideran estáticas pues se han definido usando constantes. Es muy habitual tener <strong>páginas con la misma estructura pero distintos contenidos</strong>. Un blog con sus posts, una tienda con sus productos, o un proyecto con sus tareas… hay miles de ejemplos así.</p><h2 id=\"4-1-Variables-en-la-ruta\"><a href=\"#4-1-Variables-en-la-ruta\" class=\"headerlink\" title=\"4.1 Variables en la ruta\"></a>4.1 Variables en la ruta</h2><p>Ese tipo de direcciones se consideran paramétricas, tienen unos segmentos estáticos y otros dinámicos. Estos últimos se definen con parámetros, algo así como <strong>variables dentro de la cadena de la ruta</strong>. Su sintaxis obliga a precederlas de dos puntos. Por ejemplo <code>countries/:country/cities/:city</code> resolvería rutas como <em>countries/usa/cities/new-york</em> o <em>countries/italy/cities/roma</em>. Rellenando los parámetros <code>:country</code> y <code>:city</code> con los valores necesarios.</p><blockquote><p>Esta aplicación no tiene un propósito de negocio concreto. Iremos creando rutas según sea necesario por motivos pedagógicos. Empezaremos con unas páginas destinadas a mostrar los autores del proyecto.</p></blockquote><p>Vamos a crear rutas como <em>/authors/albertobasalo</em> o <em>/authors/johndoe</em>. Para ello necesitamos el segmento principal <em>/authors</em> y una par de componentes.</p><p>Vamos a agregar los componentes necesarios como hasta ahora.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c about/about/authors</span><br><span class=\"line\">ng g c about/about/authors/author</span><br></pre></td></tr></table></figure><p>En las rutas del <code>about-routing.module.ts</code> agregamos un nuevos <em>children paths</em></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">''</span>,  component: AboutComponent,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'links'</span>, component: LinksComponent</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'info'</span>, component: InfoComponent</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'authors'</span>, component: AuthorsComponent</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">'authors/:id'</span>, component: AuthorComponent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Esta configuración resuelve las rutas <code>about/links</code>, <code>about/info</code>, <code>about/authors</code> y <code>about/authors/cualquier-otra-cosa</code>. Y las carga con el componente adecuado. Lo novedoso en el camino <code>:id</code>. El prefijo dos puntos indica que es un parámetro. Algo así como una variable en el segundo segmento que se almacenará y será recogido con el arbitrario nombre <code>id</code>.</p><p>Para mostrar el uso de los nuevos enlaces he agregado el <code>authors/</code> al <code>AboutComponent</code> y he creado un listado en el <code>AuthorsComponent</code>. Familiarízate con las rutas relativas para componer la ruta completa.</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"albertobasalo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Alberto Basalo<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"johndoe\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> John Doe<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Aún más interesante es el componente que muestra cada autor de la lista, el <code>AuthorComponent</code>. En este caso fíjate cómo accede a la ruta, cómo obtiene el valor del parámetro y cómo lo usa para mostrarlo en la web.</p><h2 id=\"4-2-ActivatedRoute\"><a href=\"#4-2-ActivatedRoute\" class=\"headerlink\" title=\"4.2 ActivatedRoute\"></a>4.2 ActivatedRoute</h2><p>El framework <em>Angular</em> trae muchas librerías para facilitar la vida al programador. Sólo hay que saber dónde están y cómo pedirlas. Para ello volvemos a la tecnología escogida, <em>TypeScript</em>, que permite las <strong>importaciones y la inyección de dependencias</strong>. Hay un tema dedicado a conocer en profundidad <a href=\"https://academia-binaria.com/servicios-inyectables-en-Angular/\">los servicios inyectables en Angular</a>. Por ahora una breve introducción.</p><p>Contenido del fichero <code>author.component.ts</code> relacionado con la obtención del parámetro de la ruta activa:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuthorComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> authorId = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">activateRoute: ActivatedRoute</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.authorId = activateRoute.snapshot.params[<span class=\"string\">'id'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnInit() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>La instrucción <code>import { ActivatedRoute } from &quot;@angular/router&quot;;</code> pone a disposición del programador el código donde está definida la clase <code>ActivatedRoute</code>. Pero no se instancia directamente; en su lugar, se usa como un argumento del constructor de la clase del componente. Ese constructor es invocado por <em>Angular</em>, y dinámicamente el propio framework sabe cómo rellenar los argumentos que se pidan en los constructores. Es decir, sabe cómo inyectar instancias en las que dependencias declaradas.</p><p>Una vez que han <strong>inyectan las dependencias en el constructor</strong> ya están listas para ser usadas. En concreto <code>activateRoute</code> da acceso a métodos y propiedades para trabajar con la ruta activa y poder leer sus parámetros.</p><p>Obtenidos los datos desde la <em>URL</em>, ya se muestran en la vista de forma ya conocida. Fichero <code>/about/authors/author/author.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Author profile<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123; authorId &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Con esto tendrás una aplicación SPA en <em>Angular</em>. Sigue esta serie para añadirle <a href=\"../formularios-tablas-y-modelos-de-datos-en-angular/\">Formularios, tablas y modelos de datos en Angular</a> mientras aprendes a programar con Angular8.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Velocidad y SEO con el SSR de Angular Universal","date":"2018-10-30T11:50:27.000Z","thumbnail":"/css/images/angular-c_universal.png","_content":"\n![velocidad-y-seo-con-el-ssr-de-angular-universal](/images/tutorial-angular-c_universal.png)\n\nLas *SPA JavaScript*, muy balanceadas hacia el navegador, nacieron para **crear con tecnología web aplicaciones de negocio**. Normalmente se desplegaban en *intranets*, o en internet para usuarios autorizados. Eran aplicaciones de uso intensivo, visita recurrente y alto rendimiento diario. El éxito tecnológico de *frameworks* como Angular las llevó a ser usadas para desarrollar webs clásicas de internet y ser utilizadas por visitantes ocasionales. \n \nPero en esta situación presentaron dos problemas para los que inicialmente no estaban preparadas. Por un lado la primera visita de un humano obligaba a la descarga completa de la aplicación antes de poder ver nada. Y nada era lo que veían los visitantes robóticos que pretendían indexar un sitio. Las soluciones a estos problemas incluyen, entre otras medidas, **una vuelta al servidor**. Lo que en Angular se conoce como **aplicación universal**. \n\n\n<!-- more -->\n\nPartiendo del código tal cómo quedó en [El patrón Redux con NgRx en Angular](../el-patron-redux-con-ngrx-en-angular/). Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/AutoBot/c-universal](https://github.com/AcademiaBinaria/autobot/tree/c-universal) y en el proyecto demo [AcademiaBinaria/Astrobot](https://github.com/AcademiaBinaria/astrobot)\n\n# 1 Velocidad, primera visita y sucesivas\n\nEl reto está en mantener lo bueno de las aplicaciones *javascript* como es la transición fluida entre páginas, la interactividad o la descarga de datos bajo demanda. Pero combinado con una mejor primera experiencia. Para ello la descarga del `index.html` tiene que venir con un documento html ya preparado con algo para mostrar y tardar lo menos posible en permitir la interacción. \n\nEl **tiempo para el primer pintado** se ve penalizado por el tamaño del *bundle* principal de Angular, pues en él reside habitualmente el componente *app* que actúa de raiz. Por supuesto que utilizar la carga diferida de módulos es una manera obligada de reducir el peso del *main*. Todas las rutas, incluída la ruta base, deben ser *lazy* para retrasar la navegación y que la descarga se produzca más tarde. Sólo el componente raiz con la *shell* de navegación básica debería venir en el *bundle* principal.\n\nPero ni con eso es suficiente. El usuario no verá nada hasta que Angular se descargue, reclame el *bundle main*, lo procese y renderece ese *shell*. Hay usar alguna estrategia extra para reducir el tiempo de espera y entretener al usaurio.\n\n## 1.1 Prerenderizado estático\n\nLa más sencilla es hacer que el `index.html`, habitualmente vacío, se rellene con un **contenido visualizable mientras el proceso principal de Angular no arranca**. En ocasiones basta con poner a mano algún mensaje o animación que indique que estamos cargando. Pero cuanto más se parezca esa primera visión al resultado final mejor para el usuario. Así que lo propio sería que el `index.html` ya bajase con el *shell* real de la aplicación.\n\nMontar eso a mano no es la mejor opción. La solución parte de **renderizar el *html* durante el proceso de *deploy***. Se trata de configurar el CLI para que ejecute la aplicación en la máquina del desarrollador sobre una ruta predefinida; y que copie el resultado sobre el `index.html` que enviará a distribución.\n\nEste trabajo se ha automatizado y se resuelve con un par de comandos del Angular CLI. \n\n```bash\nng g app-shell --client-project astrobot --universal-project server-astrobot\n```\n\nEl efecto de este comando se materializa especialmente con la aparición de nuevos *targets para los builders* del CLI en el fichero [angular.json](https://github.com/AcademiaBinaria/astrobot/blob/fff2a9f2c38f4b333489063b6f812a3b614fe173/angular.json#L141). \n\nCon el comando `ng run astrobot:app-shell` podrás generar una versión especial de distribución en al que el `index.html` ya va prerenderizado con el contenido del componente asociado a la ruta *shell*. Realmente lo que hace es ejecutar tu aplicación sobre una ruta predefinida, tomar el *html* resultado e inyectarlo en el *body* del `index.html` que irá a distribución.\n\nCompruébalo en la ejecución de [Astrobot](https://academiabinaria.github.io/astrobot/), viendo el código fuente de la página descargada.\n\n> Por cierto, esta técnica no obliga a disponer de ningún servidor web especial. Sigue funcinando con un servidor estático de ficheros pues la prerenderización se produjo en la máquina del programador.\n\n## 1.2 Renderizar en el servidor con SSR\n\nClaro que esto es sólo un truco para que ese primer momento de espera se reduzca y no perdamos potenciales visitantes. Si queremos algo más, como por ejemplo que el contenido a descargar sea más fresco, entonces necesitaremos **renderizar en el servidor**. Y para ello necesitaremos un servidor de verdad. El propuesto y mejor documentado es *Express de NodeJS*.\n\nPara empezar tendrás que instalar y registrar las librerias necesarias. Además habrá que crear el pequeño servidor *Express*, y configurar al CLI para que haga el despliegue de ambos: cliente y servidor. Este laborioso trabajo se ha automatizado y ahora mismo se resuelve casi todo con un par de instrucciones.\n\n```bash\nng add @nguniversal/express-engine\nnpm run build:ssr && npm run serve:ssr\n```\n\nEl resultado es un servidor *Node* que a cada petición web responde enviando el `index.html`. Pero, y esta es la clave, resolverá la ruta ejecutando la aplicación Angular antes de responder al navegador. De esa forma el `index.html` irá recién generado con el contenido tal cual lo vería el usuario tras la ejecución de Angular en local. Así que **la espera al primer pintado significativo se reduce** y eso es bueno.\n\nPor si fuera poco, la principal ventaja al usar este método es que al traer información dinámica puede usarse para indexar el contenido real del sitio. Esto es dóblemente bueno, porque ahora todos **los robots indexadores podrán catalogar tu *site*** como si de una web clásica se tratase. Y los usuarios humanos podrán continuar la ejecución en local disfrutando de las ventajas de una SPA.\n\nDe todas formas tengo que advertirte de que tomes todo esto con cautela por varios motivos:\n- Tecnología compleja estable pero con carencias\n- Herramientas de generación buenas pero incompletas\n- Transferencia de estado manual para evitar llamadas repetidas al API\n\nTampoco es sencilla la convivencia con librerias propias del *browser*, y menos si se trata de una PWA. Yo procuro usar un servicio que aisle al servidor de ciertas llamadas sólo disponibles en el navegador, como por ejemplo todo lo relativo al *localStorage*.\n\n```typescript\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UniversalService {\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n  public isBrowser() => isPlatformBrowser(this.platformId);\n  public isServer() => isPlatformServer(this.platformId);\n\n  public saveOnStorage(key, value) {\n    if (this.isBrowser()) {\n      sessionStorage.setItem(key, value);\n    } else {\n    }\n  }\n  public loadFromStorage(key) {\n    if (this.isBrowser()) {\n      sessionStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n}\n```\n\n# 2 SEO en la página, en el navegador y en el servidor\n\nCon lo visto hasta ahora tu apliación estará más que cubierta en cuanto a ofrecer la mejor experiencia para usuarios al tiempo que envía contenido indexable para robots... Pero falta algo.\n\nHabitualmente las aplicaciones Angular manejan el contenido visible de una página web; es decir, el *body*. Para **acceder y cambiar el contenido del *header***, tan utilizado por los robots de redes sociales, hay que usar algo más.\n\n## 2.1 Titulo y meta etiquetas de página\n\nComo parte del *framework* viene la librería *platform-browser* dónde tenemos un par de servicios para manipular el título y cualquier etiqueta de meta información de la página.\n\nPara ello suele usarse un código similar a este en el componente raiz de la aplicacion. Es muy sencillo pero te dará una idea del potencial de estos servicios:\n\n```typescript\nimport { Meta, Title } from '@angular/platform-browser';\n@Component({\n  selector: 'app-root',\n  template: `<p>Aprende a usar el framework Angular</p>`,\n})\nexport class AppComponent implements OnInit {\n  constructor(private title: Title, private meta: Meta) {}\n  ngOnInit() {\n    this.title.setTitle('My title');\n    this.meta.addTag({ property: 'og:title', content: 'My title' }, true);\n  }\n}\n```\n\nAhora ya tienes una aplicación que satisface a usuarios y robots por igual. Continúa tu formación avanzada para crear aplicaciones Angular siguiendo la serie del [tutorial avanzado de desarrollo con Angular](../tag/Avanzado/) y verás como aprendes a programar con Angular 7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","source":"_posts/ng-old-adv-c-velocidad-y-seo-con-el-ssr-de-angular-universal.md","raw":"---\ntitle: Velocidad y SEO con el SSR de Angular Universal\npermalink: velocidad-y-seo-con-el-ssr-de-angular-universal\ndate: 2018-10-30 12:50:27\ntags:  \n- Angular\n- Angular7\n- Angular6\n- Angular2\n- Universal\n- SSR\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular] \nthumbnail: /css/images/angular-c_universal.png\n---\n\n![velocidad-y-seo-con-el-ssr-de-angular-universal](/images/tutorial-angular-c_universal.png)\n\nLas *SPA JavaScript*, muy balanceadas hacia el navegador, nacieron para **crear con tecnología web aplicaciones de negocio**. Normalmente se desplegaban en *intranets*, o en internet para usuarios autorizados. Eran aplicaciones de uso intensivo, visita recurrente y alto rendimiento diario. El éxito tecnológico de *frameworks* como Angular las llevó a ser usadas para desarrollar webs clásicas de internet y ser utilizadas por visitantes ocasionales. \n \nPero en esta situación presentaron dos problemas para los que inicialmente no estaban preparadas. Por un lado la primera visita de un humano obligaba a la descarga completa de la aplicación antes de poder ver nada. Y nada era lo que veían los visitantes robóticos que pretendían indexar un sitio. Las soluciones a estos problemas incluyen, entre otras medidas, **una vuelta al servidor**. Lo que en Angular se conoce como **aplicación universal**. \n\n\n<!-- more -->\n\nPartiendo del código tal cómo quedó en [El patrón Redux con NgRx en Angular](../el-patron-redux-con-ngrx-en-angular/). Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.\n\n> Código asociado a este artículo en _GitHub_: [AcademiaBinaria/AutoBot/c-universal](https://github.com/AcademiaBinaria/autobot/tree/c-universal) y en el proyecto demo [AcademiaBinaria/Astrobot](https://github.com/AcademiaBinaria/astrobot)\n\n# 1 Velocidad, primera visita y sucesivas\n\nEl reto está en mantener lo bueno de las aplicaciones *javascript* como es la transición fluida entre páginas, la interactividad o la descarga de datos bajo demanda. Pero combinado con una mejor primera experiencia. Para ello la descarga del `index.html` tiene que venir con un documento html ya preparado con algo para mostrar y tardar lo menos posible en permitir la interacción. \n\nEl **tiempo para el primer pintado** se ve penalizado por el tamaño del *bundle* principal de Angular, pues en él reside habitualmente el componente *app* que actúa de raiz. Por supuesto que utilizar la carga diferida de módulos es una manera obligada de reducir el peso del *main*. Todas las rutas, incluída la ruta base, deben ser *lazy* para retrasar la navegación y que la descarga se produzca más tarde. Sólo el componente raiz con la *shell* de navegación básica debería venir en el *bundle* principal.\n\nPero ni con eso es suficiente. El usuario no verá nada hasta que Angular se descargue, reclame el *bundle main*, lo procese y renderece ese *shell*. Hay usar alguna estrategia extra para reducir el tiempo de espera y entretener al usaurio.\n\n## 1.1 Prerenderizado estático\n\nLa más sencilla es hacer que el `index.html`, habitualmente vacío, se rellene con un **contenido visualizable mientras el proceso principal de Angular no arranca**. En ocasiones basta con poner a mano algún mensaje o animación que indique que estamos cargando. Pero cuanto más se parezca esa primera visión al resultado final mejor para el usuario. Así que lo propio sería que el `index.html` ya bajase con el *shell* real de la aplicación.\n\nMontar eso a mano no es la mejor opción. La solución parte de **renderizar el *html* durante el proceso de *deploy***. Se trata de configurar el CLI para que ejecute la aplicación en la máquina del desarrollador sobre una ruta predefinida; y que copie el resultado sobre el `index.html` que enviará a distribución.\n\nEste trabajo se ha automatizado y se resuelve con un par de comandos del Angular CLI. \n\n```bash\nng g app-shell --client-project astrobot --universal-project server-astrobot\n```\n\nEl efecto de este comando se materializa especialmente con la aparición de nuevos *targets para los builders* del CLI en el fichero [angular.json](https://github.com/AcademiaBinaria/astrobot/blob/fff2a9f2c38f4b333489063b6f812a3b614fe173/angular.json#L141). \n\nCon el comando `ng run astrobot:app-shell` podrás generar una versión especial de distribución en al que el `index.html` ya va prerenderizado con el contenido del componente asociado a la ruta *shell*. Realmente lo que hace es ejecutar tu aplicación sobre una ruta predefinida, tomar el *html* resultado e inyectarlo en el *body* del `index.html` que irá a distribución.\n\nCompruébalo en la ejecución de [Astrobot](https://academiabinaria.github.io/astrobot/), viendo el código fuente de la página descargada.\n\n> Por cierto, esta técnica no obliga a disponer de ningún servidor web especial. Sigue funcinando con un servidor estático de ficheros pues la prerenderización se produjo en la máquina del programador.\n\n## 1.2 Renderizar en el servidor con SSR\n\nClaro que esto es sólo un truco para que ese primer momento de espera se reduzca y no perdamos potenciales visitantes. Si queremos algo más, como por ejemplo que el contenido a descargar sea más fresco, entonces necesitaremos **renderizar en el servidor**. Y para ello necesitaremos un servidor de verdad. El propuesto y mejor documentado es *Express de NodeJS*.\n\nPara empezar tendrás que instalar y registrar las librerias necesarias. Además habrá que crear el pequeño servidor *Express*, y configurar al CLI para que haga el despliegue de ambos: cliente y servidor. Este laborioso trabajo se ha automatizado y ahora mismo se resuelve casi todo con un par de instrucciones.\n\n```bash\nng add @nguniversal/express-engine\nnpm run build:ssr && npm run serve:ssr\n```\n\nEl resultado es un servidor *Node* que a cada petición web responde enviando el `index.html`. Pero, y esta es la clave, resolverá la ruta ejecutando la aplicación Angular antes de responder al navegador. De esa forma el `index.html` irá recién generado con el contenido tal cual lo vería el usuario tras la ejecución de Angular en local. Así que **la espera al primer pintado significativo se reduce** y eso es bueno.\n\nPor si fuera poco, la principal ventaja al usar este método es que al traer información dinámica puede usarse para indexar el contenido real del sitio. Esto es dóblemente bueno, porque ahora todos **los robots indexadores podrán catalogar tu *site*** como si de una web clásica se tratase. Y los usuarios humanos podrán continuar la ejecución en local disfrutando de las ventajas de una SPA.\n\nDe todas formas tengo que advertirte de que tomes todo esto con cautela por varios motivos:\n- Tecnología compleja estable pero con carencias\n- Herramientas de generación buenas pero incompletas\n- Transferencia de estado manual para evitar llamadas repetidas al API\n\nTampoco es sencilla la convivencia con librerias propias del *browser*, y menos si se trata de una PWA. Yo procuro usar un servicio que aisle al servidor de ciertas llamadas sólo disponibles en el navegador, como por ejemplo todo lo relativo al *localStorage*.\n\n```typescript\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UniversalService {\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n  public isBrowser() => isPlatformBrowser(this.platformId);\n  public isServer() => isPlatformServer(this.platformId);\n\n  public saveOnStorage(key, value) {\n    if (this.isBrowser()) {\n      sessionStorage.setItem(key, value);\n    } else {\n    }\n  }\n  public loadFromStorage(key) {\n    if (this.isBrowser()) {\n      sessionStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n}\n```\n\n# 2 SEO en la página, en el navegador y en el servidor\n\nCon lo visto hasta ahora tu apliación estará más que cubierta en cuanto a ofrecer la mejor experiencia para usuarios al tiempo que envía contenido indexable para robots... Pero falta algo.\n\nHabitualmente las aplicaciones Angular manejan el contenido visible de una página web; es decir, el *body*. Para **acceder y cambiar el contenido del *header***, tan utilizado por los robots de redes sociales, hay que usar algo más.\n\n## 2.1 Titulo y meta etiquetas de página\n\nComo parte del *framework* viene la librería *platform-browser* dónde tenemos un par de servicios para manipular el título y cualquier etiqueta de meta información de la página.\n\nPara ello suele usarse un código similar a este en el componente raiz de la aplicacion. Es muy sencillo pero te dará una idea del potencial de estos servicios:\n\n```typescript\nimport { Meta, Title } from '@angular/platform-browser';\n@Component({\n  selector: 'app-root',\n  template: `<p>Aprende a usar el framework Angular</p>`,\n})\nexport class AppComponent implements OnInit {\n  constructor(private title: Title, private meta: Meta) {}\n  ngOnInit() {\n    this.title.setTitle('My title');\n    this.meta.addTag({ property: 'og:title', content: 'My title' }, true);\n  }\n}\n```\n\nAhora ya tienes una aplicación que satisface a usuarios y robots por igual. Continúa tu formación avanzada para crear aplicaciones Angular siguiendo la serie del [tutorial avanzado de desarrollo con Angular](../tag/Avanzado/) y verás como aprendes a programar con Angular 7.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>","slug":"velocidad-y-seo-con-el-ssr-de-angular-universal","published":1,"updated":"2019-07-11T14:45:09.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4ba000r18s3h03irvdi","content":"<p><img src=\"/images/tutorial-angular-c_universal.png\" alt=\"velocidad-y-seo-con-el-ssr-de-angular-universal\"></p><p>Las <em>SPA JavaScript</em>, muy balanceadas hacia el navegador, nacieron para <strong>crear con tecnología web aplicaciones de negocio</strong>. Normalmente se desplegaban en <em>intranets</em>, o en internet para usuarios autorizados. Eran aplicaciones de uso intensivo, visita recurrente y alto rendimiento diario. El éxito tecnológico de <em>frameworks</em> como Angular las llevó a ser usadas para desarrollar webs clásicas de internet y ser utilizadas por visitantes ocasionales.</p><p>Pero en esta situación presentaron dos problemas para los que inicialmente no estaban preparadas. Por un lado la primera visita de un humano obligaba a la descarga completa de la aplicación antes de poder ver nada. Y nada era lo que veían los visitantes robóticos que pretendían indexar un sitio. Las soluciones a estos problemas incluyen, entre otras medidas, <strong>una vuelta al servidor</strong>. Lo que en Angular se conoce como <strong>aplicación universal</strong>.</p><a id=\"more\"></a><p>Partiendo del código tal cómo quedó en <a href=\"../el-patron-redux-con-ngrx-en-angular/\">El patrón Redux con NgRx en Angular</a>. Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/c-universal\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/c-universal</a> y en el proyecto demo <a href=\"https://github.com/AcademiaBinaria/astrobot\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/Astrobot</a></p></blockquote><h1 id=\"1-Velocidad-primera-visita-y-sucesivas\"><a href=\"#1-Velocidad-primera-visita-y-sucesivas\" class=\"headerlink\" title=\"1 Velocidad, primera visita y sucesivas\"></a>1 Velocidad, primera visita y sucesivas</h1><p>El reto está en mantener lo bueno de las aplicaciones <em>javascript</em> como es la transición fluida entre páginas, la interactividad o la descarga de datos bajo demanda. Pero combinado con una mejor primera experiencia. Para ello la descarga del <code>index.html</code> tiene que venir con un documento html ya preparado con algo para mostrar y tardar lo menos posible en permitir la interacción.</p><p>El <strong>tiempo para el primer pintado</strong> se ve penalizado por el tamaño del <em>bundle</em> principal de Angular, pues en él reside habitualmente el componente <em>app</em> que actúa de raiz. Por supuesto que utilizar la carga diferida de módulos es una manera obligada de reducir el peso del <em>main</em>. Todas las rutas, incluída la ruta base, deben ser <em>lazy</em> para retrasar la navegación y que la descarga se produzca más tarde. Sólo el componente raiz con la <em>shell</em> de navegación básica debería venir en el <em>bundle</em> principal.</p><p>Pero ni con eso es suficiente. El usuario no verá nada hasta que Angular se descargue, reclame el <em>bundle main</em>, lo procese y renderece ese <em>shell</em>. Hay usar alguna estrategia extra para reducir el tiempo de espera y entretener al usaurio.</p><h2 id=\"1-1-Prerenderizado-estatico\"><a href=\"#1-1-Prerenderizado-estatico\" class=\"headerlink\" title=\"1.1 Prerenderizado estático\"></a>1.1 Prerenderizado estático</h2><p>La más sencilla es hacer que el <code>index.html</code>, habitualmente vacío, se rellene con un <strong>contenido visualizable mientras el proceso principal de Angular no arranca</strong>. En ocasiones basta con poner a mano algún mensaje o animación que indique que estamos cargando. Pero cuanto más se parezca esa primera visión al resultado final mejor para el usuario. Así que lo propio sería que el <code>index.html</code> ya bajase con el <em>shell</em> real de la aplicación.</p><p>Montar eso a mano no es la mejor opción. La solución parte de <strong>renderizar el <em>html</em> durante el proceso de <em>deploy</em></strong>. Se trata de configurar el CLI para que ejecute la aplicación en la máquina del desarrollador sobre una ruta predefinida; y que copie el resultado sobre el <code>index.html</code> que enviará a distribución.</p><p>Este trabajo se ha automatizado y se resuelve con un par de comandos del Angular CLI.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g app-shell --client-project astrobot --universal-project server-astrobot</span><br></pre></td></tr></table></figure><p>El efecto de este comando se materializa especialmente con la aparición de nuevos <em>targets para los builders</em> del CLI en el fichero <a href=\"https://github.com/AcademiaBinaria/astrobot/blob/fff2a9f2c38f4b333489063b6f812a3b614fe173/angular.json#L141\" target=\"_blank\" rel=\"noopener\">angular.json</a>.</p><p>Con el comando <code>ng run astrobot:app-shell</code> podrás generar una versión especial de distribución en al que el <code>index.html</code> ya va prerenderizado con el contenido del componente asociado a la ruta <em>shell</em>. Realmente lo que hace es ejecutar tu aplicación sobre una ruta predefinida, tomar el <em>html</em> resultado e inyectarlo en el <em>body</em> del <code>index.html</code> que irá a distribución.</p><p>Compruébalo en la ejecución de <a href=\"https://academiabinaria.github.io/astrobot/\" target=\"_blank\" rel=\"noopener\">Astrobot</a>, viendo el código fuente de la página descargada.</p><blockquote><p>Por cierto, esta técnica no obliga a disponer de ningún servidor web especial. Sigue funcinando con un servidor estático de ficheros pues la prerenderización se produjo en la máquina del programador.</p></blockquote><h2 id=\"1-2-Renderizar-en-el-servidor-con-SSR\"><a href=\"#1-2-Renderizar-en-el-servidor-con-SSR\" class=\"headerlink\" title=\"1.2 Renderizar en el servidor con SSR\"></a>1.2 Renderizar en el servidor con SSR</h2><p>Claro que esto es sólo un truco para que ese primer momento de espera se reduzca y no perdamos potenciales visitantes. Si queremos algo más, como por ejemplo que el contenido a descargar sea más fresco, entonces necesitaremos <strong>renderizar en el servidor</strong>. Y para ello necesitaremos un servidor de verdad. El propuesto y mejor documentado es <em>Express de NodeJS</em>.</p><p>Para empezar tendrás que instalar y registrar las librerias necesarias. Además habrá que crear el pequeño servidor <em>Express</em>, y configurar al CLI para que haga el despliegue de ambos: cliente y servidor. Este laborioso trabajo se ha automatizado y ahora mismo se resuelve casi todo con un par de instrucciones.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @nguniversal/express-engine</span><br><span class=\"line\">npm run build:ssr &amp;&amp; npm run serve:ssr</span><br></pre></td></tr></table></figure><p>El resultado es un servidor <em>Node</em> que a cada petición web responde enviando el <code>index.html</code>. Pero, y esta es la clave, resolverá la ruta ejecutando la aplicación Angular antes de responder al navegador. De esa forma el <code>index.html</code> irá recién generado con el contenido tal cual lo vería el usuario tras la ejecución de Angular en local. Así que <strong>la espera al primer pintado significativo se reduce</strong> y eso es bueno.</p><p>Por si fuera poco, la principal ventaja al usar este método es que al traer información dinámica puede usarse para indexar el contenido real del sitio. Esto es dóblemente bueno, porque ahora todos <strong>los robots indexadores podrán catalogar tu <em>site</em></strong> como si de una web clásica se tratase. Y los usuarios humanos podrán continuar la ejecución en local disfrutando de las ventajas de una SPA.</p><p>De todas formas tengo que advertirte de que tomes todo esto con cautela por varios motivos:</p><ul><li>Tecnología compleja estable pero con carencias</li><li>Herramientas de generación buenas pero incompletas</li><li>Transferencia de estado manual para evitar llamadas repetidas al API</li></ul><p>Tampoco es sencilla la convivencia con librerias propias del <em>browser</em>, y menos si se trata de una PWA. Yo procuro usar un servicio que aisle al servidor de ciertas llamadas sólo disponibles en el navegador, como por ejemplo todo lo relativo al <em>localStorage</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isPlatformBrowser, isPlatformServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Inject, Injectable, PLATFORM_ID &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UniversalService &#123;</span><br><span class=\"line\">  constructor(@Inject(PLATFORM_ID) private platformId: string) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> isBrowser() =&gt; isPlatformBrowser(<span class=\"keyword\">this</span>.platformId);</span><br><span class=\"line\">  <span class=\"keyword\">public</span> isServer() =&gt; isPlatformServer(<span class=\"keyword\">this</span>.platformId);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> saveOnStorage(key, value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isBrowser()) &#123;</span><br><span class=\"line\">      sessionStorage.setItem(key, value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> loadFromStorage(key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isBrowser()) &#123;</span><br><span class=\"line\">      sessionStorage.getItem(key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"2-SEO-en-la-pagina-en-el-navegador-y-en-el-servidor\"><a href=\"#2-SEO-en-la-pagina-en-el-navegador-y-en-el-servidor\" class=\"headerlink\" title=\"2 SEO en la página, en el navegador y en el servidor\"></a>2 SEO en la página, en el navegador y en el servidor</h1><p>Con lo visto hasta ahora tu apliación estará más que cubierta en cuanto a ofrecer la mejor experiencia para usuarios al tiempo que envía contenido indexable para robots… Pero falta algo.</p><p>Habitualmente las aplicaciones Angular manejan el contenido visible de una página web; es decir, el <em>body</em>. Para <strong>acceder y cambiar el contenido del <em>header</em></strong>, tan utilizado por los robots de redes sociales, hay que usar algo más.</p><h2 id=\"2-1-Titulo-y-meta-etiquetas-de-pagina\"><a href=\"#2-1-Titulo-y-meta-etiquetas-de-pagina\" class=\"headerlink\" title=\"2.1 Titulo y meta etiquetas de página\"></a>2.1 Titulo y meta etiquetas de página</h2><p>Como parte del <em>framework</em> viene la librería <em>platform-browser</em> dónde tenemos un par de servicios para manipular el título y cualquier etiqueta de meta información de la página.</p><p>Para ello suele usarse un código similar a este en el componente raiz de la aplicacion. Es muy sencillo pero te dará una idea del potencial de estos servicios:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Meta, Title &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;p&gt;Aprende a usar el framework Angular&lt;/p&gt;`</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> title: Title, <span class=\"keyword\">private</span> meta: Meta</span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title.setTitle(<span class=\"string\">'My title'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.meta.addTag(&#123; property: <span class=\"string\">'og:title'</span>, content: <span class=\"string\">'My title'</span> &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ahora ya tienes una aplicación que satisface a usuarios y robots por igual. Continúa tu formación avanzada para crear aplicaciones Angular siguiendo la serie del <a href=\"../tag/Avanzado/\">tutorial avanzado de desarrollo con Angular</a> y verás como aprendes a programar con Angular 7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-c_universal.png\" alt=\"velocidad-y-seo-con-el-ssr-de-angular-universal\"></p><p>Las <em>SPA JavaScript</em>, muy balanceadas hacia el navegador, nacieron para <strong>crear con tecnología web aplicaciones de negocio</strong>. Normalmente se desplegaban en <em>intranets</em>, o en internet para usuarios autorizados. Eran aplicaciones de uso intensivo, visita recurrente y alto rendimiento diario. El éxito tecnológico de <em>frameworks</em> como Angular las llevó a ser usadas para desarrollar webs clásicas de internet y ser utilizadas por visitantes ocasionales.</p><p>Pero en esta situación presentaron dos problemas para los que inicialmente no estaban preparadas. Por un lado la primera visita de un humano obligaba a la descarga completa de la aplicación antes de poder ver nada. Y nada era lo que veían los visitantes robóticos que pretendían indexar un sitio. Las soluciones a estos problemas incluyen, entre otras medidas, <strong>una vuelta al servidor</strong>. Lo que en Angular se conoce como <strong>aplicación universal</strong>.</p>","more":"<p>Partiendo del código tal cómo quedó en <a href=\"../el-patron-redux-con-ngrx-en-angular/\">El patrón Redux con NgRx en Angular</a>. Al finalizar tendrás una aplicación que se instala, actualiza y comporta como una aplicación nativa.</p><blockquote><p>Código asociado a este artículo en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/autobot/tree/c-universal\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/AutoBot/c-universal</a> y en el proyecto demo <a href=\"https://github.com/AcademiaBinaria/astrobot\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/Astrobot</a></p></blockquote><h1 id=\"1-Velocidad-primera-visita-y-sucesivas\"><a href=\"#1-Velocidad-primera-visita-y-sucesivas\" class=\"headerlink\" title=\"1 Velocidad, primera visita y sucesivas\"></a>1 Velocidad, primera visita y sucesivas</h1><p>El reto está en mantener lo bueno de las aplicaciones <em>javascript</em> como es la transición fluida entre páginas, la interactividad o la descarga de datos bajo demanda. Pero combinado con una mejor primera experiencia. Para ello la descarga del <code>index.html</code> tiene que venir con un documento html ya preparado con algo para mostrar y tardar lo menos posible en permitir la interacción.</p><p>El <strong>tiempo para el primer pintado</strong> se ve penalizado por el tamaño del <em>bundle</em> principal de Angular, pues en él reside habitualmente el componente <em>app</em> que actúa de raiz. Por supuesto que utilizar la carga diferida de módulos es una manera obligada de reducir el peso del <em>main</em>. Todas las rutas, incluída la ruta base, deben ser <em>lazy</em> para retrasar la navegación y que la descarga se produzca más tarde. Sólo el componente raiz con la <em>shell</em> de navegación básica debería venir en el <em>bundle</em> principal.</p><p>Pero ni con eso es suficiente. El usuario no verá nada hasta que Angular se descargue, reclame el <em>bundle main</em>, lo procese y renderece ese <em>shell</em>. Hay usar alguna estrategia extra para reducir el tiempo de espera y entretener al usaurio.</p><h2 id=\"1-1-Prerenderizado-estatico\"><a href=\"#1-1-Prerenderizado-estatico\" class=\"headerlink\" title=\"1.1 Prerenderizado estático\"></a>1.1 Prerenderizado estático</h2><p>La más sencilla es hacer que el <code>index.html</code>, habitualmente vacío, se rellene con un <strong>contenido visualizable mientras el proceso principal de Angular no arranca</strong>. En ocasiones basta con poner a mano algún mensaje o animación que indique que estamos cargando. Pero cuanto más se parezca esa primera visión al resultado final mejor para el usuario. Así que lo propio sería que el <code>index.html</code> ya bajase con el <em>shell</em> real de la aplicación.</p><p>Montar eso a mano no es la mejor opción. La solución parte de <strong>renderizar el <em>html</em> durante el proceso de <em>deploy</em></strong>. Se trata de configurar el CLI para que ejecute la aplicación en la máquina del desarrollador sobre una ruta predefinida; y que copie el resultado sobre el <code>index.html</code> que enviará a distribución.</p><p>Este trabajo se ha automatizado y se resuelve con un par de comandos del Angular CLI.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g app-shell --client-project astrobot --universal-project server-astrobot</span><br></pre></td></tr></table></figure><p>El efecto de este comando se materializa especialmente con la aparición de nuevos <em>targets para los builders</em> del CLI en el fichero <a href=\"https://github.com/AcademiaBinaria/astrobot/blob/fff2a9f2c38f4b333489063b6f812a3b614fe173/angular.json#L141\" target=\"_blank\" rel=\"noopener\">angular.json</a>.</p><p>Con el comando <code>ng run astrobot:app-shell</code> podrás generar una versión especial de distribución en al que el <code>index.html</code> ya va prerenderizado con el contenido del componente asociado a la ruta <em>shell</em>. Realmente lo que hace es ejecutar tu aplicación sobre una ruta predefinida, tomar el <em>html</em> resultado e inyectarlo en el <em>body</em> del <code>index.html</code> que irá a distribución.</p><p>Compruébalo en la ejecución de <a href=\"https://academiabinaria.github.io/astrobot/\" target=\"_blank\" rel=\"noopener\">Astrobot</a>, viendo el código fuente de la página descargada.</p><blockquote><p>Por cierto, esta técnica no obliga a disponer de ningún servidor web especial. Sigue funcinando con un servidor estático de ficheros pues la prerenderización se produjo en la máquina del programador.</p></blockquote><h2 id=\"1-2-Renderizar-en-el-servidor-con-SSR\"><a href=\"#1-2-Renderizar-en-el-servidor-con-SSR\" class=\"headerlink\" title=\"1.2 Renderizar en el servidor con SSR\"></a>1.2 Renderizar en el servidor con SSR</h2><p>Claro que esto es sólo un truco para que ese primer momento de espera se reduzca y no perdamos potenciales visitantes. Si queremos algo más, como por ejemplo que el contenido a descargar sea más fresco, entonces necesitaremos <strong>renderizar en el servidor</strong>. Y para ello necesitaremos un servidor de verdad. El propuesto y mejor documentado es <em>Express de NodeJS</em>.</p><p>Para empezar tendrás que instalar y registrar las librerias necesarias. Además habrá que crear el pequeño servidor <em>Express</em>, y configurar al CLI para que haga el despliegue de ambos: cliente y servidor. Este laborioso trabajo se ha automatizado y ahora mismo se resuelve casi todo con un par de instrucciones.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add @nguniversal/express-engine</span><br><span class=\"line\">npm run build:ssr &amp;&amp; npm run serve:ssr</span><br></pre></td></tr></table></figure><p>El resultado es un servidor <em>Node</em> que a cada petición web responde enviando el <code>index.html</code>. Pero, y esta es la clave, resolverá la ruta ejecutando la aplicación Angular antes de responder al navegador. De esa forma el <code>index.html</code> irá recién generado con el contenido tal cual lo vería el usuario tras la ejecución de Angular en local. Así que <strong>la espera al primer pintado significativo se reduce</strong> y eso es bueno.</p><p>Por si fuera poco, la principal ventaja al usar este método es que al traer información dinámica puede usarse para indexar el contenido real del sitio. Esto es dóblemente bueno, porque ahora todos <strong>los robots indexadores podrán catalogar tu <em>site</em></strong> como si de una web clásica se tratase. Y los usuarios humanos podrán continuar la ejecución en local disfrutando de las ventajas de una SPA.</p><p>De todas formas tengo que advertirte de que tomes todo esto con cautela por varios motivos:</p><ul><li>Tecnología compleja estable pero con carencias</li><li>Herramientas de generación buenas pero incompletas</li><li>Transferencia de estado manual para evitar llamadas repetidas al API</li></ul><p>Tampoco es sencilla la convivencia con librerias propias del <em>browser</em>, y menos si se trata de una PWA. Yo procuro usar un servicio que aisle al servidor de ciertas llamadas sólo disponibles en el navegador, como por ejemplo todo lo relativo al <em>localStorage</em>.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isPlatformBrowser, isPlatformServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Inject, Injectable, PLATFORM_ID &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UniversalService &#123;</span><br><span class=\"line\">  constructor(@Inject(PLATFORM_ID) private platformId: string) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> isBrowser() =&gt; isPlatformBrowser(<span class=\"keyword\">this</span>.platformId);</span><br><span class=\"line\">  <span class=\"keyword\">public</span> isServer() =&gt; isPlatformServer(<span class=\"keyword\">this</span>.platformId);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> saveOnStorage(key, value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isBrowser()) &#123;</span><br><span class=\"line\">      sessionStorage.setItem(key, value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> loadFromStorage(key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isBrowser()) &#123;</span><br><span class=\"line\">      sessionStorage.getItem(key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"2-SEO-en-la-pagina-en-el-navegador-y-en-el-servidor\"><a href=\"#2-SEO-en-la-pagina-en-el-navegador-y-en-el-servidor\" class=\"headerlink\" title=\"2 SEO en la página, en el navegador y en el servidor\"></a>2 SEO en la página, en el navegador y en el servidor</h1><p>Con lo visto hasta ahora tu apliación estará más que cubierta en cuanto a ofrecer la mejor experiencia para usuarios al tiempo que envía contenido indexable para robots… Pero falta algo.</p><p>Habitualmente las aplicaciones Angular manejan el contenido visible de una página web; es decir, el <em>body</em>. Para <strong>acceder y cambiar el contenido del <em>header</em></strong>, tan utilizado por los robots de redes sociales, hay que usar algo más.</p><h2 id=\"2-1-Titulo-y-meta-etiquetas-de-pagina\"><a href=\"#2-1-Titulo-y-meta-etiquetas-de-pagina\" class=\"headerlink\" title=\"2.1 Titulo y meta etiquetas de página\"></a>2.1 Titulo y meta etiquetas de página</h2><p>Como parte del <em>framework</em> viene la librería <em>platform-browser</em> dónde tenemos un par de servicios para manipular el título y cualquier etiqueta de meta información de la página.</p><p>Para ello suele usarse un código similar a este en el componente raiz de la aplicacion. Es muy sencillo pero te dará una idea del potencial de estos servicios:</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Meta, Title &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;p&gt;Aprende a usar el framework Angular&lt;/p&gt;`</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> title: Title, <span class=\"keyword\">private</span> meta: Meta</span>) &#123;&#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title.setTitle(<span class=\"string\">'My title'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.meta.addTag(&#123; property: <span class=\"string\">'og:title'</span>, content: <span class=\"string\">'My title'</span> &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Ahora ya tienes una aplicación que satisface a usuarios y robots por igual. Continúa tu formación avanzada para crear aplicaciones Angular siguiendo la serie del <a href=\"../tag/Avanzado/\">tutorial avanzado de desarrollo con Angular</a> y verás como aprendes a programar con Angular 7.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"npm: de instalador a publicador","id":"10","updated":"2016-04-19T05:01:25.000Z","date":"2016-04-18T14:07:46.000Z","_content":"\nSeguro que estás harto de repetir la mítica instrucción `npm install paquete-x` Pero, ¿has pensado en **publicar tus propios módulos**?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en [*npm*](https://www.npmjs.com/).\n\nSigue este proceso y te convertirás en un creador de paquetes para *npm* :\n\n## Programa\n\nTodo empieza por tener una necesidad y resolverla **encapsulando su código en un módulo.** Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.\n\nAntes de continuar vamos a fijar un par de conceptos:\n\n**- módulo:** Fichero *.js* que exporta un funcionalidad y oculta su implementación.\n\n**- paquete:** Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.\n\nConocidos los ingredientes, la receta es sencilla:\n\n1. Debes crear un proyecto para el paquete que vas a publicar.\n2. Has de subir el código a un repositorio público.\n3. Y debes rellenar convenientemente el `package.json` de tu proyecto.\n\nEste es un ejemplo que he creado y [publicado en github](https://github.com/AgoraBinaria/ab-ftp) que te puede servir de base.\n\nPresta especial atención al **nombrado** de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un *prefijo* con tus iniciales o las de tu empresa.\n\nNo te olvides de incluir un juego de **pruebas y documentación** necesaria para sus uso.\n\n## Publica\n\nPuedes descargar librerías y herramienta desde el repositorio de *npm* de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que **registrarte para poder publicar** contenido. El [proceso de registro](https://www.npmjs.com/signup) vía web es sencillo y grátis.\n\nUna vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: `npm login` te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:\n\n```\nnpm publish\n```\n\nPuedes encontrar [más información](https://docs.npmjs.com/cli/publish) acerca de este mega comando en la documentación de *npmjs*. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.\n\nLa clave está en que tu fichero de configuración `package.json` sea correcto y lo más completo posible. Escribe un completo `readme.md` que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo [el contenido subido a github](https://github.com/AgoraBinaria/ab-ftp) se transforma y se ve en la [página de información de npm.](https://www.npmjs.com/package/ab-ftp)\n\n\nComprueba en un directorio vacío que `npm install nombre-de-tu-paquete` descarga todo lo necesario... y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.\n\n\n## Actualiza\n\nCon el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de [nombrado de versiones semántico](http://semver.org/):\n\n**x.y.z = 1.2.3 = ruptura.mejora.parche**\n\nEs bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en *github*.\n\n```\ngit tag 0.1.2\ngit push --tags\n```\n\n\n## Disfruta\n\nFinalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso **siempre habrás ganado**. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.","source":"_posts/npm-de-instalador-a-publicador.md","raw":"---\ntitle: 'npm: de instalador a publicador'\ntags:\n- NodeJS\n- Avanzado\npermalink: npm-de-instalador-a-publicador\nid: 10\nupdated: '2016-04-19 07:01:25'\ndate: 2016-04-18 16:07:46\n---\n\nSeguro que estás harto de repetir la mítica instrucción `npm install paquete-x` Pero, ¿has pensado en **publicar tus propios módulos**?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en [*npm*](https://www.npmjs.com/).\n\nSigue este proceso y te convertirás en un creador de paquetes para *npm* :\n\n## Programa\n\nTodo empieza por tener una necesidad y resolverla **encapsulando su código en un módulo.** Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.\n\nAntes de continuar vamos a fijar un par de conceptos:\n\n**- módulo:** Fichero *.js* que exporta un funcionalidad y oculta su implementación.\n\n**- paquete:** Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.\n\nConocidos los ingredientes, la receta es sencilla:\n\n1. Debes crear un proyecto para el paquete que vas a publicar.\n2. Has de subir el código a un repositorio público.\n3. Y debes rellenar convenientemente el `package.json` de tu proyecto.\n\nEste es un ejemplo que he creado y [publicado en github](https://github.com/AgoraBinaria/ab-ftp) que te puede servir de base.\n\nPresta especial atención al **nombrado** de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un *prefijo* con tus iniciales o las de tu empresa.\n\nNo te olvides de incluir un juego de **pruebas y documentación** necesaria para sus uso.\n\n## Publica\n\nPuedes descargar librerías y herramienta desde el repositorio de *npm* de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que **registrarte para poder publicar** contenido. El [proceso de registro](https://www.npmjs.com/signup) vía web es sencillo y grátis.\n\nUna vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: `npm login` te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:\n\n```\nnpm publish\n```\n\nPuedes encontrar [más información](https://docs.npmjs.com/cli/publish) acerca de este mega comando en la documentación de *npmjs*. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.\n\nLa clave está en que tu fichero de configuración `package.json` sea correcto y lo más completo posible. Escribe un completo `readme.md` que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo [el contenido subido a github](https://github.com/AgoraBinaria/ab-ftp) se transforma y se ve en la [página de información de npm.](https://www.npmjs.com/package/ab-ftp)\n\n\nComprueba en un directorio vacío que `npm install nombre-de-tu-paquete` descarga todo lo necesario... y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.\n\n\n## Actualiza\n\nCon el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de [nombrado de versiones semántico](http://semver.org/):\n\n**x.y.z = 1.2.3 = ruptura.mejora.parche**\n\nEs bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en *github*.\n\n```\ngit tag 0.1.2\ngit push --tags\n```\n\n\n## Disfruta\n\nFinalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso **siempre habrás ganado**. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.","slug":"npm-de-instalador-a-publicador","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjyh5p4ba000s18s3lbq36jlh","content":"<p>Seguro que estás harto de repetir la mítica instrucción <code>npm install paquete-x</code> Pero, ¿has pensado en <strong>publicar tus propios módulos</strong>?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\"><em>npm</em></a>.</p><p>Sigue este proceso y te convertirás en un creador de paquetes para <em>npm</em> :</p><h2 id=\"Programa\"><a href=\"#Programa\" class=\"headerlink\" title=\"Programa\"></a>Programa</h2><p>Todo empieza por tener una necesidad y resolverla <strong>encapsulando su código en un módulo.</strong> Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.</p><p>Antes de continuar vamos a fijar un par de conceptos:</p><p><strong>- módulo:</strong> Fichero <em>.js</em> que exporta un funcionalidad y oculta su implementación.</p><p><strong>- paquete:</strong> Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.</p><p>Conocidos los ingredientes, la receta es sencilla:</p><ol><li>Debes crear un proyecto para el paquete que vas a publicar.</li><li>Has de subir el código a un repositorio público.</li><li>Y debes rellenar convenientemente el <code>package.json</code> de tu proyecto.</li></ol><p>Este es un ejemplo que he creado y <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"noopener\">publicado en github</a> que te puede servir de base.</p><p>Presta especial atención al <strong>nombrado</strong> de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un <em>prefijo</em> con tus iniciales o las de tu empresa.</p><p>No te olvides de incluir un juego de <strong>pruebas y documentación</strong> necesaria para sus uso.</p><h2 id=\"Publica\"><a href=\"#Publica\" class=\"headerlink\" title=\"Publica\"></a>Publica</h2><p>Puedes descargar librerías y herramienta desde el repositorio de <em>npm</em> de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que <strong>registrarte para poder publicar</strong> contenido. El <a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"noopener\">proceso de registro</a> vía web es sencillo y grátis.</p><p>Una vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: <code>npm login</code> te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure><p>Puedes encontrar <a href=\"https://docs.npmjs.com/cli/publish\" target=\"_blank\" rel=\"noopener\">más información</a> acerca de este mega comando en la documentación de <em>npmjs</em>. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.</p><p>La clave está en que tu fichero de configuración <code>package.json</code> sea correcto y lo más completo posible. Escribe un completo <code>readme.md</code> que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"noopener\">el contenido subido a github</a> se transforma y se ve en la <a href=\"https://www.npmjs.com/package/ab-ftp\" target=\"_blank\" rel=\"noopener\">página de información de npm.</a></p><p>Comprueba en un directorio vacío que <code>npm install nombre-de-tu-paquete</code> descarga todo lo necesario… y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.</p><h2 id=\"Actualiza\"><a href=\"#Actualiza\" class=\"headerlink\" title=\"Actualiza\"></a>Actualiza</h2><p>Con el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de <a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">nombrado de versiones semántico</a>:</p><p><strong>x.y.z = 1.2.3 = ruptura.mejora.parche</strong></p><p>Es bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en <em>github</em>.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag 0.1.2</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure><h2 id=\"Disfruta\"><a href=\"#Disfruta\" class=\"headerlink\" title=\"Disfruta\"></a>Disfruta</h2><p>Finalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso <strong>siempre habrás ganado</strong>. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.</p>","site":{"data":{}},"excerpt":"","more":"<p>Seguro que estás harto de repetir la mítica instrucción <code>npm install paquete-x</code> Pero, ¿has pensado en <strong>publicar tus propios módulos</strong>?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\"><em>npm</em></a>.</p><p>Sigue este proceso y te convertirás en un creador de paquetes para <em>npm</em> :</p><h2 id=\"Programa\"><a href=\"#Programa\" class=\"headerlink\" title=\"Programa\"></a>Programa</h2><p>Todo empieza por tener una necesidad y resolverla <strong>encapsulando su código en un módulo.</strong> Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.</p><p>Antes de continuar vamos a fijar un par de conceptos:</p><p><strong>- módulo:</strong> Fichero <em>.js</em> que exporta un funcionalidad y oculta su implementación.</p><p><strong>- paquete:</strong> Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.</p><p>Conocidos los ingredientes, la receta es sencilla:</p><ol><li>Debes crear un proyecto para el paquete que vas a publicar.</li><li>Has de subir el código a un repositorio público.</li><li>Y debes rellenar convenientemente el <code>package.json</code> de tu proyecto.</li></ol><p>Este es un ejemplo que he creado y <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"noopener\">publicado en github</a> que te puede servir de base.</p><p>Presta especial atención al <strong>nombrado</strong> de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un <em>prefijo</em> con tus iniciales o las de tu empresa.</p><p>No te olvides de incluir un juego de <strong>pruebas y documentación</strong> necesaria para sus uso.</p><h2 id=\"Publica\"><a href=\"#Publica\" class=\"headerlink\" title=\"Publica\"></a>Publica</h2><p>Puedes descargar librerías y herramienta desde el repositorio de <em>npm</em> de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que <strong>registrarte para poder publicar</strong> contenido. El <a href=\"https://www.npmjs.com/signup\" target=\"_blank\" rel=\"noopener\">proceso de registro</a> vía web es sencillo y grátis.</p><p>Una vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: <code>npm login</code> te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure><p>Puedes encontrar <a href=\"https://docs.npmjs.com/cli/publish\" target=\"_blank\" rel=\"noopener\">más información</a> acerca de este mega comando en la documentación de <em>npmjs</em>. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.</p><p>La clave está en que tu fichero de configuración <code>package.json</code> sea correcto y lo más completo posible. Escribe un completo <code>readme.md</code> que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo <a href=\"https://github.com/AgoraBinaria/ab-ftp\" target=\"_blank\" rel=\"noopener\">el contenido subido a github</a> se transforma y se ve en la <a href=\"https://www.npmjs.com/package/ab-ftp\" target=\"_blank\" rel=\"noopener\">página de información de npm.</a></p><p>Comprueba en un directorio vacío que <code>npm install nombre-de-tu-paquete</code> descarga todo lo necesario… y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.</p><h2 id=\"Actualiza\"><a href=\"#Actualiza\" class=\"headerlink\" title=\"Actualiza\"></a>Actualiza</h2><p>Con el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de <a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">nombrado de versiones semántico</a>:</p><p><strong>x.y.z = 1.2.3 = ruptura.mejora.parche</strong></p><p>Es bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en <em>github</em>.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag 0.1.2</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure><h2 id=\"Disfruta\"><a href=\"#Disfruta\" class=\"headerlink\" title=\"Disfruta\"></a>Disfruta</h2><p>Finalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso <strong>siempre habrás ganado</strong>. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.</p>"},{"title":"Tests unitarios con Jest y e2e con Cypress en Angular","date":"2019-09-05T12:25:12.000Z","thumbnail":"/css/images/angular-11_test.png","_content":"\n![tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular](/images/tutorial-angular-11_test.png)\n\nContinuamos este **tutorial de Angular Avanzado** con el tema controvertido del testing. Sí, ya sé que todos deberíamos hacerlo siempre, pero también sé que no es cierto. Así que vamos a ponerle remedio eliminando excusas y facilitando las pruebas automatizadas.\n\n> Por si hace falta su defensa: Las pruebas automáticas de código son la principal técnica de reducción de bugs y garantizan el buen funcionamiento durante un refactoring. Bueno para el usuario bueno para el programador.\n\nLos desarrollos que hoy en día hacemos con **Angular** suelen ser de tamaño medio o grande y con una esperanza de vida y mantenimiento que se mide en años. Así que cuantas más pruebas tengamos menos miedo tendremos a cambiar el código. Y la necesidad de cambio siempre estará ahí. Veremos como _Jest_ y _Cypress_ nos ayudan muchísimo en la tarea.\n\n<!-- more -->\n\nPartiendo del [mono repositorio creado](../nx-mono-repositorios-en-Angular) usando las herramientas de [Nrwl.io/](https://nrwl.io/) aprovecharemos las herramientas que instala y configura dos productos de última generación que facilitan la tarea. Usaremos [Jest](https://jestjs.io/) para los test unitarios y [Cypress](https://www.cypress.io/) para los de integración _End to End_. Vamos a empezar por el final.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Test de Integración con Cypress.](./#1.-Test-de-Integración-con-Cypress)\n\n[2. Test Unitarios con Jest.](./#2.-Test-Unitarios-con-Jest)\n\n<!-- [Diagramas](./#Diagramas) -->\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Test de Integración con Cypress\n\n```yaml\nAs a: developer,\n  I want: to test end to end my app\n  so that: I can be sure of the functions\n```\n\nLas pruebas de integración son las que tienen un retorno de inversión más inmediato. Si esta es tu primera aproximación al testing, te recomiendo empezar por aquí. Se trata de definir un escenario y pre programar el comportamiento del usuario. El sistema lo ejecutará y podrás contrastar el resultado con algún valor esperado.\n\nSon pruebas de caja negra que interactúan con el sistema en ejecución. Todo ello automatizado y con informes visuales interactivos o en ficheros de texto con el resultado de las pruebas.\n\n## 1.1 Cypress\n\n[Cypress](https://www.cypress.io/) es el equivalente a Protractor, el producto propio de Angular. La ventaja principal es que no está atado a ningún framework y por tanto lo que hagas valdrá para probar cualquier web en cualquier tecnología.\n\nCon cada aplicación generada se crea una hermana para sus pruebas _e2e_. Esa aplicación de pruebas está configurada y lista para compilar, servir y probar su aplicación objetivo. Con Nx tenemos todo instalado, configurado y listo para ejecutarse con comandos como los siguientes que yo coloco en el `packcage.json`:\n\n```json\n  \"e2e:shop\": \"ng e2e shop-e2e --watch\",\n  \"e2e:warehouse\": \"ng e2e warehouse-e2e --watch\",\n```\n\nLuego se pueden lanzar desde la terminal muy cómodamente.\n\n```terminal\nyarn e2e:shop\nyarn e2e:warehouse\n```\n\n## 1.2 Test e2e\n\n```yaml\nGIVEN: the shop web app\n  WHEN: user visits home page\n    THEN: should display welcome message\n    THEN: should display welcome message from the API\n```\n\nTu trabajo como _tester_ será definir las pruebas en la carpeta `/integration`. Por ejemplo para empezar nos ofrecen el fichero `app-spec.ts` en el que yo he especificado el comportamiento deseado por mi página. La sintaxis se entiende por si misma. He seguido el convenio **GIVEN, WHEN, THEN** para especificar pruebas que podrían considerarse casi de comportamiento o aceptación.\n\n`apps\\shop-e2e\\src\\integration\\app.spec.ts`\n\n```typescript\nimport { getGreeting } from '../support/app.po';\n\ndescribe('GIVEN: the shop web app', () => {\n  beforeEach(() => cy.visit('/'));\n  context('WHEN: user visits home page', () => {\n    it('THEN: should display welcome message', () => {\n      getGreeting().contains('Hello world');\n    });\n    // needs the api server to run\n    // yarn start:api\n    it('THEN: should display welcome message from the API', () => {\n      getGreeting().contains('and Welcome to api!');\n    });\n  });\n});\n```\n\nLa parte más técnica y tediosa es la que accede al _DOM_ y lo mejor es tener eso a parte. En la carpeta `/support` nos sugieren que creemos utilidades para tratar con el _DOM_ y de esa forma mantener los test lo más cercanos posible a un lenguaje natural de negocio. Como se ve en mi caso una aproximación libre al [BDD con gherkin](https://www.genbeta.com/desarrollo/bdd-cucumber-y-gherkin-desarrollo-dirigido-por-comportamiento) para mantener el espíritu de sencillez de un tutorial sobre tecnología Angular, no sobre testing.\n\n`apps\\shop-e2e\\src\\support\\app.po.ts`\n\n```typescript\nexport const getGreeting = () => cy.get('h1');\n```\n\n---\n\n\n# 2. Test Unitarios con Jest\n\nLas pruebas unitarias, muy asociadas al [TDD](https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92), son las mejores amigas del desarrollador. Pero, también son las más engorrosas para empezar. Así que aquí veremos una introducción sencilla para que nadie deje de hacerlas.\n\n\n## 2.1 Jest\n\n[Jest](https://jestjs.io/) es un framework de testing para JavaScript muy sencillo y rápido. Puedes usarlo con cualquier otro framework. Para el caso de Angular ya viene preconfigurado si usas las extensiones Nx.\n\nMete los siguientes scripts en el `package.json` y así tendrás a mano siempre las pruebas. Te recomiendo que desarrolles con el test unitario lanzado; es la manera más rápida de probar el código que estés tocando. Idealmente incluso con el [test antes del código](https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80).\n\n```json\n  \"test:shop\": \"ng test shop --watch --verbose\",\n  \"test:warehouse\": \"ng test warehouse --watch --verbose\",\n  \"test:api\": \"ng test api --watch --verbose\",\n```\n\n```terminal\nyarn test:shop\nyarn test:warehouse\nyarn test:api\n```\n\n## 2.2 Tests unitarios\n\n\n### 2.2.1 Componentes\n\n```yaml\nGIVEN: an AppComponent declared in AppModule\n  WHEN: the AppModule is compiled\n    THEN: should create the component\n    THEN: should have a property title with value 'shop'\n    THEN: should render 'Hello world' in a H1 tag\n```\n\nEn este caso queremos probar una librería de componentes. Claro que se podrán hacer pruebas unitarias y de integración parcial. Pero también puedes incluirlas como parte de la prueba de integración total de la aplicación que la consume. De esta forma te aseguras de que el módulo de la librería se importa y que sus componentes se exportan correctamente. Por ejemplo lo uso desde la aplicación _shop_, y puedo comprobar que su componente `AppComponent` funciona y que se renderiza también el componente `ab-ui-greetings` incrustando con los saludos.\n\n\n`apps\\shop\\src\\app\\app.component.spec.ts`\n\n```typescript\nimport { UiModule } from '@a-boss/ui';\nimport { async, TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { AppComponent } from './app.component';\n\ndescribe('GIVEN: an AppComponent declared in AppModule', () => {\n  describe('WHEN: the AppModule is compiled', () => {\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [RouterTestingModule, UiModule],\n        declarations: [AppComponent]\n      }).compileComponents();\n    }));\n\n    it('THEN: should create the component', () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      const app = fixture.debugElement.componentInstance;\n      expect(app).toBeTruthy();\n    });\n\n    it(`THEN: should have a property title with value 'shop'`, () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      const app = fixture.debugElement.componentInstance;\n      expect(app.title).toEqual('shop');\n    });\n\n    it(`THEN: should render 'Hello world' in a H1 tag`, () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      fixture.detectChanges();\n      const compiled = fixture.debugElement.nativeElement;\n      expect(compiled.querySelector('h1').textContent).toContain('Hello world');\n    });\n  });\n});\n```\n\n### 2.2.2 Services\n\n```yaml\nGIVEN: a GreetingsService\n  WHEN: the DataModule is compiled\n    THEN: should be created\n    THEN: should return an observable when call 'getGrettings()'\n    THEN: should return 'Welcome to api!' when call 'getGrettings()'\n```\n\nLa prueba de servicios es más sencilla que la de componentes, pues no hay que tratar con la renderización del HTML. sólo funcionalidad en una clase TypeScript. pero, siempre hay un pero, muchos de estos servicios tratarán con llamadas asíncronas. Afortunadamente está todo pensado y se resuelve con dos conceptos: la función `async()` y inyección de réplicas (_mocks_) de las dependencias.\n\n`libs\\shared\\data\\src\\lib\\greetings\\greetings.service.spec.ts`\n\n---\n\n```typescript\n// importar réplicas para testing de las dependencias del servicio\nimport {\n  HttpClientTestingModule,\n  HttpTestingController\n} from '@angular/common/http/testing';\nimport { async, TestBed } from '@angular/core/testing';\nimport { Observable } from 'rxjs';\nimport { GreetingsService } from './greetings.service';\n\ndescribe('GIVEN: a GreetingsService', () => {\n  describe('WHEN: the DataModule is compiled', () => {\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule]\n      });\n    });\n\n    it('THEN: should be created', () => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      expect(service).toBeTruthy();\n    });\n\n    it(`THEN: should return an observable when call 'getGrettings()'`, () => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      const greetings$: Observable<any> = service.getGrettings$();\n      expect(greetings$).toBeInstanceOf(Observable);\n    });\n\n    // Ojo al async para ejectuar las llamadas asíncronas\n    it(`THEN: should return 'Welcome to api!' when call 'getGrettings()'`, async(() => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      service\n        .getGrettings$()\n        .subscribe(result =>\n          expect(result).toEqual({ message: 'Welcome to api!' })\n        );\n      // mock del backend para no depender del servidor\n      const httpMock = TestBed.get(HttpTestingController);\n      // esperar a que se llame a esta ruta\n      const req = httpMock.expectOne('http://localhost:3333/api');\n      req.flush({ message: 'Welcome to api!' }); // responder con esto\n      httpMock.verify(); // comprobar que no hay más llmadas\n    }));\n  });\n});\n```\n\nA partir de aquí es siempre igual. Defines un respuesta esperada, le das una entrada conocida y si algo no cuadra, entonces el código no pasa la prueba y tienes una oportunidad para mejorarlo.\n\n---\n\n## Resumen\n\nEn definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones fiables y mantenibles. Y eso pasa inexcusablemente por hacer testing. **Angular** facilita las pruebas unitarias y de integración; especialmente con las herramientas _Jest_ y  _Cypress_ ya configuradas por **Nx**.\n\nCon este tutorial de formación [avanzada en Angular](../tag/Avanzado/) te preparas para poder afrontar retos de tamaño industrial. Continúa aprendiendo a mejorar el rendimiento usando la [detección del cambio en Angular](../deteccion-del-cambio-en-Angular).\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-11-tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular.md","raw":"---\ntitle: Tests unitarios con Jest y e2e con Cypress en Angular\npermalink: tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\ndate: 2019-09-05 14:25:12\ntags:\n- Angular\n- Angular8\n- Nx\n- Test\n- Jest\n- Cypress\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-11_test.png\n---\n\n![tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular](/images/tutorial-angular-11_test.png)\n\nContinuamos este **tutorial de Angular Avanzado** con el tema controvertido del testing. Sí, ya sé que todos deberíamos hacerlo siempre, pero también sé que no es cierto. Así que vamos a ponerle remedio eliminando excusas y facilitando las pruebas automatizadas.\n\n> Por si hace falta su defensa: Las pruebas automáticas de código son la principal técnica de reducción de bugs y garantizan el buen funcionamiento durante un refactoring. Bueno para el usuario bueno para el programador.\n\nLos desarrollos que hoy en día hacemos con **Angular** suelen ser de tamaño medio o grande y con una esperanza de vida y mantenimiento que se mide en años. Así que cuantas más pruebas tengamos menos miedo tendremos a cambiar el código. Y la necesidad de cambio siempre estará ahí. Veremos como _Jest_ y _Cypress_ nos ayudan muchísimo en la tarea.\n\n<!-- more -->\n\nPartiendo del [mono repositorio creado](../nx-mono-repositorios-en-Angular) usando las herramientas de [Nrwl.io/](https://nrwl.io/) aprovecharemos las herramientas que instala y configura dos productos de última generación que facilitan la tarea. Usaremos [Jest](https://jestjs.io/) para los test unitarios y [Cypress](https://www.cypress.io/) para los de integración _End to End_. Vamos a empezar por el final.\n\n> Código asociado a este tutorial en _GitHub_: [AcademiaBinaria/angular-boss](https://github.com/AcademiaBinaria/angular-boss)\n\n\n## Tabla de Contenido:\n\n[1. Test de Integración con Cypress.](./#1.-Test-de-Integración-con-Cypress)\n\n[2. Test Unitarios con Jest.](./#2.-Test-Unitarios-con-Jest)\n\n<!-- [Diagramas](./#Diagramas) -->\n\n[Resumen](./#Resumen)\n\n---\n\n# 1. Test de Integración con Cypress\n\n```yaml\nAs a: developer,\n  I want: to test end to end my app\n  so that: I can be sure of the functions\n```\n\nLas pruebas de integración son las que tienen un retorno de inversión más inmediato. Si esta es tu primera aproximación al testing, te recomiendo empezar por aquí. Se trata de definir un escenario y pre programar el comportamiento del usuario. El sistema lo ejecutará y podrás contrastar el resultado con algún valor esperado.\n\nSon pruebas de caja negra que interactúan con el sistema en ejecución. Todo ello automatizado y con informes visuales interactivos o en ficheros de texto con el resultado de las pruebas.\n\n## 1.1 Cypress\n\n[Cypress](https://www.cypress.io/) es el equivalente a Protractor, el producto propio de Angular. La ventaja principal es que no está atado a ningún framework y por tanto lo que hagas valdrá para probar cualquier web en cualquier tecnología.\n\nCon cada aplicación generada se crea una hermana para sus pruebas _e2e_. Esa aplicación de pruebas está configurada y lista para compilar, servir y probar su aplicación objetivo. Con Nx tenemos todo instalado, configurado y listo para ejecutarse con comandos como los siguientes que yo coloco en el `packcage.json`:\n\n```json\n  \"e2e:shop\": \"ng e2e shop-e2e --watch\",\n  \"e2e:warehouse\": \"ng e2e warehouse-e2e --watch\",\n```\n\nLuego se pueden lanzar desde la terminal muy cómodamente.\n\n```terminal\nyarn e2e:shop\nyarn e2e:warehouse\n```\n\n## 1.2 Test e2e\n\n```yaml\nGIVEN: the shop web app\n  WHEN: user visits home page\n    THEN: should display welcome message\n    THEN: should display welcome message from the API\n```\n\nTu trabajo como _tester_ será definir las pruebas en la carpeta `/integration`. Por ejemplo para empezar nos ofrecen el fichero `app-spec.ts` en el que yo he especificado el comportamiento deseado por mi página. La sintaxis se entiende por si misma. He seguido el convenio **GIVEN, WHEN, THEN** para especificar pruebas que podrían considerarse casi de comportamiento o aceptación.\n\n`apps\\shop-e2e\\src\\integration\\app.spec.ts`\n\n```typescript\nimport { getGreeting } from '../support/app.po';\n\ndescribe('GIVEN: the shop web app', () => {\n  beforeEach(() => cy.visit('/'));\n  context('WHEN: user visits home page', () => {\n    it('THEN: should display welcome message', () => {\n      getGreeting().contains('Hello world');\n    });\n    // needs the api server to run\n    // yarn start:api\n    it('THEN: should display welcome message from the API', () => {\n      getGreeting().contains('and Welcome to api!');\n    });\n  });\n});\n```\n\nLa parte más técnica y tediosa es la que accede al _DOM_ y lo mejor es tener eso a parte. En la carpeta `/support` nos sugieren que creemos utilidades para tratar con el _DOM_ y de esa forma mantener los test lo más cercanos posible a un lenguaje natural de negocio. Como se ve en mi caso una aproximación libre al [BDD con gherkin](https://www.genbeta.com/desarrollo/bdd-cucumber-y-gherkin-desarrollo-dirigido-por-comportamiento) para mantener el espíritu de sencillez de un tutorial sobre tecnología Angular, no sobre testing.\n\n`apps\\shop-e2e\\src\\support\\app.po.ts`\n\n```typescript\nexport const getGreeting = () => cy.get('h1');\n```\n\n---\n\n\n# 2. Test Unitarios con Jest\n\nLas pruebas unitarias, muy asociadas al [TDD](https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92), son las mejores amigas del desarrollador. Pero, también son las más engorrosas para empezar. Así que aquí veremos una introducción sencilla para que nadie deje de hacerlas.\n\n\n## 2.1 Jest\n\n[Jest](https://jestjs.io/) es un framework de testing para JavaScript muy sencillo y rápido. Puedes usarlo con cualquier otro framework. Para el caso de Angular ya viene preconfigurado si usas las extensiones Nx.\n\nMete los siguientes scripts en el `package.json` y así tendrás a mano siempre las pruebas. Te recomiendo que desarrolles con el test unitario lanzado; es la manera más rápida de probar el código que estés tocando. Idealmente incluso con el [test antes del código](https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80).\n\n```json\n  \"test:shop\": \"ng test shop --watch --verbose\",\n  \"test:warehouse\": \"ng test warehouse --watch --verbose\",\n  \"test:api\": \"ng test api --watch --verbose\",\n```\n\n```terminal\nyarn test:shop\nyarn test:warehouse\nyarn test:api\n```\n\n## 2.2 Tests unitarios\n\n\n### 2.2.1 Componentes\n\n```yaml\nGIVEN: an AppComponent declared in AppModule\n  WHEN: the AppModule is compiled\n    THEN: should create the component\n    THEN: should have a property title with value 'shop'\n    THEN: should render 'Hello world' in a H1 tag\n```\n\nEn este caso queremos probar una librería de componentes. Claro que se podrán hacer pruebas unitarias y de integración parcial. Pero también puedes incluirlas como parte de la prueba de integración total de la aplicación que la consume. De esta forma te aseguras de que el módulo de la librería se importa y que sus componentes se exportan correctamente. Por ejemplo lo uso desde la aplicación _shop_, y puedo comprobar que su componente `AppComponent` funciona y que se renderiza también el componente `ab-ui-greetings` incrustando con los saludos.\n\n\n`apps\\shop\\src\\app\\app.component.spec.ts`\n\n```typescript\nimport { UiModule } from '@a-boss/ui';\nimport { async, TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { AppComponent } from './app.component';\n\ndescribe('GIVEN: an AppComponent declared in AppModule', () => {\n  describe('WHEN: the AppModule is compiled', () => {\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [RouterTestingModule, UiModule],\n        declarations: [AppComponent]\n      }).compileComponents();\n    }));\n\n    it('THEN: should create the component', () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      const app = fixture.debugElement.componentInstance;\n      expect(app).toBeTruthy();\n    });\n\n    it(`THEN: should have a property title with value 'shop'`, () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      const app = fixture.debugElement.componentInstance;\n      expect(app.title).toEqual('shop');\n    });\n\n    it(`THEN: should render 'Hello world' in a H1 tag`, () => {\n      const fixture = TestBed.createComponent(AppComponent);\n      fixture.detectChanges();\n      const compiled = fixture.debugElement.nativeElement;\n      expect(compiled.querySelector('h1').textContent).toContain('Hello world');\n    });\n  });\n});\n```\n\n### 2.2.2 Services\n\n```yaml\nGIVEN: a GreetingsService\n  WHEN: the DataModule is compiled\n    THEN: should be created\n    THEN: should return an observable when call 'getGrettings()'\n    THEN: should return 'Welcome to api!' when call 'getGrettings()'\n```\n\nLa prueba de servicios es más sencilla que la de componentes, pues no hay que tratar con la renderización del HTML. sólo funcionalidad en una clase TypeScript. pero, siempre hay un pero, muchos de estos servicios tratarán con llamadas asíncronas. Afortunadamente está todo pensado y se resuelve con dos conceptos: la función `async()` y inyección de réplicas (_mocks_) de las dependencias.\n\n`libs\\shared\\data\\src\\lib\\greetings\\greetings.service.spec.ts`\n\n---\n\n```typescript\n// importar réplicas para testing de las dependencias del servicio\nimport {\n  HttpClientTestingModule,\n  HttpTestingController\n} from '@angular/common/http/testing';\nimport { async, TestBed } from '@angular/core/testing';\nimport { Observable } from 'rxjs';\nimport { GreetingsService } from './greetings.service';\n\ndescribe('GIVEN: a GreetingsService', () => {\n  describe('WHEN: the DataModule is compiled', () => {\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule]\n      });\n    });\n\n    it('THEN: should be created', () => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      expect(service).toBeTruthy();\n    });\n\n    it(`THEN: should return an observable when call 'getGrettings()'`, () => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      const greetings$: Observable<any> = service.getGrettings$();\n      expect(greetings$).toBeInstanceOf(Observable);\n    });\n\n    // Ojo al async para ejectuar las llamadas asíncronas\n    it(`THEN: should return 'Welcome to api!' when call 'getGrettings()'`, async(() => {\n      const service: GreetingsService = TestBed.get(GreetingsService);\n      service\n        .getGrettings$()\n        .subscribe(result =>\n          expect(result).toEqual({ message: 'Welcome to api!' })\n        );\n      // mock del backend para no depender del servidor\n      const httpMock = TestBed.get(HttpTestingController);\n      // esperar a que se llame a esta ruta\n      const req = httpMock.expectOne('http://localhost:3333/api');\n      req.flush({ message: 'Welcome to api!' }); // responder con esto\n      httpMock.verify(); // comprobar que no hay más llmadas\n    }));\n  });\n});\n```\n\nA partir de aquí es siempre igual. Defines un respuesta esperada, le das una entrada conocida y si algo no cuadra, entonces el código no pasa la prueba y tienes una oportunidad para mejorarlo.\n\n---\n\n## Resumen\n\nEn definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones fiables y mantenibles. Y eso pasa inexcusablemente por hacer testing. **Angular** facilita las pruebas unitarias y de integración; especialmente con las herramientas _Jest_ y  _Cypress_ ya configuradas por **Nx**.\n\nCon este tutorial de formación [avanzada en Angular](../tag/Avanzado/) te preparas para poder afrontar retos de tamaño industrial. Continúa aprendiendo a mejorar el rendimiento usando la [detección del cambio en Angular](../deteccion-del-cambio-en-Angular).\n\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular","published":1,"updated":"2019-09-05T15:34:59.393Z","_id":"cjysd9lwv000goos3du96ec3d","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-11_test.png\" alt=\"tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\"></p><p>Continuamos este <strong>tutorial de Angular Avanzado</strong> con el tema controvertido del testing. Sí, ya sé que todos deberíamos hacerlo siempre, pero también sé que no es cierto. Así que vamos a ponerle remedio eliminando excusas y facilitando las pruebas automatizadas.</p><blockquote><p>Por si hace falta su defensa: Las pruebas automáticas de código son la principal técnica de reducción de bugs y garantizan el buen funcionamiento durante un refactoring. Bueno para el usuario bueno para el programador.</p></blockquote><p>Los desarrollos que hoy en día hacemos con <strong>Angular</strong> suelen ser de tamaño medio o grande y con una esperanza de vida y mantenimiento que se mide en años. Así que cuantas más pruebas tengamos menos miedo tendremos a cambiar el código. Y la necesidad de cambio siempre estará ahí. Veremos como <em>Jest</em> y <em>Cypress</em> nos ayudan muchísimo en la tarea.</p><a id=\"more\"></a><p>Partiendo del <a href=\"../nx-mono-repositorios-en-Angular\">mono repositorio creado</a> usando las herramientas de <a href=\"https://nrwl.io/\" target=\"_blank\" rel=\"noopener\">Nrwl.io/</a> aprovecharemos las herramientas que instala y configura dos productos de última generación que facilitan la tarea. Usaremos <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">Jest</a> para los test unitarios y <a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noopener\">Cypress</a> para los de integración <em>End to End</em>. Vamos a empezar por el final.</p><blockquote><p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-boss</a></p></blockquote><h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1.-Test-de-Integración-con-Cypress\">1. Test de Integración con Cypress.</a></p><p><a href=\"./#2.-Test-Unitarios-con-Jest\">2. Test Unitarios con Jest.</a></p><p><a href=\"./#Resumen\">Resumen</a></p><hr><h1 id=\"1-Test-de-Integracion-con-Cypress\"><a href=\"#1-Test-de-Integracion-con-Cypress\" class=\"headerlink\" title=\"1. Test de Integración con Cypress\"></a>1. Test de Integración con Cypress</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">developer,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">test</span> <span class=\"string\">end</span> <span class=\"string\">to</span> <span class=\"string\">end</span> <span class=\"string\">my</span> <span class=\"string\">app</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">be</span> <span class=\"string\">sure</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">functions</span></span><br></pre></td></tr></table></figure><p>Las pruebas de integración son las que tienen un retorno de inversión más inmediato. Si esta es tu primera aproximación al testing, te recomiendo empezar por aquí. Se trata de definir un escenario y pre programar el comportamiento del usuario. El sistema lo ejecutará y podrás contrastar el resultado con algún valor esperado.</p><p>Son pruebas de caja negra que interactúan con el sistema en ejecución. Todo ello automatizado y con informes visuales interactivos o en ficheros de texto con el resultado de las pruebas.</p><h2 id=\"1-1-Cypress\"><a href=\"#1-1-Cypress\" class=\"headerlink\" title=\"1.1 Cypress\"></a>1.1 Cypress</h2><p><a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noopener\">Cypress</a> es el equivalente a Protractor, el producto propio de Angular. La ventaja principal es que no está atado a ningún framework y por tanto lo que hagas valdrá para probar cualquier web en cualquier tecnología.</p><p>Con cada aplicación generada se crea una hermana para sus pruebas <em>e2e</em>. Esa aplicación de pruebas está configurada y lista para compilar, servir y probar su aplicación objetivo. Con Nx tenemos todo instalado, configurado y listo para ejecutarse con comandos como los siguientes que yo coloco en el <code>packcage.json</code>:</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"e2e:shop\": \"ng e2e shop-e2e --watch\",</span><br><span class=\"line\">\"e2e:warehouse\": \"ng e2e warehouse-e2e --watch\",</span><br></pre></td></tr></table></figure><p>Luego se pueden lanzar desde la terminal muy cómodamente.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn e2e:shop</span><br><span class=\"line\">yarn e2e:warehouse</span><br></pre></td></tr></table></figure><h2 id=\"1-2-Test-e2e\"><a href=\"#1-2-Test-e2e\" class=\"headerlink\" title=\"1.2 Test e2e\"></a>1.2 Test e2e</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">the</span> <span class=\"string\">shop</span> <span class=\"string\">web</span> <span class=\"string\">app</span></span><br><span class=\"line\"><span class=\"attr\">  WHEN:</span> <span class=\"string\">user</span> <span class=\"string\">visits</span> <span class=\"string\">home</span> <span class=\"string\">page</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">display</span> <span class=\"string\">welcome</span> <span class=\"string\">message</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">display</span> <span class=\"string\">welcome</span> <span class=\"string\">message</span> <span class=\"string\">from</span> <span class=\"string\">the</span> <span class=\"string\">API</span></span><br></pre></td></tr></table></figure><p>Tu trabajo como <em>tester</em> será definir las pruebas en la carpeta <code>/integration</code>. Por ejemplo para empezar nos ofrecen el fichero <code>app-spec.ts</code> en el que yo he especificado el comportamiento deseado por mi página. La sintaxis se entiende por si misma. He seguido el convenio <strong>GIVEN, WHEN, THEN</strong> para especificar pruebas que podrían considerarse casi de comportamiento o aceptación.</p><p><code>apps\\shop-e2e\\src\\integration\\app.spec.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getGreeting &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../support/app.po'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'GIVEN: the shop web app'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cy.visit(<span class=\"string\">'/'</span>));</span><br><span class=\"line\">  context(<span class=\"string\">'WHEN: user visits home page'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    it(<span class=\"string\">'THEN: should display welcome message'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      getGreeting().contains(<span class=\"string\">'Hello world'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// needs the api server to run</span></span><br><span class=\"line\">    <span class=\"comment\">// yarn start:api</span></span><br><span class=\"line\">    it(<span class=\"string\">'THEN: should display welcome message from the API'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      getGreeting().contains(<span class=\"string\">'and Welcome to api!'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>La parte más técnica y tediosa es la que accede al <em>DOM</em> y lo mejor es tener eso a parte. En la carpeta <code>/support</code> nos sugieren que creemos utilidades para tratar con el <em>DOM</em> y de esa forma mantener los test lo más cercanos posible a un lenguaje natural de negocio. Como se ve en mi caso una aproximación libre al <a href=\"https://www.genbeta.com/desarrollo/bdd-cucumber-y-gherkin-desarrollo-dirigido-por-comportamiento\" target=\"_blank\" rel=\"noopener\">BDD con gherkin</a> para mantener el espíritu de sencillez de un tutorial sobre tecnología Angular, no sobre testing.</p><p><code>apps\\shop-e2e\\src\\support\\app.po.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getGreeting = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cy.get(<span class=\"string\">'h1'</span>);</span><br></pre></td></tr></table></figure><hr><h1 id=\"2-Test-Unitarios-con-Jest\"><a href=\"#2-Test-Unitarios-con-Jest\" class=\"headerlink\" title=\"2. Test Unitarios con Jest\"></a>2. Test Unitarios con Jest</h1><p>Las pruebas unitarias, muy asociadas al <a href=\"https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92\" target=\"_blank\" rel=\"noopener\">TDD</a>, son las mejores amigas del desarrollador. Pero, también son las más engorrosas para empezar. Así que aquí veremos una introducción sencilla para que nadie deje de hacerlas.</p><h2 id=\"2-1-Jest\"><a href=\"#2-1-Jest\" class=\"headerlink\" title=\"2.1 Jest\"></a>2.1 Jest</h2><p><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">Jest</a> es un framework de testing para JavaScript muy sencillo y rápido. Puedes usarlo con cualquier otro framework. Para el caso de Angular ya viene preconfigurado si usas las extensiones Nx.</p><p>Mete los siguientes scripts en el <code>package.json</code> y así tendrás a mano siempre las pruebas. Te recomiendo que desarrolles con el test unitario lanzado; es la manera más rápida de probar el código que estés tocando. Idealmente incluso con el <a href=\"https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80\" target=\"_blank\" rel=\"noopener\">test antes del código</a>.</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"test:shop\": \"ng test shop --watch --verbose\",</span><br><span class=\"line\">\"test:warehouse\": \"ng test warehouse --watch --verbose\",</span><br><span class=\"line\">\"test:api\": \"ng test api --watch --verbose\",</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn test:shop</span><br><span class=\"line\">yarn test:warehouse</span><br><span class=\"line\">yarn test:api</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Tests-unitarios\"><a href=\"#2-2-Tests-unitarios\" class=\"headerlink\" title=\"2.2 Tests unitarios\"></a>2.2 Tests unitarios</h2><h3 id=\"2-2-1-Componentes\"><a href=\"#2-2-1-Componentes\" class=\"headerlink\" title=\"2.2.1 Componentes\"></a>2.2.1 Componentes</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">an</span> <span class=\"string\">AppComponent</span> <span class=\"string\">declared</span> <span class=\"string\">in</span> <span class=\"string\">AppModule</span></span><br><span class=\"line\"><span class=\"attr\">  WHEN:</span> <span class=\"string\">the</span> <span class=\"string\">AppModule</span> <span class=\"string\">is</span> <span class=\"string\">compiled</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">create</span> <span class=\"string\">the</span> <span class=\"string\">component</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">have</span> <span class=\"string\">a</span> <span class=\"string\">property</span> <span class=\"string\">title</span> <span class=\"string\">with</span> <span class=\"string\">value</span> <span class=\"string\">'shop'</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">render</span> <span class=\"string\">'Hello world'</span> <span class=\"string\">in</span> <span class=\"string\">a</span> <span class=\"string\">H1</span> <span class=\"string\">tag</span></span><br></pre></td></tr></table></figure><p>En este caso queremos probar una librería de componentes. Claro que se podrán hacer pruebas unitarias y de integración parcial. Pero también puedes incluirlas como parte de la prueba de integración total de la aplicación que la consume. De esta forma te aseguras de que el módulo de la librería se importa y que sus componentes se exportan correctamente. Por ejemplo lo uso desde la aplicación <em>shop</em>, y puedo comprobar que su componente <code>AppComponent</code> funciona y que se renderiza también el componente <code>ab-ui-greetings</code> incrustando con los saludos.</p><p><code>apps\\shop\\src\\app\\app.component.spec.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; UiModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">async</span>, TestBed &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core/testing'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouterTestingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router/testing'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'GIVEN: an AppComponent declared in AppModule'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'WHEN: the AppModule is compiled'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    beforeEach(<span class=\"keyword\">async</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      TestBed.configureTestingModule(&#123;</span><br><span class=\"line\">        imports: [RouterTestingModule, UiModule],</span><br><span class=\"line\">        declarations: [AppComponent]</span><br><span class=\"line\">      &#125;).compileComponents();</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'THEN: should create the component'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = TestBed.createComponent(AppComponent);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> app = fixture.debugElement.componentInstance;</span><br><span class=\"line\">      expect(app).toBeTruthy();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">`THEN: should have a property title with value 'shop'`</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = TestBed.createComponent(AppComponent);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> app = fixture.debugElement.componentInstance;</span><br><span class=\"line\">      expect(app.title).toEqual(<span class=\"string\">'shop'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">`THEN: should render 'Hello world' in a H1 tag`</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = TestBed.createComponent(AppComponent);</span><br><span class=\"line\">      fixture.detectChanges();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> compiled = fixture.debugElement.nativeElement;</span><br><span class=\"line\">      expect(compiled.querySelector(<span class=\"string\">'h1'</span>).textContent).toContain(<span class=\"string\">'Hello world'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h3 id=\"2-2-2-Services\"><a href=\"#2-2-2-Services\" class=\"headerlink\" title=\"2.2.2 Services\"></a>2.2.2 Services</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">a</span> <span class=\"string\">GreetingsService</span></span><br><span class=\"line\"><span class=\"attr\">  WHEN:</span> <span class=\"string\">the</span> <span class=\"string\">DataModule</span> <span class=\"string\">is</span> <span class=\"string\">compiled</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">be</span> <span class=\"string\">created</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">return</span> <span class=\"string\">an</span> <span class=\"string\">observable</span> <span class=\"string\">when</span> <span class=\"string\">call</span> <span class=\"string\">'getGrettings()'</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">return</span> <span class=\"string\">'Welcome to api!'</span> <span class=\"string\">when</span> <span class=\"string\">call</span> <span class=\"string\">'getGrettings()'</span></span><br></pre></td></tr></table></figure><p>La prueba de servicios es más sencilla que la de componentes, pues no hay que tratar con la renderización del HTML. sólo funcionalidad en una clase TypeScript. pero, siempre hay un pero, muchos de estos servicios tratarán con llamadas asíncronas. Afortunadamente está todo pensado y se resuelve con dos conceptos: la función <code>async()</code> y inyección de réplicas (<em>mocks</em>) de las dependencias.</p><p><code>libs\\shared\\data\\src\\lib\\greetings\\greetings.service.spec.ts</code></p><hr><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// importar réplicas para testing de las dependencias del servicio</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  HttpClientTestingModule,</span><br><span class=\"line\">  HttpTestingController</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http/testing'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">async</span>, TestBed &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core/testing'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; GreetingsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./greetings.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'GIVEN: a GreetingsService'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'WHEN: the DataModule is compiled'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      TestBed.configureTestingModule(&#123;</span><br><span class=\"line\">        imports: [HttpClientTestingModule]</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'THEN: should be created'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> service: GreetingsService = TestBed.get(GreetingsService);</span><br><span class=\"line\">      expect(service).toBeTruthy();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">`THEN: should return an observable when call 'getGrettings()'`</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> service: GreetingsService = TestBed.get(GreetingsService);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> greetings$: Observable&lt;<span class=\"built_in\">any</span>&gt; = service.getGrettings$();</span><br><span class=\"line\">      expect(greetings$).toBeInstanceOf(Observable);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ojo al async para ejectuar las llamadas asíncronas</span></span><br><span class=\"line\">    it(<span class=\"string\">`THEN: should return 'Welcome to api!' when call 'getGrettings()'`</span>, <span class=\"keyword\">async</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> service: GreetingsService = TestBed.get(GreetingsService);</span><br><span class=\"line\">      service</span><br><span class=\"line\">        .getGrettings$()</span><br><span class=\"line\">        .subscribe(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span></span><br><span class=\"line\">          expect(result).toEqual(&#123; message: <span class=\"string\">'Welcome to api!'</span> &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">      <span class=\"comment\">// mock del backend para no depender del servidor</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> httpMock = TestBed.get(HttpTestingController);</span><br><span class=\"line\">      <span class=\"comment\">// esperar a que se llame a esta ruta</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> req = httpMock.expectOne(<span class=\"string\">'http://localhost:3333/api'</span>);</span><br><span class=\"line\">      req.flush(&#123; message: <span class=\"string\">'Welcome to api!'</span> &#125;); <span class=\"comment\">// responder con esto</span></span><br><span class=\"line\">      httpMock.verify(); <span class=\"comment\">// comprobar que no hay más llmadas</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>A partir de aquí es siempre igual. Defines un respuesta esperada, le das una entrada conocida y si algo no cuadra, entonces el código no pasa la prueba y tienes una oportunidad para mejorarlo.</p><hr><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>En definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones fiables y mantenibles. Y eso pasa inexcusablemente por hacer testing. <strong>Angular</strong> facilita las pruebas unitarias y de integración; especialmente con las herramientas <em>Jest</em> y <em>Cypress</em> ya configuradas por <strong>Nx</strong>.</p><p>Con este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> te preparas para poder afrontar retos de tamaño industrial. Continúa aprendiendo a mejorar el rendimiento usando la <a href=\"../deteccion-del-cambio-en-Angular\">detección del cambio en Angular</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-11_test.png\" alt=\"tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular\"></p><p>Continuamos este <strong>tutorial de Angular Avanzado</strong> con el tema controvertido del testing. Sí, ya sé que todos deberíamos hacerlo siempre, pero también sé que no es cierto. Así que vamos a ponerle remedio eliminando excusas y facilitando las pruebas automatizadas.</p><blockquote><p>Por si hace falta su defensa: Las pruebas automáticas de código son la principal técnica de reducción de bugs y garantizan el buen funcionamiento durante un refactoring. Bueno para el usuario bueno para el programador.</p></blockquote><p>Los desarrollos que hoy en día hacemos con <strong>Angular</strong> suelen ser de tamaño medio o grande y con una esperanza de vida y mantenimiento que se mide en años. Así que cuantas más pruebas tengamos menos miedo tendremos a cambiar el código. Y la necesidad de cambio siempre estará ahí. Veremos como <em>Jest</em> y <em>Cypress</em> nos ayudan muchísimo en la tarea.</p>","more":"<p>Partiendo del <a href=\"../nx-mono-repositorios-en-Angular\">mono repositorio creado</a> usando las herramientas de <a href=\"https://nrwl.io/\" target=\"_blank\" rel=\"noopener\">Nrwl.io/</a> aprovecharemos las herramientas que instala y configura dos productos de última generación que facilitan la tarea. Usaremos <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">Jest</a> para los test unitarios y <a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noopener\">Cypress</a> para los de integración <em>End to End</em>. Vamos a empezar por el final.</p><blockquote><p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/AcademiaBinaria/angular-boss\" target=\"_blank\" rel=\"noopener\">AcademiaBinaria/angular-boss</a></p></blockquote><h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1.-Test-de-Integración-con-Cypress\">1. Test de Integración con Cypress.</a></p><p><a href=\"./#2.-Test-Unitarios-con-Jest\">2. Test Unitarios con Jest.</a></p><p><a href=\"./#Resumen\">Resumen</a></p><hr><h1 id=\"1-Test-de-Integracion-con-Cypress\"><a href=\"#1-Test-de-Integracion-con-Cypress\" class=\"headerlink\" title=\"1. Test de Integración con Cypress\"></a>1. Test de Integración con Cypress</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">As</span> <span class=\"attr\">a:</span> <span class=\"string\">developer,</span></span><br><span class=\"line\">  <span class=\"string\">I</span> <span class=\"attr\">want:</span> <span class=\"string\">to</span> <span class=\"string\">test</span> <span class=\"string\">end</span> <span class=\"string\">to</span> <span class=\"string\">end</span> <span class=\"string\">my</span> <span class=\"string\">app</span></span><br><span class=\"line\">  <span class=\"string\">so</span> <span class=\"attr\">that:</span> <span class=\"string\">I</span> <span class=\"string\">can</span> <span class=\"string\">be</span> <span class=\"string\">sure</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">functions</span></span><br></pre></td></tr></table></figure><p>Las pruebas de integración son las que tienen un retorno de inversión más inmediato. Si esta es tu primera aproximación al testing, te recomiendo empezar por aquí. Se trata de definir un escenario y pre programar el comportamiento del usuario. El sistema lo ejecutará y podrás contrastar el resultado con algún valor esperado.</p><p>Son pruebas de caja negra que interactúan con el sistema en ejecución. Todo ello automatizado y con informes visuales interactivos o en ficheros de texto con el resultado de las pruebas.</p><h2 id=\"1-1-Cypress\"><a href=\"#1-1-Cypress\" class=\"headerlink\" title=\"1.1 Cypress\"></a>1.1 Cypress</h2><p><a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noopener\">Cypress</a> es el equivalente a Protractor, el producto propio de Angular. La ventaja principal es que no está atado a ningún framework y por tanto lo que hagas valdrá para probar cualquier web en cualquier tecnología.</p><p>Con cada aplicación generada se crea una hermana para sus pruebas <em>e2e</em>. Esa aplicación de pruebas está configurada y lista para compilar, servir y probar su aplicación objetivo. Con Nx tenemos todo instalado, configurado y listo para ejecutarse con comandos como los siguientes que yo coloco en el <code>packcage.json</code>:</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"e2e:shop\": \"ng e2e shop-e2e --watch\",</span><br><span class=\"line\">\"e2e:warehouse\": \"ng e2e warehouse-e2e --watch\",</span><br></pre></td></tr></table></figure><p>Luego se pueden lanzar desde la terminal muy cómodamente.</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn e2e:shop</span><br><span class=\"line\">yarn e2e:warehouse</span><br></pre></td></tr></table></figure><h2 id=\"1-2-Test-e2e\"><a href=\"#1-2-Test-e2e\" class=\"headerlink\" title=\"1.2 Test e2e\"></a>1.2 Test e2e</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">the</span> <span class=\"string\">shop</span> <span class=\"string\">web</span> <span class=\"string\">app</span></span><br><span class=\"line\"><span class=\"attr\">  WHEN:</span> <span class=\"string\">user</span> <span class=\"string\">visits</span> <span class=\"string\">home</span> <span class=\"string\">page</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">display</span> <span class=\"string\">welcome</span> <span class=\"string\">message</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">display</span> <span class=\"string\">welcome</span> <span class=\"string\">message</span> <span class=\"string\">from</span> <span class=\"string\">the</span> <span class=\"string\">API</span></span><br></pre></td></tr></table></figure><p>Tu trabajo como <em>tester</em> será definir las pruebas en la carpeta <code>/integration</code>. Por ejemplo para empezar nos ofrecen el fichero <code>app-spec.ts</code> en el que yo he especificado el comportamiento deseado por mi página. La sintaxis se entiende por si misma. He seguido el convenio <strong>GIVEN, WHEN, THEN</strong> para especificar pruebas que podrían considerarse casi de comportamiento o aceptación.</p><p><code>apps\\shop-e2e\\src\\integration\\app.spec.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getGreeting &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../support/app.po'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'GIVEN: the shop web app'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cy.visit(<span class=\"string\">'/'</span>));</span><br><span class=\"line\">  context(<span class=\"string\">'WHEN: user visits home page'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    it(<span class=\"string\">'THEN: should display welcome message'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      getGreeting().contains(<span class=\"string\">'Hello world'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// needs the api server to run</span></span><br><span class=\"line\">    <span class=\"comment\">// yarn start:api</span></span><br><span class=\"line\">    it(<span class=\"string\">'THEN: should display welcome message from the API'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      getGreeting().contains(<span class=\"string\">'and Welcome to api!'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>La parte más técnica y tediosa es la que accede al <em>DOM</em> y lo mejor es tener eso a parte. En la carpeta <code>/support</code> nos sugieren que creemos utilidades para tratar con el <em>DOM</em> y de esa forma mantener los test lo más cercanos posible a un lenguaje natural de negocio. Como se ve en mi caso una aproximación libre al <a href=\"https://www.genbeta.com/desarrollo/bdd-cucumber-y-gherkin-desarrollo-dirigido-por-comportamiento\" target=\"_blank\" rel=\"noopener\">BDD con gherkin</a> para mantener el espíritu de sencillez de un tutorial sobre tecnología Angular, no sobre testing.</p><p><code>apps\\shop-e2e\\src\\support\\app.po.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getGreeting = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cy.get(<span class=\"string\">'h1'</span>);</span><br></pre></td></tr></table></figure><hr><h1 id=\"2-Test-Unitarios-con-Jest\"><a href=\"#2-Test-Unitarios-con-Jest\" class=\"headerlink\" title=\"2. Test Unitarios con Jest\"></a>2. Test Unitarios con Jest</h1><p>Las pruebas unitarias, muy asociadas al <a href=\"https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92\" target=\"_blank\" rel=\"noopener\">TDD</a>, son las mejores amigas del desarrollador. Pero, también son las más engorrosas para empezar. Así que aquí veremos una introducción sencilla para que nadie deje de hacerlas.</p><h2 id=\"2-1-Jest\"><a href=\"#2-1-Jest\" class=\"headerlink\" title=\"2.1 Jest\"></a>2.1 Jest</h2><p><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">Jest</a> es un framework de testing para JavaScript muy sencillo y rápido. Puedes usarlo con cualquier otro framework. Para el caso de Angular ya viene preconfigurado si usas las extensiones Nx.</p><p>Mete los siguientes scripts en el <code>package.json</code> y así tendrás a mano siempre las pruebas. Te recomiendo que desarrolles con el test unitario lanzado; es la manera más rápida de probar el código que estés tocando. Idealmente incluso con el <a href=\"https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80\" target=\"_blank\" rel=\"noopener\">test antes del código</a>.</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"test:shop\": \"ng test shop --watch --verbose\",</span><br><span class=\"line\">\"test:warehouse\": \"ng test warehouse --watch --verbose\",</span><br><span class=\"line\">\"test:api\": \"ng test api --watch --verbose\",</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn test:shop</span><br><span class=\"line\">yarn test:warehouse</span><br><span class=\"line\">yarn test:api</span><br></pre></td></tr></table></figure><h2 id=\"2-2-Tests-unitarios\"><a href=\"#2-2-Tests-unitarios\" class=\"headerlink\" title=\"2.2 Tests unitarios\"></a>2.2 Tests unitarios</h2><h3 id=\"2-2-1-Componentes\"><a href=\"#2-2-1-Componentes\" class=\"headerlink\" title=\"2.2.1 Componentes\"></a>2.2.1 Componentes</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">an</span> <span class=\"string\">AppComponent</span> <span class=\"string\">declared</span> <span class=\"string\">in</span> <span class=\"string\">AppModule</span></span><br><span class=\"line\"><span class=\"attr\">  WHEN:</span> <span class=\"string\">the</span> <span class=\"string\">AppModule</span> <span class=\"string\">is</span> <span class=\"string\">compiled</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">create</span> <span class=\"string\">the</span> <span class=\"string\">component</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">have</span> <span class=\"string\">a</span> <span class=\"string\">property</span> <span class=\"string\">title</span> <span class=\"string\">with</span> <span class=\"string\">value</span> <span class=\"string\">'shop'</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">render</span> <span class=\"string\">'Hello world'</span> <span class=\"string\">in</span> <span class=\"string\">a</span> <span class=\"string\">H1</span> <span class=\"string\">tag</span></span><br></pre></td></tr></table></figure><p>En este caso queremos probar una librería de componentes. Claro que se podrán hacer pruebas unitarias y de integración parcial. Pero también puedes incluirlas como parte de la prueba de integración total de la aplicación que la consume. De esta forma te aseguras de que el módulo de la librería se importa y que sus componentes se exportan correctamente. Por ejemplo lo uso desde la aplicación <em>shop</em>, y puedo comprobar que su componente <code>AppComponent</code> funciona y que se renderiza también el componente <code>ab-ui-greetings</code> incrustando con los saludos.</p><p><code>apps\\shop\\src\\app\\app.component.spec.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; UiModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@a-boss/ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">async</span>, TestBed &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core/testing'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouterTestingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router/testing'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'GIVEN: an AppComponent declared in AppModule'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'WHEN: the AppModule is compiled'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    beforeEach(<span class=\"keyword\">async</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      TestBed.configureTestingModule(&#123;</span><br><span class=\"line\">        imports: [RouterTestingModule, UiModule],</span><br><span class=\"line\">        declarations: [AppComponent]</span><br><span class=\"line\">      &#125;).compileComponents();</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'THEN: should create the component'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = TestBed.createComponent(AppComponent);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> app = fixture.debugElement.componentInstance;</span><br><span class=\"line\">      expect(app).toBeTruthy();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">`THEN: should have a property title with value 'shop'`</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = TestBed.createComponent(AppComponent);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> app = fixture.debugElement.componentInstance;</span><br><span class=\"line\">      expect(app.title).toEqual(<span class=\"string\">'shop'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">`THEN: should render 'Hello world' in a H1 tag`</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> fixture = TestBed.createComponent(AppComponent);</span><br><span class=\"line\">      fixture.detectChanges();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> compiled = fixture.debugElement.nativeElement;</span><br><span class=\"line\">      expect(compiled.querySelector(<span class=\"string\">'h1'</span>).textContent).toContain(<span class=\"string\">'Hello world'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h3 id=\"2-2-2-Services\"><a href=\"#2-2-2-Services\" class=\"headerlink\" title=\"2.2.2 Services\"></a>2.2.2 Services</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">GIVEN:</span> <span class=\"string\">a</span> <span class=\"string\">GreetingsService</span></span><br><span class=\"line\"><span class=\"attr\">  WHEN:</span> <span class=\"string\">the</span> <span class=\"string\">DataModule</span> <span class=\"string\">is</span> <span class=\"string\">compiled</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">be</span> <span class=\"string\">created</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">return</span> <span class=\"string\">an</span> <span class=\"string\">observable</span> <span class=\"string\">when</span> <span class=\"string\">call</span> <span class=\"string\">'getGrettings()'</span></span><br><span class=\"line\"><span class=\"attr\">    THEN:</span> <span class=\"string\">should</span> <span class=\"string\">return</span> <span class=\"string\">'Welcome to api!'</span> <span class=\"string\">when</span> <span class=\"string\">call</span> <span class=\"string\">'getGrettings()'</span></span><br></pre></td></tr></table></figure><p>La prueba de servicios es más sencilla que la de componentes, pues no hay que tratar con la renderización del HTML. sólo funcionalidad en una clase TypeScript. pero, siempre hay un pero, muchos de estos servicios tratarán con llamadas asíncronas. Afortunadamente está todo pensado y se resuelve con dos conceptos: la función <code>async()</code> y inyección de réplicas (<em>mocks</em>) de las dependencias.</p><p><code>libs\\shared\\data\\src\\lib\\greetings\\greetings.service.spec.ts</code></p><hr><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// importar réplicas para testing de las dependencias del servicio</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  HttpClientTestingModule,</span><br><span class=\"line\">  HttpTestingController</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http/testing'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">async</span>, TestBed &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core/testing'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; GreetingsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./greetings.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'GIVEN: a GreetingsService'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'WHEN: the DataModule is compiled'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      TestBed.configureTestingModule(&#123;</span><br><span class=\"line\">        imports: [HttpClientTestingModule]</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'THEN: should be created'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> service: GreetingsService = TestBed.get(GreetingsService);</span><br><span class=\"line\">      expect(service).toBeTruthy();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">`THEN: should return an observable when call 'getGrettings()'`</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> service: GreetingsService = TestBed.get(GreetingsService);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> greetings$: Observable&lt;<span class=\"built_in\">any</span>&gt; = service.getGrettings$();</span><br><span class=\"line\">      expect(greetings$).toBeInstanceOf(Observable);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ojo al async para ejectuar las llamadas asíncronas</span></span><br><span class=\"line\">    it(<span class=\"string\">`THEN: should return 'Welcome to api!' when call 'getGrettings()'`</span>, <span class=\"keyword\">async</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> service: GreetingsService = TestBed.get(GreetingsService);</span><br><span class=\"line\">      service</span><br><span class=\"line\">        .getGrettings$()</span><br><span class=\"line\">        .subscribe(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span></span><br><span class=\"line\">          expect(result).toEqual(&#123; message: <span class=\"string\">'Welcome to api!'</span> &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">      <span class=\"comment\">// mock del backend para no depender del servidor</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> httpMock = TestBed.get(HttpTestingController);</span><br><span class=\"line\">      <span class=\"comment\">// esperar a que se llame a esta ruta</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> req = httpMock.expectOne(<span class=\"string\">'http://localhost:3333/api'</span>);</span><br><span class=\"line\">      req.flush(&#123; message: <span class=\"string\">'Welcome to api!'</span> &#125;); <span class=\"comment\">// responder con esto</span></span><br><span class=\"line\">      httpMock.verify(); <span class=\"comment\">// comprobar que no hay más llmadas</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>A partir de aquí es siempre igual. Defines un respuesta esperada, le das una entrada conocida y si algo no cuadra, entonces el código no pasa la prueba y tienes una oportunidad para mejorarlo.</p><hr><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>En definitiva, los grandes desarrollos demandados por bancos, multinacionales o administración pública requieren soluciones fiables y mantenibles. Y eso pasa inexcusablemente por hacer testing. <strong>Angular</strong> facilita las pruebas unitarias y de integración; especialmente con las herramientas <em>Jest</em> y <em>Cypress</em> ya configuradas por <strong>Nx</strong>.</p><p>Con este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> te preparas para poder afrontar retos de tamaño industrial. Continúa aprendiendo a mejorar el rendimiento usando la <a href=\"../deteccion-del-cambio-en-Angular\">detección del cambio en Angular</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Detección del cambio en Angular","date":"2019-08-01T16:09:27.000Z","thumbnail":"/css/images/angular-12_change.png","_content":"\n![deteccion-del-cambio-en-Angular](/images/tutorial-angular-12_change.png)\n\nLa forma en que Angular realiza su renderizado y actualiza sus vistas es un factor clave para el rendimiento de las aplicaciones. ¿Cómo funciona la estrategia de detección de cambios de Angular? Pues tiene dos modos: `default` o *automágico* y `onPush` o *mindfulness*.\n\n> Es importante tomar consciencia sobre el proceso y las implicaciones. Es costoso realizar la detección más veces de lo necesario y porque no hacerlo suficientemente implica no ver resultados reales.\n\nAfortunadamente el cambio del modo automático al manual no tiene por qué ser traumático. Con un mayor conocimiento del `changeDetectionStrategy` y un poco de trabajo extra tendrás aplicaciones más eficientes y mantenibles.\n\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Tests unitarios con Jest y e2e con Cypress en Angular](../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular/). Al finalizar tendrás una aplicación que actualiza la vista sólo cuando es necesario, es decir: cuando los datos han cambiado.\n\n> Código asociado a este tutorial en _GitHub_: [angular.builders/angular-blueprint/](https://github.com/angularbuilders/angular-blueprint)\n\n\n## Tabla de Contenido:\n\n[1. Comunicación de datos entre componentes.](./#1-Comunicacion-de-datos-entre-componentes)\n\n[2. Change detection strategies](./#2-Change-detection-strategies)\n\n[3. Inmutabilidad](./#3-Inmutabilidad)\n\n[Ejemplo](./#Ejemplo)\n\n[4. Un par de componentes con detección de cambio controlada.](./#4-Un-par-de-componentes-con-deteccion-de-cambio-controlada)\n\n[5. Todo reactivo.](./#5-Todo-reactivo)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1 Comunicación de datos entre componentes\n\n> Como desarrollador quiero disponer de un componente para informar sobre RGPD a los usuarios de mis aplicaciones\n\nLa detección de cambios se dispara ante eventos que le ocurren a los componentes. **La detección se realiza componente a componente**, así que compensa tener muchos componentes pequeños, para que cada uno por si sólo no genere demasiado ruido.\n\n## 1.1 Componentes Contenedores y Presentadores\n\nAl pasar de un único componente a varios mini-componentes, se propone usar **el patrón contenedor / presentadores**. Se mantiene un componente padre que contiene múltiples componentes presentadores hijos. El contendor es el único con acceso a los servicios de negocio y datos. Los presentadores reciben los datos y emiten eventos. Los presentadores no obtienen ni modifican datos por su cuenta.\n\nNomenclatura\n- **Container**: aka *Parent, Smart*. Irán en una subcarpeta `containers`\n- **Presenter**: aka *Child, Dumb*. Irán en una subcarpeta... `components`\n\n> Este reparto de responsabilidades es aconsejable independientemente de la estrategia de detección aplicada. Tienes más información el artículo de introducción [flujo de datos entre componentes](../lujo-de-datos-entre-componentes-angular).\n\n# 2 Change detection strategies\n\nCon la aplicación bien estructurada en componentes y con la comunicación estandarizada, habremos reducido el impacto de la detección del cambio y estaremos preparados para optimizarlo. Conozcamos en detalle las estrategias de detección del cambio.\n\nEl decorador `@Component()` admite en su configuración la poco conocida propiedad `changeDetection`. Dicha propiedad puede asignarse manualmente al componente, o indicarle su uso al generador del cli.\n\n## 2.1 Detección automática, *default*\n\nPor defecto, Angular tiene que ser conservador y verificar cada posible cambio, esto se denomina comprobación sucia o *dirty checking*. Se dispara **con demasiada frecuencia**, al menos en los siguientes casos:\n\n- Eventos desde el browser\n- Timers, intervals etc..\n- Llamadas http\n- Promesas y código asíncrono.\n\nPor si fuera poco, además de dispararse mucho es **muy costoso**. Determinar que algo ha cambiado implica comparar dos estados: el actual y el anterior.\n\n> La comparación es valor a valor, en profundidad, para cada propiedad de cada objeto, para cada objeto de cada array.\n\nCon todo, esta estrategia es cómoda para el programador y suficiente para casos básicos. Pero demasiada magia dificulta el control en aplicaciones complejas. Y en pantallas de mucha información e interacción degrada el rendimiento percibido.\n\n## 2.2 Detección manual, *onPush*\n\nComo se puede prever, la detección del cambio manual es lanzada por el programador. No siempre va a ser laborioso, pero será más consciente pues para que ocurra han de darse alguna de estas circunstancias:\n\n- **Explícitamente** el programador solicita la detección llamando a `ChangeDetectorRef.detectChanges();\n- **Implícitamente** al usar el `pipe Async` en la vista se llama a ese mismo método.\n- **Conscientemente** el desarrollador obliga a un componente a repintarse si le cambia la referencia a un `@Input()`.\n\n> En este modo los componentes dejan de evaluar y comparar sus propiedades rutinariamente. Sólo atienden a eventos `@Output()` o **cambios de referencia** `@Input()`. Esto relaja mucho al motor de Angular, que ya no tiene que hacer comparaciones odiosas. Sabrá que algo ha cambiado porque... es otro objeto.\n\n# 3 Inmutabilidad\n\nComo ya se ha dicho, para que Angular en la estrategia automática decida que algo ha cambiado necesita hacer una comparación por valor. Para evitar ese coste usamos la estrategia manual y el programador tiene que cambiar la referencia de algo cuando quiera que Angular repinte la vista.\n\n## 3.1 Por referencia y por valor\n\nNormalmente tendrá que crear un nuevo objeto y reasignarlo en lugar del anterior en un **ciclo de clonación, mutación y asignación**. Por costoso que parezca siempre compensa si evita muchas e innecesarias comparaciones por valor en estructuras profundas.\n\nLa estrategia `onPush` trata a todos los `Inputs` en inmutables, es decir, algo que no espera que cambie. Similar al paso de parámetros por valor, que si cambia es porque es otro puntero.\n\n## 3.2 El clonado\nEl potencialmente pesado trabajo de clonado lo podemos evitar en muchos casos usando alguna de estas técnicas:\n\n- **Tipos primitivos** que se pasan por valor en las propiedades `@Input()`\n- **Arrays**: muchos métodos como `.filter() .slice() .sort() .concat()` etc., devuelven nuevas referencias sin modificar el array original.\n- **Observables y el pipe Async**, pues en este caso se subscribe y lanza implícitamente la detección del cambio. Sin necesidad de clonar.\n\nPara los demás casos tenemos operadores *TypeScript* sencillos y optimizados para obtener nuevas referencias a partir de otros ya existentes.\n\n```typescript\nconst original = { name:'first', value:1 };\nconst cloned = { ...original };\n// > { name:'first', value:1 }\nconst mutated = { ...original, value:2, newProperty: 'added' };\n// > { name:'first', value:2, newProperty: 'added' }\nconst list = [ original, cloned, mutated ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\nconst clonedList = [ ...list ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\nconst mutatedList = [ ...list, { name: 'new item'} ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' }, { name: 'new item'} ]\nconst newList = list.filter(i => i.name=='first');\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\n```\n\nYa tienes los conocimientos para acelerar y reducir la incertidumbre sobre el actualización de vistas usando el patrón **contenedor / presentador** junto con la estrategia de detección de cambios `OnPush`. Ahora vamos a ver un ejemplo.\n\n## Ejemplo\n\n### Funcionalidad esperada:\n\nCuando un usuario visita la aplicación por primera vez debe avisarse del uso de cookies para cumplir con las políticas legales.\n\nEl aviso será mediante un dialogo flotante sobre la página.\n\nEl usuario puede ver más detalles o quedarse con la información reducida.\n\n# 4. Un par de componentes con detección de cambio controlada.\n\nYa que este será un componente genérico y válido para muchas aplicaciones vamos a crearlo en una librería reutilizable a la que llamaré `policy`. En ella generamos los dos componentes. ¿Dos componentes?. Hemos dedicado un tema al [flujo de datos entre componentes](../lujo-de-datos-entre-componentes-angular) en el tutorial de introducción a Angular. Allí se recomendaba que la lógica de presentación y la de negocio estuviesen separadas.\n\nEmergía el patrón _container-presenter_ que separa la responsabilidad de tratar con los servicios de datos de la responsabilidad de presentarlos en pantalla. Al componente que manipula datos se le llama contenedor, y al que los presenta... presentador. Puedes usar cualquier esquema de organización o nombrado. Yo los agrupo en dos carpetas: `containers` y simples `components`.\n\n```bash\n# Generate the policy library project\nng g library policy --tags=angular\n# Generate the dialog components\n# container\nng g c containers/mandatory-dialog --project=policy --export --inlineStyle --inlineTemplate --changeDetection=OnPush\n# presenter\nng g c components/dialog --project=policy --changeDetection=OnPush\n```\n\nEso sí todos llevan una modificador especial: el `changeDetection=OnPush`. Esta es la primera recomendación para cumplir con el flujo unidireccional. En esencia lo que hacemos es decirle a Angular que no use la detección de cambios por defecto. Tenemos un artículo con una explicación completa de la [Detección del cambio en Angular](../deteccion-del-cambio-en-Angular).\n\n\nEl componente contenedor suele tener poco _html_ y ningún _css_, así que es un candidato a entrar en un único fichero: `containers/mandatory-dialog.component.ts`. Nada interesante por el momento en este componente obligatorio en toda web pública.\n\n```typescript\n@Component({\n  selector: 'ab-policy-mandatory-dialog',\n  template: `\n    <ab-policy-dialog>\n    </ab-policy-dialog>\n  `,\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MandatoryDialogComponent implements OnInit {\n  constructor() {}\n  public ngOnInit(): void {}\n}\n```\n\nTampoco el presentador requiere de mucha atención, así que muestro su simple vista: `components/dialog.component.html`\n\n```html\n<dialog open>\n  <header>\n    <p>This site uses cookies to personalize content, to provide social media features and to analyze traffic.</p>\n  </header>\n</dialog>\n```\n\n# 5. Todo reactivo.\n\n> Como desarrollador quiero que las comunicaciones sean fluidas e independientes del tiempo para que los cambios en los datos cambien la presentación sin esfuerzo\n\nOtro de los pilares de la programación moderna de grandes aplicaciones es la **reactividad** (nada que ver con Chernóbil). Se trata de que los cambios se comuniquen cuando ocurran, sin necesidad de preguntar por ellos. De esta forma **los componentes reaccionarán al cambio** en lugar de buscarlo proactivamente mejorando mucho el rendimiento de las aplicaciones.\n\nReducida a lo esencial, la lógica más básica que quiero implementar es un marcador que me indique si el usuario ha aceptado o no la política de cookies. Un mísero booleano. Pero claro, hacerlo reactivo requiere usar observables, y para eso emplearemos la librería [RxJs](https://www.learnrxjs.io/concepts/rxjs-primer.html).\n\nHablando de cosas esenciales. Las arquitecturas de software centradas en el dominio proponen que toda la lógica básica de una gran aplicación debería ser independiente de _pequeños detalles sin importancia como los frameworks_. Aprovechando las capacidades de [Nx para tratar con mono repos](../nx-mono-repositorios-en-Angular/) no cuesta nada crear un librería en dónde establecer en los modelos de datos y las entidades con sus reglas de negocio. A esta librería de dominio la llamaré `policy-domain`.\n\n```bash\n# Generate a policy-domain Type Script library with nx power-ups\nng g @nrwl/workspace:library policy-domain --directory=\n```\n\nY en ella declaramos una clase que representa la entidad principal de este proyecto: la aceptación de las políticas. Esa entidad es una clase informa a quien se suscriba de su estado de aceptación, inicialmente falso.\n\n`libs\\policy-domain\\src\\lib\\services\\policy-acceptation.entity.ts`\n\n```typescript\nexport class PolicyAcceptationEntity {\n  constructor() { }\n\n  public isPolicyAccepted$(): Observable<boolean> {\n    return of(false));\n  }\n}\n```\n\nEn una capa superior, ya en un entorno Angular, haremos uso de la entidad de dominio anterior. Será un servicio que a su vez va a exponer un observable, pero con su propia lógica adaptada, de cara la vista.\n\n```bash\n# Generate a policy service\nng g s services/policy --project=policy\n```\n\n`libs\\policy\\src\\lib\\services\\policy.service.ts`\n\n```typescript\n@Injectable({\n  providedIn: 'root'\n})\nexport class PolicyService {\n  private policyAcceptationEntity = new PolicyAcceptationEntity();\n\n  constructor( ) { }\n\n  public haveToShowAccpetationDialog$(): Observable<boolean> {\n    return this.policyAcceptationEntity\n      .isPolicyAccepted$()\n      .pipe(map(x => !x));\n  }\n}\n```\n\nIncorporamos el servicio en el componente principal para que nos indique si debemos mostrar el aviso al usuario o no.\n\n`app.component.ts`\n\n```typescript\nexport class AppComponent {\n  public showPolicyDialog$: Observable<boolean>;\n\n  constructor(private policyService: PolicyService) {\n    this.showPolicyDialog$ = this.policyService.haveToShowAcceptationDialog$();\n  }\n}\n```\nTodo reactivo y todo asíncrono.\n\n`app.component.html`\n\n```html\n<ab-policy-mandatory-dialog *ngIf=\"showPolicyDialog$ | async \"></ab-policy-mandatory-dialog>\n```\n\nAl utilizar observables, podemos usar el _pipe_ `async`, que ya sabemos que informa de los cambios al detector. Por tanto la detección `OnPush` es perfectamente válida.\n\n---\n\n## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro las librerías y aplicaciones implicadas hasta el momento.\n\n![Dependencias entre proyectos](/images/12-projects-dependency.png)\n\nEn este otro tenemos las clases implicadas. El color denota la librería en la que se definen.\n\n![Dependencias entre componentes y clases](/images/12-class-dependency.png)\n\n---\n\nPara más información, o indicaciones paso a paso, consulta directamente la [documentación](https://angularbuilders.github.io/angular-blueprint/2-change) del proyecto en GitHub.\n\nLas tareas relativas a este tutorial resueltas en el [proyecto 2 - change-detection](https://github.com/angularbuilders/angular-blueprint/projects/2)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n\n---\n\n## Resumen\n\nLa detección automática es cómoda pero costosa. Por dos razones: se dispara muchas veces y necesita comprobar si hay cambios comparando valor por valor. La detección manual es más eficiente. Se lanza menos veces y además le basta un cambio de referencia para saber que hay novedades. Para poder usarla sin grandes trabajos recomiendo usar el _pipe_ `async`, siempre con orígenes de datos observables.\n\nPara ello necesitamos usar y conocer patrones que hagan uso de la librería observable _RxJs_. En este tutorial de formación [avanzada en Angular](../tag/Avanzado/) te muestra como mejorar el rendimiento usando el [Flujo reactivo unidireccional con Angular y RxJs](../flujo-reactivo-unidireccional-con-Angular-y-RxJs).\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-12-Deteccion-del-cambio-en-Angular.md","raw":"---\ntitle: Detección del cambio en Angular\npermalink: deteccion-del-cambio-en-Angular\ndate: 2019-08-01 18:09:27\ntags:\n- Angular\n- Angular8\n- ChangeDetection\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-12_change.png\n---\n\n![deteccion-del-cambio-en-Angular](/images/tutorial-angular-12_change.png)\n\nLa forma en que Angular realiza su renderizado y actualiza sus vistas es un factor clave para el rendimiento de las aplicaciones. ¿Cómo funciona la estrategia de detección de cambios de Angular? Pues tiene dos modos: `default` o *automágico* y `onPush` o *mindfulness*.\n\n> Es importante tomar consciencia sobre el proceso y las implicaciones. Es costoso realizar la detección más veces de lo necesario y porque no hacerlo suficientemente implica no ver resultados reales.\n\nAfortunadamente el cambio del modo automático al manual no tiene por qué ser traumático. Con un mayor conocimiento del `changeDetectionStrategy` y un poco de trabajo extra tendrás aplicaciones más eficientes y mantenibles.\n\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Tests unitarios con Jest y e2e con Cypress en Angular](../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular/). Al finalizar tendrás una aplicación que actualiza la vista sólo cuando es necesario, es decir: cuando los datos han cambiado.\n\n> Código asociado a este tutorial en _GitHub_: [angular.builders/angular-blueprint/](https://github.com/angularbuilders/angular-blueprint)\n\n\n## Tabla de Contenido:\n\n[1. Comunicación de datos entre componentes.](./#1-Comunicacion-de-datos-entre-componentes)\n\n[2. Change detection strategies](./#2-Change-detection-strategies)\n\n[3. Inmutabilidad](./#3-Inmutabilidad)\n\n[Ejemplo](./#Ejemplo)\n\n[4. Un par de componentes con detección de cambio controlada.](./#4-Un-par-de-componentes-con-deteccion-de-cambio-controlada)\n\n[5. Todo reactivo.](./#5-Todo-reactivo)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n---\n\n# 1 Comunicación de datos entre componentes\n\n> Como desarrollador quiero disponer de un componente para informar sobre RGPD a los usuarios de mis aplicaciones\n\nLa detección de cambios se dispara ante eventos que le ocurren a los componentes. **La detección se realiza componente a componente**, así que compensa tener muchos componentes pequeños, para que cada uno por si sólo no genere demasiado ruido.\n\n## 1.1 Componentes Contenedores y Presentadores\n\nAl pasar de un único componente a varios mini-componentes, se propone usar **el patrón contenedor / presentadores**. Se mantiene un componente padre que contiene múltiples componentes presentadores hijos. El contendor es el único con acceso a los servicios de negocio y datos. Los presentadores reciben los datos y emiten eventos. Los presentadores no obtienen ni modifican datos por su cuenta.\n\nNomenclatura\n- **Container**: aka *Parent, Smart*. Irán en una subcarpeta `containers`\n- **Presenter**: aka *Child, Dumb*. Irán en una subcarpeta... `components`\n\n> Este reparto de responsabilidades es aconsejable independientemente de la estrategia de detección aplicada. Tienes más información el artículo de introducción [flujo de datos entre componentes](../lujo-de-datos-entre-componentes-angular).\n\n# 2 Change detection strategies\n\nCon la aplicación bien estructurada en componentes y con la comunicación estandarizada, habremos reducido el impacto de la detección del cambio y estaremos preparados para optimizarlo. Conozcamos en detalle las estrategias de detección del cambio.\n\nEl decorador `@Component()` admite en su configuración la poco conocida propiedad `changeDetection`. Dicha propiedad puede asignarse manualmente al componente, o indicarle su uso al generador del cli.\n\n## 2.1 Detección automática, *default*\n\nPor defecto, Angular tiene que ser conservador y verificar cada posible cambio, esto se denomina comprobación sucia o *dirty checking*. Se dispara **con demasiada frecuencia**, al menos en los siguientes casos:\n\n- Eventos desde el browser\n- Timers, intervals etc..\n- Llamadas http\n- Promesas y código asíncrono.\n\nPor si fuera poco, además de dispararse mucho es **muy costoso**. Determinar que algo ha cambiado implica comparar dos estados: el actual y el anterior.\n\n> La comparación es valor a valor, en profundidad, para cada propiedad de cada objeto, para cada objeto de cada array.\n\nCon todo, esta estrategia es cómoda para el programador y suficiente para casos básicos. Pero demasiada magia dificulta el control en aplicaciones complejas. Y en pantallas de mucha información e interacción degrada el rendimiento percibido.\n\n## 2.2 Detección manual, *onPush*\n\nComo se puede prever, la detección del cambio manual es lanzada por el programador. No siempre va a ser laborioso, pero será más consciente pues para que ocurra han de darse alguna de estas circunstancias:\n\n- **Explícitamente** el programador solicita la detección llamando a `ChangeDetectorRef.detectChanges();\n- **Implícitamente** al usar el `pipe Async` en la vista se llama a ese mismo método.\n- **Conscientemente** el desarrollador obliga a un componente a repintarse si le cambia la referencia a un `@Input()`.\n\n> En este modo los componentes dejan de evaluar y comparar sus propiedades rutinariamente. Sólo atienden a eventos `@Output()` o **cambios de referencia** `@Input()`. Esto relaja mucho al motor de Angular, que ya no tiene que hacer comparaciones odiosas. Sabrá que algo ha cambiado porque... es otro objeto.\n\n# 3 Inmutabilidad\n\nComo ya se ha dicho, para que Angular en la estrategia automática decida que algo ha cambiado necesita hacer una comparación por valor. Para evitar ese coste usamos la estrategia manual y el programador tiene que cambiar la referencia de algo cuando quiera que Angular repinte la vista.\n\n## 3.1 Por referencia y por valor\n\nNormalmente tendrá que crear un nuevo objeto y reasignarlo en lugar del anterior en un **ciclo de clonación, mutación y asignación**. Por costoso que parezca siempre compensa si evita muchas e innecesarias comparaciones por valor en estructuras profundas.\n\nLa estrategia `onPush` trata a todos los `Inputs` en inmutables, es decir, algo que no espera que cambie. Similar al paso de parámetros por valor, que si cambia es porque es otro puntero.\n\n## 3.2 El clonado\nEl potencialmente pesado trabajo de clonado lo podemos evitar en muchos casos usando alguna de estas técnicas:\n\n- **Tipos primitivos** que se pasan por valor en las propiedades `@Input()`\n- **Arrays**: muchos métodos como `.filter() .slice() .sort() .concat()` etc., devuelven nuevas referencias sin modificar el array original.\n- **Observables y el pipe Async**, pues en este caso se subscribe y lanza implícitamente la detección del cambio. Sin necesidad de clonar.\n\nPara los demás casos tenemos operadores *TypeScript* sencillos y optimizados para obtener nuevas referencias a partir de otros ya existentes.\n\n```typescript\nconst original = { name:'first', value:1 };\nconst cloned = { ...original };\n// > { name:'first', value:1 }\nconst mutated = { ...original, value:2, newProperty: 'added' };\n// > { name:'first', value:2, newProperty: 'added' }\nconst list = [ original, cloned, mutated ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\nconst clonedList = [ ...list ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\nconst mutatedList = [ ...list, { name: 'new item'} ];\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' }, { name: 'new item'} ]\nconst newList = list.filter(i => i.name=='first');\n// > [ { name:'first', value:1 }, { name:'first', value:1 }, { name:'first', value:2, newProperty: 'added' } ]\n```\n\nYa tienes los conocimientos para acelerar y reducir la incertidumbre sobre el actualización de vistas usando el patrón **contenedor / presentador** junto con la estrategia de detección de cambios `OnPush`. Ahora vamos a ver un ejemplo.\n\n## Ejemplo\n\n### Funcionalidad esperada:\n\nCuando un usuario visita la aplicación por primera vez debe avisarse del uso de cookies para cumplir con las políticas legales.\n\nEl aviso será mediante un dialogo flotante sobre la página.\n\nEl usuario puede ver más detalles o quedarse con la información reducida.\n\n# 4. Un par de componentes con detección de cambio controlada.\n\nYa que este será un componente genérico y válido para muchas aplicaciones vamos a crearlo en una librería reutilizable a la que llamaré `policy`. En ella generamos los dos componentes. ¿Dos componentes?. Hemos dedicado un tema al [flujo de datos entre componentes](../lujo-de-datos-entre-componentes-angular) en el tutorial de introducción a Angular. Allí se recomendaba que la lógica de presentación y la de negocio estuviesen separadas.\n\nEmergía el patrón _container-presenter_ que separa la responsabilidad de tratar con los servicios de datos de la responsabilidad de presentarlos en pantalla. Al componente que manipula datos se le llama contenedor, y al que los presenta... presentador. Puedes usar cualquier esquema de organización o nombrado. Yo los agrupo en dos carpetas: `containers` y simples `components`.\n\n```bash\n# Generate the policy library project\nng g library policy --tags=angular\n# Generate the dialog components\n# container\nng g c containers/mandatory-dialog --project=policy --export --inlineStyle --inlineTemplate --changeDetection=OnPush\n# presenter\nng g c components/dialog --project=policy --changeDetection=OnPush\n```\n\nEso sí todos llevan una modificador especial: el `changeDetection=OnPush`. Esta es la primera recomendación para cumplir con el flujo unidireccional. En esencia lo que hacemos es decirle a Angular que no use la detección de cambios por defecto. Tenemos un artículo con una explicación completa de la [Detección del cambio en Angular](../deteccion-del-cambio-en-Angular).\n\n\nEl componente contenedor suele tener poco _html_ y ningún _css_, así que es un candidato a entrar en un único fichero: `containers/mandatory-dialog.component.ts`. Nada interesante por el momento en este componente obligatorio en toda web pública.\n\n```typescript\n@Component({\n  selector: 'ab-policy-mandatory-dialog',\n  template: `\n    <ab-policy-dialog>\n    </ab-policy-dialog>\n  `,\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MandatoryDialogComponent implements OnInit {\n  constructor() {}\n  public ngOnInit(): void {}\n}\n```\n\nTampoco el presentador requiere de mucha atención, así que muestro su simple vista: `components/dialog.component.html`\n\n```html\n<dialog open>\n  <header>\n    <p>This site uses cookies to personalize content, to provide social media features and to analyze traffic.</p>\n  </header>\n</dialog>\n```\n\n# 5. Todo reactivo.\n\n> Como desarrollador quiero que las comunicaciones sean fluidas e independientes del tiempo para que los cambios en los datos cambien la presentación sin esfuerzo\n\nOtro de los pilares de la programación moderna de grandes aplicaciones es la **reactividad** (nada que ver con Chernóbil). Se trata de que los cambios se comuniquen cuando ocurran, sin necesidad de preguntar por ellos. De esta forma **los componentes reaccionarán al cambio** en lugar de buscarlo proactivamente mejorando mucho el rendimiento de las aplicaciones.\n\nReducida a lo esencial, la lógica más básica que quiero implementar es un marcador que me indique si el usuario ha aceptado o no la política de cookies. Un mísero booleano. Pero claro, hacerlo reactivo requiere usar observables, y para eso emplearemos la librería [RxJs](https://www.learnrxjs.io/concepts/rxjs-primer.html).\n\nHablando de cosas esenciales. Las arquitecturas de software centradas en el dominio proponen que toda la lógica básica de una gran aplicación debería ser independiente de _pequeños detalles sin importancia como los frameworks_. Aprovechando las capacidades de [Nx para tratar con mono repos](../nx-mono-repositorios-en-Angular/) no cuesta nada crear un librería en dónde establecer en los modelos de datos y las entidades con sus reglas de negocio. A esta librería de dominio la llamaré `policy-domain`.\n\n```bash\n# Generate a policy-domain Type Script library with nx power-ups\nng g @nrwl/workspace:library policy-domain --directory=\n```\n\nY en ella declaramos una clase que representa la entidad principal de este proyecto: la aceptación de las políticas. Esa entidad es una clase informa a quien se suscriba de su estado de aceptación, inicialmente falso.\n\n`libs\\policy-domain\\src\\lib\\services\\policy-acceptation.entity.ts`\n\n```typescript\nexport class PolicyAcceptationEntity {\n  constructor() { }\n\n  public isPolicyAccepted$(): Observable<boolean> {\n    return of(false));\n  }\n}\n```\n\nEn una capa superior, ya en un entorno Angular, haremos uso de la entidad de dominio anterior. Será un servicio que a su vez va a exponer un observable, pero con su propia lógica adaptada, de cara la vista.\n\n```bash\n# Generate a policy service\nng g s services/policy --project=policy\n```\n\n`libs\\policy\\src\\lib\\services\\policy.service.ts`\n\n```typescript\n@Injectable({\n  providedIn: 'root'\n})\nexport class PolicyService {\n  private policyAcceptationEntity = new PolicyAcceptationEntity();\n\n  constructor( ) { }\n\n  public haveToShowAccpetationDialog$(): Observable<boolean> {\n    return this.policyAcceptationEntity\n      .isPolicyAccepted$()\n      .pipe(map(x => !x));\n  }\n}\n```\n\nIncorporamos el servicio en el componente principal para que nos indique si debemos mostrar el aviso al usuario o no.\n\n`app.component.ts`\n\n```typescript\nexport class AppComponent {\n  public showPolicyDialog$: Observable<boolean>;\n\n  constructor(private policyService: PolicyService) {\n    this.showPolicyDialog$ = this.policyService.haveToShowAcceptationDialog$();\n  }\n}\n```\nTodo reactivo y todo asíncrono.\n\n`app.component.html`\n\n```html\n<ab-policy-mandatory-dialog *ngIf=\"showPolicyDialog$ | async \"></ab-policy-mandatory-dialog>\n```\n\nAl utilizar observables, podemos usar el _pipe_ `async`, que ya sabemos que informa de los cambios al detector. Por tanto la detección `OnPush` es perfectamente válida.\n\n---\n\n## Diagramas\n\nEl siguiente diagrama nos muestra a vista de pájaro las librerías y aplicaciones implicadas hasta el momento.\n\n![Dependencias entre proyectos](/images/12-projects-dependency.png)\n\nEn este otro tenemos las clases implicadas. El color denota la librería en la que se definen.\n\n![Dependencias entre componentes y clases](/images/12-class-dependency.png)\n\n---\n\nPara más información, o indicaciones paso a paso, consulta directamente la [documentación](https://angularbuilders.github.io/angular-blueprint/2-change) del proyecto en GitHub.\n\nLas tareas relativas a este tutorial resueltas en el [proyecto 2 - change-detection](https://github.com/angularbuilders/angular-blueprint/projects/2)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n\n---\n\n## Resumen\n\nLa detección automática es cómoda pero costosa. Por dos razones: se dispara muchas veces y necesita comprobar si hay cambios comparando valor por valor. La detección manual es más eficiente. Se lanza menos veces y además le basta un cambio de referencia para saber que hay novedades. Para poder usarla sin grandes trabajos recomiendo usar el _pipe_ `async`, siempre con orígenes de datos observables.\n\nPara ello necesitamos usar y conocer patrones que hagan uso de la librería observable _RxJs_. En este tutorial de formación [avanzada en Angular](../tag/Avanzado/) te muestra como mejorar el rendimiento usando el [Flujo reactivo unidireccional con Angular y RxJs](../flujo-reactivo-unidireccional-con-Angular-y-RxJs).\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"deteccion-del-cambio-en-Angular","published":1,"updated":"2019-08-02T15:43:45.289Z","_id":"cjysudc0o0000ics38fzt3skh","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-12_change.png\" alt=\"deteccion-del-cambio-en-Angular\"></p><p>La forma en que Angular realiza su renderizado y actualiza sus vistas es un factor clave para el rendimiento de las aplicaciones. ¿Cómo funciona la estrategia de detección de cambios de Angular? Pues tiene dos modos: <code>default</code> o <em>automágico</em> y <code>onPush</code> o <em>mindfulness</em>.</p><blockquote><p>Es importante tomar consciencia sobre el proceso y las implicaciones. Es costoso realizar la detección más veces de lo necesario y porque no hacerlo suficientemente implica no ver resultados reales.</p></blockquote><p>Afortunadamente el cambio del modo automático al manual no tiene por qué ser traumático. Con un mayor conocimiento del <code>changeDetectionStrategy</code> y un poco de trabajo extra tendrás aplicaciones más eficientes y mantenibles.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular/\">Tests unitarios con Jest y e2e con Cypress en Angular</a>. Al finalizar tendrás una aplicación que actualiza la vista sólo cuando es necesario, es decir: cuando los datos han cambiado.</p><blockquote><p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/angularbuilders/angular-blueprint\" target=\"_blank\" rel=\"noopener\">angular.builders/angular-blueprint/</a></p></blockquote><h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Comunicacion-de-datos-entre-componentes\">1. Comunicación de datos entre componentes.</a></p><p><a href=\"./#2-Change-detection-strategies\">2. Change detection strategies</a></p><p><a href=\"./#3-Inmutabilidad\">3. Inmutabilidad</a></p><p><a href=\"./#Ejemplo\">Ejemplo</a></p><p><a href=\"./#4-Un-par-de-componentes-con-deteccion-de-cambio-controlada\">4. Un par de componentes con detección de cambio controlada.</a></p><p><a href=\"./#5-Todo-reactivo\">5. Todo reactivo.</a></p><p><a href=\"./#Diagramas\">Diagramas</a></p><p><a href=\"./#Resumen\">Resumen</a></p><hr><h1 id=\"1-Comunicacion-de-datos-entre-componentes\"><a href=\"#1-Comunicacion-de-datos-entre-componentes\" class=\"headerlink\" title=\"1 Comunicación de datos entre componentes\"></a>1 Comunicación de datos entre componentes</h1><blockquote><p>Como desarrollador quiero disponer de un componente para informar sobre RGPD a los usuarios de mis aplicaciones</p></blockquote><p>La detección de cambios se dispara ante eventos que le ocurren a los componentes. <strong>La detección se realiza componente a componente</strong>, así que compensa tener muchos componentes pequeños, para que cada uno por si sólo no genere demasiado ruido.</p><h2 id=\"1-1-Componentes-Contenedores-y-Presentadores\"><a href=\"#1-1-Componentes-Contenedores-y-Presentadores\" class=\"headerlink\" title=\"1.1 Componentes Contenedores y Presentadores\"></a>1.1 Componentes Contenedores y Presentadores</h2><p>Al pasar de un único componente a varios mini-componentes, se propone usar <strong>el patrón contenedor / presentadores</strong>. Se mantiene un componente padre que contiene múltiples componentes presentadores hijos. El contendor es el único con acceso a los servicios de negocio y datos. Los presentadores reciben los datos y emiten eventos. Los presentadores no obtienen ni modifican datos por su cuenta.</p><p>Nomenclatura</p><ul><li><strong>Container</strong>: aka <em>Parent, Smart</em>. Irán en una subcarpeta <code>containers</code></li><li><strong>Presenter</strong>: aka <em>Child, Dumb</em>. Irán en una subcarpeta… <code>components</code></li></ul><blockquote><p>Este reparto de responsabilidades es aconsejable independientemente de la estrategia de detección aplicada. Tienes más información el artículo de introducción <a href=\"../lujo-de-datos-entre-componentes-angular\">flujo de datos entre componentes</a>.</p></blockquote><h1 id=\"2-Change-detection-strategies\"><a href=\"#2-Change-detection-strategies\" class=\"headerlink\" title=\"2 Change detection strategies\"></a>2 Change detection strategies</h1><p>Con la aplicación bien estructurada en componentes y con la comunicación estandarizada, habremos reducido el impacto de la detección del cambio y estaremos preparados para optimizarlo. Conozcamos en detalle las estrategias de detección del cambio.</p><p>El decorador <code>@Component()</code> admite en su configuración la poco conocida propiedad <code>changeDetection</code>. Dicha propiedad puede asignarse manualmente al componente, o indicarle su uso al generador del cli.</p><h2 id=\"2-1-Deteccion-automatica-default\"><a href=\"#2-1-Deteccion-automatica-default\" class=\"headerlink\" title=\"2.1 Detección automática, default\"></a>2.1 Detección automática, <em>default</em></h2><p>Por defecto, Angular tiene que ser conservador y verificar cada posible cambio, esto se denomina comprobación sucia o <em>dirty checking</em>. Se dispara <strong>con demasiada frecuencia</strong>, al menos en los siguientes casos:</p><ul><li>Eventos desde el browser</li><li>Timers, intervals etc..</li><li>Llamadas http</li><li>Promesas y código asíncrono.</li></ul><p>Por si fuera poco, además de dispararse mucho es <strong>muy costoso</strong>. Determinar que algo ha cambiado implica comparar dos estados: el actual y el anterior.</p><blockquote><p>La comparación es valor a valor, en profundidad, para cada propiedad de cada objeto, para cada objeto de cada array.</p></blockquote><p>Con todo, esta estrategia es cómoda para el programador y suficiente para casos básicos. Pero demasiada magia dificulta el control en aplicaciones complejas. Y en pantallas de mucha información e interacción degrada el rendimiento percibido.</p><h2 id=\"2-2-Deteccion-manual-onPush\"><a href=\"#2-2-Deteccion-manual-onPush\" class=\"headerlink\" title=\"2.2 Detección manual, onPush\"></a>2.2 Detección manual, <em>onPush</em></h2><p>Como se puede prever, la detección del cambio manual es lanzada por el programador. No siempre va a ser laborioso, pero será más consciente pues para que ocurra han de darse alguna de estas circunstancias:</p><ul><li><strong>Explícitamente</strong> el programador solicita la detección llamando a `ChangeDetectorRef.detectChanges();</li><li><strong>Implícitamente</strong> al usar el <code>pipe Async</code> en la vista se llama a ese mismo método.</li><li><strong>Conscientemente</strong> el desarrollador obliga a un componente a repintarse si le cambia la referencia a un <code>@Input()</code>.</li></ul><blockquote><p>En este modo los componentes dejan de evaluar y comparar sus propiedades rutinariamente. Sólo atienden a eventos <code>@Output()</code> o <strong>cambios de referencia</strong> <code>@Input()</code>. Esto relaja mucho al motor de Angular, que ya no tiene que hacer comparaciones odiosas. Sabrá que algo ha cambiado porque… es otro objeto.</p></blockquote><h1 id=\"3-Inmutabilidad\"><a href=\"#3-Inmutabilidad\" class=\"headerlink\" title=\"3 Inmutabilidad\"></a>3 Inmutabilidad</h1><p>Como ya se ha dicho, para que Angular en la estrategia automática decida que algo ha cambiado necesita hacer una comparación por valor. Para evitar ese coste usamos la estrategia manual y el programador tiene que cambiar la referencia de algo cuando quiera que Angular repinte la vista.</p><h2 id=\"3-1-Por-referencia-y-por-valor\"><a href=\"#3-1-Por-referencia-y-por-valor\" class=\"headerlink\" title=\"3.1 Por referencia y por valor\"></a>3.1 Por referencia y por valor</h2><p>Normalmente tendrá que crear un nuevo objeto y reasignarlo en lugar del anterior en un <strong>ciclo de clonación, mutación y asignación</strong>. Por costoso que parezca siempre compensa si evita muchas e innecesarias comparaciones por valor en estructuras profundas.</p><p>La estrategia <code>onPush</code> trata a todos los <code>Inputs</code> en inmutables, es decir, algo que no espera que cambie. Similar al paso de parámetros por valor, que si cambia es porque es otro puntero.</p><h2 id=\"3-2-El-clonado\"><a href=\"#3-2-El-clonado\" class=\"headerlink\" title=\"3.2 El clonado\"></a>3.2 El clonado</h2><p>El potencialmente pesado trabajo de clonado lo podemos evitar en muchos casos usando alguna de estas técnicas:</p><ul><li><strong>Tipos primitivos</strong> que se pasan por valor en las propiedades <code>@Input()</code></li><li><strong>Arrays</strong>: muchos métodos como <code>.filter() .slice() .sort() .concat()</code> etc., devuelven nuevas referencias sin modificar el array original.</li><li><strong>Observables y el pipe Async</strong>, pues en este caso se subscribe y lanza implícitamente la detección del cambio. Sin necesidad de clonar.</li></ul><p>Para los demás casos tenemos operadores <em>TypeScript</em> sencillos y optimizados para obtener nuevas referencias a partir de otros ya existentes.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> original = &#123; name:<span class=\"string\">'first'</span>, value:<span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cloned = &#123; ...original &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &gt; &#123; name:'first', value:1 &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutated = &#123; ...original, value:<span class=\"number\">2</span>, newProperty: <span class=\"string\">'added'</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &gt; &#123; name:'first', value:2, newProperty: 'added' &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> list = [ original, cloned, mutated ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:'first', value:1 &#125;, &#123; name:'first', value:1 &#125;, &#123; name:'first', value:2, newProperty: 'added' &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clonedList = [ ...list ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:'first', value:1 &#125;, &#123; name:'first', value:1 &#125;, &#123; name:'first', value:2, newProperty: 'added' &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutatedList = [ ...list, &#123; name: <span class=\"string\">'new item'</span>&#125; ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:'first', value:1 &#125;, &#123; name:'first', value:1 &#125;, &#123; name:'first', value:2, newProperty: 'added' &#125;, &#123; name: 'new item'&#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newList = list.filter(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i.name==<span class=\"string\">'first'</span>);</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:'first', value:1 &#125;, &#123; name:'first', value:1 &#125;, &#123; name:'first', value:2, newProperty: 'added' &#125; ]</span></span><br></pre></td></tr></table></figure><p>Ya tienes los conocimientos para acelerar y reducir la incertidumbre sobre el actualización de vistas usando el patrón <strong>contenedor / presentador</strong> junto con la estrategia de detección de cambios <code>OnPush</code>. Ahora vamos a ver un ejemplo.</p><h2 id=\"Ejemplo\"><a href=\"#Ejemplo\" class=\"headerlink\" title=\"Ejemplo\"></a>Ejemplo</h2><h3 id=\"Funcionalidad-esperada\"><a href=\"#Funcionalidad-esperada\" class=\"headerlink\" title=\"Funcionalidad esperada:\"></a>Funcionalidad esperada:</h3><p>Cuando un usuario visita la aplicación por primera vez debe avisarse del uso de cookies para cumplir con las políticas legales.</p><p>El aviso será mediante un dialogo flotante sobre la página.</p><p>El usuario puede ver más detalles o quedarse con la información reducida.</p><h1 id=\"4-Un-par-de-componentes-con-deteccion-de-cambio-controlada\"><a href=\"#4-Un-par-de-componentes-con-deteccion-de-cambio-controlada\" class=\"headerlink\" title=\"4. Un par de componentes con detección de cambio controlada.\"></a>4. Un par de componentes con detección de cambio controlada.</h1><p>Ya que este será un componente genérico y válido para muchas aplicaciones vamos a crearlo en una librería reutilizable a la que llamaré <code>policy</code>. En ella generamos los dos componentes. ¿Dos componentes?. Hemos dedicado un tema al <a href=\"../lujo-de-datos-entre-componentes-angular\">flujo de datos entre componentes</a> en el tutorial de introducción a Angular. Allí se recomendaba que la lógica de presentación y la de negocio estuviesen separadas.</p><p>Emergía el patrón <em>container-presenter</em> que separa la responsabilidad de tratar con los servicios de datos de la responsabilidad de presentarlos en pantalla. Al componente que manipula datos se le llama contenedor, y al que los presenta… presentador. Puedes usar cualquier esquema de organización o nombrado. Yo los agrupo en dos carpetas: <code>containers</code> y simples <code>components</code>.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate the policy library project</span></span><br><span class=\"line\">ng g library policy --tags=angular</span><br><span class=\"line\"><span class=\"comment\"># Generate the dialog components</span></span><br><span class=\"line\"><span class=\"comment\"># container</span></span><br><span class=\"line\">ng g c containers/mandatory-dialog --project=policy --<span class=\"built_in\">export</span> --inlineStyle --inlineTemplate --changeDetection=OnPush</span><br><span class=\"line\"><span class=\"comment\"># presenter</span></span><br><span class=\"line\">ng g c components/dialog --project=policy --changeDetection=OnPush</span><br></pre></td></tr></table></figure><p>Eso sí todos llevan una modificador especial: el <code>changeDetection=OnPush</code>. Esta es la primera recomendación para cumplir con el flujo unidireccional. En esencia lo que hacemos es decirle a Angular que no use la detección de cambios por defecto. Tenemos un artículo con una explicación completa de la <a href=\"../deteccion-del-cambio-en-Angular\">Detección del cambio en Angular</a>.</p><p>El componente contenedor suele tener poco <em>html</em> y ningún <em>css</em>, así que es un candidato a entrar en un único fichero: <code>containers/mandatory-dialog.component.ts</code>. Nada interesante por el momento en este componente obligatorio en toda web pública.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-policy-mandatory-dialog'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ab-policy-dialog&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ab-policy-dialog&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  styles: [],</span><br><span class=\"line\">  changeDetection: ChangeDetectionStrategy.OnPush</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MandatoryDialogComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Tampoco el presentador requiere de mucha atención, así que muestro su simple vista: <code>components/dialog.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dialog</span> <span class=\"attr\">open</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This site uses cookies to personalize content, to provide social media features and to analyze traffic.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"5-Todo-reactivo\"><a href=\"#5-Todo-reactivo\" class=\"headerlink\" title=\"5. Todo reactivo.\"></a>5. Todo reactivo.</h1><blockquote><p>Como desarrollador quiero que las comunicaciones sean fluidas e independientes del tiempo para que los cambios en los datos cambien la presentación sin esfuerzo</p></blockquote><p>Otro de los pilares de la programación moderna de grandes aplicaciones es la <strong>reactividad</strong> (nada que ver con Chernóbil). Se trata de que los cambios se comuniquen cuando ocurran, sin necesidad de preguntar por ellos. De esta forma <strong>los componentes reaccionarán al cambio</strong> en lugar de buscarlo proactivamente mejorando mucho el rendimiento de las aplicaciones.</p><p>Reducida a lo esencial, la lógica más básica que quiero implementar es un marcador que me indique si el usuario ha aceptado o no la política de cookies. Un mísero booleano. Pero claro, hacerlo reactivo requiere usar observables, y para eso emplearemos la librería <a href=\"https://www.learnrxjs.io/concepts/rxjs-primer.html\" target=\"_blank\" rel=\"noopener\">RxJs</a>.</p><p>Hablando de cosas esenciales. Las arquitecturas de software centradas en el dominio proponen que toda la lógica básica de una gran aplicación debería ser independiente de <em>pequeños detalles sin importancia como los frameworks</em>. Aprovechando las capacidades de <a href=\"../nx-mono-repositorios-en-Angular/\">Nx para tratar con mono repos</a> no cuesta nada crear un librería en dónde establecer en los modelos de datos y las entidades con sus reglas de negocio. A esta librería de dominio la llamaré <code>policy-domain</code>.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a policy-domain Type Script library with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/workspace:library policy-domain --directory=</span><br></pre></td></tr></table></figure><p>Y en ella declaramos una clase que representa la entidad principal de este proyecto: la aceptación de las políticas. Esa entidad es una clase informa a quien se suscriba de su estado de aceptación, inicialmente falso.</p><p><code>libs\\policy-domain\\src\\lib\\services\\policy-acceptation.entity.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PolicyAcceptationEntity &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> isPolicyAccepted$(): Observable&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> of(<span class=\"literal\">false</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>En una capa superior, ya en un entorno Angular, haremos uso de la entidad de dominio anterior. Será un servicio que a su vez va a exponer un observable, pero con su propia lógica adaptada, de cara la vista.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a policy service</span></span><br><span class=\"line\">ng g s services/policy --project=policy</span><br></pre></td></tr></table></figure><p><code>libs\\policy\\src\\lib\\services\\policy.service.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PolicyService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> policyAcceptationEntity = <span class=\"keyword\">new</span> PolicyAcceptationEntity();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"> </span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> haveToShowAccpetationDialog$(): Observable&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.policyAcceptationEntity</span><br><span class=\"line\">      .isPolicyAccepted$()</span><br><span class=\"line\">      .pipe(map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !x));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Incorporamos el servicio en el componente principal para que nos indique si debemos mostrar el aviso al usuario o no.</p><p><code>app.component.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> showPolicyDialog$: Observable&lt;<span class=\"built_in\">boolean</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> policyService: PolicyService</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showPolicyDialog$ = <span class=\"keyword\">this</span>.policyService.haveToShowAcceptationDialog$();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Todo reactivo y todo asíncrono.</p><p><code>app.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-policy-mandatory-dialog</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"showPolicyDialog$ | async \"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-policy-mandatory-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Al utilizar observables, podemos usar el <em>pipe</em> <code>async</code>, que ya sabemos que informa de los cambios al detector. Por tanto la detección <code>OnPush</code> es perfectamente válida.</p><hr><h2 id=\"Diagramas\"><a href=\"#Diagramas\" class=\"headerlink\" title=\"Diagramas\"></a>Diagramas</h2><p>El siguiente diagrama nos muestra a vista de pájaro las librerías y aplicaciones implicadas hasta el momento.</p><p><img src=\"/images/12-projects-dependency.png\" alt=\"Dependencias entre proyectos\"></p><p>En este otro tenemos las clases implicadas. El color denota la librería en la que se definen.</p><p><img src=\"/images/12-class-dependency.png\" alt=\"Dependencias entre componentes y clases\"></p><hr><p>Para más información, o indicaciones paso a paso, consulta directamente la <a href=\"https://angularbuilders.github.io/angular-blueprint/2-change\" target=\"_blank\" rel=\"noopener\">documentación</a> del proyecto en GitHub.</p><p>Las tareas relativas a este tutorial resueltas en el <a href=\"https://github.com/angularbuilders/angular-blueprint/projects/2\" target=\"_blank\" rel=\"noopener\">proyecto 2 - change-detection</a></p><p><img src=\"/css/images/angular.builders.png\" alt=\"Angular.Builders\"></p><p>La iniciativa <a href=\"https://angular.builders\" target=\"_blank\" rel=\"noopener\">Angular.Builders</a> nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como <a href=\"https://angularbuilders.github.io/angular-blueprint/\" target=\"_blank\" rel=\"noopener\">angular.blueprint</a>.</p><p>Para más información sobre servicios de consultoría <a href=\"https://www.linkedin.com/in/albertobasalo/\" target=\"_blank\" rel=\"noopener\">ponte en contacto conmigo</a>.</p><hr><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>La detección automática es cómoda pero costosa. Por dos razones: se dispara muchas veces y necesita comprobar si hay cambios comparando valor por valor. La detección manual es más eficiente. Se lanza menos veces y además le basta un cambio de referencia para saber que hay novedades. Para poder usarla sin grandes trabajos recomiendo usar el <em>pipe</em> <code>async</code>, siempre con orígenes de datos observables.</p><p>Para ello necesitamos usar y conocer patrones que hagan uso de la librería observable <em>RxJs</em>. En este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> te muestra como mejorar el rendimiento usando el <a href=\"../flujo-reactivo-unidireccional-con-Angular-y-RxJs\">Flujo reactivo unidireccional con Angular y RxJs</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-12_change.png\" alt=\"deteccion-del-cambio-en-Angular\"></p><p>La forma en que Angular realiza su renderizado y actualiza sus vistas es un factor clave para el rendimiento de las aplicaciones. ¿Cómo funciona la estrategia de detección de cambios de Angular? Pues tiene dos modos: <code>default</code> o <em>automágico</em> y <code>onPush</code> o <em>mindfulness</em>.</p><blockquote><p>Es importante tomar consciencia sobre el proceso y las implicaciones. Es costoso realizar la detección más veces de lo necesario y porque no hacerlo suficientemente implica no ver resultados reales.</p></blockquote><p>Afortunadamente el cambio del modo automático al manual no tiene por qué ser traumático. Con un mayor conocimiento del <code>changeDetectionStrategy</code> y un poco de trabajo extra tendrás aplicaciones más eficientes y mantenibles.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../tests-unitarios-con-jest-y-e2e-con-cypress-en-Angular/\">Tests unitarios con Jest y e2e con Cypress en Angular</a>. Al finalizar tendrás una aplicación que actualiza la vista sólo cuando es necesario, es decir: cuando los datos han cambiado.</p><blockquote><p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/angularbuilders/angular-blueprint\" target=\"_blank\" rel=\"noopener\">angular.builders/angular-blueprint/</a></p></blockquote><h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#1-Comunicacion-de-datos-entre-componentes\">1. Comunicación de datos entre componentes.</a></p><p><a href=\"./#2-Change-detection-strategies\">2. Change detection strategies</a></p><p><a href=\"./#3-Inmutabilidad\">3. Inmutabilidad</a></p><p><a href=\"./#Ejemplo\">Ejemplo</a></p><p><a href=\"./#4-Un-par-de-componentes-con-deteccion-de-cambio-controlada\">4. Un par de componentes con detección de cambio controlada.</a></p><p><a href=\"./#5-Todo-reactivo\">5. Todo reactivo.</a></p><p><a href=\"./#Diagramas\">Diagramas</a></p><p><a href=\"./#Resumen\">Resumen</a></p><hr><h1 id=\"1-Comunicacion-de-datos-entre-componentes\"><a href=\"#1-Comunicacion-de-datos-entre-componentes\" class=\"headerlink\" title=\"1 Comunicación de datos entre componentes\"></a>1 Comunicación de datos entre componentes</h1><blockquote><p>Como desarrollador quiero disponer de un componente para informar sobre RGPD a los usuarios de mis aplicaciones</p></blockquote><p>La detección de cambios se dispara ante eventos que le ocurren a los componentes. <strong>La detección se realiza componente a componente</strong>, así que compensa tener muchos componentes pequeños, para que cada uno por si sólo no genere demasiado ruido.</p><h2 id=\"1-1-Componentes-Contenedores-y-Presentadores\"><a href=\"#1-1-Componentes-Contenedores-y-Presentadores\" class=\"headerlink\" title=\"1.1 Componentes Contenedores y Presentadores\"></a>1.1 Componentes Contenedores y Presentadores</h2><p>Al pasar de un único componente a varios mini-componentes, se propone usar <strong>el patrón contenedor / presentadores</strong>. Se mantiene un componente padre que contiene múltiples componentes presentadores hijos. El contendor es el único con acceso a los servicios de negocio y datos. Los presentadores reciben los datos y emiten eventos. Los presentadores no obtienen ni modifican datos por su cuenta.</p><p>Nomenclatura</p><ul><li><strong>Container</strong>: aka <em>Parent, Smart</em>. Irán en una subcarpeta <code>containers</code></li><li><strong>Presenter</strong>: aka <em>Child, Dumb</em>. Irán en una subcarpeta… <code>components</code></li></ul><blockquote><p>Este reparto de responsabilidades es aconsejable independientemente de la estrategia de detección aplicada. Tienes más información el artículo de introducción <a href=\"../lujo-de-datos-entre-componentes-angular\">flujo de datos entre componentes</a>.</p></blockquote><h1 id=\"2-Change-detection-strategies\"><a href=\"#2-Change-detection-strategies\" class=\"headerlink\" title=\"2 Change detection strategies\"></a>2 Change detection strategies</h1><p>Con la aplicación bien estructurada en componentes y con la comunicación estandarizada, habremos reducido el impacto de la detección del cambio y estaremos preparados para optimizarlo. Conozcamos en detalle las estrategias de detección del cambio.</p><p>El decorador <code>@Component()</code> admite en su configuración la poco conocida propiedad <code>changeDetection</code>. Dicha propiedad puede asignarse manualmente al componente, o indicarle su uso al generador del cli.</p><h2 id=\"2-1-Deteccion-automatica-default\"><a href=\"#2-1-Deteccion-automatica-default\" class=\"headerlink\" title=\"2.1 Detección automática, default\"></a>2.1 Detección automática, <em>default</em></h2><p>Por defecto, Angular tiene que ser conservador y verificar cada posible cambio, esto se denomina comprobación sucia o <em>dirty checking</em>. Se dispara <strong>con demasiada frecuencia</strong>, al menos en los siguientes casos:</p><ul><li>Eventos desde el browser</li><li>Timers, intervals etc..</li><li>Llamadas http</li><li>Promesas y código asíncrono.</li></ul><p>Por si fuera poco, además de dispararse mucho es <strong>muy costoso</strong>. Determinar que algo ha cambiado implica comparar dos estados: el actual y el anterior.</p><blockquote><p>La comparación es valor a valor, en profundidad, para cada propiedad de cada objeto, para cada objeto de cada array.</p></blockquote><p>Con todo, esta estrategia es cómoda para el programador y suficiente para casos básicos. Pero demasiada magia dificulta el control en aplicaciones complejas. Y en pantallas de mucha información e interacción degrada el rendimiento percibido.</p><h2 id=\"2-2-Deteccion-manual-onPush\"><a href=\"#2-2-Deteccion-manual-onPush\" class=\"headerlink\" title=\"2.2 Detección manual, onPush\"></a>2.2 Detección manual, <em>onPush</em></h2><p>Como se puede prever, la detección del cambio manual es lanzada por el programador. No siempre va a ser laborioso, pero será más consciente pues para que ocurra han de darse alguna de estas circunstancias:</p><ul><li><strong>Explícitamente</strong> el programador solicita la detección llamando a `ChangeDetectorRef.detectChanges();</li><li><strong>Implícitamente</strong> al usar el <code>pipe Async</code> en la vista se llama a ese mismo método.</li><li><strong>Conscientemente</strong> el desarrollador obliga a un componente a repintarse si le cambia la referencia a un <code>@Input()</code>.</li></ul><blockquote><p>En este modo los componentes dejan de evaluar y comparar sus propiedades rutinariamente. Sólo atienden a eventos <code>@Output()</code> o <strong>cambios de referencia</strong> <code>@Input()</code>. Esto relaja mucho al motor de Angular, que ya no tiene que hacer comparaciones odiosas. Sabrá que algo ha cambiado porque… es otro objeto.</p></blockquote><h1 id=\"3-Inmutabilidad\"><a href=\"#3-Inmutabilidad\" class=\"headerlink\" title=\"3 Inmutabilidad\"></a>3 Inmutabilidad</h1><p>Como ya se ha dicho, para que Angular en la estrategia automática decida que algo ha cambiado necesita hacer una comparación por valor. Para evitar ese coste usamos la estrategia manual y el programador tiene que cambiar la referencia de algo cuando quiera que Angular repinte la vista.</p><h2 id=\"3-1-Por-referencia-y-por-valor\"><a href=\"#3-1-Por-referencia-y-por-valor\" class=\"headerlink\" title=\"3.1 Por referencia y por valor\"></a>3.1 Por referencia y por valor</h2><p>Normalmente tendrá que crear un nuevo objeto y reasignarlo en lugar del anterior en un <strong>ciclo de clonación, mutación y asignación</strong>. Por costoso que parezca siempre compensa si evita muchas e innecesarias comparaciones por valor en estructuras profundas.</p><p>La estrategia <code>onPush</code> trata a todos los <code>Inputs</code> en inmutables, es decir, algo que no espera que cambie. Similar al paso de parámetros por valor, que si cambia es porque es otro puntero.</p><h2 id=\"3-2-El-clonado\"><a href=\"#3-2-El-clonado\" class=\"headerlink\" title=\"3.2 El clonado\"></a>3.2 El clonado</h2><p>El potencialmente pesado trabajo de clonado lo podemos evitar en muchos casos usando alguna de estas técnicas:</p><ul><li><strong>Tipos primitivos</strong> que se pasan por valor en las propiedades <code>@Input()</code></li><li><strong>Arrays</strong>: muchos métodos como <code>.filter() .slice() .sort() .concat()</code> etc., devuelven nuevas referencias sin modificar el array original.</li><li><strong>Observables y el pipe Async</strong>, pues en este caso se subscribe y lanza implícitamente la detección del cambio. Sin necesidad de clonar.</li></ul><p>Para los demás casos tenemos operadores <em>TypeScript</em> sencillos y optimizados para obtener nuevas referencias a partir de otros ya existentes.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> original = &#123; name:<span class=\"string\">'first'</span>, value:<span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cloned = &#123; ...original &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &gt; &#123; name:'first', value:1 &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutated = &#123; ...original, value:<span class=\"number\">2</span>, newProperty: <span class=\"string\">'added'</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// &gt; &#123; name:'first', value:2, newProperty: 'added' &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> list = [ original, cloned, mutated ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:'first', value:1 &#125;, &#123; name:'first', value:1 &#125;, &#123; name:'first', value:2, newProperty: 'added' &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clonedList = [ ...list ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:'first', value:1 &#125;, &#123; name:'first', value:1 &#125;, &#123; name:'first', value:2, newProperty: 'added' &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutatedList = [ ...list, &#123; name: <span class=\"string\">'new item'</span>&#125; ];</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:'first', value:1 &#125;, &#123; name:'first', value:1 &#125;, &#123; name:'first', value:2, newProperty: 'added' &#125;, &#123; name: 'new item'&#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newList = list.filter(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i.name==<span class=\"string\">'first'</span>);</span><br><span class=\"line\"><span class=\"comment\">// &gt; [ &#123; name:'first', value:1 &#125;, &#123; name:'first', value:1 &#125;, &#123; name:'first', value:2, newProperty: 'added' &#125; ]</span></span><br></pre></td></tr></table></figure><p>Ya tienes los conocimientos para acelerar y reducir la incertidumbre sobre el actualización de vistas usando el patrón <strong>contenedor / presentador</strong> junto con la estrategia de detección de cambios <code>OnPush</code>. Ahora vamos a ver un ejemplo.</p><h2 id=\"Ejemplo\"><a href=\"#Ejemplo\" class=\"headerlink\" title=\"Ejemplo\"></a>Ejemplo</h2><h3 id=\"Funcionalidad-esperada\"><a href=\"#Funcionalidad-esperada\" class=\"headerlink\" title=\"Funcionalidad esperada:\"></a>Funcionalidad esperada:</h3><p>Cuando un usuario visita la aplicación por primera vez debe avisarse del uso de cookies para cumplir con las políticas legales.</p><p>El aviso será mediante un dialogo flotante sobre la página.</p><p>El usuario puede ver más detalles o quedarse con la información reducida.</p><h1 id=\"4-Un-par-de-componentes-con-deteccion-de-cambio-controlada\"><a href=\"#4-Un-par-de-componentes-con-deteccion-de-cambio-controlada\" class=\"headerlink\" title=\"4. Un par de componentes con detección de cambio controlada.\"></a>4. Un par de componentes con detección de cambio controlada.</h1><p>Ya que este será un componente genérico y válido para muchas aplicaciones vamos a crearlo en una librería reutilizable a la que llamaré <code>policy</code>. En ella generamos los dos componentes. ¿Dos componentes?. Hemos dedicado un tema al <a href=\"../lujo-de-datos-entre-componentes-angular\">flujo de datos entre componentes</a> en el tutorial de introducción a Angular. Allí se recomendaba que la lógica de presentación y la de negocio estuviesen separadas.</p><p>Emergía el patrón <em>container-presenter</em> que separa la responsabilidad de tratar con los servicios de datos de la responsabilidad de presentarlos en pantalla. Al componente que manipula datos se le llama contenedor, y al que los presenta… presentador. Puedes usar cualquier esquema de organización o nombrado. Yo los agrupo en dos carpetas: <code>containers</code> y simples <code>components</code>.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate the policy library project</span></span><br><span class=\"line\">ng g library policy --tags=angular</span><br><span class=\"line\"><span class=\"comment\"># Generate the dialog components</span></span><br><span class=\"line\"><span class=\"comment\"># container</span></span><br><span class=\"line\">ng g c containers/mandatory-dialog --project=policy --<span class=\"built_in\">export</span> --inlineStyle --inlineTemplate --changeDetection=OnPush</span><br><span class=\"line\"><span class=\"comment\"># presenter</span></span><br><span class=\"line\">ng g c components/dialog --project=policy --changeDetection=OnPush</span><br></pre></td></tr></table></figure><p>Eso sí todos llevan una modificador especial: el <code>changeDetection=OnPush</code>. Esta es la primera recomendación para cumplir con el flujo unidireccional. En esencia lo que hacemos es decirle a Angular que no use la detección de cambios por defecto. Tenemos un artículo con una explicación completa de la <a href=\"../deteccion-del-cambio-en-Angular\">Detección del cambio en Angular</a>.</p><p>El componente contenedor suele tener poco <em>html</em> y ningún <em>css</em>, así que es un candidato a entrar en un único fichero: <code>containers/mandatory-dialog.component.ts</code>. Nada interesante por el momento en este componente obligatorio en toda web pública.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-policy-mandatory-dialog'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ab-policy-dialog&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ab-policy-dialog&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  styles: [],</span><br><span class=\"line\">  changeDetection: ChangeDetectionStrategy.OnPush</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MandatoryDialogComponent <span class=\"keyword\">implements</span> OnInit &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ngOnInit(): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Tampoco el presentador requiere de mucha atención, así que muestro su simple vista: <code>components/dialog.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dialog</span> <span class=\"attr\">open</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This site uses cookies to personalize content, to provide social media features and to analyze traffic.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id=\"5-Todo-reactivo\"><a href=\"#5-Todo-reactivo\" class=\"headerlink\" title=\"5. Todo reactivo.\"></a>5. Todo reactivo.</h1><blockquote><p>Como desarrollador quiero que las comunicaciones sean fluidas e independientes del tiempo para que los cambios en los datos cambien la presentación sin esfuerzo</p></blockquote><p>Otro de los pilares de la programación moderna de grandes aplicaciones es la <strong>reactividad</strong> (nada que ver con Chernóbil). Se trata de que los cambios se comuniquen cuando ocurran, sin necesidad de preguntar por ellos. De esta forma <strong>los componentes reaccionarán al cambio</strong> en lugar de buscarlo proactivamente mejorando mucho el rendimiento de las aplicaciones.</p><p>Reducida a lo esencial, la lógica más básica que quiero implementar es un marcador que me indique si el usuario ha aceptado o no la política de cookies. Un mísero booleano. Pero claro, hacerlo reactivo requiere usar observables, y para eso emplearemos la librería <a href=\"https://www.learnrxjs.io/concepts/rxjs-primer.html\" target=\"_blank\" rel=\"noopener\">RxJs</a>.</p><p>Hablando de cosas esenciales. Las arquitecturas de software centradas en el dominio proponen que toda la lógica básica de una gran aplicación debería ser independiente de <em>pequeños detalles sin importancia como los frameworks</em>. Aprovechando las capacidades de <a href=\"../nx-mono-repositorios-en-Angular/\">Nx para tratar con mono repos</a> no cuesta nada crear un librería en dónde establecer en los modelos de datos y las entidades con sus reglas de negocio. A esta librería de dominio la llamaré <code>policy-domain</code>.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a policy-domain Type Script library with nx power-ups</span></span><br><span class=\"line\">ng g @nrwl/workspace:library policy-domain --directory=</span><br></pre></td></tr></table></figure><p>Y en ella declaramos una clase que representa la entidad principal de este proyecto: la aceptación de las políticas. Esa entidad es una clase informa a quien se suscriba de su estado de aceptación, inicialmente falso.</p><p><code>libs\\policy-domain\\src\\lib\\services\\policy-acceptation.entity.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PolicyAcceptationEntity &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> isPolicyAccepted$(): Observable&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> of(<span class=\"literal\">false</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>En una capa superior, ya en un entorno Angular, haremos uso de la entidad de dominio anterior. Será un servicio que a su vez va a exponer un observable, pero con su propia lógica adaptada, de cara la vista.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a policy service</span></span><br><span class=\"line\">ng g s services/policy --project=policy</span><br></pre></td></tr></table></figure><p><code>libs\\policy\\src\\lib\\services\\policy.service.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PolicyService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> policyAcceptationEntity = <span class=\"keyword\">new</span> PolicyAcceptationEntity();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"> </span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> haveToShowAccpetationDialog$(): Observable&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.policyAcceptationEntity</span><br><span class=\"line\">      .isPolicyAccepted$()</span><br><span class=\"line\">      .pipe(map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !x));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Incorporamos el servicio en el componente principal para que nos indique si debemos mostrar el aviso al usuario o no.</p><p><code>app.component.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> showPolicyDialog$: Observable&lt;<span class=\"built_in\">boolean</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> policyService: PolicyService</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showPolicyDialog$ = <span class=\"keyword\">this</span>.policyService.haveToShowAcceptationDialog$();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Todo reactivo y todo asíncrono.</p><p><code>app.component.html</code></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ab-policy-mandatory-dialog</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"showPolicyDialog$ | async \"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ab-policy-mandatory-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Al utilizar observables, podemos usar el <em>pipe</em> <code>async</code>, que ya sabemos que informa de los cambios al detector. Por tanto la detección <code>OnPush</code> es perfectamente válida.</p><hr><h2 id=\"Diagramas\"><a href=\"#Diagramas\" class=\"headerlink\" title=\"Diagramas\"></a>Diagramas</h2><p>El siguiente diagrama nos muestra a vista de pájaro las librerías y aplicaciones implicadas hasta el momento.</p><p><img src=\"/images/12-projects-dependency.png\" alt=\"Dependencias entre proyectos\"></p><p>En este otro tenemos las clases implicadas. El color denota la librería en la que se definen.</p><p><img src=\"/images/12-class-dependency.png\" alt=\"Dependencias entre componentes y clases\"></p><hr><p>Para más información, o indicaciones paso a paso, consulta directamente la <a href=\"https://angularbuilders.github.io/angular-blueprint/2-change\" target=\"_blank\" rel=\"noopener\">documentación</a> del proyecto en GitHub.</p><p>Las tareas relativas a este tutorial resueltas en el <a href=\"https://github.com/angularbuilders/angular-blueprint/projects/2\" target=\"_blank\" rel=\"noopener\">proyecto 2 - change-detection</a></p><p><img src=\"/css/images/angular.builders.png\" alt=\"Angular.Builders\"></p><p>La iniciativa <a href=\"https://angular.builders\" target=\"_blank\" rel=\"noopener\">Angular.Builders</a> nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como <a href=\"https://angularbuilders.github.io/angular-blueprint/\" target=\"_blank\" rel=\"noopener\">angular.blueprint</a>.</p><p>Para más información sobre servicios de consultoría <a href=\"https://www.linkedin.com/in/albertobasalo/\" target=\"_blank\" rel=\"noopener\">ponte en contacto conmigo</a>.</p><hr><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>La detección automática es cómoda pero costosa. Por dos razones: se dispara muchas veces y necesita comprobar si hay cambios comparando valor por valor. La detección manual es más eficiente. Se lanza menos veces y además le basta un cambio de referencia para saber que hay novedades. Para poder usarla sin grandes trabajos recomiendo usar el <em>pipe</em> <code>async</code>, siempre con orígenes de datos observables.</p><p>Para ello necesitamos usar y conocer patrones que hagan uso de la librería observable <em>RxJs</em>. En este tutorial de formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> te muestra como mejorar el rendimiento usando el <a href=\"../flujo-reactivo-unidireccional-con-Angular-y-RxJs\">Flujo reactivo unidireccional con Angular y RxJs</a>.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"},{"title":"Flujo reactivo unidireccional con Angular y RxJs","date":"2019-08-05T09:46:34.000Z","thumbnail":"/css/images/angular-13_unidirectional.png","_content":"\n![flujo-reactivo-unidireccional-con-Angular-y-RxJs](/images/tutorial-angular-13_unidirectional.png)\n\nContinuando con el **tutorial de Angular Avanzado** nos centramos ahora en una arquitectura de comunicación de datos conocida como _Unidirectional Data Flow_ o flujo de datos en un mismo sentido. Esta técnica es una mejora sobre el modelo básico de Angular, el _double-binding_, que facilitaba mucho el desarrollo en pequeños proyectos.\n\n> Cuando hablamos de mejora debemos ser honestos con los costes y beneficios: aquí vamos a mejorar la eficiencia en ejecución y a facilitar la depuración a costa de una mayor complejidad estructural y sintáctica. Merece la pena cuanto más grande sea el proyecto. Este es un ejemplo simplificado pero realista. Tómate tu tiempo para estudiarlo con calma.\n\nTomar las decisiones correctas en cuestiones de este calibre puede suponer la diferencia entre el éxito o fracaso de un proyecto. Voy a explicarte las razones para usar este patrón y la manera más sencilla de introducirlo en tus aplicaciones, dejándote en el umbral de soluciones aún más potentes como la gestión de estado centralizada con Redux.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Detección del cambio en Angular](../deteccion-del-cambio-en-Angular/). Al finalizar dotaremos a la aplicación de un sistema de avisos sobre el uso de cookies en cumplimiento de la [política RGPD](https://es.wikipedia.org/wiki/Reglamento_General_de_Protecci%C3%B3n_de_Datos)\n\n> Código asociado a este tutorial en _GitHub_: [angular.builders/angular-blueprint/](https://github.com/angularbuilders/angular-blueprint)\n\n\n## Tabla de Contenido:\n\n[Ejemplo](./#Ejemplo)\n\n[1. Un almacén genérico observable.](./#1-Un-almacen-generico-observable)\n\n[2. Un servicio para mostrar u ocultar detalles.](./#2-Un-servicio-para-mostrar-u-ocultar-detalles)\n\n[3. Ya solo quedan los detalles.](./#3-Ya-solo-quedan-los-detalles)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n\n---\n## Ejemplo\n\n### Funcionalidad esperada:\n\n- Cuando un usuario visita la aplicación por primera vez debe avisarse del uso de cookies para cumplir con las políticas legales.\n\n- El aviso será mediante un diálogo flotante sobre la página.\n\n- El usuario puede ver más detalles o quedarse con la información reducida.\n\n- Según el tipo de aplicación, los detalles podrán verse en una página propia o en el mismo diálogo inicial.\n\n- El usuario podrá aceptar el uso de cookies.\n\n- Si lo hace, se almacenará la aceptación en el almacén local.\n\n- Habiendo aceptación no se mostrará más el diálogo.\n\n\n# 1. Un almacén genérico observable\n\n> Como desarrollador quiero que los cambios en el estado estén controlados y desacoplados para saber quién lo cambia y quién se interesa\n\nHablar de _Unidirectional Data Flow_ sin presentar _Redux_ es poco menos que imposible. Y como tampoco es necesario liarse demasiado para sacarle partido vamos a verlo de manera práctica. Haciendo uso exclusivamente de la librería _RxJs_ y de las capacidades de _TypeScript_ vamos a crear un almacén (un _store_ en la jerga _Redux_) observable.\n\nDe nuevo creamos una librería independiente de Angular que podamos usar en cualquier _framework_ o incluso en _VanillaJS_. En esta librería pienso meter cosas estratégicas así que le pondré un nombre imponente: la llamaré `core-domain`\n\n```bash\n# Generate a core-domain library\nng g @nrwl/workspace:library core-domain --directory=\n```\n\nY en ella una clase [genérica de TypeScript](https://www.typescriptlang.org/docs/handbook/generics.html) que tiene todos los atributos para cumplir con el principios _Redux_. Primero una intro teórica, luego el código y más adelante su consumo.\n\n## 1.1 Principios de Redux\n\nTenemos tres principios básicos que cumplir:\n\n- **Single Source Of Truth**: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.\n- **Read Only State**: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.\n- **Changes By Pure Functions**: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.\n\n## 1.2 Elementos de Redux\n\nLos artificios fundamentales que incorporaremos a nuestro desarrollo van en dos niveles. El primer nivel resuelve los dos primeros principios.\n\n- **Store**: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.\n- **State**: Objeto que contiene la única copia válida de la información. Representa el valor del almacén en un momento determinado. Nunca expondremos un puntero a este dato privado.\n- **Setters** : Métodos que asignan y notifican un nuevo cambio. Clonan la información recibida para que el llamante no tenga un puntero al estado.\n- **Selectors** : Métodos para consulta del estado. Devuelven un observable al que suscribirse para obtener notificaciones de cambio o una instantánea. En cualquier caso siempre emitirá o devolverá un clon del estado.\n\nPara cumplir con el tercer principio se necesita algo más. Al menos acciones y reductores. A partir de aquí ya no conviene reinventar la rueda y es mejor usar soluciones estándar. En próximos artículos te mostraré como hacerlo con _NgRx_. usando _Actions_,  _Reducers_ y _Effects_. Por ahora nos quedamos con lo básico un estado privado con capacidad de notificar cambios.\n\n\n`libs\\core-domain\\src\\lib\\services\\store.ts`\n\n```typescript\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport class Store<T> {\n  private state$ = new BehaviorSubject<T>({ ...this.state });\n\n  constructor(private state: T) {}\n\n  public select(): T {\n    return { ...this.state };\n  }\n  public select$(): Observable<T> {\n    return this.state$.asObservable();\n  }\n\n  public set(newState: T): void {\n    this.state = { ...newState };\n    this.state$.next(this.select());\n  }\n}\n```\n\nEsta es la implementación más sencilla posible de un almacén observable para empezar a trabajar con _Redux_. Usamos un `BehaviorSubject` para notificar cambios, aunque sólo exponemos su interfaz `asObservable()` . Por lo demás lo único obligatorio es usar clones `{ ...this.state }` tanto al recibir como al devolver el valor del estado.\n\n# 2. Un servicio para mostrar u ocultar detalles\n\n> Como usuario quiero ver y ocultar detalles sobre las cookies para saber qué se hace y decidir si acepto.\n\nEmpezamos con una interfaz para los datos del propietario del sitio y otra para controlar si se muestran o no los detalles y después el servicio propiamente dicho. El servicio tienen instancia del almacén observable con el tipo concreto `PolicyDetails`. Será el lugar en el que guardaremos el estado y al que notificaremos los cambios. Para simplificarlo no uso por ahora ningún reductor y se asignará el nuevo valor sin más mediante el método set.\n\n```typescript\nexport interface PolicyHolder {\n  companyName: string;\n  companyUrl: string;\n  supportEmail: string;\n  noticeUrl?: string;\n}\n\nexport interface PolicyDetails {\n  showingDetails: boolean;\n  policyHolder: PolicyHolder;\n}\n\nexport const POLICY_HOLDER_CONFIG = new InjectionToken<string>('policy-holder-config');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PolicyService {\n  private policyAcceptationEntity: PolicyAcceptationEntity = new PolicyAcceptationEntity();\n  private policyDetailsStore: Store<PolicyDetails>;\n\n  constructor(@Inject(POLICY_HOLDER_CONFIG) public readonly policyHolderConfig: PolicyHolder) {\n    this.policyDetailsStore = new Store<PolicyDetails>({\n      showingDetails: false,\n      policyHolder: policyHolderConfig\n    });\n  }\n\n  public toggleMoreDetails() {\n    const currentState = this.policyDetailsStore.select();\n    currentState.showingDetails = !currentState.showingDetails;\n    this.policyDetailsStore.set(currentState);\n  }\n\n  public targetUrlToNavigateForDetails$(): Observable<string> {\n    return this.policyDetailsStore.select$().pipe(\n      filter(x => x.policyHolder.noticeUrl !== undefined),\n      map(x => (x.showingDetails ? x.policyHolder.noticeUrl : ''))\n    );\n  }\n```\n\nComo ves el servicio no expone directamente nada que tenga que ver con el `store`. Sus métodos público son exclusivamente de negocio. Asigna cambio y filtra y transforma las notificaciones para ser consumidas directamente.\n\n# 3. Ya solo quedan los detalles\n\nPermíteme el juego de palabras. Efectivamente queda mostrar u ocultar los detalles de la política de cookies. Con el pequeño detalle de hacerlo en el propio diálogo o en una url aparte. Y queda también el detalle de la  aceptación por parte del usuario; y claro, falta otro detalle más para tener un repositorio que lo almacene y recupere desde _local storage_. Me recuerda al chiste de cómo dibujar un caballo.\n\n![Cómo dibujar un caballo](/images/draw-horse.jpeg)\n\nAl menos si que quiero mostrarte cómo se consume el servicio desde el componente principal de la aplicación. Se suscribe a los cambios que le indican que debe navegar a otra url, pero no sabe qué los provocó.\n\n```typescript\nexport class AppComponent {\n  public title = 'spa';\n  public showPolicyDialog$: Observable<boolean>;\n\n  constructor(private router: Router, private policyService: PolicyService) {\n    this.showPolicyDialog$ = this.policyService.haveToShowAcceptationDialog$();\n    this.policyService\n      .targetUrlToNavigateForDetails$()\n      .subscribe({ next: this.navigateTo.bind(this) });\n  }\n  private navigateTo(targetUrl: string) {\n    this.router.navigate([targetUrl]);\n  }\n}\n```\nEstá completamente desacoplado del componente en el que el usuario indicó que quería ver más detalles. Sólo comparte la instancia `PolicyService` y se comunican mediante comandos y suscripción a cambios.\n\n```typescript\n@Component({\n  selector: 'ab-policy-mandatory-dialog',\n  template: `\n    <ab-policy-dialog\n      *ngIf=\"(policyDetails$ | async) as policyDetails\"\n      [policyDetails]=\"policyDetails\"\n      (toggleDetails)=\"onToggleDetails()\"\n    >\n    </ab-policy-dialog>\n  `\n})\nexport class MandatoryDialogComponent {\n  public policyDetails$: Observable<PolicyDetails> = this.policyService.policyDetails$();\n\n  constructor(private policyService: PolicyService) {}\n\n  public onToggleDetails(): void {\n    this.policyService.toggleMoreDetails();\n  }\n}\n```\n\n## Diagramas\n\nEn los siguientes diagramas se muestra a vista de pájaro las librerías y clases implicadas hasta el momento para no perderte mientras sigues todo el código necesario.\n\n![Dependencias entre proyectos](/images/13-projects-dependency.png)\n\n![Dependencias entre componentes y clases](/images/13-class-dependency.png)\n\n---\n\nTodos esos detalles con indicaciones paso a paso los tienes en la [documentación del Angular-Blueprint](https://angularbuilders.github.io/angular-blueprint/3-unidirectional) en GitHub y también se tratan en el [curso avanzado online](../https://academia-binaria.com/cursos/angular-business) que imparto con TrainingIT o a medida para tu empresa.\n\nLas tareas relativas a este tutorial resueltas en el [proyecto 2 - change-detection](https://github.com/angularbuilders/angular-blueprint/projects/2)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n\n---\n\n## Resumen\n\nLas aplicaciones reales no son sencillas. Este es un tutorial avanzado que te exige conocimiento previo y dedicación. A cambio espero que te resulte útil y que podáis incorporar las técnicas de detección del cambio y control de estado observable en vuestros proyectos.\n\nCon este tutorial continúas tu formación [avanzada en Angular](../tag/Avanzado/) para poder afrontar retos de tamaño industrial.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","source":"_posts/ng-13-Flujo reactivo unidireccional con Angular y RxJs.md","raw":"---\ntitle: Flujo reactivo unidireccional con Angular y RxJs\npermalink: flujo-reactivo-unidireccional-con-Angular-y-RxJs\ndate: 2019-08-05 11:46:34\ntags:\n- Angular\n- Angular8\n- RxJs\n- Tutorial\n- Avanzado\ncategories:\n- [Tutorial, Angular]\nthumbnail: /css/images/angular-13_unidirectional.png\n---\n\n![flujo-reactivo-unidireccional-con-Angular-y-RxJs](/images/tutorial-angular-13_unidirectional.png)\n\nContinuando con el **tutorial de Angular Avanzado** nos centramos ahora en una arquitectura de comunicación de datos conocida como _Unidirectional Data Flow_ o flujo de datos en un mismo sentido. Esta técnica es una mejora sobre el modelo básico de Angular, el _double-binding_, que facilitaba mucho el desarrollo en pequeños proyectos.\n\n> Cuando hablamos de mejora debemos ser honestos con los costes y beneficios: aquí vamos a mejorar la eficiencia en ejecución y a facilitar la depuración a costa de una mayor complejidad estructural y sintáctica. Merece la pena cuanto más grande sea el proyecto. Este es un ejemplo simplificado pero realista. Tómate tu tiempo para estudiarlo con calma.\n\nTomar las decisiones correctas en cuestiones de este calibre puede suponer la diferencia entre el éxito o fracaso de un proyecto. Voy a explicarte las razones para usar este patrón y la manera más sencilla de introducirlo en tus aplicaciones, dejándote en el umbral de soluciones aún más potentes como la gestión de estado centralizada con Redux.\n\n<!-- more -->\n\nPartiendo de la aplicación tal cómo quedó en [Detección del cambio en Angular](../deteccion-del-cambio-en-Angular/). Al finalizar dotaremos a la aplicación de un sistema de avisos sobre el uso de cookies en cumplimiento de la [política RGPD](https://es.wikipedia.org/wiki/Reglamento_General_de_Protecci%C3%B3n_de_Datos)\n\n> Código asociado a este tutorial en _GitHub_: [angular.builders/angular-blueprint/](https://github.com/angularbuilders/angular-blueprint)\n\n\n## Tabla de Contenido:\n\n[Ejemplo](./#Ejemplo)\n\n[1. Un almacén genérico observable.](./#1-Un-almacen-generico-observable)\n\n[2. Un servicio para mostrar u ocultar detalles.](./#2-Un-servicio-para-mostrar-u-ocultar-detalles)\n\n[3. Ya solo quedan los detalles.](./#3-Ya-solo-quedan-los-detalles)\n\n[Diagramas](./#Diagramas)\n\n[Resumen](./#Resumen)\n\n\n---\n## Ejemplo\n\n### Funcionalidad esperada:\n\n- Cuando un usuario visita la aplicación por primera vez debe avisarse del uso de cookies para cumplir con las políticas legales.\n\n- El aviso será mediante un diálogo flotante sobre la página.\n\n- El usuario puede ver más detalles o quedarse con la información reducida.\n\n- Según el tipo de aplicación, los detalles podrán verse en una página propia o en el mismo diálogo inicial.\n\n- El usuario podrá aceptar el uso de cookies.\n\n- Si lo hace, se almacenará la aceptación en el almacén local.\n\n- Habiendo aceptación no se mostrará más el diálogo.\n\n\n# 1. Un almacén genérico observable\n\n> Como desarrollador quiero que los cambios en el estado estén controlados y desacoplados para saber quién lo cambia y quién se interesa\n\nHablar de _Unidirectional Data Flow_ sin presentar _Redux_ es poco menos que imposible. Y como tampoco es necesario liarse demasiado para sacarle partido vamos a verlo de manera práctica. Haciendo uso exclusivamente de la librería _RxJs_ y de las capacidades de _TypeScript_ vamos a crear un almacén (un _store_ en la jerga _Redux_) observable.\n\nDe nuevo creamos una librería independiente de Angular que podamos usar en cualquier _framework_ o incluso en _VanillaJS_. En esta librería pienso meter cosas estratégicas así que le pondré un nombre imponente: la llamaré `core-domain`\n\n```bash\n# Generate a core-domain library\nng g @nrwl/workspace:library core-domain --directory=\n```\n\nY en ella una clase [genérica de TypeScript](https://www.typescriptlang.org/docs/handbook/generics.html) que tiene todos los atributos para cumplir con el principios _Redux_. Primero una intro teórica, luego el código y más adelante su consumo.\n\n## 1.1 Principios de Redux\n\nTenemos tres principios básicos que cumplir:\n\n- **Single Source Of Truth**: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.\n- **Read Only State**: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.\n- **Changes By Pure Functions**: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.\n\n## 1.2 Elementos de Redux\n\nLos artificios fundamentales que incorporaremos a nuestro desarrollo van en dos niveles. El primer nivel resuelve los dos primeros principios.\n\n- **Store**: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.\n- **State**: Objeto que contiene la única copia válida de la información. Representa el valor del almacén en un momento determinado. Nunca expondremos un puntero a este dato privado.\n- **Setters** : Métodos que asignan y notifican un nuevo cambio. Clonan la información recibida para que el llamante no tenga un puntero al estado.\n- **Selectors** : Métodos para consulta del estado. Devuelven un observable al que suscribirse para obtener notificaciones de cambio o una instantánea. En cualquier caso siempre emitirá o devolverá un clon del estado.\n\nPara cumplir con el tercer principio se necesita algo más. Al menos acciones y reductores. A partir de aquí ya no conviene reinventar la rueda y es mejor usar soluciones estándar. En próximos artículos te mostraré como hacerlo con _NgRx_. usando _Actions_,  _Reducers_ y _Effects_. Por ahora nos quedamos con lo básico un estado privado con capacidad de notificar cambios.\n\n\n`libs\\core-domain\\src\\lib\\services\\store.ts`\n\n```typescript\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport class Store<T> {\n  private state$ = new BehaviorSubject<T>({ ...this.state });\n\n  constructor(private state: T) {}\n\n  public select(): T {\n    return { ...this.state };\n  }\n  public select$(): Observable<T> {\n    return this.state$.asObservable();\n  }\n\n  public set(newState: T): void {\n    this.state = { ...newState };\n    this.state$.next(this.select());\n  }\n}\n```\n\nEsta es la implementación más sencilla posible de un almacén observable para empezar a trabajar con _Redux_. Usamos un `BehaviorSubject` para notificar cambios, aunque sólo exponemos su interfaz `asObservable()` . Por lo demás lo único obligatorio es usar clones `{ ...this.state }` tanto al recibir como al devolver el valor del estado.\n\n# 2. Un servicio para mostrar u ocultar detalles\n\n> Como usuario quiero ver y ocultar detalles sobre las cookies para saber qué se hace y decidir si acepto.\n\nEmpezamos con una interfaz para los datos del propietario del sitio y otra para controlar si se muestran o no los detalles y después el servicio propiamente dicho. El servicio tienen instancia del almacén observable con el tipo concreto `PolicyDetails`. Será el lugar en el que guardaremos el estado y al que notificaremos los cambios. Para simplificarlo no uso por ahora ningún reductor y se asignará el nuevo valor sin más mediante el método set.\n\n```typescript\nexport interface PolicyHolder {\n  companyName: string;\n  companyUrl: string;\n  supportEmail: string;\n  noticeUrl?: string;\n}\n\nexport interface PolicyDetails {\n  showingDetails: boolean;\n  policyHolder: PolicyHolder;\n}\n\nexport const POLICY_HOLDER_CONFIG = new InjectionToken<string>('policy-holder-config');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PolicyService {\n  private policyAcceptationEntity: PolicyAcceptationEntity = new PolicyAcceptationEntity();\n  private policyDetailsStore: Store<PolicyDetails>;\n\n  constructor(@Inject(POLICY_HOLDER_CONFIG) public readonly policyHolderConfig: PolicyHolder) {\n    this.policyDetailsStore = new Store<PolicyDetails>({\n      showingDetails: false,\n      policyHolder: policyHolderConfig\n    });\n  }\n\n  public toggleMoreDetails() {\n    const currentState = this.policyDetailsStore.select();\n    currentState.showingDetails = !currentState.showingDetails;\n    this.policyDetailsStore.set(currentState);\n  }\n\n  public targetUrlToNavigateForDetails$(): Observable<string> {\n    return this.policyDetailsStore.select$().pipe(\n      filter(x => x.policyHolder.noticeUrl !== undefined),\n      map(x => (x.showingDetails ? x.policyHolder.noticeUrl : ''))\n    );\n  }\n```\n\nComo ves el servicio no expone directamente nada que tenga que ver con el `store`. Sus métodos público son exclusivamente de negocio. Asigna cambio y filtra y transforma las notificaciones para ser consumidas directamente.\n\n# 3. Ya solo quedan los detalles\n\nPermíteme el juego de palabras. Efectivamente queda mostrar u ocultar los detalles de la política de cookies. Con el pequeño detalle de hacerlo en el propio diálogo o en una url aparte. Y queda también el detalle de la  aceptación por parte del usuario; y claro, falta otro detalle más para tener un repositorio que lo almacene y recupere desde _local storage_. Me recuerda al chiste de cómo dibujar un caballo.\n\n![Cómo dibujar un caballo](/images/draw-horse.jpeg)\n\nAl menos si que quiero mostrarte cómo se consume el servicio desde el componente principal de la aplicación. Se suscribe a los cambios que le indican que debe navegar a otra url, pero no sabe qué los provocó.\n\n```typescript\nexport class AppComponent {\n  public title = 'spa';\n  public showPolicyDialog$: Observable<boolean>;\n\n  constructor(private router: Router, private policyService: PolicyService) {\n    this.showPolicyDialog$ = this.policyService.haveToShowAcceptationDialog$();\n    this.policyService\n      .targetUrlToNavigateForDetails$()\n      .subscribe({ next: this.navigateTo.bind(this) });\n  }\n  private navigateTo(targetUrl: string) {\n    this.router.navigate([targetUrl]);\n  }\n}\n```\nEstá completamente desacoplado del componente en el que el usuario indicó que quería ver más detalles. Sólo comparte la instancia `PolicyService` y se comunican mediante comandos y suscripción a cambios.\n\n```typescript\n@Component({\n  selector: 'ab-policy-mandatory-dialog',\n  template: `\n    <ab-policy-dialog\n      *ngIf=\"(policyDetails$ | async) as policyDetails\"\n      [policyDetails]=\"policyDetails\"\n      (toggleDetails)=\"onToggleDetails()\"\n    >\n    </ab-policy-dialog>\n  `\n})\nexport class MandatoryDialogComponent {\n  public policyDetails$: Observable<PolicyDetails> = this.policyService.policyDetails$();\n\n  constructor(private policyService: PolicyService) {}\n\n  public onToggleDetails(): void {\n    this.policyService.toggleMoreDetails();\n  }\n}\n```\n\n## Diagramas\n\nEn los siguientes diagramas se muestra a vista de pájaro las librerías y clases implicadas hasta el momento para no perderte mientras sigues todo el código necesario.\n\n![Dependencias entre proyectos](/images/13-projects-dependency.png)\n\n![Dependencias entre componentes y clases](/images/13-class-dependency.png)\n\n---\n\nTodos esos detalles con indicaciones paso a paso los tienes en la [documentación del Angular-Blueprint](https://angularbuilders.github.io/angular-blueprint/3-unidirectional) en GitHub y también se tratan en el [curso avanzado online](../https://academia-binaria.com/cursos/angular-business) que imparto con TrainingIT o a medida para tu empresa.\n\nLas tareas relativas a este tutorial resueltas en el [proyecto 2 - change-detection](https://github.com/angularbuilders/angular-blueprint/projects/2)\n\n![Angular.Builders](/css/images/angular.builders.png)\n\nLa iniciativa [Angular.Builders](https://angular.builders) nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como [angular.blueprint](https://angularbuilders.github.io/angular-blueprint/).\n\nPara más información sobre servicios de consultoría [ponte en contacto conmigo](https://www.linkedin.com/in/albertobasalo/).\n\n---\n\n## Resumen\n\nLas aplicaciones reales no son sencillas. Este es un tutorial avanzado que te exige conocimiento previo y dedicación. A cambio espero que te resulte útil y que podáis incorporar las técnicas de detección del cambio y control de estado observable en vuestros proyectos.\n\nCon este tutorial continúas tu formación [avanzada en Angular](../tag/Avanzado/) para poder afrontar retos de tamaño industrial.\n\n> Aprender, programar, disfrutar, repetir.\n> -- <cite>Saludos, Alberto Basalo</cite>\n","slug":"flujo-reactivo-unidireccional-con-Angular-y-RxJs","published":1,"updated":"2019-08-05T09:40:10.854Z","_id":"cjyua4cdj0000aws3km7fcgt5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/tutorial-angular-13_unidirectional.png\" alt=\"flujo-reactivo-unidireccional-con-Angular-y-RxJs\"></p><p>Continuando con el <strong>tutorial de Angular Avanzado</strong> nos centramos ahora en una arquitectura de comunicación de datos conocida como <em>Unidirectional Data Flow</em> o flujo de datos en un mismo sentido. Esta técnica es una mejora sobre el modelo básico de Angular, el <em>double-binding</em>, que facilitaba mucho el desarrollo en pequeños proyectos.</p><blockquote><p>Cuando hablamos de mejora debemos ser honestos con los costes y beneficios: aquí vamos a mejorar la eficiencia en ejecución y a facilitar la depuración a costa de una mayor complejidad estructural y sintáctica. Merece la pena cuanto más grande sea el proyecto. Este es un ejemplo simplificado pero realista. Tómate tu tiempo para estudiarlo con calma.</p></blockquote><p>Tomar las decisiones correctas en cuestiones de este calibre puede suponer la diferencia entre el éxito o fracaso de un proyecto. Voy a explicarte las razones para usar este patrón y la manera más sencilla de introducirlo en tus aplicaciones, dejándote en el umbral de soluciones aún más potentes como la gestión de estado centralizada con Redux.</p><a id=\"more\"></a><p>Partiendo de la aplicación tal cómo quedó en <a href=\"../deteccion-del-cambio-en-Angular/\">Detección del cambio en Angular</a>. Al finalizar dotaremos a la aplicación de un sistema de avisos sobre el uso de cookies en cumplimiento de la <a href=\"https://es.wikipedia.org/wiki/Reglamento_General_de_Protecci%C3%B3n_de_Datos\" target=\"_blank\" rel=\"noopener\">política RGPD</a></p><blockquote><p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/angularbuilders/angular-blueprint\" target=\"_blank\" rel=\"noopener\">angular.builders/angular-blueprint/</a></p></blockquote><h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#Ejemplo\">Ejemplo</a></p><p><a href=\"./#1-Un-almacen-generico-observable\">1. Un almacén genérico observable.</a></p><p><a href=\"./#2-Un-servicio-para-mostrar-u-ocultar-detalles\">2. Un servicio para mostrar u ocultar detalles.</a></p><p><a href=\"./#3-Ya-solo-quedan-los-detalles\">3. Ya solo quedan los detalles.</a></p><p><a href=\"./#Diagramas\">Diagramas</a></p><p><a href=\"./#Resumen\">Resumen</a></p><hr><h2 id=\"Ejemplo\"><a href=\"#Ejemplo\" class=\"headerlink\" title=\"Ejemplo\"></a>Ejemplo</h2><h3 id=\"Funcionalidad-esperada\"><a href=\"#Funcionalidad-esperada\" class=\"headerlink\" title=\"Funcionalidad esperada:\"></a>Funcionalidad esperada:</h3><ul><li><p>Cuando un usuario visita la aplicación por primera vez debe avisarse del uso de cookies para cumplir con las políticas legales.</p></li><li><p>El aviso será mediante un diálogo flotante sobre la página.</p></li><li><p>El usuario puede ver más detalles o quedarse con la información reducida.</p></li><li><p>Según el tipo de aplicación, los detalles podrán verse en una página propia o en el mismo diálogo inicial.</p></li><li><p>El usuario podrá aceptar el uso de cookies.</p></li><li><p>Si lo hace, se almacenará la aceptación en el almacén local.</p></li><li><p>Habiendo aceptación no se mostrará más el diálogo.</p></li></ul><h1 id=\"1-Un-almacen-generico-observable\"><a href=\"#1-Un-almacen-generico-observable\" class=\"headerlink\" title=\"1. Un almacén genérico observable\"></a>1. Un almacén genérico observable</h1><blockquote><p>Como desarrollador quiero que los cambios en el estado estén controlados y desacoplados para saber quién lo cambia y quién se interesa</p></blockquote><p>Hablar de <em>Unidirectional Data Flow</em> sin presentar <em>Redux</em> es poco menos que imposible. Y como tampoco es necesario liarse demasiado para sacarle partido vamos a verlo de manera práctica. Haciendo uso exclusivamente de la librería <em>RxJs</em> y de las capacidades de <em>TypeScript</em> vamos a crear un almacén (un <em>store</em> en la jerga <em>Redux</em>) observable.</p><p>De nuevo creamos una librería independiente de Angular que podamos usar en cualquier <em>framework</em> o incluso en <em>VanillaJS</em>. En esta librería pienso meter cosas estratégicas así que le pondré un nombre imponente: la llamaré <code>core-domain</code></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a core-domain library</span></span><br><span class=\"line\">ng g @nrwl/workspace:library core-domain --directory=</span><br></pre></td></tr></table></figure><p>Y en ella una clase <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"noopener\">genérica de TypeScript</a> que tiene todos los atributos para cumplir con el principios <em>Redux</em>. Primero una intro teórica, luego el código y más adelante su consumo.</p><h2 id=\"1-1-Principios-de-Redux\"><a href=\"#1-1-Principios-de-Redux\" class=\"headerlink\" title=\"1.1 Principios de Redux\"></a>1.1 Principios de Redux</h2><p>Tenemos tres principios básicos que cumplir:</p><ul><li><strong>Single Source Of Truth</strong>: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.</li><li><strong>Read Only State</strong>: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.</li><li><strong>Changes By Pure Functions</strong>: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.</li></ul><h2 id=\"1-2-Elementos-de-Redux\"><a href=\"#1-2-Elementos-de-Redux\" class=\"headerlink\" title=\"1.2 Elementos de Redux\"></a>1.2 Elementos de Redux</h2><p>Los artificios fundamentales que incorporaremos a nuestro desarrollo van en dos niveles. El primer nivel resuelve los dos primeros principios.</p><ul><li><strong>Store</strong>: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.</li><li><strong>State</strong>: Objeto que contiene la única copia válida de la información. Representa el valor del almacén en un momento determinado. Nunca expondremos un puntero a este dato privado.</li><li><strong>Setters</strong> : Métodos que asignan y notifican un nuevo cambio. Clonan la información recibida para que el llamante no tenga un puntero al estado.</li><li><strong>Selectors</strong> : Métodos para consulta del estado. Devuelven un observable al que suscribirse para obtener notificaciones de cambio o una instantánea. En cualquier caso siempre emitirá o devolverá un clon del estado.</li></ul><p>Para cumplir con el tercer principio se necesita algo más. Al menos acciones y reductores. A partir de aquí ya no conviene reinventar la rueda y es mejor usar soluciones estándar. En próximos artículos te mostraré como hacerlo con <em>NgRx</em>. usando <em>Actions</em>, <em>Reducers</em> y <em>Effects</em>. Por ahora nos quedamos con lo básico un estado privado con capacidad de notificar cambios.</p><p><code>libs\\core-domain\\src\\lib\\services\\store.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BehaviorSubject, Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Store&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> state$ = <span class=\"keyword\">new</span> BehaviorSubject&lt;T&gt;(&#123; ...this.state &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> state: T</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> select(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; ...this.state &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> select$(): Observable&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.state$.asObservable();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span>(newState: T): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; ...newState &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state$.next(<span class=\"keyword\">this</span>.select());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Esta es la implementación más sencilla posible de un almacén observable para empezar a trabajar con <em>Redux</em>. Usamos un <code>BehaviorSubject</code> para notificar cambios, aunque sólo exponemos su interfaz <code>asObservable()</code> . Por lo demás lo único obligatorio es usar clones <code>{ ...this.state }</code> tanto al recibir como al devolver el valor del estado.</p><h1 id=\"2-Un-servicio-para-mostrar-u-ocultar-detalles\"><a href=\"#2-Un-servicio-para-mostrar-u-ocultar-detalles\" class=\"headerlink\" title=\"2. Un servicio para mostrar u ocultar detalles\"></a>2. Un servicio para mostrar u ocultar detalles</h1><blockquote><p>Como usuario quiero ver y ocultar detalles sobre las cookies para saber qué se hace y decidir si acepto.</p></blockquote><p>Empezamos con una interfaz para los datos del propietario del sitio y otra para controlar si se muestran o no los detalles y después el servicio propiamente dicho. El servicio tienen instancia del almacén observable con el tipo concreto <code>PolicyDetails</code>. Será el lugar en el que guardaremos el estado y al que notificaremos los cambios. Para simplificarlo no uso por ahora ningún reductor y se asignará el nuevo valor sin más mediante el método set.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> PolicyHolder &#123;</span><br><span class=\"line\">  companyName: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  companyUrl: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  supportEmail: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  noticeUrl?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> PolicyDetails &#123;</span><br><span class=\"line\">  showingDetails: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  policyHolder: PolicyHolder;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> POLICY_HOLDER_CONFIG = <span class=\"keyword\">new</span> InjectionToken&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">'policy-holder-config'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PolicyService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> policyAcceptationEntity: PolicyAcceptationEntity = <span class=\"keyword\">new</span> PolicyAcceptationEntity();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> policyDetailsStore: Store&lt;PolicyDetails&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(@Inject(POLICY_HOLDER_CONFIG) public readonly policyHolderConfig: PolicyHolder) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.policyDetailsStore = <span class=\"keyword\">new</span> Store&lt;PolicyDetails&gt;(&#123;</span><br><span class=\"line\">      showingDetails: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      policyHolder: policyHolderConfig</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> toggleMoreDetails() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentState = <span class=\"keyword\">this</span>.policyDetailsStore.select();</span><br><span class=\"line\">    currentState.showingDetails = !currentState.showingDetails;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.policyDetailsStore.set(currentState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> targetUrlToNavigateForDetails$(): Observable&lt;<span class=\"built_in\">string</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.policyDetailsStore.select$().pipe(</span><br><span class=\"line\">      filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.policyHolder.noticeUrl !== <span class=\"literal\">undefined</span>),</span><br><span class=\"line\">      map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> (x.showingDetails ? x.policyHolder.noticeUrl : <span class=\"string\">''</span>))</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p>Como ves el servicio no expone directamente nada que tenga que ver con el <code>store</code>. Sus métodos público son exclusivamente de negocio. Asigna cambio y filtra y transforma las notificaciones para ser consumidas directamente.</p><h1 id=\"3-Ya-solo-quedan-los-detalles\"><a href=\"#3-Ya-solo-quedan-los-detalles\" class=\"headerlink\" title=\"3. Ya solo quedan los detalles\"></a>3. Ya solo quedan los detalles</h1><p>Permíteme el juego de palabras. Efectivamente queda mostrar u ocultar los detalles de la política de cookies. Con el pequeño detalle de hacerlo en el propio diálogo o en una url aparte. Y queda también el detalle de la aceptación por parte del usuario; y claro, falta otro detalle más para tener un repositorio que lo almacene y recupere desde <em>local storage</em>. Me recuerda al chiste de cómo dibujar un caballo.</p><p><img src=\"/images/draw-horse.jpeg\" alt=\"Cómo dibujar un caballo\"></p><p>Al menos si que quiero mostrarte cómo se consume el servicio desde el componente principal de la aplicación. Se suscribe a los cambios que le indican que debe navegar a otra url, pero no sabe qué los provocó.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> title = <span class=\"string\">'spa'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> showPolicyDialog$: Observable&lt;<span class=\"built_in\">boolean</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router, <span class=\"keyword\">private</span> policyService: PolicyService</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showPolicyDialog$ = <span class=\"keyword\">this</span>.policyService.haveToShowAcceptationDialog$();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.policyService</span><br><span class=\"line\">      .targetUrlToNavigateForDetails$()</span><br><span class=\"line\">      .subscribe(&#123; next: <span class=\"keyword\">this</span>.navigateTo.bind(<span class=\"keyword\">this</span>) &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> navigateTo(targetUrl: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.router.navigate([targetUrl]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Está completamente desacoplado del componente en el que el usuario indicó que quería ver más detalles. Sólo comparte la instancia <code>PolicyService</code> y se comunican mediante comandos y suscripción a cambios.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-policy-mandatory-dialog'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ab-policy-dialog</span></span><br><span class=\"line\"><span class=\"string\">      *ngIf=\"(policyDetails$ | async) as policyDetails\"</span></span><br><span class=\"line\"><span class=\"string\">      [policyDetails]=\"policyDetails\"</span></span><br><span class=\"line\"><span class=\"string\">      (toggleDetails)=\"onToggleDetails()\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ab-policy-dialog&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MandatoryDialogComponent &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> policyDetails$: Observable&lt;PolicyDetails&gt; = <span class=\"keyword\">this</span>.policyService.policyDetails$();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> policyService: PolicyService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> onToggleDetails(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.policyService.toggleMoreDetails();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"Diagramas\"><a href=\"#Diagramas\" class=\"headerlink\" title=\"Diagramas\"></a>Diagramas</h2><p>En los siguientes diagramas se muestra a vista de pájaro las librerías y clases implicadas hasta el momento para no perderte mientras sigues todo el código necesario.</p><p><img src=\"/images/13-projects-dependency.png\" alt=\"Dependencias entre proyectos\"></p><p><img src=\"/images/13-class-dependency.png\" alt=\"Dependencias entre componentes y clases\"></p><hr><p>Todos esos detalles con indicaciones paso a paso los tienes en la <a href=\"https://angularbuilders.github.io/angular-blueprint/3-unidirectional\" target=\"_blank\" rel=\"noopener\">documentación del Angular-Blueprint</a> en GitHub y también se tratan en el <a href=\"../https://academia-binaria.com/cursos/angular-business\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p><p>Las tareas relativas a este tutorial resueltas en el <a href=\"https://github.com/angularbuilders/angular-blueprint/projects/2\" target=\"_blank\" rel=\"noopener\">proyecto 2 - change-detection</a></p><p><img src=\"/css/images/angular.builders.png\" alt=\"Angular.Builders\"></p><p>La iniciativa <a href=\"https://angular.builders\" target=\"_blank\" rel=\"noopener\">Angular.Builders</a> nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como <a href=\"https://angularbuilders.github.io/angular-blueprint/\" target=\"_blank\" rel=\"noopener\">angular.blueprint</a>.</p><p>Para más información sobre servicios de consultoría <a href=\"https://www.linkedin.com/in/albertobasalo/\" target=\"_blank\" rel=\"noopener\">ponte en contacto conmigo</a>.</p><hr><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>Las aplicaciones reales no son sencillas. Este es un tutorial avanzado que te exige conocimiento previo y dedicación. A cambio espero que te resulte útil y que podáis incorporar las técnicas de detección del cambio y control de estado observable en vuestros proyectos.</p><p>Con este tutorial continúas tu formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> para poder afrontar retos de tamaño industrial.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>","site":{"data":{}},"excerpt":"<p><img src=\"/images/tutorial-angular-13_unidirectional.png\" alt=\"flujo-reactivo-unidireccional-con-Angular-y-RxJs\"></p><p>Continuando con el <strong>tutorial de Angular Avanzado</strong> nos centramos ahora en una arquitectura de comunicación de datos conocida como <em>Unidirectional Data Flow</em> o flujo de datos en un mismo sentido. Esta técnica es una mejora sobre el modelo básico de Angular, el <em>double-binding</em>, que facilitaba mucho el desarrollo en pequeños proyectos.</p><blockquote><p>Cuando hablamos de mejora debemos ser honestos con los costes y beneficios: aquí vamos a mejorar la eficiencia en ejecución y a facilitar la depuración a costa de una mayor complejidad estructural y sintáctica. Merece la pena cuanto más grande sea el proyecto. Este es un ejemplo simplificado pero realista. Tómate tu tiempo para estudiarlo con calma.</p></blockquote><p>Tomar las decisiones correctas en cuestiones de este calibre puede suponer la diferencia entre el éxito o fracaso de un proyecto. Voy a explicarte las razones para usar este patrón y la manera más sencilla de introducirlo en tus aplicaciones, dejándote en el umbral de soluciones aún más potentes como la gestión de estado centralizada con Redux.</p>","more":"<p>Partiendo de la aplicación tal cómo quedó en <a href=\"../deteccion-del-cambio-en-Angular/\">Detección del cambio en Angular</a>. Al finalizar dotaremos a la aplicación de un sistema de avisos sobre el uso de cookies en cumplimiento de la <a href=\"https://es.wikipedia.org/wiki/Reglamento_General_de_Protecci%C3%B3n_de_Datos\" target=\"_blank\" rel=\"noopener\">política RGPD</a></p><blockquote><p>Código asociado a este tutorial en <em>GitHub</em>: <a href=\"https://github.com/angularbuilders/angular-blueprint\" target=\"_blank\" rel=\"noopener\">angular.builders/angular-blueprint/</a></p></blockquote><h2 id=\"Tabla-de-Contenido\"><a href=\"#Tabla-de-Contenido\" class=\"headerlink\" title=\"Tabla de Contenido:\"></a>Tabla de Contenido:</h2><p><a href=\"./#Ejemplo\">Ejemplo</a></p><p><a href=\"./#1-Un-almacen-generico-observable\">1. Un almacén genérico observable.</a></p><p><a href=\"./#2-Un-servicio-para-mostrar-u-ocultar-detalles\">2. Un servicio para mostrar u ocultar detalles.</a></p><p><a href=\"./#3-Ya-solo-quedan-los-detalles\">3. Ya solo quedan los detalles.</a></p><p><a href=\"./#Diagramas\">Diagramas</a></p><p><a href=\"./#Resumen\">Resumen</a></p><hr><h2 id=\"Ejemplo\"><a href=\"#Ejemplo\" class=\"headerlink\" title=\"Ejemplo\"></a>Ejemplo</h2><h3 id=\"Funcionalidad-esperada\"><a href=\"#Funcionalidad-esperada\" class=\"headerlink\" title=\"Funcionalidad esperada:\"></a>Funcionalidad esperada:</h3><ul><li><p>Cuando un usuario visita la aplicación por primera vez debe avisarse del uso de cookies para cumplir con las políticas legales.</p></li><li><p>El aviso será mediante un diálogo flotante sobre la página.</p></li><li><p>El usuario puede ver más detalles o quedarse con la información reducida.</p></li><li><p>Según el tipo de aplicación, los detalles podrán verse en una página propia o en el mismo diálogo inicial.</p></li><li><p>El usuario podrá aceptar el uso de cookies.</p></li><li><p>Si lo hace, se almacenará la aceptación en el almacén local.</p></li><li><p>Habiendo aceptación no se mostrará más el diálogo.</p></li></ul><h1 id=\"1-Un-almacen-generico-observable\"><a href=\"#1-Un-almacen-generico-observable\" class=\"headerlink\" title=\"1. Un almacén genérico observable\"></a>1. Un almacén genérico observable</h1><blockquote><p>Como desarrollador quiero que los cambios en el estado estén controlados y desacoplados para saber quién lo cambia y quién se interesa</p></blockquote><p>Hablar de <em>Unidirectional Data Flow</em> sin presentar <em>Redux</em> es poco menos que imposible. Y como tampoco es necesario liarse demasiado para sacarle partido vamos a verlo de manera práctica. Haciendo uso exclusivamente de la librería <em>RxJs</em> y de las capacidades de <em>TypeScript</em> vamos a crear un almacén (un <em>store</em> en la jerga <em>Redux</em>) observable.</p><p>De nuevo creamos una librería independiente de Angular que podamos usar en cualquier <em>framework</em> o incluso en <em>VanillaJS</em>. En esta librería pienso meter cosas estratégicas así que le pondré un nombre imponente: la llamaré <code>core-domain</code></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate a core-domain library</span></span><br><span class=\"line\">ng g @nrwl/workspace:library core-domain --directory=</span><br></pre></td></tr></table></figure><p>Y en ella una clase <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"noopener\">genérica de TypeScript</a> que tiene todos los atributos para cumplir con el principios <em>Redux</em>. Primero una intro teórica, luego el código y más adelante su consumo.</p><h2 id=\"1-1-Principios-de-Redux\"><a href=\"#1-1-Principios-de-Redux\" class=\"headerlink\" title=\"1.1 Principios de Redux\"></a>1.1 Principios de Redux</h2><p>Tenemos tres principios básicos que cumplir:</p><ul><li><strong>Single Source Of Truth</strong>: Cada pieza de información se almacena en un único lugar, independientemente de dónde sea creada, modificada o requerida.</li><li><strong>Read Only State</strong>: La información será de sólo lectura y sólo podrá modificarse a través de conductos oficiales.</li><li><strong>Changes By Pure Functions</strong>: Los cambios tienen que poder ser replicados, cancelados y auditados; lo mejor, usar una función pura.</li></ul><h2 id=\"1-2-Elementos-de-Redux\"><a href=\"#1-2-Elementos-de-Redux\" class=\"headerlink\" title=\"1.2 Elementos de Redux\"></a>1.2 Elementos de Redux</h2><p>Los artificios fundamentales que incorporaremos a nuestro desarrollo van en dos niveles. El primer nivel resuelve los dos primeros principios.</p><ul><li><strong>Store</strong>: El sistema que mantiene el estado. Despacha acciones de mutado sobre el mismo y comunica cambios enviando copias de sólo lectura a los subscriptores.</li><li><strong>State</strong>: Objeto que contiene la única copia válida de la información. Representa el valor del almacén en un momento determinado. Nunca expondremos un puntero a este dato privado.</li><li><strong>Setters</strong> : Métodos que asignan y notifican un nuevo cambio. Clonan la información recibida para que el llamante no tenga un puntero al estado.</li><li><strong>Selectors</strong> : Métodos para consulta del estado. Devuelven un observable al que suscribirse para obtener notificaciones de cambio o una instantánea. En cualquier caso siempre emitirá o devolverá un clon del estado.</li></ul><p>Para cumplir con el tercer principio se necesita algo más. Al menos acciones y reductores. A partir de aquí ya no conviene reinventar la rueda y es mejor usar soluciones estándar. En próximos artículos te mostraré como hacerlo con <em>NgRx</em>. usando <em>Actions</em>, <em>Reducers</em> y <em>Effects</em>. Por ahora nos quedamos con lo básico un estado privado con capacidad de notificar cambios.</p><p><code>libs\\core-domain\\src\\lib\\services\\store.ts</code></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BehaviorSubject, Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Store&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> state$ = <span class=\"keyword\">new</span> BehaviorSubject&lt;T&gt;(&#123; ...this.state &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> state: T</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> select(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; ...this.state &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> select$(): Observable&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.state$.asObservable();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">set</span>(newState: T): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; ...newState &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state$.next(<span class=\"keyword\">this</span>.select());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Esta es la implementación más sencilla posible de un almacén observable para empezar a trabajar con <em>Redux</em>. Usamos un <code>BehaviorSubject</code> para notificar cambios, aunque sólo exponemos su interfaz <code>asObservable()</code> . Por lo demás lo único obligatorio es usar clones <code>{ ...this.state }</code> tanto al recibir como al devolver el valor del estado.</p><h1 id=\"2-Un-servicio-para-mostrar-u-ocultar-detalles\"><a href=\"#2-Un-servicio-para-mostrar-u-ocultar-detalles\" class=\"headerlink\" title=\"2. Un servicio para mostrar u ocultar detalles\"></a>2. Un servicio para mostrar u ocultar detalles</h1><blockquote><p>Como usuario quiero ver y ocultar detalles sobre las cookies para saber qué se hace y decidir si acepto.</p></blockquote><p>Empezamos con una interfaz para los datos del propietario del sitio y otra para controlar si se muestran o no los detalles y después el servicio propiamente dicho. El servicio tienen instancia del almacén observable con el tipo concreto <code>PolicyDetails</code>. Será el lugar en el que guardaremos el estado y al que notificaremos los cambios. Para simplificarlo no uso por ahora ningún reductor y se asignará el nuevo valor sin más mediante el método set.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> PolicyHolder &#123;</span><br><span class=\"line\">  companyName: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  companyUrl: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  supportEmail: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  noticeUrl?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> PolicyDetails &#123;</span><br><span class=\"line\">  showingDetails: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  policyHolder: PolicyHolder;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> POLICY_HOLDER_CONFIG = <span class=\"keyword\">new</span> InjectionToken&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">'policy-holder-config'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> PolicyService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> policyAcceptationEntity: PolicyAcceptationEntity = <span class=\"keyword\">new</span> PolicyAcceptationEntity();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> policyDetailsStore: Store&lt;PolicyDetails&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(@Inject(POLICY_HOLDER_CONFIG) public readonly policyHolderConfig: PolicyHolder) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.policyDetailsStore = <span class=\"keyword\">new</span> Store&lt;PolicyDetails&gt;(&#123;</span><br><span class=\"line\">      showingDetails: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      policyHolder: policyHolderConfig</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> toggleMoreDetails() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentState = <span class=\"keyword\">this</span>.policyDetailsStore.select();</span><br><span class=\"line\">    currentState.showingDetails = !currentState.showingDetails;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.policyDetailsStore.set(currentState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> targetUrlToNavigateForDetails$(): Observable&lt;<span class=\"built_in\">string</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.policyDetailsStore.select$().pipe(</span><br><span class=\"line\">      filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.policyHolder.noticeUrl !== <span class=\"literal\">undefined</span>),</span><br><span class=\"line\">      map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> (x.showingDetails ? x.policyHolder.noticeUrl : <span class=\"string\">''</span>))</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p>Como ves el servicio no expone directamente nada que tenga que ver con el <code>store</code>. Sus métodos público son exclusivamente de negocio. Asigna cambio y filtra y transforma las notificaciones para ser consumidas directamente.</p><h1 id=\"3-Ya-solo-quedan-los-detalles\"><a href=\"#3-Ya-solo-quedan-los-detalles\" class=\"headerlink\" title=\"3. Ya solo quedan los detalles\"></a>3. Ya solo quedan los detalles</h1><p>Permíteme el juego de palabras. Efectivamente queda mostrar u ocultar los detalles de la política de cookies. Con el pequeño detalle de hacerlo en el propio diálogo o en una url aparte. Y queda también el detalle de la aceptación por parte del usuario; y claro, falta otro detalle más para tener un repositorio que lo almacene y recupere desde <em>local storage</em>. Me recuerda al chiste de cómo dibujar un caballo.</p><p><img src=\"/images/draw-horse.jpeg\" alt=\"Cómo dibujar un caballo\"></p><p>Al menos si que quiero mostrarte cómo se consume el servicio desde el componente principal de la aplicación. Se suscribe a los cambios que le indican que debe navegar a otra url, pero no sabe qué los provocó.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> title = <span class=\"string\">'spa'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> showPolicyDialog$: Observable&lt;<span class=\"built_in\">boolean</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router: Router, <span class=\"keyword\">private</span> policyService: PolicyService</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showPolicyDialog$ = <span class=\"keyword\">this</span>.policyService.haveToShowAcceptationDialog$();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.policyService</span><br><span class=\"line\">      .targetUrlToNavigateForDetails$()</span><br><span class=\"line\">      .subscribe(&#123; next: <span class=\"keyword\">this</span>.navigateTo.bind(<span class=\"keyword\">this</span>) &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> navigateTo(targetUrl: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.router.navigate([targetUrl]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Está completamente desacoplado del componente en el que el usuario indicó que quería ver más detalles. Sólo comparte la instancia <code>PolicyService</code> y se comunican mediante comandos y suscripción a cambios.</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'ab-policy-mandatory-dialog'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ab-policy-dialog</span></span><br><span class=\"line\"><span class=\"string\">      *ngIf=\"(policyDetails$ | async) as policyDetails\"</span></span><br><span class=\"line\"><span class=\"string\">      [policyDetails]=\"policyDetails\"</span></span><br><span class=\"line\"><span class=\"string\">      (toggleDetails)=\"onToggleDetails()\"</span></span><br><span class=\"line\"><span class=\"string\">    &gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ab-policy-dialog&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> MandatoryDialogComponent &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> policyDetails$: Observable&lt;PolicyDetails&gt; = <span class=\"keyword\">this</span>.policyService.policyDetails$();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> policyService: PolicyService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> onToggleDetails(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.policyService.toggleMoreDetails();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"Diagramas\"><a href=\"#Diagramas\" class=\"headerlink\" title=\"Diagramas\"></a>Diagramas</h2><p>En los siguientes diagramas se muestra a vista de pájaro las librerías y clases implicadas hasta el momento para no perderte mientras sigues todo el código necesario.</p><p><img src=\"/images/13-projects-dependency.png\" alt=\"Dependencias entre proyectos\"></p><p><img src=\"/images/13-class-dependency.png\" alt=\"Dependencias entre componentes y clases\"></p><hr><p>Todos esos detalles con indicaciones paso a paso los tienes en la <a href=\"https://angularbuilders.github.io/angular-blueprint/3-unidirectional\" target=\"_blank\" rel=\"noopener\">documentación del Angular-Blueprint</a> en GitHub y también se tratan en el <a href=\"../https://academia-binaria.com/cursos/angular-business\">curso avanzado online</a> que imparto con TrainingIT o a medida para tu empresa.</p><p>Las tareas relativas a este tutorial resueltas en el <a href=\"https://github.com/angularbuilders/angular-blueprint/projects/2\" target=\"_blank\" rel=\"noopener\">proyecto 2 - change-detection</a></p><p><img src=\"/css/images/angular.builders.png\" alt=\"Angular.Builders\"></p><p>La iniciativa <a href=\"https://angular.builders\" target=\"_blank\" rel=\"noopener\">Angular.Builders</a> nace para ayudar a desarrolladores y arquitectos de software como tú. Ofrecemos formación y productos de ayuda y ejemplo como <a href=\"https://angularbuilders.github.io/angular-blueprint/\" target=\"_blank\" rel=\"noopener\">angular.blueprint</a>.</p><p>Para más información sobre servicios de consultoría <a href=\"https://www.linkedin.com/in/albertobasalo/\" target=\"_blank\" rel=\"noopener\">ponte en contacto conmigo</a>.</p><hr><h2 id=\"Resumen\"><a href=\"#Resumen\" class=\"headerlink\" title=\"Resumen\"></a>Resumen</h2><p>Las aplicaciones reales no son sencillas. Este es un tutorial avanzado que te exige conocimiento previo y dedicación. A cambio espero que te resulte útil y que podáis incorporar las técnicas de detección del cambio y control de estado observable en vuestros proyectos.</p><p>Con este tutorial continúas tu formación <a href=\"../tag/Avanzado/\">avanzada en Angular</a> para poder afrontar retos de tamaño industrial.</p><blockquote><p>Aprender, programar, disfrutar, repetir.<br>– <cite>Saludos, Alberto Basalo</cite></p></blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjyh5p4ai000418s3vs2z8684","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4go008218s3hcadgyis"},{"post_id":"cjyh5p4ai000418s3vs2z8684","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4go008318s3tgp1sqqn"},{"post_id":"cjyh5p4at000c18s305ljr23t","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4go008418s3407rle2g"},{"post_id":"cjyh5p4at000c18s305ljr23t","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gp008518s32svo9brm"},{"post_id":"cjyh5p4ax000f18s3scjvy482","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gp008618s3y6q2fmos"},{"post_id":"cjyh5p4ax000f18s3scjvy482","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gp008718s3cn3c4o4i"},{"post_id":"cjyh5p4ay000g18s30vjgu4b3","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gp008818s3cf5clfjn"},{"post_id":"cjyh5p4ay000g18s30vjgu4b3","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gp008918s3mwbjoiwl"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gq008a18s3tyvia4vn"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gq008b18s3l5wb5gu5"},{"post_id":"cjyh5p4b1000i18s3espxcwpc","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gq008c18s32ph7alvm"},{"post_id":"cjyh5p4b1000i18s3espxcwpc","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gq008d18s36y3fgcip"},{"post_id":"cjyh5p4b3000j18s3u6kblugv","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gq008e18s34khh3zyw"},{"post_id":"cjyh5p4b3000j18s3u6kblugv","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gr008f18s31rwu5p0n"},{"post_id":"cjyh5p4b3000k18s3oxjwenyf","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gr008g18s3cfqrdx67"},{"post_id":"cjyh5p4b3000k18s3oxjwenyf","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gr008h18s39l3qsxc7"},{"post_id":"cjyh5p4b6000m18s3ou4s1z2u","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gr008k18s3yr4d8e4d"},{"post_id":"cjyh5p4b6000m18s3ou4s1z2u","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gs008l18s30nuu0zua"},{"post_id":"cjyh5p4b6000n18s3vr3upkj1","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gs008m18s3x0hpjx9p"},{"post_id":"cjyh5p4b6000n18s3vr3upkj1","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gs008n18s33yitozr6"},{"post_id":"cjyh5p4b7000o18s352qtbsga","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gs008o18s36dgnfl5b"},{"post_id":"cjyh5p4b7000o18s352qtbsga","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gs008p18s3utptcq11"},{"post_id":"cjyh5p4b8000p18s3xo2ndk2y","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gs008q18s3c8jtsomg"},{"post_id":"cjyh5p4b8000p18s3xo2ndk2y","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gt008r18s3x2owe4o9"},{"post_id":"cjyh5p4b9000q18s3yfbb52wp","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gt008s18s31r38nl7x"},{"post_id":"cjyh5p4b9000q18s3yfbb52wp","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gt008t18s3ccb6i0n1"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyh5p4gt008u18s3qy493l89"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyh5p4gt008v18s3l82ghk0q"},{"post_id":"cjysd9lwv000goos3du96ec3d","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjysd9lwz000ioos3s4pdcnnt"},{"post_id":"cjysd9lwv000goos3du96ec3d","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjysd9lwz000koos3gq7ivemc"},{"post_id":"cjysudc0o0000ics38fzt3skh","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjysudc1x0002ics3exyji4wn"},{"post_id":"cjysudc0o0000ics38fzt3skh","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjysudc1y0004ics3h4ylubz5"},{"post_id":"cjyua4cdj0000aws3km7fcgt5","category_id":"cjyh5p4cc000v18s3mngt8jm4","_id":"cjyua4ce70002aws34md7z47f"},{"post_id":"cjyua4cdj0000aws3km7fcgt5","category_id":"cjyh5p4fi004h18s38ychi8v2","_id":"cjyua4ce80004aws3b8g6v8j6"}],"PostTag":[{"post_id":"cjyh5p4ac000218s39sjyo11e","tag_id":"cjyh5p4c7000u18s3txislwix","_id":"cjyh5p4fj004i18s33md2gt7m"},{"post_id":"cjyh5p4ac000218s39sjyo11e","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4fk004j18s3ny5oc19s"},{"post_id":"cjyh5p4ai000418s3vs2z8684","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4fk004k18s3tzx69sx8"},{"post_id":"cjyh5p4ai000418s3vs2z8684","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyh5p4fl004m18s3eijrwh0d"},{"post_id":"cjyh5p4ai000418s3vs2z8684","tag_id":"cjyh5p4ck001518s3sfe4a6tn","_id":"cjyh5p4fl004n18s35ne52g1c"},{"post_id":"cjyh5p4ai000418s3vs2z8684","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4fn004p18s342t09vdw"},{"post_id":"cjyh5p4ai000418s3vs2z8684","tag_id":"cjyh5p4cm001918s3bc23euhr","_id":"cjyh5p4fn004q18s3rqg8qh5l"},{"post_id":"cjyh5p4al000618s30m3g1c8a","tag_id":"cjyh5p4cn001b18s3rsu7ja62","_id":"cjyh5p4fo004s18s3rn3fqfeo"},{"post_id":"cjyh5p4al000618s30m3g1c8a","tag_id":"cjyh5p4co001d18s39z8anj74","_id":"cjyh5p4fp004t18s3asb7v7qg"},{"post_id":"cjyh5p4al000618s30m3g1c8a","tag_id":"cjyh5p4cp001f18s36oqdhoha","_id":"cjyh5p4fp004v18s367s0kct6"},{"post_id":"cjyh5p4an000818s3z1j65rja","tag_id":"cjyh5p4cq001i18s3sv3d6vaj","_id":"cjyh5p4fp004w18s3bt6jdaq5"},{"post_id":"cjyh5p4an000818s3z1j65rja","tag_id":"cjyh5p4c7000u18s3txislwix","_id":"cjyh5p4fr004y18s3tuybabhl"},{"post_id":"cjyh5p4an000818s3z1j65rja","tag_id":"cjyh5p4cs001m18s3ngui08a4","_id":"cjyh5p4fr004z18s3mi5qwwkl"},{"post_id":"cjyh5p4an000818s3z1j65rja","tag_id":"cjyh5p4cp001f18s36oqdhoha","_id":"cjyh5p4fs005118s3z30k76av"},{"post_id":"cjyh5p4aq000a18s3cjrgbokw","tag_id":"cjyh5p4c7000u18s3txislwix","_id":"cjyh5p4fs005218s318ewo286"},{"post_id":"cjyh5p4aq000a18s3cjrgbokw","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4ft005418s3ns9kskvv"},{"post_id":"cjyh5p4at000c18s305ljr23t","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4ft005518s3rlnukpm3"},{"post_id":"cjyh5p4at000c18s305ljr23t","tag_id":"cjyh5p4cz001s18s3pdqf20s5","_id":"cjyh5p4fu005718s3lkb5gu0c"},{"post_id":"cjyh5p4at000c18s305ljr23t","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4fu005818s3flujpsb4"},{"post_id":"cjyh5p4at000c18s305ljr23t","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4fu005a18s3wxd8fqde"},{"post_id":"cjyh5p4at000c18s305ljr23t","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4fv005d18s3oj2tmt68"},{"post_id":"cjyh5p4aw000e18s32ita3em8","tag_id":"cjyh5p4d1001x18s3tej9m1w1","_id":"cjyh5p4fv005e18s37qfrg8m1"},{"post_id":"cjyh5p4aw000e18s32ita3em8","tag_id":"cjyh5p4cp001f18s36oqdhoha","_id":"cjyh5p4fw005g18s3yx4kzlhp"},{"post_id":"cjyh5p4ax000f18s3scjvy482","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4fw005h18s3bj8b1q2u"},{"post_id":"cjyh5p4ax000f18s3scjvy482","tag_id":"cjyh5p4d3002018s33ljs5f97","_id":"cjyh5p4fx005j18s3bq3zv802"},{"post_id":"cjyh5p4ax000f18s3scjvy482","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4fx005k18s3lw89s7qy"},{"post_id":"cjyh5p4ax000f18s3scjvy482","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4fy005m18s3c9zjqyec"},{"post_id":"cjyh5p4ax000f18s3scjvy482","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4fz005p18s34qqtzxgn"},{"post_id":"cjyh5p4ay000g18s30vjgu4b3","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4fz005q18s3vw5zg6lz"},{"post_id":"cjyh5p4ay000g18s30vjgu4b3","tag_id":"cjyh5p4d6002618s3udwq9ojp","_id":"cjyh5p4fz005r18s3rnd37np7"},{"post_id":"cjyh5p4ay000g18s30vjgu4b3","tag_id":"cjyh5p4d7002718s3w4n9rvkx","_id":"cjyh5p4fz005s18s34q49itkj"},{"post_id":"cjyh5p4ay000g18s30vjgu4b3","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4fz005t18s3tvqlx5cu"},{"post_id":"cjyh5p4ay000g18s30vjgu4b3","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4g0005u18s35ansi4oi"},{"post_id":"cjyh5p4ay000g18s30vjgu4b3","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4g0005w18s3mz5y37qd"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4g0005x18s3wh72desv"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","tag_id":"cjyh5p4dm002d18s381u0z6fx","_id":"cjyh5p4g0005y18s3quvfelgl"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","tag_id":"cjyh5p4dn002e18s3o6i8tgd3","_id":"cjyh5p4g0005z18s3evsldq7n"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","tag_id":"cjyh5p4dn002f18s3dznh052j","_id":"cjyh5p4g0006018s3ufxhjrq1"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4g1006118s384z0xwgq"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4g1006218s3k2fgryw1"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4g1006418s3xx8lvtee"},{"post_id":"cjyh5p4b1000i18s3espxcwpc","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4g1006518s3jnp0bhb8"},{"post_id":"cjyh5p4b1000i18s3espxcwpc","tag_id":"cjyh5p4dm002d18s381u0z6fx","_id":"cjyh5p4g1006618s3f3appqsp"},{"post_id":"cjyh5p4b1000i18s3espxcwpc","tag_id":"cjyh5p4dn002f18s3dznh052j","_id":"cjyh5p4g2006718s347k0e7w9"},{"post_id":"cjyh5p4b1000i18s3espxcwpc","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4g2006818s3o80ttnrc"},{"post_id":"cjyh5p4b1000i18s3espxcwpc","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4g3006918s3mdovwdzt"},{"post_id":"cjyh5p4b1000i18s3espxcwpc","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4g4006b18s34ime5pt2"},{"post_id":"cjyh5p4b3000j18s3u6kblugv","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4g4006c18s34tgf7365"},{"post_id":"cjyh5p4b3000j18s3u6kblugv","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4g5006e18s3vq229qxj"},{"post_id":"cjyh5p4b3000j18s3u6kblugv","tag_id":"cjyh5p4dv002u18s3fq2k67ao","_id":"cjyh5p4g5006f18s36fqg78aj"},{"post_id":"cjyh5p4b3000j18s3u6kblugv","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4g5006g18s3f0olyw18"},{"post_id":"cjyh5p4b3000j18s3u6kblugv","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4g5006h18s3nqnqzcqk"},{"post_id":"cjyh5p4b3000k18s3oxjwenyf","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4g5006i18s3ctjtpp6l"},{"post_id":"cjyh5p4b3000k18s3oxjwenyf","tag_id":"cjyh5p4d0001v18s3x88jiou7","_id":"cjyh5p4g5006j18s3zlkkoxe5"},{"post_id":"cjyh5p4b3000k18s3oxjwenyf","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4g6006k18s3xgqqd2st"},{"post_id":"cjyh5p4b3000k18s3oxjwenyf","tag_id":"cjyh5p4dy003018s39xmnzzia","_id":"cjyh5p4g6006l18s3vp3ro56d"},{"post_id":"cjyh5p4b3000k18s3oxjwenyf","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4g6006m18s3ucskpg9q"},{"post_id":"cjyh5p4b3000k18s3oxjwenyf","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4g6006n18s3p9ttleac"},{"post_id":"cjyh5p4b6000m18s3ou4s1z2u","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4g7006v18s3h7653eam"},{"post_id":"cjyh5p4b6000m18s3ou4s1z2u","tag_id":"cjyh5p4d0001v18s3x88jiou7","_id":"cjyh5p4g7006w18s3kqnso9pv"},{"post_id":"cjyh5p4b6000m18s3ou4s1z2u","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4g7006x18s359loyxfb"},{"post_id":"cjyh5p4b6000m18s3ou4s1z2u","tag_id":"cjyh5p4e6003d18s3dpsbqim3","_id":"cjyh5p4g7006y18s3z38s2v2h"},{"post_id":"cjyh5p4b6000m18s3ou4s1z2u","tag_id":"cjyh5p4e8003e18s3nmom0x5u","_id":"cjyh5p4g7006z18s3bbftsm6l"},{"post_id":"cjyh5p4b6000m18s3ou4s1z2u","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4g7007018s3f1uw6jlg"},{"post_id":"cjyh5p4b6000m18s3ou4s1z2u","tag_id":"cjyh5p4cm001918s3bc23euhr","_id":"cjyh5p4g7007118s36cp2smqu"},{"post_id":"cjyh5p4b6000n18s3vr3upkj1","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4g8007218s31s9wvcuk"},{"post_id":"cjyh5p4b6000n18s3vr3upkj1","tag_id":"cjyh5p4d0001v18s3x88jiou7","_id":"cjyh5p4g8007318s3krmq60c5"},{"post_id":"cjyh5p4b6000n18s3vr3upkj1","tag_id":"cjyh5p4e1003518s3t9u76ax9","_id":"cjyh5p4g8007418s3efh1g8qz"},{"post_id":"cjyh5p4b6000n18s3vr3upkj1","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4g8007518s3rta1pbvm"},{"post_id":"cjyh5p4b6000n18s3vr3upkj1","tag_id":"cjyh5p4ee003l18s3wdsyz1st","_id":"cjyh5p4g8007618s3wt3rf28q"},{"post_id":"cjyh5p4b6000n18s3vr3upkj1","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4g8007718s3etmmh8aa"},{"post_id":"cjyh5p4b6000n18s3vr3upkj1","tag_id":"cjyh5p4cm001918s3bc23euhr","_id":"cjyh5p4g8007818s3lv1rxfhj"},{"post_id":"cjyh5p4b7000o18s352qtbsga","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4g8007918s3298b5nby"},{"post_id":"cjyh5p4b7000o18s352qtbsga","tag_id":"cjyh5p4eg003p18s3ayjkprym","_id":"cjyh5p4g8007a18s3sshtx222"},{"post_id":"cjyh5p4b7000o18s352qtbsga","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4g9007b18s3kj94g8du"},{"post_id":"cjyh5p4b7000o18s352qtbsga","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4g9007c18s3rqosgdnk"},{"post_id":"cjyh5p4b7000o18s352qtbsga","tag_id":"cjyh5p4d0001v18s3x88jiou7","_id":"cjyh5p4g9007d18s30z9d12t3"},{"post_id":"cjyh5p4b7000o18s352qtbsga","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4g9007e18s3ch7gdd5c"},{"post_id":"cjyh5p4b8000p18s3xo2ndk2y","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4g9007f18s3x99aj2w9"},{"post_id":"cjyh5p4b8000p18s3xo2ndk2y","tag_id":"cjyh5p4eg003p18s3ayjkprym","_id":"cjyh5p4g9007g18s3io4kdd4m"},{"post_id":"cjyh5p4b8000p18s3xo2ndk2y","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4g9007h18s38e1gthgn"},{"post_id":"cjyh5p4b8000p18s3xo2ndk2y","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4g9007i18s3np802sko"},{"post_id":"cjyh5p4b8000p18s3xo2ndk2y","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4ga007k18s3b5epzywb"},{"post_id":"cjyh5p4b9000q18s3yfbb52wp","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4ga007l18s3mb88o73i"},{"post_id":"cjyh5p4b9000q18s3yfbb52wp","tag_id":"cjyh5p4el004118s39kc8hszo","_id":"cjyh5p4ga007m18s3pbnup1a7"},{"post_id":"cjyh5p4b9000q18s3yfbb52wp","tag_id":"cjyh5p4en004218s3bgcmpff0","_id":"cjyh5p4ga007n18s3pa8ckcj8"},{"post_id":"cjyh5p4b9000q18s3yfbb52wp","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4ga007o18s33ciojlsy"},{"post_id":"cjyh5p4b9000q18s3yfbb52wp","tag_id":"cjyh5p4cf000y18s3hf4tlrb6","_id":"cjyh5p4ga007p18s32z82hqly"},{"post_id":"cjyh5p4b9000q18s3yfbb52wp","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyh5p4ga007q18s3c8ggr5r6"},{"post_id":"cjyh5p4b9000q18s3yfbb52wp","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4ga007r18s36zvop0f9"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyh5p4ga007s18s3a9jhlb70"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","tag_id":"cjyh5p4d0001v18s3x88jiou7","_id":"cjyh5p4ga007t18s3p463cafl"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","tag_id":"cjyh5p4e1003518s3t9u76ax9","_id":"cjyh5p4gb007u18s3js0dimpk"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","tag_id":"cjyh5p4d0001w18s3s4z1ml9u","_id":"cjyh5p4gb007v18s35jlkifkt"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","tag_id":"cjyh5p4ev004b18s3fxprgmp2","_id":"cjyh5p4gb007w18s3l6dxivih"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","tag_id":"cjyh5p4ev004c18s3h29q8a9h","_id":"cjyh5p4gb007x18s34ommsttb"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyh5p4gb007y18s3819laxdj"},{"post_id":"cjyh5p4ba000r18s3h03irvdi","tag_id":"cjyh5p4cm001918s3bc23euhr","_id":"cjyh5p4gb007z18s3i4lsiksz"},{"post_id":"cjyh5p4ba000s18s3lbq36jlh","tag_id":"cjyh5p4c7000u18s3txislwix","_id":"cjyh5p4gb008018s3jr2fs7ys"},{"post_id":"cjyh5p4ba000s18s3lbq36jlh","tag_id":"cjyh5p4cm001918s3bc23euhr","_id":"cjyh5p4gb008118s3q4vyaj6i"},{"post_id":"cjysd9lwv000goos3du96ec3d","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjysd9lwy000hoos33mpq2pay"},{"post_id":"cjysd9lwv000goos3du96ec3d","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjysd9lwz000joos3vs90qdme"},{"post_id":"cjysd9lwv000goos3du96ec3d","tag_id":"cjyh5p4ck001518s3sfe4a6tn","_id":"cjysd9lx0000loos3zzz8fwe5"},{"post_id":"cjysd9lwv000goos3du96ec3d","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjysd9lx0000moos3dhsq54wr"},{"post_id":"cjysd9lwv000goos3du96ec3d","tag_id":"cjyh5p4cm001918s3bc23euhr","_id":"cjysd9lx0000noos3t46h9h77"},{"post_id":"cjysd9lwv000goos3du96ec3d","tag_id":"cjysdkf7o000ooos3t31vy4bj","_id":"cjysdkf7x000roos304rbj3h7"},{"post_id":"cjysd9lwv000goos3du96ec3d","tag_id":"cjysdkf7s000poos37flatdyy","_id":"cjysdkf7x000soos3ewqn2xv3"},{"post_id":"cjysd9lwv000goos3du96ec3d","tag_id":"cjysdkf7t000qoos3011y4356","_id":"cjysdkf7x000toos30g5hjmx9"},{"post_id":"cjysudc0o0000ics38fzt3skh","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjysudc1w0001ics3di75hq4r"},{"post_id":"cjysudc0o0000ics38fzt3skh","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjysudc1y0003ics36fduqofy"},{"post_id":"cjysudc0o0000ics38fzt3skh","tag_id":"cjyh5p4e3003718s32jbg5z0n","_id":"cjysudc1z0005ics3bf2l36k6"},{"post_id":"cjysudc0o0000ics38fzt3skh","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjysudc1z0006ics3iwb1xmru"},{"post_id":"cjysudc0o0000ics38fzt3skh","tag_id":"cjyh5p4cm001918s3bc23euhr","_id":"cjysudc200007ics378uq90uh"},{"post_id":"cjyua4cdj0000aws3km7fcgt5","tag_id":"cjyh5p4ci001118s37gvjh0nk","_id":"cjyua4ce70001aws3inx0j143"},{"post_id":"cjyua4cdj0000aws3km7fcgt5","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyua4ce80003aws33835q8dx"},{"post_id":"cjyua4cdj0000aws3km7fcgt5","tag_id":"cjypslcnf000100s3fy2827g2","_id":"cjyua4ce80005aws3hsgezj58"},{"post_id":"cjyua4cdj0000aws3km7fcgt5","tag_id":"cjyh5p4cl001718s3c5bssm9a","_id":"cjyua4ce80006aws3tq7nmev7"},{"post_id":"cjyua4cdj0000aws3km7fcgt5","tag_id":"cjyh5p4cm001918s3bc23euhr","_id":"cjyua4ce90007aws3phcxuecc"},{"post_id":"cjyh5p4ax000f18s3scjvy482","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyybn90f0000oks3qvdohln6"},{"post_id":"cjyh5p4b0000h18s3ng15z9l3","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyybn90g0001oks3soy06w4o"},{"post_id":"cjyh5p4at000c18s305ljr23t","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyybn90g0002oks33mlbpqei"},{"post_id":"cjyh5p4ay000g18s30vjgu4b3","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyybn90g0003oks3k4y1yfe5"},{"post_id":"cjyh5p4b8000p18s3xo2ndk2y","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyybn90h0004oks31ulbo1pi"},{"post_id":"cjyh5p4b1000i18s3espxcwpc","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyyjojyq0000fcs3iia63kma"},{"post_id":"cjyh5p4b3000j18s3u6kblugv","tag_id":"cjyh5p4cj001318s3xmarbu7d","_id":"cjyyjojz00001fcs3txr6l21v"}],"Tag":[{"name":"NodeJS","_id":"cjyh5p4c7000u18s3txislwix"},{"name":"Introducción","_id":"cjyh5p4cf000y18s3hf4tlrb6"},{"name":"Angular","_id":"cjyh5p4ci001118s37gvjh0nk"},{"name":"Angular8","_id":"cjyh5p4cj001318s3xmarbu7d"},{"name":"Nx","_id":"cjyh5p4ck001518s3sfe4a6tn"},{"name":"Tutorial","_id":"cjyh5p4cl001718s3c5bssm9a"},{"name":"Avanzado","_id":"cjyh5p4cm001918s3bc23euhr"},{"name":"FrontEnd","_id":"cjyh5p4cn001b18s3rsu7ja62"},{"name":"AngularJS","_id":"cjyh5p4co001d18s39z8anj74"},{"name":"Opinión","_id":"cjyh5p4cp001f18s36oqdhoha"},{"name":"BackEnd","_id":"cjyh5p4cq001i18s3sv3d6vaj"},{"name":"MongoDB","_id":"cjyh5p4cs001m18s3ngui08a4"},{"name":"Forms","_id":"cjyh5p4cz001s18s3pdqf20s5"},{"name":"Angular7","_id":"cjyh5p4d0001v18s3x88jiou7"},{"name":"Angular2","_id":"cjyh5p4d0001w18s3s4z1ml9u"},{"name":"TypeScript","_id":"cjyh5p4d1001x18s3tej9m1w1"},{"name":"Components","_id":"cjyh5p4d3002018s33ljs5f97"},{"name":"Servicios","_id":"cjyh5p4d6002618s3udwq9ojp"},{"name":"DI","_id":"cjyh5p4d7002718s3w4n9rvkx"},{"name":"http","_id":"cjyh5p4dm002d18s381u0z6fx"},{"name":"RxJS","_id":"cjyh5p4dn002e18s3o6i8tgd3"},{"name":"Observables","_id":"cjyh5p4dn002f18s3dznh052j"},{"name":"reactiveForms","_id":"cjyh5p4dv002u18s3fq2k67ao"},{"name":"material","_id":"cjyh5p4dy003018s39xmnzzia"},{"name":"Angular6","_id":"cjyh5p4e1003518s3t9u76ax9"},{"name":"ChangeDetection","_id":"cjyh5p4e3003718s32jbg5z0n"},{"name":"Redux","_id":"cjyh5p4e6003d18s3dpsbqim3"},{"name":"NgRx","_id":"cjyh5p4e8003e18s3nmom0x5u"},{"name":"PWA","_id":"cjyh5p4ee003l18s3wdsyz1st"},{"name":"CLI","_id":"cjyh5p4eg003p18s3ayjkprym"},{"name":"SPA","_id":"cjyh5p4el004118s39kc8hszo"},{"name":"Routing","_id":"cjyh5p4en004218s3bgcmpff0"},{"name":"Universal","_id":"cjyh5p4ev004b18s3fxprgmp2"},{"name":"SSR","_id":"cjyh5p4ev004c18s3h29q8a9h"},{"name":"RxJs","_id":"cjypslcnf000100s3fy2827g2"},{"name":"Test","_id":"cjysdkf7o000ooos3t31vy4bj"},{"name":"Jest","_id":"cjysdkf7s000poos37flatdyy"},{"name":"Cypress","_id":"cjysdkf7t000qoos3011y4356"}]}}