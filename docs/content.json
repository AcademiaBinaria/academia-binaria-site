{"meta":{"title":"Academia Binaria","subtitle":"Formación en español para programadores","description":"Artículos y tutoriales sobre Angular, NodeJS, MongoDB y todo lo relacionado con JavaScript y TypeScript","author":"Alberto Basalo","url":"https://academia-binaria.com"},"pages":[{"title":"404 No encontrado","date":"2017-12-20T09:17:19.801Z","updated":"2017-12-20T09:17:19.801Z","comments":false,"path":"/404.html","permalink":"https://academia-binaria.com//404.html","excerpt":"","text":"Lo sentimos, la ruta no se ha encontrado.Por favor, dirígete al inicio del blog– El equipo de Academia BinariaAprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo"},{"title":"Contacto","date":"2015-09-16T11:52:52.000Z","updated":"2017-02-14T08:21:50.000Z","comments":true,"path":"contacto.html","permalink":"https://academia-binaria.com/contacto.html","excerpt":"","text":"Vivimos en la nube y nos relacionamos contigo en cualquier sitio desde A Coruña, España.Si quieres visitarnos ven a:Ágora Binaria S.LFactoría de software y academia de programadores.Av. Primera C10. Edif Abanca InnovaCP:15190A Coruña,EspañaTelefóno: +34 609884782Email: info(at)agorabinaria.comPara temas comerciales de cursos presenciales con Vita Digital S.L.:Email: vitae(at)vitaedigital.comWeb: http://www.vitaedigital.com/"},{"title":"Cookies","date":"2016-04-14T12:29:58.000Z","updated":"2016-04-18T13:48:28.000Z","comments":true,"path":"cookies.html","permalink":"https://academia-binaria.com/cookies.html","excerpt":"","text":"Utilizamos cookies para facilitar el uso de nuestra página web.Las cookies son pequeños ficheros de texto que su navegador almacena en el disco duro de su ordenador y que son necesarias para navegar por nuestra página web.Las utilizamos para entender mejor la manera en la que se usa nuestra página web y de esta manera poder mejorar consecuentemente el proceso de navegación. Las cookies son el referente que nos indica, por ejemplo, si una página de nuestra web ha sido vista conanterioridad, o si su visita es nueva o recurrente.Las cookies que utilizamos no almacenan dato personal alguno, ni ningún tipo de información que pueda identificarle.En caso de no querer recibir cookies, por favor configure su navegador de Internet para que las borre del disco duro de su ordenador, las bloquee o le avise en caso de instalación de las mismas."},{"title":"Cursos","date":"2015-09-16T11:17:03.000Z","updated":"2017-02-23T16:07:39.000Z","comments":true,"path":"cursos.html","permalink":"https://academia-binaria.com/cursos.html","excerpt":"","text":"Calendario de cursos de formación impartidos y programados:^^^^2017vvv##Angular 2del 8 al 12 de mayopara universidad de A Coruña##Angular 2del 24 al 28 de abrilpara consultora informática en A Coruña##Angular 1.5 Avanzadodel 30 al 31 de marzopara consultora informática en Madrid##Angular 2del 22 de febrero al 6 de abrilpara consultora informática en A Coruña###Angular 2del 3 al 11 de febreroabierto al público en A Coruña###AngularJSdel 16 al 24 de eneropara consultora informática en A Coruña###Tecnología Webel 13 de eneropara consultora informática en A Coruña^^^20172016vvv###Angular2del 12 al 20 de diciembreabierto al público en Vigo###Angular 2del 28 de noviembre al 15 de diciembrepara consultora informática en Burgos On Line###AngularJSdel 21 al 24 de noviembrepara consultora informática en A Coruña###AngularJSdel 11 al 19 de noviembrepara consultora informática en Santiago###Angular2del 2 al 17 de noviembreabierto al público on line###AngularJSdel 24 de octubre al 27 de octubrepara consultora informática en A Coruña###AngularJSdel 13 de octubre al 21 de octubrepara consultora informática en Madrid###AngularJSdel 26 de septiembre al 29 de septiembrepara entidad bancaria en A Coruña###AngularJSdel 26 de septiembre al 29 de septiembrepara entidad bancaria en A Coruña###Angular 2del 15 de septiembre al 23 de septiembrepara empresa sector automóvil en Vigo###Angular 2del 12 de septiembre al 14 de septiembrepara empresa peritaje en Pontedeume###AngularJSdel 18 de agosto al 26 de agostopara consultora informática en Madrid###Angular2del 10 al 18 de junioabierto al público en A Coruña###Angular2del 9 al 22 de junioabierto al público on line###MEANjsdel 18 de mayo al 6 de juliopara consultora informática en A Coruña###AngularJSdel 15 al 23 de abrilabierto al público en Vigo###BackEdgedel 31 de marzo al 11 de abrilabierto al público on line###AngularJS, Material Designdel 3 de marzo al 8 de marzopara consultora, multinacional del automóvil y entidad bancaria en Vigo###AngularJS, Material Design y WebAPIdel 22 de febrero al 29 de febreropara entidad bancaria en A Coruña###MEANjs.pdf)del 29 de enero al 27 de febreroabierto al público en A Coruña###FrontEdgedel 14 de enero al 25 de eneroabierto al público on line^^^20162015vvv—###FrontEdgedel 14 de diciembre al 15 de diciembreen abierto en A Coruña###AngularJSdel 13 de noviembre al 27 de noviembrepara consultora informática en A Coruña###AngularJSel 10 de noviembrepara consultora informática en Santiago de Compostela###Web Workersel 5 de noviembreabierto al público on line###Angularel 20 de octubrepara consultora informática en Santiago de Compostela###MEANjsdel 14 de octubre al 2 de diciembrepara consultora informática en A Coruña###AngularJSdel 5 de octubre al 7 de octubrepara multinacional del turismo en Palma de Mallorca###AngularJS y WebAPIdel 28 de septiembre al 1 de octubrepara entidad bancaria en A Coruña###MEANjsdel 25 de septiembre al 17 de octubreabierto al público en A Coruña###AngularJSdel 21 de septiembre al 22 de septiembrepara multinacional del turismo en Palma de Mallorca###AngularJSdel 7 de septiembre al 8 de septiembrepara multinacional del turismo en Palma de Mallorca###AngularJSdel 26 de junio al 4 de julioabierto al público en A Coruña###AngularJSdel 5 de junio al 13 de juniomultinacional del automóvil en Vigo###AngularJSdel 8 de junio al 9 de juniopara multinacional del turismo en Palma de Mallorca###NodeJSdel 22 de mayo al 30 de mayoabierto al público en Vigo###MEANjsdel 18 de mayo al 28 de mayopara consultora informática en Santiago de Compostela###MongoDBdel 13 de abril al 23 de abrilpara consultora informática en A Coruña###MEANjsdel 16 de marzo al 8 de abrilabierto al público on line###NodeJSdel 6 de marzo al 14 de marzoabierto al público en A Coruña###AngularJSdel 10 de febrero al 13 de febreroabierto al público on line^^^^20152014vvvv###AngularJSdel 21 de noviembre al 29 de noviembreabierto al público en Vigo###AngularJSel 18 de noviembreuniversidad de Ourense###AngularJSdel 25 de septiembre al 10 de octubreabierto al público on line###AngularJSdel 19 de septiembre al 26 de octubrepara consultora informática en A Coruña###AngularJSdel 5 de julio al 6 de julioabierto al público on line###AngularJSdel 27 de junio al 5 de julioabierto al público en A Coruña^^^2014"},{"title":"Noticias Junio 2016","date":"2016-06-03T08:44:51.000Z","updated":"2016-06-06T12:28:19.000Z","comments":true,"path":"noticias-junio-16.html","permalink":"https://academia-binaria.com/noticias-junio-16.html","excerpt":"","text":"##06-06-16###Angular 2 R.C.: La evolución de la plataforma.AngularJS ha sufrido una metamorfosis. Mantiene el nombre a duras penas. Ahora ya ni le pone el sufijo …JS. Pero la esperada versión Angular2 lo cambia todo. Cambia el lenguaje, cambia la filosofía y cambia la sintaxis.Todo este cambio es necesario para competir en el ecosistema JavaScript. Continuamente aparecen y desaparecen librerías. Para sobrevivir fue necesario renacer. Ahora es una plataforma mucho más cercana al mundo empresarial.Usa esta serie de artículos sobre Angular2 como tutorial para adaptarte a esta evolución.###Enlaces para aprender####[AngularJS] : Mejorar el Rendimiento en una línea.Parece un eslogan de gancho fácil, pero funciona. La clave es la información de depuración que se genera de manera automática. Al eliminarla se reduce el peso y se mejora la velocidad.####[JavaScript] : La fatiga de frameworks comparada.Empiezo por la consabida broma de pedir una moratoria en el desarrollo de armas… digo de frameworks JavaScript . Mientras tanto mira esta tabla que compara la sintaxis de librerías muy populares.####[NodeJS] : Monitorizar aplicaciones bien y fácil.Si no sabes lo que hace tu aplicación estás perdido. Lo primero que necesitas es una estrategia para generar logs. En Node tienes muchas opciones. Además del console.log(‘ ;-) ‘).####[MongoDB] : Rendimiento y Monitorización de MongoDB.Ahora le toca a la base de datos. No es fácil entender ni usar correctamente la enorme cantidad de métricas que ofrece MongoDB. Pero es fundamental conocer y aplicar algunas para controlar y escalar las instalciones.####[CleanCode] : Escribe código pensando en mantenerlo.Escribimos una vez pero revisamos 20. Nosotros, nuestros compañeros y nuestros herederos. Unos cuantos consejos y buenas prácticas te ayudarán a tratar con lo heredado y a dejar mejores herencias.###Próximas actividadesEste es el mes de Angular2. Su estreno como Release Candidate permite ofrecer formación con garantías. Nos vemos.Keep coding, keep learning."},{"title":"Promociones","date":"2016-05-10T11:53:10.000Z","updated":"2016-05-27T06:46:03.000Z","comments":true,"path":"promociones.html","permalink":"https://academia-binaria.com/promociones.html","excerpt":"","text":"#Cursos de Angular2####OnlineInicio 9 de junio de 2016###Angular 2, desarrollo de aplicaciones empresariales con HTMLCon EscuelaIT####Presencial en CoruñaInicio 10 de junio de 2016###A Coruña : Curso en Abierto de Angular2, TypeScript y Estrategias de Migración de versiones 1.xCon Vitae Digital"},{"title":"[object Object]","date":"2017-10-31T10:46:44.448Z","updated":"2017-10-31T10:46:44.448Z","comments":true,"path":"scaffolds/draft.html","permalink":"https://academia-binaria.com/scaffolds/draft.html","excerpt":"","text":""},{"title":"[object Object]","date":"2017-10-31T10:46:44.450Z","updated":"2017-10-31T10:46:44.450Z","comments":true,"path":"scaffolds/page.html","permalink":"https://academia-binaria.com/scaffolds/page.html","excerpt":"","text":""},{"title":"[object Object]","date":"2017-10-31T10:46:44.452Z","updated":"2017-10-31T10:46:44.452Z","comments":true,"path":"scaffolds/post.html","permalink":"https://academia-binaria.com/scaffolds/post.html","excerpt":"","text":""}],"posts":[{"title":"Base para una aplicación Angular","slug":"base-aplicacion-angular","date":"2018-08-17T09:02:46.000Z","updated":"2018-08-20T11:34:23.139Z","comments":true,"path":"base-aplicacion-angular/","link":"","permalink":"https://academia-binaria.com/base-aplicacion-angular/","excerpt":"Vamos a crear una base sobre la que programar una aplicación Angular 6 profesional. Usaremos el CLI para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: los módulos y los componentes.","text":"Vamos a crear una base sobre la que programar una aplicación Angular 6 profesional. Usaremos el CLI para generar una estructura sobre la que crecer. Será como una semilla para un desarrollo controlado.La idea de árbol se usa en muchas analogías informáticas. La emplearemos en dos conceptos básicos en Angular: los módulos y los componentes.Partimos de la aplicación tal cómo la dejamos en el Hola Mundo en Angular. Al finalizar tendrás un esqueleto del que colgar módulos y componentes funcionales.Código asociado a este artículo en GitHub: AcademiaBinaria/AutoBot/1-base1. MódulosLos módulos son contenedores dónde almacenar los componentes y servicios de una aplicación. En Angular cada programa se puede ver como un árbol de módulos jerárquico. A partir de un módulo raíz se enlazan otros módulos en un proceso llamado importación.1.1 Definición mediante decoradoresAntes de importar cualquier módulo hay que definirlo. En Angular 6 los módulos de declaran como clases de TypeScript. Estas clases, habitualmente vacías, son decoradas con una función especial. Es la función @NgModule() que recibe un objeto como único argumento. En las propiedades de ese objeto es dónde se configura el módulo.Mira el módulo AppModule original que genera el CLI en el fichero app.module.ts.1234567@NgModule(&#123; declarations: [AppComponent], imports: [BrowserModule], providers: [], bootstrap: [AppComponent]&#125;)export class AppModule &#123;&#125;1.2 Importación de otros módulosEl módulo App también se conoce como módulo raíz porque de él surgen las demás ramas que conforman una aplicación. La asignación de los nodos hijos se realiza en la propiedad imports:[], que es un array de punteros a otros módulos.En la situación original el módulo principal depende un módulo custom (el CoreModule que usarás más adelante) y de otro del framework para la presentación en el navegador (el BrowserModule).1.2.1 Dos mundos paralelos: imports de Angular 6 e import de TypeScriptSi es la primera vez que ves código TypeScript te llamarán la atención las primeras líneas de cada fichero. En el app.module.ts son algo así:123import &#123; BrowserModule &#125; from \"@angular/platform-browser\";import &#123; NgModule &#125; from \"@angular/core\";import &#123; AppComponent &#125; from \"./app.component\";Estas sentencias de importación son propias del lenguaje y nada tienen que ver con Angular 6. En ellas se indica que este fichero importa el contenido de otros ficheros TypeScript. La importación se realiza en base a convenios personalizables. Si empieza con ./ entonces se busca a través de la ruta física relativa al fichero actual. En otro caso se busca en el directorio node_modules y se trata como código de terceros.En general no tendrás que preocuparte de estas importaciones físicas, pues el VSCode y las extensiones esenciales se encargan de hacerlo automáticamente según lo uses en tu código.1.3 Generación de módulosHasta ahora los módulos involucrados son librerías de terceros o que se crearon mágicamente con la aplicación. Es hora de crear tu primer módulo. Para eso usaremos otro comando del cli, el ng generate module. En una ventana del terminal escribe:1ng g m coreEsta es la sintaxis abreviada del comando ng generate el cual dispone de varios planos de construcción o blueprints. El que he usado aquí es el de module aka m para la construcción de módulos.El resultado es la creación del fichero core/core.module.ts con la declaración y decoración del módulo CoreModule.Este módulo te servirá de contenedor para guardar componentes y otros servicios esenciales para nuestra aplicación. Pero eso lo veremos más adelante.123456@NgModule(&#123; imports: [], declarations: [], exports: []&#125;)export class CoreModule &#123;&#125;Por ahora hay que asegurar que este módulo es importado por el raíz, el AppModule. Para ello comprobaremos que la línea de importación del módulo principal esté parecida a esto:1234567@NgModule(&#123; declarations: [AppComponent], imports: [BrowserModule, CoreModule], providers: [], bootstrap: [AppComponent]&#125;)export class AppModule &#123;&#125;El módulo raíz, al igual que como verás más tarde con el componente ráiz, es un tanto especial. Su nombre oficial es App, aunque todo la documentación se refiere a él como raíz o root.2. ComponentesLos módulos son contenedores. Lo primero que vamos a guardar en ellos serán componentes. Los componentes son los bloques básicos de construcción de las páginas web en Angular 6. Contienen una parte visual en html (la Vista) y una funcional en Typescript (el Controlador).La aplicación original que crea el CLI nos regala un primer componente de ejemplo en el fichero app.component.ts. Según la configuración del CLI este componente puede haber sido creado en un sólo fichero (es el caso escogido a efectos didácticos) o en dos, tres o incluso cuatro ficheros especializados (con la vista y los estilos en ficheros propios y fichero extra para pruebas unitarias).2.1 Anatomía de un componenteLos componentes, como el resto de artefactos en Angular 6, serán clases TypeScript decoradas con funciones específicas. En este caso la función es @Component() que recibe un objeto de definición de componente. Igual que en el caso de los módulos contiene las propiedades en las que configurar el componente.12345678import &#123; Core &#125; from \"@angular/core\";@Component(&#123; selector: \"app-root\", template: `&lt;h1&gt;Hello&lt;/h1&gt;`, styles: []&#125;)export class AppComponent &#123;&#125;Los componentes definen nuevas etiquetas HTML para ser usados dentro de otros componentes. Excepcionalmente en este caso por ser el componente raíz se consume en el página index.html. El nombre de la nueva etiqueta se conoce como selector. En este caso la propiedad selector: &quot;app-root&quot; permite el uso de este componente dentro de otro con esta invocación &lt;app-root&gt;&lt;/app-root&gt;. En este caso el componente raíz.Particularidades del compnente raíz. Su nombre oficial es AppComponent, y su selector debería se app-app Pero su selector es app-root formado a partir del prefijo de la aplicación y su supuesto nombre oficioso. Observa el prefijo app que se usará en todos los componentes propios y fue asignado por defecto durante la generación de la aplicación. Puede personalizarse usando el modificador --prefix de ng new y en distintos ficheros de configuración. Volviendo al componente ráiz; está destinado a ser usado en la página principal, en el index.html. Eso obliga a registrarlo de una manera especial en el módulo ráiz. Hay que incluirlo en el array bootstrap: [AppComponent] donde se incluyen los componentes con la capacidad de lanzar la aplicación.1234567@NgModule(&#123; declarations: [AppComponent], imports: [BrowserModule, CoreModule], providers: [], bootstrap: [AppComponent]&#125;)export class AppModule &#123;&#125;Y en el index.html123&lt;body&gt; &lt;app-root&gt;&lt;/app-root&gt;&lt;/body&gt;La plantilla representa la parte visual del componente. De forma simplificada, o cuando tiene poco contenido, puede escribirse directamente en la propiedad template del objeto decorador. Pero es más frecuente encontrar la plantilla en su propio fichero html y referenciarlo como una ruta relativa en la propiedad templateUrl.La propiedad styles y su gemela stylesUrl permiten asignar estilos CSS, SASS o LESS al componente. Estos estilos se incrustan durante la compilación en los nodos del DOM generado. Son exclusivos del componente y facilitan el desarrollo granular de aplicaciones.En la clase del componente nos encontraremos la implementación de su funcionalidad. Normalmente expondrá propiedades y métodos para ser consumidos e invocados de forma declarativa desde la vista.Una aplicación web en Angular 6 se monta como un árbol de componentes. El componente raíz ya viene creado; ahora toca darle contenido mediante una estructura de página y las vistas funcionales.2.2 Generación de componentesPara crear nuevos componentes vamos a usar de nuevo el CLI con su comando ng generate component o abreviadamente ng g c. Pero ahora con los planos para construir un componente. La sintaxis completa del comando generate permite crear componentes en diversas formas.Casi todas las páginas tienen una estructura similar que de forma simplista queda en tres componentes. Uno para la barra de navegación, otro para el pie de página y otro intermedio para el contenido principal.Ejecuta en una terminal estos comandos para que generen los componentes y comprueba el resultado en el editor.1234ng g c core/navigator --exportng g c core/navigator/header --flatng g c core/navigator/main --flatng g c core/navigator/footer --flatFíjate en el componente del fichero nav.component.ts. Su estructura es igual a la del componente raíz. Destaca que el nombre del componente coincide con el nombre del selector: app-navigator y NavigatorComponent. Esto será lo normal a partir de ahora. Sólo el componente raíz tiene la excepción de que su nombre App no coincide con su selector root.1234567891011121314import &#123; Component, OnInit &#125; from '@angular/core';@Component(&#123; selector: 'app-navigator', template: ` &lt;app-header&gt;&lt;/app-header&gt; &lt;app-main&gt;&lt;/app-main&gt; &lt;app-footer&gt;&lt;/app-footer&gt; `, styles: []&#125;)export class NavigatorComponent implements OnInit &#123; constructor() &#123;&#125; ngOnInit() &#123;&#125;&#125;2.3 Componentes públicos y privadosLa clave del código limpio es exponer funcionalidad de manera expresiva pero ocultar la implementación. Esto es sencillo con los lenguajes de POO, pero en HTML no era nada fácil. Con la programación basada en componentes podemos crear pantallas complejas, reutilizables y que a su vez contengan y oculten la complejidad interna a sus consumidores.Los componentes no deciden por sí mismos su visibilidad. Cuando un componente es generado se declara en un módulo contenedor en su propiedad declares:[]. Eso lo hace visible y utilizable por cualquier otro componente del mismo módulo. Pero si quieres usarlo desde fuera tendrás que exportarlo. Eso se hace en la propiedad exports:[] del módulo en el que se crea.La exportación debe hacerse a mano o indicarse con el flag --export para que lo haga el cli. Esto se ha hecho en el componente navigator para poder usarlo en el componente app.Los componentes privados suelen ser sencillos. A veces son creados para ser específicamente consumidos dentro de otros componentes. En esas situaciones interesa que sean privados y que generen poco ruido. Incluso, en casos extremadamente simples, si usamos el modificador --flat ni siquiera generan carpeta propia.Como regal general, cuando en un plantilla se incruste otro componente Angular lo buscará dentro del propio módulo en el que pretende usarse. Si no lo encuentra entonces buscará ente los componentes exportados por los módulos que hayan sido importados por el contenedor.3. OrganizaciónTodos los programas tiene partes repetitivas. Los principios de organización y código limpio nos permiten identificarlas y reutilizarlas. Con los componentes ocurre lo mismo. El módulo y los componentes recién creados suelen ser comunes a casi todas las aplicaciones. Estos y otros muchos surgirán de manera natural durante el desarrollo de una aplicación para ser utilizados en múltiples páginas.Son componentes de infraestructura. Conviene guardarlos en una carpeta especial. Aquí la he llamado shared, pero tools, common, o lib suelen ser otros nombres habituales.El caso es distinguir los componentes de infraestructura de los de negocio o funcionalidad. Los módulos core y shared los trataremos como de infraestructura y todos los demás serán de negocio (aún no tenemos). El primero es para meter cosas de uso único esenciales para la aplicación. El segundo para meter bloques reutilizables durante la construcción de la aplicación. Recuerda que sólo son convenios de arquitectura de software; adáptalos a tus necesidades.En esta aplicación hasta ahora no es nada funcional, y ya tiene tres módulos y cinco componentes!!. Puede parecer sobre-ingeniería, pero a la larga le verás sentido, y por ahora te permitirá practicar con la creación de módulos y componentes. Para un ejemplo más realista, consulta cómo está hecho Astrobot AcademiaBinaria/AstroBot , es el hermano mayor y más profesional de AutoBot.Con esto tendrás una base para una aplicación Angular 6. Sigue esta serie para añadirle funcionalidad mediante Páginas y rutas Angular SPA mientras aprendes a programar con Angular6.Aprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/categories/Tutorial/"},{"name":"Angular","slug":"Tutorial/Angular","permalink":"https://academia-binaria.com/categories/Tutorial/Angular/"}],"tags":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"CLI","slug":"CLI","permalink":"https://academia-binaria.com/tag/CLI/"},{"name":"Angular","slug":"Angular","permalink":"https://academia-binaria.com/tag/Angular/"},{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/tag/Introduccion/"}]},{"title":"Hola Angular CLI","slug":"hola-angular-cli","date":"2018-08-13T15:54:00.000Z","updated":"2018-08-13T17:19:00.000Z","comments":true,"path":"hola-angular-cli/","link":"","permalink":"https://academia-binaria.com/hola-angular-cli/","excerpt":"Angular en su versión 6 es la plataforma perfecta para el desarrollo profesional de aplicaciones modernas. El CLI es la herramienta adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.","text":"Angular en su versión 6 es la plataforma perfecta para el desarrollo profesional de aplicaciones modernas. El CLI es la herramienta adecuada para generar aplicaciones Angular. Juntos son imbatibles en cuanto a velocidad en desarrollo y a potencia en ejecución.El comúnmente conocido como AngularCLI o CLI a secas es la herramienta de línea de comandos estándar para crear, depurar y publicar aplicaciones Angular. En su actual versión 6 es más potente y versátil que nunca y es muy sencillo dominar los aspectos básicos.Código asociado a este artículo en GitHub: AcademiaBinaria/AutoBot/0-Hello1. Instalación de Angular CLI 6Para empezar, como en casi cualquier desarrollo necesitarás NodeJS y su manejador de de paquetes npm. Tenerlos actualizados es un mandamiento básico para un desarrollador web.Empieza con una instalación global que te permita usar la herramienta desde cualquier directorio. Comprueba la versión instalada y accede a la ayuda en línea. La ayuda está disponible tanto de modo general como para cada comando que vayas a usar.1234$ npm i -g @angular/cli@latest$ ng -v$ ng help$ ng help new2. Crear y ejecutar una aplicación Angular 6Una vez que hayas instalado el CLI de manera global ya puedes empezar a usarlo en tu directorio de trabajo. El primer comando será ng new que te va a generar toda una aplicación funcional y las configuraciones necesarias para su depuración, pruebas y ejecución.123ng new autobot -s -S -tcd autobotnpm startUna vez finalizada la instalación de todas las librerías necesarias puedes bajar a la carpeta recién creada y ejecutar el comando standard de npm para el arranque de cualquier aplicación: npm start.Si todo va bien, en unos segundo podrás visitar http://localhost:4000 para ver en marcha la aplicación.Pero volvamos a la terminal y analicemos la primera línea. ng new autobot -s -S -t.En este tutorial crearemos una aplicación muy básica para jugar con coches llamada autobot Una excusa para aprender a programar en Angular; nada serio. El comando ng new mostrado utiliza opciones que nos vendrán bien en un futuro, aunque por ahora sólo sirven para demostrar las capacidades del generador. Para empezar podríamos habernos limitado a un simple ng new nombre-de-mi-aplicacion pero a la larga vendrá bien conocer estas y otras opciones para crear aplicaciones profesionales. Aquí una explicación de lo usado.ComandoSignificadongprograma principal del cli instalado en la máquinanewcomando para solicitar la generación una nueva aplicaciónautobotnombre de la nueva aplicación-sestilos (no usaremos mucho) en línea-Stampoco vamos a usar test unitarios-tno recomendable en proyectos seriosPara un ejemplo más realista, consulta cómo está hecho AcademiaBinaria/AstroBot , el hermano mayor de AutoBot123ng new astrobot --routing -s -Scd astrobotnpm start3. Estructura de una aplicación AngularUna vez generada y comprobada la ejecución, toca estudiar cómo es la estructura de la aplicación. Para ello revisa carpeta a carpeta. Las malas noticias son que hay una enorme cantidad de ficheros y carpetas, las buenas son que como verás, casi todo es configuración e infraestructura.3.1 Visual Studio CodePara ver y editar los ficheros te vale cualquier editor de código, pero yo uso y te recomiendo VSCode. Es un gran editor, gratuito y multiplataforma. Viene con un terminal integrado y puedes mejorarlo instalando extensiones.Antes de empezar debes instalar un paquete de extensiones ya configurado y preparado para el desarrollo de aplicaciones con Angular, se llama Angular Essentials. Con eso y el Material Icon Theme verás Angular en colores.3.2 Carpetas y Ficheros principalesVolviendo a la estructura de ficheros y carpetas te encontrás con muchos archivos de distintos tipos. Si eres completamente nuevo en Angular, te llamará la atención las extensiones .ts. Son para ficheros TypeScript, una evolución del JavaScript con facilidades para el programador. Por ahora sólo tienes que familiarizarte con estos:angular.json : configuración del propio CLI. La madre de todos los configuradorespackage.json : dependencias de librerías y scriptssrc/ : la carpeta donde están los archivos fuentesindex.html : un fichero HTML índice estándarmain.ts : fichero TypeScript de arranque de la aplicaciónapp/ : la carpeta con el código específico de tu aplicaciónapp.module.ts : las aplicaciones son árboles de módulos, y este es su raízapp.component.ts : las páginas son árboles de componentes, y este es su raízEcha un vistazo a estos ficheros, pronto los modificaremos para sentirnos programadores.4. EdiciónAngular CLI instala y configura un conjunto de herramientas que te harán la vida más fácil. Entre otras, destaca la capacidad de recargar la aplicación en caliente en cuanto guardas tu trabajo como programador. En esta última versión, la 6, se ha mejorado el proceso y es realmente rápido.Para probarlo sólo tienes que dejar arrancada la aplicación con el comando npm start; cambiar un fichero de código y comprobar el resultado en el navegador. Te propongo empezar como en cualquier otro lenguaje; por el famoso hola mundo.4.1 Hola MundoAbre el fichero app.component.ts y busca dentro de él una clase llamada AppComponent. Encontrarás que tiene una propiedad title. Asígnale el saludo de rigor: title = &#39;Hello World&#39;;. Guarda y comprueba cómo tu navegador se habrá actualizado automáticamente.Toda esta magia depende de una cadena de comandos que lanzan distintas herramientas previamente instaladas y configuradas por el CLI. Entre ellas cabe mencionar a WebPack, un coloso que afortunadamente viene instalado y preparado para funcionar de manera transparente.Esta es una lista no exhaustiva de lo que sucede.npm startng servewebpack server en http://localhost:4000vigilancia de cambios sobre la carpeta src/livereloadcompilado de la aplicaciónrecarga del navegadorCambia a tu antojo el app.component.ts y comprueba los cambios de manera inmediata en tu navegador.5. ConfiguraciónEl CLI 6 viene con pilas incluidas, se puede usar desde el primer momento. Sólo quedan pequeñas mejoras que hacer. Por ejemplo ajustar el package.json y agregar librerías de terceros.5.1 Package.jsonEl package.json es el fichero estándar de npm donde se almacenan las dependencias de terceros. Contiene las librerías que necesita la aplicación para ejecutarse, por ejemplo todas las de Angular 6. Y también las herramientas que necesita el programador, por ejemplo el propio AngularCLI;12345678&#123; \"dependencies\": &#123; \"@angular/core\": \"^6.1.0\", &#125;, \"devDependencies\": &#123; \"@angular/cli\": \"6.1.0\", &#125;&#125;Otro uso del package.json es servir de contenedor de scripts para automatizar tareas de operaciones rutinarias. Por ejemplo, el comando estándar npm start ejecutará el contenido asignado en el fichero json, originalmente ng serve. Esto lanza el servidor de pruebas con sus opciones por defecto.Pero el comando ng serve admite muchas configuraciones. Te propongo que uses esta para activar un modo de compilación más rápido y seguro, y para que se abra el navegador de forma automática en cuanto lances el servidor. Y además te recomiendo que uses un puerto específico para cada aplicación.123&#123; \"start\": \"ng serve -o --port 4203\",&#125;5.2 Estilos y librerías de tercerosLas librerías que vienen de fábrica tienen todo lo necesario para crear aplicaciones. Pero raro es el caso en que no necesitemos algún que otro producto de terceros. Ya sean utilidades como Moment, librerías gráficas como chart.js o la aplicación de estilos y componentes visuales de frameworks como Bootstrap o MaterialDesign. Pero todos se instalan de igual forma. Descargándolos con npm y adjuntándolos en el angular.json.En este tutorial te propongo usar una hoja de estilos muy simple que mejora la apariencia de cualquier aplicación sin necesidad de usar clases propias. Se llama bulma y es apropiada para prototipos, pruebas o pequeños proyectos. Como otros muchos frameworks css, bulma necesita los iconos de Font Awesome.También usaremos Moment para el trabajo con fechas y horas. Casi todas las librerías que uses se importarán directamente en TypeScript. No hya necesidad de agregar su script en ningún sitio.Se descargan e instalan de manera estándar.123npm i bulma --savenpm i font-awesome --savenpm install moment --savePara que se incluyan en la distribución hay que ir a la configuración del CLI.Y se agrega a través del fichero .angular-cli.json a la colección de styles o de scripts que corresponda.1234567&#123; \"styles\": [ \"node_modules/bulma/css/bulma.min.css\", \"node_modules/font-awesome/css/font-awesome.css\", \"src/styles.css\" ]&#125;Estas colecciones de archivos los usa el cli a través de webpack para incluirlos minificados y concatenados en un fichero bundle sustituyendo a las clásicas etiquetas html. De esta forma el fichero index.html apenas tendrás que tocarlo. Todo, el html y sus estilos, se construirá en el cliente a partir de instrucciones JavaScript.Una cosa más, los cambios en los ficheros de configuración no se auto recargan. Tienes que parar la servidor y volver a lanzarlo para apreciar el estilo bulma.6. Angular 6 y el CLI 6Por si la línea de comandos te suena muy antigua, y lo tuyo son las interfaces gráficas, estás de suerte. El reciente proyecto Angular Console te permite generar y ejecutar comandos desde una cómoda interfaz gráfica.Otros productos que te puede interesar instalar son: Compodoc para la generación de documentación y Webpack Bundle Analyzer para el visualizar y controlar el código generado.Los últimos toques antes de publicar pueden incluir el script de analytics en el index.html y un comando para publicar en github pages.Una vez instalados, configura nuevos scripts en el package.json para poder lanzarlos más tarde.12345678910111213&#123; \"scripts\": &#123; \"ng\": \"ng\", \"start\": \"ng serve -o --port 4203\", \"build\": \"ng build --prod --stats-json\", \"gh\": \"ng build --prod --output-path docs --base-href https://academiabinaria.github.io/autobot/\", \"test\": \"ng test\", \"lint\": \"ng lint\", \"e2e\": \"ng e2e\", \"doc\": \"compodoc -p src/tsconfig.app.json -s\", \"stats\": \"webpack-bundle-analyzer dist/autobot/stats.json\" &#125;&#125;Comprueba las ejecuciones de los distintos scripts. Con npm start no se generan ficheros físicos. Todos es en memoria pra mayor velocidad de re-compilación mientras desarrollas. En cambio npm run build creará una carpeta ./dist/autobot en la que dejará los archivos necesarios para ejecución. Por último npm run gh los prepara para enviar como a la carpeta ./docs listos para publicar en las git hub pages.Para complementar tu conocimiento del CLI te recomiendo la wiki y este artículo que trata la configuración del CLI en profundidad Angular CLI 6 under the hood Esto es sólo el principio, Angular CLI 6 puede hacer mucho más por ti; descúbrelo en esta serie tutorial para aprender a programar con Angular 6. En el próximo artículo crearemos una Base para una aplicación Angular.Aprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/categories/Tutorial/"},{"name":"Angular","slug":"Tutorial/Angular","permalink":"https://academia-binaria.com/categories/Tutorial/Angular/"}],"tags":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"CLI","slug":"CLI","permalink":"https://academia-binaria.com/tag/CLI/"},{"name":"Angular","slug":"Angular","permalink":"https://academia-binaria.com/tag/Angular/"},{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/tag/Introduccion/"}]},{"title":"Formularios reactivos con Angular","slug":"formularios-reactivos-con-Angular","date":"2018-05-03T08:59:27.000Z","updated":"2018-05-03T11:53:46.071Z","comments":true,"path":"formularios-reactivos-con-Angular/","link":"","permalink":"https://academia-binaria.com/formularios-reactivos-con-Angular/","excerpt":"El doble enlace automático entre elementos html y propiedades de objetos fue el primer gran éxito de Angular. Ese doble-binding facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.La solución pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo ReactiveFormsModule que viene en la librería @angular/forms permiten programar formularios reactivos conducidos por el código.","text":"El doble enlace automático entre elementos html y propiedades de objetos fue el primer gran éxito de Angular. Ese doble-binding facilita mucho el desarrollo de formularios. Pero esa magia tienen un coste en escalabilidad; impacta en el tiempo de ejecución y además dificulta la validación y el mantenimiento de formularios complejos.La solución pasa por desacoplar el modelo y la vista, introduciendo una capa que gestione ese doble enlace. Los servicios y directivas del módulo ReactiveFormsModule que viene en la librería @angular/forms permiten programar formularios reactivos conducidos por el código.Partiendo de la aplicación tal cómo quedó en Vigilancia y seguridad en Angular. Al finalizar tendrás una aplicación con formularios model driven fáciles de mantener y validar.Código asociado a este artículo en GitHub: AcademiaBinaria/kakebo/8-reactive1 DesacopleLa directiva [(ngModel)]=&quot;model.property&quot; con su popular banana in a box establece el doble enlace entre el elemento de la vista al que se le aplica y una propiedad del modelo. Los cambios en la vista son trasladados automáticamente al modelo, y al revés; cualquier cambio en el modelo se refleja inmediatamente en la vista.Se puede establecer validaciones y configurar el evento que dispara las actualizaciones; todo ello usando más y más atributos y directivas en la plantilla. Son los formularios template driven que degeneran en un html farragoso y difícil de mantener.1.1 Form BuilderEntra en acción el FormBuilder, un servicio del que han de depender los componentes que quieran desacoplar el modelo de la vista. Se usa para construir un formulario creando un FormGroup, o grupo de controles, que realiza un seguimiento del valor y estado de validez de los datos.Veamos un ejemplo mínimo de su declaración.123456import &#123; FormBuilder, FormGroup &#125; from '@angular/forms';public form: FormGroup;constructor(private formBuilder: FormBuilder) &#123;&#125;public ngOnInit() &#123; this.form = this.formBuilder.group(&#123;&#125;);&#125;2 Form GroupEl formulario se define como un grupo de controles. Cada control tendrá un nombre y una configuración. Esa definición permite establecer un valor inicial al control y asignarle validaciones.En este paso tenemos a disposición varias sobrecargas para configurar con mayor o menor detalle el control.2.1 Default dataPara empezar es fácil asignar valores por defecto. Incluso es un buen momento para modificar o transformar datos previos para ajustarlos a cómo los verá el usuario1234567this.name = 'ALBERTO';this.form = this.formBuilder.group(&#123; email: 'info@angular.io', name: this.name.toLowerCase(), registeredOn : new Date().toISOString().substring(0, 10) password: ''&#125;);2.1 Enlace en la vistaMientras tanto en la vista html… Este trabajo previo y extra que tienes que hacer en el controlador se recompensa con una mayor limpieza en la vista. Lo único necesario será asignar por nombre el elemento html con el control que lo gestionará.Para ello usaremos dos directivas que vienen dentro del módulo reactivo son [formGroup]=&quot;objetoFormulario&quot; para el formulario en su conjunto, y formControlName=&quot;nombreDelControl&quot; para cada control.123456789101112131415161718&lt;form [formGroup]=\"form\"&gt; &lt;label for=\"email\"&gt;E-mail&lt;/label&gt; &lt;input name=\"email\" formControlName=\"email\" type=\"email\" /&gt; &lt;label for=\"name\"&gt;Name&lt;/label&gt; &lt;input name=\"name\" formControlName=\"name\" type=\"text\" /&gt; &lt;label for=\"registeredOn\"&gt;Registered On&lt;/label&gt; &lt;input name=\"registeredOn\" formControlName=\"registeredOn\" type=\"date\" /&gt; &lt;label for=\"password\"&gt;Password&lt;/label&gt; &lt;input name=\"password\" formControlName=\"password\" type=\"password\" /&gt;&lt;/form&gt;2 Validación de formulariosLa validación es una pieza clave de la entrada de datos en cualquier aplicación. Es el primer frente de defensa ante errores de usuarios; involuntarios o deliberados.Dichas validaciones se solían realizar agregando atributos html tales como el conocido required. Pero todo eso ahora se traslada a la configuración de cada control, dónde podrás establecer un o varias reglas de validación.De nuevo tienes distintas sobrecargas que te permiten resolver limpiamente casos sencillos de una sola validación, o usar baterías de reglas. Las reglas son funciones y el objeto Validators del framework viene con las más comunes listas para usar.123456789101112131415this.form = this.formBuilder.group(&#123; email: [ 'info@angular.io', [ Validators.required, Validators.email ] ], name: [ this.name.toLowerCase(), Validators.required ], registeredOn : new Date().toISOString().substring(0, 10) password: [ '', [ Validators.required, Validators.minLength(4) ] ]&#125;);A estas validaciones integradas se puede añadir otras creadas por el programador. Incluso con ejecución asíncrona para validaciones realizadas en el servidor.3 EstadosLos formularios y controles reactivos están gestionados por máquinas de estados que determinan en todo momento la situación de cada control y del formulario en si mismo.3.1 Estados de validaciónAl establecer una más reglas para uno o más controles activamos el sistema de chequeo y control del estado de cada control y del formulario en su conjunto.La máquina de estados de validación contempla los siguientes mutuamente excluyentes:VALID: el control ha pasado todos los chequeosINVALID: el control ha fallado al menos en una regla.PENDING: el control está en medio de un proceso de validaciónDISABLED: el control está desactivado y exento de validaciónCuando un control incumple con alguna regla de validación, estas se reflejan en su propiedad errors que será un objeto con una propiedad por cada regla insatisfecha y un valor o mensaje de ayuda guardado en dicha propiedad.3.2 Estados de modificaciónLos controles, y el formulario, se someten a otra máquina que monitoriza el valor del control y sus cambios.La máquina de estados de cambio contempla entre otros los siguientes:PRINSTINE: el valor del control no ha sido cambiado por el usuarioDIRTY: el usuario ha modificado el valor del control.TOUCHED: el usuario ha lanzado un evento blur sobre el control.UNTOUCHED: el usuario no ha lanzado un evento blur sobre el control.Como en el caso de los estados de validación, el formulario también se somete a estos estados en función de cómo estén sus controles.4 ValorEste sistema de gestión de los controles del formulario oculta la parte más valiosa, el valor que se pretende almacenar, en una la propiedad value del formulario.Contendrá un objeto con las mismas propiedades usadas durante la definición del formulario, cada una con el valor actual del control asociado.Un ejemplo típico sueles ser como la siguiente vista y su controlador:123456789&lt;form [formGroup]=\"form\" (submit)=\"onSubmit(form.value)\"&gt; &lt;label for=\"email\"&gt;E-mail&lt;/label&gt; &lt;input name=\"email\" formControlName=\"email\" type=\"email\" /&gt; &lt;button type=\"submit\" [disabled]=\"form.invalid\"&gt;Save&lt;/button&gt;&lt;/form&gt;1234public onSubmit(formValue: any) &#123; console.log(formValue); // &#123; email:'info@angular.io' &#125;&#125;Ya tenemos formularios reactivos conducidos por los datos que te permitirán construir pantallas complejas manteniendo el control en el modelo y dejando la vista despejada.Con esto completas tu formación y dispones de conocimiento para crear aplicaciones Angular. Repasa esta serie tutorial de introducción a Angular verás como aprendes a programar con Angular.Aprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/categories/Tutorial/"},{"name":"Angular","slug":"Tutorial/Angular","permalink":"https://academia-binaria.com/categories/Tutorial/Angular/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"Angular","slug":"Angular","permalink":"https://academia-binaria.com/tag/Angular/"},{"name":"Angular5","slug":"Angular5","permalink":"https://academia-binaria.com/tag/Angular5/"},{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/tag/Introduccion/"},{"name":"Angular6","slug":"Angular6","permalink":"https://academia-binaria.com/tag/Angular6/"},{"name":"reactiveForms","slug":"reactiveForms","permalink":"https://academia-binaria.com/tag/reactiveForms/"}]},{"title":"Vigilancia y seguridad en Angular","slug":"vigilancia-y-seguridad-en-Angular","date":"2017-12-29T10:49:27.000Z","updated":"2018-05-03T09:07:15.049Z","comments":true,"path":"vigilancia-y-seguridad-en-Angular/","link":"","permalink":"https://academia-binaria.com/vigilancia-y-seguridad-en-Angular/","excerpt":"La seguridad de los datos es una responsabilidad compartida entre el servidor y el cliente. En Angular usaremos los interceptores para detectar intrusos y enviar credenciales. La identificación de usuarios y el control de acceso es parte del trabajo de un desarrollador front-end.Veremos nuevos usos de los observables y los servicios de la librería @angular/common/http con los que tratar con los tokens para comunicaciones seguras en Angular.","text":"La seguridad de los datos es una responsabilidad compartida entre el servidor y el cliente. En Angular usaremos los interceptores para detectar intrusos y enviar credenciales. La identificación de usuarios y el control de acceso es parte del trabajo de un desarrollador front-end.Veremos nuevos usos de los observables y los servicios de la librería @angular/common/http con los que tratar con los tokens para comunicaciones seguras en Angular.Partiendo de la aplicación tal cómo quedó en Comunicaciones http en Angular. Al finalizar tendrás una aplicación que identifica usuarios y se responsabiliza de almacenar y comunicar el token de seguridad de un servicio REST.Código asociado a este artículo en GitHub: AcademiaBinaria/angular5/7-watchEl servicio REST se encuentra en GitHub: AcademiaBinaria/ApiBase1 SeguridadLa seguridad de las comunicaciones con un servicio REST se resuelve habitualmente mediante una credencial generada por el servidor llamada token. Un usuario registrado en el sistema puede hacer log in enviando una vez su identificador y contraseña. Si todo va bien, a cambio el servidor le enviará un token que deberá usar en las siguientes llamadas. Con esto el servidor será capaz de autentificar las llamadas y responder adecuadamente.1.1 Detectar intrusosEn el ejercicio anterior usé el CatchInterceptorService para capturar los errores obtenidos del servidor. Cuando me llegue un código 401 Unauthorized querrá decir que el servidor no acepta las actuales credenciales del usuario. Lo que hago es llevar al usuario a una página para que pueda registrarse o volver a identificarse en el sistema.1234567891011121314private catchHttpError(err: HttpErrorResponse) &#123; if (err.status === 401) &#123; this.catchUnauthorized(); &#125; else &#123; console.warn(err.statusText); &#125;&#125;private catchUnauthorized() &#123; console.log(\"Not authorized\"); this.navigateToLogin();&#125;private navigateToLogin() &#123; this.router.navigateByUrl(\"/credentials/login\");&#125;1.2 Obtener credencialesMediante un formulario pregunto al usuario los datos de identificación estándar: email y password. Estos se envían al servidor para que registre un usuario nuevo o valide a uno existente según el caso. Mira el código del fichero credentials.component.ts.12345678910111213141516171819public sendCredential() &#123; this.errorMessage = \"\"; const credential = this.pageData.credential; const service = this.pageData.title; this.credentialsService .sendCredential(credential, service) .subscribe( this.acceptedCredentials.bind(this), this.invalidCredentials.bind(this) );&#125;private acceptedCredentials(token) &#123; this.busService.emitUserToken(token); this.router.navigateByUrl(\"/\");&#125;private invalidCredentials() &#123; this.busService.emitUserToken(null); this.errorMessage = \"Invalid Credentials\";&#125;Este componente sirve para registrar o identificar usuarios. Cambia su comportamiento según el valor de this.pageData que viene determinado desde el enrutador. Esta es una manera sencilla de reutilizar componentes. Mira en credentials.routing.ts para tener más detalles.1.3 Almacenamiento del tokenSi se aceptan las credenciales el servidor nos devolverá un objeto con el token de la sesión para el usuario. Es habitual que envíe más información como roles, y preferencias del usuario… pero eso ya depende del API. Lo que depende de ti es guardar ese token.El almacenamiento recomendado en los navegadores es el localStorage pero en este tutorial introductorio tendrás que conformarte con almacenarlo en la memoria. Eso sí, necesitamos un lugar que sea accesible para un interceptor que aún no has visto: el TokenInterceptorService, que se encargará de enviar dicho token en todas las llamadas. Para comunicar este componente de las credenciales con ese interceptor sin acoplarlos he decidido usar un servicio intermedio: el BusService.1.3.1 El bus serviceEste servicio del fichero bus.service.ts es la implementación más sencilla del patrón Redux que he podido crear. Se basa en utilizar la librería RxJs para emitir cambios en el estado de un modelo; y que otro servicio pueda subscribirse para ser notificado de dichos cambios.El emisor será el componente CredentialsComponent que envía las credenciales al servidor y recibe el token. El subscriptor será el servicio de interceptación TokenInterceptorService que usará dicho token para identificar al usuario actual en todas las llamadas al servidor. Y en el medio está el BusService que actúa de enlace entre ambos. Este es el código necesario en el fichero bus.service.ts:12345678910private userToken$ = new Subject&lt;any&gt;();constructor() &#123;&#125;public getUserToken$(): Observable&lt;any&gt; &#123; return this.userToken$.asObservable();&#125;public emitUserToken(userToken: any) &#123; this.userToken$.next(userToken);&#125;El tipo genérico Subject&lt;any&gt; viene en la librería rxjs/Subject y es el hermano mayor del ya conocido Observable&lt;any&gt;. En este caso permite ademas emitir valores que recibirán los subscriptores. La suscripción puede realizarse directamente contra la instancia del Subject, pero lo recomendable es que dicha instancia sea privada y que sólo exponga una parte de su funcionalidad.Digamos que exponemos el Observable de sólo lectura obtenido mediante la función .asObservable().1.3.2 El Token Interceptor ServiceYa sólo falta consumir ese Observable en el servicio interceptor token-interceptor.service.ts. Para ello me suscribo a los cambios emitidos desde el BusService y guardo el token que me envíen para su uso posterior.1234567891011121314private token: string = \"InitialAuthorizationToken\";constructor(private busService: BusService) &#123; this.subscribeToTokenChanges();&#125;private subscribeToTokenChanges() &#123; this.busService.getUserToken$().subscribe(this.setTokenIfAny.bind(this));&#125;private setTokenIfAny(data) &#123; if (data &amp;&amp; data.token) &#123; this.token = data.token; &#125;&#125;2 vigilanciaEl servicio TokenInterceptorService se encarga de enviar el token actual en cada llamada que pasa por sus manos. Para ello implementa la interfaz HttpInterceptor en su método intercept() con la lógica suficiente para enviar el token en una cabecera acordada con el API. En este caso uso la estándar Authorization.1234567891011121314public intercept( req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; &#123; const authorizationReq = this.setAuthHeader(req); const handledRequest = next.handle(authorizationReq); return handledRequest;&#125;private setAuthHeader(req: HttpRequest&lt;any&gt;): HttpRequest&lt;any&gt; &#123; const authorization = `Bearer $&#123;this.token&#125;`; const headers = req.headers.set(\"Authorization\", authorization); const authorizationReq = req.clone(&#123; headers &#125;); return authorizationReq;&#125;A parte de toda la liturgia a la que nos obliga el HttpInterceptor, al final la lógica es sencilla. Se trata de rellenar la cabecera con el token actual. Si es o no válido es algo que decidirá el servidor. Aquí simplemente envías lo que tienes.En Angular promueven el uso de funciones y datos inmutables de ahí que nos obliguen a clonar las cabeceras para modificarlas.Ya tenemos al usuario identificado y los datos se envían o reciben acompañados de una cabecera que el servidor interpreta como una firma; lo básico para un sistema mínimamente seguro. Sigue esta serie para crear tus formularios reactivos con Angular mientras aprendes a programar con Angular6.Aprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/categories/Tutorial/"},{"name":"Angular","slug":"Tutorial/Angular","permalink":"https://academia-binaria.com/categories/Tutorial/Angular/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"Angular","slug":"Angular","permalink":"https://academia-binaria.com/tag/Angular/"},{"name":"Angular5","slug":"Angular5","permalink":"https://academia-binaria.com/tag/Angular5/"},{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/tag/Introduccion/"},{"name":"observables","slug":"observables","permalink":"https://academia-binaria.com/tag/observables/"}]},{"title":"Comunicaciones http en Angular","slug":"comunicaciones-http-en-Angular","date":"2017-12-18T10:06:00.000Z","updated":"2017-12-29T11:28:48.102Z","comments":true,"path":"comunicaciones-http-en-Angular/","link":"","permalink":"https://academia-binaria.com/comunicaciones-http-en-Angular/","excerpt":"Las comunicaciones http son una pieza fundamental del desarrollo web, y en Angular siempre han sido fáciles y potentes. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas. Pero con la versión actual consumir un servicio REST vuelve a ser cosa de niños.Claro que para ello tendremos que jugar con los observables y los servicios de la librería @angular/common/http con los que realizar comunicaciones asíncronas en Angular.","text":"Las comunicaciones http son una pieza fundamental del desarrollo web, y en Angular siempre han sido fáciles y potentes. ¿Siempre?, bueno cuando apareció Angular 2 echábamos en falta algunas cosillas. Pero con la versión actual consumir un servicio REST vuelve a ser cosa de niños.Claro que para ello tendremos que jugar con los observables y los servicios de la librería @angular/common/http con los que realizar comunicaciones asíncronas en Angular.Partiendo de la aplicación tal cómo quedó en Servicios inyectables en Angular. Al finalizar tendrás una aplicación que almacena y recupera los datos consumiendo un servicio REST.Código asociado a este artículo en GitHub: AcademiaBinaria/angular5/6-httpEl servicio REST se encuentra en GitHub: AcademiaBinaria/ApiBase1. El servicio HttpClientLa librería @angular/common/http trae el módulo HttpClientModule con el servicio inyectable HttpClient que debes declarar como dependencia en tus propios constructores.En el fichero operations.service.ts tienes el código que reclama la dependencia y la configura con una ruta base obtenida de la configuración de environment. Queda algo así:12345export class OperationsService &#123; private url = environment.apiUrl + \"pub/items/\"; constructor(private http: HttpClient) &#123;&#125;&#125;A partir de este momento sólo queda invocar los métodos REST en la propiedad this.http.1.1 Métodos RESTPara cada verbo http tenemos su método en el servicio HttpClient. Su primer parámetro será la url a la que invocar. Los métodos de envío reciben la carga en el segundo argumento, y la envían automáticamente como objetos JSON.Un ejemplo sencillo lo tienes en el servicio OperationsService.123456789101112public getOperationsList$(): Observable&lt;Operation[]&gt; &#123; return this.http.get&lt;Operation[]&gt;(this.url);&#125;public getOperationById$(id: string): Observable&lt;Operation&gt; &#123; return this.http.get&lt;Operation&gt;(this.url + id);&#125;public saveOperation$(operation: Operation): Observable&lt;any&gt; &#123; return this.http.post(this.url, operation);&#125;public deleteOperation$(operation: Operation): Observable&lt;any&gt; &#123; return this.http.delete(this.url + operation._id);&#125;Cada método de negocio, configura la llamada de infraestructura; parece poca cosa. Podría ser un buen sitio para validar la información antes de ser enviada, o quizás agrupar varias llamadas de red para una misma operación de negocio. El dolar al final del nombre es un convenio para las funciones que devuelven observables.2 ObservablesLas comunicaciones entre navegadores y servidores son varios órdenes de magnitud más lentas que las operaciones en memoria. Por tanto deben realizarse de manera asíncrona para garantizar una buena experiencia al usuario.Esta experiencia no siempre fue tan buena para el programador. Sobre todo con las primeras comunicaciones AJAX basadas en el paso de funciones callback. La aparición de las promises mejoró la claridad del código, y ahora con los Observables tenemos además una gran potencia para manipular la información asíncrona.El patrón Observable fue implementado por Microsoft en la librería Reactive Extensions más conocida como RxJs. El equipo de Angular decidió utilizarla para el desarrollo de las comunicaciones asíncronas. Esta extensa librería puede resultar intimidante en un primer vistazo. Pero con muy poco conocimiento puedes programar casi todas las funcionalidades que se te ocurran.Lo primero es importar el código, esto se hace forma similar a cualquier otra clase o función. Para empezar basta con import { Observable } from &quot;rxjs/Observable&quot;;.Esta es una clase genérica donde sus instancias admiten la manipulación interna de tipos más o menos concretos. Por eso ves en el ejemplo que algunas funciones retornan : Observable&lt;Operation&gt;, o si no saben que tipo esperar se conforman con : Observable&lt;any&gt;.En cualquier caso, toda operación asíncrona retornará una instancia observable a la cual habrá que subscribirse para recibir los datos o los errores, cuando termine. Por limpieza eso debes hacerlo en los componentes que consuman el servicio, no en el propio servicio.2.1 LecturaEn operations.component están las llamadas y las suscripciones necesarias. Por ejemplo el método refreshData() realiza llamadas y se suscribe para conocer los resultados. Cada suscripción es un callback al que habrá que pasarle el contexto mediante .bind(this).1234567891011121314151617181920212223242526private refreshData() &#123; this.message = `Refreshing Data`; this.fullError = null; this.operationsService .getOperationsList$() .subscribe(this.showOperations.bind(this), this.catchError.bind(this)); this.operationsService .getNumberOfOperations$() .subscribe(this.showCount.bind(this), this.catchError.bind(this));&#125;private showOperations(operations: Operation[]) &#123; this.operations = operations; this.message = `operations Ok`;&#125;private showCount(data: any) &#123; this.numberOfOperations = data.count; this.message = `count Ok`;&#125;private catchError(err) &#123; if (err instanceof HttpErrorResponse) &#123; this.message = `Http Error: $&#123;err.status&#125;, text: $&#123;err.statusText&#125;`; &#125; else &#123; this.message = `Unknown error, text: $&#123;err.message&#125;`; &#125; this.fullError = err;&#125;El método subscribe recibe hasta tres argumentos (ok, error, fin) donde colocar funciones receptoras para cada tipo de evento que ocurra. Sólo el primero es obligatorio, y es en el que recibes la información directamente desempaquetada. En el segundo, normalmente pondrás lógica para responder ante códigos de error devueltos por el servidor. Es opcional porque hay técnicas para gestionarlos de manera centralizada pero en este ejemplo te muestro con detalle cómo tratar y analizar los eventos de error.Recordatorio para novatos: Es importante comprender la naturaleza asíncrona de estas operaciones. El código de las funciones subscritas se ejecutará en el futuro, no de una manera secuencial.2.2 EscrituraSi lo que quieres es enviar objetos a un servidor, por ejemplo mediante el verbo POST, sólo tienes que pasarle la payload al método de negocio y suscribirte a la respuesta.12345public saveOperation(operation: Operation) &#123; this.operationsService .saveOperation$(operation) .subscribe(data =&gt; this.refreshData());&#125;De nuevo, fíjate como refrescamos los datos una vez recibida la respuesta. Hacerlo antes podría dar lugar a respuestas incongruentes. En este caso no es la respuesta en sí lo que interesa, sino el hecho de haya terminado bien.3 InterceptoresAngular ha incorporado recientemente el concepto de interceptor que había funcionado muy bien en AngularJS. Ahora los interceptores son clases con métodos que interceptan (de ahí su nombre) todas las peticiones http realizadas. En esos métodos puedes poner lógica que modifique, cancele o simplemente controle el ciclo petición/respuesta de cada llamada.3.1 Implementación de la interfazAprovechando el TypeScript y sus características de programación orientada a objetos, en Angular han optado por obligarnos a cumplir interfaces y como contraparte al cumplir ese contrato invocan a nuestro código en circunstancias controladas. ¿Cómo se hace?.Para empezar hay que crear un servicio inyectable en un módulo general o en el raíz. Yo he creado el CatchInterceptorService en lib/catch-interceptor.service.ts. Ten a mano este enlace para seguir el retos del artículo. Su propósito será capturar las respuestas y gestionar de forma centralizada los errores que se obtengan en un único lugar. Como cualquier otro inyectable habrá que proveerlo en un módulo, yo lo hice en el raíz. Si abres el app.module.ts verás un sistema de aprovisionamiento algo complejo.1234567providers: [ &#123; provide: HTTP_INTERCEPTORS, useClass: CatchInterceptorService, multi: true &#125;];La dependencia que se solicitará es HTTP_INTERCEPTORS, y cuando alguien lo haga (son los servicios de http de Angular a bajo nivel) le será inyectada una instancia de la clase CatchInterceptorService.Es decir, tu clase interceptora será usada sin que el que la reclame conozca siquiera su nombre. Pero esto es la clave de la inversión de control en la inyección de dependencias.El parámetro multi: true, indica que puedes crear tantas clases de interceptación como quieras. Esto permite tener múltiples interceptores especializados.3.2 El método de interceptaciónAl implementar la interfaz HttpInterceptor estás obligado a crear un método con una firma como esta: public intercept(req, next). Este será invocado para cada llamada que hecha con httpClient. A esta función se la conoce como función interceptora y ya ves que tiene unos argumentos y un tipo de retorno bien definidos… y algo complejos a primera vista. Veamos una implementación mínimalista.123public intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; &#123; return next.handle(req);&#125;Lo que dice es que recibe un puntero a la petición en curso, req: HttpRequest&lt;any&gt;, y otro a la siguiente clase que la procese,next: HttpHandler. También obliga a devolver un observable; lógico porque esto es en último término a lo que te suscribes en tu código de negocio. Afortunadamente el método handle(req: HttpRequest&lt;any&gt;) de cualquiera que sea la siguiente clase procesadora retorna un observable. Y así se da continuidad al flujo de la llamada.3.3 Los operadores observablesAdemás de tipos de datos como Observable&lt;any&gt; con métodos clave como .subscribe(ok, err, end), la librería RxJs viene cargadita de operadores que… operan sobre instancias de los observables. Esos operadores son funciones que reciben y retornan observables.Podemos ver a los observables como streams, es decir una corriente de datos que circula por una tubería. Los operadores serán funciones que afecten al contenido o al caudal y que se pueden agregar o eliminar ordenadamente de la tubería. Una de esas operaciones se llama tap, un grifo.Nota: este operador fue anteriormente conocido como do.Ver documentación operador do.La operación tap se usa cuando se quiere actuar ante un cambio en el contenido o caudal pero sin cambiarlo. Para mi es adecuada porque lo que pretendo es auditar las llamadas y enterarme de los errores sin tocar absolutamente nada.En base a todo lo anterior montaré unas sentencias como estas dentro de la función intercept:12345678const handledRequest = next.handle(req);const successCallback = this.interceptResponse.bind(this);const errorCallback = this.catchError.bind(this);const interceptionOperator = tap&lt;HttpEvent&lt;any&gt;&gt;( successCallback, errorCallback);return handledRequest.pipe(interceptionOperator);Tómate tu tiempo para revisar cada línea. En primer lugar obtengo un puntero al stream observable que es la petición en curso. Despues asigno dos funciones locales que actuarán como callbacks para cuando lleguen datos o errores respectivamente. Preparo el operador tap de la librería observable asignádole ambos callbacks y un tipo de retorno concreto en su genérico. Y por último mediante el método pipe engancho el operador a la tubería por la que circula el chorro. Respira y vuelve a leerlo.Admito que si es tu primer contacto con este mundo de los observables este codigo pueda resultar complejo. La buena noticia es que este código es una especie de patrón o snippet que puedes reutiliazar para casi cualquier interceptor. Sólo habrá que cambiar el operador y el trabajo interno de sus callbacks.Con esto tienes un sistema que envía a la consola información extra como la duración de las llamadas. Además inspecciona los errores en un único lugar. Esto puede incluso hacer innecesario que los componentes procesen errores.Ya tenemos los datos almacenados en un servidor con el que nos comunicamos por http; aunque por ahora de forma anónima. Con el conocimiento actual de los observables, el httpClient y los interceptores estamos a un paso de darle seguridad a las comunicaciones. Sigue esta serie para añadirle vigilancia y seguridad en Angular mientras aprendes a programar con Angular5.Aprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/categories/Tutorial/"},{"name":"Angular","slug":"Tutorial/Angular","permalink":"https://academia-binaria.com/categories/Tutorial/Angular/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"http","slug":"http","permalink":"https://academia-binaria.com/tag/http/"},{"name":"Angular","slug":"Angular","permalink":"https://academia-binaria.com/tag/Angular/"},{"name":"Angular5","slug":"Angular5","permalink":"https://academia-binaria.com/tag/Angular5/"},{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/tag/Introduccion/"}]},{"title":"Servicios inyectables en Angular","slug":"servicios-inyectables-en-Angular","date":"2017-11-23T09:44:58.000Z","updated":"2017-12-20T09:17:19.946Z","comments":true,"path":"servicios-inyectables-en-Angular/","link":"","permalink":"https://academia-binaria.com/servicios-inyectables-en-Angular/","excerpt":"La presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. La lógica y los datos tienen su lugar en servicios compartidos.Para que los componentes consuman los servicios de forma controlada tenemos inyectables en la librería @angular/core con los que realizar la inyección de dependencias.","text":"La presentación, la lógica y el manejo de datos son tres capas de abstracción que usamos los programadores para mantener organizado nuestro código. En Angular, la presentación es cosa de los componentes. La lógica y los datos tienen su lugar en servicios compartidos.Para que los componentes consuman los servicios de forma controlada tenemos inyectables en la librería @angular/core con los que realizar la inyección de dependencias.Partiendo de la aplicación tal cómo quedó en Flujo de datos entre componentes Angular. Al finalizar tendrás una aplicación que comunica componentes entre páginas, reparte responsabilidades y gestiona claramente sus dependencias.Código asociado a este artículo en GitHub: AcademiaBinaria/angular5/5-inject1. ServiciosComo casi todo en Angular, los servicios son clases TypeScript. Su propósito es contener lógica de negocio, clases para acceso a datos o utilidades de infraestructura. Estas clases son perfectamente instanciables desde cualquier otro fichero que las importe. Pero, Angular nos sugiere y facilita que usemos su sistema de inyección de dependencias.Este sistema se base en convenios y configuraciones que controlan la instancia concreta que será inyectada al objeto dependiente. Ahora verás cómo funciona la Dependency Inyection en Angular.1.1 InyectablesLa particularidad de las clases de servicios está en su decorador: @Injectable(). Esta función viene en el @angular/core e indica que esta clase puede ser inyectada dinámicamente a quien la demande. Aunque es muy sencillo crearlos a mano, el CLI nos ofrece su comando especializado para crear servicios:1ng g s views/operations/operationsEl resultado es el fichero operations.service.ts que he rellenado con un contenido como este:1234567891011121314151617181920212223242526import &#123; Injectable &#125; from \"@angular/core\";@Injectable()export class OperationsService &#123; private operations: Operation[] = []; constructor() &#123;&#125; public getNumberOfOperations(): number &#123; return this.operations.length; &#125; public getOperationsList(): Operation[] &#123; return this.operations; &#125; public getOperationById(id: string): Operation &#123; return this.operations.find(o =&gt; o._id === id); &#125; public saveOperation(operation: Operation) &#123; operation._id = new Date().getTime().toString(); this.operations.push(operation); &#125; public deleteOperation(operation: Operation) &#123; const index = this.operations.indexOf(operation); this.operations.splice(index, 1); &#125;&#125;Ahora tienes centralizado en este servicio toda la lógica de datos. Los demás componentes la podrán utilizar e incluso podrán compartir los datos en memoria, como el array de operaciones.1.2 ProvidersDeclarar y decorar la clase no es suficiente. Necesitas registrarla como un proveedor en algún módulo. Por ahora hazlo en el cercano módulo de Operaciones usando el array providers:[].123456@NgModule(&#123; imports: [CommonModule, FormsModule, OperationsRoutingModule], declarations: [ OperationsComponent, NewComponent, ListComponent, ItemComponent], providers: [OperationsService]&#125;)export class OperationsModule &#123;&#125;A partir de este momento cualquier otro servicio o componente de este módulo que lo reclame será proveído con una misma instancia de este servicio. Se crea un singleton por cada módulo en el que se provea un servicio. Normalmente si el servicio es para un sólo módulo funcional se provee en este y nada más. Algunos servicios de uso común se proveen en el módulo raíz, garantizando así su disponibilidad en cualquier otro módulo de la aplicación.2. DependenciasAl consumo de los servicios inyectables se le conoce como dependencia. Cada componente o servicio puede declarar en su constructor sus dependencias hacia servicios inyectables.Por ejemplo en el componente OperationsComponent teníamos incrustada toda la lógica y mantenimiento de los datos. Debe quedarse solamente con sus responsabilidades de presentación y delegar en el nuevo servicio todo lo demás.12345678910111213141516171819202122export class OperationsComponent implements OnInit &#123; public numberOfOperations = 0; public operations: Operation[] = []; constructor(private operationsService: OperationsService) &#123;&#125; ngOnInit() &#123; this.refreshData(); &#125; public saveOperation(operation: Operation) &#123; this.operationsService.saveOperation(operation); this.refreshData(); &#125; public deleteOperation(operation: Operation) &#123; this.operationsService.deleteOperation(operation); this.refreshData(); &#125; private refreshData() &#123; this.numberOfOperations = this.operationsService.getNumberOfOperations(); this.operations = this.operationsService.getOperationsList(); &#125;&#125;Como ves, el constructor no tiene otra función que la de recibir las dependencias. Una vez construida la instancia se puede acceder a ellas a través de this.operationsService. Ahora este componente ya no sabe nada sobre dónde se almacenan o cómo se recuperan los datos.2.1 SingletonLo mismo que le ocurre al OperationsComponent le puede pasar a cualquier otro componente del módulo. Como por ejemplo el ItemComponent. El cual reclama la misma dependencia y recibe la misma instancia. Esto es así porque cada módulo gestiona las dependencias en modo Singleton, y entrega a todos los componentes la misma instancia del servicio.12345678910111213export class ItemComponent implements OnInit &#123; public operation: Operation; constructor( private route: ActivatedRoute, private operationsService: OperationsService ) &#123;&#125; ngOnInit() &#123; const id = this.route.snapshot.params[\"id\"]; this.operation = this.operationsService.getOperationById(id); &#125;&#125;Ojo, si se provee la misma clase en dos o más módulos se genera una instancia en cada uno de ellos. Los componentes recibirán la instancia del módulo jerárquicamente más cercano.2.2 Comunicación via urlPara finalizar el ejercicio te muestro cómo desde el ListComponent puedes crear enlaces que envían parámetros a otras páginas. Con esa mínima información la página destino puede usar el valor del parámetro para consultar datos en el servicio.123456789&lt;tbody&gt; &lt;tr *ngFor=\"let operation of operations\"&gt; &lt;td&gt;&lt;a [routerLink]=\"[operation._id]\"&gt;&#123;&#123; operation._id &#125;&#125;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&#123;&#123; operation.description &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; operation.kind &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; operation.amount | number:'7.2-2' &#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;button (click)=\"deleteOperation(operation)\"&gt;Delete&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;Este caso de uso mantiene los datos en memoria, lo cual es muy poco fiable y sólo debe usarse con información muy volátil. Sigue esta serie para añadirle Comunicaciones HTTP en Angular mientras aprendes a programar con Angular5.Aprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/categories/Tutorial/"},{"name":"Angular","slug":"Tutorial/Angular","permalink":"https://academia-binaria.com/categories/Tutorial/Angular/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"DI","slug":"DI","permalink":"https://academia-binaria.com/tag/DI/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"Angular","slug":"Angular","permalink":"https://academia-binaria.com/tag/Angular/"},{"name":"Angular5","slug":"Angular5","permalink":"https://academia-binaria.com/tag/Angular5/"},{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/tag/Introduccion/"}]},{"title":"Flujo de datos entre componentes Angular","slug":"flujo-de-datos-entre-componentes-angular","date":"2017-11-20T16:10:44.000Z","updated":"2017-12-20T09:17:19.938Z","comments":true,"path":"flujo-de-datos-entre-componentes-angular/","link":"","permalink":"https://academia-binaria.com/flujo-de-datos-entre-componentes-angular/","excerpt":"Los formularios profesionales son complejos y Angular ofrece soluciones de comunicación para pantallas complejas. Favorece la implementación de buenas prácticas mediante el desarrollo de componentes atómicos y reutilizables.Pero comunicar componentes no es tarea fácil y puede generar código difícil de seguir. La librería @angular/forms ofrece tuberías de comunicación para mantener el flujo de datos bajo control.","text":"Los formularios profesionales son complejos y Angular ofrece soluciones de comunicación para pantallas complejas. Favorece la implementación de buenas prácticas mediante el desarrollo de componentes atómicos y reutilizables.Pero comunicar componentes no es tarea fácil y puede generar código difícil de seguir. La librería @angular/forms ofrece tuberías de comunicación para mantener el flujo de datos bajo control.Partiendo de la aplicación tal cómo quedó en Formularios, tablas y modelos de datos en Angular. Al finalizar tendrás una aplicación que reparte la responsabilidad de recoger y presentar datos en dos componentes.Código asociado a este artículo en GitHub: AcademiaBinaria/angular5/4-flow1. Comunicación entre componentes de una páginaEs habitual crear un componente por página. Es muy común que esa página se complique. Y la solución a la complejidad es la división en componentes y reparto de responsabilidades.Partiendo de un componente como era el OperationsComponent vemos que tenía asociadas dos tareas: recoger en un formulario y mostrar en una tabla los datos de operaciones financieras. Para repartir la responsabilidad creamos un componente, el NewComponent, para el formulario y otro, el ListComponent, para la tabla.En la implementación anterior del NewComponent estaba todo pues no sabíamos como llevarlo a otro sitio y comunicar los componentes.Los datos han de guardarse y recuperarse en componentes distintos; tenemos dos estrategias para lograrlo. Tener un único responsable o que cada componente se encargue de sus datos.1.1 Controlador y presentadoresLa estrategia de un controlador y múltiples presentadores es la más adecuada para la mayor parte de las situaciones. Es la que he escogido para este ejercicio.Se basa en que el componente contenedor OperationsComponent sea el guardián del acceso a los datos. Mientras que los componentes presentadores NewComponent y ListComponent recibirán la información y notificarán los cambios a su padre controlador.Para eso tienes que usar dos decoradores de Angular: @Input() y @Output().1.1.1 @Input()Para que una vista muestre datos tiene que usar directivas como { {numberOfOperations} } asociada a una propiedad pública de la clase componente. Se supone que dicha clase es la responsable de su valor. Pero también puede recibirlo desde el exterior. La novedad es hacer que lo reciba vía html.Empieza por decorar con @Input() la propiedad que quieres usar desde fuera. Por ejemplo un código como este del archivo list.component.ts.1234export class ListComponent implements OnInit &#123; @Input() public numberOfOperations = 0; @Input() public operations: Operation[] = [];&#125;Ahora puedes enviarle datos a este componente desde el html de su consumidor. Por ejemplo desde operations.component.ts le puedo enviar una constante o, mucho más interesante, el valor de una variable.1234&lt;cf-list [numberOfOperations]=\"numberOfOperations\" [operations]=\"operations\" &gt;&lt;/cf-list&gt;Y en su clase controladora tenemos el código que almacena los datos.1234export class OperationsComponent implements OnInit &#123; public numberOfOperations = 0; public operations: Operation[] = [];&#125;Estoy usando al componente de nivel inferior como un presentador; mientras que el contenedor superior actúa como controlador. De esta forma es fácil y queda muy limpio el envío de datos hacia abajo. Pero, ¿y hacia arriba?.1.1.2 @Output()Los componentes de nivel inferior no sólo se dedican a presentar datos. También pueden crearlos, modificarlos o eliminarlos. Aunque no directamente; para hacerlo comunican el cambio requerido al controlador de nivel superior.Por ejemplo, el mismo componente ListComponent además de mostrar operaciones en una tabla permite borrar un registro. Bueno, realmente permite que el usuario diga que quiere borrar un registro. En su html tiene algo así:123456&lt;tr *ngFor=\"let operation of operations\"&gt; &lt;td&gt;&#123;&#123; operation.description &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; operation.kind &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; operation.amount | number:'7.2-2' &#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;button (click)=\"deleteOperation(operation)\"&gt;Delete&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;Claramente el botón con el evento (click)=&quot;deleteOperation(operation)&quot; manifiesta una intención de borrar el registro. Pero el método del componente no actúa directamente con el array de datos.Si lo hiciera haría difícil gestionar los cambios e imposibilitaría el uso de inmutables o técnicas más avanzadas de programación..En su lugar, lo que hace es emitir un evento, confiando que alguien lo reciba y actúe en consecuencia. La emisión se realiza mediante el decorador @Output() public delete, sobre una propiedad que es un emisor de eventos tipado, new EventEmitter&lt;Operation&gt;();. El método deleteOperation(operation), es un delegado al que llama la vista y usa dicho emisor para… ejem, emitir la señal hacia arriba.1234567export class ListComponent implements OnInit &#123; @Output() public delete = new EventEmitter&lt;Operation&gt;(); public deleteOperation(operation: Operation) &#123; this.delete.emit(operation); &#125;&#125;Mientras tanto, en el controlador principal la vista se subscribe al evento (delete) como si este fuese un evento nativo. La instrucción que se ejecuta hace uso del argumento recibido en el identificador $event estándar del framework.12345&lt;cf-list [numberOfOperations]=\"0\" [operations]=\"operations\" (delete)=\"deleteOperation($event)\" &gt;&lt;/cf-list&gt;En el componente principal ya podemos operar con los datos. El método deleteOperation(operation: Operation) accede y modifica el valor del array operations. Cuando dicho array cambia en el componente principal lo notifica automáticamente hacia abajo; de nuevo hacia la lista.12345678910export class OperationsComponent implements OnInit &#123; public numberOfOperations = 0; public operations: Operation[] = []; public deleteOperation(operation: Operation) &#123; const index = this.operations.indexOf(operation); this.operations.splice(index, 1); this.numberOfOperations = this.operations.length; &#125;&#125;De esta manera se cierra el círculo. Los componentes de bajo nivel pueden recibir datos para ser presentados o emitir eventos para modificarlos. El componente de nivel superior es el único responsable de obtener y actuar sobre los datos.1.2 Múltiples controladoresCuando las pantallas se hacen realmente complejas, empiezan a surgir árboles de componentes de muchos niveles de profundidad. En estas situaciones mantener un único controlador a nivel raíz es poco práctico.La solución en esos casos pasa porque algunos componentes tengan su propio control de datos. Para que esto tampoco te lleve a un caos incontrolable te enseñaré cómo resolverlo usando Observables. Pero eso será más adelante.2. Otras comunicaciones2.1 Comunicación entre distintas páginasEn las aplicaciones hay comunicaciones de estado más allá de la página actual. La comunicación entre páginas es responsabilidad del @angular/router.En el estado actual del componente ItemComponent es capaz de recibir por parámetros una identificación de operación. Pero no tiene acceso al array de datos y por tanto no los puede mostrar ni interactuar con ellos.Desde luego necesita convertirse en un controlador, pero antes habrá que bajar los datos a un nivel compartido entre páginas. Lo haremos en próximos pasos. Primero mediante Servicios inyectables en Angular y después usando Comunicaciones HTTP en Angular.2.2 Comunicación entre estructurasOtra situación habitual es comunicar la vista de negocio activa con elementos generales de la página. Por ejemplo podrías querer mostrar el contador o un balance de operaciones en la barra del menú.Este tipo de comunicaciones también se resuelve mediante Observables y merece un capítulo especial. Por ahora tienes una aplicación en Angular que comunica datos y cambios entre componentes de una misma página. Sigue esta serie para añadirle Servicios inyectables en Angular mientras aprendes a programar con Angular5.Aprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/categories/Tutorial/"},{"name":"Angular","slug":"Tutorial/Angular","permalink":"https://academia-binaria.com/categories/Tutorial/Angular/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"Forms","slug":"Forms","permalink":"https://academia-binaria.com/tag/Forms/"},{"name":"Angular","slug":"Angular","permalink":"https://academia-binaria.com/tag/Angular/"},{"name":"Angular5","slug":"Angular5","permalink":"https://academia-binaria.com/tag/Angular5/"},{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/tag/Introduccion/"}]},{"title":"Formularios, tablas y modelos de datos en Angular","slug":"formularios-tablas-y-modelos-de-datos-en-angular","date":"2017-11-15T09:17:37.000Z","updated":"2017-12-20T09:17:19.928Z","comments":true,"path":"formularios-tablas-y-modelos-de-datos-en-angular/","link":"","permalink":"https://academia-binaria.com/formularios-tablas-y-modelos-de-datos-en-angular/","excerpt":"Las aplicaciones Angular son excelentes para el tratamiento de datos en el navegador. La recogida de información mediante formularios y la presentación de páginas dinámicas fue su razón de ser.Vamos a ver cómo la librería @angular/forms enlaza las vistas, los controladores y los modelos y cómo se hace la presentación de datos en listas y tablas.","text":"Las aplicaciones Angular son excelentes para el tratamiento de datos en el navegador. La recogida de información mediante formularios y la presentación de páginas dinámicas fue su razón de ser.Vamos a ver cómo la librería @angular/forms enlaza las vistas, los controladores y los modelos y cómo se hace la presentación de datos en listas y tablas.Partiendo de la aplicación tal cómo quedó en Páginas y rutas Angular SPA. Al finalizar tendrás una aplicación que recoge y presenta datos.Código asociado a este artículo en GitHub: AcademiaBinaria/angular5/3-data1. FormulariosLos formularios son el punto de entrada de información a nuestros sistemas. Llevan con nosotros desde el inicio de la propia informática y se han comido una buena parte del tiempo de programación. En Angular han prestado una atención a ellos facilitando su desarrollo, desde pantallas simples a complejos procesos.1.1 El BindingLa clave para entender cómo funciona Angular está en el concepto de enlace entre elementos html de las vistas y propiedades de modelos de datos, el llamado binding.1.1.1 La interpolación entre { { } }Ya hemos visto ejemplos de binding sencillos en este tutorial.En el fichero new.component.ts tienes en su vista html la directiva { { title | uppecarse } }. Esas dobles llaves encierran expresiones que se evaluarán en tiempo de ejecución. La llamamos directiva de interpolación y es la manera más cómoda y usual de mostrar contenido dinámico en Angular.12345678@Component(&#123; template: `&lt;h2&gt;&#123;&#123; title | uppercase &#125;&#125;&lt;/h2&gt;`&#125;)export class NewComponent implements OnInit &#123; title = \"Cash Flow\"; constructor() &#123;&#125; ngOnInit() &#123;&#125;&#125;La expresión interna hace referencia a variables que se obtienen de las propiedades de la clase controladora del componente. En este caso NewComponent y title, con su valor New Operation en ejecución. Este enlace mantiene la vista permanentemente actualizada a través de un potente sistema de detección del cambio.1.1.2 Las tuberías |Si queremos que la presentación del dato sea distinta a su valor real, podemos usar funciones de transformación especiales. Se llaman tuberías o pipes y se indican mediante el carácter |.El framework nos provee de casos básicos como uppercase, lowercase, date, number.... También dispones de un mecanismo para crear tus propios pipes.En el caso anterior verás en ejecución el texto NEW OPERATION1.2 Doble BindingLa comunicación del modelo hacia la vista es sólo el principio. En Angular también podrás comunicar la vista hacia el modelo, permitiéndole al usuario modificar los datos a través de formularios. En el fichero new.component.ts tienes un ejemplo; vamos a analizarlo:12345678910111213141516171819&lt;form class=\"container\"&gt; &lt;label for=\"description\"&gt;Description&lt;/label&gt; &lt;input name=\"description\" #inputDescription [value]=\"operation.description\" (change)=\"operation.description=inputDescription.value\" type=\"text\" /&gt; &lt;label for=\"amount\"&gt;Amount&lt;/label&gt; &lt;input name=\"amount\" [(ngModel)]=\"operation.amount\" type=\"number\"/&gt; &lt;label&gt;Kind of Operation&lt;/label&gt; &lt;select name=\"kind\" [(ngModel)]=\"operation.kind\"&gt; &lt;option [value]=\"\"&gt;Please select a kind&lt;/option&gt; &lt;option *ngFor=\"let kind of kindsOfOperations\" [value]=\"kind\"&gt;&#123;&#123;kind&#125;&#125;&lt;/option&gt; &lt;/select&gt; &lt;button (click)=\"saveOperation()\"&gt;Save&lt;/button&gt;&lt;/form&gt;1.2.1 Identificadores conEn el código anterior apreciaras que junto a elementos del estándar del html aparecen signos extraños. Por ejemplo en la primera etiqueta input aparece un atributo llamado #inputDescription. A estos atributos proporcionados por Angular les llamaremos directivas. La directiva # genera un indentificador único para el elemento al que se le aplica y permite referirse a él en otros lugares del código.1.2.2 Propiedades entre []Un viejo conocido como el atributo value recibe habitualmente un valor concreto, una constante. Pero, si se encierra entre corchetes se convierte en un evaluador de expresiones y puede recibir una variable. En este caso [value]=&quot;operation.description&quot; asigna el valor de esa expresión del modelo al elemento html.1.2.2 Eventos entre ()Los eventos del html llevan años entre nosotros. En Angular se expresan de una manera distinta, encerrándolos entre paréntesis. Los eventos reciben una instrucción a ejecutar cuando el usuario dispare el detonante. Aquí (change) = &quot;operation.description = inputDescription.value&quot; se usa para guardar en el modelo el valor actual del elemento input ante cada cambio en este. Consiguiendo así el doble binding.1.2.3 Modelos entre [()]El patrón anterior podrías replicarlo una y otra vez. Pero en Angular te ofrecen un atajo para estos casos; es la directiva [(ngModel)]. Esta directiva también es conocida como banana in a box porque su sintaxis requiere un () dentro de un [].Por ejemplo [(ngModel)]=&quot;operation.amount&quot; enlaza doblemente el modelo operation.amount con la el elemento input de la vista.2 Las repeticionesUna situación que nos encontramos una y otra vez es la de las repeticiones. Listas de datos, tablas o grupos de opciones son ejemplos claros. Hay una directiva en Angular para esa situación, la *ngFor=&quot;let iterador of array&quot;. La directiva *ngFor forma parte del grupo de directivas estructurales, llamadas aís porque modifican la estructura del DOM, en este caso insertando múltiples nodos hijos a un elemento dado.Puedes ver un ejemplo del uso la directiva *ngFor en el elemento select. Se emplea para recorrer un array y generar a partir de sus valores el grupo de potenciales opciones para el usuario.Pero el caso uso más repetido de las repeticiones es el de mostrar tablas o listas de datos.2.1 TablasLa aplicación del ejemplo tiene un formulario que, aún no te he explicado cómo, guarda el trabajo del usuario en un array. Ese mismo array se muestra como una tabla de datos valiéndose de *ngFor. Para montar una tabla sólo necesito un código como este:123456789101112131415161718192021&lt;table *ngIf=\"numberOfOperations&gt;0;else emptyList\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Description&lt;/th&gt; &lt;th&gt;Kind&lt;/th&gt; &lt;th&gt;Amount&lt;/th&gt; &lt;th&gt;Delete&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr *ngFor=\"let operation of operations\"&gt; &lt;td&gt;&#123;&#123; operation.description &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; operation.kind &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; operation.amount | number:'7.2-2' &#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;button (click)=\"deleteOperation(operation)\"&gt;Delete&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;&lt;ng-template #emptyList&gt; &lt;h3&gt;No operations yet.&lt;/h3&gt;&lt;/ng-template&gt;Todo lo aquí presente son directivas ya conocidas. La famosa directiva estructural *ngFor=&quot;let operation of operations&quot;. Las interpolaciones con tuberías como operation.amount | number:&#39;7.2-2&#39;. La subscripción a eventos de (click)=&quot;deleteOperation(operation)&quot;.2.2 CondicionalesOtra directiva estructural muy utilizada es la *ngIf, la cual consigue que un elemento se incluya o se elimine en el DOM en función de los datos del modelo.En el ejemplo puedes ver que la uso para mostrar la tabla sólo si tiene registrso. En otro aparecerá el mensaje de No operations yet.Todas estas directivas permiten crear interfaces de usuario dinámicas y conducidas por los datos. Es hora de que veas cómo manejar esos datos.3 Modelo y controladorLos componentes los hemos definido como bloques de constucción de páginas. Mediante una vista y un controlador resuelven un problema de interación o presentación de modelos. En los puntos anteriores te presenté la vista. Toca ahora estudiar el modelo y el controlador.3.1 El modeloSin ir muy lejos en las capacidades que tendría un modelo de datos clásico, vamos al menos a beneficiarnos del TypeScript para definir la estructura de datos. Esto facilitará la programación mediante el autocompletado del editor y reducirá los errores de tecleo mediante la comprobación estática de tipos.Para ello necesito una clase sencilla, que bien se podría crear a mano. Pero te recomiendo que sigas familiarizándote con las capacidades de generación de código del CLI y uses el siguiente comando:1ng g class /views/operations/operationEn el fichero resultado operation.ts he metido una definción de clase simple pero que muestra algunas de las capacidades del TypeScript.123456export class Operation &#123; public _id: string; public amount: number = 0; public description: string = \"\"; public kind: string;&#125;Como te digo, este fichero sólo aporta estructura a los datos. Más adelante te contaré dónde codificar los métodos de manejo de datos.3.2 El controladorLa parte de lógica del componente va en la clase que se usa oara us definción. Como ya has visto podemos usar su constructor para reclamar dependencias y usar los interfaces para responder a eventos de su ciclo de vida. Ahora se trata de crear propiedades y métodos con los que comunicarse con la vista.Podemos decir que las propiedades públicas de la clase actuarán como binding de datos con la vista. Mientras que los métodos públicos serán invocados desde los eventos de la misma vista.Mira el código de la clase NewComponenten el fichero new.component.ts:1234567891011121314151617181920212223242526export class NewComponent implements OnInit &#123; public kindsOfOperations = [\"Income\", \"Expense\"]; public numberOfOperations = 0; public operation: Operation = new Operation(); public operations: Operation[] = []; constructor() &#123;&#125; ngOnInit() &#123;&#125; public saveOperation() &#123; const clonedOperation = this.cloneOperation(this.operation); clonedOperation._id = new Date().getTime().toString(); this.operations.push(clonedOperation); this.numberOfOperations = this.operations.length; this.operation = new Operation(); &#125; public deleteOperation(operation: Operation) &#123; const index = this.operations.indexOf(operation); this.operations.splice(index, 1); this.numberOfOperations = this.operations.length; &#125; cloneOperation(originalOperation: Operation): Operation &#123; const targetOperation = Object.assign(&#123;&#125;, originalOperation); return targetOperation; &#125;&#125;Como ves, las propidades kindsOfOperations, numberOfOperations, operation y operations se corresponden con las utilizadas en las directivas de enlace en la vista.Los métodods saveOperation() y deleteOperation(operation: Operation) son invocados desde eventos de elementos del html.Juntos, la vista y su clase controladora, resuelven un problema de interacción con el usuario creando un componente. Todas las páginas que diseñes serán variaciones y composiciones de estos componentes.Ya tienes una aplicación en Angular que recoge y muestra datos. Sigue esta serie para añadirle Flujo de datos entre componentes Angular mientras aprendes a programar con Angular5.Aprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/categories/Tutorial/"},{"name":"Angular","slug":"Tutorial/Angular","permalink":"https://academia-binaria.com/categories/Tutorial/Angular/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"Forms","slug":"Forms","permalink":"https://academia-binaria.com/tag/Forms/"},{"name":"Angular","slug":"Angular","permalink":"https://academia-binaria.com/tag/Angular/"},{"name":"Angular5","slug":"Angular5","permalink":"https://academia-binaria.com/tag/Angular5/"},{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/tag/Introduccion/"}]},{"title":"Páginas y rutas Angular SPA","slug":"paginas-y-rutas-angular-spa","date":"2017-11-13T16:19:14.000Z","updated":"2017-12-20T09:17:19.993Z","comments":true,"path":"paginas-y-rutas-angular-spa/","link":"","permalink":"https://academia-binaria.com/paginas-y-rutas-angular-spa/","excerpt":"Las aplicaciones Angular son conjuntos de páginas enrutadas en el propio navegador. Son las conocidas SPA, Single Page Applications. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.Seguimos usando el concepto de árbol, ahora como analogía de las rutas y las vistas asociadas. Algo que se consigue fácilmente con @angular/router el enrutador de Angular.","text":"Las aplicaciones Angular son conjuntos de páginas enrutadas en el propio navegador. Son las conocidas SPA, Single Page Applications. Estas apps liberan al servidor de una parte del trabajo, reducen la cantidad de llamadas y mejoran la percepción de velocidad del usuario.Seguimos usando el concepto de árbol, ahora como analogía de las rutas y las vistas asociadas. Algo que se consigue fácilmente con @angular/router el enrutador de Angular.Partiendo de la aplicación tal cómo quedó en Base para una aplicación Angular. Al finalizar tendrás un SPA con vistas asociadas a sus rutas.Código asociado a este artículo en GitHub: AcademiaBinaria/angular5/2-spa1. RutasAl crear la aplicación hice uso del flag routing true en el comando de generación del CLI. Esto causó la aparición de no uno, sino dos módulos gemelos en la raíz de la aplicación. Has estudiado el AppModule verdadero módulo raíz, y ahora verás su gemelo: el módulo de enrutado ‘AppRoutingModule’.1.1 RouterModuleEste módulo cumple dos funciones. Por un lado importa al RouterModule que contiene toda la lógica necesaria para enrutar en el navegador. Por otro lado, permite la definición de rutas en el array Routes[].Por motivos estéticos he cambiado el nombre original del fichero app-routing.module.ts a app.routing.ts y así disponer de un icono propio en el tema Material Icon Theme.123456789101112import &#123; Routes, RouterModule &#125; from \"@angular/router\";import &#123; HomeComponent &#125; from \"./views/home/home.component\";const routes: Routes = [ &#123; path: \"\", component: HomeComponent &#125;];@NgModule(&#123; imports: [RouterModule.forRoot(routes)], exports: [RouterModule]&#125;)export class AppRoutingModule &#123;&#125;El array de rutas recibe objetos con propiedades de configuración. La primera es path: en la que se especifica la dirección que resuelve, en este caso la ruta vacía o raíz del árbol de rutas. Otra propiedad fundamental es component la cual indica el componente que se debe mostrar cuando esta ruta se active.En este caso he aprovechado el componente HomeComponent para asociarlo a la ruta raíz. Pero, ¿qué pasará con dicho componente? ¿dónde se cargará?. Presentamos a &lt;router-outlet&gt;.1.2 Router OutletLa idea general de una SPA es tener una única página que cargue dinámicamente otras vistas. Normalmente la página contenedora mantiene el menú de navegación, el pie de página y otras áreas comunes. Y deja un espacio para la carga dinámica. Para ello necesitamos saber qué componente cargar y dónde mostrarlo. De esto último se ocupa la etiqueta &lt;router-outlet&gt;&lt;/router-outlet&gt;.En el app.component.ts había un reclamo directo al componente cf-home. Para hacerlo dinámico se sustituye por &lt;router-outlet&gt;&lt;/router-outlet&gt; quedando algo así:1234567selector: \"cf-root\",template: ` &lt;cf-nav&gt;&lt;/cf-nav&gt; &lt;router-outlet&gt;&lt;/router-outlet&gt; &lt;cf-footer&gt;&lt;/cf-footer&gt;`styles: []Puedes ver los cambios realizados en este commit1.3 Router RedirectLa configuración de rutas no sólo permite asignar componentes a las direcciones. También se pueden hacer redirecciones de unas direcciones a otras. Y por supuesto puede haber rutas no contempladas o errores por parte del usuario, los infames 404 Not Found.Un ejemplo de ambas situaciones sería configurar nuestras rutas de forma que toda ruta desconocida nos lleve a otra general que muestre un mensaje predeterminado. Para hacerlo genera un módulo y un componente llamados NotFound con los siguientes comandos:12ng g m views/not-foundng g c views/not-found/not-found --export --flatVuelve al módulo de enrutado, ahora conocido como app.routing.ts, y agrega dos nuevas entradas al array routes.1234567891011121314const routes: Routes = [ &#123; path: \"\", component: HomeComponent &#125;, &#123; path: \"404\", component: NotFoundComponent &#125;, &#123; path: \"**\", redirectTo: \"/404\" &#125; ];La entrada interesante es la última. Su dirección path: &quot;**&quot; indica que es cualquier ruta que no haya sido resuelta previamente. Un not found de toda la vida. En este caso lo redirijo a una ruta existente: /404. Y a esta última se le asocia un componente concreto, el NotFoundComponent.1.4 Router LinkLos enlaces web tradicionalmente se han resuelto con elementos &lt;a href=&quot;&quot;&gt;&lt;/a&gt; dónde en su atributo href se asociaba la dirección a la cuál navegar ante el click del usuario. En Angular los enlaces se declaran con un atributo especial llamado routerLink. Este atributo se compila dando lugar al href oportuno.En el fichero not-found.component.ts pon algo así:1234567selector: \"cf-not-found\",template: ` &lt;h1&gt;Not Found&lt;/h1&gt; &lt;h2&gt;404&lt;/h2&gt; &lt;a routerLink=\"/\"&gt;Go home&lt;/a&gt;`,styles: []Por ahora la funcionalidad de routerLink no mejora en nada a href. Pero lo hará. Mientras tanto familiarízate con su sintaxis y… asegúrate de importar RouterModule en not-found.module.ts. Puedes ver los cambios realizados hasta ahora en este commit2 Lazy LoadingLas webs SPA se crearon por una razón que casi acaba con ellas: la velocidad. Al realizar el enrutado en el cliente y querer evitar todos los viajes posibles hasta el servidor, se cargó a la única página web con todo el peso de la aplicación. Lo cual la hizo terriblemente lenta en la primera visita de cada usuario.El impacto de la primera visita en una aplicación de intranet no suele ser un problema grave. Pero en internet esa visita puede ser la primera y la última. La solución viene de mano del concepto de lazy loading o carga perezosa. Consiste en diferir la carga de la lógica asociada a una dirección hasta el momento en que sea activada dicha ruta. De esa forma, una página no visitada es una página que no pesa. Y la carga inicial se hace mucho más liviana.2.1 Webpack y los bundles por rutaObjetivo: adelgazar el peso del bundle principal. Para conseguirlo hay que configurar las rutas de forma que no sea necesario importar los componentes a mostrar. De otro modo webpack empaquetaría ese componente como algo necesario… y por tanto sería enviado al navegador en el bundle principal sin que sea seguro su uso. La solución que ofrecen el cli y webpack consiste en delegar la asignación del componente a otro módulo, pero sin importarlo.He creado un una nueva vista para ser usada en una nueva dirección llamada /operations. El componente se llama OperationsComponent y se ha declarado pero no exportado en el módulo OperationsModule.12ng g m views/operations --routing trueng g c views/operations/operations --flatEste módulo no debe ser importado por el AppModule. Simplemente debe usarse su ruta relativa en el módulo de enrutado AppRoutingModule como un valor especial. Fíjate que la dirección del fichero es una cadena de texto asignada a una nueva propiedad de objeto route, la propiedad loadChildren:&quot;&quot;. No se está produciendo ninguna importación en TypeScript como ocurre con los componentes HomeComponent y NotFoundComponent.123456789101112131415161718const routes: Routes = [ &#123; path: \"\", component: HomeComponent &#125;, &#123; path: \"operations\", loadChildren: \"./views/operations/operations.module#OperationsModule\" &#125;, &#123; path: \"404\", component: NotFoundComponent &#125;, &#123; path: \"**\", redirectTo: \"/404\" &#125; ];Con esta información webpack va a generar un bundle específico para este módulo. Si durante la ejecución se activa la ruta /operations entonces descarga ese paquete y ejecuta su contenido. Mientras tanto, se queda almacenado en el servidor.2.2 El enrutador delegadoYa sabemos que hasta que no se active la ruta /operations no hay que hacer nada. Pero si se activa, entonces se descarga un bundle que contiene un módulo y los componentes necesarios. Sólo falta escoger dentro de ese módulo el componente que se asignará a la ruta.Para eso al crear el módulo de operaciones usé el flag routing true. Esto hace que se genere un segundo módulo de enrutado. El OperationsRoutingModule prácticamente idéntico al enrutador raíz. Digamos que es un enrutador subordinado al primero. Sólo se llega aquí si en la ruta principal se ha navegado a una dirección concreta. A este nivel la dirección path: &quot;&quot; se agrega al path: &quot;operations&quot; de su enrutador padre.La ventaja real de este segundo enrutador es que irá empaquetado en el mismo bundle que el módulo de negocio y sus componentes. Aquí sí que asignaremos un componente concreto: el OperationsComponent. Dejando el fichero operations.routing.ts más o menos así:1234567import &#123; OperationsComponent &#125; from \"./operations.component\";const routes: Routes = [ &#123; path: \"\", component: OperationsComponent &#125;];Puedes tener una idea general de los cambios realizados en este commit3 ParámetrosLas rutas vistas hasta ahora se consideran estáticas pues se han definido usando constantes. Es muy habitual tener páginas con la misma estructura pero distintos contenidos. Un blog con sus posts, una tienda con sus productos… hay miles de ejemplos así.Ese tipo de direcciones se consideran paramétricas, tienen unos segmentos estáticos y otros dinámicos. Estos últimos se definen con parámetros, algo así como variables dentro de la cadena de la ruta. Su sintaxis obliga a precederlas de dos puntos. Por ejemplo countries/:country/cities/:city resolvería rutas como countries/usa/cities/new-york o countries/france/cities/paris. Rellenando los parámetros :country y :city con los valores necesarios.1234567891011import &#123; OperationsComponent &#125; from \"./operations.component\";const routes: Routes = [ &#123; path: \"\", component: OperationsComponent &#125;, &#123; path: \":id\", component: ItemComponent &#125;];Esta configuración resuelve las rutas operations y operations/cualquier-cosa. En la primera carga OperationsComponent y en los demás casos el ItemComponent.En la práctica que nos ocupa lo usaremos para ver el detalle de las operaciones económicas realizadas. Como por ahora no tenemos, he puesto de ejemplo algunos números bien conocidos.Para forzar los enlaces he creado un componente a modo de listado llamado ListComponent. La parte interesante de su html es:12345&lt;ul&gt; &lt;li&gt;&lt;a routerLink=\"/operations/271\"&gt;Number e&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a routerLink=\"/operations/314\"&gt;Pi&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a routerLink=\"/operations/667\"&gt;Gravitational Constant&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;Aún más interesante es el componente que muestra cada elemento de la lista, el ItemComponent. En este caso fíjate cómo accede a la ruta, obtiene el valor del parámetro y lo usa para mostrarlo en la web.Contenido del fichero item.component.ts:12345678910111213import &#123; Component, OnInit &#125; from \"@angular/core\";import &#123; ActivatedRoute &#125; from \"@angular/router\";@Component(&#123; selector: \"cf-item\", template: ` &lt;h3&gt;&#123;&#123; _id &#125;&#125;&lt;/h3&gt;`&#125;)export class ItemComponent implements OnInit &#123; _id: any; constructor(private route: ActivatedRoute) &#123;&#125; ngOnInit() &#123; this._id = this.route.snapshot.params[\"id\"]; &#125;&#125;3.1 ActivatedRouteEl framework Angular trae muchas librerías para facilitar la vida al programador. Sólo hay que saber dónde están y cómo pedirlas. Para ello volvemos a la tecnología escogida, TypeScript, que permite las importaciones y la inyección de dependencias.La instrucción import { ActivatedRoute } from &quot;@angular/router&quot;; pone a disposición del programdor el código donde está definida la clase ActivatedRoute, pero no se instancia directamente. En su lugar, se usa como un argumento del constructor de la clase del componente. Ese constructor es invocado por Angular, el cual sabe cómo rellenar los argumentos que le pido. Es decir, sabe cómo inyectar instancias de las que dependo.Una vez que me inyectan las dependencias en el constructor ya están listas para ser usadas como propiedades de la clase. Mágia del TypeScript. En concreto this.route me da acceso a métodos y propiedades para trabajar con la ruta activa y poder leer sus parámetros.3.2 Eventos e interfaces en TypeScriptEl lenguaje TypeScript como superconjunto de JavaScript aporta técnicas de P.O.O. bien conocidas en lenguajes como Java o C#. Por ejemplo la herencia y los interfaces. Los diseñadores de Angular decidieron usar interfaces para implementar el ciclo de vida de los componentes. En lugar de lanzar eventos a los que subscribirse, te piden que implementes métodos de distintas interfaces. Esos métodos serán llamados cuando corresponda, como si fuesen subscripciones a eventos.En este caso la interfaz OnInit obliga a implementar el método ngOnInit() el cual será invocado lo antes posible pero tras la completa construcción del componente. Asegurando así que el código que se ejecute en ese método tenga acceso a un componente completo y totalmente listo.En este commit puedes ver los cambios necesarios para incluir parámetros en la aplicación.Con esto tendrás una aplicación SPA en Angular. Sigue esta serie para añadirle Formularios, tablas y modelos de datos en Angular mientras aprendes a programar con Angular5.Aprender, programar, disfrutar, repetir.– Saludos, Alberto Basalo","categories":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/categories/Tutorial/"},{"name":"Angular","slug":"Tutorial/Angular","permalink":"https://academia-binaria.com/categories/Tutorial/Angular/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"SPA","slug":"SPA","permalink":"https://academia-binaria.com/tag/SPA/"},{"name":"Angular","slug":"Angular","permalink":"https://academia-binaria.com/tag/Angular/"},{"name":"Angular5","slug":"Angular5","permalink":"https://academia-binaria.com/tag/Angular5/"},{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/tag/Introduccion/"}]},{"title":"TypeScript, programa en el front igual que en el back","slug":"typescript-programa-en-el-front-igual-que-en-el-back","date":"2017-03-14T18:02:11.000Z","updated":"2017-03-14T18:10:13.000Z","comments":true,"path":"typescript-programa-en-el-front-igual-que-en-el-back/","link":"","permalink":"https://academia-binaria.com/typescript-programa-en-el-front-igual-que-en-el-back/","excerpt":"Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo back end y el front end. El primero era el de los programadores de verdad, con lenguajes serios y patrones de diseño. El último era el universo de los diseñadores, con lenguajes de segundo nivel y micro scripts o código espagueti descontrolado.","text":"Hasta hace bien poco había dos mundos en la programación casi enfrentados: el desarrollo back end y el front end. El primero era el de los programadores de verdad, con lenguajes serios y patrones de diseño. El último era el universo de los diseñadores, con lenguajes de segundo nivel y micro scripts o código espagueti descontrolado.Pero la llegada de los frameworks MVC en el cliente, llevó grandes cantidades de código al navegador y el desarrollo front end ya nunca sería lo mismo. Primero se portaron los patrones, después las buenas prácticas, más tarde las herramientas y así hasta haber eliminado las fronteras entre back y front.Pero quedaba algo pendiente, el leguaje. En el lado del servidor había multitud de opciones, siendo Java y C# las más aceptadas por la empresa, administración y banca. Pero al otro lado del cable seguía, con algunos retoques, el viejo JavaScript.Y entonces eclosionó TypeScript. Un proyecto maduro creado por el equipo de desarrollo de Microsoft y que lleva a JavaScript al siguiente nivel. Con tipos estáticos (de ahí su nombre) propicia que las herramientas de desarrollo mejoren la productividad y experiencia de los programadores. Y como consecuencia suaviza la rampa de entrada al front para los desarrolladores back.Ya no queda excusas para programar en el cliente igual de bien que en el servidor. Prueba el TypeScript si dominas y te gusta la POO, serás un full stack cuestión de horas.","categories":[{"name":"Opinión","slug":"Opinion","permalink":"https://academia-binaria.com/categories/Opinion/"}],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://academia-binaria.com/tag/TypeScript/"}]},{"title":"Código de ejemplo curso de Angular2","slug":"codigo-de-ejemplo-curso-de-angular2","date":"2016-09-21T06:37:13.000Z","updated":"2016-10-10T06:10:33.000Z","comments":true,"path":"codigo-de-ejemplo-curso-de-angular2/","link":"","permalink":"https://academia-binaria.com/codigo-de-ejemplo-curso-de-angular2/","excerpt":"Enlace a los repositorios con el código de ejemplo para los cursos de Angular2 :","text":"Enlace a los repositorios con el código de ejemplo para los cursos de Angular2 :2.0 cliAcademiaBinaria/angular2Este proyecto es un work in progress.Está basado en el generador Angular-CLI, el más adecuado para aplicaciones realesRC6 SeedAcademiaBinaria/angular2-RC6Aunque es para la RC6 el código es perfectamente compatible con la versión estable.Está basado en el proyecto Angular2-Seed, que es más sencillo que el CLI para empezar.","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"}]},{"title":"Formularios de datos en Angular2","slug":"formularios-de-datos-en-angular2","date":"2016-06-22T14:32:34.000Z","updated":"2016-06-22T16:05:58.000Z","comments":true,"path":"formularios-de-datos-en-angular2/","link":"","permalink":"https://academia-binaria.com/formularios-de-datos-en-angular2/","excerpt":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Formularios, tablas y modelos de datos en AngularLos formularios en AngularJS fueron un éxito inicial debido entre otras coas al double binding. Otra cosa que no fue nunca simple es la validación de controles en los formularios. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un Work in progress.","text":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Formularios, tablas y modelos de datos en AngularLos formularios en AngularJS fueron un éxito inicial debido entre otras coas al double binding. Otra cosa que no fue nunca simple es la validación de controles en los formularios. En Angular 2 y con la última versión RC3 la cosa mejora, pero es aún un Work in progress.DependenciasCon el lío de versiones de los últimos días, conviene que os muestre con qué he hecho mi prueba.123456789101112131415\"dependencies\": &#123; \"@angular/common\": \"2.0.0-rc.3\", \"@angular/compiler\": \"2.0.0-rc.3\", \"@angular/core\": \"2.0.0-rc.3\", \"@angular/forms\": \"^0.1.1\", \"@angular/http\": \"2.0.0-rc.3\", \"@angular/platform-browser\": \"2.0.0-rc.3\", \"@angular/platform-browser-dynamic\": \"2.0.0-rc.3\", \"@angular/router\": \"3.0.0-alpha.7\", \"es6-shim\": \"^0.35.0\", \"reflect-metadata\": \"0.1.3\", \"rxjs\": \"5.0.0-beta.6\", \"systemjs\": \"0.19.26\", \"zone.js\": \"^0.6.12\" &#125;Como veis están actualizadas a la RC.3 y forms 0.1.1.Si usas SystemJS, acuérdate de incluir @angular/forms en el fichero system-config.jsonEn el main.ts debemos registrar los providers que permiten la convivencia de la actual versión de forms y la anterior (de la semana pasada) ya obsoleta.12345import &#123; disableDeprecatedForms, provideForms &#125; from '@angular/forms';bootstrap(CashFlowAppComponent,[ disableDeprecatedForms(), provideForms()]);Plantillas html para hacer formulariosVamos a tratar de mantener el html limpio hasta dónde sea posible. En un futuro espero que incluso sea prescindible y que se pueda generar de forma automática a partir de datos de configuración.123456789101112131415161718192021222324&lt;form [formGroup]=\"formularioMovimiento\"&gt; &lt;label&gt;Tipo:&lt;/label&gt; &lt;input type=\"text\" formControlName=\"tipo\"&gt; &lt;p&gt; &lt;span *ngIf=\"formularioMovimiento.controls['tipo'].touched &amp;&amp; !formularioMovimiento.controls['tipo'].valid\"&gt; Necesitamos el tipo de movimiento &lt;/span&gt; &lt;/p&gt; &lt;label&gt;Categoría:&lt;/label&gt; &lt;input type=\"text\" formControlName=\"categoria\"&gt;&lt;p&gt;&lt;/p&gt; &lt;label&gt;Fecha:&lt;/label&gt; &lt;input type=\"date\" formControlName=\"fecha\"&gt;&lt;p&gt;&lt;/p&gt; &lt;label&gt;Importe:&lt;/label&gt; &lt;input type=\"number\" formControlName=\"importe\"&gt; &lt;p&gt; &lt;span *ngIf=\"formularioMovimiento.controls['importe'].touched &amp;&amp; !formularioMovimiento.controls['importe'].valid\"&gt; Necesitamos el tipo de movimiento &lt;/span&gt; &lt;/p&gt; &lt;button type=\"submit\" [disabled]=\"!formularioMovimiento.valid\" (click)=\"guardarMovimiento()\" &gt;Guardar &lt;/button&gt;&lt;/form&gt;Se incluyen la lógica para mostrar mensajes de validación y activación del botón de guardado. He optado por no usar la definción de variables en la plantilla mediante #.Lógica y datos en el componenteTrataremos de llevar la lógica de generación y validación de datos al componente y programarlo en TypeScript. Puede ser por mi pasado backender pero me encuentro más cómodo cuanto más lejos de un lenguaje de marcas.Para empezar necesitamos registrar las herramientas. El proveedor FormBuilder nos ayuda a definir los controles asociados al formulario y sus validaciones.12345import &#123; REACTIVE_FORM_DIRECTIVES, FormBuilder, FormGroup, Validators &#125; from '@angular/forms';@Component(&#123; directives: [REACTIVE_FORM_DIRECTIVES], providers:[FormBuilder]&#125;)En el evento OnInit construimos la estructura de soporte al formulario. Se puede hacer mucho más compleja, mediante la inclusión de grupos de controles anidados.12345678ngOnInit() &#123; this.formularioMovimiento = this.formBuilder.group(&#123; tipo: ['',Validators.required], categoria: [], fecha: [], importe:['',Validators.required] &#125;); &#125;Antes de enviar datos a un serviciop se pueden hacer validaciones y ttransformacipnes previas. El acceso a los valores del formulario se hace través de su propiedad .value. Con esto ya realizaremos los envíos a los servicios…123guardarMovimiento() &#123; this.miServicio.Guardar(this.formularioMovimiento.value);&#125;ValidaciónLa validación temprana es el objetivo fundamental de un desarrollo de formularios. Es buena para el usuario y buena para el sistema. Angular2 facilita la implementación de las validaciones estándar y permite la creación de las tuyas propias.Lo veremos en próximas entregas. Sígueme en mi cuenta de twitter o suscríbete a la revista mensual de Academia Binaria y serás el primero en ser informado.Aprender, programar, disfrutar, repetir.– Saludos, Alberto BasaloACTUALIZACIÓNPara una versión más reciente del contenido visita la página Formularios, tablas y modelos de datos en Angular","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"Forms","slug":"Forms","permalink":"https://academia-binaria.com/tag/Forms/"}]},{"title":"Comunicaciones http observables con Angular2","slug":"comunicaciones-http-observables-con-angular2","date":"2016-06-16T09:47:28.000Z","updated":"2017-02-16T16:44:21.000Z","comments":true,"path":"comunicaciones-http-observables-con-angular2/","link":"","permalink":"https://academia-binaria.com/comunicaciones-http-observables-con-angular2/","excerpt":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Comunicaciones HTTP en AngularEn AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame plantillas estáticas y datos dinámicos. Las comunicaciones http son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.","text":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Comunicaciones HTTP en AngularEn AngularJS, y en otros frameworks del lado cliente, la idea de fue simple desde el principio: dame plantillas estáticas y datos dinámicos. Las comunicaciones http son las arterias vitales de transporte de esos datos dinámicos. Y en Angular 2 se han revisado por completo, llevando las comunicaciones asíncronas al siguiente nivel.La librería http y otras…Como cabe esperar Angular 2 dispone de su propio módulo de comunicaciones. En la librería @angular/http encontramos el nuevo servicio http que es el cliente usado para enviar y recibir datos.Lo realmente novedoso viene de parte del proyecto Reactive Extensions o RxJS. En su librería rxjs/Observable exporta la clase Observable. Esta clase implementa el patrón observador aplicado a streams de datos. El equipo de Angular ha decidido adoptarlo para procesar los streams de entrada y salida de datos http.Un servicio típico que necesite comunicaciones con el servidor importará al menos estos objetos.1234// Importar objetos de la librería httpimport &#123; Http, Response, RequestOptions, Headers &#125; from '@angular/http';// Importar la clase Observable desde la librería rxjsimport &#123; Observable &#125; from 'rxjs/Observable';Los servicios importados han de ser registrados como providers para poder ser inyectados como dependencias antes de ser consumidos. Ya que se trata de servicios de amplio uso en cualquier aplicación, se recomienda registrarlos en módulos de alto nivel. De esa forma pueden ser reutilizados como singletons.123456789101112// importar la constante con los proveedores de httpimport &#123; HttpModule, Http &#125; from '@angular/http';@NgModule(&#123; declarations: [ ], imports: [ HttpModule, // El módulo con todo lo necesario ], providers:[ Http, // El servicio proveedor ]&#125;);A partir de ese momento cualquier componente o servicio puede reclamar su inyección en el constructor, y lo podrá usar en sus propios métodos.12345678/*** Constructor que reclama dependencias inyectables* Http se encuentra por haberse registrado en este módulo o en uno superior**/constructor(private http: Http) &#123; // en el constructor no debe contener lógica extra // su función es únicamente recibir las dependencias&#125;Observables en lugar de promesasLa naturaleza asíncrona de las comunicaciones entre maquinas se implementó mediante callbacks en JavaScript. Esta forma de programar degenera en código difícil de mantener. Con el tiempo el patrón promesa se impuso, y en AngularJS 1.x es la manera recomendada de programar.Pero las promesas también tiene sus limitaciones, y ahí aparecen los observables. Este patrón requerirá un artículo para el sólo, pero como adelanto se resume en lo siguiente:Tratar todo tipo de información como un stream observable de entrada y de salida, al cual se le pueden agregar operaciones que procesan los flujos de datos.Esto encaja muy bien con las comunicaciones http asíncronas y es la razón de su adopción en Angular 2. Un método de servicio par leer datos REST se parecerá a este snippet:12345678// las llamadas devuelven observablesleerDatos(): Observable&lt;Response&gt; &#123; // Se declara cómo va a ser la llamada // ocultando los pormenores a los consumidores return this.http .get(`$&#123;this.urlBase&#125;/recurso`); // En este momento aún no se efectuó la llamada&#125;Para enviar información via post o put usaremos una estrategia similar, pero con unos requisitos específicos. En Angular 2 se requiere una configuración previa de las llamadas de escritura. Es engorroso pero fácilmente automatizable. Una típica operación de escritura REST sería algo así:12345678910111213141516escribirDatos(unDato): Observable&lt;Response&gt; &#123; // Los envíos de información deben configurarse a mano // esto es fácilmente generalizable y reutilizable let body = JSON.stringify(unDato); let headers = new Headers(&#123; 'Content-Type': 'application/json' &#125;); let options = new RequestOptions(&#123; headers: headers &#125;); // declarar la llamada y retornar el observable // las variables de configuración y los datos, van como parámetros if (unDato._id) &#123; return this.http .put(`$&#123;this.urlBase&#125;/recurso/$&#123;unDato._id&#125;`, body, options); &#125; else &#123; return this.http .post(`$&#123;this.urlBase&#125;/recurso`, body, options); &#125;&#125;Por supuesto esto es lo que se programa a bajo nivel, en los servicios de comunicaciones. En Angular2 se mantiene la recomendación de bajar a servicios la responsabilidad de las comunicaciones al tiempo que dejamos los componentes lo más ligeros posible.Por encima de los servicios de comunicaciones habrá otros servicios de lógica o directamente componentes. En cualquier caso, los consumidores llamarán a métodos que siempre les devolverán objetos observables. Las clases de alto nivel se suscribirán a esos observables y procesarán la respuesta recibida… cuando esta esté disponible.123456789101112// La carga de datos se hace al iniciarse el componente// este es el lugar donde programar lógica de inicio// nunca en el constructorngOnInit() &#123; // en el momento de la suscripción es cuando se dispara la llamada this.datosService .leerDatos() .subscribe(res =&gt; &#123; this.datos = res.json(); &#125;); // Sería similar en procesos de escritura&#125;La clase http no realiza la llamada hasta que algún consumidor se suscriba a la respuesta. Mientras tanto queda como una definición congelada.El método .subscribe() recibe como argumento un puntero a la respuesta http. Los datos se encuentran en formato JSON y hay que reclamarlos mediante el método .json()Extensiones en lugar de interceptoresUna de las características destacables de los servicios $http de AngularJS 1.x era la posibilidad de usar interceptores. Estos eran funciones que se incrustaban durante el envío o recepción de las comunicaciones.Un uso habitual era emplearlos para agregar cabeceras de seguridad o controlar errores de comunicación de manera centralizada. Ahora la forma recomendable de hacer eso mismo en Angular2 es mejorar el servicio http extendiéndolo. El servicio derivado resultante implementará los interceptores en funciones llamadas durante la comunicación.Esta es una posible implementación con funcionalidad suficiente para facilitar los envíos, detectar errores y enviar cabeceras de seguridad.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798@Injectable()/** * Extensión personalizada de la clase HTTP * Permite la configuración de todas las peticiones * Captura los envíos y respuestas * */export class HttpService extends Http &#123; /** Las direcciones base deberían venir de la configuración del environment*/ public apiProxyUrl = 'http://localhost:4030/api/'; private authorization = ''; constructor( backend: XHRBackend, defaultOptions: RequestOptions, private router: Router, private userStore: SessionStoreService ) &#123; super(backend, defaultOptions); this.subscribeToToken(); &#125; /** * Reescribe el método de la clase base, ejecutando acciones para cada petición * La peticiíón en curso puede llegar como una ruta o una clase request * Si viene sólo la cadena, debería traer las opciones aparte * */ request(request: string | Request, options: RequestOptionsArgs = &#123; headers: new Headers() &#125;): Observable&lt;Response&gt; &#123; this.configureRequest(request, options); return this.interceptResponse(request, options); &#125; private subscribeToToken() &#123; // suponemos un servicio que nos avisa de la recepción de tokens this.userStore .getDataObservable() .subscribe((data: Session) =&gt; this.authorization = 'Bearer ' + data.token); &#125; private configureRequest(request: string | Request, options: RequestOptionsArgs) &#123; // Adapta la ruta y asigna cabeceras if (typeof request === 'string') &#123; request = this.getProxyUrl(request); this.setHeaders(options); &#125; else &#123; request['url'] = this.getProxyUrl(request['url']); this.setHeaders(request); &#125; &#125; private interceptResponse(request: string | Request, options: RequestOptionsArgs) : Observable&lt;Response&gt; &#123; const observableRequest = super .request(request, options) .catch(this.onCatch()) .finally(this.onFinally()); return observableRequest; &#125; /** * Transforma la url para llamar a trave´s de un proxy * Útil en caso de problemas con el CORS */ private getProxyUrl(currentUrl) &#123; if (!currentUrl.includes('/assets/')) &#123; return this.apiProxyUrl + currentUrl; &#125; else &#123; return currentUrl; &#125; &#125; /** * Interceptor para componer las cabeceras en cada petición * */ private setHeaders(objectToSetHeadersTo: Request | RequestOptionsArgs) &#123; const headers = objectToSetHeadersTo.headers; headers.set('Content-Type', 'application/json'); headers.set('Authorization', this.authorization); &#125; /** * Interceptor para captura genérica de errores http * */ private onCatch() &#123; return (res: Response) =&gt; &#123; // Security errors if (res.status === 401 || res.status === 403) &#123; // redirigir al usuario para pedir credenciales this.router.navigate(['user/login']); &#125; // To Do: Gestión común de otros errores... return Observable.throw(res); &#125;; &#125; private onFinally() &#123; return () =&gt; console.log('Fin'); &#125;&#125;Podemos usarlo de manera transparente en el resto de la aplicación. Sólo se necesita ajustar el registro de proveedores para dirigir al inyector de dependencias hacia esta nueva clase.123456 providers: [ &#123; provide: Http, // reemplaza el servicio del framework useClass: HttpService // con la clase personalizada que lo extiende &#125;]Este es uno de los usos más potentes de la inversión de control en Angular. Es el programador integrador el que decide el servicio a usar. El programador funcional declara la dependencia en los constructores de sus componentes y servicios, pero no decide la instancia concreta que recibirá.Angular 2 ha trastocado todo lo que hacíamos en las versiones 1.x, pero sólo en la forma. El fondo sigue siendo el mismo: el navegador envía y recibe datos en formato JSON que mezcla con plantillas estáticas para crear HTML en la máquina local y relajar al servidor.Por cierto, por ahora ni rastro del viejo $resource. No tardará en aparecer una versión basada en streams observables. Sígueme en mi cuenta de twitter o suscríbete a la revista mensual de Academia Binaria y en cuanto me entere serás el primero en ser informado.Aprender, programar, disfrutar, repetir.– Saludos, Alberto BasaloACTUALIZACIÓNPara una versión más reciente del contenido visita la página Comunicaciones HTTP en Angular","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"http","slug":"http","permalink":"https://academia-binaria.com/tag/http/"}]},{"title":"Enrutador de componentes con Angular2 el nuevo SPA","slug":"enrutado-con-angular2-el-nuevo-spa","date":"2016-06-02T06:52:04.000Z","updated":"2016-12-07T17:23:02.000Z","comments":true,"path":"enrutado-con-angular2-el-nuevo-spa/","link":"","permalink":"https://academia-binaria.com/enrutado-con-angular2-el-nuevo-spa/","excerpt":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Páginas y rutas Angular SPACódigo asociado en angular2/6-routing/La capacidad de gestionar las rutas en el cliente es una de las grandes ventajas de AngularJS. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa ui-router. Hemos esperado años la promesa de un nuevo enrutador compatible con las versiones 1 y 2. El resultado es @angular/router.De todo Angular2, este es el componente que más ha cambiado durante la fase Release Candidate. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos SPA.","text":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Páginas y rutas Angular SPACódigo asociado en angular2/6-routing/La capacidad de gestionar las rutas en el cliente es una de las grandes ventajas de AngularJS. En la versión 1 nos ofrecían una solución demasiado simple que obligaba a usar librerías de terceros como la famosa ui-router. Hemos esperado años la promesa de un nuevo enrutador compatible con las versiones 1 y 2. El resultado es @angular/router.De todo Angular2, este es el componente que más ha cambiado durante la fase Release Candidate. Actualmente confiamos en que las pequeñas dudas se resuelvan definitivamente y podamos relajarnos creando modernos desarrollos SPA.Módulo de enrutado en base a componentesLas aplicaciones Angular2 son árboles de módulos. Al menos el módulo raíz AppModule y cuantos módulos funcionales nos hagan falta. Utilizando angular-cli podemos crear módulos con la capacidad de enrutado generada en… un módulo específico.A ver si desbrozamos algo este bosque de módulos.1ng new mi-aplicacion --routing trueTanto para la raíz como para las ramas funcionales se creará un fichero. En la raíz será llamado app-routing.module.ts con un contenido como este:123456789101112131415161718192021/** Módulos de enrutado de Angular2 */import &#123; RouterModule, Routes &#125; from '@angular/router';import &#123; NgModule &#125; from '@angular/core';// Array con las rutas de este módulo. Ninguna funcional.const routes: Routes = [ &#123; path: '', redirectTo: '' &#125;, &#123; path: 'inicio', redirectTo: '' &#125;, &#123; path: '**', redirectTo: '', pathMatch: 'full' &#125;];@NgModule(&#123; imports: [ RouterModule.forRoot(routes) // configuración para el módulo raíz ], exports: [ RouterModule // se importará desde el módulo padre ]&#125;)export class AppRoutingModule &#123; &#125;Este módulo de un único fichero sirve para definir las rutas de otro módulo padre asociado, app.module.ts, el cual quedará más o menos así:123456789101112131415161718// importación de módulo de enrutado asociadoimport &#123; AppRoutingModule &#125; from './app-routing.module';// importación de otros módulos de funcionalidadimport &#123; HomeModule &#125; from './home/home.module';// decorador que define un módulo@NgModule(&#123; declarations: [ AppComponent ], imports: [ BrowserModule, FormsModule, HttpModule, HomeModule, // el módulo funcional para la 'página home' AppRoutingModule // el módulo de rutas ya configurado ], providers: [] bootstrap: [ AppComponent ] &#125;)export class AppModule &#123; &#125;Módulos funcionalesEl módulo raíz es fundamental pero nada operativo. Toda el que sea de interés para los usuarios estará en módulos funcionales. En las aplicaciones SPA es una buena práctica crear un módulo por cada ruta principal. Incluida la página home. Por ejemplo usando el siguiente comando:1ng generate module home --routing trueAparece un fichero llamado home-routing-module.ts. Este módulo se debe configurar para que gestione sus propias rutas.123456789101112131415161718192021import &#123; NgModule &#125; from '@angular/core';import &#123; Routes, RouterModule &#125; from '@angular/router';/** Componente enrutable */import &#123; HomeComponent &#125; from './home.component';/** Rutas asociadas a componentes */const routes: Routes = [ &#123; path: '', component: HomeComponent &#125;,];/** array de componentes enrutables */export const routableComponents = [ HomeComponent];@NgModule(&#123; imports: [ RouterModule.forChild(routes) // Para módulo funcional ], exports: [ RouterModule // listo para importarlo en HomeModule ]&#125;)export class HomeRoutingModule &#123; &#125;Se crean dos arrays relacionados. EL principal, routes, contendrá las rutas pareadas con sus componentes respectivos.Los cuales también se exportan directamente en la variable routableComponents. Esto se hace por comodidad. Para no tener que volver a importarlos en la declaración del módulo padre, que quedará así:1234567891011121314import &#123; NgModule &#125; from '@angular/core';import &#123; CommonModule &#125; from '@angular/common';/** Importación de las rutas y sus componentes */import &#123; HomeRoutingModule, routableComponents &#125; from './home-routing.module';@NgModule(&#123; imports: [ CommonModule, HomeRoutingModule // el módulo que sabe enrutar ], declarations: [ routableComponents // los componentes de enrutado ]&#125;)export class HomeModule &#123; &#125;Carga de componentes según la rutaTodo este trabajo de configuración se materializa en las vistas. Necesitaremos un lugar dónde inyectar el componente de turno asociado a la ruta actual. Presentamos el router-outlet. Y para que la aplicación pueda llevarnos de un lugar a otro usaremos la directiva routerLink.De forma que la plantilla raíz app.component.html quedará normalmente así:12345678&lt;!--menú de navegación, sin href--&gt;&lt;nav&gt; &lt;a [routerLink]=\"['/']\"&gt;Inicio&lt;/a&gt; &lt;a [routerLink]=\"['/login']\"&gt;Log In&lt;/a&gt; &lt;a [routerLink]=\"['/contacto']\"&gt;Contacto&lt;/a&gt;&lt;/nav&gt;&lt;!--Este componente nativo hace que el enrutador cargue una página dinámicamente--&gt;&lt;router-outlet&gt;&lt;/router-outlet&gt;Rutas hijas y con parámetrosDe poco vale un enrutador que sólo atienda a los casos sencillos. Las aplicaciones profesionales plantean mayores retos.Rutas hijasUn ejemplo son las rutas anidadas, aquí llamadas rutas hijas. Son aquellas en las que una parte de la visualización es común y otra depende de la ruta concreta.Veamos un ejemplo dónde se pretende dar de alta y mostrar una lista de elementos. La base de cualquier CRUD. Así quedaría el fichero movimientos-routing.module.ts.1234567891011121314151617181920212223242526/** Importación de los componentes enrutables */import &#123; MovimientosComponent &#125; from './movimientos.component';import &#123; ListaComponent &#125; from './lista/lista.component';import &#123; NuevoComponent &#125; from './nuevo/nuevo.component';const routes: Routes = [ &#123; path: 'movimientos', component: MovimientosComponent, children: [ // rutas hijas, se verán dentro del componente padre &#123; path: 'nuevo', // la ruta real es movimientos/nuevo component: NuevoComponent &#125;, &#123; path: 'lista', component: ListaComponent &#125; ] &#125;];export const routableComponents = [ NuevoComponent, ListaComponent, MovimientosComponent]Este mini-módulo es muy denso. Contrasta con la simplicidad del movimientos.module.ts que reduce su responsabilidad. Sólo tiene que importar los módulos adecuados.12345678910111213141516171819import &#123; FormsModule &#125; from '@angular/forms';import &#123; NgModule &#125; from '@angular/core';import &#123; CommonModule &#125; from '@angular/common';/** Módulo de enrutado y componentes */import &#123; MovimientosRoutingModule, routableComponents &#125; from './movimientos-routing.module';@NgModule(&#123; imports: [ CommonModule, FormsModule, MovimientosRoutingModule ], // dependencias de otros módulos, especialmente el de enrutado declarations: [ routableComponents ], // Los componentes vienen del fichero movimientos-routing.module.ts exports: [ ], // no necesita exportar nada&#125;)Vemos que la idea es que los ficheros de definición de módulos funcionales deleguen toda la lógica posible a su propio módulo de enrutado.Mientras tanto en la vista… Habíamos dejado la template del componente raíz con un router-outlet. Será ahí dónde se cargue el MovimientosComponent cuando se active la ruta ‘/movimientos’. Pero, ¿y las rutas hijas?, ¿qué se carga y dónde se carga cuando se activa la ruta ‘/movimientos/nuevo’ o la ruta ‘/movimientos/lista’ ?.Echemos un vistazo a movimientos.component.html para comprobar que dispone de su propio router-outlet.12345&lt;nav&gt; &lt;a routerLink=\"/movimientos/nuevo\" &gt;Nuevo Movimiento&lt;/a&gt; &lt;a routerLink=\"/movimientos/lista\" &gt;Lista de Movimientos&lt;/a&gt;&lt;/nav&gt;&lt;router-outlet&gt;&lt;/router-outlet&gt;Será en este elemento donde se inyecten los componentes asociados a las rutas hijas. Este anidamiento permite hacer aplicaciones modulares y acceder a vistas específicas con rutas específicas.Rutas con parámetrosHasta ahora usé rutas fijas para navegar. Lo más normal es que estas plantillas contengan segmentos variables llamados parámetros. Para incorporar parámetros a tu esquema de rutas tienes que actuar en tres fases:1- Definir la parte paramétrica de la plantilla generadora de rutasEl path del objeto ruta se convierte en una plantilla que admite distintos valores. Así queda ahora el módulo enrutador de movimientos:1234567891011121314151617181920const routes: Routes = [ &#123; path: 'movimientos', component: MovimientosComponent, children: [ // rutas hijas, se verán dentro del componente padre &#123; path: 'nuevo', // la ruta real es movimientos/nuevo component: NuevoComponent &#125;, &#123; path: 'lista', component: ListaComponent &#125; ] &#125;, &#123; path: 'movimientos/:id', // parámetro variable id component: EditorComponent &#125;];Los parámetros se prefijan con : y en cada ruta se pueden usar tantos como sea necesario.Obsérvese que en este caso la ruta ‘movimientos/:id’ es hermana, no hija, de la primera. Por tanto se mostrará en el router-outlet del componente raíz. Se ha hecho así para mostrar distintas maneras de trabajar en el ‘router’.2- Montar los enlaces asignando valores a los parámetrosEsto se puede hacer en las plantillas HTML o en por código. Siempre usando el array de routerLink sin necesidad de concatenar cadenas para para montar rutas. Este array en su segunda posición llevará un objeto que represente los valores de los parámetros.En un caso de navegación por código sencillo tendrá esta pinta:12// para ir a la ruta /movimientos/42this.router.navigate(['movimientos', 42])Usando desde la vista en igual de sencillo con la directiva routerLink, como en este ejemplo HTML:1&lt;a [routerLink]=\"['/movimientos', 42 ]\"&gt;42&lt;/a&gt;3- Recuperar los valores de los parámetros a partir de las rutasLa novedad más llamativa es la presencia de OnInit. Es un hook, o evento de la vida de un componente. Este evento se ejecuta al iniciarse el componente pero cuando ya la ruta se ha resuelto completamente.En ese momento puedes usar ActivatedRoute, un servicio que entre otras cosas te dará acceso a un observable que emite los valores actuales de los parámetros.Por ejemplo, esto sería el código del componente editor.component.ts que se activa con rutas como ‘/movimientos/42’12345678910111213141516171819202122232425import &#123; Component, OnInit &#125; from '@angular/core';/** Servicio para acceder a la ruta activa */import &#123; ActivatedRoute &#125; from '@angular/router';import &#123; DatosService &#125; from './../datos.service';@Component(&#123; selector: 'app-editor', templateUrl: './editor.component.html', styleUrls: ['./editor.component.css']&#125;)export class EditorComponent implements OnInit &#123; public movimiento; constructor( private route: ActivatedRoute, private datosService: DatosService) &#123; // constructor vacío. sólo se usa para reclamar dependencias &#125; ngOnInit() &#123; // subscripción al observable params this.route.params .subscribe(params =&gt; &#123; const _id = params['id'].toString(); this.movimiento = this.datosService.getMovimientoBy_Id(_id); &#125;); &#125;&#125;Hay una estrategia opcional que emplea Observables para mantener potenciales cambios de estado en los valores de los parámetros. Si te interesa busca información sobre Router .Carga diferidaEsta es la funcionalidad más esperada y que sigue siendo un work in progress. Cuando las aplicaciones AngularJS crecen en funcionalidad producen un impacto negativo en la primera vista de un usuario. Eso es debido a que Angular necesita disponer de todo tu código para montar el armazón de dependencias. Esto es así aunque el usuario no vaya a navegar mas que por un conjunto reducido de rutas.En aplicaciones de intranet o de uso muy intensivo esto no suele ser un gran problema. Esa espera inicial de unos pocos segundos se recupera durante el uso continuado de la aplicación. Pero ciertos desarrollos realmente grandes o, sobre todo, aplicaciones web públicas para usuarios ocasionales necesitaban un tratamiento especial.La solución es implementar un modelo de lazy loading o carga diferida. En este caso el navegador descarga el HTML y el código de la aplicación según el usuario navegue.En Angular2 se incluye esta funcionalidad, pero a día de hoy aún no está disponible con angular-cli. Se puede tunear WebPack a mano para conseguirlo, pero, si no hay urgencia en salir a producción, no te lo recomiendo. Es preferible esperar un poco y usar el la solución definitiva que implemente la herramienta.En cuanto sea usable actualizaré este artículo y difundiré la buena nueva a los cuatro vientos. Como sabes aún estamos esperando la primera Release Candidate de angular-cli y habrá mejoras importantes.Mantente a la última recibiendo el boletín de noticias de Academia Binaria o siguiéndome en las redes sociales.Aprender, programar, disfrutar, repetir.– Saludos, Alberto BasaloACTUALIZACIÓNPara una versión más reciente del contenido visita la página Páginas y rutas Angular SPA","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"SPA","slug":"SPA","permalink":"https://academia-binaria.com/tag/SPA/"}]},{"title":"Angular2 DI: Inyección de dependencias","slug":"angular2-di-inyeccion-de-dependencias","date":"2016-05-30T09:09:09.000Z","updated":"2016-11-10T13:52:13.000Z","comments":true,"path":"angular2-di-inyeccion-de-dependencias/","link":"","permalink":"https://academia-binaria.com/angular2-di-inyeccion-de-dependencias/","excerpt":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Servicios inyectables en AngularCódigo asociado en angular2/4-injection/AngularJS2 tiene vocación de framework para grandes aplicaciones de negocio. Los grandes desarrollos requieren modularidad en el código. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón Dependency Injection.Los cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer aplicaciones de negocio con HTML y JavaScript de manera controlable.","text":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Servicios inyectables en AngularCódigo asociado en angular2/4-injection/AngularJS2 tiene vocación de framework para grandes aplicaciones de negocio. Los grandes desarrollos requieren modularidad en el código. En AngularJS se resuelve mediante la Inyección de Dependencias, siguiendo el conocido patrón Dependency Injection.Los cambios en la versión 2 son sobre todo sintácticos, pero también conceptuales. Se mantiene el mismo objetivo, permitir hacer aplicaciones de negocio con HTML y JavaScript de manera controlable.Módulos, componentes y serviciosEn AngularJS 1 teníamos muy presente el concepto de módulo. Rara era la aplicación que no comenzase con el mítico angular.module(&#39;miAplicacion&#39;). Dada la carencia de un sistema modular nativo en JavaScript, AngularJS nos proveía de uno propio.Hoy en día se nos sugiere que usemos las versiones avanzadas de JS, o mejor aún TypeScript. Estos lenguajes nos ofrecen las instrucciones export e import que permiten definir módulos estancos en ficheros independientes. Nunca más el engorroso envolvimiento IIFE (function () { … }()).A partir de ahí es el programador el que selectivamente exporta funcionalidad que importará para ser consumida mas tarde. De este modo, Angular se desentiende de la creación de módulos de código y se centra en la comunicación entre los objetos que componen la aplicación.ComponentesSon los bloques de construcción agrupables en compuestos que forman la interfaz visual de una aplicación. Encapsulan la vista, los datos y la lógica para interactuar con el usuario.Ni la vista ni la lógica deben crecer y realizar tareas que no sean de su exclusiva capa de responsabilidad. Esas tareas debe ser delegadas en otros objetos.Modelo de composición de componentes visuales para crear vistas complejas. La comunicación o Data Flow se realiza de manera declarativa. Enviando datos a las propiedades de los hijos y esperando eventos con respuestas.ServiciosLos servicios serán objetos especializados y reutilizables por otros servicios y componentes. En su definición debes aplicar los mismos principios de arquitectura de software que ya conoces y aplicas en lenguajes clásicos tipo Java o C#.net.La sintaxis de la comunicación involucra varios bloques en ambos lados del canal:la definición del servicio decorado como @Injectable() en el proveedor,la exportación en el proveedor y la importación en el consumidor,el registro en el array providers:[] del componente consumidor (o mejor del módulo) conumidor yel consumo en el constructor del componente o servicio consumidor.1234567891011121314import &#123; Component, OnInit &#125; from '@angular/core';import &#123; MovimientosService, Movimiento &#125; from '../shared/';@Component(&#123; selector: 'movimiento', templateUrl: 'movimiento.component.html', providers: [MovimientosService] &#125;)export class MovimientoComponent &#123; movimiento: Movimiento constructor(public movimientosService: MovimientosService) &#123; &#125; guardarMovimiento() &#123; this.movimientosService.guardarMovimiento(this.movimiento) &#125;&#125;DirectivasLas directivas eran el ADN de AngularJS1. Ahora han mutado en componentes reutilizables como elementos en las vistas de otros componentes de rango superior. Pero la idea es la misma, desglosar las plantillas de HTML en bloques con un propósito único.La sintaxis de las directivas es similar:la definición del servicio decorado como @Injectable() en el componente hijo,la exportación del hijo y la importación en el padre,el registro en el array directives:[] del componente padre (o del módulo padre) yel consumo declarativo en la plantilla de la vista padre.12345678910111213import &#123; Component &#125; from '@angular/core';import &#123; MovimientoComponent &#125; from './movimiento';@Component(&#123; selector: 'injection-app', template: '&lt;h1&gt; &#123;&#123;titulo&#125;&#125; &lt;/h1&gt; &lt;movimiento&gt;&lt;/movimiento&gt;', directives:[MovimientoComponent]&#125;)export class InjectionAppComponent &#123; titulo = 'Inyectores listos!';&#125;RegistroLa inyección de las dependencias funciona de manera jerárquica en AngularJS 2. Cuando un módulo registra una dependencia la pone a disposición de todos sus componentes hijos. Es más, si algún hijo la volviese a registrar se le proveería de otra instancia.Esta copia puede provocar efectos colaterales indeseados. Para compartir datos o ahorrar memoria se recomienda registrar las dependencias lo más arriba posible. Esto siempre sin sacrificar la modularidad o la escalabilidad de aplicaciones que requieran lazy loading.Atención a la copia de routeService que se registra por segunda vez. No importa que ya la haya registrado su padre. Otro registro implica otra instancia.Para ciertos casos, AngularJS 2 permite modelos de inyección más avanzados. Mediante el uso de factorías y el registro de cadenas con los nombres de los servicios facilita la inyección a voluntad o la carga diferida.Algunas de estas posibilidades están siendo retocadas durante la actual Release Candidate, y se esperan cambios de cara a las próxima versión estable.El viejo principio de divide y vencerás se aplica rotundamente en las aplicaciones Angular 2. Si creas módulos reutilizables estarás sentando las bases para crear grandes aplicaciones de negocio con AngularJS.Aprender, programar, disfrutar, repetir.– Saludos, Alberto BasaloACTUALIZACIÓNPara una versión más reciente del contenido visita la página Servicios inyectables en Angular","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"DI","slug":"DI","permalink":"https://academia-binaria.com/tag/DI/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"}]},{"title":"DataBinding el flujo de datos de Angular2","slug":"databinding-el-flujo-de-datos-de-angular2","date":"2016-05-25T15:26:32.000Z","updated":"2016-11-10T13:56:46.000Z","comments":true,"path":"databinding-el-flujo-de-datos-de-angular2/","link":"","permalink":"https://academia-binaria.com/databinding-el-flujo-de-datos-de-angular2/","excerpt":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Flujo de datos entre componentes AngularCódigo asociado en angular2/3-databinding/El doble binding o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva ng-model enganchamos una propiedad del modelo con un control de la vista. De manera automágica Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía.Pero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del flujo de datos entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:","text":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Flujo de datos entre componentes AngularCódigo asociado en angular2/3-databinding/El doble binding o enlace vista controlador en ambos sentidos es una de las claves del éxito de AngularJS. Usando la célebre directiva ng-model enganchamos una propiedad del modelo con un control de la vista. De manera automágica Angular se suscribe a cambios en el DOM y observa el estado del modelo manteniéndolos en sincronía.Pero esto tiene un coste en rendimiento que Angular2 supera con un patrón distinto para el control del flujo de datos entre la vista y el modelo. Este nuevo paradigma ofrece soluciones para distintos escenarios:Sólo lectura: modelo hacia la vista1- InterpolaciónEn este primer caso todo nos resultará muy familiar. En efecto la sintáxis de interpolación es la mismoa que en AngularJS 1.x. eso si, en este caso y por defecto, los datos son de sólo lectura y Angular no se preocupa de actualizar la variable.12&lt;p&gt;Hola &#123;&#123;nombreDelProgramador&#125;&#125; bienvenido a Angular2&lt;/p&gt;&lt;p&gt;Fecha de nacimiento: &#123;&#123;fechaDeNacimiento | date&#125;&#125;&lt;/p&gt;2- Enlace a propiedadesEs la comunicación básica hacia la vista, hacia el usuario. En este caso cualquier atributo de un elemento HTML puede enlazarse al valor de una propiedad encerrándola entre corchetes y asignándole una expresión. [propiedad]=&quot;expresion&quot;1234&lt;p&gt;Hola &lt;input [value]=\"nombreDelProgramador\" readonly &gt;&lt;/input&gt; bienvenido a Angular2&lt;/p&gt;&lt;a [href]=\"url-academia-binaria\"&gt;Academia Binaria&lt;/a&gt;&lt;div [hidden]=\"usuarioAutenticado\"&gt;Identifícate&lt;/div&gt; &lt;div [hidden]=\"!usuarioAutenticado\"&gt;Hola &#123;&#123;nombreUsuario&#125;&#125;&lt;/div&gt;Sólo escritura: de la vista hacia el modelo1- EventosLa comunicación desde la vista hacia el modelo se realiza mediante eventos. Es una buena práctica llamar a funciones del componente de forma declarativa en la vista.La sintaxis requiere que se nombre el evento entre paréntesis y se le asigne una expresión como valor. (evento)=&quot;expresion&quot;12345&lt;input (keyup)=\"onKey($event)\" /&gt;&lt;input #nombre (keyup.enter)=\"propiedad=nombre.value\" (blur)=\"propiedad=nombre.value\"&gt;&lt;button (click)=lanzarCohete()&gt;Lanzar cohete&lt;/button&gt;Lectura y escritura: bidireccional1- Enlace doble.Este es el caso más común en la edición de formularios. Y es el equivalente al viejo y glorioso doble binding. Es la combinación de los dos anteriores y eso se refleja en la sintaxis. Recordad [] para leer propiedades y () para enviar datos en respuesta a eventos: el resultado es la llamada banana in a box [()]. En este caso se completa con la directiva ngModel y la propiedad enlazada. [(ngModel)]=&quot;propiedad&quot;12&lt;input type=\"text\" [(ngModel)]=\"nombreDelProgramador\" &gt;Hola &#123;&#123;nombreDelProgramador&#125;&#125;ResumenEste es un ejemplo recopilatorio de las capacidades de Angular2 en cuanto a la sintaxis declarativa en las plantillas HTML de los componentes. Recordad este mantra que revisaremos durante la composición de componentes en aplicaciones complejas:Los datos fluyen hacia las propiedades de los componentes hijos. Los eventos brotan desde los hijos hacia los padres. Sólo usamos enlace doble en los formularios que así lo requieran.1234567891011121314151617&lt;h1&gt; &lt;!--Interpolación de variables definidas en el modelo del componente--&gt; &#123;&#123;title&#125;&#125;&lt;/h1&gt;&lt;form&gt; &lt;label&gt;¿Cómo te llamas?&lt;/label&gt; &lt;!--Enlace doble (lectura y escritura) entre la vista y el modelo--&gt; &lt;input type=\"text\" [(ngModel)]=\"aprendiz\" /&gt; &lt;p&gt;Bienvenido a Angular 2 &#123;&#123; aprendiz &#125;&#125; &lt;/p&gt; &lt;!--Expresiones--&gt; &lt;p&gt;Soy capaz de multiplicar por &#123;&#123;1 * 2&#125;&#125; tus habilidades &lt;/p&gt; &lt;!--Eventos--&gt; &lt;button (click)=\"visible=true\"&gt;Saludar&lt;/button&gt; &lt;!--Propiedades--&gt; &lt;p [hidden]=\"!visible\"&gt;Hola Mundo!!!&lt;/p&gt;&lt;/form&gt;En estos ejemplos se han visto propiedades y eventos estándar. Pero todo lo dicho es aplicable a las propiedades y eventos especialmente creados para tus componentes.El objetivo, conseguido, es aumentar el rendimiento. Y un efecto colateral es la simplificación del API de AngularJS. Desaparecen casi todas las directivas estructurales. Especialmente las famosas ng-click ng-blur y demás directivas asociadas a eventos. Tampoco se necesitan más las directivas de ng-show y ng-hide.Las únicas directivas estructurales que permanecen son *ngIf *ngSwitch y *ngFor. Pero esas merecen tratamiento aparte.Aprender, programar, disfrutar, repetir.– Saludos, Alberto BasaloACTUALIZACIÓNPara una versión más reciente del contenido visita la página Flujo de datos entre componentes Angular","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"Forms","slug":"Forms","permalink":"https://academia-binaria.com/tag/Forms/"}]},{"title":"Componentes, los bloques de construcción de Angular2","slug":"componentes-los-bloques-de-construccion-de-angular-2","date":"2016-05-23T12:07:27.000Z","updated":"2016-11-07T17:39:26.000Z","comments":true,"path":"componentes-los-bloques-de-construccion-de-angular-2/","link":"","permalink":"https://academia-binaria.com/componentes-los-bloques-de-construccion-de-angular-2/","excerpt":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Base para una aplicación AngularCódigo asociado en GitHub: angular2/2-modulos/Los componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora el componente es el rey.Las aplicaciones en Angular2 se desarrollan como árboles de componentes. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en módulos para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.1- Nivel Raíz:Toda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo App o simplemente App.2- Nivel Troncal:Generalmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón Navegador-Contenedor, con algún elemento auxiliar para ayudas, mensajes, menús complejos…3- Nivel de Ramas:En este símil, las ramas equivalen a rutas o vistas de la aplicación. En un SPA cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor4- Nivel de Hojas:Cada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas.Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.","text":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Base para una aplicación AngularCódigo asociado en GitHub: angular2/2-modulos/Los componentes son los bloques de construcción de la web moderna. En Angular 2 sustituyen al viejo par Vista-Controlador, el cual ya era opcional en las últimas versiones 1.x Ahora el componente es el rey.Las aplicaciones en Angular2 se desarrollan como árboles de componentes. Estos árboles pueden llegar a ser muy frondosos y conviene dirigir su crecimiento agrupándolos en módulos para no perderse. Yo procuro estructurarlo en niveles para una mejor comprensión. En cada nivel se crea un módulo y dentro de él se declaran los componentes.1- Nivel Raíz:Toda aplicación parte de un componente raíz. Suele recibir el nombre de la aplicación desarrollada y el sufijo App o simplemente App.2- Nivel Troncal:Generalmente dos o tres componentes troncales para la estructura de las páginas. Es común el patrón Navegador-Contenedor, con algún elemento auxiliar para ayudas, mensajes, menús complejos…3- Nivel de Ramas:En este símil, las ramas equivalen a rutas o vistas de la aplicación. En un SPA cada ruta tiene una vista asociada que se carga dentro del componente troncal contenedor4- Nivel de Hojas:Cada una de las vistas está a su vez formada por múltiples componentes de negocio a modo de hojas.Con la salvedad de que muchos de estos componentes los puedes reutilizar en distintas vistas.MódulosLos árboles de componentes pueden ocultarnos fácilmente el bosque de nuestra aplicación. Los módulos son agrupaciones de componentes. Nos ayudan a mantener un orden y a encapsular funcionalidad para crear aplicaciones desacopladas con bloques re-utilizables.No confundir con los módulos de JavaScript ES6 o de TypeScript. En estos casos se les llama módulos a los ficheros de código que exportan funcionalidad.Podemos imaginar un módulo como una fábrica de funcionalidad.Importa componentes que otros módulos exportan.Declara los componentes que el mismo fabrica.Exporta algunos de estos componentes, para que los consuman otros módulos.Anatomía de un ComponenteEn el artículo de bienvenida a Angular 2 teníamos una aplicación de un sólo módulo con un sólo componente. Y nos sirvió para ver su estructura: plantilla, decorador y clase.La plantilla en HTML y la clase en JS equivalen a las antiguas vistas y controladores. La metadata une ambos mundos y registra el componente para que interacciones con el resto del mundo Angular.La comunicación de datos entre la plantilla y el componente se realiza siguiendo un remozado workflow de propiedades y eventos. El nuevo data-binding de Angular2 merece estudio en detalle pues su sintaxis ha cambiado para poder estar a la altura del rendimiento exigido.Generación de módulos y componentes con angular-cliSobre la base de ese ‘Hola Mundo’ vamos construir una mini aplicación muy sencilla para guardar movimientos económicos. El To Do List de los ingresos y gastos.Empezaré creando otro módulo con su componente para ser integrado en el componente raíz del módulo raíz. Por ahora será un componente de negocio vacío: el componente movimientos. Puedes escribir a mano cada nuevo módulo o componente, pero si usas Angular CLI lo tendrás generado con un sólo comando:1234567891011ng g m movimientos``` Verás que se ha creado una carpeta llamada `movimientos` con una estructura que pronto te será muy familiar. Para empezar un archivo para el nuevo módulo, el `movimientos-module.ts`. Después una serie de ficheros para crear su componente principal. Un fichero `movimientos-component.ts` para la clase controladora y el decorador con la *metadata*, y otro fichero `movimientos-component.html` para la plantilla.Reproduzco ahora su contenido básico. Primero la plantilla HTML```html&lt;p&gt; movimientos works!&lt;/p&gt;Y ahora la definición del componente en TypeScript. El cual no sabe en qué módulo acabará.123456789101112import &#123; Component, OnInit &#125; from '@angular/core';// decoración con metadata para el componente@Component(&#123; selector: 'app-movimientos', // ojo al prefijo, por defecto app templateUrl: './movimientos.component.html', // podrían ser inline styleUrls: ['./movimientos.component.css'] // podrían ser inline&#125;)export class MovimientosComponent implements OnInit &#123; constructor() &#123; &#125; ngOnInit() &#123; &#125;&#125;Para que este componente sea conocido ha de estar al menos declarado y exportado en algún módulo. En este caso aparece en el fichero movimientos-module.ts1234567891011121314151617import &#123; NgModule &#125; from '@angular/core';import &#123; CommonModule &#125; from '@angular/common';/** Importa un componente que declara y que luego exporta */import &#123; MovimientosComponent &#125; from './movimientos.component';@NgModule(&#123; imports: [ CommonModule ],// dependencias de otros módulos declarations: [ MovimientosComponent ],// Componente que el módulo mismo declara exports: [ MovimientosComponent ] // exporta los componentes importables desde otros módulos&#125;)export class MovimientosModule &#123; &#125;Consumo desde un componente padreEl componente movimientos está creado pero nadie lo usa. Para darle utilidad hay que consumirlo. Vamos tocar los ficheros ‘app.module.ts’ y ‘app.component.html’ Son siempre estos tres sencillos pasos:1- Importar el módulo que lo exporta12// 1 importación del código del módulo funcionalimport &#123; MovimientosModule &#125; from './movimientos/movimientos.module';2- Registro en el array de importaciones del módulo raíz123...imports:[..., MovimientosModule] // 2 registro del modulo importado con todo lo que exporta...3- Uso del componente como un elemento html en la plantilla del padre1234567&lt;h1&gt; &lt;!--enlace con propiedades del componente--&gt; &#123;&#123;title&#125;&#125;&lt;/h1&gt;&lt;!-- 3 los componentes personalizados se usan como elementos estándar en html--&gt;&lt;!--componente movimientos--&gt;&lt;app-movimientos&gt;&lt;/app-movimientos&gt;Esta manera de encapsular componentes unos dentro de otros permite crear grandes aplicaciones de tamaño empresarial sin sacrificar la limpieza del código. Cada componente debe diseñarse de forma que resuelva un problema de negocio concreto, por tanto manejable. Y si puede ser reutilizable mucho mejor.La agrupación de componentes en módulos ayuda a mantener la aplicación organizada.Aprender, programar, disfrutar, repetir.– Saludos, Alberto BasaloACTUALIZACIÓNPara una versión más reciente del contenido visita la página Base para una aplicación Angular","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"CLI","slug":"CLI","permalink":"https://academia-binaria.com/tag/CLI/"}]},{"title":"Hola Mundo Angular 2","slug":"hola-mundo-en-angular-2","date":"2016-05-18T14:10:18.000Z","updated":"2016-10-31T11:36:28.000Z","comments":true,"path":"hola-mundo-en-angular-2/","link":"","permalink":"https://academia-binaria.com/hola-mundo-en-angular-2/","excerpt":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Hola Angular CLICódigo asociado en GitHub: angular2/1-HolaMundo/Qué lejanos aquellos tiempos dónde un Hola Mundo en AngularJS se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear aplicaciones de nivel empresarial con Angular 2.Ya he explicado que Angular ha pasado de framework a plataforma, y que ya no es para aficionados. Grandes desarrollos en equipo requieren herramientas y procedimientos a la altura. La primera opción que te recomiendo es Angular CLI, un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es aún más compleja que la que te muestro.","text":"ACTUALIZACIÓN: para una versión más reciente del contenido visita la página Hola Angular CLICódigo asociado en GitHub: angular2/1-HolaMundo/Qué lejanos aquellos tiempos dónde un Hola Mundo en AngularJS se hacía en 2 líneas de código. Ahora necesitaré miles de ficheros y media hora de explicación. Pero el resultado valdrá la pena. Estaremos en la pista de lanzamiento para crear aplicaciones de nivel empresarial con Angular 2.Ya he explicado que Angular ha pasado de framework a plataforma, y que ya no es para aficionados. Grandes desarrollos en equipo requieren herramientas y procedimientos a la altura. La primera opción que te recomiendo es Angular CLI, un generador de aplicaciones trufado de buenas prácticas y procedimientos. Por raro que te parezca, cualquier otra opción es aún más compleja que la que te muestro.Preparando el entornoLas herramientas que voy a usar requieren NodeJS. Te recomiendo que instales una de sus últimas versiones. Tras la instalación tendrás acceso a npm para poder instalar librerías y utilidades como Angular CLI.1npm install -g angular-cliA partir de ahora en tu linea de comandos podrás usar el programa ng seguido de algún comando como new generate serve lint test e2e build. Usaremos algunos en esta demo.Creando aplicaciones y componentesEscoge un directorio en un disco con espacio libre. No es broma, hasta 300 mb o más para empezar. Tranquilo, en distribución la cosa pinta mucho mejor y Angular es muy ligero. Ahora teclea:1ng new hola-angular-2Unos segundos o minutos más tarde… podrás abrir la recién creada carpeta, yo lo hago con VSCode, y explorar el contenido de sus 3 directorios y miles de ficheros!!!Después del susto, tranquilidad de nuevo. La mayoría son dependencias de terceros productos, herramientas necesarias para ejecutar aplicación o para alguno de sus procesos de test, lint o distribución. Centrémonos en el directorio src dónde están los fuentes, el código que tendríamos que haber creado nosotros.De un primer vistazo puede que sólo reconozcas al viejo index.html. No te agobies, por ahora es suficiente. Contendrá algo como esto:1234567891011121314&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;HolaAngular2&lt;/title&gt; &lt;base href=\"/\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;&lt;/head&gt;&lt;body&gt; &lt;!--Componente raíz de la aplicación--&gt; &lt;app-root&gt;Loading...&lt;/app-root&gt;&lt;/body&gt;&lt;/html&gt;De lo que es Angular 2 lo único interesante es el componente &lt;app-root&gt;Loading...&lt;/app-root&gt;. Todo, incluida la aplicación principal, debe ser definido y declarado como un componente. De hecho definiremos las aplicaciones Angular2 como árboles de componentes. Y tdodo árbol debe tener una raíz. Mientras Angular no entre en fucionamiento, el susario verá el mensaje de Loading… después la magia de Angular2 lo sustituirá por el contenido del componente app-root predefinido por el generador.TypeScriptSin entrar en debates de qué lenguaje usar para programar en Angular2 te resumo mi posición:1.- TypeScript te permite anotar tu JavaScript con tipos. Esto tiene dos ventajas: intellisense mientras codificas y chequeo de tipos cuando compilas.2.- TypeScript es la única opción automatizada a día de hoy con Angular CLI.Por lo demás no hay porqué alarmarse. TypeScript es un superset de JavaScript ES6 con unas mejoras evidentes que no tardarás en dominar. Eso si, tienes que aprender JavaScript ES2015 o ES6.Sabiendo esto, entra sin miedo en cualquier fichero de extensión .ts y verás que es muy parecido a cualquier .js de la nueva versión. Por ejemplo en el citado main.ts aparecerá algo así:1234567891011121314151617// importaciones de dependencias TypeScript al estilo ES6// primero los básicos para compatibilidad con navegadoresimport './polyfills.ts';// luego cosas de Angularimport &#123; platformBrowserDynamic &#125; from '@angular/platform-browser-dynamic';import &#123; enableProdMode &#125; from '@angular/core';// después nuestro código, empezando por la configuraciónimport &#123; environment &#125; from './environments/environment';// y por último la aplicación a leída desde el módulo raíz, llamado app por convenio.import &#123; AppModule &#125; from './app/';// condiciones para ejecutar en modo desarrollo o producciónif (environment.production) &#123; enableProdMode();&#125;// arranque de la aplicación invocando al módulo raízplatformBrowserDynamic().bootstrapModule(AppModule);Centrándonos en el código que habremos de mantener fíjate en la línea import { AppModule } from &#39;./app/&#39;;. Le indica a WebPack que importe el contenido de la carpeta ./app/. Para ello buscará en dicho directorio un archivo index.ts. Ese fichero sirve de índice y contiene las instrucciones para exportar el código interesante del resto de la carpeta. En nuestro caso son el módulo y el componente raíz.El módulo raízLas aplicaciones Angular2 están pensadas para crecer. Para ello es fundamental cierto grado de modularidad. EL viejo angular.module ha vuelto en la versión 2. Mira dentro del fichero app.module.ts y verás código similar a este:1234567891011121314151617181920212223// objetos con utilidades comunes del frameworkimport &#123; BrowserModule &#125; from '@angular/platform-browser';import &#123; NgModule &#125; from '@angular/core';import &#123; FormsModule &#125; from '@angular/forms';import &#123; HttpModule &#125; from '@angular/http';// importación del componente raíz, definido en esta misma carpetaimport &#123; AppComponent &#125; from './app.component';// decorador con metadata que define un módulo@NgModule(&#123; declarations: [ AppComponent ], // cosas declaradas en este módulo imports: [ BrowserModule, FormsModule, HttpModule ], // otros módulos que necesitamos para que este funcione providers: [] , // inyección de servicios comunes para la aplicación bootstrap: [AppComponent] // componente raíz para el arranque&#125;)// los módulos son clases contendoras // habitualmente con poco o ningún códigoexport class AppModule &#123; &#125;Un módulo no es más que una clase contenedora. Cada módulo puede incluir múltiples componentes y servicios. Normalmente un módulo dependerá de otros. El módulo raíz declara un componente especial para el arranque de la aplicación: El componente raízEl componente raízBuceando a mayor profundidad nos encontramos con el resto del contenido de la carpeta ./app/. Son archivos con nombres tipo app.component.* y se usan para definir un componente.Los componentes son los bloques de construcción de Angular 2 que representan regiones de la pantalla. Las aplicaciones se definen como árboles de componentes. Nuestra aplicación es un árbol que tiene una raíz, habitualmente llamado app y que es común a cualquier desarrollo.Cada componente a su vez está formado por tres partes:La vista: es el código que se renderizará para los usuarios. Esta plantilla estará en un fichero de extensión .html.La clase controladora: En ES6 usaremos clases para declarar los controladores que exponen datos y funcionalidad a la vista.Metadata: Se declara como un decorador, una función especial de TypeScript, que recibe un objeto de configuración. Esto acompaña al controlador en un fichero de extensión .tsEmpecemos por este último fichero, el app.component.ts.12345678910111213141516import &#123; Component &#125; from '@angular/core';// Función decoradora que registra un componente@Component(&#123; selector: 'app-root', // elemento html consumidor templateUrl: './app.component.html', // ruta relativa a la vista styleUrls: ['./app.component.css'] // potencialmente múltiples hojas de estilo&#125;)// clase que representa un controlador // con su modelo de datos (title ) y métodos de acción (aún no tiene)// Esta clase es todo lo que se exporta en este fichero// y esto se importará en app.module.ts para ser incorporado el módulo raízexport class AppComponent &#123; // las propiedades de la clase representan el modelo de datos // son accesibles desde la vista title = 'app works!';&#125;Seguro que la parte más novedosa es @Component({...}). Es el equivalente a los antiguos Objetos de Definición de Directivas. Lo que hace es asociar al controlador una plantilla HTML app.component.html y un selector para ser invocado desde otra vista &lt;app-root&gt;&lt;/app-root&gt;. El resto por ahora puedes obviarlo.Y hablando de la plantilla, echemos un vistazo a app.component.html. Contendrá algo así:1234&lt;h1&gt; &lt;!--Interpolación de variables definidas en el modelo del componente--&gt; &#123;&#123; title &#125;&#125;&lt;/h1&gt;Estas son cosas que te resultarán muy familiares como la interpolación Hola Mundo Angular 2 que permite mostrar el famoso app works!, nueva versión del hola mundo. Ya está, el resto ya es sólo usar este componente en el index.html,Recuerda:12&lt;!--Componente raíz de la aplicación--&gt;&lt;app-root&gt;Loading...&lt;/app-root&gt;Angular2 en acciónPara lanzar y probar tu aplicación necesitas otro comando de Angular-CLI. Este comando se ocupa entre otras cosas de todo el proceso necesario para transformar el código TypeScript en JavaScript reconocible por el navegador. También crea un mini servidor estático y además refresca el navegador a cada cambio los fuentes. Un salvavidas para un recién llegado a Angular 2. Teclea en tu terminal:1ng serveSi todo ha ido bien, no siempre ocurre con estas versiones tan verdes, podrás disfrutar de tu primera aplicación con Angular 2 en http://localhost:4200Este vídeo emitido con la colaboración de DesarrolloWeb.com contiene una explicación mas extensa del proceso de trabajo con Angular 2 CLI.Aprender, programar, disfrutar, repetir.– Saludos, Alberto BasaloACTUALIZACIÓNPara una versión más reciente del contenido visita la página Páginas y rutas Angular SPA","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://academia-binaria.com/tag/Tutorial/"},{"name":"CLI","slug":"CLI","permalink":"https://academia-binaria.com/tag/CLI/"}]},{"title":"Angular2, la evolución de la plataforma","slug":"angular2-primeras-impresiones","date":"2016-05-06T13:57:50.000Z","updated":"2016-06-08T06:10:11.000Z","comments":true,"path":"angular2-primeras-impresiones/","link":"","permalink":"https://academia-binaria.com/angular2-primeras-impresiones/","excerpt":"Coincidiendo con la ngConf 2016 acaba de presentarse la esperada Release Candidate de Angular 2. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a AngularJS 1. Y ahora esa ruptura se ha materializado.Los programadores somos muy conscientes de que lo único estable es el cambio. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en Angular2, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.","text":"Coincidiendo con la ngConf 2016 acaba de presentarse la esperada Release Candidate de Angular 2. Nunca antes una versión de una herramienta para desarrolladores había causado tal expectación. Hace ya 18 meses que se había anunciado como una evolución rupturista con respecto a AngularJS 1. Y ahora esa ruptura se ha materializado.Los programadores somos muy conscientes de que lo único estable es el cambio. Asumimos, por experiencia, que los cambios en una tecnología son evoluciones graduales constantes. Pero esto no es así en Angular2, y lo sabemos desde su anuncio hace año y medio. Desde ese momento todos fuimos advertidos de que estábamos ante otra cosa. Algo nuevo que sólo comparte paternidad y nombre con la anterior versión.Un poco de historiaEn septiembre de 2011 me tropecé con AngularJS buscando una alternativa a Backbone y KnockOut. Yo venía del mundo encorsetado del desarrollo para multinacionales basado en tecnologías serias como .Net y Java. Necesitaba un cambio, una apertura… pero con ciertas garantías.En esos tiempos el desarrollo web vivía su eclosión de la mano del HTML5. Era un mundo de startups (ahí estaba yo), de earlyadopters y de picaflores tecnológicos. Buscábamos tecnologías simples, universales y de bajo coste. Muy en la línea con el método empresarial lean. Pero el riesgo de escoger el framework perdedor era enorme, y cada pocos meses aparecían o desaparecían candidatos.Angular superó a sus contendientes por dos razones: una fue (rellena aquí con el argumentario técnico que más te satisfaga) y la otra fue Google. Un padrino así abre muchas puertas y da el punto de valor suficiente para alejarte de Oracle o Microsoft sin temor.En enero de 2013 abandoné mi sueño de convertirme en el nuevo Zuckerberg. Volví al viejo sector servicios fundando una empresa de consultoría. Aprovechando los conocimientos y métodos ágiles aprendidos por el camino startup, ofrecimos desarrollos low cost para pequeñas empresas. Para complementar los servicios empecé a impartir cursos sobre estas tecnologías a otros desarrolladores. Al principio sólo acudían freelances y pequeñas consultoras.En marzo de 2015 tuve los primeros contactos con grandes empresas tanto a nivel docente como consultor. Volví a un mundo familiar pero con una tecnología distinta. AngularJS había crecido de manera exponencial en número de desarrolladores. Pero ahora estaba jugando en las grandes ligas.Y de repente aparecieron los problemas.Dos problemasEl lenguajeJavaScript es dinámico, asíncrono y nada modular. Ideal para espíritus libres, pero una amenaza para equipos estrictos. Y necesitas control si vas a migrar grandes aplicaciones de negocio, ERPs , banca, servicios de administración pública.Tampoco se emocionaban los arquitectos de software con las herramientas. Como siempre todo empezó de manera sencilla: ficheros y editores de texto. Luego llegó la minificación, la combinación, el pre y pos procesado, las anotaciones, la documentación, las pruebas… Cada mes era mayor el arsenal de micro herramientas que había que orquestar.La escalabilidadLas aplicaciones empresariales son pesadas en lógica y datos. La falta de un cargador dinámico decente hacía muy difícil reducir el tiempo antes del primer impacto. Una vez lanzadas las aplicaciones iban razonablemente bien.Hasta que alguien creaba informes editables. Con miles de datos de los que preocuparse la técnica del doble binding saturaba los watchers.AngularJS moría de éxito.Dos solucionesEl lenguaje: TypeScriptLa lenta evolución de JavaScript parece haber salido de su hibernación. En el último año disfrutamos ya de las mejoras de ES6 (ES2015) y empezamos a probar ES7 (2016). Pero no es suficiente.Para grandes desarrollos, con miles de líneas de código, toda ayuda es poca. TypeScript asume todas las mejoras y propuestas del más avanzado JS estándar y además aporta tipos. Esa es la principal razón de su elección como lenguaje de cabecera en AngularJS2.Al rededor de esa piedra angular crece el ecosistema de herramientas. Principalmente VSCode que lo aprovecha ofreciendo intellisense y refactoring a la altura de los grandes.La oferta se completa con Interfaces, Generics y otras novedades que harán las delicias de los programadores orientados a objetos.Cabe señalar que TypeScript no es ni mucho menos obligatorio. Se puede desarrollar en ES5 y ES6 sin problemas. Pero la idea, los ejemplos, la documentación y los blogueros haremos que tu vida sea más fácil si escoges TypeScript.La plataforma: renderización, observables, componentes, carga dinámica, SEO, apps, herramientas…El doble binding era el plato estrella de AngularJS, pero salía caro. Así que se replanteó una solución que no requiriese un pull constante preguntando el estado de un montón de variables. Las respuesta vino de la mano de otra colaboración con los de Redmond: ReactiveX. Este cambio será el primero al que te enfrentes si vienes de las conocidas versiones 1.El mismo patrón observable se aplicó también a las comunicaciones HTTP. Nuestra aplicación es ahora un conjunto de streams que emiten eventos. Solo tenemos que suscribirnos y observar el estado cambiante de nuestro modelo. Resultado, aplicaciones hasta cinco veces más rápidas.Los principios de encapsulación, modularidad y reutilización ya estaban en el ADN de AngularJS. Pero no era fácil implementarlos con las viejas directivas. Desde la versión 1.5 disponemos de componentes. Esta versión puente trae una simplificación y una guía sobre como estructurar aplicaciones. En AngularJS 2 van más allá, y tal como habían amenazado, matan al controlador y coronan al componente como nuevo rey del front end.La inyección de dependencias fue uno de los grandes aciertos iniciales de AngularJS 1. Pero con el tiempo se convirtió en una rémora para crear grandes SPAs, pues requería disponer de toda la lógica, todo tu código, desde el primer segundo. Este problema se ha resuelto, aunque de forma demasiado tediosa. Hay margen de mejora en la actual implementación y espero que se vaya simplificando.Uno de los pocos puntos débiles de AngularJS, y otros frameworks client side, era la dificultad para la indexación SEO on site. La solución normalmente pasaba por algún tipo de prerenderizado más o menos engorroso. Con la aparición de Angular Universal, podemos ejecutar Angular en el servidor. Esto abre las puertas al SEO y a la reducción de la espera en la primera visita.Las aplicaciones híbridas han sido la solución low cost para que cualquier empresa accediese a los elitistas mercados de aplicaciones para móviles. Pero la solución no era perfecta. Con el Angular Mobile Tookit se ofrecen aplicaciones progresivas que compiten en rendimiento y funcionalidad con las nativas.Poner en marcha y depurar una aplicación moderna de gran tamaño requiere herramientas a la altura. La oferta en este caso es total:Angular CLI una herramienta en línea de comandos para generar aplicaciones preconfiguradasAugury para depurar y visualizar en el navegador el estado del programaProtractor para los tests e2eGuías de estilo y analizadores de código…Una alternativaReact, la propuesta de Facebook para el desarrollo web, es una herramienta formidable. Rápido en ejecución, más cercano al estándar JS y mucho menos exigente en cuanto a herramientas.Parte con la enorme desventaja numérica que supone el más de un millón de programadores que ya conocen AngularJS y el ecosistema de librerías, componentes y material docente que ha surgido a su alrededor.Será por esto último que aún no ha enganchado en la gran empresa. Por tanto aún no tira de ofertas de trabajo ni genera el ruido de la apuesta de Google. Eso sí, merece mucho la pena conocerlo, e incluso incorporarlo en algún caso junto a Angular 2.Angular 2 no es plataforma para aficionadosEl resumen es que AngularJS 1.x ha mutado de framework a plataforma en Angular 2. En este sentido estará cada vez más orientada a grandes desarrollos empresariales, y a salir definitivamente del navegador y ocupar servidores, escritorios y teléfonos.Seguro que requiere un gran esfuerzo de aprendizaje por su novedades radicales. Seguro que por el camino habrá giros por su bisoñez y amplitud. Pero seguro que estamos ante la plataforma de desarrollo empresarial con mejor futuro. De momento.En esta presentación tienes un resumen rápido de mis impresiones acerca de Angular2, y de cómo empezar a programar aplicaciones universales.","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Angular2","slug":"Angular2","permalink":"https://academia-binaria.com/tag/Angular2/"}]},{"title":"Node 6.0.0 actualización con nvm","slug":"node-6-0-0-actualizacion-con-nvm","date":"2016-05-05T07:39:40.000Z","updated":"2016-05-05T08:02:26.000Z","comments":true,"path":"node-6-0-0-actualizacion-con-nvm/","link":"","permalink":"https://academia-binaria.com/node-6-0-0-actualizacion-con-nvm/","excerpt":"","text":"Acabamos de recibir la buena noticia de la versión 6 de NodeJS. En este caso con mejoras de rendimiento e incorporación de sintaxis de ES6. ¿Cómo obtener esta nueva versión?. Y sobretodo, ¿cómo manejar la convivencia de distintas versiones? La ayuda se llama nvmEstos son los pasos que has de seguir para instalar la herramienta.Se recomienda desinstalar las versiones de node y npm instaladas previamente. No es obligatorio.LINUX &amp; OS X1- Comprobamos que tenemos instaladas las dependencias1.1 - Dependencias Linux12sudo apt-get updatesudo apt-get install build-essential1.2 -Dependencias OSX (herramientas de linea de comandos para XCode)1xcode-select --install2- Descargamos y ejecutamos el script de instalación1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash3- Comprobamos que está instalado NVM1command -v nvmdebe devolver nvm4- Instalamos la versión de Node que deseamos1nvm install 6.0.05- Elegimos la versión de Node instalada que deseamos usar1nvm use 6.0.0WINDOWSPara Windows no existe una versión nativa de nvm, pero si hay dos opciones para gestionar las versiones de node instaladas.1- nvm-windowshttps://github.com/coreybutler/nvm-windowsEs un wrapper de npm para windows, el instalador se encuentra en la URL (https://github.com/coreybutler/nvm/releases).Los comandos para instalar y la versión de Node son los mismos que en Linux y OSX.2- nodistEs un gestor de versiones parecido a NVM solo para WindowsLa URL del instalador (https://github.com/marcelklehr/nodist/releases/download/v0.7.2/NodistSetup-v0.7.2.exe).Los comandos se encuentran en la documentación. (https://github.com/marcelklehr/nodist)","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"https://academia-binaria.com/tag/NodeJS/"}]},{"title":"npm: de instalador a publicador","slug":"npm-de-instalador-a-publicador","date":"2016-04-18T14:07:46.000Z","updated":"2016-04-19T05:01:25.000Z","comments":true,"path":"npm-de-instalador-a-publicador/","link":"","permalink":"https://academia-binaria.com/npm-de-instalador-a-publicador/","excerpt":"","text":"Seguro que estás harto de repetir la mítica instrucción npm install paquete-x Pero, ¿has pensado en publicar tus propios módulos?. Es muy recomendable crear soluciones distribuidas y muy fácil publicarlas en npm.Sigue este proceso y te convertirás en un creador de paquetes para npm :ProgramaTodo empieza por tener una necesidad y resolverla encapsulando su código en un módulo. Por supuesto que ese módulo puede requerir paquetes externos. Y por supuesto que tu código puede, y debe, escribirse en varios módulos.Antes de continuar vamos a fijar un par de conceptos:- módulo: Fichero .js que exporta un funcionalidad y oculta su implementación.- paquete: Uno o más módulos, con sus dependientes de otros paquetes que proponen una solución reutilizable.Conocidos los ingredientes, la receta es sencilla:Debes crear un proyecto para el paquete que vas a publicar.Has de subir el código a un repositorio público.Y debes rellenar convenientemente el package.json de tu proyecto.Este es un ejemplo que he creado y publicado en github que te puede servir de base.Presta especial atención al nombrado de tu proyecto porque ha de ser único en el repositorio de npm. Para reducir riesgos de colisiones de nombre te recomiendo que utilices un prefijo con tus iniciales o las de tu empresa.No te olvides de incluir un juego de pruebas y documentación necesaria para sus uso.PublicaPuedes descargar librerías y herramienta desde el repositorio de npm de forma anónima. De hecho, eso es lo más corriente. Pero, como era de esperar, tienes que registrarte para poder publicar contenido. El proceso de registro vía web es sencillo y grátis.Una vez verificado puedes hacer login en la web. Pero también en la terminal de tu ordenador: npm login te pedirá el nombre de usuario y contraseña. A partir de es momento estás identificado y puedes usar las herramientas de autor:1npm publishPuedes encontrar más información acerca de este mega comando en la documentación de npmjs. Pero siguiendo la máxima de cuanto menos, mejor, la herramienta hará con sus valores por defecto un publicación y actualización limpias.La clave está en que tu fichero de configuración package.json sea correcto y lo más completo posible. Escribe un completo readme.md que se convertirá en portada de tu paquete en el repositorio de npm. Mira en mi ejemplo cómo el contenido subido a github se transforma y se ve en la página de información de npm.Comprueba en un directorio vacío que npm install nombre-de-tu-paquete descarga todo lo necesario… y tómate un café mientras ves crecer la hierba y las estadísticas de descargas.ActualizaCon el tiempo mejorarás y corregirás tu solución. Te recomiendo que sigas el patrón de nombrado de versiones semántico:x.y.z = 1.2.3 = ruptura.mejora.parcheEs bueno que etiquetes tu repositorio con estas mismas versiones para que, una vez desplegadas, se encuentre con facilidad en github.12git tag 0.1.2git push --tagsDisfrutaFinalmente podrás utilizar ese código en todas tus aplicaciones. Sería fantástico que además otros lo encontrasen útil. Y mejor aún si te ayudan o al menos te proponen mejoras. Pero en cualquier caso siempre habrás ganado. El esfuerzo analítico que requiere se cobra con creces: dividiendo el problema, creando micro soluciones eficientes y reutilizando código siempre es rentable.","categories":[{"name":"Avanzado","slug":"Avanzado","permalink":"https://academia-binaria.com/categories/Avanzado/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"https://academia-binaria.com/tag/NodeJS/"}]},{"title":"Soluciones BackEnd 2016","slug":"soluciones-backend-2016","date":"2016-03-21T10:50:58.000Z","updated":"2016-04-01T06:02:55.000Z","comments":true,"path":"soluciones-backend-2016/","link":"","permalink":"https://academia-binaria.com/soluciones-backend-2016/","excerpt":"","text":"Las soluciones JavaScript para el servidor que marcan tendencia en el desarrollo back end durante este 2016. Continuación de la saga que iniciamos con FrontEdge.Mi apuesta de mercado sigue empezando por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido ES6. En el lado del servidor destaco la disponibilidad de Promesas de forma nativa..Las aplicaciones crecen y se controlan por su API.Así que este es el punto al que más atención debes prestarle. Por supuesto que hay que cumplir con el estándar REST y hay que documentar todo nuestro código. Pero para ser más productivo y mantener actualizado el sistema, te propongo que uses RAML. Un lenguaje para documentar APIs que con las herramientas adecuadas permite la generación de pruebas, esqueletos de aplicaciones e infraestructura.El ya viejo conocido NodeJS se ha modernizado y a partir de la versión 4, especialmente en la 5, admite la mayor parte de la sintaxis ES6. Además ha mejorado su velocidad en un 25% gracias a la actualización del motor V8 que procesa internamente el JavaScript.En la base de datos irrumpe con fuerza la nueva versión de MongoDB 3.2, que incorpora grandes novedades como: sistema de almacenamiento más rápido, índices parciales, validación de esquema y el esperado join entre colecciones .En esta presentación tienes más información acerca de lo que llamo backEdge : tecnología utilizable, de última generación y con enorme potencial.En este video tienes la charla que di con o que llamo Desarrollo Web presentando las tendencias tecnológicas del 2016.","categories":[{"name":"Opinión","slug":"Opinion","permalink":"https://academia-binaria.com/categories/Opinion/"}],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://academia-binaria.com/tag/MongoDB/"},{"name":"NodeJS","slug":"NodeJS","permalink":"https://academia-binaria.com/tag/NodeJS/"},{"name":"BackEnd","slug":"BackEnd","permalink":"https://academia-binaria.com/tag/BackEnd/"}]},{"title":"Soluciones FrontEnd 2016","slug":"soluciones-frontend-2016","date":"2016-01-14T09:39:32.000Z","updated":"2016-01-14T10:17:31.000Z","comments":true,"path":"soluciones-frontend-2016/","link":"","permalink":"https://academia-binaria.com/soluciones-frontend-2016/","excerpt":"","text":"Inicio el año proponiendo una selección de tecnologías que serán tendencia en el desarrollo front end durante este 2016.Mi apuesta de mercado empieza por la base, el lenguaje JavaScript. En concreto su última y muy necesaria versión: el conocido ES6. Tras siete años desde la anterior gran revisión, el éxito y la popularidad de JS no podía esperar más. Y tu tampoco debes esperar más para conocerlo y usarlo.Existe una creciente necesidad de dependencias externas en nuestra aplicaciones y sobre todo incorporar librerías provenientes de otros entornos y desarrolladas con variantes de JS. Para administrar todo ello propongo JSPM, que se incorporará definitivamente a nuestro toolbox durante el 2016.De entre las librerías y frameworks disponibles, AngularJS continuará siendo el rey. Este viejo conocido está creciendo en ya en grandes empresas, banca y administraciones públicas. Mientras esperamos la gloriosa venida de la versión 2.0, tenemos la oportunidad de adecuar nuestro estilo de programación y desarrollar de manera mas limpia con la versión puente AngularJS1.5En la parte visual, el look &amp; feel propuesto por Google con Material Design es un éxito de aceptación para el desarrollo de aplicaciones empresariales. La librería AngularMaterial es una implementación para Angular de dicha especificación gráfica. Moderno y con enorme potencial.En esta presentación tienes más información acerca de lo que llamo frontEdge : tecnología utilizable, de última generación y con enorme potencial.Presentación frontEdgeSi tienes tiempo, mira este vídeo con una charla en la que comentamos estas y otras tecnologías para programadores.video frontEdge","categories":[{"name":"Opinión","slug":"Opinion","permalink":"https://academia-binaria.com/categories/Opinion/"}],"tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"https://academia-binaria.com/tag/AngularJS/"},{"name":"FrontEnd","slug":"FrontEnd","permalink":"https://academia-binaria.com/tag/FrontEnd/"}]},{"title":"7 formas de incluir Bootstrap en nuestro proyecto","slug":"formas","date":"2015-11-12T14:40:12.000Z","updated":"2015-11-12T15:55:15.000Z","comments":true,"path":"formas/","link":"","permalink":"https://academia-binaria.com/formas/","excerpt":"","text":"1- Descargando los archivosHaz clic en el botón “Download Bootstrap” y se descargará una carpeta comprimida, al descomprimirla te encontrarás las versiones compiladas y minificadas de Bootstrap así como los iconos que utiliza:12345678910111213141516171819bootstrap/├── css/│ ├── bootstrap.css│ ├── bootstrap.css.map│ ├── bootstrap.min.css│ ├── bootstrap.min.css.map│ ├── bootstrap-theme.css│ ├── bootstrap-theme.css.map│ ├── bootstrap-theme.min.css│ └── bootstrap-theme.min.css.map├── js/│ ├── bootstrap.js│ └── bootstrap.min.js└── fonts/ ├── glyphicons-halflings-regular.eot ├── glyphicons-halflings-regular.svg ├── glyphicons-halflings-regular.ttf ├── glyphicons-halflings-regular.woff └── glyphicons-halflings-regular.woff22- Para usuarios de GitHubBootstrap es un proyecto en código abierto así que puedes clonar o hacer fork desde GitHub3- Código fuente originalLo obtienes al hacer clic en el botón “Download source”. Lo que obtienes son los archivos LESS y Javascript originales. Esta opción requiere Grunt y Node.js y se estructura dentro de la siguiente manera:12345678910bootstrap/├── less/├── js/├── fonts/├── dist/│ ├── css/│ ├── js/│ └── fonts/└── docs/ └── examples/4- Fans de BowerSi tenemos Git y Bower instalado simplemente debes teclear en tu terminal:1$ bower install bootstrapY el pajarito hará todo el trabajo.5- NPM InstallTan fácil como con Bower solo que esta vez debes teclear en tu terminal:1$ npm install bootstrap6- Versión en SASSA pesar de que Bootstrap 3 fue escrito en LESS (aspecto que cambiará en la versión 4, que será en SASS), existe una versión para SASS que puedes descargar en el botón “Download SASS” para facilitar su inclusión en proyectos en Rails, Compass o solo SASS.7- CDNPor último, si no quieres descargarte nada puedes utilizar los links del proveedor de CDN y referenciarlos en tu HTML:12345678&lt;!-- CSS --&gt;&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" integrity=\"sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\" crossorigin=\"anonymous\"&gt;&lt;!-- Tema opcional --&gt;&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\" integrity=\"sha384-aUGj/X2zp5rLCbBxumKTCw2Z50WgIr1vs/PFN4praOTvYXWlVyh2UtNUU0KAUhAX\" crossorigin=\"anonymous\"&gt;&lt;!-- JavaScript --&gt;&lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\" integrity=\"sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;Esta es la manera más fácil pero no podrás trabajar sin conexión a internet.","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Bootstrap","slug":"Bootstrap","permalink":"https://academia-binaria.com/tag/Bootstrap/"}]},{"title":"Introducción a Bootstrap","slug":"introduccion-a-bootstrap","date":"2015-11-05T16:44:55.000Z","updated":"2015-11-12T14:56:16.000Z","comments":true,"path":"introduccion-a-bootstrap/","link":"","permalink":"https://academia-binaria.com/introduccion-a-bootstrap/","excerpt":"","text":"Bootstrap es un conjunto de archivos HTML, CSS y Javascript bien definidos y exhaustivamente testados que componen una sólida estructura sobre la cual construir tu proyecto web o aplicación.¿Por qué debo utilizar Bootstrap en mi proyecto?Empezar un proyecto web desde cero puede ser laborioso y te puede llevar bastante tiempo mientras vas construyendo los diferentes componentes y testándolos en los diversos navegadores.Bootstrap te provee de una biblioteca de componentes reusables que puedes usar en cada proyecto, desde un sistema de rejilla o “grid”, una barra de navegación, botones o estilos tipográficos, todos ellos preparados para funcionar en todos los navegadores y adaptarse a todos los tipos de pantalla, tanto de móvil, como tablet o escritorio.Con Bootstrap te ahorras todo el trabajo inicial y además tienes un código revisado y testado que además es mantenible y escalable, una sólida estructura sobre la cual construir tu proyecto.Práctica comúnHoy en día su uso se encuentra muy extendido, y no es extraño encontrarse ofertas de trabajo en las cuales además de conocimientos de HTML y CSS y Javascript se exige el dominio de Bootstrap. La suave curva de aprendizaje hace que sea una herramienta sencilla de usar por todos los miembros de un equipo de desarrollo, lo que incrementa la productividad.¿Por dónde empezar?Para descargar la última versión debes acudir a la página http://getbootstrap.com/ y pulsar el botón “Download Bootstrap” una vez hecho esto te dirigirá a la sección “Download” de la página. Hay diferentes maneras de integrar Bootstrap en tu proyecto, en este artículo hablaremos de la primera de ellas que es descargarnos la carpeta comprimida.En el apartado “Bootstrap” de la sección “Download” te encontrarás otra vez el botón de “Download Bootstrap”, esta vez al clicarlo se descargará una carpeta comprimida que se compone de:Una carpeta ”css”: Incluye todos los estilos predefinidos por Bootstrap.Una carpeta “fonts”: Incluye una fuente de iconos svg listos para usar.Una carpeta “js”: Con todo el javascript necesario para que los componentes y efectos de Bootstrap funcionen.Una práctica común es empezar el proyecto con estas carpetas e incluir a través de tu HTML los archivos que vas a utilizar. Normalmente bootstrap.min.css y bootstrap.min.js. Además deberás incluir JQuery en tu proyecto para el correcto funcionamiento de los plugins.Una vez hecho esto te debería quedar un HTML inicial parecido a esto:12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;!-- Los 3 metatags de arriba deben ir al principio del head --&gt; &lt;title&gt;Mi primer tema con Bootstrap&lt;/title&gt; &lt;!-- Incluye el css de Bootstrap --&gt; &lt;link href=\"css/bootstrap.min.css\" rel=\"stylesheet\"&gt; &lt;!-- Incluye nuestro propio CSS --&gt; &lt;link href=\"css/styles.css\" rel=\"stylesheet\"&gt; &lt;!-- Este código es necesario si queremos dar soporte a IE8 --&gt; &lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hola!&lt;/h1&gt; &lt;!-- Incluye jQuery --&gt; &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"&gt;&lt;/script&gt; &lt;!-- Incluye el JS de Bootstrap --&gt; &lt;script src=\"js/bootstrap.min.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;Con esto ya estarías listo para empezar tu proyecto con Bootstrap y, con la ayuda de la documentación de Bootstrap, ir incluyendo los módulos y clases que necesites.Cómo norma general nunca modifiques los archivos originales de Bootstrap, para añadir tus estilos propios o modificar los de bootstrap.css lo mejor es que crees una hoja de estilos independiente de bootstrap.css, lo mismo para el archivo bootstrap.js, así para actualizar tu versión de Bootstrap simplemente tendrás que descargarte la última versión y sustituir los archivos bootstrap.min.css y bootstrap.min.js por los de la nueva versión.En siguientes artículos profundizaremos un poco mas sobre las diferentes opciones que tienes para incluir Bootstrap en tu proyecto.","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"Bootstrap","slug":"Bootstrap","permalink":"https://academia-binaria.com/tag/Bootstrap/"}]},{"title":"Para qué puedo usar NodeJS","slug":"para-que-puedo-usar-nodejs","date":"2015-08-20T12:28:01.000Z","updated":"2015-08-20T12:53:50.000Z","comments":true,"path":"para-que-puedo-usar-nodejs/","link":"","permalink":"https://academia-binaria.com/para-que-puedo-usar-nodejs/","excerpt":"","text":"NodeJS se ha hecho muy popular por dos razones relacionas: potencia y escalabilidad. Ambas derivadas de su modelo de ejecución asíncrona no bloqueante.Se basa en el lenguaje JavaScript: sencillo, versátil y ampliamente conocido. NodeJS complementa a JS con librerías de sistema que sacan un gran rendimiento a los ejecutables.El uso más inmediato de NodeJS está en la programación de servicios web. Tanto en la creación de APIs como sirviendo páginas tradicionales. Esto le ha valido que se le conozca como el JavaScript del lado del servidor.Pero, más allá de la web destaca en entornos empresariales. Se puede utilizar para construir aplicaciones de escritorio con iniciativas como (NW)[] y (electron)[]. También y sobre todo se usa para scripts de administración o monitorización en departamentos IT. Pequeños proyectos aplicables a sistemas de ficheros, máquinas y servidores. Y una derivada de esto son los proyectos de ayuda al desarrollador que se integran en los development workflows de cada vez más empresas de programación en cualquier lenguaje.Dada la capacidad de procesamiento asíncrono es una herramienta ideal para generar sistemas que respondan en tiempo real. Y por su escasa demanda de hardware se usa también en proyectos de Internet of ThingsEn definitiva podemos decir que NodeJS y su ecosistema proponen un nuevo paradigma de desarrollo que eleva a JavaScript como lenguaje de propósito general.","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"https://academia-binaria.com/tag/NodeJS/"}]},{"title":"Por qué AngularJS","slug":"por-que-angularjs","date":"2015-08-18T06:31:24.000Z","updated":"2015-08-20T12:45:22.000Z","comments":true,"path":"por-que-angularjs/","link":"","permalink":"https://academia-binaria.com/por-que-angularjs/","excerpt":"","text":"En este vídeo charlamos sobre AngularJS y el momento actual de desarrollo, y el porqué de su éxito.Video en YouTube","categories":[{"name":"Opinión","slug":"Opinion","permalink":"https://academia-binaria.com/categories/Opinion/"}],"tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"https://academia-binaria.com/tag/AngularJS/"}]},{"title":"Introducción a MongoDB","slug":"introduccion-a-mongodb","date":"2015-08-15T09:00:54.000Z","updated":"2015-08-25T04:26:25.000Z","comments":true,"path":"introduccion-a-mongodb/","link":"","permalink":"https://academia-binaria.com/introduccion-a-mongodb/","excerpt":"","text":"¿Qué es MongoDB?MongoDB es una base de datos orientada a documentos con esquema dinámico. Esto le permite ofrecer un alto rendimiento y facilita el desarrollo de aplicaciones. A cambio nos impide tener Joins y Transacciones algo muy habitual en bases de datos relacionales, pero sin lo que se puede vivir.¿De qué se compone?Después de su instalación disponemos en un directorio de varios ejecutables que componen la aplicación servidora y sus herramientas. El ejecutable fundamental será mongod que es el servidor, es el motor de manejo de datos. Para acceder al servidor se nos ofrece una aplicación de consola llamada mongo. Este es un intérprete de JavaScript y con él, podemos comunicarnos con la base de datos.¿Cómo funciona?MongoDB almacena documentos en formato JSON. Bueno realmente lo hace en BSON que es un superconjunto de JSON. BSON es un formato binario que optimiza espacio, rendimiento y aporta funciones extra sobre JSON. Pero esencialmente para nosotros como usuarios toda la entrada salida es en JSON.Como los documentos se almacenan en JSON y la consola es un interprete JavaScript, la verdad es que la consola ofrece una potencia enorme para realizar operaciones de inserción, selección y manipulación de datos. Cabe destacar que la consola es un programa e intérprete síncrono. Con algunos drivers como el de NodeJS el trabajo es puramente asíncrono.¿Se parece a SQL?Si vienes del mundo relacional, cuando llegues a Mongo tendrás que ajustar tu punto de mira al definir tus estructuras de datos. Como una primera guía te diré que hay una ligera equivalencia entre Mongo y los SQLSQL -&gt; MongoDBDataBase -&gt; DataBaseTable -&gt; CollectionRow -&gt; DocumentField -&gt; PropertyJoin -&gt; EmbeddedIndex -&gt; IndexLa enorme diferencia está en que en una colección se pueden guardar documentos con esquemas distintos, y que esos esquemas pueden incluir documentos complejos, como arrays y subdocumentos. A esta falta de rigor al definir el esquema se la conoceen inglés como schemaless. Estamos ante una base de datos que almacena documentos de esquema dinámico.Lo anterior es sin duda un valor diferencial a favor de Mongo pues facilita mucho el desarrollo y evolución de las aplicaciones. Otra cosa es la ausencia de Joins y Transacciones entre colecciones que obliga a diseñar y codificar de manera metódica para garantizar eficiencia e integridad en las consultas. La sugerencia es aprovechar sus fortalezas para minimizar las debilidades.¿Y entonces?MongoDB tienes campos de aplicación en los que supera a los sistemas relacionales en potencia y facilidad de desarrollo. Pero, hay que saber escoger la herramienta mas adecuada para cada caso. Ahora que ya sabes un poco de que va esto de MongoDB puedes empezar a buscar aplicaciones dónde seguro que le sentará como un guante.","categories":[{"name":"Introducción","slug":"Introduccion","permalink":"https://academia-binaria.com/categories/Introduccion/"}],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://academia-binaria.com/tag/MongoDB/"}]},{"title":"ng* el ecosistema de AngularJS","slug":"ng-el-ecosistema-de-angularjs","date":"2015-08-15T08:55:14.000Z","updated":"2015-08-20T12:45:59.000Z","comments":true,"path":"ng-el-ecosistema-de-angularjs/","link":"","permalink":"https://academia-binaria.com/ng-el-ecosistema-de-angularjs/","excerpt":"","text":"Lista de componentes para ampliar AngularJS que te ayudarán a mejorar tus proyectos.AngularUI: Antes de programar nada mira si estos chicos ya lo han hecho antes: utilidades, componentes visuales, bootstrap y…ng-grid: Si tienes que mostrar datos en forma de tabla, este es tu punto de partida.ngProgress: Para incorporar una barra de progreso que informe a tus usuarios de la actividad de la aplicación.RestAngular: Librería especializada para consumir servicios REST de manera avanzada e intensiva.angular-aop: El AOP encapsula los Aspectos del código relacionados con instrumentación y seguimiento, liberándolo para la lógica de negocio.textAngular: Editor de textos cpn doble binding, formatos, estilos…angular-translate: Tener una interfaz en distintos idiomas es una tarea cada vez mas común… y complicada. Esta librería es un gran ayuda.angular-field-splitter: Útil para descomponer un campo lógico en varios inputs físicos: Códigos de cuenta, teléfonos, fechasangular-gm: Para mostrar mapas de Google de forma dinámica enlazados con tu modelong-slider: Una barra con punteros para selecionar rangos de forma visual","categories":[{"name":"Avanzado","slug":"Avanzado","permalink":"https://academia-binaria.com/categories/Avanzado/"}],"tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"https://academia-binaria.com/tag/AngularJS/"}]}]}