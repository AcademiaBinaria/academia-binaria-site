<!-- # 3 Interceptores

Angular ha incorporado recientemente el concepto de interceptor que había funcionado muy bien en *AngularJS*. Ahora los interceptores son clases con métodos que interceptan (de ahí su nombre) todas las peticiones http realizadas. En esos métodos puedes poner lógica que modifique, cancele o simplemente controle el ciclo petición/respuesta de cada llamada.

## 3.1 Implementación de la interfaz

Aprovechando el **TypeScript** y sus características de programación orientada a objetos, en **Angular** han optado por obligarnos a cumplir _interfaces_ y como contraparte al cumplir ese contrato invocan a nuestro código en circunstancias controladas. ¿Cómo se hace?.

Para empezar hay que crear un servicio inyectable en un módulo general o en el raíz. Yo he creado el `CatchInterceptorService` en `lib/catch-interceptor.service.ts`. Ten a mano [este enlace](https://github.com/AcademiaBinaria/angular5/blob/master/6-http/cash-flow/src/app/lib/catch-interceptor.service.ts) para seguir el retos del artículo. Su propósito será capturar las respuestas y gestionar de forma centralizada los errores que se obtengan en un único lugar. Como cualquier otro inyectable habrá que proveerlo en un módulo, yo lo hice en el raíz. Si abres el `app.module.ts` verás un sistema de aprovisionamiento algo complejo.

```typescript
providers: [
  {
    provide: HTTP_INTERCEPTORS,
    useClass: CatchInterceptorService,
    multi: true
  }
];
```

La dependencia que se solicitará es `HTTP_INTERCEPTORS`, y cuando alguien lo haga (son los servicios de http de Angular a bajo nivel) le será inyectada una instancia de la clase `CatchInterceptorService`.

> Es decir, tu clase interceptora será usada sin que el que la reclame conozca siquiera su nombre. Pero esto es la clave de la inversión de control en la inyección de dependencias.

El parámetro `multi: true`, indica que puedes crear tantas clases de interceptación como quieras. Esto permite tener múltiples interceptores especializados.

## 3.2 El método de interceptación

Al implementar la interfaz `HttpInterceptor` estás obligado a crear un método con una firma como esta: `public intercept(req, next)`. Este será invocado para cada llamada que hecha con `httpClient`. A esta función se la conoce como _función interceptora_ y ya ves que tiene unos argumentos y un tipo de retorno bien definidos... y algo complejos a primera vista. Veamos una implementación mínimalista.

```typescript
public intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
  return next.handle(req);
}
```

Lo que dice es que recibe un puntero a la petición en curso, `req: HttpRequest<any>`, y otro a la siguiente clase que la procese,`next: HttpHandler`. También obliga a devolver un observable; lógico porque esto es en último término a lo que te suscribes en tu código de negocio. Afortunadamente el método `handle(req: HttpRequest<any>)` de cualquiera que sea la siguiente clase procesadora retorna un observable. Y así se da continuidad al flujo de la llamada.

## 3.3 Los operadores observables

Además de tipos de datos como `Observable<any>` con métodos clave como `.subscribe(ok, err, end)`, la librería _RxJs_ viene cargadita de [operadores](http://reactivex.io/documentation/operators.html) que... operan sobre instancias de los observables. Esos operadores son funciones que reciben y retornan observables.

Podemos ver a los observables como _streams_, es decir una corriente de datos que circula por una tubería. Los operadores serán funciones que afecten al contenido o al caudal y que se pueden agregar o eliminar ordenadamente de la tubería. Una de esas operaciones se llama `tap`, un grifo.

> Nota: este operador fue anteriormente conocido como `do`.[Ver documentación operador do](http://reactivex.io/documentation/operators/do.html).

La operación `tap` se usa cuando se quiere actuar ante un cambio en el contenido o caudal pero sin cambiarlo. Para mi es adecuada porque lo que pretendo es auditar las llamadas y enterarme de los errores sin tocar absolutamente nada.

En base a todo lo anterior montaré unas sentencias como estas dentro de la función `intercept`:

```typescript
const handledRequest = next.handle(req);
const successCallback = this.interceptResponse.bind(this);
const errorCallback = this.catchError.bind(this);
const interceptionOperator = tap<HttpEvent<any>>(
  successCallback,
  errorCallback
);
return handledRequest.pipe(interceptionOperator);
```

Tómate tu tiempo para revisar cada línea. En primer lugar obtengo un puntero al _stream observable_ que es la petición en curso. Despues asigno dos funciones locales que actuarán como _callbacks_ para cuando lleguen datos o errores respectivamente. Preparo el operador `tap` de la librería observable asignádole ambos _callbacks_ y un tipo de retorno concreto en su genérico. Y por último mediante el método `pipe` engancho el operador a la tubería por la que circula el chorro. Respira y vuelve a leerlo.

> Admito que si es tu primer contacto con este mundo de los observables este codigo pueda resultar complejo. La buena noticia es que este código es una especie de patrón o _snippet_ que puedes reutiliazar para casi cualquier interceptor. Sólo habrá que cambiar el operador y el trabajo interno de sus _callbacks_. 

Con esto tienes un sistema que envía a la consola información extra como la duración de las llamadas. Además inspecciona los errores en un único lugar. Esto puede incluso hacer innecesario que los componentes procesen errores. -->